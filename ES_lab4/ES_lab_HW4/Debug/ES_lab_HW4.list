
ES_lab_HW4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000111c0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a4  08011350  08011350  00012350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011bf4  08011bf4  00013224  2**0
                  CONTENTS
  4 .ARM          00000008  08011bf4  08011bf4  00012bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011bfc  08011bfc  00013224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011bfc  08011bfc  00012bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011c00  08011c00  00012c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000224  20000000  08011c04  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003744  20000224  08011e28  00013224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003968  08011e28  00013968  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e1a9  00000000  00000000  00013254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000066dd  00000000  00000000  000413fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002798  00000000  00000000  00047ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e88  00000000  00000000  0004a278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031891  00000000  00000000  0004c100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000313fd  00000000  00000000  0007d991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001161c3  00000000  00000000  000aed8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c4f51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bbfc  00000000  00000000  001c4f94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001d0b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000224 	.word	0x20000224
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011338 	.word	0x08011338

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000228 	.word	0x20000228
 80001cc:	08011338 	.word	0x08011338

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000fe4:	b5b0      	push	{r4, r5, r7, lr}
 8000fe6:	b08a      	sub	sp, #40	@ 0x28
 8000fe8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueGGG";
 8000fea:	4b69      	ldr	r3, [pc, #420]	@ (8001190 <MX_BlueNRG_MS_Init+0x1ac>)
 8000fec:	613b      	str	r3, [r7, #16]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 8000fee:	f000 f8f9 	bl	80011e4 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f001 fe26 	bl	8002c44 <BSP_PB_GetState>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	4b65      	ldr	r3, [pc, #404]	@ (8001194 <MX_BlueNRG_MS_Init+0x1b0>)
 8000ffe:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 8001000:	2100      	movs	r1, #0
 8001002:	4865      	ldr	r0, [pc, #404]	@ (8001198 <MX_BlueNRG_MS_Init+0x1b4>)
 8001004:	f007 ffb2 	bl	8008f6c <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8001008:	1dba      	adds	r2, r7, #6
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f007 fe20 	bl	8008c56 <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 8001016:	f007 fe62 	bl	8008cde <hci_reset>
  HAL_Delay(100);
 800101a:	2064      	movs	r0, #100	@ 0x64
 800101c:	f002 fb7e 	bl	800371c <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
 8001020:	7a3b      	ldrb	r3, [r7, #8]
 8001022:	4619      	mov	r1, r3
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	461a      	mov	r2, r3
 8001028:	485c      	ldr	r0, [pc, #368]	@ (800119c <MX_BlueNRG_MS_Init+0x1b8>)
 800102a:	f00c fcdb 	bl	800d9e4 <iprintf>
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 800102e:	7a3b      	ldrb	r3, [r7, #8]
 8001030:	2b30      	cmp	r3, #48	@ 0x30
 8001032:	d902      	bls.n	800103a <MX_BlueNRG_MS_Init+0x56>
    bnrg_expansion_board = IDB05A1;
 8001034:	4b5a      	ldr	r3, [pc, #360]	@ (80011a0 <MX_BlueNRG_MS_Init+0x1bc>)
 8001036:	2201      	movs	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 800103a:	f107 0209 	add.w	r2, r7, #9
 800103e:	4b59      	ldr	r3, [pc, #356]	@ (80011a4 <MX_BlueNRG_MS_Init+0x1c0>)
 8001040:	2106      	movs	r1, #6
 8001042:	2080      	movs	r0, #128	@ 0x80
 8001044:	f007 fd81 	bl	8008b4a <aci_hal_read_config_data>
 8001048:	4603      	mov	r3, r0
 800104a:	617b      	str	r3, [r7, #20]

  if (ret) {
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <MX_BlueNRG_MS_Init+0x74>
    PRINTF("Read Static Random address failed.\n");
 8001052:	4855      	ldr	r0, [pc, #340]	@ (80011a8 <MX_BlueNRG_MS_Init+0x1c4>)
 8001054:	f00c fd2e 	bl	800dab4 <puts>
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8001058:	4b52      	ldr	r3, [pc, #328]	@ (80011a4 <MX_BlueNRG_MS_Init+0x1c0>)
 800105a:	795b      	ldrb	r3, [r3, #5]
 800105c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001060:	2bc0      	cmp	r3, #192	@ 0xc0
 8001062:	d004      	beq.n	800106e <MX_BlueNRG_MS_Init+0x8a>
    PRINTF("Static Random address not well formed.\n");
 8001064:	4851      	ldr	r0, [pc, #324]	@ (80011ac <MX_BlueNRG_MS_Init+0x1c8>)
 8001066:	f00c fd25 	bl	800dab4 <puts>
    while(1);
 800106a:	bf00      	nop
 800106c:	e7fd      	b.n	800106a <MX_BlueNRG_MS_Init+0x86>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 800106e:	f007 fb38 	bl	80086e2 <aci_gatt_init>
 8001072:	4603      	mov	r3, r0
 8001074:	617b      	str	r3, [r7, #20]
  if(ret){
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d002      	beq.n	8001082 <MX_BlueNRG_MS_Init+0x9e>
    PRINTF("GATT_Init failed.\n");
 800107c:	484c      	ldr	r0, [pc, #304]	@ (80011b0 <MX_BlueNRG_MS_Init+0x1cc>)
 800107e:	f00c fd19 	bl	800dab4 <puts>
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8001082:	4b47      	ldr	r3, [pc, #284]	@ (80011a0 <MX_BlueNRG_MS_Init+0x1bc>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d110      	bne.n	80010ac <MX_BlueNRG_MS_Init+0xc8>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800108a:	f107 020e 	add.w	r2, r7, #14
 800108e:	f107 030a 	add.w	r3, r7, #10
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	4613      	mov	r3, r2
 800109c:	2207      	movs	r2, #7
 800109e:	2100      	movs	r1, #0
 80010a0:	2001      	movs	r0, #1
 80010a2:	f007 f8f2 	bl	800828a <aci_gap_init_IDB05A1>
 80010a6:	4603      	mov	r3, r0
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	e00a      	b.n	80010c2 <MX_BlueNRG_MS_Init+0xde>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80010ac:	f107 030a 	add.w	r3, r7, #10
 80010b0:	f107 020c 	add.w	r2, r7, #12
 80010b4:	f107 010e 	add.w	r1, r7, #14
 80010b8:	2001      	movs	r0, #1
 80010ba:	f007 f936 	bl	800832a <aci_gap_init_IDB04A1>
 80010be:	4603      	mov	r3, r0
 80010c0:	617b      	str	r3, [r7, #20]
  }
  if (ret != BLE_STATUS_SUCCESS) {
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <MX_BlueNRG_MS_Init+0xea>
    PRINTF("GAP_Init failed.\n");
 80010c8:	483a      	ldr	r0, [pc, #232]	@ (80011b4 <MX_BlueNRG_MS_Init+0x1d0>)
 80010ca:	f00c fcf3 	bl	800dab4 <puts>
  }

  /* Update device x */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 80010ce:	89fc      	ldrh	r4, [r7, #14]
 80010d0:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 80010d2:	6938      	ldr	r0, [r7, #16]
 80010d4:	f7ff f8cc 	bl	8000270 <strlen>
 80010d8:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	4613      	mov	r3, r2
 80010e2:	2200      	movs	r2, #0
 80010e4:	4629      	mov	r1, r5
 80010e6:	4620      	mov	r0, r4
 80010e8:	f007 fc72 	bl	80089d0 <aci_gatt_update_char_value>
 80010ec:	4603      	mov	r3, r0
 80010ee:	617b      	str	r3, [r7, #20]
  if (ret) {
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d004      	beq.n	8001100 <MX_BlueNRG_MS_Init+0x11c>
    PRINTF("aci_gatt_update_char_value failed.\n");
 80010f6:	4830      	ldr	r0, [pc, #192]	@ (80011b8 <MX_BlueNRG_MS_Init+0x1d4>)
 80010f8:	f00c fcdc 	bl	800dab4 <puts>
    while(1);
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <MX_BlueNRG_MS_Init+0x118>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8001100:	2301      	movs	r3, #1
 8001102:	9303      	str	r3, [sp, #12]
 8001104:	4b2d      	ldr	r3, [pc, #180]	@ (80011bc <MX_BlueNRG_MS_Init+0x1d8>)
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	2300      	movs	r3, #0
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	2310      	movs	r3, #16
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2307      	movs	r3, #7
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	2001      	movs	r0, #1
 8001118:	f007 fa3b 	bl	8008592 <aci_gap_set_auth_requirement>
 800111c:	4603      	mov	r3, r0
 800111e:	617b      	str	r3, [r7, #20]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d004      	beq.n	8001130 <MX_BlueNRG_MS_Init+0x14c>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
 8001126:	4826      	ldr	r0, [pc, #152]	@ (80011c0 <MX_BlueNRG_MS_Init+0x1dc>)
 8001128:	f00c fcc4 	bl	800dab4 <puts>
    while(1);
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <MX_BlueNRG_MS_Init+0x148>
  }

  PRINTF("BLE Stack Initialized\n");
 8001130:	4824      	ldr	r0, [pc, #144]	@ (80011c4 <MX_BlueNRG_MS_Init+0x1e0>)
 8001132:	f00c fcbf 	bl	800dab4 <puts>

  // TODO: add my own service
  ret = Add_HWServW2ST_Service();
 8001136:	f000 f883 	bl	8001240 <Add_HWServW2ST_Service>
 800113a:	4603      	mov	r3, r0
 800113c:	617b      	str	r3, [r7, #20]
  if(ret == BLE_STATUS_SUCCESS) {
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10a      	bne.n	800115a <MX_BlueNRG_MS_Init+0x176>
    PRINTF("BlueMS HW service added successfully.\n");
 8001144:	4820      	ldr	r0, [pc, #128]	@ (80011c8 <MX_BlueNRG_MS_Init+0x1e4>)
 8001146:	f00c fcb5 	bl	800dab4 <puts>
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
  }

  ret = Add_SWServW2ST_Service();
 800114a:	f000 f94b 	bl	80013e4 <Add_SWServW2ST_Service>
 800114e:	4603      	mov	r3, r0
 8001150:	617b      	str	r3, [r7, #20]
  if(ret == BLE_STATUS_SUCCESS) {
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d10a      	bne.n	800116e <MX_BlueNRG_MS_Init+0x18a>
 8001158:	e005      	b.n	8001166 <MX_BlueNRG_MS_Init+0x182>
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
 800115a:	6979      	ldr	r1, [r7, #20]
 800115c:	481b      	ldr	r0, [pc, #108]	@ (80011cc <MX_BlueNRG_MS_Init+0x1e8>)
 800115e:	f00c fc41 	bl	800d9e4 <iprintf>
    while(1);
 8001162:	bf00      	nop
 8001164:	e7fd      	b.n	8001162 <MX_BlueNRG_MS_Init+0x17e>
     PRINTF("BlueMS SW service added successfully.\n");
 8001166:	481a      	ldr	r0, [pc, #104]	@ (80011d0 <MX_BlueNRG_MS_Init+0x1ec>)
 8001168:	f00c fca4 	bl	800dab4 <puts>
 800116c:	e005      	b.n	800117a <MX_BlueNRG_MS_Init+0x196>
  } else {
     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
 800116e:	6979      	ldr	r1, [r7, #20]
 8001170:	4816      	ldr	r0, [pc, #88]	@ (80011cc <MX_BlueNRG_MS_Init+0x1e8>)
 8001172:	f00c fc37 	bl	800d9e4 <iprintf>
     while(1);
 8001176:	bf00      	nop
 8001178:	e7fd      	b.n	8001176 <MX_BlueNRG_MS_Init+0x192>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 800117a:	2104      	movs	r1, #4
 800117c:	2001      	movs	r0, #1
 800117e:	f007 fd39 	bl	8008bf4 <aci_hal_set_tx_power_level>
 8001182:	4603      	mov	r3, r0
 8001184:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bdb0      	pop	{r4, r5, r7, pc}
 800118e:	bf00      	nop
 8001190:	08011350 	.word	0x08011350
 8001194:	20000000 	.word	0x20000000
 8001198:	08001811 	.word	0x08001811
 800119c:	08011358 	.word	0x08011358
 80011a0:	20000240 	.word	0x20000240
 80011a4:	20000244 	.word	0x20000244
 80011a8:	0801136c 	.word	0x0801136c
 80011ac:	08011390 	.word	0x08011390
 80011b0:	080113b8 	.word	0x080113b8
 80011b4:	080113cc 	.word	0x080113cc
 80011b8:	080113e0 	.word	0x080113e0
 80011bc:	0001e240 	.word	0x0001e240
 80011c0:	08011404 	.word	0x08011404
 80011c4:	08011434 	.word	0x08011434
 80011c8:	0801144c 	.word	0x0801144c
 80011cc:	08011474 	.word	0x08011474
 80011d0:	080114a4 	.word	0x080114a4

080011d4 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 80011d8:	f000 f812 	bl	8001200 <User_Process>
  hci_user_evt_proc();
 80011dc:	f008 f840 	bl	8009260 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80011e8:	2101      	movs	r1, #1
 80011ea:	2000      	movs	r0, #0
 80011ec:	f001 fcd6 	bl	8002b9c <BSP_PB_Init>
  BSP_LED_Init(LED2);
 80011f0:	2000      	movs	r0, #0
 80011f2:	f001 fc81 	bl	8002af8 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 80011f6:	2000      	movs	r0, #0
 80011f8:	f001 fd82 	bl	8002d00 <BSP_COM_Init>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  if (set_connectable)
 8001204:	4b05      	ldr	r3, [pc, #20]	@ (800121c <User_Process+0x1c>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d004      	beq.n	8001218 <User_Process+0x18>
  {
    Set_DeviceConnectable();
 800120e:	f000 fa73 	bl	80016f8 <Set_DeviceConnectable>
    set_connectable = FALSE;
 8001212:	4b02      	ldr	r3, [pc, #8]	@ (800121c <User_Process+0x1c>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000001 	.word	0x20000001

08001220 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 800122a:	4b04      	ldr	r3, [pc, #16]	@ (800123c <BSP_PB_Callback+0x1c>)
 800122c:	2201      	movs	r2, #1
 800122e:	701a      	strb	r2, [r3, #0]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	2000024a 	.word	0x2000024a

08001240 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b08d      	sub	sp, #52	@ 0x34
 8001244:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8001246:	231b      	movs	r3, #27
 8001248:	713b      	strb	r3, [r7, #4]
 800124a:	23c5      	movs	r3, #197	@ 0xc5
 800124c:	717b      	strb	r3, [r7, #5]
 800124e:	23d5      	movs	r3, #213	@ 0xd5
 8001250:	71bb      	strb	r3, [r7, #6]
 8001252:	23a5      	movs	r3, #165	@ 0xa5
 8001254:	71fb      	strb	r3, [r7, #7]
 8001256:	2302      	movs	r3, #2
 8001258:	723b      	strb	r3, [r7, #8]
 800125a:	2300      	movs	r3, #0
 800125c:	727b      	strb	r3, [r7, #9]
 800125e:	23b4      	movs	r3, #180	@ 0xb4
 8001260:	72bb      	strb	r3, [r7, #10]
 8001262:	239a      	movs	r3, #154	@ 0x9a
 8001264:	72fb      	strb	r3, [r7, #11]
 8001266:	23e1      	movs	r3, #225	@ 0xe1
 8001268:	733b      	strb	r3, [r7, #12]
 800126a:	2311      	movs	r3, #17
 800126c:	737b      	strb	r3, [r7, #13]
 800126e:	2301      	movs	r3, #1
 8001270:	73bb      	strb	r3, [r7, #14]
 8001272:	2300      	movs	r3, #0
 8001274:	73fb      	strb	r3, [r7, #15]
 8001276:	2300      	movs	r3, #0
 8001278:	743b      	strb	r3, [r7, #16]
 800127a:	2300      	movs	r3, #0
 800127c:	747b      	strb	r3, [r7, #17]
 800127e:	2300      	movs	r3, #0
 8001280:	74bb      	strb	r3, [r7, #18]
 8001282:	2300      	movs	r3, #0
 8001284:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8001286:	4b52      	ldr	r3, [pc, #328]	@ (80013d0 <Add_HWServW2ST_Service+0x190>)
 8001288:	461c      	mov	r4, r3
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800128e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8001292:	4b50      	ldr	r3, [pc, #320]	@ (80013d4 <Add_HWServW2ST_Service+0x194>)
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2310      	movs	r3, #16
 8001298:	2201      	movs	r2, #1
 800129a:	494d      	ldr	r1, [pc, #308]	@ (80013d0 <Add_HWServW2ST_Service+0x190>)
 800129c:	2002      	movs	r0, #2
 800129e:	f007 fa43 	bl	8008728 <aci_gatt_add_serv>
 80012a2:	4603      	mov	r3, r0
 80012a4:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80012a6:	7dfb      	ldrb	r3, [r7, #23]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <Add_HWServW2ST_Service+0x70>
    return BLE_STATUS_ERROR;
 80012ac:	2347      	movs	r3, #71	@ 0x47
 80012ae:	e08a      	b.n	80013c6 <Add_HWServW2ST_Service+0x186>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 80012b0:	231b      	movs	r3, #27
 80012b2:	713b      	strb	r3, [r7, #4]
 80012b4:	23c5      	movs	r3, #197	@ 0xc5
 80012b6:	717b      	strb	r3, [r7, #5]
 80012b8:	23d5      	movs	r3, #213	@ 0xd5
 80012ba:	71bb      	strb	r3, [r7, #6]
 80012bc:	23a5      	movs	r3, #165	@ 0xa5
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	2302      	movs	r3, #2
 80012c2:	723b      	strb	r3, [r7, #8]
 80012c4:	2300      	movs	r3, #0
 80012c6:	727b      	strb	r3, [r7, #9]
 80012c8:	2336      	movs	r3, #54	@ 0x36
 80012ca:	72bb      	strb	r3, [r7, #10]
 80012cc:	23ac      	movs	r3, #172	@ 0xac
 80012ce:	72fb      	strb	r3, [r7, #11]
 80012d0:	23e1      	movs	r3, #225	@ 0xe1
 80012d2:	733b      	strb	r3, [r7, #12]
 80012d4:	2311      	movs	r3, #17
 80012d6:	737b      	strb	r3, [r7, #13]
 80012d8:	2301      	movs	r3, #1
 80012da:	73bb      	strb	r3, [r7, #14]
 80012dc:	2300      	movs	r3, #0
 80012de:	73fb      	strb	r3, [r7, #15]
 80012e0:	2300      	movs	r3, #0
 80012e2:	743b      	strb	r3, [r7, #16]
 80012e4:	2300      	movs	r3, #0
 80012e6:	747b      	strb	r3, [r7, #17]
 80012e8:	2300      	movs	r3, #0
 80012ea:	74bb      	strb	r3, [r7, #18]
 80012ec:	2300      	movs	r3, #0
 80012ee:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 80012f0:	7cbb      	ldrb	r3, [r7, #18]
 80012f2:	f043 0304 	orr.w	r3, r3, #4
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 80012fa:	7cbb      	ldrb	r3, [r7, #18]
 80012fc:	f043 0310 	orr.w	r3, r3, #16
 8001300:	b2db      	uxtb	r3, r3
 8001302:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001304:	4b34      	ldr	r3, [pc, #208]	@ (80013d8 <Add_HWServW2ST_Service+0x198>)
 8001306:	461c      	mov	r4, r3
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800130c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8001310:	4b30      	ldr	r3, [pc, #192]	@ (80013d4 <Add_HWServW2ST_Service+0x194>)
 8001312:	8818      	ldrh	r0, [r3, #0]
 8001314:	4b31      	ldr	r3, [pc, #196]	@ (80013dc <Add_HWServW2ST_Service+0x19c>)
 8001316:	9305      	str	r3, [sp, #20]
 8001318:	2300      	movs	r3, #0
 800131a:	9304      	str	r3, [sp, #16]
 800131c:	2310      	movs	r3, #16
 800131e:	9303      	str	r3, [sp, #12]
 8001320:	2304      	movs	r3, #4
 8001322:	9302      	str	r3, [sp, #8]
 8001324:	2300      	movs	r3, #0
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	2302      	movs	r3, #2
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2304      	movs	r3, #4
 800132e:	4a2a      	ldr	r2, [pc, #168]	@ (80013d8 <Add_HWServW2ST_Service+0x198>)
 8001330:	2102      	movs	r1, #2
 8001332:	f007 fa82 	bl	800883a <aci_gatt_add_char>
 8001336:	4603      	mov	r3, r0
 8001338:	75fb      	strb	r3, [r7, #23]
                           4,
                           CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800133a:	7dfb      	ldrb	r3, [r7, #23]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <Add_HWServW2ST_Service+0x104>
    return BLE_STATUS_ERROR;
 8001340:	2347      	movs	r3, #71	@ 0x47
 8001342:	e040      	b.n	80013c6 <Add_HWServW2ST_Service+0x186>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8001344:	231b      	movs	r3, #27
 8001346:	713b      	strb	r3, [r7, #4]
 8001348:	23c5      	movs	r3, #197	@ 0xc5
 800134a:	717b      	strb	r3, [r7, #5]
 800134c:	23d5      	movs	r3, #213	@ 0xd5
 800134e:	71bb      	strb	r3, [r7, #6]
 8001350:	23a5      	movs	r3, #165	@ 0xa5
 8001352:	71fb      	strb	r3, [r7, #7]
 8001354:	2302      	movs	r3, #2
 8001356:	723b      	strb	r3, [r7, #8]
 8001358:	2300      	movs	r3, #0
 800135a:	727b      	strb	r3, [r7, #9]
 800135c:	2336      	movs	r3, #54	@ 0x36
 800135e:	72bb      	strb	r3, [r7, #10]
 8001360:	23ac      	movs	r3, #172	@ 0xac
 8001362:	72fb      	strb	r3, [r7, #11]
 8001364:	23e1      	movs	r3, #225	@ 0xe1
 8001366:	733b      	strb	r3, [r7, #12]
 8001368:	2311      	movs	r3, #17
 800136a:	737b      	strb	r3, [r7, #13]
 800136c:	2301      	movs	r3, #1
 800136e:	73bb      	strb	r3, [r7, #14]
 8001370:	2300      	movs	r3, #0
 8001372:	73fb      	strb	r3, [r7, #15]
 8001374:	2300      	movs	r3, #0
 8001376:	743b      	strb	r3, [r7, #16]
 8001378:	2300      	movs	r3, #0
 800137a:	747b      	strb	r3, [r7, #17]
 800137c:	23e0      	movs	r3, #224	@ 0xe0
 800137e:	74bb      	strb	r3, [r7, #18]
 8001380:	2300      	movs	r3, #0
 8001382:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001384:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <Add_HWServW2ST_Service+0x198>)
 8001386:	461c      	mov	r4, r3
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800138c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8001390:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <Add_HWServW2ST_Service+0x194>)
 8001392:	8818      	ldrh	r0, [r3, #0]
 8001394:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <Add_HWServW2ST_Service+0x1a0>)
 8001396:	9305      	str	r3, [sp, #20]
 8001398:	2300      	movs	r3, #0
 800139a:	9304      	str	r3, [sp, #16]
 800139c:	2310      	movs	r3, #16
 800139e:	9303      	str	r3, [sp, #12]
 80013a0:	2304      	movs	r3, #4
 80013a2:	9302      	str	r3, [sp, #8]
 80013a4:	2300      	movs	r3, #0
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	2312      	movs	r3, #18
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2306      	movs	r3, #6
 80013ae:	4a0a      	ldr	r2, [pc, #40]	@ (80013d8 <Add_HWServW2ST_Service+0x198>)
 80013b0:	2102      	movs	r1, #2
 80013b2:	f007 fa42 	bl	800883a <aci_gatt_add_char>
 80013b6:	4603      	mov	r3, r0
 80013b8:	75fb      	strb	r3, [r7, #23]
                           3*2,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80013ba:	7dfb      	ldrb	r3, [r7, #23]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <Add_HWServW2ST_Service+0x184>
    return BLE_STATUS_ERROR;
 80013c0:	2347      	movs	r3, #71	@ 0x47
 80013c2:	e000      	b.n	80013c6 <Add_HWServW2ST_Service+0x186>

  return BLE_STATUS_SUCCESS;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	371c      	adds	r7, #28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd90      	pop	{r4, r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000258 	.word	0x20000258
 80013d4:	2000024c 	.word	0x2000024c
 80013d8:	20000268 	.word	0x20000268
 80013dc:	2000024e 	.word	0x2000024e
 80013e0:	20000250 	.word	0x20000250

080013e4 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b08d      	sub	sp, #52	@ 0x34
 80013e8:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberOfRecords=1;
 80013ea:	2301      	movs	r3, #1
 80013ec:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 80013ee:	231b      	movs	r3, #27
 80013f0:	703b      	strb	r3, [r7, #0]
 80013f2:	23c5      	movs	r3, #197	@ 0xc5
 80013f4:	707b      	strb	r3, [r7, #1]
 80013f6:	23d5      	movs	r3, #213	@ 0xd5
 80013f8:	70bb      	strb	r3, [r7, #2]
 80013fa:	23a5      	movs	r3, #165	@ 0xa5
 80013fc:	70fb      	strb	r3, [r7, #3]
 80013fe:	2302      	movs	r3, #2
 8001400:	713b      	strb	r3, [r7, #4]
 8001402:	2300      	movs	r3, #0
 8001404:	717b      	strb	r3, [r7, #5]
 8001406:	23b4      	movs	r3, #180	@ 0xb4
 8001408:	71bb      	strb	r3, [r7, #6]
 800140a:	239a      	movs	r3, #154	@ 0x9a
 800140c:	71fb      	strb	r3, [r7, #7]
 800140e:	23e1      	movs	r3, #225	@ 0xe1
 8001410:	723b      	strb	r3, [r7, #8]
 8001412:	2311      	movs	r3, #17
 8001414:	727b      	strb	r3, [r7, #9]
 8001416:	2302      	movs	r3, #2
 8001418:	72bb      	strb	r3, [r7, #10]
 800141a:	2300      	movs	r3, #0
 800141c:	72fb      	strb	r3, [r7, #11]
 800141e:	2300      	movs	r3, #0
 8001420:	733b      	strb	r3, [r7, #12]
 8001422:	2300      	movs	r3, #0
 8001424:	737b      	strb	r3, [r7, #13]
 8001426:	2300      	movs	r3, #0
 8001428:	73bb      	strb	r3, [r7, #14]
 800142a:	2300      	movs	r3, #0
 800142c:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800142e:	4b31      	ldr	r3, [pc, #196]	@ (80014f4 <Add_SWServW2ST_Service+0x110>)
 8001430:	461c      	mov	r4, r3
 8001432:	463b      	mov	r3, r7
 8001434:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001436:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	461a      	mov	r2, r3
 8001440:	0052      	lsls	r2, r2, #1
 8001442:	4413      	add	r3, r2
 8001444:	b2db      	uxtb	r3, r3
 8001446:	3301      	adds	r3, #1
 8001448:	b2db      	uxtb	r3, r3
 800144a:	4a2b      	ldr	r2, [pc, #172]	@ (80014f8 <Add_SWServW2ST_Service+0x114>)
 800144c:	9200      	str	r2, [sp, #0]
 800144e:	2201      	movs	r2, #1
 8001450:	4928      	ldr	r1, [pc, #160]	@ (80014f4 <Add_SWServW2ST_Service+0x110>)
 8001452:	2002      	movs	r0, #2
 8001454:	f007 f968 	bl	8008728 <aci_gatt_add_serv>
 8001458:	4603      	mov	r3, r0
 800145a:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 800145c:	7cfb      	ldrb	r3, [r7, #19]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d13f      	bne.n	80014e2 <Add_SWServW2ST_Service+0xfe>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 8001462:	231b      	movs	r3, #27
 8001464:	703b      	strb	r3, [r7, #0]
 8001466:	23c5      	movs	r3, #197	@ 0xc5
 8001468:	707b      	strb	r3, [r7, #1]
 800146a:	23d5      	movs	r3, #213	@ 0xd5
 800146c:	70bb      	strb	r3, [r7, #2]
 800146e:	23a5      	movs	r3, #165	@ 0xa5
 8001470:	70fb      	strb	r3, [r7, #3]
 8001472:	2302      	movs	r3, #2
 8001474:	713b      	strb	r3, [r7, #4]
 8001476:	2300      	movs	r3, #0
 8001478:	717b      	strb	r3, [r7, #5]
 800147a:	2336      	movs	r3, #54	@ 0x36
 800147c:	71bb      	strb	r3, [r7, #6]
 800147e:	23ac      	movs	r3, #172	@ 0xac
 8001480:	71fb      	strb	r3, [r7, #7]
 8001482:	23e1      	movs	r3, #225	@ 0xe1
 8001484:	723b      	strb	r3, [r7, #8]
 8001486:	2311      	movs	r3, #17
 8001488:	727b      	strb	r3, [r7, #9]
 800148a:	2301      	movs	r3, #1
 800148c:	72bb      	strb	r3, [r7, #10]
 800148e:	2300      	movs	r3, #0
 8001490:	72fb      	strb	r3, [r7, #11]
 8001492:	2300      	movs	r3, #0
 8001494:	733b      	strb	r3, [r7, #12]
 8001496:	2301      	movs	r3, #1
 8001498:	737b      	strb	r3, [r7, #13]
 800149a:	2300      	movs	r3, #0
 800149c:	73bb      	strb	r3, [r7, #14]
 800149e:	2300      	movs	r3, #0
 80014a0:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80014a2:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <Add_SWServW2ST_Service+0x118>)
 80014a4:	461c      	mov	r4, r3
 80014a6:	463b      	mov	r3, r7
 80014a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 80014ae:	4b12      	ldr	r3, [pc, #72]	@ (80014f8 <Add_SWServW2ST_Service+0x114>)
 80014b0:	8818      	ldrh	r0, [r3, #0]
 80014b2:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <Add_SWServW2ST_Service+0x11c>)
 80014b4:	9305      	str	r3, [sp, #20]
 80014b6:	2300      	movs	r3, #0
 80014b8:	9304      	str	r3, [sp, #16]
 80014ba:	2310      	movs	r3, #16
 80014bc:	9303      	str	r3, [sp, #12]
 80014be:	2301      	movs	r3, #1
 80014c0:	9302      	str	r3, [sp, #8]
 80014c2:	2300      	movs	r3, #0
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	230e      	movs	r3, #14
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2302      	movs	r3, #2
 80014cc:	4a0b      	ldr	r2, [pc, #44]	@ (80014fc <Add_SWServW2ST_Service+0x118>)
 80014ce:	2102      	movs	r1, #2
 80014d0:	f007 f9b3 	bl	800883a <aci_gatt_add_char>
 80014d4:	4603      	mov	r3, r0
 80014d6:	74fb      	strb	r3, [r7, #19]
						   CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
						   GATT_NOTIFY_ATTRIBUTE_WRITE,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 80014d8:	7cfb      	ldrb	r3, [r7, #19]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d103      	bne.n	80014e6 <Add_SWServW2ST_Service+0x102>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 80014de:	2300      	movs	r3, #0
 80014e0:	e003      	b.n	80014ea <Add_SWServW2ST_Service+0x106>
    goto fail;
 80014e2:	bf00      	nop
 80014e4:	e000      	b.n	80014e8 <Add_SWServW2ST_Service+0x104>
    goto fail;
 80014e6:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 80014e8:	2347      	movs	r3, #71	@ 0x47
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	371c      	adds	r7, #28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd90      	pop	{r4, r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000258 	.word	0x20000258
 80014f8:	20000252 	.word	0x20000252
 80014fc:	20000268 	.word	0x20000268
 8001500:	20000254 	.word	0x20000254

08001504 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af02      	add	r7, sp, #8
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  uint8_t buff[2*3];
  tBleStatus ret;

//  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));

  HOST_TO_LE_16(buff, x_axes->AXIS_X);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	747b      	strb	r3, [r7, #17]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	121b      	asrs	r3, r3, #8
 800151e:	b2db      	uxtb	r3, r3
 8001520:	743b      	strb	r3, [r7, #16]
  HOST_TO_LE_16(buff+2, x_axes->AXIS_Y);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	74fb      	strb	r3, [r7, #19]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	121b      	asrs	r3, r3, #8
 8001530:	b2db      	uxtb	r3, r3
 8001532:	74bb      	strb	r3, [r7, #18]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_Z);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	757b      	strb	r3, [r7, #21]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	121b      	asrs	r3, r3, #8
 8001542:	b2db      	uxtb	r3, r3
 8001544:	753b      	strb	r3, [r7, #20]
//  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
//
//  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
//  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
//  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
  if (connected) {
 8001546:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <Acc_Update+0x84>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d016      	beq.n	800157c <Acc_Update+0x78>
	  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 800154e:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <Acc_Update+0x88>)
 8001550:	8818      	ldrh	r0, [r3, #0]
 8001552:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <Acc_Update+0x8c>)
 8001554:	8819      	ldrh	r1, [r3, #0]
 8001556:	f107 0310 	add.w	r3, r7, #16
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	2306      	movs	r3, #6
 800155e:	2200      	movs	r2, #0
 8001560:	f007 fa36 	bl	80089d0 <aci_gatt_update_char_value>
 8001564:	4603      	mov	r3, r0
 8001566:	75fb      	strb	r3, [r7, #23]
					   0, 2*3, buff);

	  if (ret != BLE_STATUS_SUCCESS){
 8001568:	7dfb      	ldrb	r3, [r7, #23]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d006      	beq.n	800157c <Acc_Update+0x78>
	    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
 800156e:	7dfb      	ldrb	r3, [r7, #23]
 8001570:	4619      	mov	r1, r3
 8001572:	4808      	ldr	r0, [pc, #32]	@ (8001594 <Acc_Update+0x90>)
 8001574:	f00c fa36 	bl	800d9e4 <iprintf>
	    return BLE_STATUS_ERROR ;
 8001578:	2347      	movs	r3, #71	@ 0x47
 800157a:	e000      	b.n	800157e <Acc_Update+0x7a>
	  }
  }

  return BLE_STATUS_SUCCESS;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	2000027c 	.word	0x2000027c
 800158c:	2000024c 	.word	0x2000024c
 8001590:	20000250 	.word	0x20000250
 8001594:	080114cc 	.word	0x080114cc

08001598 <Read_delayTime>:

tBleStatus Read_delayTime()
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af02      	add	r7, sp, #8
  uint8_t buff[4];
  tBleStatus ret;

//  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));

  HOST_TO_LE_32(buff, delayTime);
 800159e:	4b17      	ldr	r3, [pc, #92]	@ (80015fc <Read_delayTime+0x64>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	0e1b      	lsrs	r3, r3, #24
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	703b      	strb	r3, [r7, #0]
 80015a8:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <Read_delayTime+0x64>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	0c1b      	lsrs	r3, r3, #16
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	707b      	strb	r3, [r7, #1]
 80015b2:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <Read_delayTime+0x64>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	0a1b      	lsrs	r3, r3, #8
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	70bb      	strb	r3, [r7, #2]
 80015bc:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <Read_delayTime+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	70fb      	strb	r3, [r7, #3]
//
//  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
//  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
//  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 80015c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <Read_delayTime+0x68>)
 80015c6:	8818      	ldrh	r0, [r3, #0]
 80015c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <Read_delayTime+0x6c>)
 80015ca:	8819      	ldrh	r1, [r3, #0]
 80015cc:	463b      	mov	r3, r7
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	2304      	movs	r3, #4
 80015d2:	2200      	movs	r2, #0
 80015d4:	f007 f9fc 	bl	80089d0 <aci_gatt_update_char_value>
 80015d8:	4603      	mov	r3, r0
 80015da:	71fb      	strb	r3, [r7, #7]
				   0, 4, buff);
  if (ret != BLE_STATUS_SUCCESS){
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d006      	beq.n	80015f0 <Read_delayTime+0x58>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\r\n",ret) ;
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	4619      	mov	r1, r3
 80015e6:	4808      	ldr	r0, [pc, #32]	@ (8001608 <Read_delayTime+0x70>)
 80015e8:	f00c f9fc 	bl	800d9e4 <iprintf>
    return BLE_STATUS_ERROR ;
 80015ec:	2347      	movs	r3, #71	@ 0x47
 80015ee:	e000      	b.n	80015f2 <Read_delayTime+0x5a>
  }

  return BLE_STATUS_SUCCESS;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000004 	.word	0x20000004
 8001600:	2000024c 	.word	0x2000024c
 8001604:	2000024e 	.word	0x2000024e
 8001608:	08011508 	.word	0x08011508

0800160c <Read_Request_CB>:
* Description    : Update the sensor values.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	80fb      	strh	r3, [r7, #6]
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 8001616:	88fa      	ldrh	r2, [r7, #6]
 8001618:	4b14      	ldr	r3, [pc, #80]	@ (800166c <Read_Request_CB+0x60>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	3301      	adds	r3, #1
 800161e:	429a      	cmp	r2, r3
 8001620:	d105      	bne.n	800162e <Read_Request_CB+0x22>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 8001622:	4a13      	ldr	r2, [pc, #76]	@ (8001670 <Read_Request_CB+0x64>)
 8001624:	4913      	ldr	r1, [pc, #76]	@ (8001674 <Read_Request_CB+0x68>)
 8001626:	4814      	ldr	r0, [pc, #80]	@ (8001678 <Read_Request_CB+0x6c>)
 8001628:	f7ff ff6c 	bl	8001504 <Acc_Update>
 800162c:	e007      	b.n	800163e <Read_Request_CB+0x32>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 800162e:	88fa      	ldrh	r2, [r7, #6]
 8001630:	4b12      	ldr	r3, [pc, #72]	@ (800167c <Read_Request_CB+0x70>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	429a      	cmp	r2, r3
 8001638:	d101      	bne.n	800163e <Read_Request_CB+0x32>
  {
	Read_delayTime();
 800163a:	f7ff ffad 	bl	8001598 <Read_delayTime>
  }

  if(connection_handle !=0)
 800163e:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <Read_Request_CB+0x74>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00e      	beq.n	8001664 <Read_Request_CB+0x58>
  {
    ret = aci_gatt_allow_read(connection_handle);
 8001646:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <Read_Request_CB+0x74>)
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f007 fa50 	bl	8008af0 <aci_gatt_allow_read>
 8001650:	4603      	mov	r3, r0
 8001652:	73fb      	strb	r3, [r7, #15]
    if (ret != BLE_STATUS_SUCCESS)
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d004      	beq.n	8001664 <Read_Request_CB+0x58>
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	4619      	mov	r1, r3
 800165e:	4809      	ldr	r0, [pc, #36]	@ (8001684 <Read_Request_CB+0x78>)
 8001660:	f00c f9c0 	bl	800d9e4 <iprintf>
    }
  }
}
 8001664:	bf00      	nop
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000250 	.word	0x20000250
 8001670:	20000298 	.word	0x20000298
 8001674:	2000028c 	.word	0x2000028c
 8001678:	20000280 	.word	0x20000280
 800167c:	2000024e 	.word	0x2000024e
 8001680:	20000278 	.word	0x20000278
 8001684:	08011580 	.word	0x08011580

08001688 <Write_Request_CB>:

void Write_Request_CB(uint16_t handle, uint8_t data_length, uint8_t* data)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	603a      	str	r2, [r7, #0]
 8001692:	80fb      	strh	r3, [r7, #6]
 8001694:	460b      	mov	r3, r1
 8001696:	717b      	strb	r3, [r7, #5]
//	PRINTF("HANDLE: %d; EXPECTED: %d\r\n", handle, QuaternionsCharHandle + 1);
	if (handle == QuaternionsCharHandle + 1)
 8001698:	88fa      	ldrh	r2, [r7, #6]
 800169a:	4b13      	ldr	r3, [pc, #76]	@ (80016e8 <Write_Request_CB+0x60>)
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	3301      	adds	r3, #1
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d11d      	bne.n	80016e0 <Write_Request_CB+0x58>
	{
//		BSP_LED_Toggle(LED2);
		uint32_t newDelayTime = data[0] + (data[1] << 8);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	3301      	adds	r3, #1
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	4413      	add	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
//		PRINTF("Data: %d\r\n", newDelayTime);
		if (newDelayTime > 0)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00e      	beq.n	80016da <Write_Request_CB+0x52>
		{
			delayTime = newDelayTime * 100;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2264      	movs	r2, #100	@ 0x64
 80016c0:	fb02 f303 	mul.w	r3, r2, r3
 80016c4:	4a09      	ldr	r2, [pc, #36]	@ (80016ec <Write_Request_CB+0x64>)
 80016c6:	6013      	str	r3, [r2, #0]
			PRINTF("Write request success!!! %d\r\n", delayTime);
 80016c8:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <Write_Request_CB+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4619      	mov	r1, r3
 80016ce:	4808      	ldr	r0, [pc, #32]	@ (80016f0 <Write_Request_CB+0x68>)
 80016d0:	f00c f988 	bl	800d9e4 <iprintf>
			trigger_update();
 80016d4:	f000 fe5a 	bl	800238c <trigger_update>
		else
		{
			PRINTF("INVALID DATA VALUE!!!\r\n");
		}
	}
}
 80016d8:	e002      	b.n	80016e0 <Write_Request_CB+0x58>
			PRINTF("INVALID DATA VALUE!!!\r\n");
 80016da:	4806      	ldr	r0, [pc, #24]	@ (80016f4 <Write_Request_CB+0x6c>)
 80016dc:	f00c f9ea 	bl	800dab4 <puts>
}
 80016e0:	bf00      	nop
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000254 	.word	0x20000254
 80016ec:	20000004 	.word	0x20000004
 80016f0:	080115a8 	.word	0x080115a8
 80016f4:	080115c8 	.word	0x080115c8

080016f8 <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b092      	sub	sp, #72	@ 0x48
 80016fc:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 80016fe:	4a3f      	ldr	r2, [pc, #252]	@ (80017fc <Set_DeviceConnectable+0x104>)
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001708:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 800170c:	2302      	movs	r3, #2
 800170e:	703b      	strb	r3, [r7, #0]
 8001710:	230a      	movs	r3, #10
 8001712:	707b      	strb	r3, [r7, #1]
 8001714:	2300      	movs	r3, #0
 8001716:	70bb      	strb	r3, [r7, #2]
 8001718:	2308      	movs	r3, #8
 800171a:	70fb      	strb	r3, [r7, #3]
 800171c:	2309      	movs	r3, #9
 800171e:	713b      	strb	r3, [r7, #4]
 8001720:	2342      	movs	r3, #66	@ 0x42
 8001722:	717b      	strb	r3, [r7, #5]
 8001724:	236c      	movs	r3, #108	@ 0x6c
 8001726:	71bb      	strb	r3, [r7, #6]
 8001728:	2375      	movs	r3, #117	@ 0x75
 800172a:	71fb      	strb	r3, [r7, #7]
 800172c:	2365      	movs	r3, #101	@ 0x65
 800172e:	723b      	strb	r3, [r7, #8]
 8001730:	2347      	movs	r3, #71	@ 0x47
 8001732:	727b      	strb	r3, [r7, #9]
 8001734:	2347      	movs	r3, #71	@ 0x47
 8001736:	72bb      	strb	r3, [r7, #10]
 8001738:	2347      	movs	r3, #71	@ 0x47
 800173a:	72fb      	strb	r3, [r7, #11]
 800173c:	230d      	movs	r3, #13
 800173e:	733b      	strb	r3, [r7, #12]
 8001740:	23ff      	movs	r3, #255	@ 0xff
 8001742:	737b      	strb	r3, [r7, #13]
 8001744:	2301      	movs	r3, #1
 8001746:	73bb      	strb	r3, [r7, #14]
 8001748:	2380      	movs	r3, #128	@ 0x80
 800174a:	73fb      	strb	r3, [r7, #15]
 800174c:	2300      	movs	r3, #0
 800174e:	743b      	strb	r3, [r7, #16]
 8001750:	23f4      	movs	r3, #244	@ 0xf4
 8001752:	747b      	strb	r3, [r7, #17]
 8001754:	2300      	movs	r3, #0
 8001756:	74bb      	strb	r3, [r7, #18]
 8001758:	2300      	movs	r3, #0
 800175a:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 800175c:	4b28      	ldr	r3, [pc, #160]	@ (8001800 <Set_DeviceConnectable+0x108>)
 800175e:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 8001760:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 8001762:	4b27      	ldr	r3, [pc, #156]	@ (8001800 <Set_DeviceConnectable+0x108>)
 8001764:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 8001766:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 8001768:	4b25      	ldr	r3, [pc, #148]	@ (8001800 <Set_DeviceConnectable+0x108>)
 800176a:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 800176c:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 800176e:	4b24      	ldr	r3, [pc, #144]	@ (8001800 <Set_DeviceConnectable+0x108>)
 8001770:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 8001772:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 8001774:	4b22      	ldr	r3, [pc, #136]	@ (8001800 <Set_DeviceConnectable+0x108>)
 8001776:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 8001778:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 800177a:	4b21      	ldr	r3, [pc, #132]	@ (8001800 <Set_DeviceConnectable+0x108>)
 800177c:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 800177e:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 8001780:	7cbb      	ldrb	r3, [r7, #18]
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	b2db      	uxtb	r3, r3
 8001788:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 800178a:	2100      	movs	r1, #0
 800178c:	2000      	movs	r0, #0
 800178e:	f007 fb12 	bl	8008db6 <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");
 8001792:	481c      	ldr	r0, [pc, #112]	@ (8001804 <Set_DeviceConnectable+0x10c>)
 8001794:	f00c f98e 	bl	800dab4 <puts>

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 8001798:	2300      	movs	r3, #0
 800179a:	9306      	str	r3, [sp, #24]
 800179c:	2300      	movs	r3, #0
 800179e:	9305      	str	r3, [sp, #20]
 80017a0:	2300      	movs	r3, #0
 80017a2:	9304      	str	r3, [sp, #16]
 80017a4:	2300      	movs	r3, #0
 80017a6:	9303      	str	r3, [sp, #12]
 80017a8:	f107 031c 	add.w	r3, r7, #28
 80017ac:	9302      	str	r3, [sp, #8]
 80017ae:	2308      	movs	r3, #8
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	2300      	movs	r3, #0
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2301      	movs	r3, #1
 80017b8:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 80017bc:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80017c0:	2000      	movs	r0, #0
 80017c2:	f006 fdfc 	bl	80083be <aci_gap_set_discoverable>
 80017c6:	4603      	mov	r3, r0
 80017c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
								STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 80017cc:	463b      	mov	r3, r7
 80017ce:	4619      	mov	r1, r3
 80017d0:	201a      	movs	r0, #26
 80017d2:	f006 ff35 	bl	8008640 <aci_gap_update_adv_data>

  if(ret != BLE_STATUS_SUCCESS)
 80017d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d006      	beq.n	80017ec <Set_DeviceConnectable+0xf4>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
 80017de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017e2:	4619      	mov	r1, r3
 80017e4:	4808      	ldr	r0, [pc, #32]	@ (8001808 <Set_DeviceConnectable+0x110>)
 80017e6:	f00c f8fd 	bl	800d9e4 <iprintf>
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 80017ea:	e002      	b.n	80017f2 <Set_DeviceConnectable+0xfa>
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
 80017ec:	4807      	ldr	r0, [pc, #28]	@ (800180c <Set_DeviceConnectable+0x114>)
 80017ee:	f00c f961 	bl	800dab4 <puts>
}
 80017f2:	bf00      	nop
 80017f4:	3728      	adds	r7, #40	@ 0x28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	08011688 	.word	0x08011688
 8001800:	20000244 	.word	0x20000244
 8001804:	08011614 	.word	0x08011614
 8001808:	08011634 	.word	0x08011634
 800180c:	08011660 	.word	0x08011660

08001810 <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	@ 0x28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 800181c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181e:	3301      	adds	r3, #1
 8001820:	623b      	str	r3, [r7, #32]
//  PRINTF("HCI PACKET TYPE: 0x%04x, EXPECTED: 0x%04x\r\n", hci_pckt->type, HCI_EVENT_PKT);

  if(hci_pckt->type != HCI_EVENT_PKT)
 8001822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b04      	cmp	r3, #4
 8001828:	d14a      	bne.n	80018c0 <user_notify+0xb0>
    return;

//  PRINTF("EVENT PACKET: 0x%04x, EXPECTED: 0x%04x\r\n", event_pckt->evt, EVT_VENDOR);
  switch(event_pckt->evt){
 800182a:	6a3b      	ldr	r3, [r7, #32]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2bff      	cmp	r3, #255	@ 0xff
 8001830:	d01f      	beq.n	8001872 <user_notify+0x62>
 8001832:	2bff      	cmp	r3, #255	@ 0xff
 8001834:	dc49      	bgt.n	80018ca <user_notify+0xba>
 8001836:	2b05      	cmp	r3, #5
 8001838:	d002      	beq.n	8001840 <user_notify+0x30>
 800183a:	2b3e      	cmp	r3, #62	@ 0x3e
 800183c:	d003      	beq.n	8001846 <user_notify+0x36>
 800183e:	e044      	b.n	80018ca <user_notify+0xba>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8001840:	f000 f846 	bl	80018d0 <GAP_DisconnectionComplete_CB>
    }
    break;
 8001844:	e041      	b.n	80018ca <user_notify+0xba>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	3302      	adds	r3, #2
 800184a:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d137      	bne.n	80018c4 <user_notify+0xb4>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	3301      	adds	r3, #1
 8001858:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	1d5a      	adds	r2, r3, #5
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001864:	b29b      	uxth	r3, r3
 8001866:	4619      	mov	r1, r3
 8001868:	4610      	mov	r0, r2
 800186a:	f000 f849 	bl	8001900 <GAP_ConnectionComplete_CB>
        }
        break;
 800186e:	bf00      	nop
      }
    }
    break;
 8001870:	e028      	b.n	80018c4 <user_notify+0xb4>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	3302      	adds	r3, #2
 8001876:	61fb      	str	r3, [r7, #28]
//      PRINTF("ECODE: 0x%04x\r\n", blue_evt->ecode);
      switch(blue_evt->ecode){
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	b29b      	uxth	r3, r3
 800187e:	f640 4201 	movw	r2, #3073	@ 0xc01
 8001882:	4293      	cmp	r3, r2
 8001884:	d00d      	beq.n	80018a2 <user_notify+0x92>
 8001886:	f640 4214 	movw	r2, #3092	@ 0xc14
 800188a:	4293      	cmp	r3, r2
 800188c:	d11c      	bne.n	80018c8 <user_notify+0xb8>

      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3302      	adds	r3, #2
 8001892:	61bb      	str	r3, [r7, #24]
          Read_Request_CB(pr->attr_handle);
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	885b      	ldrh	r3, [r3, #2]
 8001898:	b29b      	uxth	r3, r3
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff feb6 	bl	800160c <Read_Request_CB>
        }
        break;
 80018a0:	e00d      	b.n	80018be <user_notify+0xae>
        // TODO: add a write event
      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
//          PRINTF("ENTERED WRITE SEGMENT\r\n");
          evt_gatt_attr_modified_IDB05A1 *pr = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3302      	adds	r3, #2
 80018a6:	617b      	str	r3, [r7, #20]
          Write_Request_CB(pr->attr_handle, pr->data_length, pr->att_data);
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	885b      	ldrh	r3, [r3, #2]
 80018ac:	b298      	uxth	r0, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	7919      	ldrb	r1, [r3, #4]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	3307      	adds	r3, #7
 80018b6:	461a      	mov	r2, r3
 80018b8:	f7ff fee6 	bl	8001688 <Write_Request_CB>
        }
        break;
 80018bc:	bf00      	nop
      }


    }
    break;
 80018be:	e003      	b.n	80018c8 <user_notify+0xb8>
    return;
 80018c0:	bf00      	nop
 80018c2:	e002      	b.n	80018ca <user_notify+0xba>
    break;
 80018c4:	bf00      	nop
 80018c6:	e000      	b.n	80018ca <user_notify+0xba>
    break;
 80018c8:	bf00      	nop
  }
}
 80018ca:	3728      	adds	r7, #40	@ 0x28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  connected = FALSE;
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <GAP_DisconnectionComplete_CB+0x20>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
 80018da:	4806      	ldr	r0, [pc, #24]	@ (80018f4 <GAP_DisconnectionComplete_CB+0x24>)
 80018dc:	f00c f8ea 	bl	800dab4 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 80018e0:	4b05      	ldr	r3, [pc, #20]	@ (80018f8 <GAP_DisconnectionComplete_CB+0x28>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 80018e6:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <GAP_DisconnectionComplete_CB+0x2c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	2000027c 	.word	0x2000027c
 80018f4:	08011690 	.word	0x08011690
 80018f8:	20000001 	.word	0x20000001
 80018fc:	2000027a 	.word	0x2000027a

08001900 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <GAP_ConnectionComplete_CB+0x54>)
 800190e:	2201      	movs	r2, #1
 8001910:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8001912:	4a11      	ldr	r2, [pc, #68]	@ (8001958 <GAP_ConnectionComplete_CB+0x58>)
 8001914:	887b      	ldrh	r3, [r7, #2]
 8001916:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
 8001918:	4810      	ldr	r0, [pc, #64]	@ (800195c <GAP_ConnectionComplete_CB+0x5c>)
 800191a:	f00c f863 	bl	800d9e4 <iprintf>
  for(uint32_t i = 5; i > 0; i--){
 800191e:	2305      	movs	r3, #5
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	e00a      	b.n	800193a <GAP_ConnectionComplete_CB+0x3a>
    PRINTF("%02X-", addr[i]);
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4413      	add	r3, r2
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4619      	mov	r1, r3
 800192e:	480c      	ldr	r0, [pc, #48]	@ (8001960 <GAP_ConnectionComplete_CB+0x60>)
 8001930:	f00c f858 	bl	800d9e4 <iprintf>
  for(uint32_t i = 5; i > 0; i--){
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	3b01      	subs	r3, #1
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f1      	bne.n	8001924 <GAP_ConnectionComplete_CB+0x24>
  }
  PRINTF("%02X\n", addr[0]);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4619      	mov	r1, r3
 8001946:	4807      	ldr	r0, [pc, #28]	@ (8001964 <GAP_ConnectionComplete_CB+0x64>)
 8001948:	f00c f84c 	bl	800d9e4 <iprintf>
}
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	2000027c 	.word	0x2000027c
 8001958:	20000278 	.word	0x20000278
 800195c:	080116a0 	.word	0x080116a0
 8001960:	080116b8 	.word	0x080116b8
 8001964:	080116c0 	.word	0x080116c0

08001968 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001970:	4b1f      	ldr	r3, [pc, #124]	@ (80019f0 <HCI_TL_SPI_Init+0x88>)
 8001972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001974:	4a1e      	ldr	r2, [pc, #120]	@ (80019f0 <HCI_TL_SPI_Init+0x88>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800197c:	4b1c      	ldr	r3, [pc, #112]	@ (80019f0 <HCI_TL_SPI_Init+0x88>)
 800197e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8001988:	2340      	movs	r3, #64	@ 0x40
 800198a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800198c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	4619      	mov	r1, r3
 800199c:	4815      	ldr	r0, [pc, #84]	@ (80019f4 <HCI_TL_SPI_Init+0x8c>)
 800199e:	f002 f95d 	bl	8003c5c <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80019a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a8:	2301      	movs	r3, #1
 80019aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80019b4:	f107 030c 	add.w	r3, r7, #12
 80019b8:	4619      	mov	r1, r3
 80019ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019be:	f002 f94d 	bl	8003c5c <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80019c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c8:	2301      	movs	r3, #1
 80019ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80019d4:	f107 030c 	add.w	r3, r7, #12
 80019d8:	4619      	mov	r1, r3
 80019da:	4807      	ldr	r0, [pc, #28]	@ (80019f8 <HCI_TL_SPI_Init+0x90>)
 80019dc:	f002 f93e 	bl	8003c5c <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 80019e0:	f001 fbca 	bl	8003178 <BSP_SPI3_Init>
 80019e4:	4603      	mov	r3, r0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3720      	adds	r7, #32
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000
 80019f4:	48001000 	.word	0x48001000
 80019f8:	48000c00 	.word	0x48000c00

080019fc <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8001a00:	2140      	movs	r1, #64	@ 0x40
 8001a02:	4808      	ldr	r0, [pc, #32]	@ (8001a24 <HCI_TL_SPI_DeInit+0x28>)
 8001a04:	f002 fad4 	bl	8003fb0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8001a08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a0c:	4806      	ldr	r0, [pc, #24]	@ (8001a28 <HCI_TL_SPI_DeInit+0x2c>)
 8001a0e:	f002 facf 	bl	8003fb0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8001a12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a1a:	f002 fac9 	bl	8003fb0 <HAL_GPIO_DeInit>
  return 0;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	48001000 	.word	0x48001000
 8001a28:	48000c00 	.word	0x48000c00

08001a2c <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001a30:	2201      	movs	r2, #1
 8001a32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a36:	480d      	ldr	r0, [pc, #52]	@ (8001a6c <HCI_TL_SPI_Reset+0x40>)
 8001a38:	f002 fbc6 	bl	80041c8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a46:	f002 fbbf 	bl	80041c8 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001a4a:	2005      	movs	r0, #5
 8001a4c:	f001 fe66 	bl	800371c <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001a50:	2201      	movs	r2, #1
 8001a52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a5a:	f002 fbb5 	bl	80041c8 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001a5e:	2005      	movs	r0, #5
 8001a60:	f001 fe5c 	bl	800371c <HAL_Delay>
  return 0;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	48000c00 	.word	0x48000c00

08001a70 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8001a80:	23ff      	movs	r3, #255	@ 0xff
 8001a82:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001a84:	4a26      	ldr	r2, [pc, #152]	@ (8001b20 <HCI_TL_SPI_Receive+0xb0>)
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a8e:	6018      	str	r0, [r3, #0]
 8001a90:	3304      	adds	r3, #4
 8001a92:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a9a:	4822      	ldr	r0, [pc, #136]	@ (8001b24 <HCI_TL_SPI_Receive+0xb4>)
 8001a9c:	f002 fb94 	bl	80041c8 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001aa0:	f107 010c 	add.w	r1, r7, #12
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	2205      	movs	r2, #5
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f001 fb94 	bl	80031d8 <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 8001ab0:	7b3b      	ldrb	r3, [r7, #12]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d129      	bne.n	8001b0a <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8001ab6:	7c3b      	ldrb	r3, [r7, #16]
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	b21a      	sxth	r2, r3
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	b21b      	sxth	r3, r3
 8001ac4:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8001ac6:	8bfb      	ldrh	r3, [r7, #30]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d01e      	beq.n	8001b0a <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8001acc:	8bfa      	ldrh	r2, [r7, #30]
 8001ace:	887b      	ldrh	r3, [r7, #2]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d901      	bls.n	8001ad8 <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 8001ad4:	887b      	ldrh	r3, [r7, #2]
 8001ad6:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8001ad8:	2300      	movs	r3, #0
 8001ada:	777b      	strb	r3, [r7, #29]
 8001adc:	e010      	b.n	8001b00 <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8001ade:	f107 011b 	add.w	r1, r7, #27
 8001ae2:	f107 031c 	add.w	r3, r7, #28
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f001 fb75 	bl	80031d8 <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 8001aee:	7f7b      	ldrb	r3, [r7, #29]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	4413      	add	r3, r2
 8001af4:	7efa      	ldrb	r2, [r7, #27]
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8001afa:	7f7b      	ldrb	r3, [r7, #29]
 8001afc:	3301      	adds	r3, #1
 8001afe:	777b      	strb	r3, [r7, #29]
 8001b00:	7f7b      	ldrb	r3, [r7, #29]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	8bfa      	ldrh	r2, [r7, #30]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d8e9      	bhi.n	8001ade <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b10:	4804      	ldr	r0, [pc, #16]	@ (8001b24 <HCI_TL_SPI_Receive+0xb4>)
 8001b12:	f002 fb59 	bl	80041c8 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8001b16:	7f7b      	ldrb	r3, [r7, #29]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3720      	adds	r7, #32
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	080116c8 	.word	0x080116c8
 8001b24:	48000c00 	.word	0x48000c00

08001b28 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001b34:	4a24      	ldr	r2, [pc, #144]	@ (8001bc8 <HCI_TL_SPI_Send+0xa0>)
 8001b36:	f107 0310 	add.w	r3, r7, #16
 8001b3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b3e:	6018      	str	r0, [r3, #0]
 8001b40:	3304      	adds	r3, #4
 8001b42:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001b44:	f001 fdde 	bl	8003704 <HAL_GetTick>
 8001b48:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b54:	481d      	ldr	r0, [pc, #116]	@ (8001bcc <HCI_TL_SPI_Send+0xa4>)
 8001b56:	f002 fb37 	bl	80041c8 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001b5a:	f107 0108 	add.w	r1, r7, #8
 8001b5e:	f107 0310 	add.w	r3, r7, #16
 8001b62:	2205      	movs	r2, #5
 8001b64:	4618      	mov	r0, r3
 8001b66:	f001 fb37 	bl	80031d8 <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 8001b6a:	7a3b      	ldrb	r3, [r7, #8]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d10f      	bne.n	8001b90 <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8001b70:	7a7b      	ldrb	r3, [r7, #9]
 8001b72:	461a      	mov	r2, r3
 8001b74:	887b      	ldrh	r3, [r7, #2]
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d806      	bhi.n	8001b88 <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4914      	ldr	r1, [pc, #80]	@ (8001bd0 <HCI_TL_SPI_Send+0xa8>)
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f001 fb29 	bl	80031d8 <BSP_SPI3_SendRecv>
 8001b86:	e006      	b.n	8001b96 <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8001b88:	f06f 0301 	mvn.w	r3, #1
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	e002      	b.n	8001b96 <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8001b90:	f04f 33ff 	mov.w	r3, #4294967295
 8001b94:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001b96:	2201      	movs	r2, #1
 8001b98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b9c:	480b      	ldr	r0, [pc, #44]	@ (8001bcc <HCI_TL_SPI_Send+0xa4>)
 8001b9e:	f002 fb13 	bl	80041c8 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001ba2:	f001 fdaf 	bl	8003704 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b0f      	cmp	r3, #15
 8001bae:	d903      	bls.n	8001bb8 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 8001bb0:	f06f 0302 	mvn.w	r3, #2
 8001bb4:	61fb      	str	r3, [r7, #28]
      break;
 8001bb6:	e002      	b.n	8001bbe <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	dbc5      	blt.n	8001b4a <HCI_TL_SPI_Send+0x22>

  return result;
 8001bbe:	69fb      	ldr	r3, [r7, #28]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3720      	adds	r7, #32
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	080116d0 	.word	0x080116d0
 8001bcc:	48000c00 	.word	0x48000c00
 8001bd0:	200002ac 	.word	0x200002ac

08001bd4 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001bd8:	2140      	movs	r1, #64	@ 0x40
 8001bda:	4805      	ldr	r0, [pc, #20]	@ (8001bf0 <IsDataAvailable+0x1c>)
 8001bdc:	f002 fadc 	bl	8004198 <HAL_GPIO_ReadPin>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	bf0c      	ite	eq
 8001be6:	2301      	moveq	r3, #1
 8001be8:	2300      	movne	r3, #0
 8001bea:	b2db      	uxtb	r3, r3
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	48001000 	.word	0x48001000

08001bf4 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8001bfa:	4b12      	ldr	r3, [pc, #72]	@ (8001c44 <hci_tl_lowlevel_init+0x50>)
 8001bfc:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001bfe:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <hci_tl_lowlevel_init+0x54>)
 8001c00:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8001c02:	4b12      	ldr	r3, [pc, #72]	@ (8001c4c <hci_tl_lowlevel_init+0x58>)
 8001c04:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001c06:	4b12      	ldr	r3, [pc, #72]	@ (8001c50 <hci_tl_lowlevel_init+0x5c>)
 8001c08:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8001c0a:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <hci_tl_lowlevel_init+0x60>)
 8001c0c:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8001c0e:	4b12      	ldr	r3, [pc, #72]	@ (8001c58 <hci_tl_lowlevel_init+0x64>)
 8001c10:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	4618      	mov	r0, r3
 8001c16:	f007 f9eb 	bl	8008ff0 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8001c1a:	4910      	ldr	r1, [pc, #64]	@ (8001c5c <hci_tl_lowlevel_init+0x68>)
 8001c1c:	4810      	ldr	r0, [pc, #64]	@ (8001c60 <hci_tl_lowlevel_init+0x6c>)
 8001c1e:	f001 ffd9 	bl	8003bd4 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001c22:	4a10      	ldr	r2, [pc, #64]	@ (8001c64 <hci_tl_lowlevel_init+0x70>)
 8001c24:	2100      	movs	r1, #0
 8001c26:	480e      	ldr	r0, [pc, #56]	@ (8001c60 <hci_tl_lowlevel_init+0x6c>)
 8001c28:	f001 ffba 	bl	8003ba0 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2100      	movs	r1, #0
 8001c30:	2017      	movs	r0, #23
 8001c32:	f001 fe72 	bl	800391a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c36:	2017      	movs	r0, #23
 8001c38:	f001 fe8b 	bl	8003952 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8001c3c:	bf00      	nop
 8001c3e:	3720      	adds	r7, #32
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	08001969 	.word	0x08001969
 8001c48:	080019fd 	.word	0x080019fd
 8001c4c:	08001b29 	.word	0x08001b29
 8001c50:	08001a71 	.word	0x08001a71
 8001c54:	08001a2d 	.word	0x08001a2d
 8001c58:	08003219 	.word	0x08003219
 8001c5c:	16000006 	.word	0x16000006
 8001c60:	200002a4 	.word	0x200002a4
 8001c64:	08001c69 	.word	0x08001c69

08001c68 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001c6c:	e005      	b.n	8001c7a <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f007 fb22 	bl	80092b8 <hci_notify_asynch_evt>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8001c7a:	f7ff ffab 	bl	8001bd4 <IsDataAvailable>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f4      	bne.n	8001c6e <hci_tl_lowlevel_isr+0x6>
 8001c84:	e000      	b.n	8001c88 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8001c86:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c90:	f001 fcd0 	bl	8003634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c94:	f000 f83e 	bl	8001d14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c98:	f000 f998 	bl	8001fcc <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001c9c:	f000 f89c 	bl	8001dd8 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8001ca0:	f000 f8d2 	bl	8001e48 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001ca4:	f000 f90e 	bl	8001ec4 <MX_QUADSPI_Init>
  MX_USART3_UART_Init();
 8001ca8:	f000 f932 	bl	8001f10 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001cac:	f000 f960 	bl	8001f70 <MX_USB_OTG_FS_PCD_Init>
  MX_BlueNRG_MS_Init();
 8001cb0:	f7ff f998 	bl	8000fe4 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */

  BSP_ACCELERO_Init();
 8001cb4:	f001 fb52 	bl	800335c <BSP_ACCELERO_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001cb8:	f007 fc96 	bl	80095e8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySem01 */
  BinarySem01Handle = osSemaphoreNew(1, 0, &BinarySem01_attributes);
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf4 <main+0x68>)
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f007 fd88 	bl	80097d6 <osSemaphoreNew>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4a0b      	ldr	r2, [pc, #44]	@ (8001cf8 <main+0x6c>)
 8001cca:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TASK_BLE */
  TASK_BLEHandle = osThreadNew(StartTASK_BLE, NULL, &TASK_BLE_attributes);
 8001ccc:	4a0b      	ldr	r2, [pc, #44]	@ (8001cfc <main+0x70>)
 8001cce:	2100      	movs	r1, #0
 8001cd0:	480b      	ldr	r0, [pc, #44]	@ (8001d00 <main+0x74>)
 8001cd2:	f007 fcd3 	bl	800967c <osThreadNew>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001d04 <main+0x78>)
 8001cda:	6013      	str	r3, [r2, #0]

  /* creation of TASK_ACC */
  TASK_ACCHandle = osThreadNew(StartTASK_ACC, NULL, &TASK_ACC_attributes);
 8001cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001d08 <main+0x7c>)
 8001cde:	2100      	movs	r1, #0
 8001ce0:	480a      	ldr	r0, [pc, #40]	@ (8001d0c <main+0x80>)
 8001ce2:	f007 fccb 	bl	800967c <osThreadNew>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	4a09      	ldr	r2, [pc, #36]	@ (8001d10 <main+0x84>)
 8001cea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001cec:	f007 fca0 	bl	8009630 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <main+0x64>
 8001cf4:	0801175c 	.word	0x0801175c
 8001cf8:	20001aa8 	.word	0x20001aa8
 8001cfc:	08011714 	.word	0x08011714
 8001d00:	08002311 	.word	0x08002311
 8001d04:	200009e8 	.word	0x200009e8
 8001d08:	08011738 	.word	0x08011738
 8001d0c:	08002329 	.word	0x08002329
 8001d10:	20001248 	.word	0x20001248

08001d14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b096      	sub	sp, #88	@ 0x58
 8001d18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d1a:	f107 0314 	add.w	r3, r7, #20
 8001d1e:	2244      	movs	r2, #68	@ 0x44
 8001d20:	2100      	movs	r1, #0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f00b ffc6 	bl	800dcb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d28:	463b      	mov	r3, r7
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
 8001d34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d36:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001d3a:	f003 fa23 	bl	8005184 <HAL_PWREx_ControlVoltageScaling>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001d44:	f000 fb2e 	bl	80023a4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001d48:	f003 f9fe 	bl	8005148 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001d4c:	4b21      	ldr	r3, [pc, #132]	@ (8001dd4 <SystemClock_Config+0xc0>)
 8001d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d52:	4a20      	ldr	r2, [pc, #128]	@ (8001dd4 <SystemClock_Config+0xc0>)
 8001d54:	f023 0318 	bic.w	r3, r3, #24
 8001d58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001d5c:	2314      	movs	r3, #20
 8001d5e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d60:	2301      	movs	r3, #1
 8001d62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d64:	2301      	movs	r3, #1
 8001d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001d6c:	2360      	movs	r3, #96	@ 0x60
 8001d6e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d70:	2302      	movs	r3, #2
 8001d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001d74:	2301      	movs	r3, #1
 8001d76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001d7c:	2328      	movs	r3, #40	@ 0x28
 8001d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001d80:	2307      	movs	r3, #7
 8001d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d84:	2302      	movs	r3, #2
 8001d86:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4618      	mov	r0, r3
 8001d92:	f003 fb19 	bl	80053c8 <HAL_RCC_OscConfig>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001d9c:	f000 fb02 	bl	80023a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001da0:	230f      	movs	r3, #15
 8001da2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001da4:	2303      	movs	r3, #3
 8001da6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001db4:	463b      	mov	r3, r7
 8001db6:	2104      	movs	r1, #4
 8001db8:	4618      	mov	r0, r3
 8001dba:	f003 fee1 	bl	8005b80 <HAL_RCC_ClockConfig>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001dc4:	f000 faee 	bl	80023a4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001dc8:	f004 fbe8 	bl	800659c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001dcc:	bf00      	nop
 8001dce:	3758      	adds	r7, #88	@ 0x58
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40021000 	.word	0x40021000

08001dd8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001ddc:	4b18      	ldr	r3, [pc, #96]	@ (8001e40 <MX_DFSDM1_Init+0x68>)
 8001dde:	4a19      	ldr	r2, [pc, #100]	@ (8001e44 <MX_DFSDM1_Init+0x6c>)
 8001de0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001de2:	4b17      	ldr	r3, [pc, #92]	@ (8001e40 <MX_DFSDM1_Init+0x68>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001de8:	4b15      	ldr	r3, [pc, #84]	@ (8001e40 <MX_DFSDM1_Init+0x68>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001dee:	4b14      	ldr	r3, [pc, #80]	@ (8001e40 <MX_DFSDM1_Init+0x68>)
 8001df0:	2202      	movs	r2, #2
 8001df2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001df4:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <MX_DFSDM1_Init+0x68>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001dfa:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <MX_DFSDM1_Init+0x68>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001e00:	4b0f      	ldr	r3, [pc, #60]	@ (8001e40 <MX_DFSDM1_Init+0x68>)
 8001e02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e06:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001e08:	4b0d      	ldr	r3, [pc, #52]	@ (8001e40 <MX_DFSDM1_Init+0x68>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e40 <MX_DFSDM1_Init+0x68>)
 8001e10:	2204      	movs	r2, #4
 8001e12:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001e14:	4b0a      	ldr	r3, [pc, #40]	@ (8001e40 <MX_DFSDM1_Init+0x68>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001e1a:	4b09      	ldr	r3, [pc, #36]	@ (8001e40 <MX_DFSDM1_Init+0x68>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001e20:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <MX_DFSDM1_Init+0x68>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001e26:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <MX_DFSDM1_Init+0x68>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001e2c:	4804      	ldr	r0, [pc, #16]	@ (8001e40 <MX_DFSDM1_Init+0x68>)
 8001e2e:	f001 fdab 	bl	8003988 <HAL_DFSDM_ChannelInit>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001e38:	f000 fab4 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	200003ac 	.word	0x200003ac
 8001e44:	40016020 	.word	0x40016020

08001e48 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ebc <MX_I2C2_Init+0x74>)
 8001e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec0 <MX_I2C2_Init+0x78>)
 8001e50:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8001e52:	4b1a      	ldr	r3, [pc, #104]	@ (8001ebc <MX_I2C2_Init+0x74>)
 8001e54:	f640 6214 	movw	r2, #3604	@ 0xe14
 8001e58:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001e5a:	4b18      	ldr	r3, [pc, #96]	@ (8001ebc <MX_I2C2_Init+0x74>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e60:	4b16      	ldr	r3, [pc, #88]	@ (8001ebc <MX_I2C2_Init+0x74>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e66:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <MX_I2C2_Init+0x74>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001e6c:	4b13      	ldr	r3, [pc, #76]	@ (8001ebc <MX_I2C2_Init+0x74>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e72:	4b12      	ldr	r3, [pc, #72]	@ (8001ebc <MX_I2C2_Init+0x74>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e78:	4b10      	ldr	r3, [pc, #64]	@ (8001ebc <MX_I2C2_Init+0x74>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ebc <MX_I2C2_Init+0x74>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e84:	480d      	ldr	r0, [pc, #52]	@ (8001ebc <MX_I2C2_Init+0x74>)
 8001e86:	f002 f9da 	bl	800423e <HAL_I2C_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001e90:	f000 fa88 	bl	80023a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e94:	2100      	movs	r1, #0
 8001e96:	4809      	ldr	r0, [pc, #36]	@ (8001ebc <MX_I2C2_Init+0x74>)
 8001e98:	f002 ff8c 	bl	8004db4 <HAL_I2CEx_ConfigAnalogFilter>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001ea2:	f000 fa7f 	bl	80023a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4804      	ldr	r0, [pc, #16]	@ (8001ebc <MX_I2C2_Init+0x74>)
 8001eaa:	f002 ffce 	bl	8004e4a <HAL_I2CEx_ConfigDigitalFilter>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001eb4:	f000 fa76 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	200003e4 	.word	0x200003e4
 8001ec0:	40005800 	.word	0x40005800

08001ec4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <MX_QUADSPI_Init+0x44>)
 8001eca:	4a10      	ldr	r2, [pc, #64]	@ (8001f0c <MX_QUADSPI_Init+0x48>)
 8001ecc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001ece:	4b0e      	ldr	r3, [pc, #56]	@ (8001f08 <MX_QUADSPI_Init+0x44>)
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f08 <MX_QUADSPI_Init+0x44>)
 8001ed6:	2204      	movs	r2, #4
 8001ed8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001eda:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <MX_QUADSPI_Init+0x44>)
 8001edc:	2210      	movs	r2, #16
 8001ede:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001ee0:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <MX_QUADSPI_Init+0x44>)
 8001ee2:	2217      	movs	r2, #23
 8001ee4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001ee6:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <MX_QUADSPI_Init+0x44>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001eec:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <MX_QUADSPI_Init+0x44>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001ef2:	4805      	ldr	r0, [pc, #20]	@ (8001f08 <MX_QUADSPI_Init+0x44>)
 8001ef4:	f003 f9ac 	bl	8005250 <HAL_QSPI_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001efe:	f000 fa51 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000438 	.word	0x20000438
 8001f0c:	a0001000 	.word	0xa0001000

08001f10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f14:	4b14      	ldr	r3, [pc, #80]	@ (8001f68 <MX_USART3_UART_Init+0x58>)
 8001f16:	4a15      	ldr	r2, [pc, #84]	@ (8001f6c <MX_USART3_UART_Init+0x5c>)
 8001f18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f1a:	4b13      	ldr	r3, [pc, #76]	@ (8001f68 <MX_USART3_UART_Init+0x58>)
 8001f1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f22:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <MX_USART3_UART_Init+0x58>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f28:	4b0f      	ldr	r3, [pc, #60]	@ (8001f68 <MX_USART3_UART_Init+0x58>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f68 <MX_USART3_UART_Init+0x58>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <MX_USART3_UART_Init+0x58>)
 8001f36:	220c      	movs	r2, #12
 8001f38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f68 <MX_USART3_UART_Init+0x58>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f40:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <MX_USART3_UART_Init+0x58>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f46:	4b08      	ldr	r3, [pc, #32]	@ (8001f68 <MX_USART3_UART_Init+0x58>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <MX_USART3_UART_Init+0x58>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f52:	4805      	ldr	r0, [pc, #20]	@ (8001f68 <MX_USART3_UART_Init+0x58>)
 8001f54:	f005 f942 	bl	80071dc <HAL_UART_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001f5e:	f000 fa21 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	2000047c 	.word	0x2000047c
 8001f6c:	40004800 	.word	0x40004800

08001f70 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001f74:	4b14      	ldr	r3, [pc, #80]	@ (8001fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f76:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001f7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001f7c:	4b12      	ldr	r3, [pc, #72]	@ (8001fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f7e:	2206      	movs	r2, #6
 8001f80:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001f82:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f84:	2202      	movs	r2, #2
 8001f86:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001f88:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001f94:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001fa0:	4b09      	ldr	r3, [pc, #36]	@ (8001fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001fa6:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001fac:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001fb2:	4805      	ldr	r0, [pc, #20]	@ (8001fc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fb4:	f002 ff95 	bl	8004ee2 <HAL_PCD_Init>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001fbe:	f000 f9f1 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000504 	.word	0x20000504

08001fcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	@ 0x28
 8001fd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd2:	f107 0314 	add.w	r3, r7, #20
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	60da      	str	r2, [r3, #12]
 8001fe0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fe2:	4bbd      	ldr	r3, [pc, #756]	@ (80022d8 <MX_GPIO_Init+0x30c>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe6:	4abc      	ldr	r2, [pc, #752]	@ (80022d8 <MX_GPIO_Init+0x30c>)
 8001fe8:	f043 0310 	orr.w	r3, r3, #16
 8001fec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fee:	4bba      	ldr	r3, [pc, #744]	@ (80022d8 <MX_GPIO_Init+0x30c>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ffa:	4bb7      	ldr	r3, [pc, #732]	@ (80022d8 <MX_GPIO_Init+0x30c>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffe:	4ab6      	ldr	r2, [pc, #728]	@ (80022d8 <MX_GPIO_Init+0x30c>)
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002006:	4bb4      	ldr	r3, [pc, #720]	@ (80022d8 <MX_GPIO_Init+0x30c>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002012:	4bb1      	ldr	r3, [pc, #708]	@ (80022d8 <MX_GPIO_Init+0x30c>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002016:	4ab0      	ldr	r2, [pc, #704]	@ (80022d8 <MX_GPIO_Init+0x30c>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800201e:	4bae      	ldr	r3, [pc, #696]	@ (80022d8 <MX_GPIO_Init+0x30c>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800202a:	4bab      	ldr	r3, [pc, #684]	@ (80022d8 <MX_GPIO_Init+0x30c>)
 800202c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202e:	4aaa      	ldr	r2, [pc, #680]	@ (80022d8 <MX_GPIO_Init+0x30c>)
 8002030:	f043 0302 	orr.w	r3, r3, #2
 8002034:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002036:	4ba8      	ldr	r3, [pc, #672]	@ (80022d8 <MX_GPIO_Init+0x30c>)
 8002038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002042:	4ba5      	ldr	r3, [pc, #660]	@ (80022d8 <MX_GPIO_Init+0x30c>)
 8002044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002046:	4aa4      	ldr	r2, [pc, #656]	@ (80022d8 <MX_GPIO_Init+0x30c>)
 8002048:	f043 0308 	orr.w	r3, r3, #8
 800204c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800204e:	4ba2      	ldr	r3, [pc, #648]	@ (80022d8 <MX_GPIO_Init+0x30c>)
 8002050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800205a:	2200      	movs	r2, #0
 800205c:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8002060:	489e      	ldr	r0, [pc, #632]	@ (80022dc <MX_GPIO_Init+0x310>)
 8002062:	f002 f8b1 	bl	80041c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8002066:	2200      	movs	r2, #0
 8002068:	f248 1104 	movw	r1, #33028	@ 0x8104
 800206c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002070:	f002 f8aa 	bl	80041c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8002074:	2200      	movs	r2, #0
 8002076:	f24b 0114 	movw	r1, #45076	@ 0xb014
 800207a:	4899      	ldr	r0, [pc, #612]	@ (80022e0 <MX_GPIO_Init+0x314>)
 800207c:	f002 f8a4 	bl	80041c8 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8002080:	2200      	movs	r2, #0
 8002082:	f241 0181 	movw	r1, #4225	@ 0x1081
 8002086:	4897      	ldr	r0, [pc, #604]	@ (80022e4 <MX_GPIO_Init+0x318>)
 8002088:	f002 f89e 	bl	80041c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800208c:	2201      	movs	r2, #1
 800208e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002092:	4894      	ldr	r0, [pc, #592]	@ (80022e4 <MX_GPIO_Init+0x318>)
 8002094:	f002 f898 	bl	80041c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8002098:	2200      	movs	r2, #0
 800209a:	f44f 7110 	mov.w	r1, #576	@ 0x240
 800209e:	4892      	ldr	r0, [pc, #584]	@ (80022e8 <MX_GPIO_Init+0x31c>)
 80020a0:	f002 f892 	bl	80041c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80020a4:	2201      	movs	r2, #1
 80020a6:	2120      	movs	r1, #32
 80020a8:	488d      	ldr	r0, [pc, #564]	@ (80022e0 <MX_GPIO_Init+0x314>)
 80020aa:	f002 f88d 	bl	80041c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80020ae:	2201      	movs	r2, #1
 80020b0:	2101      	movs	r1, #1
 80020b2:	488a      	ldr	r0, [pc, #552]	@ (80022dc <MX_GPIO_Init+0x310>)
 80020b4:	f002 f888 	bl	80041c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80020b8:	f240 1315 	movw	r3, #277	@ 0x115
 80020bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020be:	2301      	movs	r3, #1
 80020c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	4619      	mov	r1, r3
 80020d0:	4882      	ldr	r0, [pc, #520]	@ (80022dc <MX_GPIO_Init+0x310>)
 80020d2:	f001 fdc3 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80020d6:	236a      	movs	r3, #106	@ 0x6a
 80020d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	4619      	mov	r1, r3
 80020ea:	487c      	ldr	r0, [pc, #496]	@ (80022dc <MX_GPIO_Init+0x310>)
 80020ec:	f001 fdb6 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80020f0:	233f      	movs	r3, #63	@ 0x3f
 80020f2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80020f4:	230b      	movs	r3, #11
 80020f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	4619      	mov	r1, r3
 8002102:	4879      	ldr	r0, [pc, #484]	@ (80022e8 <MX_GPIO_Init+0x31c>)
 8002104:	f001 fdaa 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8002108:	2303      	movs	r3, #3
 800210a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002114:	2303      	movs	r3, #3
 8002116:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002118:	2308      	movs	r3, #8
 800211a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	4619      	mov	r1, r3
 8002122:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002126:	f001 fd99 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800212a:	f248 1304 	movw	r3, #33028	@ 0x8104
 800212e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002130:	2301      	movs	r3, #1
 8002132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002138:	2300      	movs	r3, #0
 800213a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	4619      	mov	r1, r3
 8002142:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002146:	f001 fd89 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800214a:	2308      	movs	r3, #8
 800214c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214e:	2302      	movs	r3, #2
 8002150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002156:	2300      	movs	r3, #0
 8002158:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800215a:	2301      	movs	r3, #1
 800215c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800215e:	f107 0314 	add.w	r3, r7, #20
 8002162:	4619      	mov	r1, r3
 8002164:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002168:	f001 fd78 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800216c:	2310      	movs	r3, #16
 800216e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002170:	230b      	movs	r3, #11
 8002172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	4619      	mov	r1, r3
 800217e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002182:	f001 fd6b 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8002186:	23e0      	movs	r3, #224	@ 0xe0
 8002188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002192:	2303      	movs	r3, #3
 8002194:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002196:	2305      	movs	r3, #5
 8002198:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	4619      	mov	r1, r3
 80021a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021a4:	f001 fd5a 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80021a8:	2301      	movs	r3, #1
 80021aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021ac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80021b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	4619      	mov	r1, r3
 80021bc:	4848      	ldr	r0, [pc, #288]	@ (80022e0 <MX_GPIO_Init+0x314>)
 80021be:	f001 fd4d 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80021c2:	2302      	movs	r3, #2
 80021c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80021c6:	230b      	movs	r3, #11
 80021c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80021ce:	f107 0314 	add.w	r3, r7, #20
 80021d2:	4619      	mov	r1, r3
 80021d4:	4842      	ldr	r0, [pc, #264]	@ (80022e0 <MX_GPIO_Init+0x314>)
 80021d6:	f001 fd41 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 80021da:	f24b 0334 	movw	r3, #45108	@ 0xb034
 80021de:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e0:	2301      	movs	r3, #1
 80021e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e8:	2300      	movs	r3, #0
 80021ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	4619      	mov	r1, r3
 80021f2:	483b      	ldr	r0, [pc, #236]	@ (80022e0 <MX_GPIO_Init+0x314>)
 80021f4:	f001 fd32 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80021f8:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 80021fc:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021fe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	4619      	mov	r1, r3
 800220e:	4835      	ldr	r0, [pc, #212]	@ (80022e4 <MX_GPIO_Init+0x318>)
 8002210:	f001 fd24 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8002214:	f243 0381 	movw	r3, #12417	@ 0x3081
 8002218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221a:	2301      	movs	r3, #1
 800221c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	2300      	movs	r3, #0
 8002224:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002226:	f107 0314 	add.w	r3, r7, #20
 800222a:	4619      	mov	r1, r3
 800222c:	482d      	ldr	r0, [pc, #180]	@ (80022e4 <MX_GPIO_Init+0x318>)
 800222e:	f001 fd15 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002232:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002238:	2301      	movs	r3, #1
 800223a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	4619      	mov	r1, r3
 800224a:	4827      	ldr	r0, [pc, #156]	@ (80022e8 <MX_GPIO_Init+0x31c>)
 800224c:	f001 fd06 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8002250:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002256:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800225a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	4619      	mov	r1, r3
 8002266:	4820      	ldr	r0, [pc, #128]	@ (80022e8 <MX_GPIO_Init+0x31c>)
 8002268:	f001 fcf8 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800226c:	2302      	movs	r3, #2
 800226e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002278:	2303      	movs	r3, #3
 800227a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800227c:	2305      	movs	r3, #5
 800227e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4619      	mov	r1, r3
 8002286:	4817      	ldr	r0, [pc, #92]	@ (80022e4 <MX_GPIO_Init+0x318>)
 8002288:	f001 fce8 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800228c:	2378      	movs	r3, #120	@ 0x78
 800228e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002290:	2302      	movs	r3, #2
 8002292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002298:	2303      	movs	r3, #3
 800229a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800229c:	2307      	movs	r3, #7
 800229e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022a0:	f107 0314 	add.w	r3, r7, #20
 80022a4:	4619      	mov	r1, r3
 80022a6:	480f      	ldr	r0, [pc, #60]	@ (80022e4 <MX_GPIO_Init+0x318>)
 80022a8:	f001 fcd8 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80022ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022b2:	2312      	movs	r3, #18
 80022b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ba:	2303      	movs	r3, #3
 80022bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022be:	2304      	movs	r3, #4
 80022c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	4619      	mov	r1, r3
 80022c8:	4805      	ldr	r0, [pc, #20]	@ (80022e0 <MX_GPIO_Init+0x314>)
 80022ca:	f001 fcc7 	bl	8003c5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80022ce:	2200      	movs	r2, #0
 80022d0:	2105      	movs	r1, #5
 80022d2:	2017      	movs	r0, #23
 80022d4:	e00a      	b.n	80022ec <MX_GPIO_Init+0x320>
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000
 80022dc:	48001000 	.word	0x48001000
 80022e0:	48000400 	.word	0x48000400
 80022e4:	48000c00 	.word	0x48000c00
 80022e8:	48000800 	.word	0x48000800
 80022ec:	f001 fb15 	bl	800391a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80022f0:	2017      	movs	r0, #23
 80022f2:	f001 fb2e 	bl	8003952 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80022f6:	2200      	movs	r2, #0
 80022f8:	2105      	movs	r1, #5
 80022fa:	2028      	movs	r0, #40	@ 0x28
 80022fc:	f001 fb0d 	bl	800391a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002300:	2028      	movs	r0, #40	@ 0x28
 8002302:	f001 fb26 	bl	8003952 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002306:	bf00      	nop
 8002308:	3728      	adds	r7, #40	@ 0x28
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop

08002310 <StartTASK_BLE>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTASK_BLE */
void StartTASK_BLE(void *argument)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
//	if (set_connectable)
//	  {
//		Set_DeviceConnectable();
//		set_connectable = FALSE;
//	  }
	MX_BlueNRG_MS_Process();
 8002318:	f7fe ff5c 	bl	80011d4 <MX_BlueNRG_MS_Process>
//
//	  hci_user_evt_proc();
    osDelay(1);
 800231c:	2001      	movs	r0, #1
 800231e:	f007 fa3f 	bl	80097a0 <osDelay>
	MX_BlueNRG_MS_Process();
 8002322:	bf00      	nop
 8002324:	e7f8      	b.n	8002318 <StartTASK_BLE+0x8>
	...

08002328 <StartTASK_ACC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTASK_ACC */
void StartTASK_ACC(void *argument)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  int16_t pDataXYZ[3];
  for(;;)
  {
	osSemaphoreAcquire(BinarySem01Handle, delayTime);
 8002330:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <StartTASK_ACC+0x50>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a11      	ldr	r2, [pc, #68]	@ (800237c <StartTASK_ACC+0x54>)
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	4611      	mov	r1, r2
 800233a:	4618      	mov	r0, r3
 800233c:	f007 fad4 	bl	80098e8 <osSemaphoreAcquire>
	BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8002340:	f107 0308 	add.w	r3, r7, #8
 8002344:	4618      	mov	r0, r3
 8002346:	f001 f847 	bl	80033d8 <BSP_ACCELERO_AccGetXYZ>
	x_axes.AXIS_X = pDataXYZ[0];
 800234a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800234e:	461a      	mov	r2, r3
 8002350:	4b0b      	ldr	r3, [pc, #44]	@ (8002380 <StartTASK_ACC+0x58>)
 8002352:	601a      	str	r2, [r3, #0]
	x_axes.AXIS_Y = pDataXYZ[1];
 8002354:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002358:	461a      	mov	r2, r3
 800235a:	4b09      	ldr	r3, [pc, #36]	@ (8002380 <StartTASK_ACC+0x58>)
 800235c:	605a      	str	r2, [r3, #4]
	x_axes.AXIS_Z = pDataXYZ[2];
 800235e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002362:	461a      	mov	r2, r3
 8002364:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <StartTASK_ACC+0x58>)
 8002366:	609a      	str	r2, [r3, #8]

	Acc_Update(&x_axes, &g_axes, &m_axes);
 8002368:	4a06      	ldr	r2, [pc, #24]	@ (8002384 <StartTASK_ACC+0x5c>)
 800236a:	4907      	ldr	r1, [pc, #28]	@ (8002388 <StartTASK_ACC+0x60>)
 800236c:	4804      	ldr	r0, [pc, #16]	@ (8002380 <StartTASK_ACC+0x58>)
 800236e:	f7ff f8c9 	bl	8001504 <Acc_Update>
  {
 8002372:	bf00      	nop
 8002374:	e7dc      	b.n	8002330 <StartTASK_ACC+0x8>
 8002376:	bf00      	nop
 8002378:	20001aa8 	.word	0x20001aa8
 800237c:	20000004 	.word	0x20000004
 8002380:	20000280 	.word	0x20000280
 8002384:	20000298 	.word	0x20000298
 8002388:	2000028c 	.word	0x2000028c

0800238c <trigger_update>:
  }
  /* USER CODE END StartTASK_ACC */
}

void trigger_update()
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
	osSemaphoreRelease(BinarySem01Handle);
 8002390:	4b03      	ldr	r3, [pc, #12]	@ (80023a0 <trigger_update+0x14>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f007 faf9 	bl	800998c <osSemaphoreRelease>
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20001aa8 	.word	0x20001aa8

080023a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023a8:	b672      	cpsid	i
}
 80023aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023ac:	bf00      	nop
 80023ae:	e7fd      	b.n	80023ac <Error_Handler+0x8>

080023b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b6:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <HAL_MspInit+0x4c>)
 80023b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ba:	4a10      	ldr	r2, [pc, #64]	@ (80023fc <HAL_MspInit+0x4c>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80023c2:	4b0e      	ldr	r3, [pc, #56]	@ (80023fc <HAL_MspInit+0x4c>)
 80023c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	607b      	str	r3, [r7, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <HAL_MspInit+0x4c>)
 80023d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d2:	4a0a      	ldr	r2, [pc, #40]	@ (80023fc <HAL_MspInit+0x4c>)
 80023d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80023da:	4b08      	ldr	r3, [pc, #32]	@ (80023fc <HAL_MspInit+0x4c>)
 80023dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023e2:	603b      	str	r3, [r7, #0]
 80023e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	210f      	movs	r1, #15
 80023ea:	f06f 0001 	mvn.w	r0, #1
 80023ee:	f001 fa94 	bl	800391a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000

08002400 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b0ac      	sub	sp, #176	@ 0xb0
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002408:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002418:	f107 0314 	add.w	r3, r7, #20
 800241c:	2288      	movs	r2, #136	@ 0x88
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f00b fc47 	bl	800dcb4 <memset>
  if(DFSDM1_Init == 0)
 8002426:	4b25      	ldr	r3, [pc, #148]	@ (80024bc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d142      	bne.n	80024b4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800242e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002432:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002434:	2300      	movs	r3, #0
 8002436:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	4618      	mov	r0, r3
 8002440:	f003 fdc2 	bl	8005fc8 <HAL_RCCEx_PeriphCLKConfig>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800244a:	f7ff ffab 	bl	80023a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800244e:	4b1c      	ldr	r3, [pc, #112]	@ (80024c0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002452:	4a1b      	ldr	r2, [pc, #108]	@ (80024c0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002454:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002458:	6613      	str	r3, [r2, #96]	@ 0x60
 800245a:	4b19      	ldr	r3, [pc, #100]	@ (80024c0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800245c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800245e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002466:	4b16      	ldr	r3, [pc, #88]	@ (80024c0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246a:	4a15      	ldr	r2, [pc, #84]	@ (80024c0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800246c:	f043 0310 	orr.w	r3, r3, #16
 8002470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002472:	4b13      	ldr	r3, [pc, #76]	@ (80024c0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002476:	f003 0310 	and.w	r3, r3, #16
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800247e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8002482:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	2302      	movs	r3, #2
 8002488:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002492:	2300      	movs	r3, #0
 8002494:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002498:	2306      	movs	r3, #6
 800249a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800249e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80024a2:	4619      	mov	r1, r3
 80024a4:	4807      	ldr	r0, [pc, #28]	@ (80024c4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80024a6:	f001 fbd9 	bl	8003c5c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80024aa:	4b04      	ldr	r3, [pc, #16]	@ (80024bc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	3301      	adds	r3, #1
 80024b0:	4a02      	ldr	r2, [pc, #8]	@ (80024bc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80024b2:	6013      	str	r3, [r2, #0]
  }

}
 80024b4:	bf00      	nop
 80024b6:	37b0      	adds	r7, #176	@ 0xb0
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20001aac 	.word	0x20001aac
 80024c0:	40021000 	.word	0x40021000
 80024c4:	48001000 	.word	0x48001000

080024c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b0ac      	sub	sp, #176	@ 0xb0
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	2288      	movs	r2, #136	@ 0x88
 80024e6:	2100      	movs	r1, #0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f00b fbe3 	bl	800dcb4 <memset>
  if(hi2c->Instance==I2C2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a21      	ldr	r2, [pc, #132]	@ (8002578 <HAL_I2C_MspInit+0xb0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d13b      	bne.n	8002570 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80024f8:	2380      	movs	r3, #128	@ 0x80
 80024fa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80024fc:	2300      	movs	r3, #0
 80024fe:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	4618      	mov	r0, r3
 8002506:	f003 fd5f 	bl	8005fc8 <HAL_RCCEx_PeriphCLKConfig>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002510:	f7ff ff48 	bl	80023a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002514:	4b19      	ldr	r3, [pc, #100]	@ (800257c <HAL_I2C_MspInit+0xb4>)
 8002516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002518:	4a18      	ldr	r2, [pc, #96]	@ (800257c <HAL_I2C_MspInit+0xb4>)
 800251a:	f043 0302 	orr.w	r3, r3, #2
 800251e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002520:	4b16      	ldr	r3, [pc, #88]	@ (800257c <HAL_I2C_MspInit+0xb4>)
 8002522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800252c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002530:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002534:	2312      	movs	r3, #18
 8002536:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800253a:	2301      	movs	r3, #1
 800253c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002540:	2303      	movs	r3, #3
 8002542:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002546:	2304      	movs	r3, #4
 8002548:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002550:	4619      	mov	r1, r3
 8002552:	480b      	ldr	r0, [pc, #44]	@ (8002580 <HAL_I2C_MspInit+0xb8>)
 8002554:	f001 fb82 	bl	8003c5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002558:	4b08      	ldr	r3, [pc, #32]	@ (800257c <HAL_I2C_MspInit+0xb4>)
 800255a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255c:	4a07      	ldr	r2, [pc, #28]	@ (800257c <HAL_I2C_MspInit+0xb4>)
 800255e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002562:	6593      	str	r3, [r2, #88]	@ 0x58
 8002564:	4b05      	ldr	r3, [pc, #20]	@ (800257c <HAL_I2C_MspInit+0xb4>)
 8002566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002568:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002570:	bf00      	nop
 8002572:	37b0      	adds	r7, #176	@ 0xb0
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40005800 	.word	0x40005800
 800257c:	40021000 	.word	0x40021000
 8002580:	48000400 	.word	0x48000400

08002584 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a0b      	ldr	r2, [pc, #44]	@ (80025c0 <HAL_I2C_MspDeInit+0x3c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d10f      	bne.n	80025b6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002596:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <HAL_I2C_MspDeInit+0x40>)
 8002598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259a:	4a0a      	ldr	r2, [pc, #40]	@ (80025c4 <HAL_I2C_MspDeInit+0x40>)
 800259c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80025a0:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80025a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80025a6:	4808      	ldr	r0, [pc, #32]	@ (80025c8 <HAL_I2C_MspDeInit+0x44>)
 80025a8:	f001 fd02 	bl	8003fb0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80025ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80025b0:	4805      	ldr	r0, [pc, #20]	@ (80025c8 <HAL_I2C_MspDeInit+0x44>)
 80025b2:	f001 fcfd 	bl	8003fb0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40005800 	.word	0x40005800
 80025c4:	40021000 	.word	0x40021000
 80025c8:	48000400 	.word	0x48000400

080025cc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08a      	sub	sp, #40	@ 0x28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a17      	ldr	r2, [pc, #92]	@ (8002648 <HAL_QSPI_MspInit+0x7c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d128      	bne.n	8002640 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80025ee:	4b17      	ldr	r3, [pc, #92]	@ (800264c <HAL_QSPI_MspInit+0x80>)
 80025f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025f2:	4a16      	ldr	r2, [pc, #88]	@ (800264c <HAL_QSPI_MspInit+0x80>)
 80025f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025f8:	6513      	str	r3, [r2, #80]	@ 0x50
 80025fa:	4b14      	ldr	r3, [pc, #80]	@ (800264c <HAL_QSPI_MspInit+0x80>)
 80025fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002606:	4b11      	ldr	r3, [pc, #68]	@ (800264c <HAL_QSPI_MspInit+0x80>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260a:	4a10      	ldr	r2, [pc, #64]	@ (800264c <HAL_QSPI_MspInit+0x80>)
 800260c:	f043 0310 	orr.w	r3, r3, #16
 8002610:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002612:	4b0e      	ldr	r3, [pc, #56]	@ (800264c <HAL_QSPI_MspInit+0x80>)
 8002614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800261e:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8002622:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002624:	2302      	movs	r3, #2
 8002626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262c:	2303      	movs	r3, #3
 800262e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002630:	230a      	movs	r3, #10
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	4619      	mov	r1, r3
 800263a:	4805      	ldr	r0, [pc, #20]	@ (8002650 <HAL_QSPI_MspInit+0x84>)
 800263c:	f001 fb0e 	bl	8003c5c <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002640:	bf00      	nop
 8002642:	3728      	adds	r7, #40	@ 0x28
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	a0001000 	.word	0xa0001000
 800264c:	40021000 	.word	0x40021000
 8002650:	48001000 	.word	0x48001000

08002654 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b0ac      	sub	sp, #176	@ 0xb0
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800266c:	f107 0314 	add.w	r3, r7, #20
 8002670:	2288      	movs	r2, #136	@ 0x88
 8002672:	2100      	movs	r1, #0
 8002674:	4618      	mov	r0, r3
 8002676:	f00b fb1d 	bl	800dcb4 <memset>
  if(huart->Instance==USART3)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a21      	ldr	r2, [pc, #132]	@ (8002704 <HAL_UART_MspInit+0xb0>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d13b      	bne.n	80026fc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002684:	2304      	movs	r3, #4
 8002686:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002688:	2300      	movs	r3, #0
 800268a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	4618      	mov	r0, r3
 8002692:	f003 fc99 	bl	8005fc8 <HAL_RCCEx_PeriphCLKConfig>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800269c:	f7ff fe82 	bl	80023a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80026a0:	4b19      	ldr	r3, [pc, #100]	@ (8002708 <HAL_UART_MspInit+0xb4>)
 80026a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a4:	4a18      	ldr	r2, [pc, #96]	@ (8002708 <HAL_UART_MspInit+0xb4>)
 80026a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80026ac:	4b16      	ldr	r3, [pc, #88]	@ (8002708 <HAL_UART_MspInit+0xb4>)
 80026ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026b8:	4b13      	ldr	r3, [pc, #76]	@ (8002708 <HAL_UART_MspInit+0xb4>)
 80026ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026bc:	4a12      	ldr	r2, [pc, #72]	@ (8002708 <HAL_UART_MspInit+0xb4>)
 80026be:	f043 0308 	orr.w	r3, r3, #8
 80026c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026c4:	4b10      	ldr	r3, [pc, #64]	@ (8002708 <HAL_UART_MspInit+0xb4>)
 80026c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80026d0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80026d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d8:	2302      	movs	r3, #2
 80026da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e4:	2303      	movs	r3, #3
 80026e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026ea:	2307      	movs	r3, #7
 80026ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80026f4:	4619      	mov	r1, r3
 80026f6:	4805      	ldr	r0, [pc, #20]	@ (800270c <HAL_UART_MspInit+0xb8>)
 80026f8:	f001 fab0 	bl	8003c5c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80026fc:	bf00      	nop
 80026fe:	37b0      	adds	r7, #176	@ 0xb0
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40004800 	.word	0x40004800
 8002708:	40021000 	.word	0x40021000
 800270c:	48000c00 	.word	0x48000c00

08002710 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b0ac      	sub	sp, #176	@ 0xb0
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002718:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	2288      	movs	r2, #136	@ 0x88
 800272e:	2100      	movs	r1, #0
 8002730:	4618      	mov	r0, r3
 8002732:	f00b fabf 	bl	800dcb4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800273e:	d17c      	bne.n	800283a <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002740:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002744:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002746:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800274a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800274e:	2301      	movs	r3, #1
 8002750:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002752:	2301      	movs	r3, #1
 8002754:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002756:	2318      	movs	r3, #24
 8002758:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800275a:	2307      	movs	r3, #7
 800275c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800275e:	2302      	movs	r3, #2
 8002760:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002762:	2302      	movs	r3, #2
 8002764:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002766:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800276a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800276c:	f107 0314 	add.w	r3, r7, #20
 8002770:	4618      	mov	r0, r3
 8002772:	f003 fc29 	bl	8005fc8 <HAL_RCCEx_PeriphCLKConfig>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800277c:	f7ff fe12 	bl	80023a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002780:	4b30      	ldr	r3, [pc, #192]	@ (8002844 <HAL_PCD_MspInit+0x134>)
 8002782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002784:	4a2f      	ldr	r2, [pc, #188]	@ (8002844 <HAL_PCD_MspInit+0x134>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800278c:	4b2d      	ldr	r3, [pc, #180]	@ (8002844 <HAL_PCD_MspInit+0x134>)
 800278e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002798:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800279c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80027ac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80027b0:	4619      	mov	r1, r3
 80027b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027b6:	f001 fa51 	bl	8003c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80027ba:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80027be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c2:	2302      	movs	r3, #2
 80027c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ce:	2303      	movs	r3, #3
 80027d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80027d4:	230a      	movs	r3, #10
 80027d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027da:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80027de:	4619      	mov	r1, r3
 80027e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027e4:	f001 fa3a 	bl	8003c5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80027e8:	4b16      	ldr	r3, [pc, #88]	@ (8002844 <HAL_PCD_MspInit+0x134>)
 80027ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ec:	4a15      	ldr	r2, [pc, #84]	@ (8002844 <HAL_PCD_MspInit+0x134>)
 80027ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027f4:	4b13      	ldr	r3, [pc, #76]	@ (8002844 <HAL_PCD_MspInit+0x134>)
 80027f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002800:	4b10      	ldr	r3, [pc, #64]	@ (8002844 <HAL_PCD_MspInit+0x134>)
 8002802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d114      	bne.n	8002836 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800280c:	4b0d      	ldr	r3, [pc, #52]	@ (8002844 <HAL_PCD_MspInit+0x134>)
 800280e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002810:	4a0c      	ldr	r2, [pc, #48]	@ (8002844 <HAL_PCD_MspInit+0x134>)
 8002812:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002816:	6593      	str	r3, [r2, #88]	@ 0x58
 8002818:	4b0a      	ldr	r3, [pc, #40]	@ (8002844 <HAL_PCD_MspInit+0x134>)
 800281a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002824:	f002 fd04 	bl	8005230 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002828:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <HAL_PCD_MspInit+0x134>)
 800282a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282c:	4a05      	ldr	r2, [pc, #20]	@ (8002844 <HAL_PCD_MspInit+0x134>)
 800282e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002832:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002834:	e001      	b.n	800283a <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8002836:	f002 fcfb 	bl	8005230 <HAL_PWREx_EnableVddUSB>
}
 800283a:	bf00      	nop
 800283c:	37b0      	adds	r7, #176	@ 0xb0
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40021000 	.word	0x40021000

08002848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800284c:	bf00      	nop
 800284e:	e7fd      	b.n	800284c <NMI_Handler+0x4>

08002850 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002854:	bf00      	nop
 8002856:	e7fd      	b.n	8002854 <HardFault_Handler+0x4>

08002858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800285c:	bf00      	nop
 800285e:	e7fd      	b.n	800285c <MemManage_Handler+0x4>

08002860 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002864:	bf00      	nop
 8002866:	e7fd      	b.n	8002864 <BusFault_Handler+0x4>

08002868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800286c:	bf00      	nop
 800286e:	e7fd      	b.n	800286c <UsageFault_Handler+0x4>

08002870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002882:	f000 ff2b 	bl	80036dc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002886:	f009 f803 	bl	800b890 <xTaskGetSchedulerState>
 800288a:	4603      	mov	r3, r0
 800288c:	2b01      	cmp	r3, #1
 800288e:	d001      	beq.n	8002894 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002890:	f009 fefa 	bl	800c688 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002894:	bf00      	nop
 8002896:	bd80      	pop	{r7, pc}

08002898 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800289c:	2020      	movs	r0, #32
 800289e:	f001 fcab 	bl	80041f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 80028a2:	4806      	ldr	r0, [pc, #24]	@ (80028bc <EXTI9_5_IRQHandler+0x24>)
 80028a4:	f001 f9aa 	bl	8003bfc <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80028a8:	2080      	movs	r0, #128	@ 0x80
 80028aa:	f001 fca5 	bl	80041f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80028ae:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80028b2:	f001 fca1 	bl	80041f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	200002a4 	.word	0x200002a4

080028c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80028c4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80028c8:	f001 fc96 	bl	80041f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80028cc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80028d0:	f001 fc92 	bl	80041f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80028d4:	4806      	ldr	r0, [pc, #24]	@ (80028f0 <EXTI15_10_IRQHandler+0x30>)
 80028d6:	f001 f991 	bl	8003bfc <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80028da:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80028de:	f001 fc8b 	bl	80041f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80028e2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80028e6:	f001 fc87 	bl	80041f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000010 	.word	0x20000010

080028f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  return 1;
 80028f8:	2301      	movs	r3, #1
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <_kill>:

int _kill(int pid, int sig)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800290e:	f00b fa23 	bl	800dd58 <__errno>
 8002912:	4603      	mov	r3, r0
 8002914:	2216      	movs	r2, #22
 8002916:	601a      	str	r2, [r3, #0]
  return -1;
 8002918:	f04f 33ff 	mov.w	r3, #4294967295
}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <_exit>:

void _exit (int status)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800292c:	f04f 31ff 	mov.w	r1, #4294967295
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff ffe7 	bl	8002904 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002936:	bf00      	nop
 8002938:	e7fd      	b.n	8002936 <_exit+0x12>

0800293a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b086      	sub	sp, #24
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	e00a      	b.n	8002962 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800294c:	f3af 8000 	nop.w
 8002950:	4601      	mov	r1, r0
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	60ba      	str	r2, [r7, #8]
 8002958:	b2ca      	uxtb	r2, r1
 800295a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	3301      	adds	r3, #1
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	429a      	cmp	r2, r3
 8002968:	dbf0      	blt.n	800294c <_read+0x12>
  }

  return len;
 800296a:	687b      	ldr	r3, [r7, #4]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002980:	2300      	movs	r3, #0
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	e009      	b.n	800299a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	60ba      	str	r2, [r7, #8]
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fb78 	bl	8003084 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	3301      	adds	r3, #1
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	429a      	cmp	r2, r3
 80029a0:	dbf1      	blt.n	8002986 <_write+0x12>
  }
  return len;
 80029a2:	687b      	ldr	r3, [r7, #4]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <_close>:

int _close(int file)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029d4:	605a      	str	r2, [r3, #4]
  return 0;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <_isatty>:

int _isatty(int file)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029ec:	2301      	movs	r3, #1
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b085      	sub	sp, #20
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a1c:	4a14      	ldr	r2, [pc, #80]	@ (8002a70 <_sbrk+0x5c>)
 8002a1e:	4b15      	ldr	r3, [pc, #84]	@ (8002a74 <_sbrk+0x60>)
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a28:	4b13      	ldr	r3, [pc, #76]	@ (8002a78 <_sbrk+0x64>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d102      	bne.n	8002a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a30:	4b11      	ldr	r3, [pc, #68]	@ (8002a78 <_sbrk+0x64>)
 8002a32:	4a12      	ldr	r2, [pc, #72]	@ (8002a7c <_sbrk+0x68>)
 8002a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a36:	4b10      	ldr	r3, [pc, #64]	@ (8002a78 <_sbrk+0x64>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d207      	bcs.n	8002a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a44:	f00b f988 	bl	800dd58 <__errno>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	220c      	movs	r2, #12
 8002a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a52:	e009      	b.n	8002a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a54:	4b08      	ldr	r3, [pc, #32]	@ (8002a78 <_sbrk+0x64>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a5a:	4b07      	ldr	r3, [pc, #28]	@ (8002a78 <_sbrk+0x64>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4413      	add	r3, r2
 8002a62:	4a05      	ldr	r2, [pc, #20]	@ (8002a78 <_sbrk+0x64>)
 8002a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a66:	68fb      	ldr	r3, [r7, #12]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20018000 	.word	0x20018000
 8002a74:	00000400 	.word	0x00000400
 8002a78:	20001ab0 	.word	0x20001ab0
 8002a7c:	20003968 	.word	0x20003968

08002a80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a84:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <SystemInit+0x20>)
 8002a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8a:	4a05      	ldr	r2, [pc, #20]	@ (8002aa0 <SystemInit+0x20>)
 8002a8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002a94:	bf00      	nop
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002aa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002adc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002aa8:	f7ff ffea 	bl	8002a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002aac:	480c      	ldr	r0, [pc, #48]	@ (8002ae0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002aae:	490d      	ldr	r1, [pc, #52]	@ (8002ae4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ae8 <LoopForever+0xe>)
  movs r3, #0
 8002ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ab4:	e002      	b.n	8002abc <LoopCopyDataInit>

08002ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aba:	3304      	adds	r3, #4

08002abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ac0:	d3f9      	bcc.n	8002ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8002aec <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ac4:	4c0a      	ldr	r4, [pc, #40]	@ (8002af0 <LoopForever+0x16>)
  movs r3, #0
 8002ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ac8:	e001      	b.n	8002ace <LoopFillZerobss>

08002aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002acc:	3204      	adds	r2, #4

08002ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ad0:	d3fb      	bcc.n	8002aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ad2:	f00b f947 	bl	800dd64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ad6:	f7ff f8d9 	bl	8001c8c <main>

08002ada <LoopForever>:

LoopForever:
    b LoopForever
 8002ada:	e7fe      	b.n	8002ada <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002adc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ae4:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8002ae8:	08011c04 	.word	0x08011c04
  ldr r2, =_sbss
 8002aec:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8002af0:	20003968 	.word	0x20003968

08002af4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002af4:	e7fe      	b.n	8002af4 <ADC1_2_IRQHandler>
	...

08002af8 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	4a04      	ldr	r2, [pc, #16]	@ (8002b18 <BSP_LED_Init+0x20>)
 8002b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0a:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	080117b4 	.word	0x080117b4

08002b1c <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b22:	4b1c      	ldr	r3, [pc, #112]	@ (8002b94 <LED_USER_GPIO_Init+0x78>)
 8002b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b26:	4a1b      	ldr	r2, [pc, #108]	@ (8002b94 <LED_USER_GPIO_Init+0x78>)
 8002b28:	f043 0302 	orr.w	r3, r3, #2
 8002b2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b2e:	4b19      	ldr	r3, [pc, #100]	@ (8002b94 <LED_USER_GPIO_Init+0x78>)
 8002b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3a:	f107 030c 	add.w	r3, r7, #12
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	609a      	str	r2, [r3, #8]
 8002b46:	60da      	str	r2, [r3, #12]
 8002b48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b4a:	4b12      	ldr	r3, [pc, #72]	@ (8002b94 <LED_USER_GPIO_Init+0x78>)
 8002b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b4e:	4a11      	ldr	r2, [pc, #68]	@ (8002b94 <LED_USER_GPIO_Init+0x78>)
 8002b50:	f043 0302 	orr.w	r3, r3, #2
 8002b54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b56:	4b0f      	ldr	r3, [pc, #60]	@ (8002b94 <LED_USER_GPIO_Init+0x78>)
 8002b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	607b      	str	r3, [r7, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8002b62:	2200      	movs	r2, #0
 8002b64:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002b68:	480b      	ldr	r0, [pc, #44]	@ (8002b98 <LED_USER_GPIO_Init+0x7c>)
 8002b6a:	f001 fb2d 	bl	80041c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8002b6e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b74:	2301      	movs	r3, #1
 8002b76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8002b80:	f107 030c 	add.w	r3, r7, #12
 8002b84:	4619      	mov	r1, r3
 8002b86:	4804      	ldr	r0, [pc, #16]	@ (8002b98 <LED_USER_GPIO_Init+0x7c>)
 8002b88:	f001 f868 	bl	8003c5c <HAL_GPIO_Init>

}
 8002b8c:	bf00      	nop
 8002b8e:	3720      	adds	r7, #32
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40021000 	.word	0x40021000
 8002b98:	48000400 	.word	0x48000400

08002b9c <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	460a      	mov	r2, r1
 8002ba6:	71fb      	strb	r3, [r7, #7]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	4a1f      	ldr	r2, [pc, #124]	@ (8002c30 <BSP_PB_Init+0x94>)
 8002bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb8:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8002bba:	79bb      	ldrb	r3, [r7, #6]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d132      	bne.n	8002c26 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8002c34 <BSP_PB_Init+0x98>)
 8002bc6:	441a      	add	r2, r3
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	491b      	ldr	r1, [pc, #108]	@ (8002c38 <BSP_PB_Init+0x9c>)
 8002bcc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	f000 fffe 	bl	8003bd4 <HAL_EXTI_GetHandle>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002bde:	f06f 0303 	mvn.w	r3, #3
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	e01f      	b.n	8002c26 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	4a12      	ldr	r2, [pc, #72]	@ (8002c34 <BSP_PB_Init+0x98>)
 8002bec:	1898      	adds	r0, r3, r2
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	4a12      	ldr	r2, [pc, #72]	@ (8002c3c <BSP_PB_Init+0xa0>)
 8002bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	f000 ffd1 	bl	8003ba0 <HAL_EXTI_RegisterCallback>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002c04:	f06f 0303 	mvn.w	r3, #3
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	e00c      	b.n	8002c26 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002c0c:	2028      	movs	r0, #40	@ 0x28
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	4a0b      	ldr	r2, [pc, #44]	@ (8002c40 <BSP_PB_Init+0xa4>)
 8002c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c16:	2200      	movs	r2, #0
 8002c18:	4619      	mov	r1, r3
 8002c1a:	f000 fe7e 	bl	800391a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002c1e:	2328      	movs	r3, #40	@ 0x28
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 fe96 	bl	8003952 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8002c26:	68fb      	ldr	r3, [r7, #12]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	080117b8 	.word	0x080117b8
 8002c34:	20000010 	.word	0x20000010
 8002c38:	080117bc 	.word	0x080117bc
 8002c3c:	080117c0 	.word	0x080117c0
 8002c40:	080117c4 	.word	0x080117c4

08002c44 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	4a09      	ldr	r2, [pc, #36]	@ (8002c78 <BSP_PB_GetState+0x34>)
 8002c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c56:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f001 fa9b 	bl	8004198 <HAL_GPIO_ReadPin>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bf0c      	ite	eq
 8002c68:	2301      	moveq	r3, #1
 8002c6a:	2300      	movne	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	2000000c 	.word	0x2000000c

08002c7c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002c80:	2000      	movs	r0, #0
 8002c82:	f7fe facd 	bl	8001220 <BSP_PB_Callback>
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c92:	4b19      	ldr	r3, [pc, #100]	@ (8002cf8 <BUTTON_USER_GPIO_Init+0x6c>)
 8002c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c96:	4a18      	ldr	r2, [pc, #96]	@ (8002cf8 <BUTTON_USER_GPIO_Init+0x6c>)
 8002c98:	f043 0304 	orr.w	r3, r3, #4
 8002c9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c9e:	4b16      	ldr	r3, [pc, #88]	@ (8002cf8 <BUTTON_USER_GPIO_Init+0x6c>)
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca2:	f003 0304 	and.w	r3, r3, #4
 8002ca6:	60bb      	str	r3, [r7, #8]
 8002ca8:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002caa:	f107 030c 	add.w	r3, r7, #12
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	605a      	str	r2, [r3, #4]
 8002cb4:	609a      	str	r2, [r3, #8]
 8002cb6:	60da      	str	r2, [r3, #12]
 8002cb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cba:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf8 <BUTTON_USER_GPIO_Init+0x6c>)
 8002cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cbe:	4a0e      	ldr	r2, [pc, #56]	@ (8002cf8 <BUTTON_USER_GPIO_Init+0x6c>)
 8002cc0:	f043 0304 	orr.w	r3, r3, #4
 8002cc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf8 <BUTTON_USER_GPIO_Init+0x6c>)
 8002cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	607b      	str	r3, [r7, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8002cd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002cd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002cd8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002cdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8002ce2:	f107 030c 	add.w	r3, r7, #12
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4804      	ldr	r0, [pc, #16]	@ (8002cfc <BUTTON_USER_GPIO_Init+0x70>)
 8002cea:	f000 ffb7 	bl	8003c5c <HAL_GPIO_Init>

}
 8002cee:	bf00      	nop
 8002cf0:	3720      	adds	r7, #32
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	48000800 	.word	0x48000800

08002d00 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d903      	bls.n	8002d1c <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002d14:	f06f 0301 	mvn.w	r3, #1
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	e025      	b.n	8002d68 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	79fa      	ldrb	r2, [r7, #7]
 8002d20:	4914      	ldr	r1, [pc, #80]	@ (8002d74 <BSP_COM_Init+0x74>)
 8002d22:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002d26:	4814      	ldr	r0, [pc, #80]	@ (8002d78 <BSP_COM_Init+0x78>)
 8002d28:	4613      	mov	r3, r2
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4403      	add	r3, r0
 8002d32:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8002d34:	79fa      	ldrb	r2, [r7, #7]
 8002d36:	4613      	mov	r3, r2
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	4413      	add	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8002d78 <BSP_COM_Init+0x78>)
 8002d40:	4413      	add	r3, r2
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 f9ba 	bl	80030bc <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8002d48:	79fa      	ldrb	r2, [r7, #7]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	4413      	add	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4a09      	ldr	r2, [pc, #36]	@ (8002d78 <BSP_COM_Init+0x78>)
 8002d54:	4413      	add	r3, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 f960 	bl	800301c <MX_USART1_UART_Init>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002d62:	f06f 0303 	mvn.w	r3, #3
 8002d66:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002d68:	68fb      	ldr	r3, [r7, #12]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000018 	.word	0x20000018
 8002d78:	20001ab4 	.word	0x20001ab4

08002d7c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08a      	sub	sp, #40	@ 0x28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002d84:	4b27      	ldr	r3, [pc, #156]	@ (8002e24 <I2Cx_MspInit+0xa8>)
 8002d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d88:	4a26      	ldr	r2, [pc, #152]	@ (8002e24 <I2Cx_MspInit+0xa8>)
 8002d8a:	f043 0302 	orr.w	r3, r3, #2
 8002d8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d90:	4b24      	ldr	r3, [pc, #144]	@ (8002e24 <I2Cx_MspInit+0xa8>)
 8002d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002d9c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002da0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002da2:	2312      	movs	r3, #18
 8002da4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002da6:	2301      	movs	r3, #1
 8002da8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002daa:	2303      	movs	r3, #3
 8002dac:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002dae:	2304      	movs	r3, #4
 8002db0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002db2:	f107 0314 	add.w	r3, r7, #20
 8002db6:	4619      	mov	r1, r3
 8002db8:	481b      	ldr	r0, [pc, #108]	@ (8002e28 <I2Cx_MspInit+0xac>)
 8002dba:	f000 ff4f 	bl	8003c5c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002dbe:	f107 0314 	add.w	r3, r7, #20
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4818      	ldr	r0, [pc, #96]	@ (8002e28 <I2Cx_MspInit+0xac>)
 8002dc6:	f000 ff49 	bl	8003c5c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002dca:	4b16      	ldr	r3, [pc, #88]	@ (8002e24 <I2Cx_MspInit+0xa8>)
 8002dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dce:	4a15      	ldr	r2, [pc, #84]	@ (8002e24 <I2Cx_MspInit+0xa8>)
 8002dd0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002dd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dd6:	4b13      	ldr	r3, [pc, #76]	@ (8002e24 <I2Cx_MspInit+0xa8>)
 8002dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002de2:	4b10      	ldr	r3, [pc, #64]	@ (8002e24 <I2Cx_MspInit+0xa8>)
 8002de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de6:	4a0f      	ldr	r2, [pc, #60]	@ (8002e24 <I2Cx_MspInit+0xa8>)
 8002de8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002dec:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002dee:	4b0d      	ldr	r3, [pc, #52]	@ (8002e24 <I2Cx_MspInit+0xa8>)
 8002df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df2:	4a0c      	ldr	r2, [pc, #48]	@ (8002e24 <I2Cx_MspInit+0xa8>)
 8002df4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002df8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	210f      	movs	r1, #15
 8002dfe:	2021      	movs	r0, #33	@ 0x21
 8002e00:	f000 fd8b 	bl	800391a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002e04:	2021      	movs	r0, #33	@ 0x21
 8002e06:	f000 fda4 	bl	8003952 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	210f      	movs	r1, #15
 8002e0e:	2022      	movs	r0, #34	@ 0x22
 8002e10:	f000 fd83 	bl	800391a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002e14:	2022      	movs	r0, #34	@ 0x22
 8002e16:	f000 fd9c 	bl	8003952 <HAL_NVIC_EnableIRQ>
}
 8002e1a:	bf00      	nop
 8002e1c:	3728      	adds	r7, #40	@ 0x28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000
 8002e28:	48000400 	.word	0x48000400

08002e2c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a12      	ldr	r2, [pc, #72]	@ (8002e80 <I2Cx_Init+0x54>)
 8002e38:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a11      	ldr	r2, [pc, #68]	@ (8002e84 <I2Cx_Init+0x58>)
 8002e3e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff ff89 	bl	8002d7c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f001 f9e7 	bl	800423e <HAL_I2C_Init>

  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);
 8002e70:	2100      	movs	r1, #0
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f001 ff9e 	bl	8004db4 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40005800 	.word	0x40005800
 8002e84:	00702681 	.word	0x00702681

08002e88 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	@ 0x28
 8002e8c:	af04      	add	r7, sp, #16
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	4608      	mov	r0, r1
 8002e92:	4611      	mov	r1, r2
 8002e94:	461a      	mov	r2, r3
 8002e96:	4603      	mov	r3, r0
 8002e98:	72fb      	strb	r3, [r7, #11]
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	813b      	strh	r3, [r7, #8]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002ea6:	7afb      	ldrb	r3, [r7, #11]
 8002ea8:	b299      	uxth	r1, r3
 8002eaa:	88f8      	ldrh	r0, [r7, #6]
 8002eac:	893a      	ldrh	r2, [r7, #8]
 8002eae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002eb2:	9302      	str	r3, [sp, #8]
 8002eb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002eb6:	9301      	str	r3, [sp, #4]
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f001 fb9c 	bl	80045fc <HAL_I2C_Mem_Read>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002ec8:	7dfb      	ldrb	r3, [r7, #23]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d004      	beq.n	8002ed8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002ece:	7afb      	ldrb	r3, [r7, #11]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 f832 	bl	8002f3c <I2Cx_Error>
  }
  return status;
 8002ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b08a      	sub	sp, #40	@ 0x28
 8002ee6:	af04      	add	r7, sp, #16
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	4608      	mov	r0, r1
 8002eec:	4611      	mov	r1, r2
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	72fb      	strb	r3, [r7, #11]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	813b      	strh	r3, [r7, #8]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002f00:	7afb      	ldrb	r3, [r7, #11]
 8002f02:	b299      	uxth	r1, r3
 8002f04:	88f8      	ldrh	r0, [r7, #6]
 8002f06:	893a      	ldrh	r2, [r7, #8]
 8002f08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f0c:	9302      	str	r3, [sp, #8]
 8002f0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002f10:	9301      	str	r3, [sp, #4]
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	4603      	mov	r3, r0
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f001 fa5b 	bl	80043d4 <HAL_I2C_Mem_Write>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002f22:	7dfb      	ldrb	r3, [r7, #23]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d004      	beq.n	8002f32 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002f28:	7afb      	ldrb	r3, [r7, #11]
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 f805 	bl	8002f3c <I2Cx_Error>
  }
  return status;
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	460b      	mov	r3, r1
 8002f46:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f001 fa13 	bl	8004374 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7ff ff6c 	bl	8002e2c <I2Cx_Init>
}
 8002f54:	bf00      	nop
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002f60:	4802      	ldr	r0, [pc, #8]	@ (8002f6c <SENSOR_IO_Init+0x10>)
 8002f62:	f7ff ff63 	bl	8002e2c <I2Cx_Init>
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20001b40 	.word	0x20001b40

08002f70 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af02      	add	r7, sp, #8
 8002f76:	4603      	mov	r3, r0
 8002f78:	71fb      	strb	r3, [r7, #7]
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	71bb      	strb	r3, [r7, #6]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002f82:	79bb      	ldrb	r3, [r7, #6]
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	79f9      	ldrb	r1, [r7, #7]
 8002f88:	2301      	movs	r3, #1
 8002f8a:	9301      	str	r3, [sp, #4]
 8002f8c:	1d7b      	adds	r3, r7, #5
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	2301      	movs	r3, #1
 8002f92:	4803      	ldr	r0, [pc, #12]	@ (8002fa0 <SENSOR_IO_Write+0x30>)
 8002f94:	f7ff ffa5 	bl	8002ee2 <I2Cx_WriteMultiple>
}
 8002f98:	bf00      	nop
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20001b40 	.word	0x20001b40

08002fa4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af02      	add	r7, sp, #8
 8002faa:	4603      	mov	r3, r0
 8002fac:	460a      	mov	r2, r1
 8002fae:	71fb      	strb	r3, [r7, #7]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002fb8:	79bb      	ldrb	r3, [r7, #6]
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	79f9      	ldrb	r1, [r7, #7]
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	9301      	str	r3, [sp, #4]
 8002fc2:	f107 030f 	add.w	r3, r7, #15
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	2301      	movs	r3, #1
 8002fca:	4804      	ldr	r0, [pc, #16]	@ (8002fdc <SENSOR_IO_Read+0x38>)
 8002fcc:	f7ff ff5c 	bl	8002e88 <I2Cx_ReadMultiple>

  return read_value;
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20001b40 	.word	0x20001b40

08002fe0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	603a      	str	r2, [r7, #0]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4603      	mov	r3, r0
 8002fec:	71fb      	strb	r3, [r7, #7]
 8002fee:	460b      	mov	r3, r1
 8002ff0:	71bb      	strb	r3, [r7, #6]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002ff6:	79bb      	ldrb	r3, [r7, #6]
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	79f9      	ldrb	r1, [r7, #7]
 8002ffc:	88bb      	ldrh	r3, [r7, #4]
 8002ffe:	9301      	str	r3, [sp, #4]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	2301      	movs	r3, #1
 8003006:	4804      	ldr	r0, [pc, #16]	@ (8003018 <SENSOR_IO_ReadMultiple+0x38>)
 8003008:	f7ff ff3e 	bl	8002e88 <I2Cx_ReadMultiple>
 800300c:	4603      	mov	r3, r0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20001b40 	.word	0x20001b40

0800301c <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a15      	ldr	r2, [pc, #84]	@ (8003080 <MX_USART1_UART_Init+0x64>)
 800302c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003034:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	220c      	movs	r2, #12
 800304c:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f004 f8b8 	bl	80071dc <HAL_UART_Init>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <MX_USART1_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003076:	7bfb      	ldrb	r3, [r7, #15]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40013800 	.word	0x40013800

08003084 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 800308c:	4b09      	ldr	r3, [pc, #36]	@ (80030b4 <__io_putchar+0x30>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	4613      	mov	r3, r2
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	4413      	add	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4a07      	ldr	r2, [pc, #28]	@ (80030b8 <__io_putchar+0x34>)
 800309c:	1898      	adds	r0, r3, r2
 800309e:	1d39      	adds	r1, r7, #4
 80030a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030a4:	2201      	movs	r2, #1
 80030a6:	f004 f8e7 	bl	8007278 <HAL_UART_Transmit>
  return ch;
 80030aa:	687b      	ldr	r3, [r7, #4]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	20001b3c 	.word	0x20001b3c
 80030b8:	20001ab4 	.word	0x20001ab4

080030bc <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b0ac      	sub	sp, #176	@ 0xb0
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030c4:	f107 0314 	add.w	r3, r7, #20
 80030c8:	2288      	movs	r2, #136	@ 0x88
 80030ca:	2100      	movs	r1, #0
 80030cc:	4618      	mov	r0, r3
 80030ce:	f00a fdf1 	bl	800dcb4 <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80030d2:	2301      	movs	r3, #1
 80030d4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80030d6:	2300      	movs	r3, #0
 80030d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80030da:	f107 0314 	add.w	r3, r7, #20
 80030de:	4618      	mov	r0, r3
 80030e0:	f002 ff72 	bl	8005fc8 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030e4:	4b22      	ldr	r3, [pc, #136]	@ (8003170 <USART1_MspInit+0xb4>)
 80030e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030e8:	4a21      	ldr	r2, [pc, #132]	@ (8003170 <USART1_MspInit+0xb4>)
 80030ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80030f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003170 <USART1_MspInit+0xb4>)
 80030f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003170 <USART1_MspInit+0xb4>)
 80030fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003100:	4a1b      	ldr	r2, [pc, #108]	@ (8003170 <USART1_MspInit+0xb4>)
 8003102:	f043 0302 	orr.w	r3, r3, #2
 8003106:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003108:	4b19      	ldr	r3, [pc, #100]	@ (8003170 <USART1_MspInit+0xb4>)
 800310a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8003114:	2340      	movs	r3, #64	@ 0x40
 8003116:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311a:	2302      	movs	r3, #2
 800311c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003126:	2303      	movs	r3, #3
 8003128:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 800312c:	2307      	movs	r3, #7
 800312e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8003132:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003136:	4619      	mov	r1, r3
 8003138:	480e      	ldr	r0, [pc, #56]	@ (8003174 <USART1_MspInit+0xb8>)
 800313a:	f000 fd8f 	bl	8003c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 800313e:	2380      	movs	r3, #128	@ 0x80
 8003140:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003144:	2302      	movs	r3, #2
 8003146:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	2300      	movs	r3, #0
 800314c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003150:	2303      	movs	r3, #3
 8003152:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 8003156:	2307      	movs	r3, #7
 8003158:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 800315c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003160:	4619      	mov	r1, r3
 8003162:	4804      	ldr	r0, [pc, #16]	@ (8003174 <USART1_MspInit+0xb8>)
 8003164:	f000 fd7a 	bl	8003c5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 8003168:	bf00      	nop
 800316a:	37b0      	adds	r7, #176	@ 0xb0
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40021000 	.word	0x40021000
 8003174:	48000400 	.word	0x48000400

08003178 <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800317e:	2300      	movs	r3, #0
 8003180:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 8003182:	4b12      	ldr	r3, [pc, #72]	@ (80031cc <BSP_SPI3_Init+0x54>)
 8003184:	4a12      	ldr	r2, [pc, #72]	@ (80031d0 <BSP_SPI3_Init+0x58>)
 8003186:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 8003188:	4b12      	ldr	r3, [pc, #72]	@ (80031d4 <BSP_SPI3_Init+0x5c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	4911      	ldr	r1, [pc, #68]	@ (80031d4 <BSP_SPI3_Init+0x5c>)
 8003190:	600a      	str	r2, [r1, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d114      	bne.n	80031c0 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 8003196:	480d      	ldr	r0, [pc, #52]	@ (80031cc <BSP_SPI3_Init+0x54>)
 8003198:	f003 feae 	bl	8006ef8 <HAL_SPI_GetState>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10e      	bne.n	80031c0 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 80031a2:	480a      	ldr	r0, [pc, #40]	@ (80031cc <BSP_SPI3_Init+0x54>)
 80031a4:	f000 f882 	bl	80032ac <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d108      	bne.n	80031c0 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 80031ae:	4807      	ldr	r0, [pc, #28]	@ (80031cc <BSP_SPI3_Init+0x54>)
 80031b0:	f000 f83a 	bl	8003228 <MX_SPI3_Init>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 80031ba:	f06f 0307 	mvn.w	r3, #7
 80031be:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 80031c0:	687b      	ldr	r3, [r7, #4]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20001b94 	.word	0x20001b94
 80031d0:	40003c00 	.word	0x40003c00
 80031d4:	20001bf8 	.word	0x20001bf8

080031d8 <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b088      	sub	sp, #32
 80031dc:	af02      	add	r7, sp, #8
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	4613      	mov	r3, r2
 80031e4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80031f0:	9200      	str	r2, [sp, #0]
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	68f9      	ldr	r1, [r7, #12]
 80031f6:	4807      	ldr	r0, [pc, #28]	@ (8003214 <BSP_SPI3_SendRecv+0x3c>)
 80031f8:	f003 fc5f 	bl	8006aba <HAL_SPI_TransmitReceive>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8003202:	f06f 0305 	mvn.w	r3, #5
 8003206:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8003208:	697b      	ldr	r3, [r7, #20]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20001b94 	.word	0x20001b94

08003218 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800321c:	f000 fa72 	bl	8003704 <HAL_GetTick>
 8003220:	4603      	mov	r3, r0
}
 8003222:	4618      	mov	r0, r3
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a1c      	ldr	r2, [pc, #112]	@ (80032a8 <MX_SPI3_Init+0x80>)
 8003238:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003240:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800324e:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003262:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2207      	movs	r2, #7
 8003280:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2208      	movs	r2, #8
 800328c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f003 fb66 	bl	8006960 <HAL_SPI_Init>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800329e:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40003c00 	.word	0x40003c00

080032ac <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08a      	sub	sp, #40	@ 0x28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80032b4:	4b27      	ldr	r3, [pc, #156]	@ (8003354 <SPI3_MspInit+0xa8>)
 80032b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b8:	4a26      	ldr	r2, [pc, #152]	@ (8003354 <SPI3_MspInit+0xa8>)
 80032ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032be:	6593      	str	r3, [r2, #88]	@ 0x58
 80032c0:	4b24      	ldr	r3, [pc, #144]	@ (8003354 <SPI3_MspInit+0xa8>)
 80032c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032cc:	4b21      	ldr	r3, [pc, #132]	@ (8003354 <SPI3_MspInit+0xa8>)
 80032ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032d0:	4a20      	ldr	r2, [pc, #128]	@ (8003354 <SPI3_MspInit+0xa8>)
 80032d2:	f043 0304 	orr.w	r3, r3, #4
 80032d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003354 <SPI3_MspInit+0xa8>)
 80032da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 80032e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ea:	2302      	movs	r3, #2
 80032ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f2:	2303      	movs	r3, #3
 80032f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 80032f6:	2306      	movs	r3, #6
 80032f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 80032fa:	f107 0314 	add.w	r3, r7, #20
 80032fe:	4619      	mov	r1, r3
 8003300:	4815      	ldr	r0, [pc, #84]	@ (8003358 <SPI3_MspInit+0xac>)
 8003302:	f000 fcab 	bl	8003c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 8003306:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800330a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330c:	2302      	movs	r3, #2
 800330e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003314:	2303      	movs	r3, #3
 8003316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 8003318:	2306      	movs	r3, #6
 800331a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 800331c:	f107 0314 	add.w	r3, r7, #20
 8003320:	4619      	mov	r1, r3
 8003322:	480d      	ldr	r0, [pc, #52]	@ (8003358 <SPI3_MspInit+0xac>)
 8003324:	f000 fc9a 	bl	8003c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 8003328:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800332c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332e:	2302      	movs	r3, #2
 8003330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	2300      	movs	r3, #0
 8003334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003336:	2303      	movs	r3, #3
 8003338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 800333a:	2306      	movs	r3, #6
 800333c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800333e:	f107 0314 	add.w	r3, r7, #20
 8003342:	4619      	mov	r1, r3
 8003344:	4804      	ldr	r0, [pc, #16]	@ (8003358 <SPI3_MspInit+0xac>)
 8003346:	f000 fc89 	bl	8003c5c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 800334a:	bf00      	nop
 800334c:	3728      	adds	r7, #40	@ 0x28
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000
 8003358:	48000800 	.word	0x48000800

0800335c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003366:	2300      	movs	r3, #0
 8003368:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800336a:	4b19      	ldr	r3, [pc, #100]	@ (80033d0 <BSP_ACCELERO_Init+0x74>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	4798      	blx	r3
 8003370:	4603      	mov	r3, r0
 8003372:	2b6a      	cmp	r3, #106	@ 0x6a
 8003374:	d002      	beq.n	800337c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	73fb      	strb	r3, [r7, #15]
 800337a:	e024      	b.n	80033c6 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800337c:	4b15      	ldr	r3, [pc, #84]	@ (80033d4 <BSP_ACCELERO_Init+0x78>)
 800337e:	4a14      	ldr	r2, [pc, #80]	@ (80033d0 <BSP_ACCELERO_Init+0x74>)
 8003380:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8003382:	2330      	movs	r3, #48	@ 0x30
 8003384:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8003386:	2300      	movs	r3, #0
 8003388:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800338a:	2300      	movs	r3, #0
 800338c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800338e:	2340      	movs	r3, #64	@ 0x40
 8003390:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8003392:	2300      	movs	r3, #0
 8003394:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800339a:	797a      	ldrb	r2, [r7, #5]
 800339c:	7abb      	ldrb	r3, [r7, #10]
 800339e:	4313      	orrs	r3, r2
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80033a4:	7a3b      	ldrb	r3, [r7, #8]
 80033a6:	f043 0304 	orr.w	r3, r3, #4
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	021b      	lsls	r3, r3, #8
 80033ae:	b21a      	sxth	r2, r3
 80033b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	b21b      	sxth	r3, r3
 80033b8:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80033ba:	4b06      	ldr	r3, [pc, #24]	@ (80033d4 <BSP_ACCELERO_Init+0x78>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	89ba      	ldrh	r2, [r7, #12]
 80033c2:	4610      	mov	r0, r2
 80033c4:	4798      	blx	r3
  }  

  return ret;
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	2000001c 	.word	0x2000001c
 80033d4:	20001bfc 	.word	0x20001bfc

080033d8 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80033e0:	4b08      	ldr	r3, [pc, #32]	@ (8003404 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d009      	beq.n	80033fc <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80033e8:	4b06      	ldr	r3, [pc, #24]	@ (8003404 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d004      	beq.n	80033fc <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80033f2:	4b04      	ldr	r3, [pc, #16]	@ (8003404 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	4798      	blx	r3
    }
  }
}
 80033fc:	bf00      	nop
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	20001bfc 	.word	0x20001bfc

08003408 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003412:	2300      	movs	r3, #0
 8003414:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003416:	2110      	movs	r1, #16
 8003418:	20d4      	movs	r0, #212	@ 0xd4
 800341a:	f7ff fdc3 	bl	8002fa4 <SENSOR_IO_Read>
 800341e:	4603      	mov	r3, r0
 8003420:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003426:	7bbb      	ldrb	r3, [r7, #14]
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800342e:	7bba      	ldrb	r2, [r7, #14]
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	4313      	orrs	r3, r2
 8003434:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8003436:	7bbb      	ldrb	r3, [r7, #14]
 8003438:	461a      	mov	r2, r3
 800343a:	2110      	movs	r1, #16
 800343c:	20d4      	movs	r0, #212	@ 0xd4
 800343e:	f7ff fd97 	bl	8002f70 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003442:	2112      	movs	r1, #18
 8003444:	20d4      	movs	r0, #212	@ 0xd4
 8003446:	f7ff fdad 	bl	8002fa4 <SENSOR_IO_Read>
 800344a:	4603      	mov	r3, r0
 800344c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800344e:	88fb      	ldrh	r3, [r7, #6]
 8003450:	0a1b      	lsrs	r3, r3, #8
 8003452:	b29b      	uxth	r3, r3
 8003454:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003456:	7bbb      	ldrb	r3, [r7, #14]
 8003458:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 800345c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800345e:	7bba      	ldrb	r2, [r7, #14]
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	4313      	orrs	r3, r2
 8003464:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003466:	7bbb      	ldrb	r3, [r7, #14]
 8003468:	461a      	mov	r2, r3
 800346a:	2112      	movs	r1, #18
 800346c:	20d4      	movs	r0, #212	@ 0xd4
 800346e:	f7ff fd7f 	bl	8002f70 <SENSOR_IO_Write>
}
 8003472:	bf00      	nop
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003480:	2300      	movs	r3, #0
 8003482:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003484:	2110      	movs	r1, #16
 8003486:	20d4      	movs	r0, #212	@ 0xd4
 8003488:	f7ff fd8c 	bl	8002fa4 <SENSOR_IO_Read>
 800348c:	4603      	mov	r3, r0
 800348e:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	461a      	mov	r2, r3
 800349c:	2110      	movs	r1, #16
 800349e:	20d4      	movs	r0, #212	@ 0xd4
 80034a0:	f7ff fd66 	bl	8002f70 <SENSOR_IO_Write>
}
 80034a4:	bf00      	nop
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80034b0:	f7ff fd54 	bl	8002f5c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80034b4:	210f      	movs	r1, #15
 80034b6:	20d4      	movs	r0, #212	@ 0xd4
 80034b8:	f7ff fd74 	bl	8002fa4 <SENSOR_IO_Read>
 80034bc:	4603      	mov	r3, r0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b084      	sub	sp, #16
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	4603      	mov	r3, r0
 80034ca:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80034cc:	2300      	movs	r3, #0
 80034ce:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80034d0:	2115      	movs	r1, #21
 80034d2:	20d4      	movs	r0, #212	@ 0xd4
 80034d4:	f7ff fd66 	bl	8002fa4 <SENSOR_IO_Read>
 80034d8:	4603      	mov	r3, r0
 80034da:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	f023 0310 	bic.w	r3, r3, #16
 80034e2:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	f043 0310 	orr.w	r3, r3, #16
 80034f0:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
 80034f4:	461a      	mov	r2, r3
 80034f6:	2115      	movs	r1, #21
 80034f8:	20d4      	movs	r0, #212	@ 0xd4
 80034fa:	f7ff fd39 	bl	8002f70 <SENSOR_IO_Write>
}
 80034fe:	bf00      	nop
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8003510:	2300      	movs	r3, #0
 8003512:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003514:	2300      	movs	r3, #0
 8003516:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800351e:	2110      	movs	r1, #16
 8003520:	20d4      	movs	r0, #212	@ 0xd4
 8003522:	f7ff fd3f 	bl	8002fa4 <SENSOR_IO_Read>
 8003526:	4603      	mov	r3, r0
 8003528:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800352a:	f107 0208 	add.w	r2, r7, #8
 800352e:	2306      	movs	r3, #6
 8003530:	2128      	movs	r1, #40	@ 0x28
 8003532:	20d4      	movs	r0, #212	@ 0xd4
 8003534:	f7ff fd54 	bl	8002fe0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003538:	2300      	movs	r3, #0
 800353a:	77fb      	strb	r3, [r7, #31]
 800353c:	e01a      	b.n	8003574 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800353e:	7ffb      	ldrb	r3, [r7, #31]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	3301      	adds	r3, #1
 8003544:	3320      	adds	r3, #32
 8003546:	443b      	add	r3, r7
 8003548:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800354c:	021b      	lsls	r3, r3, #8
 800354e:	b29b      	uxth	r3, r3
 8003550:	7ffa      	ldrb	r2, [r7, #31]
 8003552:	0052      	lsls	r2, r2, #1
 8003554:	3220      	adds	r2, #32
 8003556:	443a      	add	r2, r7
 8003558:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800355c:	4413      	add	r3, r2
 800355e:	b29a      	uxth	r2, r3
 8003560:	7ffb      	ldrb	r3, [r7, #31]
 8003562:	b212      	sxth	r2, r2
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	3320      	adds	r3, #32
 8003568:	443b      	add	r3, r7
 800356a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800356e:	7ffb      	ldrb	r3, [r7, #31]
 8003570:	3301      	adds	r3, #1
 8003572:	77fb      	strb	r3, [r7, #31]
 8003574:	7ffb      	ldrb	r3, [r7, #31]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d9e1      	bls.n	800353e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800357a:	7dfb      	ldrb	r3, [r7, #23]
 800357c:	f003 030c 	and.w	r3, r3, #12
 8003580:	2b0c      	cmp	r3, #12
 8003582:	d829      	bhi.n	80035d8 <LSM6DSL_AccReadXYZ+0xd0>
 8003584:	a201      	add	r2, pc, #4	@ (adr r2, 800358c <LSM6DSL_AccReadXYZ+0x84>)
 8003586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358a:	bf00      	nop
 800358c:	080035c1 	.word	0x080035c1
 8003590:	080035d9 	.word	0x080035d9
 8003594:	080035d9 	.word	0x080035d9
 8003598:	080035d9 	.word	0x080035d9
 800359c:	080035d3 	.word	0x080035d3
 80035a0:	080035d9 	.word	0x080035d9
 80035a4:	080035d9 	.word	0x080035d9
 80035a8:	080035d9 	.word	0x080035d9
 80035ac:	080035c7 	.word	0x080035c7
 80035b0:	080035d9 	.word	0x080035d9
 80035b4:	080035d9 	.word	0x080035d9
 80035b8:	080035d9 	.word	0x080035d9
 80035bc:	080035cd 	.word	0x080035cd
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80035c0:	4b18      	ldr	r3, [pc, #96]	@ (8003624 <LSM6DSL_AccReadXYZ+0x11c>)
 80035c2:	61bb      	str	r3, [r7, #24]
    break;
 80035c4:	e008      	b.n	80035d8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80035c6:	4b18      	ldr	r3, [pc, #96]	@ (8003628 <LSM6DSL_AccReadXYZ+0x120>)
 80035c8:	61bb      	str	r3, [r7, #24]
    break;
 80035ca:	e005      	b.n	80035d8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80035cc:	4b17      	ldr	r3, [pc, #92]	@ (800362c <LSM6DSL_AccReadXYZ+0x124>)
 80035ce:	61bb      	str	r3, [r7, #24]
    break;
 80035d0:	e002      	b.n	80035d8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80035d2:	4b17      	ldr	r3, [pc, #92]	@ (8003630 <LSM6DSL_AccReadXYZ+0x128>)
 80035d4:	61bb      	str	r3, [r7, #24]
    break;    
 80035d6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80035d8:	2300      	movs	r3, #0
 80035da:	77fb      	strb	r3, [r7, #31]
 80035dc:	e01a      	b.n	8003614 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80035de:	7ffb      	ldrb	r3, [r7, #31]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	3320      	adds	r3, #32
 80035e4:	443b      	add	r3, r7
 80035e6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80035f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035fa:	7ffb      	ldrb	r3, [r7, #31]
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	4413      	add	r3, r2
 8003602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003606:	ee17 2a90 	vmov	r2, s15
 800360a:	b212      	sxth	r2, r2
 800360c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800360e:	7ffb      	ldrb	r3, [r7, #31]
 8003610:	3301      	adds	r3, #1
 8003612:	77fb      	strb	r3, [r7, #31]
 8003614:	7ffb      	ldrb	r3, [r7, #31]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d9e1      	bls.n	80035de <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 800361a:	bf00      	nop
 800361c:	bf00      	nop
 800361e:	3720      	adds	r7, #32
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	3d79db23 	.word	0x3d79db23
 8003628:	3df9db23 	.word	0x3df9db23
 800362c:	3e79db23 	.word	0x3e79db23
 8003630:	3ef9db23 	.word	0x3ef9db23

08003634 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800363e:	2003      	movs	r0, #3
 8003640:	f000 f960 	bl	8003904 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003644:	200f      	movs	r0, #15
 8003646:	f000 f80d 	bl	8003664 <HAL_InitTick>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	71fb      	strb	r3, [r7, #7]
 8003654:	e001      	b.n	800365a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003656:	f7fe feab 	bl	80023b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800365a:	79fb      	ldrb	r3, [r7, #7]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800366c:	2300      	movs	r3, #0
 800366e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003670:	4b17      	ldr	r3, [pc, #92]	@ (80036d0 <HAL_InitTick+0x6c>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d023      	beq.n	80036c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003678:	4b16      	ldr	r3, [pc, #88]	@ (80036d4 <HAL_InitTick+0x70>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4b14      	ldr	r3, [pc, #80]	@ (80036d0 <HAL_InitTick+0x6c>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	4619      	mov	r1, r3
 8003682:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003686:	fbb3 f3f1 	udiv	r3, r3, r1
 800368a:	fbb2 f3f3 	udiv	r3, r2, r3
 800368e:	4618      	mov	r0, r3
 8003690:	f000 f96d 	bl	800396e <HAL_SYSTICK_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10f      	bne.n	80036ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b0f      	cmp	r3, #15
 800369e:	d809      	bhi.n	80036b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036a0:	2200      	movs	r2, #0
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	f04f 30ff 	mov.w	r0, #4294967295
 80036a8:	f000 f937 	bl	800391a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036ac:	4a0a      	ldr	r2, [pc, #40]	@ (80036d8 <HAL_InitTick+0x74>)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	e007      	b.n	80036c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
 80036b8:	e004      	b.n	80036c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	73fb      	strb	r3, [r7, #15]
 80036be:	e001      	b.n	80036c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20000054 	.word	0x20000054
 80036d4:	20000008 	.word	0x20000008
 80036d8:	20000050 	.word	0x20000050

080036dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036e0:	4b06      	ldr	r3, [pc, #24]	@ (80036fc <HAL_IncTick+0x20>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	461a      	mov	r2, r3
 80036e6:	4b06      	ldr	r3, [pc, #24]	@ (8003700 <HAL_IncTick+0x24>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4413      	add	r3, r2
 80036ec:	4a04      	ldr	r2, [pc, #16]	@ (8003700 <HAL_IncTick+0x24>)
 80036ee:	6013      	str	r3, [r2, #0]
}
 80036f0:	bf00      	nop
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	20000054 	.word	0x20000054
 8003700:	20001c00 	.word	0x20001c00

08003704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  return uwTick;
 8003708:	4b03      	ldr	r3, [pc, #12]	@ (8003718 <HAL_GetTick+0x14>)
 800370a:	681b      	ldr	r3, [r3, #0]
}
 800370c:	4618      	mov	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	20001c00 	.word	0x20001c00

0800371c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003724:	f7ff ffee 	bl	8003704 <HAL_GetTick>
 8003728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003734:	d005      	beq.n	8003742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003736:	4b0a      	ldr	r3, [pc, #40]	@ (8003760 <HAL_Delay+0x44>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4413      	add	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003742:	bf00      	nop
 8003744:	f7ff ffde 	bl	8003704 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	429a      	cmp	r2, r3
 8003752:	d8f7      	bhi.n	8003744 <HAL_Delay+0x28>
  {
  }
}
 8003754:	bf00      	nop
 8003756:	bf00      	nop
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	20000054 	.word	0x20000054

08003764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003774:	4b0c      	ldr	r3, [pc, #48]	@ (80037a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003780:	4013      	ands	r3, r2
 8003782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800378c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003796:	4a04      	ldr	r2, [pc, #16]	@ (80037a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	60d3      	str	r3, [r2, #12]
}
 800379c:	bf00      	nop
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037b0:	4b04      	ldr	r3, [pc, #16]	@ (80037c4 <__NVIC_GetPriorityGrouping+0x18>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	0a1b      	lsrs	r3, r3, #8
 80037b6:	f003 0307 	and.w	r3, r3, #7
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	e000ed00 	.word	0xe000ed00

080037c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	db0b      	blt.n	80037f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	f003 021f 	and.w	r2, r3, #31
 80037e0:	4907      	ldr	r1, [pc, #28]	@ (8003800 <__NVIC_EnableIRQ+0x38>)
 80037e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	2001      	movs	r0, #1
 80037ea:	fa00 f202 	lsl.w	r2, r0, r2
 80037ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	e000e100 	.word	0xe000e100

08003804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	6039      	str	r1, [r7, #0]
 800380e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003814:	2b00      	cmp	r3, #0
 8003816:	db0a      	blt.n	800382e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	b2da      	uxtb	r2, r3
 800381c:	490c      	ldr	r1, [pc, #48]	@ (8003850 <__NVIC_SetPriority+0x4c>)
 800381e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003822:	0112      	lsls	r2, r2, #4
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	440b      	add	r3, r1
 8003828:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800382c:	e00a      	b.n	8003844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	b2da      	uxtb	r2, r3
 8003832:	4908      	ldr	r1, [pc, #32]	@ (8003854 <__NVIC_SetPriority+0x50>)
 8003834:	79fb      	ldrb	r3, [r7, #7]
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	3b04      	subs	r3, #4
 800383c:	0112      	lsls	r2, r2, #4
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	440b      	add	r3, r1
 8003842:	761a      	strb	r2, [r3, #24]
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	e000e100 	.word	0xe000e100
 8003854:	e000ed00 	.word	0xe000ed00

08003858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003858:	b480      	push	{r7}
 800385a:	b089      	sub	sp, #36	@ 0x24
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f1c3 0307 	rsb	r3, r3, #7
 8003872:	2b04      	cmp	r3, #4
 8003874:	bf28      	it	cs
 8003876:	2304      	movcs	r3, #4
 8003878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3304      	adds	r3, #4
 800387e:	2b06      	cmp	r3, #6
 8003880:	d902      	bls.n	8003888 <NVIC_EncodePriority+0x30>
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	3b03      	subs	r3, #3
 8003886:	e000      	b.n	800388a <NVIC_EncodePriority+0x32>
 8003888:	2300      	movs	r3, #0
 800388a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800388c:	f04f 32ff 	mov.w	r2, #4294967295
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43da      	mvns	r2, r3
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	401a      	ands	r2, r3
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038a0:	f04f 31ff 	mov.w	r1, #4294967295
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	fa01 f303 	lsl.w	r3, r1, r3
 80038aa:	43d9      	mvns	r1, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b0:	4313      	orrs	r3, r2
         );
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3724      	adds	r7, #36	@ 0x24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
	...

080038c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038d0:	d301      	bcc.n	80038d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038d2:	2301      	movs	r3, #1
 80038d4:	e00f      	b.n	80038f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003900 <SysTick_Config+0x40>)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3b01      	subs	r3, #1
 80038dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038de:	210f      	movs	r1, #15
 80038e0:	f04f 30ff 	mov.w	r0, #4294967295
 80038e4:	f7ff ff8e 	bl	8003804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038e8:	4b05      	ldr	r3, [pc, #20]	@ (8003900 <SysTick_Config+0x40>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ee:	4b04      	ldr	r3, [pc, #16]	@ (8003900 <SysTick_Config+0x40>)
 80038f0:	2207      	movs	r2, #7
 80038f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	e000e010 	.word	0xe000e010

08003904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff ff29 	bl	8003764 <__NVIC_SetPriorityGrouping>
}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b086      	sub	sp, #24
 800391e:	af00      	add	r7, sp, #0
 8003920:	4603      	mov	r3, r0
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
 8003926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800392c:	f7ff ff3e 	bl	80037ac <__NVIC_GetPriorityGrouping>
 8003930:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	68b9      	ldr	r1, [r7, #8]
 8003936:	6978      	ldr	r0, [r7, #20]
 8003938:	f7ff ff8e 	bl	8003858 <NVIC_EncodePriority>
 800393c:	4602      	mov	r2, r0
 800393e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003942:	4611      	mov	r1, r2
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff ff5d 	bl	8003804 <__NVIC_SetPriority>
}
 800394a:	bf00      	nop
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	4603      	mov	r3, r0
 800395a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800395c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff ff31 	bl	80037c8 <__NVIC_EnableIRQ>
}
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff ffa2 	bl	80038c0 <SysTick_Config>
 800397c:	4603      	mov	r3, r0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e0ac      	b.n	8003af4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 f8b2 	bl	8003b08 <DFSDM_GetChannelFromInstance>
 80039a4:	4603      	mov	r3, r0
 80039a6:	4a55      	ldr	r2, [pc, #340]	@ (8003afc <HAL_DFSDM_ChannelInit+0x174>)
 80039a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e09f      	b.n	8003af4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7fe fd23 	bl	8002400 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80039ba:	4b51      	ldr	r3, [pc, #324]	@ (8003b00 <HAL_DFSDM_ChannelInit+0x178>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3301      	adds	r3, #1
 80039c0:	4a4f      	ldr	r2, [pc, #316]	@ (8003b00 <HAL_DFSDM_ChannelInit+0x178>)
 80039c2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80039c4:	4b4e      	ldr	r3, [pc, #312]	@ (8003b00 <HAL_DFSDM_ChannelInit+0x178>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d125      	bne.n	8003a18 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80039cc:	4b4d      	ldr	r3, [pc, #308]	@ (8003b04 <HAL_DFSDM_ChannelInit+0x17c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a4c      	ldr	r2, [pc, #304]	@ (8003b04 <HAL_DFSDM_ChannelInit+0x17c>)
 80039d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80039d6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80039d8:	4b4a      	ldr	r3, [pc, #296]	@ (8003b04 <HAL_DFSDM_ChannelInit+0x17c>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	4948      	ldr	r1, [pc, #288]	@ (8003b04 <HAL_DFSDM_ChannelInit+0x17c>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80039e6:	4b47      	ldr	r3, [pc, #284]	@ (8003b04 <HAL_DFSDM_ChannelInit+0x17c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a46      	ldr	r2, [pc, #280]	@ (8003b04 <HAL_DFSDM_ChannelInit+0x17c>)
 80039ec:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80039f0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	791b      	ldrb	r3, [r3, #4]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d108      	bne.n	8003a0c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80039fa:	4b42      	ldr	r3, [pc, #264]	@ (8003b04 <HAL_DFSDM_ChannelInit+0x17c>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	041b      	lsls	r3, r3, #16
 8003a06:	493f      	ldr	r1, [pc, #252]	@ (8003b04 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003a0c:	4b3d      	ldr	r3, [pc, #244]	@ (8003b04 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a3c      	ldr	r2, [pc, #240]	@ (8003b04 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a16:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003a26:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6819      	ldr	r1, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003a36:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003a3c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 020f 	bic.w	r2, r2, #15
 8003a54:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6819      	ldr	r1, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003a64:	431a      	orrs	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8003a7c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6899      	ldr	r1, [r3, #8]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f002 0207 	and.w	r2, r2, #7
 8003aa8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6859      	ldr	r1, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aba:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003ad4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 f810 	bl	8003b08 <DFSDM_GetChannelFromInstance>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	4904      	ldr	r1, [pc, #16]	@ (8003afc <HAL_DFSDM_ChannelInit+0x174>)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	20001c08 	.word	0x20001c08
 8003b00:	20001c04 	.word	0x20001c04
 8003b04:	40016000 	.word	0x40016000

08003b08 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a1c      	ldr	r2, [pc, #112]	@ (8003b84 <DFSDM_GetChannelFromInstance+0x7c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d102      	bne.n	8003b1e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	e02b      	b.n	8003b76 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a19      	ldr	r2, [pc, #100]	@ (8003b88 <DFSDM_GetChannelFromInstance+0x80>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d102      	bne.n	8003b2c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003b26:	2301      	movs	r3, #1
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	e024      	b.n	8003b76 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a17      	ldr	r2, [pc, #92]	@ (8003b8c <DFSDM_GetChannelFromInstance+0x84>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d102      	bne.n	8003b3a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003b34:	2302      	movs	r3, #2
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	e01d      	b.n	8003b76 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a14      	ldr	r2, [pc, #80]	@ (8003b90 <DFSDM_GetChannelFromInstance+0x88>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d102      	bne.n	8003b48 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003b42:	2304      	movs	r3, #4
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	e016      	b.n	8003b76 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a12      	ldr	r2, [pc, #72]	@ (8003b94 <DFSDM_GetChannelFromInstance+0x8c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d102      	bne.n	8003b56 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003b50:	2305      	movs	r3, #5
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	e00f      	b.n	8003b76 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a0f      	ldr	r2, [pc, #60]	@ (8003b98 <DFSDM_GetChannelFromInstance+0x90>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d102      	bne.n	8003b64 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003b5e:	2306      	movs	r3, #6
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	e008      	b.n	8003b76 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a0d      	ldr	r2, [pc, #52]	@ (8003b9c <DFSDM_GetChannelFromInstance+0x94>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d102      	bne.n	8003b72 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003b6c:	2307      	movs	r3, #7
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	e001      	b.n	8003b76 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003b72:	2303      	movs	r3, #3
 8003b74:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003b76:	68fb      	ldr	r3, [r7, #12]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	40016000 	.word	0x40016000
 8003b88:	40016020 	.word	0x40016020
 8003b8c:	40016040 	.word	0x40016040
 8003b90:	40016080 	.word	0x40016080
 8003b94:	400160a0 	.word	0x400160a0
 8003b98:	400160c0 	.word	0x400160c0
 8003b9c:	400160e0 	.word	0x400160e0

08003ba0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	607a      	str	r2, [r7, #4]
 8003bac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8003bb2:	7afb      	ldrb	r3, [r7, #11]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d103      	bne.n	8003bc0 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	605a      	str	r2, [r3, #4]
      break;
 8003bbe:	e002      	b.n	8003bc6 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8003bc4:	bf00      	nop
  }

  return status;
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	371c      	adds	r7, #28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e003      	b.n	8003bf0 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003bee:	2300      	movs	r3, #0
  }
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	0c1b      	lsrs	r3, r3, #16
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 031f 	and.w	r3, r3, #31
 8003c18:	2201      	movs	r2, #1
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	4b0c      	ldr	r3, [pc, #48]	@ (8003c58 <HAL_EXTI_IRQHandler+0x5c>)
 8003c26:	4413      	add	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4013      	ands	r3, r2
 8003c32:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d009      	beq.n	8003c4e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	4798      	blx	r3
    }
  }
}
 8003c4e:	bf00      	nop
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40010414 	.word	0x40010414

08003c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c6a:	e17f      	b.n	8003f6c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	2101      	movs	r1, #1
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	fa01 f303 	lsl.w	r3, r1, r3
 8003c78:	4013      	ands	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 8171 	beq.w	8003f66 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 0303 	and.w	r3, r3, #3
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d005      	beq.n	8003c9c <HAL_GPIO_Init+0x40>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f003 0303 	and.w	r3, r3, #3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d130      	bne.n	8003cfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	2203      	movs	r2, #3
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	43db      	mvns	r3, r3
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	091b      	lsrs	r3, r3, #4
 8003ce8:	f003 0201 	and.w	r2, r3, #1
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d118      	bne.n	8003d3c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003d10:	2201      	movs	r2, #1
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	08db      	lsrs	r3, r3, #3
 8003d26:	f003 0201 	and.w	r2, r3, #1
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 0303 	and.w	r3, r3, #3
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d017      	beq.n	8003d78 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	2203      	movs	r2, #3
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d123      	bne.n	8003dcc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	08da      	lsrs	r2, r3, #3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3208      	adds	r2, #8
 8003d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d90:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	220f      	movs	r2, #15
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4013      	ands	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	08da      	lsrs	r2, r3, #3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3208      	adds	r2, #8
 8003dc6:	6939      	ldr	r1, [r7, #16]
 8003dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	2203      	movs	r2, #3
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4013      	ands	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f003 0203 	and.w	r2, r3, #3
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 80ac 	beq.w	8003f66 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e0e:	4b5f      	ldr	r3, [pc, #380]	@ (8003f8c <HAL_GPIO_Init+0x330>)
 8003e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e12:	4a5e      	ldr	r2, [pc, #376]	@ (8003f8c <HAL_GPIO_Init+0x330>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e1a:	4b5c      	ldr	r3, [pc, #368]	@ (8003f8c <HAL_GPIO_Init+0x330>)
 8003e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	60bb      	str	r3, [r7, #8]
 8003e24:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e26:	4a5a      	ldr	r2, [pc, #360]	@ (8003f90 <HAL_GPIO_Init+0x334>)
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	089b      	lsrs	r3, r3, #2
 8003e2c:	3302      	adds	r3, #2
 8003e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e32:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	220f      	movs	r2, #15
 8003e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e42:	43db      	mvns	r3, r3
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4013      	ands	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003e50:	d025      	beq.n	8003e9e <HAL_GPIO_Init+0x242>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a4f      	ldr	r2, [pc, #316]	@ (8003f94 <HAL_GPIO_Init+0x338>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d01f      	beq.n	8003e9a <HAL_GPIO_Init+0x23e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a4e      	ldr	r2, [pc, #312]	@ (8003f98 <HAL_GPIO_Init+0x33c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d019      	beq.n	8003e96 <HAL_GPIO_Init+0x23a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a4d      	ldr	r2, [pc, #308]	@ (8003f9c <HAL_GPIO_Init+0x340>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d013      	beq.n	8003e92 <HAL_GPIO_Init+0x236>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a4c      	ldr	r2, [pc, #304]	@ (8003fa0 <HAL_GPIO_Init+0x344>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00d      	beq.n	8003e8e <HAL_GPIO_Init+0x232>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a4b      	ldr	r2, [pc, #300]	@ (8003fa4 <HAL_GPIO_Init+0x348>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d007      	beq.n	8003e8a <HAL_GPIO_Init+0x22e>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a4a      	ldr	r2, [pc, #296]	@ (8003fa8 <HAL_GPIO_Init+0x34c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d101      	bne.n	8003e86 <HAL_GPIO_Init+0x22a>
 8003e82:	2306      	movs	r3, #6
 8003e84:	e00c      	b.n	8003ea0 <HAL_GPIO_Init+0x244>
 8003e86:	2307      	movs	r3, #7
 8003e88:	e00a      	b.n	8003ea0 <HAL_GPIO_Init+0x244>
 8003e8a:	2305      	movs	r3, #5
 8003e8c:	e008      	b.n	8003ea0 <HAL_GPIO_Init+0x244>
 8003e8e:	2304      	movs	r3, #4
 8003e90:	e006      	b.n	8003ea0 <HAL_GPIO_Init+0x244>
 8003e92:	2303      	movs	r3, #3
 8003e94:	e004      	b.n	8003ea0 <HAL_GPIO_Init+0x244>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e002      	b.n	8003ea0 <HAL_GPIO_Init+0x244>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <HAL_GPIO_Init+0x244>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	f002 0203 	and.w	r2, r2, #3
 8003ea6:	0092      	lsls	r2, r2, #2
 8003ea8:	4093      	lsls	r3, r2
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003eb0:	4937      	ldr	r1, [pc, #220]	@ (8003f90 <HAL_GPIO_Init+0x334>)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	089b      	lsrs	r3, r3, #2
 8003eb6:	3302      	adds	r3, #2
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ebe:	4b3b      	ldr	r3, [pc, #236]	@ (8003fac <HAL_GPIO_Init+0x350>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ee2:	4a32      	ldr	r2, [pc, #200]	@ (8003fac <HAL_GPIO_Init+0x350>)
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ee8:	4b30      	ldr	r3, [pc, #192]	@ (8003fac <HAL_GPIO_Init+0x350>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f0c:	4a27      	ldr	r2, [pc, #156]	@ (8003fac <HAL_GPIO_Init+0x350>)
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003f12:	4b26      	ldr	r3, [pc, #152]	@ (8003fac <HAL_GPIO_Init+0x350>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f36:	4a1d      	ldr	r2, [pc, #116]	@ (8003fac <HAL_GPIO_Init+0x350>)
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003fac <HAL_GPIO_Init+0x350>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	43db      	mvns	r3, r3
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f60:	4a12      	ldr	r2, [pc, #72]	@ (8003fac <HAL_GPIO_Init+0x350>)
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	fa22 f303 	lsr.w	r3, r2, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f47f ae78 	bne.w	8003c6c <HAL_GPIO_Init+0x10>
  }
}
 8003f7c:	bf00      	nop
 8003f7e:	bf00      	nop
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40010000 	.word	0x40010000
 8003f94:	48000400 	.word	0x48000400
 8003f98:	48000800 	.word	0x48000800
 8003f9c:	48000c00 	.word	0x48000c00
 8003fa0:	48001000 	.word	0x48001000
 8003fa4:	48001400 	.word	0x48001400
 8003fa8:	48001800 	.word	0x48001800
 8003fac:	40010400 	.word	0x40010400

08003fb0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003fbe:	e0cd      	b.n	800415c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 80c0 	beq.w	8004156 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003fd6:	4a68      	ldr	r2, [pc, #416]	@ (8004178 <HAL_GPIO_DeInit+0x1c8>)
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	089b      	lsrs	r3, r3, #2
 8003fdc:	3302      	adds	r3, #2
 8003fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	220f      	movs	r2, #15
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003ffe:	d025      	beq.n	800404c <HAL_GPIO_DeInit+0x9c>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a5e      	ldr	r2, [pc, #376]	@ (800417c <HAL_GPIO_DeInit+0x1cc>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d01f      	beq.n	8004048 <HAL_GPIO_DeInit+0x98>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a5d      	ldr	r2, [pc, #372]	@ (8004180 <HAL_GPIO_DeInit+0x1d0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d019      	beq.n	8004044 <HAL_GPIO_DeInit+0x94>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a5c      	ldr	r2, [pc, #368]	@ (8004184 <HAL_GPIO_DeInit+0x1d4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d013      	beq.n	8004040 <HAL_GPIO_DeInit+0x90>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a5b      	ldr	r2, [pc, #364]	@ (8004188 <HAL_GPIO_DeInit+0x1d8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00d      	beq.n	800403c <HAL_GPIO_DeInit+0x8c>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a5a      	ldr	r2, [pc, #360]	@ (800418c <HAL_GPIO_DeInit+0x1dc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d007      	beq.n	8004038 <HAL_GPIO_DeInit+0x88>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a59      	ldr	r2, [pc, #356]	@ (8004190 <HAL_GPIO_DeInit+0x1e0>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d101      	bne.n	8004034 <HAL_GPIO_DeInit+0x84>
 8004030:	2306      	movs	r3, #6
 8004032:	e00c      	b.n	800404e <HAL_GPIO_DeInit+0x9e>
 8004034:	2307      	movs	r3, #7
 8004036:	e00a      	b.n	800404e <HAL_GPIO_DeInit+0x9e>
 8004038:	2305      	movs	r3, #5
 800403a:	e008      	b.n	800404e <HAL_GPIO_DeInit+0x9e>
 800403c:	2304      	movs	r3, #4
 800403e:	e006      	b.n	800404e <HAL_GPIO_DeInit+0x9e>
 8004040:	2303      	movs	r3, #3
 8004042:	e004      	b.n	800404e <HAL_GPIO_DeInit+0x9e>
 8004044:	2302      	movs	r3, #2
 8004046:	e002      	b.n	800404e <HAL_GPIO_DeInit+0x9e>
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <HAL_GPIO_DeInit+0x9e>
 800404c:	2300      	movs	r3, #0
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	f002 0203 	and.w	r2, r2, #3
 8004054:	0092      	lsls	r2, r2, #2
 8004056:	4093      	lsls	r3, r2
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	429a      	cmp	r2, r3
 800405c:	d132      	bne.n	80040c4 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800405e:	4b4d      	ldr	r3, [pc, #308]	@ (8004194 <HAL_GPIO_DeInit+0x1e4>)
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	43db      	mvns	r3, r3
 8004066:	494b      	ldr	r1, [pc, #300]	@ (8004194 <HAL_GPIO_DeInit+0x1e4>)
 8004068:	4013      	ands	r3, r2
 800406a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800406c:	4b49      	ldr	r3, [pc, #292]	@ (8004194 <HAL_GPIO_DeInit+0x1e4>)
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	43db      	mvns	r3, r3
 8004074:	4947      	ldr	r1, [pc, #284]	@ (8004194 <HAL_GPIO_DeInit+0x1e4>)
 8004076:	4013      	ands	r3, r2
 8004078:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800407a:	4b46      	ldr	r3, [pc, #280]	@ (8004194 <HAL_GPIO_DeInit+0x1e4>)
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	43db      	mvns	r3, r3
 8004082:	4944      	ldr	r1, [pc, #272]	@ (8004194 <HAL_GPIO_DeInit+0x1e4>)
 8004084:	4013      	ands	r3, r2
 8004086:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004088:	4b42      	ldr	r3, [pc, #264]	@ (8004194 <HAL_GPIO_DeInit+0x1e4>)
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	43db      	mvns	r3, r3
 8004090:	4940      	ldr	r1, [pc, #256]	@ (8004194 <HAL_GPIO_DeInit+0x1e4>)
 8004092:	4013      	ands	r3, r2
 8004094:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f003 0303 	and.w	r3, r3, #3
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	220f      	movs	r2, #15
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80040a6:	4a34      	ldr	r2, [pc, #208]	@ (8004178 <HAL_GPIO_DeInit+0x1c8>)
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	089b      	lsrs	r3, r3, #2
 80040ac:	3302      	adds	r3, #2
 80040ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	43da      	mvns	r2, r3
 80040b6:	4830      	ldr	r0, [pc, #192]	@ (8004178 <HAL_GPIO_DeInit+0x1c8>)
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	089b      	lsrs	r3, r3, #2
 80040bc:	400a      	ands	r2, r1
 80040be:	3302      	adds	r3, #2
 80040c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	2103      	movs	r1, #3
 80040ce:	fa01 f303 	lsl.w	r3, r1, r3
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	08da      	lsrs	r2, r3, #3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3208      	adds	r2, #8
 80040e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	220f      	movs	r2, #15
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	43db      	mvns	r3, r3
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	08d2      	lsrs	r2, r2, #3
 80040f8:	4019      	ands	r1, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3208      	adds	r2, #8
 80040fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	2103      	movs	r1, #3
 800410c:	fa01 f303 	lsl.w	r3, r1, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	401a      	ands	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	2101      	movs	r1, #1
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	fa01 f303 	lsl.w	r3, r1, r3
 8004124:	43db      	mvns	r3, r3
 8004126:	401a      	ands	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68da      	ldr	r2, [r3, #12]
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	2103      	movs	r1, #3
 8004136:	fa01 f303 	lsl.w	r3, r1, r3
 800413a:	43db      	mvns	r3, r3
 800413c:	401a      	ands	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004146:	2101      	movs	r1, #1
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	fa01 f303 	lsl.w	r3, r1, r3
 800414e:	43db      	mvns	r3, r3
 8004150:	401a      	ands	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	3301      	adds	r3, #1
 800415a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	f47f af2b 	bne.w	8003fc0 <HAL_GPIO_DeInit+0x10>
  }
}
 800416a:	bf00      	nop
 800416c:	bf00      	nop
 800416e:	371c      	adds	r7, #28
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	40010000 	.word	0x40010000
 800417c:	48000400 	.word	0x48000400
 8004180:	48000800 	.word	0x48000800
 8004184:	48000c00 	.word	0x48000c00
 8004188:	48001000 	.word	0x48001000
 800418c:	48001400 	.word	0x48001400
 8004190:	48001800 	.word	0x48001800
 8004194:	40010400 	.word	0x40010400

08004198 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	887b      	ldrh	r3, [r7, #2]
 80041aa:	4013      	ands	r3, r2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041b0:	2301      	movs	r3, #1
 80041b2:	73fb      	strb	r3, [r7, #15]
 80041b4:	e001      	b.n	80041ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041b6:	2300      	movs	r3, #0
 80041b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	807b      	strh	r3, [r7, #2]
 80041d4:	4613      	mov	r3, r2
 80041d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041d8:	787b      	ldrb	r3, [r7, #1]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041de:	887a      	ldrh	r2, [r7, #2]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041e4:	e002      	b.n	80041ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041e6:	887a      	ldrh	r2, [r7, #2]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004202:	4b08      	ldr	r3, [pc, #32]	@ (8004224 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004204:	695a      	ldr	r2, [r3, #20]
 8004206:	88fb      	ldrh	r3, [r7, #6]
 8004208:	4013      	ands	r3, r2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d006      	beq.n	800421c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800420e:	4a05      	ldr	r2, [pc, #20]	@ (8004224 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004210:	88fb      	ldrh	r3, [r7, #6]
 8004212:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004214:	88fb      	ldrh	r3, [r7, #6]
 8004216:	4618      	mov	r0, r3
 8004218:	f000 f806 	bl	8004228 <HAL_GPIO_EXTI_Callback>
  }
}
 800421c:	bf00      	nop
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40010400 	.word	0x40010400

08004228 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	4603      	mov	r3, r0
 8004230:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b082      	sub	sp, #8
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e08d      	b.n	800436c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d106      	bne.n	800426a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7fe f92f 	bl	80024c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2224      	movs	r2, #36	@ 0x24
 800426e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0201 	bic.w	r2, r2, #1
 8004280:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800428e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800429e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d107      	bne.n	80042b8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042b4:	609a      	str	r2, [r3, #8]
 80042b6:	e006      	b.n	80042c6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80042c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d108      	bne.n	80042e0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042dc:	605a      	str	r2, [r3, #4]
 80042de:	e007      	b.n	80042f0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042ee:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6812      	ldr	r2, [r2, #0]
 80042fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80042fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004302:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004312:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69d9      	ldr	r1, [r3, #28]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1a      	ldr	r2, [r3, #32]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0201 	orr.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e021      	b.n	80043ca <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2224      	movs	r2, #36	@ 0x24
 800438a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0201 	bic.w	r2, r2, #1
 800439c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fe f8f0 	bl	8002584 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af02      	add	r7, sp, #8
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	4608      	mov	r0, r1
 80043de:	4611      	mov	r1, r2
 80043e0:	461a      	mov	r2, r3
 80043e2:	4603      	mov	r3, r0
 80043e4:	817b      	strh	r3, [r7, #10]
 80043e6:	460b      	mov	r3, r1
 80043e8:	813b      	strh	r3, [r7, #8]
 80043ea:	4613      	mov	r3, r2
 80043ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b20      	cmp	r3, #32
 80043f8:	f040 80f9 	bne.w	80045ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <HAL_I2C_Mem_Write+0x34>
 8004402:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004404:	2b00      	cmp	r3, #0
 8004406:	d105      	bne.n	8004414 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800440e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e0ed      	b.n	80045f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_I2C_Mem_Write+0x4e>
 800441e:	2302      	movs	r3, #2
 8004420:	e0e6      	b.n	80045f0 <HAL_I2C_Mem_Write+0x21c>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800442a:	f7ff f96b 	bl	8003704 <HAL_GetTick>
 800442e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	2319      	movs	r3, #25
 8004436:	2201      	movs	r2, #1
 8004438:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 fac3 	bl	80049c8 <I2C_WaitOnFlagUntilTimeout>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e0d1      	b.n	80045f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2221      	movs	r2, #33	@ 0x21
 8004450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2240      	movs	r2, #64	@ 0x40
 8004458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a3a      	ldr	r2, [r7, #32]
 8004466:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800446c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004474:	88f8      	ldrh	r0, [r7, #6]
 8004476:	893a      	ldrh	r2, [r7, #8]
 8004478:	8979      	ldrh	r1, [r7, #10]
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	9301      	str	r3, [sp, #4]
 800447e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	4603      	mov	r3, r0
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 f9d3 	bl	8004830 <I2C_RequestMemoryWrite>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d005      	beq.n	800449c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e0a9      	b.n	80045f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2bff      	cmp	r3, #255	@ 0xff
 80044a4:	d90e      	bls.n	80044c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	22ff      	movs	r2, #255	@ 0xff
 80044aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	8979      	ldrh	r1, [r7, #10]
 80044b4:	2300      	movs	r3, #0
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 fc47 	bl	8004d50 <I2C_TransferConfig>
 80044c2:	e00f      	b.n	80044e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	8979      	ldrh	r1, [r7, #10]
 80044d6:	2300      	movs	r3, #0
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 fc36 	bl	8004d50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 fac6 	bl	8004a7a <I2C_WaitOnTXISFlagUntilTimeout>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e07b      	b.n	80045f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fc:	781a      	ldrb	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452c:	b29b      	uxth	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d034      	beq.n	800459c <HAL_I2C_Mem_Write+0x1c8>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004536:	2b00      	cmp	r3, #0
 8004538:	d130      	bne.n	800459c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004540:	2200      	movs	r2, #0
 8004542:	2180      	movs	r1, #128	@ 0x80
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 fa3f 	bl	80049c8 <I2C_WaitOnFlagUntilTimeout>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e04d      	b.n	80045f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004558:	b29b      	uxth	r3, r3
 800455a:	2bff      	cmp	r3, #255	@ 0xff
 800455c:	d90e      	bls.n	800457c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	22ff      	movs	r2, #255	@ 0xff
 8004562:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004568:	b2da      	uxtb	r2, r3
 800456a:	8979      	ldrh	r1, [r7, #10]
 800456c:	2300      	movs	r3, #0
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 fbeb 	bl	8004d50 <I2C_TransferConfig>
 800457a:	e00f      	b.n	800459c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800458a:	b2da      	uxtb	r2, r3
 800458c:	8979      	ldrh	r1, [r7, #10]
 800458e:	2300      	movs	r3, #0
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 fbda 	bl	8004d50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d19e      	bne.n	80044e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 faac 	bl	8004b08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e01a      	b.n	80045f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2220      	movs	r2, #32
 80045c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6859      	ldr	r1, [r3, #4]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	4b0a      	ldr	r3, [pc, #40]	@ (80045f8 <HAL_I2C_Mem_Write+0x224>)
 80045ce:	400b      	ands	r3, r1
 80045d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2220      	movs	r2, #32
 80045d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	e000      	b.n	80045f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80045ee:	2302      	movs	r3, #2
  }
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	fe00e800 	.word	0xfe00e800

080045fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b088      	sub	sp, #32
 8004600:	af02      	add	r7, sp, #8
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	4608      	mov	r0, r1
 8004606:	4611      	mov	r1, r2
 8004608:	461a      	mov	r2, r3
 800460a:	4603      	mov	r3, r0
 800460c:	817b      	strh	r3, [r7, #10]
 800460e:	460b      	mov	r3, r1
 8004610:	813b      	strh	r3, [r7, #8]
 8004612:	4613      	mov	r3, r2
 8004614:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b20      	cmp	r3, #32
 8004620:	f040 80fd 	bne.w	800481e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <HAL_I2C_Mem_Read+0x34>
 800462a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800462c:	2b00      	cmp	r3, #0
 800462e:	d105      	bne.n	800463c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004636:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e0f1      	b.n	8004820 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004642:	2b01      	cmp	r3, #1
 8004644:	d101      	bne.n	800464a <HAL_I2C_Mem_Read+0x4e>
 8004646:	2302      	movs	r3, #2
 8004648:	e0ea      	b.n	8004820 <HAL_I2C_Mem_Read+0x224>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004652:	f7ff f857 	bl	8003704 <HAL_GetTick>
 8004656:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	2319      	movs	r3, #25
 800465e:	2201      	movs	r2, #1
 8004660:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 f9af 	bl	80049c8 <I2C_WaitOnFlagUntilTimeout>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e0d5      	b.n	8004820 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2222      	movs	r2, #34	@ 0x22
 8004678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2240      	movs	r2, #64	@ 0x40
 8004680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a3a      	ldr	r2, [r7, #32]
 800468e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004694:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800469c:	88f8      	ldrh	r0, [r7, #6]
 800469e:	893a      	ldrh	r2, [r7, #8]
 80046a0:	8979      	ldrh	r1, [r7, #10]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	9301      	str	r3, [sp, #4]
 80046a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	4603      	mov	r3, r0
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 f913 	bl	80048d8 <I2C_RequestMemoryRead>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e0ad      	b.n	8004820 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2bff      	cmp	r3, #255	@ 0xff
 80046cc:	d90e      	bls.n	80046ec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2201      	movs	r2, #1
 80046d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	8979      	ldrh	r1, [r7, #10]
 80046dc:	4b52      	ldr	r3, [pc, #328]	@ (8004828 <HAL_I2C_Mem_Read+0x22c>)
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 fb33 	bl	8004d50 <I2C_TransferConfig>
 80046ea:	e00f      	b.n	800470c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	8979      	ldrh	r1, [r7, #10]
 80046fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004828 <HAL_I2C_Mem_Read+0x22c>)
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 fb22 	bl	8004d50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004712:	2200      	movs	r2, #0
 8004714:	2104      	movs	r1, #4
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 f956 	bl	80049c8 <I2C_WaitOnFlagUntilTimeout>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e07c      	b.n	8004820 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004742:	3b01      	subs	r3, #1
 8004744:	b29a      	uxth	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800474e:	b29b      	uxth	r3, r3
 8004750:	3b01      	subs	r3, #1
 8004752:	b29a      	uxth	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800475c:	b29b      	uxth	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d034      	beq.n	80047cc <HAL_I2C_Mem_Read+0x1d0>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004766:	2b00      	cmp	r3, #0
 8004768:	d130      	bne.n	80047cc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004770:	2200      	movs	r2, #0
 8004772:	2180      	movs	r1, #128	@ 0x80
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f927 	bl	80049c8 <I2C_WaitOnFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e04d      	b.n	8004820 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004788:	b29b      	uxth	r3, r3
 800478a:	2bff      	cmp	r3, #255	@ 0xff
 800478c:	d90e      	bls.n	80047ac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2201      	movs	r2, #1
 8004792:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004798:	b2da      	uxtb	r2, r3
 800479a:	8979      	ldrh	r1, [r7, #10]
 800479c:	2300      	movs	r3, #0
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 fad3 	bl	8004d50 <I2C_TransferConfig>
 80047aa:	e00f      	b.n	80047cc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	8979      	ldrh	r1, [r7, #10]
 80047be:	2300      	movs	r3, #0
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 fac2 	bl	8004d50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d19a      	bne.n	800470c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 f994 	bl	8004b08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e01a      	b.n	8004820 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2220      	movs	r2, #32
 80047f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6859      	ldr	r1, [r3, #4]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	4b0b      	ldr	r3, [pc, #44]	@ (800482c <HAL_I2C_Mem_Read+0x230>)
 80047fe:	400b      	ands	r3, r1
 8004800:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	e000      	b.n	8004820 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800481e:	2302      	movs	r3, #2
  }
}
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	80002400 	.word	0x80002400
 800482c:	fe00e800 	.word	0xfe00e800

08004830 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af02      	add	r7, sp, #8
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	4608      	mov	r0, r1
 800483a:	4611      	mov	r1, r2
 800483c:	461a      	mov	r2, r3
 800483e:	4603      	mov	r3, r0
 8004840:	817b      	strh	r3, [r7, #10]
 8004842:	460b      	mov	r3, r1
 8004844:	813b      	strh	r3, [r7, #8]
 8004846:	4613      	mov	r3, r2
 8004848:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800484a:	88fb      	ldrh	r3, [r7, #6]
 800484c:	b2da      	uxtb	r2, r3
 800484e:	8979      	ldrh	r1, [r7, #10]
 8004850:	4b20      	ldr	r3, [pc, #128]	@ (80048d4 <I2C_RequestMemoryWrite+0xa4>)
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 fa79 	bl	8004d50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	69b9      	ldr	r1, [r7, #24]
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 f909 	bl	8004a7a <I2C_WaitOnTXISFlagUntilTimeout>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e02c      	b.n	80048cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004872:	88fb      	ldrh	r3, [r7, #6]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d105      	bne.n	8004884 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004878:	893b      	ldrh	r3, [r7, #8]
 800487a:	b2da      	uxtb	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	629a      	str	r2, [r3, #40]	@ 0x28
 8004882:	e015      	b.n	80048b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004884:	893b      	ldrh	r3, [r7, #8]
 8004886:	0a1b      	lsrs	r3, r3, #8
 8004888:	b29b      	uxth	r3, r3
 800488a:	b2da      	uxtb	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004892:	69fa      	ldr	r2, [r7, #28]
 8004894:	69b9      	ldr	r1, [r7, #24]
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 f8ef 	bl	8004a7a <I2C_WaitOnTXISFlagUntilTimeout>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e012      	b.n	80048cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048a6:	893b      	ldrh	r3, [r7, #8]
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	2200      	movs	r2, #0
 80048b8:	2180      	movs	r1, #128	@ 0x80
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 f884 	bl	80049c8 <I2C_WaitOnFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	80002000 	.word	0x80002000

080048d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af02      	add	r7, sp, #8
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	4608      	mov	r0, r1
 80048e2:	4611      	mov	r1, r2
 80048e4:	461a      	mov	r2, r3
 80048e6:	4603      	mov	r3, r0
 80048e8:	817b      	strh	r3, [r7, #10]
 80048ea:	460b      	mov	r3, r1
 80048ec:	813b      	strh	r3, [r7, #8]
 80048ee:	4613      	mov	r3, r2
 80048f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80048f2:	88fb      	ldrh	r3, [r7, #6]
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	8979      	ldrh	r1, [r7, #10]
 80048f8:	4b20      	ldr	r3, [pc, #128]	@ (800497c <I2C_RequestMemoryRead+0xa4>)
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	2300      	movs	r3, #0
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 fa26 	bl	8004d50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004904:	69fa      	ldr	r2, [r7, #28]
 8004906:	69b9      	ldr	r1, [r7, #24]
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 f8b6 	bl	8004a7a <I2C_WaitOnTXISFlagUntilTimeout>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e02c      	b.n	8004972 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004918:	88fb      	ldrh	r3, [r7, #6]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d105      	bne.n	800492a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800491e:	893b      	ldrh	r3, [r7, #8]
 8004920:	b2da      	uxtb	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	629a      	str	r2, [r3, #40]	@ 0x28
 8004928:	e015      	b.n	8004956 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800492a:	893b      	ldrh	r3, [r7, #8]
 800492c:	0a1b      	lsrs	r3, r3, #8
 800492e:	b29b      	uxth	r3, r3
 8004930:	b2da      	uxtb	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004938:	69fa      	ldr	r2, [r7, #28]
 800493a:	69b9      	ldr	r1, [r7, #24]
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 f89c 	bl	8004a7a <I2C_WaitOnTXISFlagUntilTimeout>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e012      	b.n	8004972 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800494c:	893b      	ldrh	r3, [r7, #8]
 800494e:	b2da      	uxtb	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	2200      	movs	r2, #0
 800495e:	2140      	movs	r1, #64	@ 0x40
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 f831 	bl	80049c8 <I2C_WaitOnFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	80002000 	.word	0x80002000

08004980 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b02      	cmp	r3, #2
 8004994:	d103      	bne.n	800499e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2200      	movs	r2, #0
 800499c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d007      	beq.n	80049bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	699a      	ldr	r2, [r3, #24]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0201 	orr.w	r2, r2, #1
 80049ba:	619a      	str	r2, [r3, #24]
  }
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	603b      	str	r3, [r7, #0]
 80049d4:	4613      	mov	r3, r2
 80049d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049d8:	e03b      	b.n	8004a52 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	6839      	ldr	r1, [r7, #0]
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 f8d6 	bl	8004b90 <I2C_IsErrorOccurred>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e041      	b.n	8004a72 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f4:	d02d      	beq.n	8004a52 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f6:	f7fe fe85 	bl	8003704 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d302      	bcc.n	8004a0c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d122      	bne.n	8004a52 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699a      	ldr	r2, [r3, #24]
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	4013      	ands	r3, r2
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	bf0c      	ite	eq
 8004a1c:	2301      	moveq	r3, #1
 8004a1e:	2300      	movne	r3, #0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	461a      	mov	r2, r3
 8004a24:	79fb      	ldrb	r3, [r7, #7]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d113      	bne.n	8004a52 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a2e:	f043 0220 	orr.w	r2, r3, #32
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e00f      	b.n	8004a72 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	699a      	ldr	r2, [r3, #24]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	bf0c      	ite	eq
 8004a62:	2301      	moveq	r3, #1
 8004a64:	2300      	movne	r3, #0
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	461a      	mov	r2, r3
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d0b4      	beq.n	80049da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b084      	sub	sp, #16
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	60f8      	str	r0, [r7, #12]
 8004a82:	60b9      	str	r1, [r7, #8]
 8004a84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a86:	e033      	b.n	8004af0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 f87f 	bl	8004b90 <I2C_IsErrorOccurred>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e031      	b.n	8004b00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa2:	d025      	beq.n	8004af0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa4:	f7fe fe2e 	bl	8003704 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d302      	bcc.n	8004aba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d11a      	bne.n	8004af0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d013      	beq.n	8004af0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004acc:	f043 0220 	orr.w	r2, r3, #32
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e007      	b.n	8004b00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d1c4      	bne.n	8004a88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b14:	e02f      	b.n	8004b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 f838 	bl	8004b90 <I2C_IsErrorOccurred>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e02d      	b.n	8004b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b2a:	f7fe fdeb 	bl	8003704 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d302      	bcc.n	8004b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d11a      	bne.n	8004b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	f003 0320 	and.w	r3, r3, #32
 8004b4a:	2b20      	cmp	r3, #32
 8004b4c:	d013      	beq.n	8004b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b52:	f043 0220 	orr.w	r2, r3, #32
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e007      	b.n	8004b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	f003 0320 	and.w	r3, r3, #32
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	d1c8      	bne.n	8004b16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08a      	sub	sp, #40	@ 0x28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d068      	beq.n	8004c8e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2210      	movs	r2, #16
 8004bc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004bc4:	e049      	b.n	8004c5a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bcc:	d045      	beq.n	8004c5a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004bce:	f7fe fd99 	bl	8003704 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d302      	bcc.n	8004be4 <I2C_IsErrorOccurred+0x54>
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d13a      	bne.n	8004c5a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bf6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c06:	d121      	bne.n	8004c4c <I2C_IsErrorOccurred+0xbc>
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c0e:	d01d      	beq.n	8004c4c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004c10:	7cfb      	ldrb	r3, [r7, #19]
 8004c12:	2b20      	cmp	r3, #32
 8004c14:	d01a      	beq.n	8004c4c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004c26:	f7fe fd6d 	bl	8003704 <HAL_GetTick>
 8004c2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c2c:	e00e      	b.n	8004c4c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004c2e:	f7fe fd69 	bl	8003704 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b19      	cmp	r3, #25
 8004c3a:	d907      	bls.n	8004c4c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	f043 0320 	orr.w	r3, r3, #32
 8004c42:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004c4a:	e006      	b.n	8004c5a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	f003 0320 	and.w	r3, r3, #32
 8004c56:	2b20      	cmp	r3, #32
 8004c58:	d1e9      	bne.n	8004c2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	f003 0320 	and.w	r3, r3, #32
 8004c64:	2b20      	cmp	r3, #32
 8004c66:	d003      	beq.n	8004c70 <I2C_IsErrorOccurred+0xe0>
 8004c68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0aa      	beq.n	8004bc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004c70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d103      	bne.n	8004c80 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	f043 0304 	orr.w	r3, r3, #4
 8004c86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00b      	beq.n	8004cb8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	f043 0301 	orr.w	r3, r3, #1
 8004ca6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004cb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00b      	beq.n	8004cda <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	f043 0308 	orr.w	r3, r3, #8
 8004cc8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004cd2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00b      	beq.n	8004cfc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	f043 0302 	orr.w	r3, r3, #2
 8004cea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cf4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d01c      	beq.n	8004d3e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f7ff fe3b 	bl	8004980 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6859      	ldr	r1, [r3, #4]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	4b0d      	ldr	r3, [pc, #52]	@ (8004d4c <I2C_IsErrorOccurred+0x1bc>)
 8004d16:	400b      	ands	r3, r1
 8004d18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
 8004d20:	431a      	orrs	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3728      	adds	r7, #40	@ 0x28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	fe00e800 	.word	0xfe00e800

08004d50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	607b      	str	r3, [r7, #4]
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	817b      	strh	r3, [r7, #10]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d62:	897b      	ldrh	r3, [r7, #10]
 8004d64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d68:	7a7b      	ldrb	r3, [r7, #9]
 8004d6a:	041b      	lsls	r3, r3, #16
 8004d6c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d70:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d7e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	0d5b      	lsrs	r3, r3, #21
 8004d8a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004d8e:	4b08      	ldr	r3, [pc, #32]	@ (8004db0 <I2C_TransferConfig+0x60>)
 8004d90:	430b      	orrs	r3, r1
 8004d92:	43db      	mvns	r3, r3
 8004d94:	ea02 0103 	and.w	r1, r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004da2:	bf00      	nop
 8004da4:	371c      	adds	r7, #28
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	03ff63ff 	.word	0x03ff63ff

08004db4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	d138      	bne.n	8004e3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d101      	bne.n	8004dd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	e032      	b.n	8004e3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2224      	movs	r2, #36	@ 0x24
 8004de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0201 	bic.w	r2, r2, #1
 8004df6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6819      	ldr	r1, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0201 	orr.w	r2, r2, #1
 8004e26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	e000      	b.n	8004e3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e3c:	2302      	movs	r3, #2
  }
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b085      	sub	sp, #20
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b20      	cmp	r3, #32
 8004e5e:	d139      	bne.n	8004ed4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d101      	bne.n	8004e6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	e033      	b.n	8004ed6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2224      	movs	r2, #36	@ 0x24
 8004e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0201 	bic.w	r2, r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004e9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	021b      	lsls	r3, r3, #8
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0201 	orr.w	r2, r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	e000      	b.n	8004ed6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ed4:	2302      	movs	r3, #2
  }
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b086      	sub	sp, #24
 8004ee6:	af02      	add	r7, sp, #8
 8004ee8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e101      	b.n	80050f8 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d106      	bne.n	8004f0e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7fd fc01 	bl	8002710 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2203      	movs	r2, #3
 8004f12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f002 ff33 	bl	8007d8c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6818      	ldr	r0, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	7c1a      	ldrb	r2, [r3, #16]
 8004f2e:	f88d 2000 	strb.w	r2, [sp]
 8004f32:	3304      	adds	r3, #4
 8004f34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f36:	f002 fefc 	bl	8007d32 <USB_CoreInit>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d005      	beq.n	8004f4c <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0d5      	b.n	80050f8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2100      	movs	r1, #0
 8004f52:	4618      	mov	r0, r3
 8004f54:	f002 ff2b 	bl	8007dae <USB_SetCurrentMode>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d005      	beq.n	8004f6a <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2202      	movs	r2, #2
 8004f62:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e0c6      	b.n	80050f8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	73fb      	strb	r3, [r7, #15]
 8004f6e:	e04a      	b.n	8005006 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f70:	7bfa      	ldrb	r2, [r7, #15]
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	4613      	mov	r3, r2
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	4413      	add	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	440b      	add	r3, r1
 8004f7e:	3315      	adds	r3, #21
 8004f80:	2201      	movs	r2, #1
 8004f82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f84:	7bfa      	ldrb	r2, [r7, #15]
 8004f86:	6879      	ldr	r1, [r7, #4]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	440b      	add	r3, r1
 8004f92:	3314      	adds	r3, #20
 8004f94:	7bfa      	ldrb	r2, [r7, #15]
 8004f96:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004f98:	7bfa      	ldrb	r2, [r7, #15]
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
 8004f9c:	b298      	uxth	r0, r3
 8004f9e:	6879      	ldr	r1, [r7, #4]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	4413      	add	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	440b      	add	r3, r1
 8004faa:	332e      	adds	r3, #46	@ 0x2e
 8004fac:	4602      	mov	r2, r0
 8004fae:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004fb0:	7bfa      	ldrb	r2, [r7, #15]
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	4413      	add	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	3318      	adds	r3, #24
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004fc4:	7bfa      	ldrb	r2, [r7, #15]
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	00db      	lsls	r3, r3, #3
 8004fcc:	4413      	add	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	331c      	adds	r3, #28
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004fd8:	7bfa      	ldrb	r2, [r7, #15]
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	3320      	adds	r3, #32
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004fec:	7bfa      	ldrb	r2, [r7, #15]
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	3324      	adds	r3, #36	@ 0x24
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005000:	7bfb      	ldrb	r3, [r7, #15]
 8005002:	3301      	adds	r3, #1
 8005004:	73fb      	strb	r3, [r7, #15]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	791b      	ldrb	r3, [r3, #4]
 800500a:	7bfa      	ldrb	r2, [r7, #15]
 800500c:	429a      	cmp	r2, r3
 800500e:	d3af      	bcc.n	8004f70 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005010:	2300      	movs	r3, #0
 8005012:	73fb      	strb	r3, [r7, #15]
 8005014:	e044      	b.n	80050a0 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005016:	7bfa      	ldrb	r2, [r7, #15]
 8005018:	6879      	ldr	r1, [r7, #4]
 800501a:	4613      	mov	r3, r2
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	4413      	add	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	440b      	add	r3, r1
 8005024:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005028:	2200      	movs	r2, #0
 800502a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800502c:	7bfa      	ldrb	r2, [r7, #15]
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	4613      	mov	r3, r2
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	4413      	add	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	440b      	add	r3, r1
 800503a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800503e:	7bfa      	ldrb	r2, [r7, #15]
 8005040:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005042:	7bfa      	ldrb	r2, [r7, #15]
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	4613      	mov	r3, r2
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	4413      	add	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	440b      	add	r3, r1
 8005050:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005054:	2200      	movs	r2, #0
 8005056:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005058:	7bfa      	ldrb	r2, [r7, #15]
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	4613      	mov	r3, r2
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	4413      	add	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800506a:	2200      	movs	r2, #0
 800506c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800506e:	7bfa      	ldrb	r2, [r7, #15]
 8005070:	6879      	ldr	r1, [r7, #4]
 8005072:	4613      	mov	r3, r2
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	4413      	add	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	440b      	add	r3, r1
 800507c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005084:	7bfa      	ldrb	r2, [r7, #15]
 8005086:	6879      	ldr	r1, [r7, #4]
 8005088:	4613      	mov	r3, r2
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	4413      	add	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	440b      	add	r3, r1
 8005092:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005096:	2200      	movs	r2, #0
 8005098:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800509a:	7bfb      	ldrb	r3, [r7, #15]
 800509c:	3301      	adds	r3, #1
 800509e:	73fb      	strb	r3, [r7, #15]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	791b      	ldrb	r3, [r3, #4]
 80050a4:	7bfa      	ldrb	r2, [r7, #15]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d3b5      	bcc.n	8005016 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6818      	ldr	r0, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	7c1a      	ldrb	r2, [r3, #16]
 80050b2:	f88d 2000 	strb.w	r2, [sp]
 80050b6:	3304      	adds	r3, #4
 80050b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050ba:	f002 fec5 	bl	8007e48 <USB_DevInit>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d005      	beq.n	80050d0 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e013      	b.n	80050f8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	7b1b      	ldrb	r3, [r3, #12]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d102      	bne.n	80050ec <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f80a 	bl	8005100 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f003 f86a 	bl	80081ca <USB_DevDisconnect>

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800512e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005132:	f043 0303 	orr.w	r3, r3, #3
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800514c:	4b05      	ldr	r3, [pc, #20]	@ (8005164 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a04      	ldr	r2, [pc, #16]	@ (8005164 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005156:	6013      	str	r3, [r2, #0]
}
 8005158:	bf00      	nop
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	40007000 	.word	0x40007000

08005168 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800516c:	4b04      	ldr	r3, [pc, #16]	@ (8005180 <HAL_PWREx_GetVoltageRange+0x18>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005174:	4618      	mov	r0, r3
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	40007000 	.word	0x40007000

08005184 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005192:	d130      	bne.n	80051f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005194:	4b23      	ldr	r3, [pc, #140]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800519c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051a0:	d038      	beq.n	8005214 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051a2:	4b20      	ldr	r3, [pc, #128]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80051aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051b2:	4b1d      	ldr	r3, [pc, #116]	@ (8005228 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2232      	movs	r2, #50	@ 0x32
 80051b8:	fb02 f303 	mul.w	r3, r2, r3
 80051bc:	4a1b      	ldr	r2, [pc, #108]	@ (800522c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80051be:	fba2 2303 	umull	r2, r3, r2, r3
 80051c2:	0c9b      	lsrs	r3, r3, #18
 80051c4:	3301      	adds	r3, #1
 80051c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051c8:	e002      	b.n	80051d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3b01      	subs	r3, #1
 80051ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051d0:	4b14      	ldr	r3, [pc, #80]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051dc:	d102      	bne.n	80051e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1f2      	bne.n	80051ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051f0:	d110      	bne.n	8005214 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e00f      	b.n	8005216 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80051f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005202:	d007      	beq.n	8005214 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005204:	4b07      	ldr	r3, [pc, #28]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800520c:	4a05      	ldr	r2, [pc, #20]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800520e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005212:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40007000 	.word	0x40007000
 8005228:	20000008 	.word	0x20000008
 800522c:	431bde83 	.word	0x431bde83

08005230 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005234:	4b05      	ldr	r3, [pc, #20]	@ (800524c <HAL_PWREx_EnableVddUSB+0x1c>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	4a04      	ldr	r2, [pc, #16]	@ (800524c <HAL_PWREx_EnableVddUSB+0x1c>)
 800523a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800523e:	6053      	str	r3, [r2, #4]
}
 8005240:	bf00      	nop
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	40007000 	.word	0x40007000

08005250 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af02      	add	r7, sp, #8
 8005256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005258:	f7fe fa54 	bl	8003704 <HAL_GetTick>
 800525c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e063      	b.n	8005330 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10b      	bne.n	800528c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7fd f9a5 	bl	80025cc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005282:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f858 	bl	800533c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	3b01      	subs	r3, #1
 800529c:	021a      	lsls	r2, r3, #8
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	2120      	movs	r1, #32
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f850 	bl	8005358 <QSPI_WaitFlagStateUntilTimeout>
 80052b8:	4603      	mov	r3, r0
 80052ba:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80052bc:	7afb      	ldrb	r3, [r7, #11]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d131      	bne.n	8005326 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80052cc:	f023 0310 	bic.w	r3, r3, #16
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6852      	ldr	r2, [r2, #4]
 80052d4:	0611      	lsls	r1, r2, #24
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	68d2      	ldr	r2, [r2, #12]
 80052da:	4311      	orrs	r1, r2
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	6812      	ldr	r2, [r2, #0]
 80052e0:	430b      	orrs	r3, r1
 80052e2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	4b13      	ldr	r3, [pc, #76]	@ (8005338 <HAL_QSPI_Init+0xe8>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	6912      	ldr	r2, [r2, #16]
 80052f2:	0411      	lsls	r1, r2, #16
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6952      	ldr	r2, [r2, #20]
 80052f8:	4311      	orrs	r1, r2
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6992      	ldr	r2, [r2, #24]
 80052fe:	4311      	orrs	r1, r2
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	6812      	ldr	r2, [r2, #0]
 8005304:	430b      	orrs	r3, r1
 8005306:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0201 	orr.w	r2, r2, #1
 8005316:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800532e:	7afb      	ldrb	r3, [r7, #11]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	ffe0f8fe 	.word	0xffe0f8fe

0800533c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	603b      	str	r3, [r7, #0]
 8005364:	4613      	mov	r3, r2
 8005366:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005368:	e01a      	b.n	80053a0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005370:	d016      	beq.n	80053a0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005372:	f7fe f9c7 	bl	8003704 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	429a      	cmp	r2, r3
 8005380:	d302      	bcc.n	8005388 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10b      	bne.n	80053a0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2204      	movs	r2, #4
 800538c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005394:	f043 0201 	orr.w	r2, r3, #1
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e00e      	b.n	80053be <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	4013      	ands	r3, r2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	bf14      	ite	ne
 80053ae:	2301      	movne	r3, #1
 80053b0:	2300      	moveq	r3, #0
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	461a      	mov	r2, r3
 80053b6:	79fb      	ldrb	r3, [r7, #7]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d1d6      	bne.n	800536a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
	...

080053c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e3ca      	b.n	8005b70 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053da:	4b97      	ldr	r3, [pc, #604]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 030c 	and.w	r3, r3, #12
 80053e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053e4:	4b94      	ldr	r3, [pc, #592]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f003 0303 	and.w	r3, r3, #3
 80053ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0310 	and.w	r3, r3, #16
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 80e4 	beq.w	80055c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d007      	beq.n	8005412 <HAL_RCC_OscConfig+0x4a>
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	2b0c      	cmp	r3, #12
 8005406:	f040 808b 	bne.w	8005520 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	2b01      	cmp	r3, #1
 800540e:	f040 8087 	bne.w	8005520 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005412:	4b89      	ldr	r3, [pc, #548]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d005      	beq.n	800542a <HAL_RCC_OscConfig+0x62>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e3a2      	b.n	8005b70 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1a      	ldr	r2, [r3, #32]
 800542e:	4b82      	ldr	r3, [pc, #520]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	2b00      	cmp	r3, #0
 8005438:	d004      	beq.n	8005444 <HAL_RCC_OscConfig+0x7c>
 800543a:	4b7f      	ldr	r3, [pc, #508]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005442:	e005      	b.n	8005450 <HAL_RCC_OscConfig+0x88>
 8005444:	4b7c      	ldr	r3, [pc, #496]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 8005446:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800544a:	091b      	lsrs	r3, r3, #4
 800544c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005450:	4293      	cmp	r3, r2
 8005452:	d223      	bcs.n	800549c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fd55 	bl	8005f08 <RCC_SetFlashLatencyFromMSIRange>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e383      	b.n	8005b70 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005468:	4b73      	ldr	r3, [pc, #460]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a72      	ldr	r2, [pc, #456]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 800546e:	f043 0308 	orr.w	r3, r3, #8
 8005472:	6013      	str	r3, [r2, #0]
 8005474:	4b70      	ldr	r3, [pc, #448]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	496d      	ldr	r1, [pc, #436]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 8005482:	4313      	orrs	r3, r2
 8005484:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005486:	4b6c      	ldr	r3, [pc, #432]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	021b      	lsls	r3, r3, #8
 8005494:	4968      	ldr	r1, [pc, #416]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 8005496:	4313      	orrs	r3, r2
 8005498:	604b      	str	r3, [r1, #4]
 800549a:	e025      	b.n	80054e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800549c:	4b66      	ldr	r3, [pc, #408]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a65      	ldr	r2, [pc, #404]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 80054a2:	f043 0308 	orr.w	r3, r3, #8
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	4b63      	ldr	r3, [pc, #396]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	4960      	ldr	r1, [pc, #384]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054ba:	4b5f      	ldr	r3, [pc, #380]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	021b      	lsls	r3, r3, #8
 80054c8:	495b      	ldr	r1, [pc, #364]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d109      	bne.n	80054e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 fd15 	bl	8005f08 <RCC_SetFlashLatencyFromMSIRange>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e343      	b.n	8005b70 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054e8:	f000 fc4a 	bl	8005d80 <HAL_RCC_GetSysClockFreq>
 80054ec:	4602      	mov	r2, r0
 80054ee:	4b52      	ldr	r3, [pc, #328]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	091b      	lsrs	r3, r3, #4
 80054f4:	f003 030f 	and.w	r3, r3, #15
 80054f8:	4950      	ldr	r1, [pc, #320]	@ (800563c <HAL_RCC_OscConfig+0x274>)
 80054fa:	5ccb      	ldrb	r3, [r1, r3]
 80054fc:	f003 031f 	and.w	r3, r3, #31
 8005500:	fa22 f303 	lsr.w	r3, r2, r3
 8005504:	4a4e      	ldr	r2, [pc, #312]	@ (8005640 <HAL_RCC_OscConfig+0x278>)
 8005506:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005508:	4b4e      	ldr	r3, [pc, #312]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4618      	mov	r0, r3
 800550e:	f7fe f8a9 	bl	8003664 <HAL_InitTick>
 8005512:	4603      	mov	r3, r0
 8005514:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005516:	7bfb      	ldrb	r3, [r7, #15]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d052      	beq.n	80055c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800551c:	7bfb      	ldrb	r3, [r7, #15]
 800551e:	e327      	b.n	8005b70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d032      	beq.n	800558e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005528:	4b43      	ldr	r3, [pc, #268]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a42      	ldr	r2, [pc, #264]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 800552e:	f043 0301 	orr.w	r3, r3, #1
 8005532:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005534:	f7fe f8e6 	bl	8003704 <HAL_GetTick>
 8005538:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800553a:	e008      	b.n	800554e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800553c:	f7fe f8e2 	bl	8003704 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b02      	cmp	r3, #2
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e310      	b.n	8005b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800554e:	4b3a      	ldr	r3, [pc, #232]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0f0      	beq.n	800553c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800555a:	4b37      	ldr	r3, [pc, #220]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a36      	ldr	r2, [pc, #216]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 8005560:	f043 0308 	orr.w	r3, r3, #8
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	4b34      	ldr	r3, [pc, #208]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	4931      	ldr	r1, [pc, #196]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 8005574:	4313      	orrs	r3, r2
 8005576:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005578:	4b2f      	ldr	r3, [pc, #188]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	021b      	lsls	r3, r3, #8
 8005586:	492c      	ldr	r1, [pc, #176]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 8005588:	4313      	orrs	r3, r2
 800558a:	604b      	str	r3, [r1, #4]
 800558c:	e01a      	b.n	80055c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800558e:	4b2a      	ldr	r3, [pc, #168]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a29      	ldr	r2, [pc, #164]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 8005594:	f023 0301 	bic.w	r3, r3, #1
 8005598:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800559a:	f7fe f8b3 	bl	8003704 <HAL_GetTick>
 800559e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055a0:	e008      	b.n	80055b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055a2:	f7fe f8af 	bl	8003704 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d901      	bls.n	80055b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e2dd      	b.n	8005b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055b4:	4b20      	ldr	r3, [pc, #128]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1f0      	bne.n	80055a2 <HAL_RCC_OscConfig+0x1da>
 80055c0:	e000      	b.n	80055c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80055c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d074      	beq.n	80056ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	2b08      	cmp	r3, #8
 80055d4:	d005      	beq.n	80055e2 <HAL_RCC_OscConfig+0x21a>
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	2b0c      	cmp	r3, #12
 80055da:	d10e      	bne.n	80055fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	2b03      	cmp	r3, #3
 80055e0:	d10b      	bne.n	80055fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055e2:	4b15      	ldr	r3, [pc, #84]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d064      	beq.n	80056b8 <HAL_RCC_OscConfig+0x2f0>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d160      	bne.n	80056b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e2ba      	b.n	8005b70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005602:	d106      	bne.n	8005612 <HAL_RCC_OscConfig+0x24a>
 8005604:	4b0c      	ldr	r3, [pc, #48]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a0b      	ldr	r2, [pc, #44]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 800560a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800560e:	6013      	str	r3, [r2, #0]
 8005610:	e026      	b.n	8005660 <HAL_RCC_OscConfig+0x298>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800561a:	d115      	bne.n	8005648 <HAL_RCC_OscConfig+0x280>
 800561c:	4b06      	ldr	r3, [pc, #24]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a05      	ldr	r2, [pc, #20]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 8005622:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	4b03      	ldr	r3, [pc, #12]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a02      	ldr	r2, [pc, #8]	@ (8005638 <HAL_RCC_OscConfig+0x270>)
 800562e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005632:	6013      	str	r3, [r2, #0]
 8005634:	e014      	b.n	8005660 <HAL_RCC_OscConfig+0x298>
 8005636:	bf00      	nop
 8005638:	40021000 	.word	0x40021000
 800563c:	0801176c 	.word	0x0801176c
 8005640:	20000008 	.word	0x20000008
 8005644:	20000050 	.word	0x20000050
 8005648:	4ba0      	ldr	r3, [pc, #640]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a9f      	ldr	r2, [pc, #636]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 800564e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005652:	6013      	str	r3, [r2, #0]
 8005654:	4b9d      	ldr	r3, [pc, #628]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a9c      	ldr	r2, [pc, #624]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 800565a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800565e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d013      	beq.n	8005690 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005668:	f7fe f84c 	bl	8003704 <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005670:	f7fe f848 	bl	8003704 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b64      	cmp	r3, #100	@ 0x64
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e276      	b.n	8005b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005682:	4b92      	ldr	r3, [pc, #584]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d0f0      	beq.n	8005670 <HAL_RCC_OscConfig+0x2a8>
 800568e:	e014      	b.n	80056ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005690:	f7fe f838 	bl	8003704 <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005698:	f7fe f834 	bl	8003704 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b64      	cmp	r3, #100	@ 0x64
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e262      	b.n	8005b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056aa:	4b88      	ldr	r3, [pc, #544]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1f0      	bne.n	8005698 <HAL_RCC_OscConfig+0x2d0>
 80056b6:	e000      	b.n	80056ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d060      	beq.n	8005788 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	2b04      	cmp	r3, #4
 80056ca:	d005      	beq.n	80056d8 <HAL_RCC_OscConfig+0x310>
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	2b0c      	cmp	r3, #12
 80056d0:	d119      	bne.n	8005706 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d116      	bne.n	8005706 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056d8:	4b7c      	ldr	r3, [pc, #496]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d005      	beq.n	80056f0 <HAL_RCC_OscConfig+0x328>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e23f      	b.n	8005b70 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056f0:	4b76      	ldr	r3, [pc, #472]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	061b      	lsls	r3, r3, #24
 80056fe:	4973      	ldr	r1, [pc, #460]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 8005700:	4313      	orrs	r3, r2
 8005702:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005704:	e040      	b.n	8005788 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d023      	beq.n	8005756 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800570e:	4b6f      	ldr	r3, [pc, #444]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a6e      	ldr	r2, [pc, #440]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 8005714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571a:	f7fd fff3 	bl	8003704 <HAL_GetTick>
 800571e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005720:	e008      	b.n	8005734 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005722:	f7fd ffef 	bl	8003704 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d901      	bls.n	8005734 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e21d      	b.n	8005b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005734:	4b65      	ldr	r3, [pc, #404]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0f0      	beq.n	8005722 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005740:	4b62      	ldr	r3, [pc, #392]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	061b      	lsls	r3, r3, #24
 800574e:	495f      	ldr	r1, [pc, #380]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 8005750:	4313      	orrs	r3, r2
 8005752:	604b      	str	r3, [r1, #4]
 8005754:	e018      	b.n	8005788 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005756:	4b5d      	ldr	r3, [pc, #372]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a5c      	ldr	r2, [pc, #368]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 800575c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005762:	f7fd ffcf 	bl	8003704 <HAL_GetTick>
 8005766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005768:	e008      	b.n	800577c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800576a:	f7fd ffcb 	bl	8003704 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d901      	bls.n	800577c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e1f9      	b.n	8005b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800577c:	4b53      	ldr	r3, [pc, #332]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1f0      	bne.n	800576a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	2b00      	cmp	r3, #0
 8005792:	d03c      	beq.n	800580e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d01c      	beq.n	80057d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800579c:	4b4b      	ldr	r3, [pc, #300]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 800579e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057a2:	4a4a      	ldr	r2, [pc, #296]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 80057a4:	f043 0301 	orr.w	r3, r3, #1
 80057a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ac:	f7fd ffaa 	bl	8003704 <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057b4:	f7fd ffa6 	bl	8003704 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e1d4      	b.n	8005b70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057c6:	4b41      	ldr	r3, [pc, #260]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 80057c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0ef      	beq.n	80057b4 <HAL_RCC_OscConfig+0x3ec>
 80057d4:	e01b      	b.n	800580e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057d6:	4b3d      	ldr	r3, [pc, #244]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 80057d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057dc:	4a3b      	ldr	r2, [pc, #236]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 80057de:	f023 0301 	bic.w	r3, r3, #1
 80057e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e6:	f7fd ff8d 	bl	8003704 <HAL_GetTick>
 80057ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057ec:	e008      	b.n	8005800 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ee:	f7fd ff89 	bl	8003704 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e1b7      	b.n	8005b70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005800:	4b32      	ldr	r3, [pc, #200]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 8005802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1ef      	bne.n	80057ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0304 	and.w	r3, r3, #4
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 80a6 	beq.w	8005968 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800581c:	2300      	movs	r3, #0
 800581e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005820:	4b2a      	ldr	r3, [pc, #168]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 8005822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005824:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10d      	bne.n	8005848 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800582c:	4b27      	ldr	r3, [pc, #156]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 800582e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005830:	4a26      	ldr	r2, [pc, #152]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 8005832:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005836:	6593      	str	r3, [r2, #88]	@ 0x58
 8005838:	4b24      	ldr	r3, [pc, #144]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 800583a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800583c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005840:	60bb      	str	r3, [r7, #8]
 8005842:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005844:	2301      	movs	r3, #1
 8005846:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005848:	4b21      	ldr	r3, [pc, #132]	@ (80058d0 <HAL_RCC_OscConfig+0x508>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005850:	2b00      	cmp	r3, #0
 8005852:	d118      	bne.n	8005886 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005854:	4b1e      	ldr	r3, [pc, #120]	@ (80058d0 <HAL_RCC_OscConfig+0x508>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a1d      	ldr	r2, [pc, #116]	@ (80058d0 <HAL_RCC_OscConfig+0x508>)
 800585a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800585e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005860:	f7fd ff50 	bl	8003704 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005868:	f7fd ff4c 	bl	8003704 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e17a      	b.n	8005b70 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800587a:	4b15      	ldr	r3, [pc, #84]	@ (80058d0 <HAL_RCC_OscConfig+0x508>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0f0      	beq.n	8005868 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d108      	bne.n	80058a0 <HAL_RCC_OscConfig+0x4d8>
 800588e:	4b0f      	ldr	r3, [pc, #60]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 8005890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005894:	4a0d      	ldr	r2, [pc, #52]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 8005896:	f043 0301 	orr.w	r3, r3, #1
 800589a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800589e:	e029      	b.n	80058f4 <HAL_RCC_OscConfig+0x52c>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	2b05      	cmp	r3, #5
 80058a6:	d115      	bne.n	80058d4 <HAL_RCC_OscConfig+0x50c>
 80058a8:	4b08      	ldr	r3, [pc, #32]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 80058aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ae:	4a07      	ldr	r2, [pc, #28]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 80058b0:	f043 0304 	orr.w	r3, r3, #4
 80058b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058b8:	4b04      	ldr	r3, [pc, #16]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 80058ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058be:	4a03      	ldr	r2, [pc, #12]	@ (80058cc <HAL_RCC_OscConfig+0x504>)
 80058c0:	f043 0301 	orr.w	r3, r3, #1
 80058c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058c8:	e014      	b.n	80058f4 <HAL_RCC_OscConfig+0x52c>
 80058ca:	bf00      	nop
 80058cc:	40021000 	.word	0x40021000
 80058d0:	40007000 	.word	0x40007000
 80058d4:	4b9c      	ldr	r3, [pc, #624]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 80058d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058da:	4a9b      	ldr	r2, [pc, #620]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 80058dc:	f023 0301 	bic.w	r3, r3, #1
 80058e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058e4:	4b98      	ldr	r3, [pc, #608]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 80058e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ea:	4a97      	ldr	r2, [pc, #604]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 80058ec:	f023 0304 	bic.w	r3, r3, #4
 80058f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d016      	beq.n	800592a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058fc:	f7fd ff02 	bl	8003704 <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005902:	e00a      	b.n	800591a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005904:	f7fd fefe 	bl	8003704 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005912:	4293      	cmp	r3, r2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e12a      	b.n	8005b70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800591a:	4b8b      	ldr	r3, [pc, #556]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 800591c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0ed      	beq.n	8005904 <HAL_RCC_OscConfig+0x53c>
 8005928:	e015      	b.n	8005956 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800592a:	f7fd feeb 	bl	8003704 <HAL_GetTick>
 800592e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005930:	e00a      	b.n	8005948 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005932:	f7fd fee7 	bl	8003704 <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005940:	4293      	cmp	r3, r2
 8005942:	d901      	bls.n	8005948 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e113      	b.n	8005b70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005948:	4b7f      	ldr	r3, [pc, #508]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 800594a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1ed      	bne.n	8005932 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005956:	7ffb      	ldrb	r3, [r7, #31]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d105      	bne.n	8005968 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800595c:	4b7a      	ldr	r3, [pc, #488]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 800595e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005960:	4a79      	ldr	r2, [pc, #484]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 8005962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005966:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 80fe 	beq.w	8005b6e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005976:	2b02      	cmp	r3, #2
 8005978:	f040 80d0 	bne.w	8005b1c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800597c:	4b72      	ldr	r3, [pc, #456]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f003 0203 	and.w	r2, r3, #3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598c:	429a      	cmp	r2, r3
 800598e:	d130      	bne.n	80059f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599a:	3b01      	subs	r3, #1
 800599c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800599e:	429a      	cmp	r2, r3
 80059a0:	d127      	bne.n	80059f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d11f      	bne.n	80059f2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80059bc:	2a07      	cmp	r2, #7
 80059be:	bf14      	ite	ne
 80059c0:	2201      	movne	r2, #1
 80059c2:	2200      	moveq	r2, #0
 80059c4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d113      	bne.n	80059f2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d4:	085b      	lsrs	r3, r3, #1
 80059d6:	3b01      	subs	r3, #1
 80059d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80059da:	429a      	cmp	r2, r3
 80059dc:	d109      	bne.n	80059f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e8:	085b      	lsrs	r3, r3, #1
 80059ea:	3b01      	subs	r3, #1
 80059ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d06e      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	2b0c      	cmp	r3, #12
 80059f6:	d069      	beq.n	8005acc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80059f8:	4b53      	ldr	r3, [pc, #332]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d105      	bne.n	8005a10 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005a04:	4b50      	ldr	r3, [pc, #320]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e0ad      	b.n	8005b70 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a14:	4b4c      	ldr	r3, [pc, #304]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a4b      	ldr	r2, [pc, #300]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 8005a1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a1e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a20:	f7fd fe70 	bl	8003704 <HAL_GetTick>
 8005a24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a26:	e008      	b.n	8005a3a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a28:	f7fd fe6c 	bl	8003704 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d901      	bls.n	8005a3a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e09a      	b.n	8005b70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a3a:	4b43      	ldr	r3, [pc, #268]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1f0      	bne.n	8005a28 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a46:	4b40      	ldr	r3, [pc, #256]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 8005a48:	68da      	ldr	r2, [r3, #12]
 8005a4a:	4b40      	ldr	r3, [pc, #256]	@ (8005b4c <HAL_RCC_OscConfig+0x784>)
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005a56:	3a01      	subs	r2, #1
 8005a58:	0112      	lsls	r2, r2, #4
 8005a5a:	4311      	orrs	r1, r2
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005a60:	0212      	lsls	r2, r2, #8
 8005a62:	4311      	orrs	r1, r2
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005a68:	0852      	lsrs	r2, r2, #1
 8005a6a:	3a01      	subs	r2, #1
 8005a6c:	0552      	lsls	r2, r2, #21
 8005a6e:	4311      	orrs	r1, r2
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005a74:	0852      	lsrs	r2, r2, #1
 8005a76:	3a01      	subs	r2, #1
 8005a78:	0652      	lsls	r2, r2, #25
 8005a7a:	4311      	orrs	r1, r2
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a80:	0912      	lsrs	r2, r2, #4
 8005a82:	0452      	lsls	r2, r2, #17
 8005a84:	430a      	orrs	r2, r1
 8005a86:	4930      	ldr	r1, [pc, #192]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005a8c:	4b2e      	ldr	r3, [pc, #184]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a2d      	ldr	r2, [pc, #180]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 8005a92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a98:	4b2b      	ldr	r3, [pc, #172]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	4a2a      	ldr	r2, [pc, #168]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 8005a9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005aa2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005aa4:	f7fd fe2e 	bl	8003704 <HAL_GetTick>
 8005aa8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aac:	f7fd fe2a 	bl	8003704 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e058      	b.n	8005b70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005abe:	4b22      	ldr	r3, [pc, #136]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d0f0      	beq.n	8005aac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005aca:	e050      	b.n	8005b6e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e04f      	b.n	8005b70 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d148      	bne.n	8005b6e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005adc:	4b1a      	ldr	r3, [pc, #104]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a19      	ldr	r2, [pc, #100]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 8005ae2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ae6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ae8:	4b17      	ldr	r3, [pc, #92]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	4a16      	ldr	r2, [pc, #88]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 8005aee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005af2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005af4:	f7fd fe06 	bl	8003704 <HAL_GetTick>
 8005af8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005afc:	f7fd fe02 	bl	8003704 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e030      	b.n	8005b70 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0f0      	beq.n	8005afc <HAL_RCC_OscConfig+0x734>
 8005b1a:	e028      	b.n	8005b6e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	2b0c      	cmp	r3, #12
 8005b20:	d023      	beq.n	8005b6a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b22:	4b09      	ldr	r3, [pc, #36]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a08      	ldr	r2, [pc, #32]	@ (8005b48 <HAL_RCC_OscConfig+0x780>)
 8005b28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b2e:	f7fd fde9 	bl	8003704 <HAL_GetTick>
 8005b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b34:	e00c      	b.n	8005b50 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b36:	f7fd fde5 	bl	8003704 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d905      	bls.n	8005b50 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e013      	b.n	8005b70 <HAL_RCC_OscConfig+0x7a8>
 8005b48:	40021000 	.word	0x40021000
 8005b4c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b50:	4b09      	ldr	r3, [pc, #36]	@ (8005b78 <HAL_RCC_OscConfig+0x7b0>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1ec      	bne.n	8005b36 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005b5c:	4b06      	ldr	r3, [pc, #24]	@ (8005b78 <HAL_RCC_OscConfig+0x7b0>)
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	4905      	ldr	r1, [pc, #20]	@ (8005b78 <HAL_RCC_OscConfig+0x7b0>)
 8005b62:	4b06      	ldr	r3, [pc, #24]	@ (8005b7c <HAL_RCC_OscConfig+0x7b4>)
 8005b64:	4013      	ands	r3, r2
 8005b66:	60cb      	str	r3, [r1, #12]
 8005b68:	e001      	b.n	8005b6e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e000      	b.n	8005b70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3720      	adds	r7, #32
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40021000 	.word	0x40021000
 8005b7c:	feeefffc 	.word	0xfeeefffc

08005b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e0e7      	b.n	8005d64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b94:	4b75      	ldr	r3, [pc, #468]	@ (8005d6c <HAL_RCC_ClockConfig+0x1ec>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0307 	and.w	r3, r3, #7
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d910      	bls.n	8005bc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ba2:	4b72      	ldr	r3, [pc, #456]	@ (8005d6c <HAL_RCC_ClockConfig+0x1ec>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f023 0207 	bic.w	r2, r3, #7
 8005baa:	4970      	ldr	r1, [pc, #448]	@ (8005d6c <HAL_RCC_ClockConfig+0x1ec>)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb2:	4b6e      	ldr	r3, [pc, #440]	@ (8005d6c <HAL_RCC_ClockConfig+0x1ec>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0307 	and.w	r3, r3, #7
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d001      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e0cf      	b.n	8005d64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d010      	beq.n	8005bf2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	4b66      	ldr	r3, [pc, #408]	@ (8005d70 <HAL_RCC_ClockConfig+0x1f0>)
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d908      	bls.n	8005bf2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005be0:	4b63      	ldr	r3, [pc, #396]	@ (8005d70 <HAL_RCC_ClockConfig+0x1f0>)
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	4960      	ldr	r1, [pc, #384]	@ (8005d70 <HAL_RCC_ClockConfig+0x1f0>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d04c      	beq.n	8005c98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d107      	bne.n	8005c16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c06:	4b5a      	ldr	r3, [pc, #360]	@ (8005d70 <HAL_RCC_ClockConfig+0x1f0>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d121      	bne.n	8005c56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e0a6      	b.n	8005d64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d107      	bne.n	8005c2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c1e:	4b54      	ldr	r3, [pc, #336]	@ (8005d70 <HAL_RCC_ClockConfig+0x1f0>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d115      	bne.n	8005c56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e09a      	b.n	8005d64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d107      	bne.n	8005c46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c36:	4b4e      	ldr	r3, [pc, #312]	@ (8005d70 <HAL_RCC_ClockConfig+0x1f0>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d109      	bne.n	8005c56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e08e      	b.n	8005d64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c46:	4b4a      	ldr	r3, [pc, #296]	@ (8005d70 <HAL_RCC_ClockConfig+0x1f0>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e086      	b.n	8005d64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c56:	4b46      	ldr	r3, [pc, #280]	@ (8005d70 <HAL_RCC_ClockConfig+0x1f0>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f023 0203 	bic.w	r2, r3, #3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	4943      	ldr	r1, [pc, #268]	@ (8005d70 <HAL_RCC_ClockConfig+0x1f0>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c68:	f7fd fd4c 	bl	8003704 <HAL_GetTick>
 8005c6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c6e:	e00a      	b.n	8005c86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c70:	f7fd fd48 	bl	8003704 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e06e      	b.n	8005d64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c86:	4b3a      	ldr	r3, [pc, #232]	@ (8005d70 <HAL_RCC_ClockConfig+0x1f0>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f003 020c 	and.w	r2, r3, #12
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d1eb      	bne.n	8005c70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d010      	beq.n	8005cc6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	4b31      	ldr	r3, [pc, #196]	@ (8005d70 <HAL_RCC_ClockConfig+0x1f0>)
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d208      	bcs.n	8005cc6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cb4:	4b2e      	ldr	r3, [pc, #184]	@ (8005d70 <HAL_RCC_ClockConfig+0x1f0>)
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	492b      	ldr	r1, [pc, #172]	@ (8005d70 <HAL_RCC_ClockConfig+0x1f0>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cc6:	4b29      	ldr	r3, [pc, #164]	@ (8005d6c <HAL_RCC_ClockConfig+0x1ec>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0307 	and.w	r3, r3, #7
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d210      	bcs.n	8005cf6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cd4:	4b25      	ldr	r3, [pc, #148]	@ (8005d6c <HAL_RCC_ClockConfig+0x1ec>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f023 0207 	bic.w	r2, r3, #7
 8005cdc:	4923      	ldr	r1, [pc, #140]	@ (8005d6c <HAL_RCC_ClockConfig+0x1ec>)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ce4:	4b21      	ldr	r3, [pc, #132]	@ (8005d6c <HAL_RCC_ClockConfig+0x1ec>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0307 	and.w	r3, r3, #7
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d001      	beq.n	8005cf6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e036      	b.n	8005d64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0304 	and.w	r3, r3, #4
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d008      	beq.n	8005d14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d02:	4b1b      	ldr	r3, [pc, #108]	@ (8005d70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	4918      	ldr	r1, [pc, #96]	@ (8005d70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0308 	and.w	r3, r3, #8
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d009      	beq.n	8005d34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d20:	4b13      	ldr	r3, [pc, #76]	@ (8005d70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	00db      	lsls	r3, r3, #3
 8005d2e:	4910      	ldr	r1, [pc, #64]	@ (8005d70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d34:	f000 f824 	bl	8005d80 <HAL_RCC_GetSysClockFreq>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	091b      	lsrs	r3, r3, #4
 8005d40:	f003 030f 	and.w	r3, r3, #15
 8005d44:	490b      	ldr	r1, [pc, #44]	@ (8005d74 <HAL_RCC_ClockConfig+0x1f4>)
 8005d46:	5ccb      	ldrb	r3, [r1, r3]
 8005d48:	f003 031f 	and.w	r3, r3, #31
 8005d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d50:	4a09      	ldr	r2, [pc, #36]	@ (8005d78 <HAL_RCC_ClockConfig+0x1f8>)
 8005d52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005d54:	4b09      	ldr	r3, [pc, #36]	@ (8005d7c <HAL_RCC_ClockConfig+0x1fc>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7fd fc83 	bl	8003664 <HAL_InitTick>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	72fb      	strb	r3, [r7, #11]

  return status;
 8005d62:	7afb      	ldrb	r3, [r7, #11]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	40022000 	.word	0x40022000
 8005d70:	40021000 	.word	0x40021000
 8005d74:	0801176c 	.word	0x0801176c
 8005d78:	20000008 	.word	0x20000008
 8005d7c:	20000050 	.word	0x20000050

08005d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b089      	sub	sp, #36	@ 0x24
 8005d84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005d86:	2300      	movs	r3, #0
 8005d88:	61fb      	str	r3, [r7, #28]
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d8e:	4b3e      	ldr	r3, [pc, #248]	@ (8005e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 030c 	and.w	r3, r3, #12
 8005d96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d98:	4b3b      	ldr	r3, [pc, #236]	@ (8005e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f003 0303 	and.w	r3, r3, #3
 8005da0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d005      	beq.n	8005db4 <HAL_RCC_GetSysClockFreq+0x34>
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	2b0c      	cmp	r3, #12
 8005dac:	d121      	bne.n	8005df2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d11e      	bne.n	8005df2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005db4:	4b34      	ldr	r3, [pc, #208]	@ (8005e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0308 	and.w	r3, r3, #8
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d107      	bne.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005dc0:	4b31      	ldr	r3, [pc, #196]	@ (8005e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dc6:	0a1b      	lsrs	r3, r3, #8
 8005dc8:	f003 030f 	and.w	r3, r3, #15
 8005dcc:	61fb      	str	r3, [r7, #28]
 8005dce:	e005      	b.n	8005ddc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8005e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	091b      	lsrs	r3, r3, #4
 8005dd6:	f003 030f 	and.w	r3, r3, #15
 8005dda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ddc:	4a2b      	ldr	r2, [pc, #172]	@ (8005e8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005de4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10d      	bne.n	8005e08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005df0:	e00a      	b.n	8005e08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	d102      	bne.n	8005dfe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005df8:	4b25      	ldr	r3, [pc, #148]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0x110>)
 8005dfa:	61bb      	str	r3, [r7, #24]
 8005dfc:	e004      	b.n	8005e08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	2b08      	cmp	r3, #8
 8005e02:	d101      	bne.n	8005e08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e04:	4b23      	ldr	r3, [pc, #140]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	2b0c      	cmp	r3, #12
 8005e0c:	d134      	bne.n	8005e78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8005e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f003 0303 	and.w	r3, r3, #3
 8005e16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d003      	beq.n	8005e26 <HAL_RCC_GetSysClockFreq+0xa6>
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	2b03      	cmp	r3, #3
 8005e22:	d003      	beq.n	8005e2c <HAL_RCC_GetSysClockFreq+0xac>
 8005e24:	e005      	b.n	8005e32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005e26:	4b1a      	ldr	r3, [pc, #104]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e28:	617b      	str	r3, [r7, #20]
      break;
 8005e2a:	e005      	b.n	8005e38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005e2c:	4b19      	ldr	r3, [pc, #100]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e2e:	617b      	str	r3, [r7, #20]
      break;
 8005e30:	e002      	b.n	8005e38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	617b      	str	r3, [r7, #20]
      break;
 8005e36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e38:	4b13      	ldr	r3, [pc, #76]	@ (8005e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	091b      	lsrs	r3, r3, #4
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	3301      	adds	r3, #1
 8005e44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005e46:	4b10      	ldr	r3, [pc, #64]	@ (8005e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	0a1b      	lsrs	r3, r3, #8
 8005e4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	fb03 f202 	mul.w	r2, r3, r2
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8005e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	0e5b      	lsrs	r3, r3, #25
 8005e64:	f003 0303 	and.w	r3, r3, #3
 8005e68:	3301      	adds	r3, #1
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005e78:	69bb      	ldr	r3, [r7, #24]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3724      	adds	r7, #36	@ 0x24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	40021000 	.word	0x40021000
 8005e8c:	08011784 	.word	0x08011784
 8005e90:	00f42400 	.word	0x00f42400
 8005e94:	007a1200 	.word	0x007a1200

08005e98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e9c:	4b03      	ldr	r3, [pc, #12]	@ (8005eac <HAL_RCC_GetHCLKFreq+0x14>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	20000008 	.word	0x20000008

08005eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005eb4:	f7ff fff0 	bl	8005e98 <HAL_RCC_GetHCLKFreq>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	4b06      	ldr	r3, [pc, #24]	@ (8005ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	0a1b      	lsrs	r3, r3, #8
 8005ec0:	f003 0307 	and.w	r3, r3, #7
 8005ec4:	4904      	ldr	r1, [pc, #16]	@ (8005ed8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ec6:	5ccb      	ldrb	r3, [r1, r3]
 8005ec8:	f003 031f 	and.w	r3, r3, #31
 8005ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	40021000 	.word	0x40021000
 8005ed8:	0801177c 	.word	0x0801177c

08005edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ee0:	f7ff ffda 	bl	8005e98 <HAL_RCC_GetHCLKFreq>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	4b06      	ldr	r3, [pc, #24]	@ (8005f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	0adb      	lsrs	r3, r3, #11
 8005eec:	f003 0307 	and.w	r3, r3, #7
 8005ef0:	4904      	ldr	r1, [pc, #16]	@ (8005f04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ef2:	5ccb      	ldrb	r3, [r1, r3]
 8005ef4:	f003 031f 	and.w	r3, r3, #31
 8005ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	40021000 	.word	0x40021000
 8005f04:	0801177c 	.word	0x0801177c

08005f08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005f10:	2300      	movs	r3, #0
 8005f12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005f14:	4b2a      	ldr	r3, [pc, #168]	@ (8005fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005f20:	f7ff f922 	bl	8005168 <HAL_PWREx_GetVoltageRange>
 8005f24:	6178      	str	r0, [r7, #20]
 8005f26:	e014      	b.n	8005f52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f28:	4b25      	ldr	r3, [pc, #148]	@ (8005fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f2c:	4a24      	ldr	r2, [pc, #144]	@ (8005fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f32:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f34:	4b22      	ldr	r3, [pc, #136]	@ (8005fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f3c:	60fb      	str	r3, [r7, #12]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005f40:	f7ff f912 	bl	8005168 <HAL_PWREx_GetVoltageRange>
 8005f44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005f46:	4b1e      	ldr	r3, [pc, #120]	@ (8005fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f4a:	4a1d      	ldr	r2, [pc, #116]	@ (8005fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f50:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f58:	d10b      	bne.n	8005f72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b80      	cmp	r3, #128	@ 0x80
 8005f5e:	d919      	bls.n	8005f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2ba0      	cmp	r3, #160	@ 0xa0
 8005f64:	d902      	bls.n	8005f6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f66:	2302      	movs	r3, #2
 8005f68:	613b      	str	r3, [r7, #16]
 8005f6a:	e013      	b.n	8005f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	613b      	str	r3, [r7, #16]
 8005f70:	e010      	b.n	8005f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b80      	cmp	r3, #128	@ 0x80
 8005f76:	d902      	bls.n	8005f7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005f78:	2303      	movs	r3, #3
 8005f7a:	613b      	str	r3, [r7, #16]
 8005f7c:	e00a      	b.n	8005f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b80      	cmp	r3, #128	@ 0x80
 8005f82:	d102      	bne.n	8005f8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f84:	2302      	movs	r3, #2
 8005f86:	613b      	str	r3, [r7, #16]
 8005f88:	e004      	b.n	8005f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b70      	cmp	r3, #112	@ 0x70
 8005f8e:	d101      	bne.n	8005f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f90:	2301      	movs	r3, #1
 8005f92:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005f94:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f023 0207 	bic.w	r2, r3, #7
 8005f9c:	4909      	ldr	r1, [pc, #36]	@ (8005fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005fa4:	4b07      	ldr	r3, [pc, #28]	@ (8005fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d001      	beq.n	8005fb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e000      	b.n	8005fb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3718      	adds	r7, #24
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	40021000 	.word	0x40021000
 8005fc4:	40022000 	.word	0x40022000

08005fc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d041      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fe8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005fec:	d02a      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005fee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005ff2:	d824      	bhi.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ff4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ff8:	d008      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005ffa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ffe:	d81e      	bhi.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00a      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006004:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006008:	d010      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800600a:	e018      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800600c:	4b86      	ldr	r3, [pc, #536]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	4a85      	ldr	r2, [pc, #532]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006012:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006016:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006018:	e015      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	3304      	adds	r3, #4
 800601e:	2100      	movs	r1, #0
 8006020:	4618      	mov	r0, r3
 8006022:	f000 facb 	bl	80065bc <RCCEx_PLLSAI1_Config>
 8006026:	4603      	mov	r3, r0
 8006028:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800602a:	e00c      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3320      	adds	r3, #32
 8006030:	2100      	movs	r1, #0
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fbb6 	bl	80067a4 <RCCEx_PLLSAI2_Config>
 8006038:	4603      	mov	r3, r0
 800603a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800603c:	e003      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	74fb      	strb	r3, [r7, #19]
      break;
 8006042:	e000      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006044:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006046:	7cfb      	ldrb	r3, [r7, #19]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10b      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800604c:	4b76      	ldr	r3, [pc, #472]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800604e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006052:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800605a:	4973      	ldr	r1, [pc, #460]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800605c:	4313      	orrs	r3, r2
 800605e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006062:	e001      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006064:	7cfb      	ldrb	r3, [r7, #19]
 8006066:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d041      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006078:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800607c:	d02a      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800607e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006082:	d824      	bhi.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006084:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006088:	d008      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800608a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800608e:	d81e      	bhi.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00a      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006094:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006098:	d010      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800609a:	e018      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800609c:	4b62      	ldr	r3, [pc, #392]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	4a61      	ldr	r2, [pc, #388]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060a8:	e015      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	3304      	adds	r3, #4
 80060ae:	2100      	movs	r1, #0
 80060b0:	4618      	mov	r0, r3
 80060b2:	f000 fa83 	bl	80065bc <RCCEx_PLLSAI1_Config>
 80060b6:	4603      	mov	r3, r0
 80060b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060ba:	e00c      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	3320      	adds	r3, #32
 80060c0:	2100      	movs	r1, #0
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 fb6e 	bl	80067a4 <RCCEx_PLLSAI2_Config>
 80060c8:	4603      	mov	r3, r0
 80060ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060cc:	e003      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	74fb      	strb	r3, [r7, #19]
      break;
 80060d2:	e000      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80060d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060d6:	7cfb      	ldrb	r3, [r7, #19]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10b      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80060dc:	4b52      	ldr	r3, [pc, #328]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060ea:	494f      	ldr	r1, [pc, #316]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80060f2:	e001      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f4:	7cfb      	ldrb	r3, [r7, #19]
 80060f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 80a0 	beq.w	8006246 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006106:	2300      	movs	r3, #0
 8006108:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800610a:	4b47      	ldr	r3, [pc, #284]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800610c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800610e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006116:	2301      	movs	r3, #1
 8006118:	e000      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800611a:	2300      	movs	r3, #0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00d      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006120:	4b41      	ldr	r3, [pc, #260]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006124:	4a40      	ldr	r2, [pc, #256]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800612a:	6593      	str	r3, [r2, #88]	@ 0x58
 800612c:	4b3e      	ldr	r3, [pc, #248]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800612e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006134:	60bb      	str	r3, [r7, #8]
 8006136:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006138:	2301      	movs	r3, #1
 800613a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800613c:	4b3b      	ldr	r3, [pc, #236]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a3a      	ldr	r2, [pc, #232]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006142:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006146:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006148:	f7fd fadc 	bl	8003704 <HAL_GetTick>
 800614c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800614e:	e009      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006150:	f7fd fad8 	bl	8003704 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d902      	bls.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	74fb      	strb	r3, [r7, #19]
        break;
 8006162:	e005      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006164:	4b31      	ldr	r3, [pc, #196]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800616c:	2b00      	cmp	r3, #0
 800616e:	d0ef      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006170:	7cfb      	ldrb	r3, [r7, #19]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d15c      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006176:	4b2c      	ldr	r3, [pc, #176]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800617c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006180:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d01f      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	429a      	cmp	r2, r3
 8006192:	d019      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006194:	4b24      	ldr	r3, [pc, #144]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800619a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800619e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061a0:	4b21      	ldr	r3, [pc, #132]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061a6:	4a20      	ldr	r2, [pc, #128]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b6:	4a1c      	ldr	r2, [pc, #112]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061c0:	4a19      	ldr	r2, [pc, #100]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d016      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d2:	f7fd fa97 	bl	8003704 <HAL_GetTick>
 80061d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061d8:	e00b      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061da:	f7fd fa93 	bl	8003704 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d902      	bls.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	74fb      	strb	r3, [r7, #19]
            break;
 80061f0:	e006      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0ec      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006200:	7cfb      	ldrb	r3, [r7, #19]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10c      	bne.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006206:	4b08      	ldr	r3, [pc, #32]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800620c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006216:	4904      	ldr	r1, [pc, #16]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006218:	4313      	orrs	r3, r2
 800621a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800621e:	e009      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006220:	7cfb      	ldrb	r3, [r7, #19]
 8006222:	74bb      	strb	r3, [r7, #18]
 8006224:	e006      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006226:	bf00      	nop
 8006228:	40021000 	.word	0x40021000
 800622c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006230:	7cfb      	ldrb	r3, [r7, #19]
 8006232:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006234:	7c7b      	ldrb	r3, [r7, #17]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d105      	bne.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800623a:	4b9e      	ldr	r3, [pc, #632]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800623c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800623e:	4a9d      	ldr	r2, [pc, #628]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006240:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006244:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00a      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006252:	4b98      	ldr	r3, [pc, #608]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006258:	f023 0203 	bic.w	r2, r3, #3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006260:	4994      	ldr	r1, [pc, #592]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006262:	4313      	orrs	r3, r2
 8006264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0302 	and.w	r3, r3, #2
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00a      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006274:	4b8f      	ldr	r3, [pc, #572]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800627a:	f023 020c 	bic.w	r2, r3, #12
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006282:	498c      	ldr	r1, [pc, #560]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006284:	4313      	orrs	r3, r2
 8006286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0304 	and.w	r3, r3, #4
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00a      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006296:	4b87      	ldr	r3, [pc, #540]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800629c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a4:	4983      	ldr	r1, [pc, #524]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0308 	and.w	r3, r3, #8
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00a      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80062b8:	4b7e      	ldr	r3, [pc, #504]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062c6:	497b      	ldr	r1, [pc, #492]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0310 	and.w	r3, r3, #16
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00a      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80062da:	4b76      	ldr	r3, [pc, #472]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062e8:	4972      	ldr	r1, [pc, #456]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0320 	and.w	r3, r3, #32
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00a      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062fc:	4b6d      	ldr	r3, [pc, #436]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006302:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800630a:	496a      	ldr	r1, [pc, #424]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800630c:	4313      	orrs	r3, r2
 800630e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00a      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800631e:	4b65      	ldr	r3, [pc, #404]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006324:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800632c:	4961      	ldr	r1, [pc, #388]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800632e:	4313      	orrs	r3, r2
 8006330:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00a      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006340:	4b5c      	ldr	r3, [pc, #368]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006346:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800634e:	4959      	ldr	r1, [pc, #356]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006350:	4313      	orrs	r3, r2
 8006352:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00a      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006362:	4b54      	ldr	r3, [pc, #336]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006368:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006370:	4950      	ldr	r1, [pc, #320]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006372:	4313      	orrs	r3, r2
 8006374:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00a      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006384:	4b4b      	ldr	r3, [pc, #300]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800638a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006392:	4948      	ldr	r1, [pc, #288]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006394:	4313      	orrs	r3, r2
 8006396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80063a6:	4b43      	ldr	r3, [pc, #268]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b4:	493f      	ldr	r1, [pc, #252]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d028      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063c8:	4b3a      	ldr	r3, [pc, #232]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063d6:	4937      	ldr	r1, [pc, #220]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063e6:	d106      	bne.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063e8:	4b32      	ldr	r3, [pc, #200]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	4a31      	ldr	r2, [pc, #196]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063f2:	60d3      	str	r3, [r2, #12]
 80063f4:	e011      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063fe:	d10c      	bne.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	3304      	adds	r3, #4
 8006404:	2101      	movs	r1, #1
 8006406:	4618      	mov	r0, r3
 8006408:	f000 f8d8 	bl	80065bc <RCCEx_PLLSAI1_Config>
 800640c:	4603      	mov	r3, r0
 800640e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006410:	7cfb      	ldrb	r3, [r7, #19]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006416:	7cfb      	ldrb	r3, [r7, #19]
 8006418:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d028      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006426:	4b23      	ldr	r3, [pc, #140]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800642c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006434:	491f      	ldr	r1, [pc, #124]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006436:	4313      	orrs	r3, r2
 8006438:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006440:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006444:	d106      	bne.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006446:	4b1b      	ldr	r3, [pc, #108]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	4a1a      	ldr	r2, [pc, #104]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800644c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006450:	60d3      	str	r3, [r2, #12]
 8006452:	e011      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006458:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800645c:	d10c      	bne.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	3304      	adds	r3, #4
 8006462:	2101      	movs	r1, #1
 8006464:	4618      	mov	r0, r3
 8006466:	f000 f8a9 	bl	80065bc <RCCEx_PLLSAI1_Config>
 800646a:	4603      	mov	r3, r0
 800646c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800646e:	7cfb      	ldrb	r3, [r7, #19]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006474:	7cfb      	ldrb	r3, [r7, #19]
 8006476:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d02b      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006484:	4b0b      	ldr	r3, [pc, #44]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800648a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006492:	4908      	ldr	r1, [pc, #32]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006494:	4313      	orrs	r3, r2
 8006496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800649e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064a2:	d109      	bne.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064a4:	4b03      	ldr	r3, [pc, #12]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	4a02      	ldr	r2, [pc, #8]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064ae:	60d3      	str	r3, [r2, #12]
 80064b0:	e014      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80064b2:	bf00      	nop
 80064b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064c0:	d10c      	bne.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	3304      	adds	r3, #4
 80064c6:	2101      	movs	r1, #1
 80064c8:	4618      	mov	r0, r3
 80064ca:	f000 f877 	bl	80065bc <RCCEx_PLLSAI1_Config>
 80064ce:	4603      	mov	r3, r0
 80064d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064d2:	7cfb      	ldrb	r3, [r7, #19]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80064d8:	7cfb      	ldrb	r3, [r7, #19]
 80064da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d02f      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064e8:	4b2b      	ldr	r3, [pc, #172]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064f6:	4928      	ldr	r1, [pc, #160]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006502:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006506:	d10d      	bne.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	3304      	adds	r3, #4
 800650c:	2102      	movs	r1, #2
 800650e:	4618      	mov	r0, r3
 8006510:	f000 f854 	bl	80065bc <RCCEx_PLLSAI1_Config>
 8006514:	4603      	mov	r3, r0
 8006516:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006518:	7cfb      	ldrb	r3, [r7, #19]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d014      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800651e:	7cfb      	ldrb	r3, [r7, #19]
 8006520:	74bb      	strb	r3, [r7, #18]
 8006522:	e011      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006528:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800652c:	d10c      	bne.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	3320      	adds	r3, #32
 8006532:	2102      	movs	r1, #2
 8006534:	4618      	mov	r0, r3
 8006536:	f000 f935 	bl	80067a4 <RCCEx_PLLSAI2_Config>
 800653a:	4603      	mov	r3, r0
 800653c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800653e:	7cfb      	ldrb	r3, [r7, #19]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006544:	7cfb      	ldrb	r3, [r7, #19]
 8006546:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00a      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006554:	4b10      	ldr	r3, [pc, #64]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800655a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006562:	490d      	ldr	r1, [pc, #52]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006564:	4313      	orrs	r3, r2
 8006566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00b      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006576:	4b08      	ldr	r3, [pc, #32]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800657c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006586:	4904      	ldr	r1, [pc, #16]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006588:	4313      	orrs	r3, r2
 800658a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800658e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	40021000 	.word	0x40021000

0800659c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800659c:	b480      	push	{r7}
 800659e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80065a0:	4b05      	ldr	r3, [pc, #20]	@ (80065b8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a04      	ldr	r2, [pc, #16]	@ (80065b8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80065a6:	f043 0304 	orr.w	r3, r3, #4
 80065aa:	6013      	str	r3, [r2, #0]
}
 80065ac:	bf00      	nop
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	40021000 	.word	0x40021000

080065bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80065ca:	4b75      	ldr	r3, [pc, #468]	@ (80067a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f003 0303 	and.w	r3, r3, #3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d018      	beq.n	8006608 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80065d6:	4b72      	ldr	r3, [pc, #456]	@ (80067a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	f003 0203 	and.w	r2, r3, #3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d10d      	bne.n	8006602 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
       ||
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d009      	beq.n	8006602 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80065ee:	4b6c      	ldr	r3, [pc, #432]	@ (80067a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	091b      	lsrs	r3, r3, #4
 80065f4:	f003 0307 	and.w	r3, r3, #7
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
       ||
 80065fe:	429a      	cmp	r2, r3
 8006600:	d047      	beq.n	8006692 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	73fb      	strb	r3, [r7, #15]
 8006606:	e044      	b.n	8006692 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b03      	cmp	r3, #3
 800660e:	d018      	beq.n	8006642 <RCCEx_PLLSAI1_Config+0x86>
 8006610:	2b03      	cmp	r3, #3
 8006612:	d825      	bhi.n	8006660 <RCCEx_PLLSAI1_Config+0xa4>
 8006614:	2b01      	cmp	r3, #1
 8006616:	d002      	beq.n	800661e <RCCEx_PLLSAI1_Config+0x62>
 8006618:	2b02      	cmp	r3, #2
 800661a:	d009      	beq.n	8006630 <RCCEx_PLLSAI1_Config+0x74>
 800661c:	e020      	b.n	8006660 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800661e:	4b60      	ldr	r3, [pc, #384]	@ (80067a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d11d      	bne.n	8006666 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800662e:	e01a      	b.n	8006666 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006630:	4b5b      	ldr	r3, [pc, #364]	@ (80067a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006638:	2b00      	cmp	r3, #0
 800663a:	d116      	bne.n	800666a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006640:	e013      	b.n	800666a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006642:	4b57      	ldr	r3, [pc, #348]	@ (80067a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10f      	bne.n	800666e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800664e:	4b54      	ldr	r3, [pc, #336]	@ (80067a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d109      	bne.n	800666e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800665e:	e006      	b.n	800666e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	73fb      	strb	r3, [r7, #15]
      break;
 8006664:	e004      	b.n	8006670 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006666:	bf00      	nop
 8006668:	e002      	b.n	8006670 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800666a:	bf00      	nop
 800666c:	e000      	b.n	8006670 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800666e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006670:	7bfb      	ldrb	r3, [r7, #15]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10d      	bne.n	8006692 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006676:	4b4a      	ldr	r3, [pc, #296]	@ (80067a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6819      	ldr	r1, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	3b01      	subs	r3, #1
 8006688:	011b      	lsls	r3, r3, #4
 800668a:	430b      	orrs	r3, r1
 800668c:	4944      	ldr	r1, [pc, #272]	@ (80067a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800668e:	4313      	orrs	r3, r2
 8006690:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006692:	7bfb      	ldrb	r3, [r7, #15]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d17d      	bne.n	8006794 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006698:	4b41      	ldr	r3, [pc, #260]	@ (80067a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a40      	ldr	r2, [pc, #256]	@ (80067a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800669e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80066a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066a4:	f7fd f82e 	bl	8003704 <HAL_GetTick>
 80066a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80066aa:	e009      	b.n	80066c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066ac:	f7fd f82a 	bl	8003704 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d902      	bls.n	80066c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	73fb      	strb	r3, [r7, #15]
        break;
 80066be:	e005      	b.n	80066cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80066c0:	4b37      	ldr	r3, [pc, #220]	@ (80067a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1ef      	bne.n	80066ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d160      	bne.n	8006794 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d111      	bne.n	80066fc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066d8:	4b31      	ldr	r3, [pc, #196]	@ (80067a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80066e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	6892      	ldr	r2, [r2, #8]
 80066e8:	0211      	lsls	r1, r2, #8
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	68d2      	ldr	r2, [r2, #12]
 80066ee:	0912      	lsrs	r2, r2, #4
 80066f0:	0452      	lsls	r2, r2, #17
 80066f2:	430a      	orrs	r2, r1
 80066f4:	492a      	ldr	r1, [pc, #168]	@ (80067a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	610b      	str	r3, [r1, #16]
 80066fa:	e027      	b.n	800674c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d112      	bne.n	8006728 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006702:	4b27      	ldr	r3, [pc, #156]	@ (80067a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800670a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	6892      	ldr	r2, [r2, #8]
 8006712:	0211      	lsls	r1, r2, #8
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	6912      	ldr	r2, [r2, #16]
 8006718:	0852      	lsrs	r2, r2, #1
 800671a:	3a01      	subs	r2, #1
 800671c:	0552      	lsls	r2, r2, #21
 800671e:	430a      	orrs	r2, r1
 8006720:	491f      	ldr	r1, [pc, #124]	@ (80067a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006722:	4313      	orrs	r3, r2
 8006724:	610b      	str	r3, [r1, #16]
 8006726:	e011      	b.n	800674c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006728:	4b1d      	ldr	r3, [pc, #116]	@ (80067a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006730:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	6892      	ldr	r2, [r2, #8]
 8006738:	0211      	lsls	r1, r2, #8
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	6952      	ldr	r2, [r2, #20]
 800673e:	0852      	lsrs	r2, r2, #1
 8006740:	3a01      	subs	r2, #1
 8006742:	0652      	lsls	r2, r2, #25
 8006744:	430a      	orrs	r2, r1
 8006746:	4916      	ldr	r1, [pc, #88]	@ (80067a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006748:	4313      	orrs	r3, r2
 800674a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800674c:	4b14      	ldr	r3, [pc, #80]	@ (80067a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a13      	ldr	r2, [pc, #76]	@ (80067a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006752:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006756:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006758:	f7fc ffd4 	bl	8003704 <HAL_GetTick>
 800675c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800675e:	e009      	b.n	8006774 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006760:	f7fc ffd0 	bl	8003704 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b02      	cmp	r3, #2
 800676c:	d902      	bls.n	8006774 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	73fb      	strb	r3, [r7, #15]
          break;
 8006772:	e005      	b.n	8006780 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006774:	4b0a      	ldr	r3, [pc, #40]	@ (80067a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d0ef      	beq.n	8006760 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006780:	7bfb      	ldrb	r3, [r7, #15]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d106      	bne.n	8006794 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006786:	4b06      	ldr	r3, [pc, #24]	@ (80067a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006788:	691a      	ldr	r2, [r3, #16]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	4904      	ldr	r1, [pc, #16]	@ (80067a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006790:	4313      	orrs	r3, r2
 8006792:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006794:	7bfb      	ldrb	r3, [r7, #15]
}
 8006796:	4618      	mov	r0, r3
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	40021000 	.word	0x40021000

080067a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80067b2:	4b6a      	ldr	r3, [pc, #424]	@ (800695c <RCCEx_PLLSAI2_Config+0x1b8>)
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	f003 0303 	and.w	r3, r3, #3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d018      	beq.n	80067f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80067be:	4b67      	ldr	r3, [pc, #412]	@ (800695c <RCCEx_PLLSAI2_Config+0x1b8>)
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	f003 0203 	and.w	r2, r3, #3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d10d      	bne.n	80067ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
       ||
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d009      	beq.n	80067ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80067d6:	4b61      	ldr	r3, [pc, #388]	@ (800695c <RCCEx_PLLSAI2_Config+0x1b8>)
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	091b      	lsrs	r3, r3, #4
 80067dc:	f003 0307 	and.w	r3, r3, #7
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
       ||
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d047      	beq.n	800687a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	73fb      	strb	r3, [r7, #15]
 80067ee:	e044      	b.n	800687a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b03      	cmp	r3, #3
 80067f6:	d018      	beq.n	800682a <RCCEx_PLLSAI2_Config+0x86>
 80067f8:	2b03      	cmp	r3, #3
 80067fa:	d825      	bhi.n	8006848 <RCCEx_PLLSAI2_Config+0xa4>
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d002      	beq.n	8006806 <RCCEx_PLLSAI2_Config+0x62>
 8006800:	2b02      	cmp	r3, #2
 8006802:	d009      	beq.n	8006818 <RCCEx_PLLSAI2_Config+0x74>
 8006804:	e020      	b.n	8006848 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006806:	4b55      	ldr	r3, [pc, #340]	@ (800695c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d11d      	bne.n	800684e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006816:	e01a      	b.n	800684e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006818:	4b50      	ldr	r3, [pc, #320]	@ (800695c <RCCEx_PLLSAI2_Config+0x1b8>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006820:	2b00      	cmp	r3, #0
 8006822:	d116      	bne.n	8006852 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006828:	e013      	b.n	8006852 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800682a:	4b4c      	ldr	r3, [pc, #304]	@ (800695c <RCCEx_PLLSAI2_Config+0x1b8>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10f      	bne.n	8006856 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006836:	4b49      	ldr	r3, [pc, #292]	@ (800695c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d109      	bne.n	8006856 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006846:	e006      	b.n	8006856 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	73fb      	strb	r3, [r7, #15]
      break;
 800684c:	e004      	b.n	8006858 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800684e:	bf00      	nop
 8006850:	e002      	b.n	8006858 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006852:	bf00      	nop
 8006854:	e000      	b.n	8006858 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006856:	bf00      	nop
    }

    if(status == HAL_OK)
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10d      	bne.n	800687a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800685e:	4b3f      	ldr	r3, [pc, #252]	@ (800695c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6819      	ldr	r1, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	3b01      	subs	r3, #1
 8006870:	011b      	lsls	r3, r3, #4
 8006872:	430b      	orrs	r3, r1
 8006874:	4939      	ldr	r1, [pc, #228]	@ (800695c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006876:	4313      	orrs	r3, r2
 8006878:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800687a:	7bfb      	ldrb	r3, [r7, #15]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d167      	bne.n	8006950 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006880:	4b36      	ldr	r3, [pc, #216]	@ (800695c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a35      	ldr	r2, [pc, #212]	@ (800695c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006886:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800688a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800688c:	f7fc ff3a 	bl	8003704 <HAL_GetTick>
 8006890:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006892:	e009      	b.n	80068a8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006894:	f7fc ff36 	bl	8003704 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d902      	bls.n	80068a8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	73fb      	strb	r3, [r7, #15]
        break;
 80068a6:	e005      	b.n	80068b4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80068a8:	4b2c      	ldr	r3, [pc, #176]	@ (800695c <RCCEx_PLLSAI2_Config+0x1b8>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1ef      	bne.n	8006894 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80068b4:	7bfb      	ldrb	r3, [r7, #15]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d14a      	bne.n	8006950 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d111      	bne.n	80068e4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80068c0:	4b26      	ldr	r3, [pc, #152]	@ (800695c <RCCEx_PLLSAI2_Config+0x1b8>)
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80068c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	6892      	ldr	r2, [r2, #8]
 80068d0:	0211      	lsls	r1, r2, #8
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	68d2      	ldr	r2, [r2, #12]
 80068d6:	0912      	lsrs	r2, r2, #4
 80068d8:	0452      	lsls	r2, r2, #17
 80068da:	430a      	orrs	r2, r1
 80068dc:	491f      	ldr	r1, [pc, #124]	@ (800695c <RCCEx_PLLSAI2_Config+0x1b8>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	614b      	str	r3, [r1, #20]
 80068e2:	e011      	b.n	8006908 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80068e4:	4b1d      	ldr	r3, [pc, #116]	@ (800695c <RCCEx_PLLSAI2_Config+0x1b8>)
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80068ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	6892      	ldr	r2, [r2, #8]
 80068f4:	0211      	lsls	r1, r2, #8
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	6912      	ldr	r2, [r2, #16]
 80068fa:	0852      	lsrs	r2, r2, #1
 80068fc:	3a01      	subs	r2, #1
 80068fe:	0652      	lsls	r2, r2, #25
 8006900:	430a      	orrs	r2, r1
 8006902:	4916      	ldr	r1, [pc, #88]	@ (800695c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006904:	4313      	orrs	r3, r2
 8006906:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006908:	4b14      	ldr	r3, [pc, #80]	@ (800695c <RCCEx_PLLSAI2_Config+0x1b8>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a13      	ldr	r2, [pc, #76]	@ (800695c <RCCEx_PLLSAI2_Config+0x1b8>)
 800690e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006912:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006914:	f7fc fef6 	bl	8003704 <HAL_GetTick>
 8006918:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800691a:	e009      	b.n	8006930 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800691c:	f7fc fef2 	bl	8003704 <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	2b02      	cmp	r3, #2
 8006928:	d902      	bls.n	8006930 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	73fb      	strb	r3, [r7, #15]
          break;
 800692e:	e005      	b.n	800693c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006930:	4b0a      	ldr	r3, [pc, #40]	@ (800695c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d0ef      	beq.n	800691c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800693c:	7bfb      	ldrb	r3, [r7, #15]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d106      	bne.n	8006950 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006942:	4b06      	ldr	r3, [pc, #24]	@ (800695c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006944:	695a      	ldr	r2, [r3, #20]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	4904      	ldr	r1, [pc, #16]	@ (800695c <RCCEx_PLLSAI2_Config+0x1b8>)
 800694c:	4313      	orrs	r3, r2
 800694e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006950:	7bfb      	ldrb	r3, [r7, #15]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	40021000 	.word	0x40021000

08006960 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e095      	b.n	8006a9e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006976:	2b00      	cmp	r3, #0
 8006978:	d108      	bne.n	800698c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006982:	d009      	beq.n	8006998 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	61da      	str	r2, [r3, #28]
 800698a:	e005      	b.n	8006998 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d106      	bne.n	80069b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f877 	bl	8006aa6 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80069d8:	d902      	bls.n	80069e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80069da:	2300      	movs	r3, #0
 80069dc:	60fb      	str	r3, [r7, #12]
 80069de:	e002      	b.n	80069e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80069e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80069e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80069ee:	d007      	beq.n	8006a00 <HAL_SPI_Init+0xa0>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80069f8:	d002      	beq.n	8006a00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006a10:	431a      	orrs	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	f003 0301 	and.w	r3, r3, #1
 8006a24:	431a      	orrs	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	69db      	ldr	r3, [r3, #28]
 8006a34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a38:	431a      	orrs	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a42:	ea42 0103 	orr.w	r1, r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a4a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	0c1b      	lsrs	r3, r3, #16
 8006a5c:	f003 0204 	and.w	r2, r3, #4
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a64:	f003 0310 	and.w	r3, r3, #16
 8006a68:	431a      	orrs	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a6e:	f003 0308 	and.w	r3, r3, #8
 8006a72:	431a      	orrs	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006a7c:	ea42 0103 	orr.w	r1, r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b083      	sub	sp, #12
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006aae:	bf00      	nop
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b08a      	sub	sp, #40	@ 0x28
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	60f8      	str	r0, [r7, #12]
 8006ac2:	60b9      	str	r1, [r7, #8]
 8006ac4:	607a      	str	r2, [r7, #4]
 8006ac6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006acc:	f7fc fe1a 	bl	8003704 <HAL_GetTick>
 8006ad0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006ad8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006ae0:	887b      	ldrh	r3, [r7, #2]
 8006ae2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006ae4:	887b      	ldrh	r3, [r7, #2]
 8006ae6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ae8:	7ffb      	ldrb	r3, [r7, #31]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d00c      	beq.n	8006b08 <HAL_SPI_TransmitReceive+0x4e>
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006af4:	d106      	bne.n	8006b04 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d102      	bne.n	8006b04 <HAL_SPI_TransmitReceive+0x4a>
 8006afe:	7ffb      	ldrb	r3, [r7, #31]
 8006b00:	2b04      	cmp	r3, #4
 8006b02:	d001      	beq.n	8006b08 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006b04:	2302      	movs	r3, #2
 8006b06:	e1f3      	b.n	8006ef0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d005      	beq.n	8006b1a <HAL_SPI_TransmitReceive+0x60>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d002      	beq.n	8006b1a <HAL_SPI_TransmitReceive+0x60>
 8006b14:	887b      	ldrh	r3, [r7, #2]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e1e8      	b.n	8006ef0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d101      	bne.n	8006b2c <HAL_SPI_TransmitReceive+0x72>
 8006b28:	2302      	movs	r3, #2
 8006b2a:	e1e1      	b.n	8006ef0 <HAL_SPI_TransmitReceive+0x436>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b04      	cmp	r3, #4
 8006b3e:	d003      	beq.n	8006b48 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2205      	movs	r2, #5
 8006b44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	887a      	ldrh	r2, [r7, #2]
 8006b58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	887a      	ldrh	r2, [r7, #2]
 8006b60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	887a      	ldrh	r2, [r7, #2]
 8006b6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	887a      	ldrh	r2, [r7, #2]
 8006b74:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b8a:	d802      	bhi.n	8006b92 <HAL_SPI_TransmitReceive+0xd8>
 8006b8c:	8abb      	ldrh	r3, [r7, #20]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d908      	bls.n	8006ba4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006ba0:	605a      	str	r2, [r3, #4]
 8006ba2:	e007      	b.n	8006bb4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006bb2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bbe:	2b40      	cmp	r3, #64	@ 0x40
 8006bc0:	d007      	beq.n	8006bd2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006bda:	f240 8083 	bls.w	8006ce4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d002      	beq.n	8006bec <HAL_SPI_TransmitReceive+0x132>
 8006be6:	8afb      	ldrh	r3, [r7, #22]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d16f      	bne.n	8006ccc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bf0:	881a      	ldrh	r2, [r3, #0]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bfc:	1c9a      	adds	r2, r3, #2
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c10:	e05c      	b.n	8006ccc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d11b      	bne.n	8006c58 <HAL_SPI_TransmitReceive+0x19e>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d016      	beq.n	8006c58 <HAL_SPI_TransmitReceive+0x19e>
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d113      	bne.n	8006c58 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c34:	881a      	ldrh	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c40:	1c9a      	adds	r2, r3, #2
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d11c      	bne.n	8006ca0 <HAL_SPI_TransmitReceive+0x1e6>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d016      	beq.n	8006ca0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68da      	ldr	r2, [r3, #12]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7c:	b292      	uxth	r2, r2
 8006c7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c84:	1c9a      	adds	r2, r3, #2
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	3b01      	subs	r3, #1
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ca0:	f7fc fd30 	bl	8003704 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d80d      	bhi.n	8006ccc <HAL_SPI_TransmitReceive+0x212>
 8006cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb6:	d009      	beq.n	8006ccc <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e111      	b.n	8006ef0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d19d      	bne.n	8006c12 <HAL_SPI_TransmitReceive+0x158>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d197      	bne.n	8006c12 <HAL_SPI_TransmitReceive+0x158>
 8006ce2:	e0e5      	b.n	8006eb0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d003      	beq.n	8006cf4 <HAL_SPI_TransmitReceive+0x23a>
 8006cec:	8afb      	ldrh	r3, [r7, #22]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	f040 80d1 	bne.w	8006e96 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d912      	bls.n	8006d24 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d02:	881a      	ldrh	r2, [r3, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d0e:	1c9a      	adds	r2, r3, #2
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	3b02      	subs	r3, #2
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006d22:	e0b8      	b.n	8006e96 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	330c      	adds	r3, #12
 8006d2e:	7812      	ldrb	r2, [r2, #0]
 8006d30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d36:	1c5a      	adds	r2, r3, #1
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	3b01      	subs	r3, #1
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d4a:	e0a4      	b.n	8006e96 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d134      	bne.n	8006dc4 <HAL_SPI_TransmitReceive+0x30a>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d02f      	beq.n	8006dc4 <HAL_SPI_TransmitReceive+0x30a>
 8006d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d12c      	bne.n	8006dc4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d912      	bls.n	8006d9a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d78:	881a      	ldrh	r2, [r3, #0]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d84:	1c9a      	adds	r2, r3, #2
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	3b02      	subs	r3, #2
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006d98:	e012      	b.n	8006dc0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	330c      	adds	r3, #12
 8006da4:	7812      	ldrb	r2, [r2, #0]
 8006da6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dac:	1c5a      	adds	r2, r3, #1
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d148      	bne.n	8006e64 <HAL_SPI_TransmitReceive+0x3aa>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d042      	beq.n	8006e64 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d923      	bls.n	8006e32 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68da      	ldr	r2, [r3, #12]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df4:	b292      	uxth	r2, r2
 8006df6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dfc:	1c9a      	adds	r2, r3, #2
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	3b02      	subs	r3, #2
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d81f      	bhi.n	8006e60 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e2e:	605a      	str	r2, [r3, #4]
 8006e30:	e016      	b.n	8006e60 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f103 020c 	add.w	r2, r3, #12
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e3e:	7812      	ldrb	r2, [r2, #0]
 8006e40:	b2d2      	uxtb	r2, r2
 8006e42:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e48:	1c5a      	adds	r2, r3, #1
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	3b01      	subs	r3, #1
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e60:	2301      	movs	r3, #1
 8006e62:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e64:	f7fc fc4e 	bl	8003704 <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	6a3b      	ldr	r3, [r7, #32]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d803      	bhi.n	8006e7c <HAL_SPI_TransmitReceive+0x3c2>
 8006e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7a:	d102      	bne.n	8006e82 <HAL_SPI_TransmitReceive+0x3c8>
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d109      	bne.n	8006e96 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e02c      	b.n	8006ef0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f47f af55 	bne.w	8006d4c <HAL_SPI_TransmitReceive+0x292>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f47f af4e 	bne.w	8006d4c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006eb0:	6a3a      	ldr	r2, [r7, #32]
 8006eb2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 f94b 	bl	8007150 <SPI_EndRxTxTransaction>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d008      	beq.n	8006ed2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e00e      	b.n	8006ef0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d001      	beq.n	8006eee <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e000      	b.n	8006ef0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006eee:	2300      	movs	r3, #0
  }
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3728      	adds	r7, #40	@ 0x28
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f06:	b2db      	uxtb	r3, r3
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b088      	sub	sp, #32
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	603b      	str	r3, [r7, #0]
 8006f20:	4613      	mov	r3, r2
 8006f22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f24:	f7fc fbee 	bl	8003704 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f2c:	1a9b      	subs	r3, r3, r2
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	4413      	add	r3, r2
 8006f32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f34:	f7fc fbe6 	bl	8003704 <HAL_GetTick>
 8006f38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f3a:	4b39      	ldr	r3, [pc, #228]	@ (8007020 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	015b      	lsls	r3, r3, #5
 8006f40:	0d1b      	lsrs	r3, r3, #20
 8006f42:	69fa      	ldr	r2, [r7, #28]
 8006f44:	fb02 f303 	mul.w	r3, r2, r3
 8006f48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f4a:	e054      	b.n	8006ff6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f52:	d050      	beq.n	8006ff6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f54:	f7fc fbd6 	bl	8003704 <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	69fa      	ldr	r2, [r7, #28]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d902      	bls.n	8006f6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d13d      	bne.n	8006fe6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f82:	d111      	bne.n	8006fa8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f8c:	d004      	beq.n	8006f98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f96:	d107      	bne.n	8006fa8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fa6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fb0:	d10f      	bne.n	8006fd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006fc0:	601a      	str	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006fd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e017      	b.n	8007016 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	689a      	ldr	r2, [r3, #8]
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	4013      	ands	r3, r2
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	429a      	cmp	r2, r3
 8007004:	bf0c      	ite	eq
 8007006:	2301      	moveq	r3, #1
 8007008:	2300      	movne	r3, #0
 800700a:	b2db      	uxtb	r3, r3
 800700c:	461a      	mov	r2, r3
 800700e:	79fb      	ldrb	r3, [r7, #7]
 8007010:	429a      	cmp	r2, r3
 8007012:	d19b      	bne.n	8006f4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3720      	adds	r7, #32
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	20000008 	.word	0x20000008

08007024 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b08a      	sub	sp, #40	@ 0x28
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
 8007030:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007032:	2300      	movs	r3, #0
 8007034:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007036:	f7fc fb65 	bl	8003704 <HAL_GetTick>
 800703a:	4602      	mov	r2, r0
 800703c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703e:	1a9b      	subs	r3, r3, r2
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	4413      	add	r3, r2
 8007044:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007046:	f7fc fb5d 	bl	8003704 <HAL_GetTick>
 800704a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	330c      	adds	r3, #12
 8007052:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007054:	4b3d      	ldr	r3, [pc, #244]	@ (800714c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	4613      	mov	r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4413      	add	r3, r2
 800705e:	00da      	lsls	r2, r3, #3
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	0d1b      	lsrs	r3, r3, #20
 8007064:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007066:	fb02 f303 	mul.w	r3, r2, r3
 800706a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800706c:	e060      	b.n	8007130 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007074:	d107      	bne.n	8007086 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d104      	bne.n	8007086 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	b2db      	uxtb	r3, r3
 8007082:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007084:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708c:	d050      	beq.n	8007130 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800708e:	f7fc fb39 	bl	8003704 <HAL_GetTick>
 8007092:	4602      	mov	r2, r0
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800709a:	429a      	cmp	r2, r3
 800709c:	d902      	bls.n	80070a4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800709e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d13d      	bne.n	8007120 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80070b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070bc:	d111      	bne.n	80070e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070c6:	d004      	beq.n	80070d2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070d0:	d107      	bne.n	80070e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070ea:	d10f      	bne.n	800710c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800710a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	e010      	b.n	8007142 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007126:	2300      	movs	r3, #0
 8007128:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	3b01      	subs	r3, #1
 800712e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	689a      	ldr	r2, [r3, #8]
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	4013      	ands	r3, r2
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	429a      	cmp	r2, r3
 800713e:	d196      	bne.n	800706e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3728      	adds	r7, #40	@ 0x28
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	20000008 	.word	0x20000008

08007150 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af02      	add	r7, sp, #8
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	2200      	movs	r2, #0
 8007164:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f7ff ff5b 	bl	8007024 <SPI_WaitFifoStateUntilTimeout>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d007      	beq.n	8007184 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007178:	f043 0220 	orr.w	r2, r3, #32
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e027      	b.n	80071d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2200      	movs	r2, #0
 800718c:	2180      	movs	r1, #128	@ 0x80
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f7ff fec0 	bl	8006f14 <SPI_WaitFlagStateUntilTimeout>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d007      	beq.n	80071aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800719e:	f043 0220 	orr.w	r2, r3, #32
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e014      	b.n	80071d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f7ff ff34 	bl	8007024 <SPI_WaitFifoStateUntilTimeout>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d007      	beq.n	80071d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071c6:	f043 0220 	orr.w	r2, r3, #32
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e000      	b.n	80071d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e040      	b.n	8007270 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d106      	bne.n	8007204 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f7fb fa28 	bl	8002654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2224      	movs	r2, #36	@ 0x24
 8007208:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f022 0201 	bic.w	r2, r2, #1
 8007218:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721e:	2b00      	cmp	r3, #0
 8007220:	d002      	beq.n	8007228 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fb6a 	bl	80078fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f8af 	bl	800738c <UART_SetConfig>
 800722e:	4603      	mov	r3, r0
 8007230:	2b01      	cmp	r3, #1
 8007232:	d101      	bne.n	8007238 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e01b      	b.n	8007270 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007246:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	689a      	ldr	r2, [r3, #8]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007256:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f042 0201 	orr.w	r2, r2, #1
 8007266:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fbe9 	bl	8007a40 <UART_CheckIdleState>
 800726e:	4603      	mov	r3, r0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b08a      	sub	sp, #40	@ 0x28
 800727c:	af02      	add	r7, sp, #8
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	603b      	str	r3, [r7, #0]
 8007284:	4613      	mov	r3, r2
 8007286:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800728c:	2b20      	cmp	r3, #32
 800728e:	d177      	bne.n	8007380 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <HAL_UART_Transmit+0x24>
 8007296:	88fb      	ldrh	r3, [r7, #6]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d101      	bne.n	80072a0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e070      	b.n	8007382 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2221      	movs	r2, #33	@ 0x21
 80072ac:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072ae:	f7fc fa29 	bl	8003704 <HAL_GetTick>
 80072b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	88fa      	ldrh	r2, [r7, #6]
 80072b8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	88fa      	ldrh	r2, [r7, #6]
 80072c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072cc:	d108      	bne.n	80072e0 <HAL_UART_Transmit+0x68>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d104      	bne.n	80072e0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80072d6:	2300      	movs	r3, #0
 80072d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	61bb      	str	r3, [r7, #24]
 80072de:	e003      	b.n	80072e8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072e4:	2300      	movs	r3, #0
 80072e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072e8:	e02f      	b.n	800734a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2200      	movs	r2, #0
 80072f2:	2180      	movs	r1, #128	@ 0x80
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 fc4b 	bl	8007b90 <UART_WaitOnFlagUntilTimeout>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d004      	beq.n	800730a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2220      	movs	r2, #32
 8007304:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e03b      	b.n	8007382 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10b      	bne.n	8007328 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	881a      	ldrh	r2, [r3, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800731c:	b292      	uxth	r2, r2
 800731e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	3302      	adds	r3, #2
 8007324:	61bb      	str	r3, [r7, #24]
 8007326:	e007      	b.n	8007338 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	781a      	ldrb	r2, [r3, #0]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	3301      	adds	r3, #1
 8007336:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800733e:	b29b      	uxth	r3, r3
 8007340:	3b01      	subs	r3, #1
 8007342:	b29a      	uxth	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007350:	b29b      	uxth	r3, r3
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1c9      	bne.n	80072ea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	2200      	movs	r2, #0
 800735e:	2140      	movs	r1, #64	@ 0x40
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f000 fc15 	bl	8007b90 <UART_WaitOnFlagUntilTimeout>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d004      	beq.n	8007376 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2220      	movs	r2, #32
 8007370:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007372:	2303      	movs	r3, #3
 8007374:	e005      	b.n	8007382 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2220      	movs	r2, #32
 800737a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800737c:	2300      	movs	r3, #0
 800737e:	e000      	b.n	8007382 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007380:	2302      	movs	r3, #2
  }
}
 8007382:	4618      	mov	r0, r3
 8007384:	3720      	adds	r7, #32
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
	...

0800738c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800738c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007390:	b08a      	sub	sp, #40	@ 0x28
 8007392:	af00      	add	r7, sp, #0
 8007394:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007396:	2300      	movs	r3, #0
 8007398:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	431a      	orrs	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	431a      	orrs	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	4ba4      	ldr	r3, [pc, #656]	@ (800764c <UART_SetConfig+0x2c0>)
 80073bc:	4013      	ands	r3, r2
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	6812      	ldr	r2, [r2, #0]
 80073c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80073c4:	430b      	orrs	r3, r1
 80073c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a99      	ldr	r2, [pc, #612]	@ (8007650 <UART_SetConfig+0x2c4>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d004      	beq.n	80073f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073f4:	4313      	orrs	r3, r2
 80073f6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007408:	430a      	orrs	r2, r1
 800740a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a90      	ldr	r2, [pc, #576]	@ (8007654 <UART_SetConfig+0x2c8>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d126      	bne.n	8007464 <UART_SetConfig+0xd8>
 8007416:	4b90      	ldr	r3, [pc, #576]	@ (8007658 <UART_SetConfig+0x2cc>)
 8007418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800741c:	f003 0303 	and.w	r3, r3, #3
 8007420:	2b03      	cmp	r3, #3
 8007422:	d81b      	bhi.n	800745c <UART_SetConfig+0xd0>
 8007424:	a201      	add	r2, pc, #4	@ (adr r2, 800742c <UART_SetConfig+0xa0>)
 8007426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742a:	bf00      	nop
 800742c:	0800743d 	.word	0x0800743d
 8007430:	0800744d 	.word	0x0800744d
 8007434:	08007445 	.word	0x08007445
 8007438:	08007455 	.word	0x08007455
 800743c:	2301      	movs	r3, #1
 800743e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007442:	e116      	b.n	8007672 <UART_SetConfig+0x2e6>
 8007444:	2302      	movs	r3, #2
 8007446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800744a:	e112      	b.n	8007672 <UART_SetConfig+0x2e6>
 800744c:	2304      	movs	r3, #4
 800744e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007452:	e10e      	b.n	8007672 <UART_SetConfig+0x2e6>
 8007454:	2308      	movs	r3, #8
 8007456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800745a:	e10a      	b.n	8007672 <UART_SetConfig+0x2e6>
 800745c:	2310      	movs	r3, #16
 800745e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007462:	e106      	b.n	8007672 <UART_SetConfig+0x2e6>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a7c      	ldr	r2, [pc, #496]	@ (800765c <UART_SetConfig+0x2d0>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d138      	bne.n	80074e0 <UART_SetConfig+0x154>
 800746e:	4b7a      	ldr	r3, [pc, #488]	@ (8007658 <UART_SetConfig+0x2cc>)
 8007470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007474:	f003 030c 	and.w	r3, r3, #12
 8007478:	2b0c      	cmp	r3, #12
 800747a:	d82d      	bhi.n	80074d8 <UART_SetConfig+0x14c>
 800747c:	a201      	add	r2, pc, #4	@ (adr r2, 8007484 <UART_SetConfig+0xf8>)
 800747e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007482:	bf00      	nop
 8007484:	080074b9 	.word	0x080074b9
 8007488:	080074d9 	.word	0x080074d9
 800748c:	080074d9 	.word	0x080074d9
 8007490:	080074d9 	.word	0x080074d9
 8007494:	080074c9 	.word	0x080074c9
 8007498:	080074d9 	.word	0x080074d9
 800749c:	080074d9 	.word	0x080074d9
 80074a0:	080074d9 	.word	0x080074d9
 80074a4:	080074c1 	.word	0x080074c1
 80074a8:	080074d9 	.word	0x080074d9
 80074ac:	080074d9 	.word	0x080074d9
 80074b0:	080074d9 	.word	0x080074d9
 80074b4:	080074d1 	.word	0x080074d1
 80074b8:	2300      	movs	r3, #0
 80074ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074be:	e0d8      	b.n	8007672 <UART_SetConfig+0x2e6>
 80074c0:	2302      	movs	r3, #2
 80074c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074c6:	e0d4      	b.n	8007672 <UART_SetConfig+0x2e6>
 80074c8:	2304      	movs	r3, #4
 80074ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074ce:	e0d0      	b.n	8007672 <UART_SetConfig+0x2e6>
 80074d0:	2308      	movs	r3, #8
 80074d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074d6:	e0cc      	b.n	8007672 <UART_SetConfig+0x2e6>
 80074d8:	2310      	movs	r3, #16
 80074da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074de:	e0c8      	b.n	8007672 <UART_SetConfig+0x2e6>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a5e      	ldr	r2, [pc, #376]	@ (8007660 <UART_SetConfig+0x2d4>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d125      	bne.n	8007536 <UART_SetConfig+0x1aa>
 80074ea:	4b5b      	ldr	r3, [pc, #364]	@ (8007658 <UART_SetConfig+0x2cc>)
 80074ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80074f4:	2b30      	cmp	r3, #48	@ 0x30
 80074f6:	d016      	beq.n	8007526 <UART_SetConfig+0x19a>
 80074f8:	2b30      	cmp	r3, #48	@ 0x30
 80074fa:	d818      	bhi.n	800752e <UART_SetConfig+0x1a2>
 80074fc:	2b20      	cmp	r3, #32
 80074fe:	d00a      	beq.n	8007516 <UART_SetConfig+0x18a>
 8007500:	2b20      	cmp	r3, #32
 8007502:	d814      	bhi.n	800752e <UART_SetConfig+0x1a2>
 8007504:	2b00      	cmp	r3, #0
 8007506:	d002      	beq.n	800750e <UART_SetConfig+0x182>
 8007508:	2b10      	cmp	r3, #16
 800750a:	d008      	beq.n	800751e <UART_SetConfig+0x192>
 800750c:	e00f      	b.n	800752e <UART_SetConfig+0x1a2>
 800750e:	2300      	movs	r3, #0
 8007510:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007514:	e0ad      	b.n	8007672 <UART_SetConfig+0x2e6>
 8007516:	2302      	movs	r3, #2
 8007518:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800751c:	e0a9      	b.n	8007672 <UART_SetConfig+0x2e6>
 800751e:	2304      	movs	r3, #4
 8007520:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007524:	e0a5      	b.n	8007672 <UART_SetConfig+0x2e6>
 8007526:	2308      	movs	r3, #8
 8007528:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800752c:	e0a1      	b.n	8007672 <UART_SetConfig+0x2e6>
 800752e:	2310      	movs	r3, #16
 8007530:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007534:	e09d      	b.n	8007672 <UART_SetConfig+0x2e6>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a4a      	ldr	r2, [pc, #296]	@ (8007664 <UART_SetConfig+0x2d8>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d125      	bne.n	800758c <UART_SetConfig+0x200>
 8007540:	4b45      	ldr	r3, [pc, #276]	@ (8007658 <UART_SetConfig+0x2cc>)
 8007542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007546:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800754a:	2bc0      	cmp	r3, #192	@ 0xc0
 800754c:	d016      	beq.n	800757c <UART_SetConfig+0x1f0>
 800754e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007550:	d818      	bhi.n	8007584 <UART_SetConfig+0x1f8>
 8007552:	2b80      	cmp	r3, #128	@ 0x80
 8007554:	d00a      	beq.n	800756c <UART_SetConfig+0x1e0>
 8007556:	2b80      	cmp	r3, #128	@ 0x80
 8007558:	d814      	bhi.n	8007584 <UART_SetConfig+0x1f8>
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <UART_SetConfig+0x1d8>
 800755e:	2b40      	cmp	r3, #64	@ 0x40
 8007560:	d008      	beq.n	8007574 <UART_SetConfig+0x1e8>
 8007562:	e00f      	b.n	8007584 <UART_SetConfig+0x1f8>
 8007564:	2300      	movs	r3, #0
 8007566:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800756a:	e082      	b.n	8007672 <UART_SetConfig+0x2e6>
 800756c:	2302      	movs	r3, #2
 800756e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007572:	e07e      	b.n	8007672 <UART_SetConfig+0x2e6>
 8007574:	2304      	movs	r3, #4
 8007576:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800757a:	e07a      	b.n	8007672 <UART_SetConfig+0x2e6>
 800757c:	2308      	movs	r3, #8
 800757e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007582:	e076      	b.n	8007672 <UART_SetConfig+0x2e6>
 8007584:	2310      	movs	r3, #16
 8007586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800758a:	e072      	b.n	8007672 <UART_SetConfig+0x2e6>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a35      	ldr	r2, [pc, #212]	@ (8007668 <UART_SetConfig+0x2dc>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d12a      	bne.n	80075ec <UART_SetConfig+0x260>
 8007596:	4b30      	ldr	r3, [pc, #192]	@ (8007658 <UART_SetConfig+0x2cc>)
 8007598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800759c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075a4:	d01a      	beq.n	80075dc <UART_SetConfig+0x250>
 80075a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075aa:	d81b      	bhi.n	80075e4 <UART_SetConfig+0x258>
 80075ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075b0:	d00c      	beq.n	80075cc <UART_SetConfig+0x240>
 80075b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075b6:	d815      	bhi.n	80075e4 <UART_SetConfig+0x258>
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d003      	beq.n	80075c4 <UART_SetConfig+0x238>
 80075bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075c0:	d008      	beq.n	80075d4 <UART_SetConfig+0x248>
 80075c2:	e00f      	b.n	80075e4 <UART_SetConfig+0x258>
 80075c4:	2300      	movs	r3, #0
 80075c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075ca:	e052      	b.n	8007672 <UART_SetConfig+0x2e6>
 80075cc:	2302      	movs	r3, #2
 80075ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075d2:	e04e      	b.n	8007672 <UART_SetConfig+0x2e6>
 80075d4:	2304      	movs	r3, #4
 80075d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075da:	e04a      	b.n	8007672 <UART_SetConfig+0x2e6>
 80075dc:	2308      	movs	r3, #8
 80075de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075e2:	e046      	b.n	8007672 <UART_SetConfig+0x2e6>
 80075e4:	2310      	movs	r3, #16
 80075e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075ea:	e042      	b.n	8007672 <UART_SetConfig+0x2e6>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a17      	ldr	r2, [pc, #92]	@ (8007650 <UART_SetConfig+0x2c4>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d13a      	bne.n	800766c <UART_SetConfig+0x2e0>
 80075f6:	4b18      	ldr	r3, [pc, #96]	@ (8007658 <UART_SetConfig+0x2cc>)
 80075f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007600:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007604:	d01a      	beq.n	800763c <UART_SetConfig+0x2b0>
 8007606:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800760a:	d81b      	bhi.n	8007644 <UART_SetConfig+0x2b8>
 800760c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007610:	d00c      	beq.n	800762c <UART_SetConfig+0x2a0>
 8007612:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007616:	d815      	bhi.n	8007644 <UART_SetConfig+0x2b8>
 8007618:	2b00      	cmp	r3, #0
 800761a:	d003      	beq.n	8007624 <UART_SetConfig+0x298>
 800761c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007620:	d008      	beq.n	8007634 <UART_SetConfig+0x2a8>
 8007622:	e00f      	b.n	8007644 <UART_SetConfig+0x2b8>
 8007624:	2300      	movs	r3, #0
 8007626:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800762a:	e022      	b.n	8007672 <UART_SetConfig+0x2e6>
 800762c:	2302      	movs	r3, #2
 800762e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007632:	e01e      	b.n	8007672 <UART_SetConfig+0x2e6>
 8007634:	2304      	movs	r3, #4
 8007636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800763a:	e01a      	b.n	8007672 <UART_SetConfig+0x2e6>
 800763c:	2308      	movs	r3, #8
 800763e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007642:	e016      	b.n	8007672 <UART_SetConfig+0x2e6>
 8007644:	2310      	movs	r3, #16
 8007646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800764a:	e012      	b.n	8007672 <UART_SetConfig+0x2e6>
 800764c:	efff69f3 	.word	0xefff69f3
 8007650:	40008000 	.word	0x40008000
 8007654:	40013800 	.word	0x40013800
 8007658:	40021000 	.word	0x40021000
 800765c:	40004400 	.word	0x40004400
 8007660:	40004800 	.word	0x40004800
 8007664:	40004c00 	.word	0x40004c00
 8007668:	40005000 	.word	0x40005000
 800766c:	2310      	movs	r3, #16
 800766e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a9f      	ldr	r2, [pc, #636]	@ (80078f4 <UART_SetConfig+0x568>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d17a      	bne.n	8007772 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800767c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007680:	2b08      	cmp	r3, #8
 8007682:	d824      	bhi.n	80076ce <UART_SetConfig+0x342>
 8007684:	a201      	add	r2, pc, #4	@ (adr r2, 800768c <UART_SetConfig+0x300>)
 8007686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768a:	bf00      	nop
 800768c:	080076b1 	.word	0x080076b1
 8007690:	080076cf 	.word	0x080076cf
 8007694:	080076b9 	.word	0x080076b9
 8007698:	080076cf 	.word	0x080076cf
 800769c:	080076bf 	.word	0x080076bf
 80076a0:	080076cf 	.word	0x080076cf
 80076a4:	080076cf 	.word	0x080076cf
 80076a8:	080076cf 	.word	0x080076cf
 80076ac:	080076c7 	.word	0x080076c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076b0:	f7fe fbfe 	bl	8005eb0 <HAL_RCC_GetPCLK1Freq>
 80076b4:	61f8      	str	r0, [r7, #28]
        break;
 80076b6:	e010      	b.n	80076da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076b8:	4b8f      	ldr	r3, [pc, #572]	@ (80078f8 <UART_SetConfig+0x56c>)
 80076ba:	61fb      	str	r3, [r7, #28]
        break;
 80076bc:	e00d      	b.n	80076da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076be:	f7fe fb5f 	bl	8005d80 <HAL_RCC_GetSysClockFreq>
 80076c2:	61f8      	str	r0, [r7, #28]
        break;
 80076c4:	e009      	b.n	80076da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076ca:	61fb      	str	r3, [r7, #28]
        break;
 80076cc:	e005      	b.n	80076da <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80076d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 80fb 	beq.w	80078d8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	685a      	ldr	r2, [r3, #4]
 80076e6:	4613      	mov	r3, r2
 80076e8:	005b      	lsls	r3, r3, #1
 80076ea:	4413      	add	r3, r2
 80076ec:	69fa      	ldr	r2, [r7, #28]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d305      	bcc.n	80076fe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076f8:	69fa      	ldr	r2, [r7, #28]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d903      	bls.n	8007706 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007704:	e0e8      	b.n	80078d8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	2200      	movs	r2, #0
 800770a:	461c      	mov	r4, r3
 800770c:	4615      	mov	r5, r2
 800770e:	f04f 0200 	mov.w	r2, #0
 8007712:	f04f 0300 	mov.w	r3, #0
 8007716:	022b      	lsls	r3, r5, #8
 8007718:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800771c:	0222      	lsls	r2, r4, #8
 800771e:	68f9      	ldr	r1, [r7, #12]
 8007720:	6849      	ldr	r1, [r1, #4]
 8007722:	0849      	lsrs	r1, r1, #1
 8007724:	2000      	movs	r0, #0
 8007726:	4688      	mov	r8, r1
 8007728:	4681      	mov	r9, r0
 800772a:	eb12 0a08 	adds.w	sl, r2, r8
 800772e:	eb43 0b09 	adc.w	fp, r3, r9
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	603b      	str	r3, [r7, #0]
 800773a:	607a      	str	r2, [r7, #4]
 800773c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007740:	4650      	mov	r0, sl
 8007742:	4659      	mov	r1, fp
 8007744:	f7f9 faa0 	bl	8000c88 <__aeabi_uldivmod>
 8007748:	4602      	mov	r2, r0
 800774a:	460b      	mov	r3, r1
 800774c:	4613      	mov	r3, r2
 800774e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007756:	d308      	bcc.n	800776a <UART_SetConfig+0x3de>
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800775e:	d204      	bcs.n	800776a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	69ba      	ldr	r2, [r7, #24]
 8007766:	60da      	str	r2, [r3, #12]
 8007768:	e0b6      	b.n	80078d8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007770:	e0b2      	b.n	80078d8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	69db      	ldr	r3, [r3, #28]
 8007776:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800777a:	d15e      	bne.n	800783a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800777c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007780:	2b08      	cmp	r3, #8
 8007782:	d828      	bhi.n	80077d6 <UART_SetConfig+0x44a>
 8007784:	a201      	add	r2, pc, #4	@ (adr r2, 800778c <UART_SetConfig+0x400>)
 8007786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778a:	bf00      	nop
 800778c:	080077b1 	.word	0x080077b1
 8007790:	080077b9 	.word	0x080077b9
 8007794:	080077c1 	.word	0x080077c1
 8007798:	080077d7 	.word	0x080077d7
 800779c:	080077c7 	.word	0x080077c7
 80077a0:	080077d7 	.word	0x080077d7
 80077a4:	080077d7 	.word	0x080077d7
 80077a8:	080077d7 	.word	0x080077d7
 80077ac:	080077cf 	.word	0x080077cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077b0:	f7fe fb7e 	bl	8005eb0 <HAL_RCC_GetPCLK1Freq>
 80077b4:	61f8      	str	r0, [r7, #28]
        break;
 80077b6:	e014      	b.n	80077e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077b8:	f7fe fb90 	bl	8005edc <HAL_RCC_GetPCLK2Freq>
 80077bc:	61f8      	str	r0, [r7, #28]
        break;
 80077be:	e010      	b.n	80077e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077c0:	4b4d      	ldr	r3, [pc, #308]	@ (80078f8 <UART_SetConfig+0x56c>)
 80077c2:	61fb      	str	r3, [r7, #28]
        break;
 80077c4:	e00d      	b.n	80077e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077c6:	f7fe fadb 	bl	8005d80 <HAL_RCC_GetSysClockFreq>
 80077ca:	61f8      	str	r0, [r7, #28]
        break;
 80077cc:	e009      	b.n	80077e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077d2:	61fb      	str	r3, [r7, #28]
        break;
 80077d4:	e005      	b.n	80077e2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80077d6:	2300      	movs	r3, #0
 80077d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80077e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d077      	beq.n	80078d8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	005a      	lsls	r2, r3, #1
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	085b      	lsrs	r3, r3, #1
 80077f2:	441a      	add	r2, r3
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	2b0f      	cmp	r3, #15
 8007802:	d916      	bls.n	8007832 <UART_SetConfig+0x4a6>
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800780a:	d212      	bcs.n	8007832 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	b29b      	uxth	r3, r3
 8007810:	f023 030f 	bic.w	r3, r3, #15
 8007814:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	085b      	lsrs	r3, r3, #1
 800781a:	b29b      	uxth	r3, r3
 800781c:	f003 0307 	and.w	r3, r3, #7
 8007820:	b29a      	uxth	r2, r3
 8007822:	8afb      	ldrh	r3, [r7, #22]
 8007824:	4313      	orrs	r3, r2
 8007826:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	8afa      	ldrh	r2, [r7, #22]
 800782e:	60da      	str	r2, [r3, #12]
 8007830:	e052      	b.n	80078d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007838:	e04e      	b.n	80078d8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800783a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800783e:	2b08      	cmp	r3, #8
 8007840:	d827      	bhi.n	8007892 <UART_SetConfig+0x506>
 8007842:	a201      	add	r2, pc, #4	@ (adr r2, 8007848 <UART_SetConfig+0x4bc>)
 8007844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007848:	0800786d 	.word	0x0800786d
 800784c:	08007875 	.word	0x08007875
 8007850:	0800787d 	.word	0x0800787d
 8007854:	08007893 	.word	0x08007893
 8007858:	08007883 	.word	0x08007883
 800785c:	08007893 	.word	0x08007893
 8007860:	08007893 	.word	0x08007893
 8007864:	08007893 	.word	0x08007893
 8007868:	0800788b 	.word	0x0800788b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800786c:	f7fe fb20 	bl	8005eb0 <HAL_RCC_GetPCLK1Freq>
 8007870:	61f8      	str	r0, [r7, #28]
        break;
 8007872:	e014      	b.n	800789e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007874:	f7fe fb32 	bl	8005edc <HAL_RCC_GetPCLK2Freq>
 8007878:	61f8      	str	r0, [r7, #28]
        break;
 800787a:	e010      	b.n	800789e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800787c:	4b1e      	ldr	r3, [pc, #120]	@ (80078f8 <UART_SetConfig+0x56c>)
 800787e:	61fb      	str	r3, [r7, #28]
        break;
 8007880:	e00d      	b.n	800789e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007882:	f7fe fa7d 	bl	8005d80 <HAL_RCC_GetSysClockFreq>
 8007886:	61f8      	str	r0, [r7, #28]
        break;
 8007888:	e009      	b.n	800789e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800788a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800788e:	61fb      	str	r3, [r7, #28]
        break;
 8007890:	e005      	b.n	800789e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007892:	2300      	movs	r3, #0
 8007894:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800789c:	bf00      	nop
    }

    if (pclk != 0U)
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d019      	beq.n	80078d8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	085a      	lsrs	r2, r3, #1
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	441a      	add	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	2b0f      	cmp	r3, #15
 80078bc:	d909      	bls.n	80078d2 <UART_SetConfig+0x546>
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078c4:	d205      	bcs.n	80078d2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	60da      	str	r2, [r3, #12]
 80078d0:	e002      	b.n	80078d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80078e4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3728      	adds	r7, #40	@ 0x28
 80078ec:	46bd      	mov	sp, r7
 80078ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078f2:	bf00      	nop
 80078f4:	40008000 	.word	0x40008000
 80078f8:	00f42400 	.word	0x00f42400

080078fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007908:	f003 0308 	and.w	r3, r3, #8
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00a      	beq.n	8007926 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	430a      	orrs	r2, r1
 8007924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00a      	beq.n	8007948 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	430a      	orrs	r2, r1
 8007946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00a      	beq.n	800796a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	430a      	orrs	r2, r1
 8007968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800796e:	f003 0304 	and.w	r3, r3, #4
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00a      	beq.n	800798c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	430a      	orrs	r2, r1
 800798a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007990:	f003 0310 	and.w	r3, r3, #16
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00a      	beq.n	80079ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	430a      	orrs	r2, r1
 80079ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b2:	f003 0320 	and.w	r3, r3, #32
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00a      	beq.n	80079d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	430a      	orrs	r2, r1
 80079ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d01a      	beq.n	8007a12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079fa:	d10a      	bne.n	8007a12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	430a      	orrs	r2, r1
 8007a10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00a      	beq.n	8007a34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	430a      	orrs	r2, r1
 8007a32:	605a      	str	r2, [r3, #4]
  }
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b098      	sub	sp, #96	@ 0x60
 8007a44:	af02      	add	r7, sp, #8
 8007a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a50:	f7fb fe58 	bl	8003704 <HAL_GetTick>
 8007a54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0308 	and.w	r3, r3, #8
 8007a60:	2b08      	cmp	r3, #8
 8007a62:	d12e      	bne.n	8007ac2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f88c 	bl	8007b90 <UART_WaitOnFlagUntilTimeout>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d021      	beq.n	8007ac2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a86:	e853 3f00 	ldrex	r3, [r3]
 8007a8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a92:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	461a      	mov	r2, r3
 8007a9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a9e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007aa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007aa4:	e841 2300 	strex	r3, r2, [r1]
 8007aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1e6      	bne.n	8007a7e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e062      	b.n	8007b88 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0304 	and.w	r3, r3, #4
 8007acc:	2b04      	cmp	r3, #4
 8007ace:	d149      	bne.n	8007b64 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ad0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f856 	bl	8007b90 <UART_WaitOnFlagUntilTimeout>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d03c      	beq.n	8007b64 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af2:	e853 3f00 	ldrex	r3, [r3]
 8007af6:	623b      	str	r3, [r7, #32]
   return(result);
 8007af8:	6a3b      	ldr	r3, [r7, #32]
 8007afa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	461a      	mov	r2, r3
 8007b06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b08:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b10:	e841 2300 	strex	r3, r2, [r1]
 8007b14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1e6      	bne.n	8007aea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	3308      	adds	r3, #8
 8007b22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	e853 3f00 	ldrex	r3, [r3]
 8007b2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f023 0301 	bic.w	r3, r3, #1
 8007b32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3308      	adds	r3, #8
 8007b3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b3c:	61fa      	str	r2, [r7, #28]
 8007b3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b40:	69b9      	ldr	r1, [r7, #24]
 8007b42:	69fa      	ldr	r2, [r7, #28]
 8007b44:	e841 2300 	strex	r3, r2, [r1]
 8007b48:	617b      	str	r3, [r7, #20]
   return(result);
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1e5      	bne.n	8007b1c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2220      	movs	r2, #32
 8007b54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e011      	b.n	8007b88 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2220      	movs	r2, #32
 8007b68:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2220      	movs	r2, #32
 8007b6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3758      	adds	r7, #88	@ 0x58
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	603b      	str	r3, [r7, #0]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ba0:	e04f      	b.n	8007c42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba8:	d04b      	beq.n	8007c42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007baa:	f7fb fdab 	bl	8003704 <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d302      	bcc.n	8007bc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d101      	bne.n	8007bc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e04e      	b.n	8007c62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0304 	and.w	r3, r3, #4
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d037      	beq.n	8007c42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	2b80      	cmp	r3, #128	@ 0x80
 8007bd6:	d034      	beq.n	8007c42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	2b40      	cmp	r3, #64	@ 0x40
 8007bdc:	d031      	beq.n	8007c42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	69db      	ldr	r3, [r3, #28]
 8007be4:	f003 0308 	and.w	r3, r3, #8
 8007be8:	2b08      	cmp	r3, #8
 8007bea:	d110      	bne.n	8007c0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2208      	movs	r2, #8
 8007bf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 f838 	bl	8007c6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2208      	movs	r2, #8
 8007bfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e029      	b.n	8007c62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	69db      	ldr	r3, [r3, #28]
 8007c14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c1c:	d111      	bne.n	8007c42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 f81e 	bl	8007c6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2220      	movs	r2, #32
 8007c32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e00f      	b.n	8007c62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	69da      	ldr	r2, [r3, #28]
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	bf0c      	ite	eq
 8007c52:	2301      	moveq	r3, #1
 8007c54:	2300      	movne	r3, #0
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	461a      	mov	r2, r3
 8007c5a:	79fb      	ldrb	r3, [r7, #7]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d0a0      	beq.n	8007ba2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b095      	sub	sp, #84	@ 0x54
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c7a:	e853 3f00 	ldrex	r3, [r3]
 8007c7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c90:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c92:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c98:	e841 2300 	strex	r3, r2, [r1]
 8007c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1e6      	bne.n	8007c72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3308      	adds	r3, #8
 8007caa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cac:	6a3b      	ldr	r3, [r7, #32]
 8007cae:	e853 3f00 	ldrex	r3, [r3]
 8007cb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	f023 0301 	bic.w	r3, r3, #1
 8007cba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3308      	adds	r3, #8
 8007cc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007cc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ccc:	e841 2300 	strex	r3, r2, [r1]
 8007cd0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1e5      	bne.n	8007ca4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d118      	bne.n	8007d12 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	e853 3f00 	ldrex	r3, [r3]
 8007cec:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	f023 0310 	bic.w	r3, r3, #16
 8007cf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cfe:	61bb      	str	r3, [r7, #24]
 8007d00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d02:	6979      	ldr	r1, [r7, #20]
 8007d04:	69ba      	ldr	r2, [r7, #24]
 8007d06:	e841 2300 	strex	r3, r2, [r1]
 8007d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1e6      	bne.n	8007ce0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2220      	movs	r2, #32
 8007d16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007d26:	bf00      	nop
 8007d28:	3754      	adds	r7, #84	@ 0x54
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d32:	b084      	sub	sp, #16
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	f107 001c 	add.w	r0, r7, #28
 8007d40:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 fa69 	bl	8008228 <USB_CoreReset>
 8007d56:	4603      	mov	r3, r0
 8007d58:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007d5a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d106      	bne.n	8007d70 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d66:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	639a      	str	r2, [r3, #56]	@ 0x38
 8007d6e:	e005      	b.n	8007d7c <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d74:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d88:	b004      	add	sp, #16
 8007d8a:	4770      	bx	lr

08007d8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f023 0201 	bic.w	r2, r3, #1
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b084      	sub	sp, #16
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	460b      	mov	r3, r1
 8007db8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007dca:	78fb      	ldrb	r3, [r7, #3]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d115      	bne.n	8007dfc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007ddc:	200a      	movs	r0, #10
 8007dde:	f7fb fc9d 	bl	800371c <HAL_Delay>
      ms += 10U;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	330a      	adds	r3, #10
 8007de6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fa0f 	bl	800820c <USB_GetMode>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d01e      	beq.n	8007e32 <USB_SetCurrentMode+0x84>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2bc7      	cmp	r3, #199	@ 0xc7
 8007df8:	d9f0      	bls.n	8007ddc <USB_SetCurrentMode+0x2e>
 8007dfa:	e01a      	b.n	8007e32 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007dfc:	78fb      	ldrb	r3, [r7, #3]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d115      	bne.n	8007e2e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007e0e:	200a      	movs	r0, #10
 8007e10:	f7fb fc84 	bl	800371c <HAL_Delay>
      ms += 10U;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	330a      	adds	r3, #10
 8007e18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f9f6 	bl	800820c <USB_GetMode>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d005      	beq.n	8007e32 <USB_SetCurrentMode+0x84>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2bc7      	cmp	r3, #199	@ 0xc7
 8007e2a:	d9f0      	bls.n	8007e0e <USB_SetCurrentMode+0x60>
 8007e2c:	e001      	b.n	8007e32 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e005      	b.n	8007e3e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2bc8      	cmp	r3, #200	@ 0xc8
 8007e36:	d101      	bne.n	8007e3c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e000      	b.n	8007e3e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
	...

08007e48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e48:	b084      	sub	sp, #16
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b086      	sub	sp, #24
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007e56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e62:	2300      	movs	r3, #0
 8007e64:	613b      	str	r3, [r7, #16]
 8007e66:	e009      	b.n	8007e7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	3340      	adds	r3, #64	@ 0x40
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	4413      	add	r3, r2
 8007e72:	2200      	movs	r2, #0
 8007e74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	613b      	str	r3, [r7, #16]
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	2b0e      	cmp	r3, #14
 8007e80:	d9f2      	bls.n	8007e68 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007e82:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d11c      	bne.n	8007ec4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e98:	f043 0302 	orr.w	r3, r3, #2
 8007e9c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ea2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	601a      	str	r2, [r3, #0]
 8007ec2:	e005      	b.n	8007ed0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ec8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	2300      	movs	r3, #0
 8007eda:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007edc:	2103      	movs	r1, #3
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f95a 	bl	8008198 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ee4:	2110      	movs	r1, #16
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f8f6 	bl	80080d8 <USB_FlushTxFifo>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d001      	beq.n	8007ef6 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 f920 	bl	800813c <USB_FlushRxFifo>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	2300      	movs	r3, #0
 8007f10:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f18:	461a      	mov	r2, r3
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f24:	461a      	mov	r2, r3
 8007f26:	2300      	movs	r3, #0
 8007f28:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	613b      	str	r3, [r7, #16]
 8007f2e:	e043      	b.n	8007fb8 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	015a      	lsls	r2, r3, #5
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f46:	d118      	bne.n	8007f7a <USB_DevInit+0x132>
    {
      if (i == 0U)
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10a      	bne.n	8007f64 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	015a      	lsls	r2, r3, #5
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	4413      	add	r3, r2
 8007f56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007f60:	6013      	str	r3, [r2, #0]
 8007f62:	e013      	b.n	8007f8c <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	015a      	lsls	r2, r3, #5
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f70:	461a      	mov	r2, r3
 8007f72:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007f76:	6013      	str	r3, [r2, #0]
 8007f78:	e008      	b.n	8007f8c <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	015a      	lsls	r2, r3, #5
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	4413      	add	r3, r2
 8007f82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f86:	461a      	mov	r2, r3
 8007f88:	2300      	movs	r3, #0
 8007f8a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	015a      	lsls	r2, r3, #5
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	4413      	add	r3, r2
 8007f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f98:	461a      	mov	r2, r3
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	015a      	lsls	r2, r3, #5
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007faa:	461a      	mov	r2, r3
 8007fac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007fb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	613b      	str	r3, [r7, #16]
 8007fb8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d3b5      	bcc.n	8007f30 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	613b      	str	r3, [r7, #16]
 8007fc8:	e043      	b.n	8008052 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	015a      	lsls	r2, r3, #5
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007fe0:	d118      	bne.n	8008014 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10a      	bne.n	8007ffe <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007ffa:	6013      	str	r3, [r2, #0]
 8007ffc:	e013      	b.n	8008026 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	015a      	lsls	r2, r3, #5
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	4413      	add	r3, r2
 8008006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800800a:	461a      	mov	r2, r3
 800800c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008010:	6013      	str	r3, [r2, #0]
 8008012:	e008      	b.n	8008026 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	015a      	lsls	r2, r3, #5
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	4413      	add	r3, r2
 800801c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008020:	461a      	mov	r2, r3
 8008022:	2300      	movs	r3, #0
 8008024:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	015a      	lsls	r2, r3, #5
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	4413      	add	r3, r2
 800802e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008032:	461a      	mov	r2, r3
 8008034:	2300      	movs	r3, #0
 8008036:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	015a      	lsls	r2, r3, #5
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	4413      	add	r3, r2
 8008040:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008044:	461a      	mov	r2, r3
 8008046:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800804a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	3301      	adds	r3, #1
 8008050:	613b      	str	r3, [r7, #16]
 8008052:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008056:	461a      	mov	r2, r3
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	4293      	cmp	r3, r2
 800805c:	d3b5      	bcc.n	8007fca <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	68fa      	ldr	r2, [r7, #12]
 8008068:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800806c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008070:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800807e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	f043 0210 	orr.w	r2, r3, #16
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	699a      	ldr	r2, [r3, #24]
 8008090:	4b10      	ldr	r3, [pc, #64]	@ (80080d4 <USB_DevInit+0x28c>)
 8008092:	4313      	orrs	r3, r2
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008098:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800809c:	2b00      	cmp	r3, #0
 800809e:	d005      	beq.n	80080ac <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	f043 0208 	orr.w	r2, r3, #8
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80080ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d107      	bne.n	80080c4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080bc:	f043 0304 	orr.w	r3, r3, #4
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80080c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3718      	adds	r7, #24
 80080ca:	46bd      	mov	sp, r7
 80080cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80080d0:	b004      	add	sp, #16
 80080d2:	4770      	bx	lr
 80080d4:	803c3800 	.word	0x803c3800

080080d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80080e2:	2300      	movs	r3, #0
 80080e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	3301      	adds	r3, #1
 80080ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080f2:	d901      	bls.n	80080f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80080f4:	2303      	movs	r3, #3
 80080f6:	e01b      	b.n	8008130 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	daf2      	bge.n	80080e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008100:	2300      	movs	r3, #0
 8008102:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	019b      	lsls	r3, r3, #6
 8008108:	f043 0220 	orr.w	r2, r3, #32
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	3301      	adds	r3, #1
 8008114:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800811c:	d901      	bls.n	8008122 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800811e:	2303      	movs	r3, #3
 8008120:	e006      	b.n	8008130 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	f003 0320 	and.w	r3, r3, #32
 800812a:	2b20      	cmp	r3, #32
 800812c:	d0f0      	beq.n	8008110 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3714      	adds	r7, #20
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008144:	2300      	movs	r3, #0
 8008146:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	3301      	adds	r3, #1
 800814c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008154:	d901      	bls.n	800815a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e018      	b.n	800818c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	2b00      	cmp	r3, #0
 8008160:	daf2      	bge.n	8008148 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008162:	2300      	movs	r3, #0
 8008164:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2210      	movs	r2, #16
 800816a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	3301      	adds	r3, #1
 8008170:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008178:	d901      	bls.n	800817e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e006      	b.n	800818c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	f003 0310 	and.w	r3, r3, #16
 8008186:	2b10      	cmp	r3, #16
 8008188:	d0f0      	beq.n	800816c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	460b      	mov	r3, r1
 80081a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	78fb      	ldrb	r3, [r7, #3]
 80081b2:	68f9      	ldr	r1, [r7, #12]
 80081b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081b8:	4313      	orrs	r3, r2
 80081ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3714      	adds	r7, #20
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80081ca:	b480      	push	{r7}
 80081cc:	b085      	sub	sp, #20
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80081e4:	f023 0303 	bic.w	r3, r3, #3
 80081e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081f8:	f043 0302 	orr.w	r3, r3, #2
 80081fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	695b      	ldr	r3, [r3, #20]
 8008218:	f003 0301 	and.w	r3, r3, #1
}
 800821c:	4618      	mov	r0, r3
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008230:	2300      	movs	r3, #0
 8008232:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	3301      	adds	r3, #1
 8008238:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008240:	d901      	bls.n	8008246 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008242:	2303      	movs	r3, #3
 8008244:	e01b      	b.n	800827e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	2b00      	cmp	r3, #0
 800824c:	daf2      	bge.n	8008234 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800824e:	2300      	movs	r3, #0
 8008250:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	f043 0201 	orr.w	r2, r3, #1
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	3301      	adds	r3, #1
 8008262:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800826a:	d901      	bls.n	8008270 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800826c:	2303      	movs	r3, #3
 800826e:	e006      	b.n	800827e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	f003 0301 	and.w	r3, r3, #1
 8008278:	2b01      	cmp	r3, #1
 800827a:	d0f0      	beq.n	800825e <USB_CoreReset+0x36>

  return HAL_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b08c      	sub	sp, #48	@ 0x30
 800828e:	af00      	add	r7, sp, #0
 8008290:	603b      	str	r3, [r7, #0]
 8008292:	4603      	mov	r3, r0
 8008294:	71fb      	strb	r3, [r7, #7]
 8008296:	460b      	mov	r3, r1
 8008298:	71bb      	strb	r3, [r7, #6]
 800829a:	4613      	mov	r3, r2
 800829c:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800829e:	79fb      	ldrb	r3, [r7, #7]
 80082a0:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 80082a2:	79bb      	ldrb	r3, [r7, #6]
 80082a4:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 80082a6:	797b      	ldrb	r3, [r7, #5]
 80082a8:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80082aa:	f107 030c 	add.w	r3, r7, #12
 80082ae:	2207      	movs	r2, #7
 80082b0:	2100      	movs	r1, #0
 80082b2:	4618      	mov	r0, r3
 80082b4:	f005 fcfe 	bl	800dcb4 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80082b8:	f107 0318 	add.w	r3, r7, #24
 80082bc:	2218      	movs	r2, #24
 80082be:	2100      	movs	r1, #0
 80082c0:	4618      	mov	r0, r3
 80082c2:	f005 fcf7 	bl	800dcb4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80082c6:	233f      	movs	r3, #63	@ 0x3f
 80082c8:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 80082ca:	238a      	movs	r3, #138	@ 0x8a
 80082cc:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 80082ce:	f107 0314 	add.w	r3, r7, #20
 80082d2:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 80082d4:	2303      	movs	r3, #3
 80082d6:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &resp;
 80082d8:	f107 030c 	add.w	r3, r7, #12
 80082dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 80082de:	2307      	movs	r3, #7
 80082e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 80082e2:	f107 0318 	add.w	r3, r7, #24
 80082e6:	2100      	movs	r1, #0
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 fea1 	bl	8009030 <hci_send_req>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	da01      	bge.n	80082f8 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 80082f4:	23ff      	movs	r3, #255	@ 0xff
 80082f6:	e014      	b.n	8008322 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 80082f8:	7b3b      	ldrb	r3, [r7, #12]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d001      	beq.n	8008302 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 80082fe:	7b3b      	ldrb	r3, [r7, #12]
 8008300:	e00f      	b.n	8008322 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8008302:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8008306:	b29a      	uxth	r2, r3
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800830c:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8008310:	b29a      	uxth	r2, r3
 8008312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008314:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8008316:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800831a:	b29a      	uxth	r2, r3
 800831c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800831e:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3730      	adds	r7, #48	@ 0x30
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b08e      	sub	sp, #56	@ 0x38
 800832e:	af00      	add	r7, sp, #0
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
 8008334:	603b      	str	r3, [r7, #0]
 8008336:	4603      	mov	r3, r0
 8008338:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 800833a:	7bfb      	ldrb	r3, [r7, #15]
 800833c:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800833e:	f107 0314 	add.w	r3, r7, #20
 8008342:	2207      	movs	r2, #7
 8008344:	2100      	movs	r1, #0
 8008346:	4618      	mov	r0, r3
 8008348:	f005 fcb4 	bl	800dcb4 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800834c:	f107 0320 	add.w	r3, r7, #32
 8008350:	2218      	movs	r2, #24
 8008352:	2100      	movs	r1, #0
 8008354:	4618      	mov	r0, r3
 8008356:	f005 fcad 	bl	800dcb4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800835a:	233f      	movs	r3, #63	@ 0x3f
 800835c:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 800835e:	238a      	movs	r3, #138	@ 0x8a
 8008360:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = &cp;
 8008362:	f107 031c 	add.w	r3, r7, #28
 8008366:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = sizeof(cp);
 8008368:	2301      	movs	r3, #1
 800836a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 800836c:	f107 0314 	add.w	r3, r7, #20
 8008370:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8008372:	2307      	movs	r3, #7
 8008374:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008376:	f107 0320 	add.w	r3, r7, #32
 800837a:	2100      	movs	r1, #0
 800837c:	4618      	mov	r0, r3
 800837e:	f000 fe57 	bl	8009030 <hci_send_req>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	da01      	bge.n	800838c <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8008388:	23ff      	movs	r3, #255	@ 0xff
 800838a:	e014      	b.n	80083b6 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 800838c:	7d3b      	ldrb	r3, [r7, #20]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8008392:	7d3b      	ldrb	r3, [r7, #20]
 8008394:	e00f      	b.n	80083b6 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8008396:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800839a:	b29a      	uxth	r2, r3
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80083a0:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80083aa:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3738      	adds	r7, #56	@ 0x38
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 80083be:	b590      	push	{r4, r7, lr}
 80083c0:	b095      	sub	sp, #84	@ 0x54
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	4604      	mov	r4, r0
 80083c6:	4608      	mov	r0, r1
 80083c8:	4611      	mov	r1, r2
 80083ca:	461a      	mov	r2, r3
 80083cc:	4623      	mov	r3, r4
 80083ce:	71fb      	strb	r3, [r7, #7]
 80083d0:	4603      	mov	r3, r0
 80083d2:	80bb      	strh	r3, [r7, #4]
 80083d4:	460b      	mov	r3, r1
 80083d6:	807b      	strh	r3, [r7, #2]
 80083d8:	4613      	mov	r3, r2
 80083da:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 80083dc:	2300      	movs	r3, #0
 80083de:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 80083e2:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 80083e6:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80083ea:	4413      	add	r3, r2
 80083ec:	330e      	adds	r3, #14
 80083ee:	2b28      	cmp	r3, #40	@ 0x28
 80083f0:	d901      	bls.n	80083f6 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 80083f2:	2342      	movs	r3, #66	@ 0x42
 80083f4:	e0c9      	b.n	800858a <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 80083f6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80083fa:	3350      	adds	r3, #80	@ 0x50
 80083fc:	443b      	add	r3, r7
 80083fe:	79fa      	ldrb	r2, [r7, #7]
 8008400:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008404:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008408:	3301      	adds	r3, #1
 800840a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800840e:	88bb      	ldrh	r3, [r7, #4]
 8008410:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8008412:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008416:	f107 0208 	add.w	r2, r7, #8
 800841a:	4413      	add	r3, r2
 800841c:	88ba      	ldrh	r2, [r7, #4]
 800841e:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008420:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008424:	3302      	adds	r3, #2
 8008426:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 800842a:	887b      	ldrh	r3, [r7, #2]
 800842c:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800842e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008432:	f107 0208 	add.w	r2, r7, #8
 8008436:	4413      	add	r3, r2
 8008438:	887a      	ldrh	r2, [r7, #2]
 800843a:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800843c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008440:	3302      	adds	r3, #2
 8008442:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = OwnAddrType;
 8008446:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800844a:	3350      	adds	r3, #80	@ 0x50
 800844c:	443b      	add	r3, r7
 800844e:	79ba      	ldrb	r2, [r7, #6]
 8008450:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008454:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008458:	3301      	adds	r3, #1
 800845a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 800845e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008462:	3350      	adds	r3, #80	@ 0x50
 8008464:	443b      	add	r3, r7
 8008466:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800846a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800846e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008472:	3301      	adds	r3, #1
 8008474:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = LocalNameLen;
 8008478:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800847c:	3350      	adds	r3, #80	@ 0x50
 800847e:	443b      	add	r3, r7
 8008480:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8008484:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008488:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800848c:	3301      	adds	r3, #1
 800848e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8008492:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008496:	f107 0208 	add.w	r2, r7, #8
 800849a:	4413      	add	r3, r2
 800849c:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 80084a0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80084a2:	4618      	mov	r0, r3
 80084a4:	f005 fc85 	bl	800ddb2 <memcpy>
  indx +=  LocalNameLen;
 80084a8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80084ac:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80084b0:	4413      	add	r3, r2
 80084b2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 80084b6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80084ba:	3350      	adds	r3, #80	@ 0x50
 80084bc:	443b      	add	r3, r7
 80084be:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 80084c2:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80084c6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80084ca:	3301      	adds	r3, #1
 80084cc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80084d0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80084d4:	f107 0208 	add.w	r2, r7, #8
 80084d8:	4413      	add	r3, r2
 80084da:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 80084de:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80084e0:	4618      	mov	r0, r3
 80084e2:	f005 fc66 	bl	800ddb2 <memcpy>
  indx +=  ServiceUUIDLen;  
 80084e6:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80084ea:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80084ee:	4413      	add	r3, r2
 80084f0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 80084f4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80084f8:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 80084fc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008500:	f107 0208 	add.w	r2, r7, #8
 8008504:	4413      	add	r3, r2
 8008506:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 800850a:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800850c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008510:	3302      	adds	r3, #2
 8008512:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8008516:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800851a:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800851e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008522:	f107 0208 	add.w	r2, r7, #8
 8008526:	4413      	add	r3, r2
 8008528:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 800852c:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 800852e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008532:	3302      	adds	r3, #2
 8008534:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008538:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800853c:	2218      	movs	r2, #24
 800853e:	2100      	movs	r1, #0
 8008540:	4618      	mov	r0, r3
 8008542:	f005 fbb7 	bl	800dcb4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008546:	233f      	movs	r3, #63	@ 0x3f
 8008548:	86bb      	strh	r3, [r7, #52]	@ 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800854a:	2383      	movs	r3, #131	@ 0x83
 800854c:	86fb      	strh	r3, [r7, #54]	@ 0x36
  rq.cparam = (void *)buffer;
 800854e:	f107 0308 	add.w	r3, r7, #8
 8008552:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.clen = indx;
 8008554:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008558:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rparam = &status;
 800855a:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 800855e:	647b      	str	r3, [r7, #68]	@ 0x44
  rq.rlen = 1;
 8008560:	2301      	movs	r3, #1
 8008562:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8008564:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008568:	2100      	movs	r1, #0
 800856a:	4618      	mov	r0, r3
 800856c:	f000 fd60 	bl	8009030 <hci_send_req>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	da01      	bge.n	800857a <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 8008576:	23ff      	movs	r3, #255	@ 0xff
 8008578:	e007      	b.n	800858a <aci_gap_set_discoverable+0x1cc>

  if (status) {
 800857a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <aci_gap_set_discoverable+0x1ca>
    return status;
 8008582:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008586:	e000      	b.n	800858a <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3754      	adds	r7, #84	@ 0x54
 800858e:	46bd      	mov	sp, r7
 8008590:	bd90      	pop	{r4, r7, pc}

08008592 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8008592:	b590      	push	{r4, r7, lr}
 8008594:	b091      	sub	sp, #68	@ 0x44
 8008596:	af00      	add	r7, sp, #0
 8008598:	603a      	str	r2, [r7, #0]
 800859a:	461a      	mov	r2, r3
 800859c:	4603      	mov	r3, r0
 800859e:	71fb      	strb	r3, [r7, #7]
 80085a0:	460b      	mov	r3, r1
 80085a2:	71bb      	strb	r3, [r7, #6]
 80085a4:	4613      	mov	r3, r2
 80085a6:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 80085a8:	79fb      	ldrb	r3, [r7, #7]
 80085aa:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 80085ac:	79bb      	ldrb	r3, [r7, #6]
 80085ae:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 80085b0:	79bb      	ldrb	r3, [r7, #6]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00a      	beq.n	80085cc <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	f107 030e 	add.w	r3, r7, #14
 80085bc:	6814      	ldr	r4, [r2, #0]
 80085be:	6850      	ldr	r0, [r2, #4]
 80085c0:	6891      	ldr	r1, [r2, #8]
 80085c2:	68d2      	ldr	r2, [r2, #12]
 80085c4:	601c      	str	r4, [r3, #0]
 80085c6:	6058      	str	r0, [r3, #4]
 80085c8:	6099      	str	r1, [r3, #8]
 80085ca:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 80085cc:	797b      	ldrb	r3, [r7, #5]
 80085ce:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 80085d0:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80085d4:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 80085d6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80085da:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 80085de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80085e0:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
  cp.bonding_mode = bonding_mode;
 80085e4:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80085e8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80085ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80085f0:	2218      	movs	r2, #24
 80085f2:	2100      	movs	r1, #0
 80085f4:	4618      	mov	r0, r3
 80085f6:	f005 fb5d 	bl	800dcb4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80085fa:	233f      	movs	r3, #63	@ 0x3f
 80085fc:	853b      	strh	r3, [r7, #40]	@ 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 80085fe:	2386      	movs	r3, #134	@ 0x86
 8008600:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rq.cparam = &cp;
 8008602:	f107 030c 	add.w	r3, r7, #12
 8008606:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.clen = sizeof(cp);
 8008608:	231a      	movs	r3, #26
 800860a:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rparam = &status;
 800860c:	f107 030b 	add.w	r3, r7, #11
 8008610:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rlen = 1;
 8008612:	2301      	movs	r3, #1
 8008614:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8008616:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800861a:	2100      	movs	r1, #0
 800861c:	4618      	mov	r0, r3
 800861e:	f000 fd07 	bl	8009030 <hci_send_req>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	da01      	bge.n	800862c <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 8008628:	23ff      	movs	r3, #255	@ 0xff
 800862a:	e005      	b.n	8008638 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 800862c:	7afb      	ldrb	r3, [r7, #11]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d001      	beq.n	8008636 <aci_gap_set_auth_requirement+0xa4>
    return status;
 8008632:	7afb      	ldrb	r3, [r7, #11]
 8008634:	e000      	b.n	8008638 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3744      	adds	r7, #68	@ 0x44
 800863c:	46bd      	mov	sp, r7
 800863e:	bd90      	pop	{r4, r7, pc}

08008640 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b092      	sub	sp, #72	@ 0x48
 8008644:	af00      	add	r7, sp, #0
 8008646:	4603      	mov	r3, r0
 8008648:	6039      	str	r1, [r7, #0]
 800864a:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 800864c:	2300      	movs	r3, #0
 800864e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 8008652:	79fb      	ldrb	r3, [r7, #7]
 8008654:	2b1f      	cmp	r3, #31
 8008656:	d901      	bls.n	800865c <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 8008658:	2342      	movs	r3, #66	@ 0x42
 800865a:	e03e      	b.n	80086da <aci_gap_update_adv_data+0x9a>

  buffer[indx] = AdvLen;
 800865c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008660:	3348      	adds	r3, #72	@ 0x48
 8008662:	443b      	add	r3, r7
 8008664:	79fa      	ldrb	r2, [r7, #7]
 8008666:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 800866a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800866e:	3301      	adds	r3, #1
 8008670:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 8008674:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008678:	f107 0208 	add.w	r2, r7, #8
 800867c:	4413      	add	r3, r2
 800867e:	79fa      	ldrb	r2, [r7, #7]
 8008680:	6839      	ldr	r1, [r7, #0]
 8008682:	4618      	mov	r0, r3
 8008684:	f005 fb95 	bl	800ddb2 <memcpy>
  indx +=  AdvLen;
 8008688:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800868c:	79fb      	ldrb	r3, [r7, #7]
 800868e:	4413      	add	r3, r2
 8008690:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008694:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008698:	2218      	movs	r2, #24
 800869a:	2100      	movs	r1, #0
 800869c:	4618      	mov	r0, r3
 800869e:	f005 fb09 	bl	800dcb4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80086a2:	233f      	movs	r3, #63	@ 0x3f
 80086a4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 80086a6:	238e      	movs	r3, #142	@ 0x8e
 80086a8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 80086aa:	f107 0308 	add.w	r3, r7, #8
 80086ae:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 80086b0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80086b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &status;
 80086b6:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 80086ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = 1;
 80086bc:	2301      	movs	r3, #1
 80086be:	643b      	str	r3, [r7, #64]	@ 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 80086c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80086c4:	2100      	movs	r1, #0
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 fcb2 	bl	8009030 <hci_send_req>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	da01      	bge.n	80086d6 <aci_gap_update_adv_data+0x96>
    return BLE_STATUS_TIMEOUT;
 80086d2:	23ff      	movs	r3, #255	@ 0xff
 80086d4:	e001      	b.n	80086da <aci_gap_update_adv_data+0x9a>
    
  return status;
 80086d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3748      	adds	r7, #72	@ 0x48
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b088      	sub	sp, #32
 80086e6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80086e8:	f107 0308 	add.w	r3, r7, #8
 80086ec:	2218      	movs	r2, #24
 80086ee:	2100      	movs	r1, #0
 80086f0:	4618      	mov	r0, r3
 80086f2:	f005 fadf 	bl	800dcb4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80086f6:	233f      	movs	r3, #63	@ 0x3f
 80086f8:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 80086fa:	f240 1301 	movw	r3, #257	@ 0x101
 80086fe:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008700:	1dfb      	adds	r3, r7, #7
 8008702:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008704:	2301      	movs	r3, #1
 8008706:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8008708:	f107 0308 	add.w	r3, r7, #8
 800870c:	2100      	movs	r1, #0
 800870e:	4618      	mov	r0, r3
 8008710:	f000 fc8e 	bl	8009030 <hci_send_req>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	da01      	bge.n	800871e <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800871a:	23ff      	movs	r3, #255	@ 0xff
 800871c:	e000      	b.n	8008720 <aci_gatt_init+0x3e>

  return status;
 800871e:	79fb      	ldrb	r3, [r7, #7]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3720      	adds	r7, #32
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b090      	sub	sp, #64	@ 0x40
 800872c:	af00      	add	r7, sp, #0
 800872e:	6039      	str	r1, [r7, #0]
 8008730:	4611      	mov	r1, r2
 8008732:	461a      	mov	r2, r3
 8008734:	4603      	mov	r3, r0
 8008736:	71fb      	strb	r3, [r7, #7]
 8008738:	460b      	mov	r3, r1
 800873a:	71bb      	strb	r3, [r7, #6]
 800873c:	4613      	mov	r3, r2
 800873e:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8008740:	2300      	movs	r3, #0
 8008742:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_uuid_type;
 8008746:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800874a:	3340      	adds	r3, #64	@ 0x40
 800874c:	443b      	add	r3, r7
 800874e:	79fa      	ldrb	r2, [r7, #7]
 8008750:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008754:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008758:	3301      	adds	r3, #1
 800875a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 800875e:	79fb      	ldrb	r3, [r7, #7]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d103      	bne.n	800876c <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 8008764:	2302      	movs	r3, #2
 8008766:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800876a:	e002      	b.n	8008772 <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 800876c:	2310      	movs	r3, #16
 800876e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8008772:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008776:	f107 020c 	add.w	r2, r7, #12
 800877a:	4413      	add	r3, r2
 800877c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	4618      	mov	r0, r3
 8008784:	f005 fb15 	bl	800ddb2 <memcpy>
  indx +=  uuid_len;
 8008788:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800878c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008790:	4413      	add	r3, r2
 8008792:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_type;
 8008796:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800879a:	3340      	adds	r3, #64	@ 0x40
 800879c:	443b      	add	r3, r7
 800879e:	79ba      	ldrb	r2, [r7, #6]
 80087a0:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80087a4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80087a8:	3301      	adds	r3, #1
 80087aa:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = max_attr_records;
 80087ae:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80087b2:	3340      	adds	r3, #64	@ 0x40
 80087b4:	443b      	add	r3, r7
 80087b6:	797a      	ldrb	r2, [r7, #5]
 80087b8:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80087bc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80087c0:	3301      	adds	r3, #1
 80087c2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80087c6:	f107 0320 	add.w	r3, r7, #32
 80087ca:	2203      	movs	r2, #3
 80087cc:	2100      	movs	r1, #0
 80087ce:	4618      	mov	r0, r3
 80087d0:	f005 fa70 	bl	800dcb4 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80087d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087d8:	2218      	movs	r2, #24
 80087da:	2100      	movs	r1, #0
 80087dc:	4618      	mov	r0, r3
 80087de:	f005 fa69 	bl	800dcb4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80087e2:	233f      	movs	r3, #63	@ 0x3f
 80087e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 80087e6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80087ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
  rq.cparam = (void *)buffer;
 80087ec:	f107 030c 	add.w	r3, r7, #12
 80087f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.clen = indx;
 80087f2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80087f6:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rparam = &resp;
 80087f8:	f107 0320 	add.w	r3, r7, #32
 80087fc:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80087fe:	2303      	movs	r3, #3
 8008800:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8008802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008806:	2100      	movs	r1, #0
 8008808:	4618      	mov	r0, r3
 800880a:	f000 fc11 	bl	8009030 <hci_send_req>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	da01      	bge.n	8008818 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 8008814:	23ff      	movs	r3, #255	@ 0xff
 8008816:	e00c      	b.n	8008832 <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 8008818:	f897 3020 	ldrb.w	r3, [r7, #32]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d002      	beq.n	8008826 <aci_gatt_add_serv+0xfe>
    return resp.status;
 8008820:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008824:	e005      	b.n	8008832 <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 8008826:	f8b7 3021 	ldrh.w	r3, [r7, #33]	@ 0x21
 800882a:	b29a      	uxth	r2, r3
 800882c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800882e:	801a      	strh	r2, [r3, #0]

  return 0;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3740      	adds	r7, #64	@ 0x40
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b092      	sub	sp, #72	@ 0x48
 800883e:	af00      	add	r7, sp, #0
 8008840:	603a      	str	r2, [r7, #0]
 8008842:	461a      	mov	r2, r3
 8008844:	4603      	mov	r3, r0
 8008846:	80fb      	strh	r3, [r7, #6]
 8008848:	460b      	mov	r3, r1
 800884a:	717b      	strb	r3, [r7, #5]
 800884c:	4613      	mov	r3, r2
 800884e:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8008850:	2300      	movs	r3, #0
 8008852:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  serviceHandle = htobs(serviceHandle);
 8008856:	88fb      	ldrh	r3, [r7, #6]
 8008858:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800885a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800885e:	f107 020c 	add.w	r2, r7, #12
 8008862:	4413      	add	r3, r2
 8008864:	88fa      	ldrh	r2, [r7, #6]
 8008866:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008868:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800886c:	3302      	adds	r3, #2
 800886e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charUuidType;
 8008872:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008876:	3348      	adds	r3, #72	@ 0x48
 8008878:	443b      	add	r3, r7
 800887a:	797a      	ldrb	r2, [r7, #5]
 800887c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008880:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008884:	3301      	adds	r3, #1
 8008886:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  if(charUuidType == UUID_TYPE_16){
 800888a:	797b      	ldrb	r3, [r7, #5]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d103      	bne.n	8008898 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 8008890:	2302      	movs	r3, #2
 8008892:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008896:	e002      	b.n	800889e <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 8008898:	2310      	movs	r3, #16
 800889a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800889e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80088a2:	f107 020c 	add.w	r2, r7, #12
 80088a6:	4413      	add	r3, r2
 80088a8:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f005 fa7f 	bl	800ddb2 <memcpy>
  indx +=  uuid_len;
 80088b4:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80088b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80088bc:	4413      	add	r3, r2
 80088be:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charValueLen;
 80088c2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80088c6:	3348      	adds	r3, #72	@ 0x48
 80088c8:	443b      	add	r3, r7
 80088ca:	793a      	ldrb	r2, [r7, #4]
 80088cc:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80088d0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80088d4:	3301      	adds	r3, #1
 80088d6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charProperties;
 80088da:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80088de:	3348      	adds	r3, #72	@ 0x48
 80088e0:	443b      	add	r3, r7
 80088e2:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80088e6:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80088ea:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80088ee:	3301      	adds	r3, #1
 80088f0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = secPermissions;
 80088f4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80088f8:	3348      	adds	r3, #72	@ 0x48
 80088fa:	443b      	add	r3, r7
 80088fc:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8008900:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008904:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008908:	3301      	adds	r3, #1
 800890a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = gattEvtMask;
 800890e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008912:	3348      	adds	r3, #72	@ 0x48
 8008914:	443b      	add	r3, r7
 8008916:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 800891a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800891e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008922:	3301      	adds	r3, #1
 8008924:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = encryKeySize;
 8008928:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800892c:	3348      	adds	r3, #72	@ 0x48
 800892e:	443b      	add	r3, r7
 8008930:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8008934:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008938:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800893c:	3301      	adds	r3, #1
 800893e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = isVariable;
 8008942:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008946:	3348      	adds	r3, #72	@ 0x48
 8008948:	443b      	add	r3, r7
 800894a:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800894e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008952:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008956:	3301      	adds	r3, #1
 8008958:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800895c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008960:	2203      	movs	r2, #3
 8008962:	2100      	movs	r1, #0
 8008964:	4618      	mov	r0, r3
 8008966:	f005 f9a5 	bl	800dcb4 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800896a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800896e:	2218      	movs	r2, #24
 8008970:	2100      	movs	r1, #0
 8008972:	4618      	mov	r0, r3
 8008974:	f005 f99e 	bl	800dcb4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008978:	233f      	movs	r3, #63	@ 0x3f
 800897a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 800897c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8008980:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 8008982:	f107 030c 	add.w	r3, r7, #12
 8008986:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8008988:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800898c:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &resp;
 800898e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008992:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8008994:	2303      	movs	r3, #3
 8008996:	643b      	str	r3, [r7, #64]	@ 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8008998:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800899c:	2100      	movs	r1, #0
 800899e:	4618      	mov	r0, r3
 80089a0:	f000 fb46 	bl	8009030 <hci_send_req>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	da01      	bge.n	80089ae <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 80089aa:	23ff      	movs	r3, #255	@ 0xff
 80089ac:	e00c      	b.n	80089c8 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 80089ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d002      	beq.n	80089bc <aci_gatt_add_char+0x182>
    return resp.status;
 80089b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80089ba:	e005      	b.n	80089c8 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 80089bc:	f8b7 3029 	ldrh.w	r3, [r7, #41]	@ 0x29
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089c4:	801a      	strh	r2, [r3, #0]

  return 0;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3748      	adds	r7, #72	@ 0x48
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 80089d0:	b590      	push	{r4, r7, lr}
 80089d2:	b0ab      	sub	sp, #172	@ 0xac
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	4604      	mov	r4, r0
 80089d8:	4608      	mov	r0, r1
 80089da:	4611      	mov	r1, r2
 80089dc:	461a      	mov	r2, r3
 80089de:	4623      	mov	r3, r4
 80089e0:	80fb      	strh	r3, [r7, #6]
 80089e2:	4603      	mov	r3, r0
 80089e4:	80bb      	strh	r3, [r7, #4]
 80089e6:	460b      	mov	r3, r1
 80089e8:	70fb      	strb	r3, [r7, #3]
 80089ea:	4613      	mov	r3, r2
 80089ec:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 80089ee:	2300      	movs	r3, #0
 80089f0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 80089f4:	78bb      	ldrb	r3, [r7, #2]
 80089f6:	2b7a      	cmp	r3, #122	@ 0x7a
 80089f8:	d901      	bls.n	80089fe <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 80089fa:	2342      	movs	r3, #66	@ 0x42
 80089fc:	e074      	b.n	8008ae8 <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 80089fe:	88fb      	ldrh	r3, [r7, #6]
 8008a00:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8008a02:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008a06:	f107 0208 	add.w	r2, r7, #8
 8008a0a:	4413      	add	r3, r2
 8008a0c:	88fa      	ldrh	r2, [r7, #6]
 8008a0e:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008a10:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008a14:	3302      	adds	r3, #2
 8008a16:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  charHandle = htobs(charHandle);
 8008a1a:	88bb      	ldrh	r3, [r7, #4]
 8008a1c:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8008a1e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008a22:	f107 0208 	add.w	r2, r7, #8
 8008a26:	4413      	add	r3, r2
 8008a28:	88ba      	ldrh	r2, [r7, #4]
 8008a2a:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008a2c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008a30:	3302      	adds	r3, #2
 8008a32:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValOffset;
 8008a36:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008a3a:	33a8      	adds	r3, #168	@ 0xa8
 8008a3c:	443b      	add	r3, r7
 8008a3e:	78fa      	ldrb	r2, [r7, #3]
 8008a40:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8008a44:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008a48:	3301      	adds	r3, #1
 8008a4a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValueLen;
 8008a4e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008a52:	33a8      	adds	r3, #168	@ 0xa8
 8008a54:	443b      	add	r3, r7
 8008a56:	78ba      	ldrb	r2, [r7, #2]
 8008a58:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8008a5c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008a60:	3301      	adds	r3, #1
 8008a62:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8008a66:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008a6a:	f107 0208 	add.w	r2, r7, #8
 8008a6e:	4413      	add	r3, r2
 8008a70:	78ba      	ldrb	r2, [r7, #2]
 8008a72:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8008a76:	4618      	mov	r0, r3
 8008a78:	f005 f99b 	bl	800ddb2 <memcpy>
  indx +=  charValueLen;
 8008a7c:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8008a80:	78bb      	ldrb	r3, [r7, #2]
 8008a82:	4413      	add	r3, r2
 8008a84:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008a88:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8008a8c:	2218      	movs	r2, #24
 8008a8e:	2100      	movs	r1, #0
 8008a90:	4618      	mov	r0, r3
 8008a92:	f005 f90f 	bl	800dcb4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008a96:	233f      	movs	r3, #63	@ 0x3f
 8008a98:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8008a9c:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8008aa0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 8008aa4:	f107 0308 	add.w	r3, r7, #8
 8008aa8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 8008aac:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008ab0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 8008ab4:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 8008ab8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 8008abc:	2301      	movs	r3, #1
 8008abe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8008ac2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8008ac6:	2100      	movs	r1, #0
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 fab1 	bl	8009030 <hci_send_req>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	da01      	bge.n	8008ad8 <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 8008ad4:	23ff      	movs	r3, #255	@ 0xff
 8008ad6:	e007      	b.n	8008ae8 <aci_gatt_update_char_value+0x118>

  if (status) {
 8008ad8:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d002      	beq.n	8008ae6 <aci_gatt_update_char_value+0x116>
    return status;
 8008ae0:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8008ae4:	e000      	b.n	8008ae8 <aci_gatt_update_char_value+0x118>
  }

  return 0;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	37ac      	adds	r7, #172	@ 0xac
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd90      	pop	{r4, r7, pc}

08008af0 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b08a      	sub	sp, #40	@ 0x28
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	4603      	mov	r3, r0
 8008af8:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 8008afa:	88fb      	ldrh	r3, [r7, #6]
 8008afc:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 8008afe:	f107 0310 	add.w	r3, r7, #16
 8008b02:	2218      	movs	r2, #24
 8008b04:	2100      	movs	r1, #0
 8008b06:	4618      	mov	r0, r3
 8008b08:	f005 f8d4 	bl	800dcb4 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 8008b0c:	233f      	movs	r3, #63	@ 0x3f
 8008b0e:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8008b10:	f240 1327 	movw	r3, #295	@ 0x127
 8008b14:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 8008b16:	f107 030c 	add.w	r3, r7, #12
 8008b1a:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 8008b20:	f107 030b 	add.w	r3, r7, #11
 8008b24:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 8008b26:	2301      	movs	r3, #1
 8008b28:	627b      	str	r3, [r7, #36]	@ 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 8008b2a:	f107 0310 	add.w	r3, r7, #16
 8008b2e:	2100      	movs	r1, #0
 8008b30:	4618      	mov	r0, r3
 8008b32:	f000 fa7d 	bl	8009030 <hci_send_req>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	da01      	bge.n	8008b40 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 8008b3c:	23ff      	movs	r3, #255	@ 0xff
 8008b3e:	e000      	b.n	8008b42 <aci_gatt_allow_read+0x52>

    return status;
 8008b40:	7afb      	ldrb	r3, [r7, #11]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3728      	adds	r7, #40	@ 0x28
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b0ac      	sub	sp, #176	@ 0xb0
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	60ba      	str	r2, [r7, #8]
 8008b52:	607b      	str	r3, [r7, #4]
 8008b54:	4603      	mov	r3, r0
 8008b56:	73fb      	strb	r3, [r7, #15]
 8008b58:	460b      	mov	r3, r1
 8008b5a:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008b62:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008b66:	2218      	movs	r2, #24
 8008b68:	2100      	movs	r1, #0
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f005 f8a2 	bl	800dcb4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008b70:	233f      	movs	r3, #63	@ 0x3f
 8008b72:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 8008b76:	230d      	movs	r3, #13
 8008b78:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  rq.cparam = &cp;
 8008b7c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8008b80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  rq.clen = sizeof(cp);
 8008b84:	2301      	movs	r3, #1
 8008b86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  rq.rparam = &rp;
 8008b8a:	f107 0314 	add.w	r3, r7, #20
 8008b8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  rq.rlen = sizeof(rp);
 8008b92:	2380      	movs	r3, #128	@ 0x80
 8008b94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008b98:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008b9c:	2100      	movs	r1, #0
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 fa46 	bl	8009030 <hci_send_req>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	da01      	bge.n	8008bae <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 8008baa:	23ff      	movs	r3, #255	@ 0xff
 8008bac:	e01e      	b.n	8008bec <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 8008bae:	7d3b      	ldrb	r3, [r7, #20]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <aci_hal_read_config_data+0x6e>
    return rp.status;
 8008bb4:	7d3b      	ldrb	r3, [r7, #20]
 8008bb6:	e019      	b.n	8008bec <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 8008bb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	b2da      	uxtb	r2, r3
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	461a      	mov	r2, r3
 8008bcc:	89bb      	ldrh	r3, [r7, #12]
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d201      	bcs.n	8008bd6 <aci_hal_read_config_data+0x8c>
 8008bd2:	89ba      	ldrh	r2, [r7, #12]
 8008bd4:	e002      	b.n	8008bdc <aci_hal_read_config_data+0x92>
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	461a      	mov	r2, r3
 8008bdc:	f107 0314 	add.w	r3, r7, #20
 8008be0:	3301      	adds	r3, #1
 8008be2:	4619      	mov	r1, r3
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f005 f8e4 	bl	800ddb2 <memcpy>
  
  return 0;
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	37b0      	adds	r7, #176	@ 0xb0
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b08a      	sub	sp, #40	@ 0x28
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	460a      	mov	r2, r1
 8008bfe:	71fb      	strb	r3, [r7, #7]
 8008c00:	4613      	mov	r3, r2
 8008c02:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8008c04:	79fb      	ldrb	r3, [r7, #7]
 8008c06:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8008c08:	79bb      	ldrb	r3, [r7, #6]
 8008c0a:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008c0c:	f107 0310 	add.w	r3, r7, #16
 8008c10:	2218      	movs	r2, #24
 8008c12:	2100      	movs	r1, #0
 8008c14:	4618      	mov	r0, r3
 8008c16:	f005 f84d 	bl	800dcb4 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008c1a:	233f      	movs	r3, #63	@ 0x3f
 8008c1c:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8008c1e:	230f      	movs	r3, #15
 8008c20:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8008c22:	f107 030c 	add.w	r3, r7, #12
 8008c26:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8008c28:	2302      	movs	r3, #2
 8008c2a:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8008c2c:	f107 030b 	add.w	r3, r7, #11
 8008c30:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8008c32:	2301      	movs	r3, #1
 8008c34:	627b      	str	r3, [r7, #36]	@ 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8008c36:	f107 0310 	add.w	r3, r7, #16
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f000 f9f7 	bl	8009030 <hci_send_req>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	da01      	bge.n	8008c4c <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8008c48:	23ff      	movs	r3, #255	@ 0xff
 8008c4a:	e000      	b.n	8008c4e <aci_hal_set_tx_power_level+0x5a>

  return status;
 8008c4c:	7afb      	ldrb	r3, [r7, #11]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3728      	adds	r7, #40	@ 0x28
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8008c56:	b590      	push	{r4, r7, lr}
 8008c58:	b089      	sub	sp, #36	@ 0x24
 8008c5a:	af02      	add	r7, sp, #8
 8008c5c:	6078      	str	r0, [r7, #4]
 8008c5e:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8008c60:	f107 0410 	add.w	r4, r7, #16
 8008c64:	f107 0215 	add.w	r2, r7, #21
 8008c68:	f107 0112 	add.w	r1, r7, #18
 8008c6c:	f107 0016 	add.w	r0, r7, #22
 8008c70:	f107 030e 	add.w	r3, r7, #14
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	4623      	mov	r3, r4
 8008c78:	f000 f853 	bl	8008d22 <hci_le_read_local_version>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8008c80:	7dfb      	ldrb	r3, [r7, #23]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d126      	bne.n	8008cd4 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8008c86:	8a7b      	ldrh	r3, [r7, #18]
 8008c88:	0a1b      	lsrs	r3, r3, #8
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8008c92:	8a7b      	ldrh	r3, [r7, #18]
 8008c94:	021b      	lsls	r3, r3, #8
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	881b      	ldrh	r3, [r3, #0]
 8008ca0:	b21a      	sxth	r2, r3
 8008ca2:	89fb      	ldrh	r3, [r7, #14]
 8008ca4:	091b      	lsrs	r3, r3, #4
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	011b      	lsls	r3, r3, #4
 8008caa:	b21b      	sxth	r3, r3
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	b21b      	sxth	r3, r3
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	b21b      	sxth	r3, r3
 8008cb4:	b29a      	uxth	r2, r3
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	881b      	ldrh	r3, [r3, #0]
 8008cbe:	b21a      	sxth	r2, r3
 8008cc0:	89fb      	ldrh	r3, [r7, #14]
 8008cc2:	b21b      	sxth	r3, r3
 8008cc4:	f003 030f 	and.w	r3, r3, #15
 8008cc8:	b21b      	sxth	r3, r3
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	b21b      	sxth	r3, r3
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8008cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	371c      	adds	r7, #28
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd90      	pop	{r4, r7, pc}

08008cde <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b088      	sub	sp, #32
 8008ce2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008ce4:	f107 0308 	add.w	r3, r7, #8
 8008ce8:	2218      	movs	r2, #24
 8008cea:	2100      	movs	r1, #0
 8008cec:	4618      	mov	r0, r3
 8008cee:	f004 ffe1 	bl	800dcb4 <memset>
  rq.ogf = OGF_HOST_CTL;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008cfa:	1dfb      	adds	r3, r7, #7
 8008cfc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008d02:	f107 0308 	add.w	r3, r7, #8
 8008d06:	2100      	movs	r1, #0
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f000 f991 	bl	8009030 <hci_send_req>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	da01      	bge.n	8008d18 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8008d14:	23ff      	movs	r3, #255	@ 0xff
 8008d16:	e000      	b.n	8008d1a <hci_reset+0x3c>
  
  return status;  
 8008d18:	79fb      	ldrb	r3, [r7, #7]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3720      	adds	r7, #32
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b08e      	sub	sp, #56	@ 0x38
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	60f8      	str	r0, [r7, #12]
 8008d2a:	60b9      	str	r1, [r7, #8]
 8008d2c:	607a      	str	r2, [r7, #4]
 8008d2e:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008d30:	f107 0314 	add.w	r3, r7, #20
 8008d34:	2209      	movs	r2, #9
 8008d36:	2100      	movs	r1, #0
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f004 ffbb 	bl	800dcb4 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008d3e:	f107 0320 	add.w	r3, r7, #32
 8008d42:	2218      	movs	r2, #24
 8008d44:	2100      	movs	r1, #0
 8008d46:	4618      	mov	r0, r3
 8008d48:	f004 ffb4 	bl	800dcb4 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8008d4c:	2304      	movs	r3, #4
 8008d4e:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8008d50:	2301      	movs	r3, #1
 8008d52:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = NULL;
 8008d54:	2300      	movs	r3, #0
 8008d56:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = 0;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8008d5c:	f107 0314 	add.w	r3, r7, #20
 8008d60:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8008d62:	2309      	movs	r3, #9
 8008d64:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008d66:	f107 0320 	add.w	r3, r7, #32
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f000 f95f 	bl	8009030 <hci_send_req>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	da01      	bge.n	8008d7c <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8008d78:	23ff      	movs	r3, #255	@ 0xff
 8008d7a:	e018      	b.n	8008dae <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8008d7c:	7d3b      	ldrb	r3, [r7, #20]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d001      	beq.n	8008d86 <hci_le_read_local_version+0x64>
    return resp.status;
 8008d82:	7d3b      	ldrb	r3, [r7, #20]
 8008d84:	e013      	b.n	8008dae <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8008d86:	7d7a      	ldrb	r2, [r7, #21]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8008d8c:	8afa      	ldrh	r2, [r7, #22]
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8008d92:	7e3a      	ldrb	r2, [r7, #24]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8008d98:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8008da2:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008daa:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3738      	adds	r7, #56	@ 0x38
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b092      	sub	sp, #72	@ 0x48
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	6039      	str	r1, [r7, #0]
 8008dc0:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8008dc2:	f107 0310 	add.w	r3, r7, #16
 8008dc6:	2220      	movs	r2, #32
 8008dc8:	2100      	movs	r1, #0
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f004 ff72 	bl	800dcb4 <memset>
  scan_resp_cp.length = length;
 8008dd0:	79fb      	ldrb	r3, [r7, #7]
 8008dd2:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8008dd4:	79fb      	ldrb	r3, [r7, #7]
 8008dd6:	2b1f      	cmp	r3, #31
 8008dd8:	bf28      	it	cs
 8008dda:	231f      	movcs	r3, #31
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	461a      	mov	r2, r3
 8008de0:	f107 0310 	add.w	r3, r7, #16
 8008de4:	3301      	adds	r3, #1
 8008de6:	6839      	ldr	r1, [r7, #0]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f004 ffe2 	bl	800ddb2 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008dee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008df2:	2218      	movs	r2, #24
 8008df4:	2100      	movs	r1, #0
 8008df6:	4618      	mov	r0, r3
 8008df8:	f004 ff5c 	bl	800dcb4 <memset>
  rq.ogf = OGF_LE_CTL;
 8008dfc:	2308      	movs	r3, #8
 8008dfe:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8008e00:	2309      	movs	r3, #9
 8008e02:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &scan_resp_cp;
 8008e04:	f107 0310 	add.w	r3, r7, #16
 8008e08:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8008e0a:	2320      	movs	r3, #32
 8008e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 8008e0e:	f107 030f 	add.w	r3, r7, #15
 8008e12:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 8008e14:	2301      	movs	r3, #1
 8008e16:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008e18:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 f906 	bl	8009030 <hci_send_req>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	da01      	bge.n	8008e2e <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 8008e2a:	23ff      	movs	r3, #255	@ 0xff
 8008e2c:	e000      	b.n	8008e30 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8008e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3748      	adds	r7, #72	@ 0x48
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	3308      	adds	r3, #8
 8008e44:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	2b04      	cmp	r3, #4
 8008e4c:	d001      	beq.n	8008e52 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e00c      	b.n	8008e6c <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	3302      	adds	r3, #2
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	461a      	mov	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008e60:	3b03      	subs	r3, #3
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d001      	beq.n	8008e6a <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8008e66:	2302      	movs	r3, #2
 8008e68:	e000      	b.n	8008e6c <verify_packet+0x34>
  
  return 0;      
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3714      	adds	r7, #20
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b0a6      	sub	sp, #152	@ 0x98
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	607b      	str	r3, [r7, #4]
 8008e80:	4603      	mov	r3, r0
 8008e82:	81fb      	strh	r3, [r7, #14]
 8008e84:	460b      	mov	r3, r1
 8008e86:	81bb      	strh	r3, [r7, #12]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8008e8c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008e90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e94:	b21a      	sxth	r2, r3
 8008e96:	89fb      	ldrh	r3, [r7, #14]
 8008e98:	029b      	lsls	r3, r3, #10
 8008e9a:	b21b      	sxth	r3, r3
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	b21b      	sxth	r3, r3
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8008ea4:	7afb      	ldrb	r3, [r7, #11]
 8008ea6:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8008eac:	f107 0318 	add.w	r3, r7, #24
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	f107 0314 	add.w	r3, r7, #20
 8008eb8:	8819      	ldrh	r1, [r3, #0]
 8008eba:	789b      	ldrb	r3, [r3, #2]
 8008ebc:	8011      	strh	r1, [r2, #0]
 8008ebe:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8008ec0:	f107 0318 	add.w	r3, r7, #24
 8008ec4:	3304      	adds	r3, #4
 8008ec6:	7afa      	ldrb	r2, [r7, #11]
 8008ec8:	6879      	ldr	r1, [r7, #4]
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f004 ff71 	bl	800ddb2 <memcpy>
  
  if (hciContext.io.Send)
 8008ed0:	4b08      	ldr	r3, [pc, #32]	@ (8008ef4 <send_cmd+0x7c>)
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d009      	beq.n	8008eec <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8008ed8:	4b06      	ldr	r3, [pc, #24]	@ (8008ef4 <send_cmd+0x7c>)
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	7afa      	ldrb	r2, [r7, #11]
 8008ede:	b292      	uxth	r2, r2
 8008ee0:	3204      	adds	r2, #4
 8008ee2:	b291      	uxth	r1, r2
 8008ee4:	f107 0218 	add.w	r2, r7, #24
 8008ee8:	4610      	mov	r0, r2
 8008eea:	4798      	blx	r3
  }
}
 8008eec:	bf00      	nop
 8008eee:	3798      	adds	r7, #152	@ 0x98
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	20001ef4 	.word	0x20001ef4

08008ef8 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8008f02:	e00a      	b.n	8008f1a <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8008f04:	f107 030c 	add.w	r3, r7, #12
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6838      	ldr	r0, [r7, #0]
 8008f0c:	f000 fae8 	bl	80094e0 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	4619      	mov	r1, r3
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fa4f 	bl	80093b8 <list_insert_head>
  while (!list_is_empty(src_list))
 8008f1a:	6838      	ldr	r0, [r7, #0]
 8008f1c:	f000 fa2a 	bl	8009374 <list_is_empty>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d0ee      	beq.n	8008f04 <move_list+0xc>
  }
}
 8008f26:	bf00      	nop
 8008f28:	bf00      	nop
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008f36:	e009      	b.n	8008f4c <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8008f38:	1d3b      	adds	r3, r7, #4
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	4809      	ldr	r0, [pc, #36]	@ (8008f64 <free_event_list+0x34>)
 8008f3e:	f000 faa8 	bl	8009492 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4619      	mov	r1, r3
 8008f46:	4808      	ldr	r0, [pc, #32]	@ (8008f68 <free_event_list+0x38>)
 8008f48:	f000 fa5c 	bl	8009404 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008f4c:	4806      	ldr	r0, [pc, #24]	@ (8008f68 <free_event_list+0x38>)
 8008f4e:	f000 faee 	bl	800952e <list_get_size>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	ddef      	ble.n	8008f38 <free_event_list+0x8>
  }
}
 8008f58:	bf00      	nop
 8008f5a:	bf00      	nop
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	20001c30 	.word	0x20001c30
 8008f68:	20001c28 	.word	0x20001c28

08008f6c <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d002      	beq.n	8008f82 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8008f7c:	4a18      	ldr	r2, [pc, #96]	@ (8008fe0 <hci_init+0x74>)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8008f82:	4818      	ldr	r0, [pc, #96]	@ (8008fe4 <hci_init+0x78>)
 8008f84:	f000 f9e6 	bl	8009354 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8008f88:	4817      	ldr	r0, [pc, #92]	@ (8008fe8 <hci_init+0x7c>)
 8008f8a:	f000 f9e3 	bl	8009354 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8008f8e:	f7f8 fe31 	bl	8001bf4 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008f92:	2300      	movs	r3, #0
 8008f94:	73fb      	strb	r3, [r7, #15]
 8008f96:	e00c      	b.n	8008fb2 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8008f98:	7bfb      	ldrb	r3, [r7, #15]
 8008f9a:	228c      	movs	r2, #140	@ 0x8c
 8008f9c:	fb02 f303 	mul.w	r3, r2, r3
 8008fa0:	4a12      	ldr	r2, [pc, #72]	@ (8008fec <hci_init+0x80>)
 8008fa2:	4413      	add	r3, r2
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	480f      	ldr	r0, [pc, #60]	@ (8008fe4 <hci_init+0x78>)
 8008fa8:	f000 fa2c 	bl	8009404 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008fac:	7bfb      	ldrb	r3, [r7, #15]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	73fb      	strb	r3, [r7, #15]
 8008fb2:	7bfb      	ldrb	r3, [r7, #15]
 8008fb4:	2b04      	cmp	r3, #4
 8008fb6:	d9ef      	bls.n	8008f98 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8008fb8:	4b09      	ldr	r3, [pc, #36]	@ (8008fe0 <hci_init+0x74>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d003      	beq.n	8008fc8 <hci_init+0x5c>
 8008fc0:	4b07      	ldr	r3, [pc, #28]	@ (8008fe0 <hci_init+0x74>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8008fc8:	4b05      	ldr	r3, [pc, #20]	@ (8008fe0 <hci_init+0x74>)
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d002      	beq.n	8008fd6 <hci_init+0x6a>
 8008fd0:	4b03      	ldr	r3, [pc, #12]	@ (8008fe0 <hci_init+0x74>)
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	4798      	blx	r3
}
 8008fd6:	bf00      	nop
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	20001ef4 	.word	0x20001ef4
 8008fe4:	20001c28 	.word	0x20001c28
 8008fe8:	20001c30 	.word	0x20001c30
 8008fec:	20001c38 	.word	0x20001c38

08008ff0 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a0b      	ldr	r2, [pc, #44]	@ (800902c <hci_register_io_bus+0x3c>)
 8008ffe:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	4a09      	ldr	r2, [pc, #36]	@ (800902c <hci_register_io_bus+0x3c>)
 8009006:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	4a07      	ldr	r2, [pc, #28]	@ (800902c <hci_register_io_bus+0x3c>)
 800900e:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	699b      	ldr	r3, [r3, #24]
 8009014:	4a05      	ldr	r2, [pc, #20]	@ (800902c <hci_register_io_bus+0x3c>)
 8009016:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	4a03      	ldr	r2, [pc, #12]	@ (800902c <hci_register_io_bus+0x3c>)
 800901e:	6093      	str	r3, [r2, #8]
}
 8009020:	bf00      	nop
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	20001ef4 	.word	0x20001ef4

08009030 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b08e      	sub	sp, #56	@ 0x38
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	460b      	mov	r3, r1
 800903a:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	885b      	ldrh	r3, [r3, #2]
 8009040:	b21b      	sxth	r3, r3
 8009042:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009046:	b21a      	sxth	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	881b      	ldrh	r3, [r3, #0]
 800904c:	029b      	lsls	r3, r3, #10
 800904e:	b21b      	sxth	r3, r3
 8009050:	4313      	orrs	r3, r2
 8009052:	b21b      	sxth	r3, r3
 8009054:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8009056:	2300      	movs	r3, #0
 8009058:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800905a:	f107 0308 	add.w	r3, r7, #8
 800905e:	4618      	mov	r0, r3
 8009060:	f000 f978 	bl	8009354 <list_init_head>

  free_event_list();
 8009064:	f7ff ff64 	bl	8008f30 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	8818      	ldrh	r0, [r3, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	8859      	ldrh	r1, [r3, #2]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	b2da      	uxtb	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f7ff fefd 	bl	8008e78 <send_cmd>
  
  if (async)
 800907e:	78fb      	ldrb	r3, [r7, #3]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d001      	beq.n	8009088 <hci_send_req+0x58>
  {
    return 0;
 8009084:	2300      	movs	r3, #0
 8009086:	e0e2      	b.n	800924e <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8009088:	f7fa fb3c 	bl	8003704 <HAL_GetTick>
 800908c:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800908e:	f7fa fb39 	bl	8003704 <HAL_GetTick>
 8009092:	4602      	mov	r2, r0
 8009094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800909c:	f200 80b3 	bhi.w	8009206 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80090a0:	486d      	ldr	r0, [pc, #436]	@ (8009258 <hci_send_req+0x228>)
 80090a2:	f000 f967 	bl	8009374 <list_is_empty>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d000      	beq.n	80090ae <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80090ac:	e7ef      	b.n	800908e <hci_send_req+0x5e>
      {
        break;
 80090ae:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 80090b0:	f107 0310 	add.w	r3, r7, #16
 80090b4:	4619      	mov	r1, r3
 80090b6:	4868      	ldr	r0, [pc, #416]	@ (8009258 <hci_send_req+0x228>)
 80090b8:	f000 f9eb 	bl	8009492 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	3308      	adds	r3, #8
 80090c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 80090c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	2b04      	cmp	r3, #4
 80090c8:	d17f      	bne.n	80091ca <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 80090ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090cc:	3301      	adds	r3, #1
 80090ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	3308      	adds	r3, #8
 80090d4:	3303      	adds	r3, #3
 80090d6:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80090de:	3b03      	subs	r3, #3
 80090e0:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 80090e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80090e8:	d04c      	beq.n	8009184 <hci_send_req+0x154>
 80090ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80090ec:	dc68      	bgt.n	80091c0 <hci_send_req+0x190>
 80090ee:	2b10      	cmp	r3, #16
 80090f0:	f000 808b 	beq.w	800920a <hci_send_req+0x1da>
 80090f4:	2b10      	cmp	r3, #16
 80090f6:	dc63      	bgt.n	80091c0 <hci_send_req+0x190>
 80090f8:	2b0e      	cmp	r3, #14
 80090fa:	d023      	beq.n	8009144 <hci_send_req+0x114>
 80090fc:	2b0f      	cmp	r3, #15
 80090fe:	d15f      	bne.n	80091c0 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8009100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009102:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	885b      	ldrh	r3, [r3, #2]
 8009108:	b29b      	uxth	r3, r3
 800910a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800910c:	429a      	cmp	r2, r3
 800910e:	d17e      	bne.n	800920e <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	2b0f      	cmp	r3, #15
 8009116:	d004      	beq.n	8009122 <hci_send_req+0xf2>
          if (cs->status) {
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d051      	beq.n	80091c4 <hci_send_req+0x194>
            goto failed;
 8009120:	e078      	b.n	8009214 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	695a      	ldr	r2, [r3, #20]
 8009126:	6a3b      	ldr	r3, [r7, #32]
 8009128:	429a      	cmp	r2, r3
 800912a:	bf28      	it	cs
 800912c:	461a      	movcs	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6918      	ldr	r0, [r3, #16]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	461a      	mov	r2, r3
 800913c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800913e:	f004 fe38 	bl	800ddb2 <memcpy>
        goto done;
 8009142:	e078      	b.n	8009236 <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8009144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009146:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800914e:	b29b      	uxth	r3, r3
 8009150:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009152:	429a      	cmp	r2, r3
 8009154:	d15d      	bne.n	8009212 <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8009156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009158:	3303      	adds	r3, #3
 800915a:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800915c:	6a3b      	ldr	r3, [r7, #32]
 800915e:	3b03      	subs	r3, #3
 8009160:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	695a      	ldr	r2, [r3, #20]
 8009166:	6a3b      	ldr	r3, [r7, #32]
 8009168:	429a      	cmp	r2, r3
 800916a:	bf28      	it	cs
 800916c:	461a      	movcs	r2, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6918      	ldr	r0, [r3, #16]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	695b      	ldr	r3, [r3, #20]
 800917a:	461a      	mov	r2, r3
 800917c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800917e:	f004 fe18 	bl	800ddb2 <memcpy>
        goto done;
 8009182:	e058      	b.n	8009236 <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8009184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009186:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	461a      	mov	r2, r3
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	429a      	cmp	r2, r3
 8009194:	d118      	bne.n	80091c8 <hci_send_req+0x198>
          break;
      
        len -= 1;
 8009196:	6a3b      	ldr	r3, [r7, #32]
 8009198:	3b01      	subs	r3, #1
 800919a:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	695a      	ldr	r2, [r3, #20]
 80091a0:	6a3b      	ldr	r3, [r7, #32]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	bf28      	it	cs
 80091a6:	461a      	movcs	r2, r3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6918      	ldr	r0, [r3, #16]
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	1c59      	adds	r1, r3, #1
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	695b      	ldr	r3, [r3, #20]
 80091b8:	461a      	mov	r2, r3
 80091ba:	f004 fdfa 	bl	800ddb2 <memcpy>
        goto done;
 80091be:	e03a      	b.n	8009236 <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 80091c0:	bf00      	nop
 80091c2:	e002      	b.n	80091ca <hci_send_req+0x19a>
          break;
 80091c4:	bf00      	nop
 80091c6:	e000      	b.n	80091ca <hci_send_req+0x19a>
          break;
 80091c8:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 80091ca:	4824      	ldr	r0, [pc, #144]	@ (800925c <hci_send_req+0x22c>)
 80091cc:	f000 f8d2 	bl	8009374 <list_is_empty>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00d      	beq.n	80091f2 <hci_send_req+0x1c2>
 80091d6:	4820      	ldr	r0, [pc, #128]	@ (8009258 <hci_send_req+0x228>)
 80091d8:	f000 f8cc 	bl	8009374 <list_is_empty>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d007      	beq.n	80091f2 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	4619      	mov	r1, r3
 80091e6:	481d      	ldr	r0, [pc, #116]	@ (800925c <hci_send_req+0x22c>)
 80091e8:	f000 f90c 	bl	8009404 <list_insert_tail>
      hciReadPacket=NULL;
 80091ec:	2300      	movs	r3, #0
 80091ee:	613b      	str	r3, [r7, #16]
 80091f0:	e008      	b.n	8009204 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80091f2:	693a      	ldr	r2, [r7, #16]
 80091f4:	f107 0308 	add.w	r3, r7, #8
 80091f8:	4611      	mov	r1, r2
 80091fa:	4618      	mov	r0, r3
 80091fc:	f000 f902 	bl	8009404 <list_insert_tail>
      hciReadPacket=NULL;
 8009200:	2300      	movs	r3, #0
 8009202:	613b      	str	r3, [r7, #16]
  {
 8009204:	e740      	b.n	8009088 <hci_send_req+0x58>
        goto failed;
 8009206:	bf00      	nop
 8009208:	e004      	b.n	8009214 <hci_send_req+0x1e4>
        goto failed;
 800920a:	bf00      	nop
 800920c:	e002      	b.n	8009214 <hci_send_req+0x1e4>
          goto failed;
 800920e:	bf00      	nop
 8009210:	e000      	b.n	8009214 <hci_send_req+0x1e4>
          goto failed;
 8009212:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d004      	beq.n	8009224 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	4619      	mov	r1, r3
 800921e:	480f      	ldr	r0, [pc, #60]	@ (800925c <hci_send_req+0x22c>)
 8009220:	f000 f8ca 	bl	80093b8 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8009224:	f107 0308 	add.w	r3, r7, #8
 8009228:	4619      	mov	r1, r3
 800922a:	480b      	ldr	r0, [pc, #44]	@ (8009258 <hci_send_req+0x228>)
 800922c:	f7ff fe64 	bl	8008ef8 <move_list>

  return -1;
 8009230:	f04f 33ff 	mov.w	r3, #4294967295
 8009234:	e00b      	b.n	800924e <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	4619      	mov	r1, r3
 800923a:	4808      	ldr	r0, [pc, #32]	@ (800925c <hci_send_req+0x22c>)
 800923c:	f000 f8bc 	bl	80093b8 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8009240:	f107 0308 	add.w	r3, r7, #8
 8009244:	4619      	mov	r1, r3
 8009246:	4804      	ldr	r0, [pc, #16]	@ (8009258 <hci_send_req+0x228>)
 8009248:	f7ff fe56 	bl	8008ef8 <move_list>

  return 0;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3738      	adds	r7, #56	@ 0x38
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	20001c30 	.word	0x20001c30
 800925c:	20001c28 	.word	0x20001c28

08009260 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8009266:	2300      	movs	r3, #0
 8009268:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800926a:	e013      	b.n	8009294 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800926c:	1d3b      	adds	r3, r7, #4
 800926e:	4619      	mov	r1, r3
 8009270:	480e      	ldr	r0, [pc, #56]	@ (80092ac <hci_user_evt_proc+0x4c>)
 8009272:	f000 f90e 	bl	8009492 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009276:	4b0e      	ldr	r3, [pc, #56]	@ (80092b0 <hci_user_evt_proc+0x50>)
 8009278:	69db      	ldr	r3, [r3, #28]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d005      	beq.n	800928a <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800927e:	4b0c      	ldr	r3, [pc, #48]	@ (80092b0 <hci_user_evt_proc+0x50>)
 8009280:	69db      	ldr	r3, [r3, #28]
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	3208      	adds	r2, #8
 8009286:	4610      	mov	r0, r2
 8009288:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4619      	mov	r1, r3
 800928e:	4809      	ldr	r0, [pc, #36]	@ (80092b4 <hci_user_evt_proc+0x54>)
 8009290:	f000 f8b8 	bl	8009404 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8009294:	4805      	ldr	r0, [pc, #20]	@ (80092ac <hci_user_evt_proc+0x4c>)
 8009296:	f000 f86d 	bl	8009374 <list_is_empty>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d0e5      	beq.n	800926c <hci_user_evt_proc+0xc>
  }
}
 80092a0:	bf00      	nop
 80092a2:	bf00      	nop
 80092a4:	3708      	adds	r7, #8
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	20001c30 	.word	0x20001c30
 80092b0:	20001ef4 	.word	0x20001ef4
 80092b4:	20001c28 	.word	0x20001c28

080092b8 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b086      	sub	sp, #24
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 80092c0:	2300      	movs	r3, #0
 80092c2:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 80092c4:	2300      	movs	r3, #0
 80092c6:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 80092c8:	481f      	ldr	r0, [pc, #124]	@ (8009348 <hci_notify_asynch_evt+0x90>)
 80092ca:	f000 f853 	bl	8009374 <list_is_empty>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d132      	bne.n	800933a <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 80092d4:	f107 030c 	add.w	r3, r7, #12
 80092d8:	4619      	mov	r1, r3
 80092da:	481b      	ldr	r0, [pc, #108]	@ (8009348 <hci_notify_asynch_evt+0x90>)
 80092dc:	f000 f8d9 	bl	8009492 <list_remove_head>
    
    if (hciContext.io.Receive)
 80092e0:	4b1a      	ldr	r3, [pc, #104]	@ (800934c <hci_notify_asynch_evt+0x94>)
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d02a      	beq.n	800933e <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 80092e8:	4b18      	ldr	r3, [pc, #96]	@ (800934c <hci_notify_asynch_evt+0x94>)
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	3208      	adds	r2, #8
 80092f0:	2180      	movs	r1, #128	@ 0x80
 80092f2:	4610      	mov	r0, r2
 80092f4:	4798      	blx	r3
 80092f6:	4603      	mov	r3, r0
 80092f8:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 80092fa:	7cfb      	ldrb	r3, [r7, #19]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d016      	beq.n	800932e <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	7cfa      	ldrb	r2, [r7, #19]
 8009304:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	4618      	mov	r0, r3
 800930c:	f7ff fd94 	bl	8008e38 <verify_packet>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d105      	bne.n	8009322 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	4619      	mov	r1, r3
 800931a:	480d      	ldr	r0, [pc, #52]	@ (8009350 <hci_notify_asynch_evt+0x98>)
 800931c:	f000 f872 	bl	8009404 <list_insert_tail>
 8009320:	e00d      	b.n	800933e <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	4619      	mov	r1, r3
 8009326:	4808      	ldr	r0, [pc, #32]	@ (8009348 <hci_notify_asynch_evt+0x90>)
 8009328:	f000 f846 	bl	80093b8 <list_insert_head>
 800932c:	e007      	b.n	800933e <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	4619      	mov	r1, r3
 8009332:	4805      	ldr	r0, [pc, #20]	@ (8009348 <hci_notify_asynch_evt+0x90>)
 8009334:	f000 f840 	bl	80093b8 <list_insert_head>
 8009338:	e001      	b.n	800933e <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800933a:	2301      	movs	r3, #1
 800933c:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800933e:	697b      	ldr	r3, [r7, #20]

}
 8009340:	4618      	mov	r0, r3
 8009342:	3718      	adds	r7, #24
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	20001c28 	.word	0x20001c28
 800934c:	20001ef4 	.word	0x20001ef4
 8009350:	20001c30 	.word	0x20001c30

08009354 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	605a      	str	r2, [r3, #4]
}
 8009368:	bf00      	nop
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8009374:	b480      	push	{r7}
 8009376:	b087      	sub	sp, #28
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800937c:	f3ef 8310 	mrs	r3, PRIMASK
 8009380:	60fb      	str	r3, [r7, #12]
  return(result);
 8009382:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009384:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009386:	b672      	cpsid	i
}
 8009388:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	429a      	cmp	r2, r3
 8009392:	d102      	bne.n	800939a <list_is_empty+0x26>
  {
    return_value = 1;
 8009394:	2301      	movs	r3, #1
 8009396:	75fb      	strb	r3, [r7, #23]
 8009398:	e001      	b.n	800939e <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800939a:	2300      	movs	r3, #0
 800939c:	75fb      	strb	r3, [r7, #23]
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	f383 8810 	msr	PRIMASK, r3
}
 80093a8:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 80093aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	371c      	adds	r7, #28
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b087      	sub	sp, #28
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093c2:	f3ef 8310 	mrs	r3, PRIMASK
 80093c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80093c8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80093ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80093cc:	b672      	cpsid	i
}
 80093ce:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	683a      	ldr	r2, [r7, #0]
 80093e2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	683a      	ldr	r2, [r7, #0]
 80093ea:	605a      	str	r2, [r3, #4]
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	f383 8810 	msr	PRIMASK, r3
}
 80093f6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80093f8:	bf00      	nop
 80093fa:	371c      	adds	r7, #28
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8009404:	b480      	push	{r7}
 8009406:	b087      	sub	sp, #28
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800940e:	f3ef 8310 	mrs	r3, PRIMASK
 8009412:	60fb      	str	r3, [r7, #12]
  return(result);
 8009414:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009416:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009418:	b672      	cpsid	i
}
 800941a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	685a      	ldr	r2, [r3, #4]
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	683a      	ldr	r2, [r7, #0]
 800942e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	683a      	ldr	r2, [r7, #0]
 8009436:	601a      	str	r2, [r3, #0]
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	f383 8810 	msr	PRIMASK, r3
}
 8009442:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009444:	bf00      	nop
 8009446:	371c      	adds	r7, #28
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8009450:	b480      	push	{r7}
 8009452:	b087      	sub	sp, #28
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009458:	f3ef 8310 	mrs	r3, PRIMASK
 800945c:	60fb      	str	r3, [r7, #12]
  return(result);
 800945e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009460:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009462:	b672      	cpsid	i
}
 8009464:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	6812      	ldr	r2, [r2, #0]
 800946e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	6852      	ldr	r2, [r2, #4]
 8009478:	605a      	str	r2, [r3, #4]
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	f383 8810 	msr	PRIMASK, r3
}
 8009484:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009486:	bf00      	nop
 8009488:	371c      	adds	r7, #28
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b086      	sub	sp, #24
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800949c:	f3ef 8310 	mrs	r3, PRIMASK
 80094a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80094a2:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80094a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80094a6:	b672      	cpsid	i
}
 80094a8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7ff ffca 	bl	8009450 <list_remove_node>
  (*node)->next = NULL;
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2200      	movs	r2, #0
 80094c2:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2200      	movs	r2, #0
 80094ca:	605a      	str	r2, [r3, #4]
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	f383 8810 	msr	PRIMASK, r3
}
 80094d6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80094d8:	bf00      	nop
 80094da:	3718      	adds	r7, #24
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b086      	sub	sp, #24
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094ea:	f3ef 8310 	mrs	r3, PRIMASK
 80094ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80094f0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80094f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80094f4:	b672      	cpsid	i
}
 80094f6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	685a      	ldr	r2, [r3, #4]
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	4618      	mov	r0, r3
 8009506:	f7ff ffa3 	bl	8009450 <list_remove_node>
  (*node)->next = NULL;
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2200      	movs	r2, #0
 8009510:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2200      	movs	r2, #0
 8009518:	605a      	str	r2, [r3, #4]
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	f383 8810 	msr	PRIMASK, r3
}
 8009524:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009526:	bf00      	nop
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800952e:	b480      	push	{r7}
 8009530:	b089      	sub	sp, #36	@ 0x24
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
  int size = 0;
 8009536:	2300      	movs	r3, #0
 8009538:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800953a:	f3ef 8310 	mrs	r3, PRIMASK
 800953e:	613b      	str	r3, [r7, #16]
  return(result);
 8009540:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009542:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009544:	b672      	cpsid	i
}
 8009546:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800954e:	e005      	b.n	800955c <list_get_size+0x2e>
  {
    size++;
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	3301      	adds	r3, #1
 8009554:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800955c:	69ba      	ldr	r2, [r7, #24]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	429a      	cmp	r2, r3
 8009562:	d1f5      	bne.n	8009550 <list_get_size+0x22>
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f383 8810 	msr	PRIMASK, r3
}
 800956e:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8009570:	69fb      	ldr	r3, [r7, #28]
}
 8009572:	4618      	mov	r0, r3
 8009574:	3724      	adds	r7, #36	@ 0x24
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
	...

08009580 <__NVIC_SetPriority>:
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	4603      	mov	r3, r0
 8009588:	6039      	str	r1, [r7, #0]
 800958a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800958c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009590:	2b00      	cmp	r3, #0
 8009592:	db0a      	blt.n	80095aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	b2da      	uxtb	r2, r3
 8009598:	490c      	ldr	r1, [pc, #48]	@ (80095cc <__NVIC_SetPriority+0x4c>)
 800959a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800959e:	0112      	lsls	r2, r2, #4
 80095a0:	b2d2      	uxtb	r2, r2
 80095a2:	440b      	add	r3, r1
 80095a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80095a8:	e00a      	b.n	80095c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	b2da      	uxtb	r2, r3
 80095ae:	4908      	ldr	r1, [pc, #32]	@ (80095d0 <__NVIC_SetPriority+0x50>)
 80095b0:	79fb      	ldrb	r3, [r7, #7]
 80095b2:	f003 030f 	and.w	r3, r3, #15
 80095b6:	3b04      	subs	r3, #4
 80095b8:	0112      	lsls	r2, r2, #4
 80095ba:	b2d2      	uxtb	r2, r2
 80095bc:	440b      	add	r3, r1
 80095be:	761a      	strb	r2, [r3, #24]
}
 80095c0:	bf00      	nop
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr
 80095cc:	e000e100 	.word	0xe000e100
 80095d0:	e000ed00 	.word	0xe000ed00

080095d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80095d4:	b580      	push	{r7, lr}
 80095d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80095d8:	2100      	movs	r1, #0
 80095da:	f06f 0004 	mvn.w	r0, #4
 80095de:	f7ff ffcf 	bl	8009580 <__NVIC_SetPriority>
#endif
}
 80095e2:	bf00      	nop
 80095e4:	bd80      	pop	{r7, pc}
	...

080095e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095ee:	f3ef 8305 	mrs	r3, IPSR
 80095f2:	603b      	str	r3, [r7, #0]
  return(result);
 80095f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d003      	beq.n	8009602 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80095fa:	f06f 0305 	mvn.w	r3, #5
 80095fe:	607b      	str	r3, [r7, #4]
 8009600:	e00c      	b.n	800961c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009602:	4b0a      	ldr	r3, [pc, #40]	@ (800962c <osKernelInitialize+0x44>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d105      	bne.n	8009616 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800960a:	4b08      	ldr	r3, [pc, #32]	@ (800962c <osKernelInitialize+0x44>)
 800960c:	2201      	movs	r2, #1
 800960e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009610:	2300      	movs	r3, #0
 8009612:	607b      	str	r3, [r7, #4]
 8009614:	e002      	b.n	800961c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009616:	f04f 33ff 	mov.w	r3, #4294967295
 800961a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800961c:	687b      	ldr	r3, [r7, #4]
}
 800961e:	4618      	mov	r0, r3
 8009620:	370c      	adds	r7, #12
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	20001f14 	.word	0x20001f14

08009630 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009636:	f3ef 8305 	mrs	r3, IPSR
 800963a:	603b      	str	r3, [r7, #0]
  return(result);
 800963c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800963e:	2b00      	cmp	r3, #0
 8009640:	d003      	beq.n	800964a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009642:	f06f 0305 	mvn.w	r3, #5
 8009646:	607b      	str	r3, [r7, #4]
 8009648:	e010      	b.n	800966c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800964a:	4b0b      	ldr	r3, [pc, #44]	@ (8009678 <osKernelStart+0x48>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2b01      	cmp	r3, #1
 8009650:	d109      	bne.n	8009666 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009652:	f7ff ffbf 	bl	80095d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009656:	4b08      	ldr	r3, [pc, #32]	@ (8009678 <osKernelStart+0x48>)
 8009658:	2202      	movs	r2, #2
 800965a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800965c:	f001 fcca 	bl	800aff4 <vTaskStartScheduler>
      stat = osOK;
 8009660:	2300      	movs	r3, #0
 8009662:	607b      	str	r3, [r7, #4]
 8009664:	e002      	b.n	800966c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009666:	f04f 33ff 	mov.w	r3, #4294967295
 800966a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800966c:	687b      	ldr	r3, [r7, #4]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3708      	adds	r7, #8
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	20001f14 	.word	0x20001f14

0800967c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800967c:	b580      	push	{r7, lr}
 800967e:	b08e      	sub	sp, #56	@ 0x38
 8009680:	af04      	add	r7, sp, #16
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009688:	2300      	movs	r3, #0
 800968a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800968c:	f3ef 8305 	mrs	r3, IPSR
 8009690:	617b      	str	r3, [r7, #20]
  return(result);
 8009692:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009694:	2b00      	cmp	r3, #0
 8009696:	d17e      	bne.n	8009796 <osThreadNew+0x11a>
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d07b      	beq.n	8009796 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800969e:	2380      	movs	r3, #128	@ 0x80
 80096a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80096a2:	2318      	movs	r3, #24
 80096a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80096a6:	2300      	movs	r3, #0
 80096a8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80096aa:	f04f 33ff 	mov.w	r3, #4294967295
 80096ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d045      	beq.n	8009742 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d002      	beq.n	80096c4 <osThreadNew+0x48>
        name = attr->name;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	699b      	ldr	r3, [r3, #24]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d002      	beq.n	80096d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d008      	beq.n	80096ea <osThreadNew+0x6e>
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	2b38      	cmp	r3, #56	@ 0x38
 80096dc:	d805      	bhi.n	80096ea <osThreadNew+0x6e>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	f003 0301 	and.w	r3, r3, #1
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d001      	beq.n	80096ee <osThreadNew+0x72>
        return (NULL);
 80096ea:	2300      	movs	r3, #0
 80096ec:	e054      	b.n	8009798 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	695b      	ldr	r3, [r3, #20]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d003      	beq.n	80096fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	695b      	ldr	r3, [r3, #20]
 80096fa:	089b      	lsrs	r3, r3, #2
 80096fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00e      	beq.n	8009724 <osThreadNew+0xa8>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	2b5b      	cmp	r3, #91	@ 0x5b
 800970c:	d90a      	bls.n	8009724 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009712:	2b00      	cmp	r3, #0
 8009714:	d006      	beq.n	8009724 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	695b      	ldr	r3, [r3, #20]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d002      	beq.n	8009724 <osThreadNew+0xa8>
        mem = 1;
 800971e:	2301      	movs	r3, #1
 8009720:	61bb      	str	r3, [r7, #24]
 8009722:	e010      	b.n	8009746 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d10c      	bne.n	8009746 <osThreadNew+0xca>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d108      	bne.n	8009746 <osThreadNew+0xca>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	691b      	ldr	r3, [r3, #16]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d104      	bne.n	8009746 <osThreadNew+0xca>
          mem = 0;
 800973c:	2300      	movs	r3, #0
 800973e:	61bb      	str	r3, [r7, #24]
 8009740:	e001      	b.n	8009746 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009742:	2300      	movs	r3, #0
 8009744:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	2b01      	cmp	r3, #1
 800974a:	d110      	bne.n	800976e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009754:	9202      	str	r2, [sp, #8]
 8009756:	9301      	str	r3, [sp, #4]
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	9300      	str	r3, [sp, #0]
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	6a3a      	ldr	r2, [r7, #32]
 8009760:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f001 fa6a 	bl	800ac3c <xTaskCreateStatic>
 8009768:	4603      	mov	r3, r0
 800976a:	613b      	str	r3, [r7, #16]
 800976c:	e013      	b.n	8009796 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d110      	bne.n	8009796 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009774:	6a3b      	ldr	r3, [r7, #32]
 8009776:	b29a      	uxth	r2, r3
 8009778:	f107 0310 	add.w	r3, r7, #16
 800977c:	9301      	str	r3, [sp, #4]
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	9300      	str	r3, [sp, #0]
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	f001 fab8 	bl	800acfc <xTaskCreate>
 800978c:	4603      	mov	r3, r0
 800978e:	2b01      	cmp	r3, #1
 8009790:	d001      	beq.n	8009796 <osThreadNew+0x11a>
            hTask = NULL;
 8009792:	2300      	movs	r3, #0
 8009794:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009796:	693b      	ldr	r3, [r7, #16]
}
 8009798:	4618      	mov	r0, r3
 800979a:	3728      	adds	r7, #40	@ 0x28
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097a8:	f3ef 8305 	mrs	r3, IPSR
 80097ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80097ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d003      	beq.n	80097bc <osDelay+0x1c>
    stat = osErrorISR;
 80097b4:	f06f 0305 	mvn.w	r3, #5
 80097b8:	60fb      	str	r3, [r7, #12]
 80097ba:	e007      	b.n	80097cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80097bc:	2300      	movs	r3, #0
 80097be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d002      	beq.n	80097cc <osDelay+0x2c>
      vTaskDelay(ticks);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f001 fbde 	bl	800af88 <vTaskDelay>
    }
  }

  return (stat);
 80097cc:	68fb      	ldr	r3, [r7, #12]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b08a      	sub	sp, #40	@ 0x28
 80097da:	af02      	add	r7, sp, #8
 80097dc:	60f8      	str	r0, [r7, #12]
 80097de:	60b9      	str	r1, [r7, #8]
 80097e0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80097e2:	2300      	movs	r3, #0
 80097e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097e6:	f3ef 8305 	mrs	r3, IPSR
 80097ea:	613b      	str	r3, [r7, #16]
  return(result);
 80097ec:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d175      	bne.n	80098de <osSemaphoreNew+0x108>
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d072      	beq.n	80098de <osSemaphoreNew+0x108>
 80097f8:	68ba      	ldr	r2, [r7, #8]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d86e      	bhi.n	80098de <osSemaphoreNew+0x108>
    mem = -1;
 8009800:	f04f 33ff 	mov.w	r3, #4294967295
 8009804:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d015      	beq.n	8009838 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d006      	beq.n	8009822 <osSemaphoreNew+0x4c>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	2b4f      	cmp	r3, #79	@ 0x4f
 800981a:	d902      	bls.n	8009822 <osSemaphoreNew+0x4c>
        mem = 1;
 800981c:	2301      	movs	r3, #1
 800981e:	61bb      	str	r3, [r7, #24]
 8009820:	e00c      	b.n	800983c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d108      	bne.n	800983c <osSemaphoreNew+0x66>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d104      	bne.n	800983c <osSemaphoreNew+0x66>
          mem = 0;
 8009832:	2300      	movs	r3, #0
 8009834:	61bb      	str	r3, [r7, #24]
 8009836:	e001      	b.n	800983c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009838:	2300      	movs	r3, #0
 800983a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800983c:	69bb      	ldr	r3, [r7, #24]
 800983e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009842:	d04c      	beq.n	80098de <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2b01      	cmp	r3, #1
 8009848:	d128      	bne.n	800989c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d10a      	bne.n	8009866 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	2203      	movs	r2, #3
 8009856:	9200      	str	r2, [sp, #0]
 8009858:	2200      	movs	r2, #0
 800985a:	2100      	movs	r1, #0
 800985c:	2001      	movs	r0, #1
 800985e:	f000 fa2b 	bl	8009cb8 <xQueueGenericCreateStatic>
 8009862:	61f8      	str	r0, [r7, #28]
 8009864:	e005      	b.n	8009872 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009866:	2203      	movs	r2, #3
 8009868:	2100      	movs	r1, #0
 800986a:	2001      	movs	r0, #1
 800986c:	f000 faa1 	bl	8009db2 <xQueueGenericCreate>
 8009870:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d022      	beq.n	80098be <osSemaphoreNew+0xe8>
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d01f      	beq.n	80098be <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800987e:	2300      	movs	r3, #0
 8009880:	2200      	movs	r2, #0
 8009882:	2100      	movs	r1, #0
 8009884:	69f8      	ldr	r0, [r7, #28]
 8009886:	f000 fb61 	bl	8009f4c <xQueueGenericSend>
 800988a:	4603      	mov	r3, r0
 800988c:	2b01      	cmp	r3, #1
 800988e:	d016      	beq.n	80098be <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009890:	69f8      	ldr	r0, [r7, #28]
 8009892:	f000 ffff 	bl	800a894 <vQueueDelete>
            hSemaphore = NULL;
 8009896:	2300      	movs	r3, #0
 8009898:	61fb      	str	r3, [r7, #28]
 800989a:	e010      	b.n	80098be <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d108      	bne.n	80098b4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	461a      	mov	r2, r3
 80098a8:	68b9      	ldr	r1, [r7, #8]
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	f000 fadf 	bl	8009e6e <xQueueCreateCountingSemaphoreStatic>
 80098b0:	61f8      	str	r0, [r7, #28]
 80098b2:	e004      	b.n	80098be <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80098b4:	68b9      	ldr	r1, [r7, #8]
 80098b6:	68f8      	ldr	r0, [r7, #12]
 80098b8:	f000 fb12 	bl	8009ee0 <xQueueCreateCountingSemaphore>
 80098bc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00c      	beq.n	80098de <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d003      	beq.n	80098d2 <osSemaphoreNew+0xfc>
          name = attr->name;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	617b      	str	r3, [r7, #20]
 80098d0:	e001      	b.n	80098d6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80098d2:	2300      	movs	r3, #0
 80098d4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80098d6:	6979      	ldr	r1, [r7, #20]
 80098d8:	69f8      	ldr	r0, [r7, #28]
 80098da:	f001 f927 	bl	800ab2c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80098de:	69fb      	ldr	r3, [r7, #28]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3720      	adds	r7, #32
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b086      	sub	sp, #24
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80098f6:	2300      	movs	r3, #0
 80098f8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d103      	bne.n	8009908 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009900:	f06f 0303 	mvn.w	r3, #3
 8009904:	617b      	str	r3, [r7, #20]
 8009906:	e039      	b.n	800997c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009908:	f3ef 8305 	mrs	r3, IPSR
 800990c:	60fb      	str	r3, [r7, #12]
  return(result);
 800990e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009910:	2b00      	cmp	r3, #0
 8009912:	d022      	beq.n	800995a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d003      	beq.n	8009922 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800991a:	f06f 0303 	mvn.w	r3, #3
 800991e:	617b      	str	r3, [r7, #20]
 8009920:	e02c      	b.n	800997c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009922:	2300      	movs	r3, #0
 8009924:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009926:	f107 0308 	add.w	r3, r7, #8
 800992a:	461a      	mov	r2, r3
 800992c:	2100      	movs	r1, #0
 800992e:	6938      	ldr	r0, [r7, #16]
 8009930:	f000 ff2e 	bl	800a790 <xQueueReceiveFromISR>
 8009934:	4603      	mov	r3, r0
 8009936:	2b01      	cmp	r3, #1
 8009938:	d003      	beq.n	8009942 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800993a:	f06f 0302 	mvn.w	r3, #2
 800993e:	617b      	str	r3, [r7, #20]
 8009940:	e01c      	b.n	800997c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d019      	beq.n	800997c <osSemaphoreAcquire+0x94>
 8009948:	4b0f      	ldr	r3, [pc, #60]	@ (8009988 <osSemaphoreAcquire+0xa0>)
 800994a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800994e:	601a      	str	r2, [r3, #0]
 8009950:	f3bf 8f4f 	dsb	sy
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	e010      	b.n	800997c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800995a:	6839      	ldr	r1, [r7, #0]
 800995c:	6938      	ldr	r0, [r7, #16]
 800995e:	f000 fe07 	bl	800a570 <xQueueSemaphoreTake>
 8009962:	4603      	mov	r3, r0
 8009964:	2b01      	cmp	r3, #1
 8009966:	d009      	beq.n	800997c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d003      	beq.n	8009976 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800996e:	f06f 0301 	mvn.w	r3, #1
 8009972:	617b      	str	r3, [r7, #20]
 8009974:	e002      	b.n	800997c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009976:	f06f 0302 	mvn.w	r3, #2
 800997a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800997c:	697b      	ldr	r3, [r7, #20]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3718      	adds	r7, #24
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	e000ed04 	.word	0xe000ed04

0800998c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009998:	2300      	movs	r3, #0
 800999a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d103      	bne.n	80099aa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80099a2:	f06f 0303 	mvn.w	r3, #3
 80099a6:	617b      	str	r3, [r7, #20]
 80099a8:	e02c      	b.n	8009a04 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099aa:	f3ef 8305 	mrs	r3, IPSR
 80099ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80099b0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d01a      	beq.n	80099ec <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80099b6:	2300      	movs	r3, #0
 80099b8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80099ba:	f107 0308 	add.w	r3, r7, #8
 80099be:	4619      	mov	r1, r3
 80099c0:	6938      	ldr	r0, [r7, #16]
 80099c2:	f000 fc63 	bl	800a28c <xQueueGiveFromISR>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d003      	beq.n	80099d4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80099cc:	f06f 0302 	mvn.w	r3, #2
 80099d0:	617b      	str	r3, [r7, #20]
 80099d2:	e017      	b.n	8009a04 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d014      	beq.n	8009a04 <osSemaphoreRelease+0x78>
 80099da:	4b0d      	ldr	r3, [pc, #52]	@ (8009a10 <osSemaphoreRelease+0x84>)
 80099dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099e0:	601a      	str	r2, [r3, #0]
 80099e2:	f3bf 8f4f 	dsb	sy
 80099e6:	f3bf 8f6f 	isb	sy
 80099ea:	e00b      	b.n	8009a04 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80099ec:	2300      	movs	r3, #0
 80099ee:	2200      	movs	r2, #0
 80099f0:	2100      	movs	r1, #0
 80099f2:	6938      	ldr	r0, [r7, #16]
 80099f4:	f000 faaa 	bl	8009f4c <xQueueGenericSend>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d002      	beq.n	8009a04 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80099fe:	f06f 0302 	mvn.w	r3, #2
 8009a02:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009a04:	697b      	ldr	r3, [r7, #20]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3718      	adds	r7, #24
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	e000ed04 	.word	0xe000ed04

08009a14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	4a07      	ldr	r2, [pc, #28]	@ (8009a40 <vApplicationGetIdleTaskMemory+0x2c>)
 8009a24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	4a06      	ldr	r2, [pc, #24]	@ (8009a44 <vApplicationGetIdleTaskMemory+0x30>)
 8009a2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2280      	movs	r2, #128	@ 0x80
 8009a30:	601a      	str	r2, [r3, #0]
}
 8009a32:	bf00      	nop
 8009a34:	3714      	adds	r7, #20
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	20001f18 	.word	0x20001f18
 8009a44:	20001f74 	.word	0x20001f74

08009a48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	4a07      	ldr	r2, [pc, #28]	@ (8009a74 <vApplicationGetTimerTaskMemory+0x2c>)
 8009a58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	4a06      	ldr	r2, [pc, #24]	@ (8009a78 <vApplicationGetTimerTaskMemory+0x30>)
 8009a5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009a66:	601a      	str	r2, [r3, #0]
}
 8009a68:	bf00      	nop
 8009a6a:	3714      	adds	r7, #20
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr
 8009a74:	20002174 	.word	0x20002174
 8009a78:	200021d0 	.word	0x200021d0

08009a7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f103 0208 	add.w	r2, r3, #8
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f04f 32ff 	mov.w	r2, #4294967295
 8009a94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f103 0208 	add.w	r2, r3, #8
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f103 0208 	add.w	r2, r3, #8
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009ab0:	bf00      	nop
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009aca:	bf00      	nop
 8009acc:	370c      	adds	r7, #12
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr

08009ad6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ad6:	b480      	push	{r7}
 8009ad8:	b085      	sub	sp, #20
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
 8009ade:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	689a      	ldr	r2, [r3, #8]
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	683a      	ldr	r2, [r7, #0]
 8009afa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	683a      	ldr	r2, [r7, #0]
 8009b00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	1c5a      	adds	r2, r3, #1
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	601a      	str	r2, [r3, #0]
}
 8009b12:	bf00      	nop
 8009b14:	3714      	adds	r7, #20
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr

08009b1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b1e:	b480      	push	{r7}
 8009b20:	b085      	sub	sp, #20
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
 8009b26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b34:	d103      	bne.n	8009b3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	60fb      	str	r3, [r7, #12]
 8009b3c:	e00c      	b.n	8009b58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	3308      	adds	r3, #8
 8009b42:	60fb      	str	r3, [r7, #12]
 8009b44:	e002      	b.n	8009b4c <vListInsert+0x2e>
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	60fb      	str	r3, [r7, #12]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68ba      	ldr	r2, [r7, #8]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d2f6      	bcs.n	8009b46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	685a      	ldr	r2, [r3, #4]
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	683a      	ldr	r2, [r7, #0]
 8009b66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	68fa      	ldr	r2, [r7, #12]
 8009b6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	683a      	ldr	r2, [r7, #0]
 8009b72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	1c5a      	adds	r2, r3, #1
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	601a      	str	r2, [r3, #0]
}
 8009b84:	bf00      	nop
 8009b86:	3714      	adds	r7, #20
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	6892      	ldr	r2, [r2, #8]
 8009ba6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	6852      	ldr	r2, [r2, #4]
 8009bb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d103      	bne.n	8009bc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	689a      	ldr	r2, [r3, #8]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	1e5a      	subs	r2, r3, #1
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3714      	adds	r7, #20
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d10b      	bne.n	8009c10 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bfc:	f383 8811 	msr	BASEPRI, r3
 8009c00:	f3bf 8f6f 	isb	sy
 8009c04:	f3bf 8f4f 	dsb	sy
 8009c08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009c0a:	bf00      	nop
 8009c0c:	bf00      	nop
 8009c0e:	e7fd      	b.n	8009c0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009c10:	f002 fcaa 	bl	800c568 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c1c:	68f9      	ldr	r1, [r7, #12]
 8009c1e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009c20:	fb01 f303 	mul.w	r3, r1, r3
 8009c24:	441a      	add	r2, r3
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c40:	3b01      	subs	r3, #1
 8009c42:	68f9      	ldr	r1, [r7, #12]
 8009c44:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009c46:	fb01 f303 	mul.w	r3, r1, r3
 8009c4a:	441a      	add	r2, r3
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	22ff      	movs	r2, #255	@ 0xff
 8009c54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	22ff      	movs	r2, #255	@ 0xff
 8009c5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d114      	bne.n	8009c90 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	691b      	ldr	r3, [r3, #16]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d01a      	beq.n	8009ca4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	3310      	adds	r3, #16
 8009c72:	4618      	mov	r0, r3
 8009c74:	f001 fc4c 	bl	800b510 <xTaskRemoveFromEventList>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d012      	beq.n	8009ca4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8009cb4 <xQueueGenericReset+0xd0>)
 8009c80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c84:	601a      	str	r2, [r3, #0]
 8009c86:	f3bf 8f4f 	dsb	sy
 8009c8a:	f3bf 8f6f 	isb	sy
 8009c8e:	e009      	b.n	8009ca4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	3310      	adds	r3, #16
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7ff fef1 	bl	8009a7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	3324      	adds	r3, #36	@ 0x24
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7ff feec 	bl	8009a7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009ca4:	f002 fc92 	bl	800c5cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009ca8:	2301      	movs	r3, #1
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	e000ed04 	.word	0xe000ed04

08009cb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b08e      	sub	sp, #56	@ 0x38
 8009cbc:	af02      	add	r7, sp, #8
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	607a      	str	r2, [r7, #4]
 8009cc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10b      	bne.n	8009ce4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009cde:	bf00      	nop
 8009ce0:	bf00      	nop
 8009ce2:	e7fd      	b.n	8009ce0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d10b      	bne.n	8009d02 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cee:	f383 8811 	msr	BASEPRI, r3
 8009cf2:	f3bf 8f6f 	isb	sy
 8009cf6:	f3bf 8f4f 	dsb	sy
 8009cfa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009cfc:	bf00      	nop
 8009cfe:	bf00      	nop
 8009d00:	e7fd      	b.n	8009cfe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d002      	beq.n	8009d0e <xQueueGenericCreateStatic+0x56>
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d001      	beq.n	8009d12 <xQueueGenericCreateStatic+0x5a>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e000      	b.n	8009d14 <xQueueGenericCreateStatic+0x5c>
 8009d12:	2300      	movs	r3, #0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10b      	bne.n	8009d30 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	623b      	str	r3, [r7, #32]
}
 8009d2a:	bf00      	nop
 8009d2c:	bf00      	nop
 8009d2e:	e7fd      	b.n	8009d2c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d102      	bne.n	8009d3c <xQueueGenericCreateStatic+0x84>
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d101      	bne.n	8009d40 <xQueueGenericCreateStatic+0x88>
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e000      	b.n	8009d42 <xQueueGenericCreateStatic+0x8a>
 8009d40:	2300      	movs	r3, #0
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d10b      	bne.n	8009d5e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d4a:	f383 8811 	msr	BASEPRI, r3
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f3bf 8f4f 	dsb	sy
 8009d56:	61fb      	str	r3, [r7, #28]
}
 8009d58:	bf00      	nop
 8009d5a:	bf00      	nop
 8009d5c:	e7fd      	b.n	8009d5a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009d5e:	2350      	movs	r3, #80	@ 0x50
 8009d60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	2b50      	cmp	r3, #80	@ 0x50
 8009d66:	d00b      	beq.n	8009d80 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d6c:	f383 8811 	msr	BASEPRI, r3
 8009d70:	f3bf 8f6f 	isb	sy
 8009d74:	f3bf 8f4f 	dsb	sy
 8009d78:	61bb      	str	r3, [r7, #24]
}
 8009d7a:	bf00      	nop
 8009d7c:	bf00      	nop
 8009d7e:	e7fd      	b.n	8009d7c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009d80:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00d      	beq.n	8009da8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d8e:	2201      	movs	r2, #1
 8009d90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d94:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	68b9      	ldr	r1, [r7, #8]
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f000 f840 	bl	8009e28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3730      	adds	r7, #48	@ 0x30
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b08a      	sub	sp, #40	@ 0x28
 8009db6:	af02      	add	r7, sp, #8
 8009db8:	60f8      	str	r0, [r7, #12]
 8009dba:	60b9      	str	r1, [r7, #8]
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d10b      	bne.n	8009dde <xQueueGenericCreate+0x2c>
	__asm volatile
 8009dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dca:	f383 8811 	msr	BASEPRI, r3
 8009dce:	f3bf 8f6f 	isb	sy
 8009dd2:	f3bf 8f4f 	dsb	sy
 8009dd6:	613b      	str	r3, [r7, #16]
}
 8009dd8:	bf00      	nop
 8009dda:	bf00      	nop
 8009ddc:	e7fd      	b.n	8009dda <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	68ba      	ldr	r2, [r7, #8]
 8009de2:	fb02 f303 	mul.w	r3, r2, r3
 8009de6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	3350      	adds	r3, #80	@ 0x50
 8009dec:	4618      	mov	r0, r3
 8009dee:	f002 fcdd 	bl	800c7ac <pvPortMalloc>
 8009df2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009df4:	69bb      	ldr	r3, [r7, #24]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d011      	beq.n	8009e1e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	3350      	adds	r3, #80	@ 0x50
 8009e02:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e0c:	79fa      	ldrb	r2, [r7, #7]
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	9300      	str	r3, [sp, #0]
 8009e12:	4613      	mov	r3, r2
 8009e14:	697a      	ldr	r2, [r7, #20]
 8009e16:	68b9      	ldr	r1, [r7, #8]
 8009e18:	68f8      	ldr	r0, [r7, #12]
 8009e1a:	f000 f805 	bl	8009e28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e1e:	69bb      	ldr	r3, [r7, #24]
	}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3720      	adds	r7, #32
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	607a      	str	r2, [r7, #4]
 8009e34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d103      	bne.n	8009e44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	69ba      	ldr	r2, [r7, #24]
 8009e40:	601a      	str	r2, [r3, #0]
 8009e42:	e002      	b.n	8009e4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009e50:	69bb      	ldr	r3, [r7, #24]
 8009e52:	68ba      	ldr	r2, [r7, #8]
 8009e54:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009e56:	2101      	movs	r1, #1
 8009e58:	69b8      	ldr	r0, [r7, #24]
 8009e5a:	f7ff fec3 	bl	8009be4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	78fa      	ldrb	r2, [r7, #3]
 8009e62:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009e66:	bf00      	nop
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b08a      	sub	sp, #40	@ 0x28
 8009e72:	af02      	add	r7, sp, #8
 8009e74:	60f8      	str	r0, [r7, #12]
 8009e76:	60b9      	str	r1, [r7, #8]
 8009e78:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d10b      	bne.n	8009e98 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8009e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e84:	f383 8811 	msr	BASEPRI, r3
 8009e88:	f3bf 8f6f 	isb	sy
 8009e8c:	f3bf 8f4f 	dsb	sy
 8009e90:	61bb      	str	r3, [r7, #24]
}
 8009e92:	bf00      	nop
 8009e94:	bf00      	nop
 8009e96:	e7fd      	b.n	8009e94 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009e98:	68ba      	ldr	r2, [r7, #8]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d90b      	bls.n	8009eb8 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8009ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea4:	f383 8811 	msr	BASEPRI, r3
 8009ea8:	f3bf 8f6f 	isb	sy
 8009eac:	f3bf 8f4f 	dsb	sy
 8009eb0:	617b      	str	r3, [r7, #20]
}
 8009eb2:	bf00      	nop
 8009eb4:	bf00      	nop
 8009eb6:	e7fd      	b.n	8009eb4 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009eb8:	2302      	movs	r3, #2
 8009eba:	9300      	str	r3, [sp, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f7ff fef8 	bl	8009cb8 <xQueueGenericCreateStatic>
 8009ec8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009eca:	69fb      	ldr	r3, [r7, #28]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d002      	beq.n	8009ed6 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009ed0:	69fb      	ldr	r3, [r7, #28]
 8009ed2:	68ba      	ldr	r2, [r7, #8]
 8009ed4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009ed6:	69fb      	ldr	r3, [r7, #28]
	}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3720      	adds	r7, #32
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b086      	sub	sp, #24
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d10b      	bne.n	8009f08 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8009ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef4:	f383 8811 	msr	BASEPRI, r3
 8009ef8:	f3bf 8f6f 	isb	sy
 8009efc:	f3bf 8f4f 	dsb	sy
 8009f00:	613b      	str	r3, [r7, #16]
}
 8009f02:	bf00      	nop
 8009f04:	bf00      	nop
 8009f06:	e7fd      	b.n	8009f04 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009f08:	683a      	ldr	r2, [r7, #0]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d90b      	bls.n	8009f28 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8009f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f14:	f383 8811 	msr	BASEPRI, r3
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	60fb      	str	r3, [r7, #12]
}
 8009f22:	bf00      	nop
 8009f24:	bf00      	nop
 8009f26:	e7fd      	b.n	8009f24 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009f28:	2202      	movs	r2, #2
 8009f2a:	2100      	movs	r1, #0
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f7ff ff40 	bl	8009db2 <xQueueGenericCreate>
 8009f32:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d002      	beq.n	8009f40 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	683a      	ldr	r2, [r7, #0]
 8009f3e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009f40:	697b      	ldr	r3, [r7, #20]
	}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3718      	adds	r7, #24
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
	...

08009f4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b08e      	sub	sp, #56	@ 0x38
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	607a      	str	r2, [r7, #4]
 8009f58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d10b      	bne.n	8009f80 <xQueueGenericSend+0x34>
	__asm volatile
 8009f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f6c:	f383 8811 	msr	BASEPRI, r3
 8009f70:	f3bf 8f6f 	isb	sy
 8009f74:	f3bf 8f4f 	dsb	sy
 8009f78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009f7a:	bf00      	nop
 8009f7c:	bf00      	nop
 8009f7e:	e7fd      	b.n	8009f7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d103      	bne.n	8009f8e <xQueueGenericSend+0x42>
 8009f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d101      	bne.n	8009f92 <xQueueGenericSend+0x46>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e000      	b.n	8009f94 <xQueueGenericSend+0x48>
 8009f92:	2300      	movs	r3, #0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10b      	bne.n	8009fb0 <xQueueGenericSend+0x64>
	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009faa:	bf00      	nop
 8009fac:	bf00      	nop
 8009fae:	e7fd      	b.n	8009fac <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	d103      	bne.n	8009fbe <xQueueGenericSend+0x72>
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d101      	bne.n	8009fc2 <xQueueGenericSend+0x76>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e000      	b.n	8009fc4 <xQueueGenericSend+0x78>
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10b      	bne.n	8009fe0 <xQueueGenericSend+0x94>
	__asm volatile
 8009fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fcc:	f383 8811 	msr	BASEPRI, r3
 8009fd0:	f3bf 8f6f 	isb	sy
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	623b      	str	r3, [r7, #32]
}
 8009fda:	bf00      	nop
 8009fdc:	bf00      	nop
 8009fde:	e7fd      	b.n	8009fdc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009fe0:	f001 fc56 	bl	800b890 <xTaskGetSchedulerState>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d102      	bne.n	8009ff0 <xQueueGenericSend+0xa4>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d101      	bne.n	8009ff4 <xQueueGenericSend+0xa8>
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e000      	b.n	8009ff6 <xQueueGenericSend+0xaa>
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d10b      	bne.n	800a012 <xQueueGenericSend+0xc6>
	__asm volatile
 8009ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ffe:	f383 8811 	msr	BASEPRI, r3
 800a002:	f3bf 8f6f 	isb	sy
 800a006:	f3bf 8f4f 	dsb	sy
 800a00a:	61fb      	str	r3, [r7, #28]
}
 800a00c:	bf00      	nop
 800a00e:	bf00      	nop
 800a010:	e7fd      	b.n	800a00e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a012:	f002 faa9 	bl	800c568 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a018:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a01c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a01e:	429a      	cmp	r2, r3
 800a020:	d302      	bcc.n	800a028 <xQueueGenericSend+0xdc>
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	2b02      	cmp	r3, #2
 800a026:	d129      	bne.n	800a07c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a028:	683a      	ldr	r2, [r7, #0]
 800a02a:	68b9      	ldr	r1, [r7, #8]
 800a02c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a02e:	f000 fc6d 	bl	800a90c <prvCopyDataToQueue>
 800a032:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d010      	beq.n	800a05e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a03c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a03e:	3324      	adds	r3, #36	@ 0x24
 800a040:	4618      	mov	r0, r3
 800a042:	f001 fa65 	bl	800b510 <xTaskRemoveFromEventList>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d013      	beq.n	800a074 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a04c:	4b3f      	ldr	r3, [pc, #252]	@ (800a14c <xQueueGenericSend+0x200>)
 800a04e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a052:	601a      	str	r2, [r3, #0]
 800a054:	f3bf 8f4f 	dsb	sy
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	e00a      	b.n	800a074 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a05e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a060:	2b00      	cmp	r3, #0
 800a062:	d007      	beq.n	800a074 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a064:	4b39      	ldr	r3, [pc, #228]	@ (800a14c <xQueueGenericSend+0x200>)
 800a066:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a06a:	601a      	str	r2, [r3, #0]
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a074:	f002 faaa 	bl	800c5cc <vPortExitCritical>
				return pdPASS;
 800a078:	2301      	movs	r3, #1
 800a07a:	e063      	b.n	800a144 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d103      	bne.n	800a08a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a082:	f002 faa3 	bl	800c5cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a086:	2300      	movs	r3, #0
 800a088:	e05c      	b.n	800a144 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a08a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d106      	bne.n	800a09e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a090:	f107 0314 	add.w	r3, r7, #20
 800a094:	4618      	mov	r0, r3
 800a096:	f001 fa9f 	bl	800b5d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a09a:	2301      	movs	r3, #1
 800a09c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a09e:	f002 fa95 	bl	800c5cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0a2:	f001 f80f 	bl	800b0c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0a6:	f002 fa5f 	bl	800c568 <vPortEnterCritical>
 800a0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a0b0:	b25b      	sxtb	r3, r3
 800a0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b6:	d103      	bne.n	800a0c0 <xQueueGenericSend+0x174>
 800a0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a0c6:	b25b      	sxtb	r3, r3
 800a0c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0cc:	d103      	bne.n	800a0d6 <xQueueGenericSend+0x18a>
 800a0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0d6:	f002 fa79 	bl	800c5cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a0da:	1d3a      	adds	r2, r7, #4
 800a0dc:	f107 0314 	add.w	r3, r7, #20
 800a0e0:	4611      	mov	r1, r2
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f001 fa8e 	bl	800b604 <xTaskCheckForTimeOut>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d124      	bne.n	800a138 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a0ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a0f0:	f000 fd04 	bl	800aafc <prvIsQueueFull>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d018      	beq.n	800a12c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a0fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0fc:	3310      	adds	r3, #16
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	4611      	mov	r1, r2
 800a102:	4618      	mov	r0, r3
 800a104:	f001 f9b2 	bl	800b46c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a108:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a10a:	f000 fc8f 	bl	800aa2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a10e:	f000 ffe7 	bl	800b0e0 <xTaskResumeAll>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	f47f af7c 	bne.w	800a012 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a11a:	4b0c      	ldr	r3, [pc, #48]	@ (800a14c <xQueueGenericSend+0x200>)
 800a11c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a120:	601a      	str	r2, [r3, #0]
 800a122:	f3bf 8f4f 	dsb	sy
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	e772      	b.n	800a012 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a12c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a12e:	f000 fc7d 	bl	800aa2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a132:	f000 ffd5 	bl	800b0e0 <xTaskResumeAll>
 800a136:	e76c      	b.n	800a012 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a138:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a13a:	f000 fc77 	bl	800aa2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a13e:	f000 ffcf 	bl	800b0e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a142:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a144:	4618      	mov	r0, r3
 800a146:	3738      	adds	r7, #56	@ 0x38
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	e000ed04 	.word	0xe000ed04

0800a150 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b090      	sub	sp, #64	@ 0x40
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]
 800a15c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a164:	2b00      	cmp	r3, #0
 800a166:	d10b      	bne.n	800a180 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a16c:	f383 8811 	msr	BASEPRI, r3
 800a170:	f3bf 8f6f 	isb	sy
 800a174:	f3bf 8f4f 	dsb	sy
 800a178:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a17a:	bf00      	nop
 800a17c:	bf00      	nop
 800a17e:	e7fd      	b.n	800a17c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d103      	bne.n	800a18e <xQueueGenericSendFromISR+0x3e>
 800a186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d101      	bne.n	800a192 <xQueueGenericSendFromISR+0x42>
 800a18e:	2301      	movs	r3, #1
 800a190:	e000      	b.n	800a194 <xQueueGenericSendFromISR+0x44>
 800a192:	2300      	movs	r3, #0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d10b      	bne.n	800a1b0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a19c:	f383 8811 	msr	BASEPRI, r3
 800a1a0:	f3bf 8f6f 	isb	sy
 800a1a4:	f3bf 8f4f 	dsb	sy
 800a1a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a1aa:	bf00      	nop
 800a1ac:	bf00      	nop
 800a1ae:	e7fd      	b.n	800a1ac <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	d103      	bne.n	800a1be <xQueueGenericSendFromISR+0x6e>
 800a1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d101      	bne.n	800a1c2 <xQueueGenericSendFromISR+0x72>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	e000      	b.n	800a1c4 <xQueueGenericSendFromISR+0x74>
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d10b      	bne.n	800a1e0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a1c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1cc:	f383 8811 	msr	BASEPRI, r3
 800a1d0:	f3bf 8f6f 	isb	sy
 800a1d4:	f3bf 8f4f 	dsb	sy
 800a1d8:	623b      	str	r3, [r7, #32]
}
 800a1da:	bf00      	nop
 800a1dc:	bf00      	nop
 800a1de:	e7fd      	b.n	800a1dc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1e0:	f002 faa2 	bl	800c728 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a1e4:	f3ef 8211 	mrs	r2, BASEPRI
 800a1e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ec:	f383 8811 	msr	BASEPRI, r3
 800a1f0:	f3bf 8f6f 	isb	sy
 800a1f4:	f3bf 8f4f 	dsb	sy
 800a1f8:	61fa      	str	r2, [r7, #28]
 800a1fa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a1fc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a1fe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a202:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a208:	429a      	cmp	r2, r3
 800a20a:	d302      	bcc.n	800a212 <xQueueGenericSendFromISR+0xc2>
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d12f      	bne.n	800a272 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a214:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a218:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a21c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a21e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a220:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a222:	683a      	ldr	r2, [r7, #0]
 800a224:	68b9      	ldr	r1, [r7, #8]
 800a226:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a228:	f000 fb70 	bl	800a90c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a22c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a234:	d112      	bne.n	800a25c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d016      	beq.n	800a26c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a240:	3324      	adds	r3, #36	@ 0x24
 800a242:	4618      	mov	r0, r3
 800a244:	f001 f964 	bl	800b510 <xTaskRemoveFromEventList>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00e      	beq.n	800a26c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d00b      	beq.n	800a26c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2201      	movs	r2, #1
 800a258:	601a      	str	r2, [r3, #0]
 800a25a:	e007      	b.n	800a26c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a25c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a260:	3301      	adds	r3, #1
 800a262:	b2db      	uxtb	r3, r3
 800a264:	b25a      	sxtb	r2, r3
 800a266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a26c:	2301      	movs	r3, #1
 800a26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a270:	e001      	b.n	800a276 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a272:	2300      	movs	r3, #0
 800a274:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a278:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a280:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a284:	4618      	mov	r0, r3
 800a286:	3740      	adds	r7, #64	@ 0x40
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b08e      	sub	sp, #56	@ 0x38
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d10b      	bne.n	800a2b8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a4:	f383 8811 	msr	BASEPRI, r3
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	623b      	str	r3, [r7, #32]
}
 800a2b2:	bf00      	nop
 800a2b4:	bf00      	nop
 800a2b6:	e7fd      	b.n	800a2b4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d00b      	beq.n	800a2d8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a2c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c4:	f383 8811 	msr	BASEPRI, r3
 800a2c8:	f3bf 8f6f 	isb	sy
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	61fb      	str	r3, [r7, #28]
}
 800a2d2:	bf00      	nop
 800a2d4:	bf00      	nop
 800a2d6:	e7fd      	b.n	800a2d4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d103      	bne.n	800a2e8 <xQueueGiveFromISR+0x5c>
 800a2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d101      	bne.n	800a2ec <xQueueGiveFromISR+0x60>
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e000      	b.n	800a2ee <xQueueGiveFromISR+0x62>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10b      	bne.n	800a30a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	61bb      	str	r3, [r7, #24]
}
 800a304:	bf00      	nop
 800a306:	bf00      	nop
 800a308:	e7fd      	b.n	800a306 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a30a:	f002 fa0d 	bl	800c728 <vPortValidateInterruptPriority>
	__asm volatile
 800a30e:	f3ef 8211 	mrs	r2, BASEPRI
 800a312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a316:	f383 8811 	msr	BASEPRI, r3
 800a31a:	f3bf 8f6f 	isb	sy
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	617a      	str	r2, [r7, #20]
 800a324:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a326:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a328:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a32c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a32e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a334:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a336:	429a      	cmp	r2, r3
 800a338:	d22b      	bcs.n	800a392 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a33c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a340:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a346:	1c5a      	adds	r2, r3, #1
 800a348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a34c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a350:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a354:	d112      	bne.n	800a37c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d016      	beq.n	800a38c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a360:	3324      	adds	r3, #36	@ 0x24
 800a362:	4618      	mov	r0, r3
 800a364:	f001 f8d4 	bl	800b510 <xTaskRemoveFromEventList>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d00e      	beq.n	800a38c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d00b      	beq.n	800a38c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	2201      	movs	r2, #1
 800a378:	601a      	str	r2, [r3, #0]
 800a37a:	e007      	b.n	800a38c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a37c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a380:	3301      	adds	r3, #1
 800a382:	b2db      	uxtb	r3, r3
 800a384:	b25a      	sxtb	r2, r3
 800a386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a388:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a38c:	2301      	movs	r3, #1
 800a38e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a390:	e001      	b.n	800a396 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a392:	2300      	movs	r3, #0
 800a394:	637b      	str	r3, [r7, #52]	@ 0x34
 800a396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a398:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f383 8811 	msr	BASEPRI, r3
}
 800a3a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a3a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3738      	adds	r7, #56	@ 0x38
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b08c      	sub	sp, #48	@ 0x30
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d10b      	bne.n	800a3de <xQueueReceive+0x32>
	__asm volatile
 800a3c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ca:	f383 8811 	msr	BASEPRI, r3
 800a3ce:	f3bf 8f6f 	isb	sy
 800a3d2:	f3bf 8f4f 	dsb	sy
 800a3d6:	623b      	str	r3, [r7, #32]
}
 800a3d8:	bf00      	nop
 800a3da:	bf00      	nop
 800a3dc:	e7fd      	b.n	800a3da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d103      	bne.n	800a3ec <xQueueReceive+0x40>
 800a3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d101      	bne.n	800a3f0 <xQueueReceive+0x44>
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e000      	b.n	800a3f2 <xQueueReceive+0x46>
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d10b      	bne.n	800a40e <xQueueReceive+0x62>
	__asm volatile
 800a3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3fa:	f383 8811 	msr	BASEPRI, r3
 800a3fe:	f3bf 8f6f 	isb	sy
 800a402:	f3bf 8f4f 	dsb	sy
 800a406:	61fb      	str	r3, [r7, #28]
}
 800a408:	bf00      	nop
 800a40a:	bf00      	nop
 800a40c:	e7fd      	b.n	800a40a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a40e:	f001 fa3f 	bl	800b890 <xTaskGetSchedulerState>
 800a412:	4603      	mov	r3, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	d102      	bne.n	800a41e <xQueueReceive+0x72>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d101      	bne.n	800a422 <xQueueReceive+0x76>
 800a41e:	2301      	movs	r3, #1
 800a420:	e000      	b.n	800a424 <xQueueReceive+0x78>
 800a422:	2300      	movs	r3, #0
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10b      	bne.n	800a440 <xQueueReceive+0x94>
	__asm volatile
 800a428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a42c:	f383 8811 	msr	BASEPRI, r3
 800a430:	f3bf 8f6f 	isb	sy
 800a434:	f3bf 8f4f 	dsb	sy
 800a438:	61bb      	str	r3, [r7, #24]
}
 800a43a:	bf00      	nop
 800a43c:	bf00      	nop
 800a43e:	e7fd      	b.n	800a43c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a440:	f002 f892 	bl	800c568 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a448:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d01f      	beq.n	800a490 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a450:	68b9      	ldr	r1, [r7, #8]
 800a452:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a454:	f000 fac4 	bl	800a9e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a45a:	1e5a      	subs	r2, r3, #1
 800a45c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a45e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d00f      	beq.n	800a488 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a46a:	3310      	adds	r3, #16
 800a46c:	4618      	mov	r0, r3
 800a46e:	f001 f84f 	bl	800b510 <xTaskRemoveFromEventList>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d007      	beq.n	800a488 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a478:	4b3c      	ldr	r3, [pc, #240]	@ (800a56c <xQueueReceive+0x1c0>)
 800a47a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a47e:	601a      	str	r2, [r3, #0]
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a488:	f002 f8a0 	bl	800c5cc <vPortExitCritical>
				return pdPASS;
 800a48c:	2301      	movs	r3, #1
 800a48e:	e069      	b.n	800a564 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d103      	bne.n	800a49e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a496:	f002 f899 	bl	800c5cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a49a:	2300      	movs	r3, #0
 800a49c:	e062      	b.n	800a564 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a49e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d106      	bne.n	800a4b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4a4:	f107 0310 	add.w	r3, r7, #16
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f001 f895 	bl	800b5d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4b2:	f002 f88b 	bl	800c5cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4b6:	f000 fe05 	bl	800b0c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4ba:	f002 f855 	bl	800c568 <vPortEnterCritical>
 800a4be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a4c4:	b25b      	sxtb	r3, r3
 800a4c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ca:	d103      	bne.n	800a4d4 <xQueueReceive+0x128>
 800a4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a4d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a4da:	b25b      	sxtb	r3, r3
 800a4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e0:	d103      	bne.n	800a4ea <xQueueReceive+0x13e>
 800a4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a4ea:	f002 f86f 	bl	800c5cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4ee:	1d3a      	adds	r2, r7, #4
 800a4f0:	f107 0310 	add.w	r3, r7, #16
 800a4f4:	4611      	mov	r1, r2
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f001 f884 	bl	800b604 <xTaskCheckForTimeOut>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d123      	bne.n	800a54a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a502:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a504:	f000 fae4 	bl	800aad0 <prvIsQueueEmpty>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d017      	beq.n	800a53e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a510:	3324      	adds	r3, #36	@ 0x24
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	4611      	mov	r1, r2
 800a516:	4618      	mov	r0, r3
 800a518:	f000 ffa8 	bl	800b46c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a51c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a51e:	f000 fa85 	bl	800aa2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a522:	f000 fddd 	bl	800b0e0 <xTaskResumeAll>
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d189      	bne.n	800a440 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a52c:	4b0f      	ldr	r3, [pc, #60]	@ (800a56c <xQueueReceive+0x1c0>)
 800a52e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a532:	601a      	str	r2, [r3, #0]
 800a534:	f3bf 8f4f 	dsb	sy
 800a538:	f3bf 8f6f 	isb	sy
 800a53c:	e780      	b.n	800a440 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a53e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a540:	f000 fa74 	bl	800aa2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a544:	f000 fdcc 	bl	800b0e0 <xTaskResumeAll>
 800a548:	e77a      	b.n	800a440 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a54a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a54c:	f000 fa6e 	bl	800aa2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a550:	f000 fdc6 	bl	800b0e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a554:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a556:	f000 fabb 	bl	800aad0 <prvIsQueueEmpty>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f43f af6f 	beq.w	800a440 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a562:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a564:	4618      	mov	r0, r3
 800a566:	3730      	adds	r7, #48	@ 0x30
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	e000ed04 	.word	0xe000ed04

0800a570 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b08e      	sub	sp, #56	@ 0x38
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a57a:	2300      	movs	r3, #0
 800a57c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a582:	2300      	movs	r3, #0
 800a584:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10b      	bne.n	800a5a4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a590:	f383 8811 	msr	BASEPRI, r3
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	623b      	str	r3, [r7, #32]
}
 800a59e:	bf00      	nop
 800a5a0:	bf00      	nop
 800a5a2:	e7fd      	b.n	800a5a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a5a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00b      	beq.n	800a5c4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b0:	f383 8811 	msr	BASEPRI, r3
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	f3bf 8f4f 	dsb	sy
 800a5bc:	61fb      	str	r3, [r7, #28]
}
 800a5be:	bf00      	nop
 800a5c0:	bf00      	nop
 800a5c2:	e7fd      	b.n	800a5c0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5c4:	f001 f964 	bl	800b890 <xTaskGetSchedulerState>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d102      	bne.n	800a5d4 <xQueueSemaphoreTake+0x64>
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d101      	bne.n	800a5d8 <xQueueSemaphoreTake+0x68>
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e000      	b.n	800a5da <xQueueSemaphoreTake+0x6a>
 800a5d8:	2300      	movs	r3, #0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d10b      	bne.n	800a5f6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	61bb      	str	r3, [r7, #24]
}
 800a5f0:	bf00      	nop
 800a5f2:	bf00      	nop
 800a5f4:	e7fd      	b.n	800a5f2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a5f6:	f001 ffb7 	bl	800c568 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5fe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a602:	2b00      	cmp	r3, #0
 800a604:	d024      	beq.n	800a650 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a608:	1e5a      	subs	r2, r3, #1
 800a60a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a60c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a60e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d104      	bne.n	800a620 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a616:	f001 fab5 	bl	800bb84 <pvTaskIncrementMutexHeldCount>
 800a61a:	4602      	mov	r2, r0
 800a61c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a61e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a622:	691b      	ldr	r3, [r3, #16]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d00f      	beq.n	800a648 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a62a:	3310      	adds	r3, #16
 800a62c:	4618      	mov	r0, r3
 800a62e:	f000 ff6f 	bl	800b510 <xTaskRemoveFromEventList>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d007      	beq.n	800a648 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a638:	4b54      	ldr	r3, [pc, #336]	@ (800a78c <xQueueSemaphoreTake+0x21c>)
 800a63a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a63e:	601a      	str	r2, [r3, #0]
 800a640:	f3bf 8f4f 	dsb	sy
 800a644:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a648:	f001 ffc0 	bl	800c5cc <vPortExitCritical>
				return pdPASS;
 800a64c:	2301      	movs	r3, #1
 800a64e:	e098      	b.n	800a782 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d112      	bne.n	800a67c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d00b      	beq.n	800a674 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a660:	f383 8811 	msr	BASEPRI, r3
 800a664:	f3bf 8f6f 	isb	sy
 800a668:	f3bf 8f4f 	dsb	sy
 800a66c:	617b      	str	r3, [r7, #20]
}
 800a66e:	bf00      	nop
 800a670:	bf00      	nop
 800a672:	e7fd      	b.n	800a670 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a674:	f001 ffaa 	bl	800c5cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a678:	2300      	movs	r3, #0
 800a67a:	e082      	b.n	800a782 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a67c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d106      	bne.n	800a690 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a682:	f107 030c 	add.w	r3, r7, #12
 800a686:	4618      	mov	r0, r3
 800a688:	f000 ffa6 	bl	800b5d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a68c:	2301      	movs	r3, #1
 800a68e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a690:	f001 ff9c 	bl	800c5cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a694:	f000 fd16 	bl	800b0c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a698:	f001 ff66 	bl	800c568 <vPortEnterCritical>
 800a69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a69e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a6a2:	b25b      	sxtb	r3, r3
 800a6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6a8:	d103      	bne.n	800a6b2 <xQueueSemaphoreTake+0x142>
 800a6aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a6b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a6b8:	b25b      	sxtb	r3, r3
 800a6ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6be:	d103      	bne.n	800a6c8 <xQueueSemaphoreTake+0x158>
 800a6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a6c8:	f001 ff80 	bl	800c5cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6cc:	463a      	mov	r2, r7
 800a6ce:	f107 030c 	add.w	r3, r7, #12
 800a6d2:	4611      	mov	r1, r2
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f000 ff95 	bl	800b604 <xTaskCheckForTimeOut>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d132      	bne.n	800a746 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a6e2:	f000 f9f5 	bl	800aad0 <prvIsQueueEmpty>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d026      	beq.n	800a73a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d109      	bne.n	800a708 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a6f4:	f001 ff38 	bl	800c568 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6fa:	689b      	ldr	r3, [r3, #8]
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f001 f8e5 	bl	800b8cc <xTaskPriorityInherit>
 800a702:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a704:	f001 ff62 	bl	800c5cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a70a:	3324      	adds	r3, #36	@ 0x24
 800a70c:	683a      	ldr	r2, [r7, #0]
 800a70e:	4611      	mov	r1, r2
 800a710:	4618      	mov	r0, r3
 800a712:	f000 feab 	bl	800b46c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a716:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a718:	f000 f988 	bl	800aa2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a71c:	f000 fce0 	bl	800b0e0 <xTaskResumeAll>
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	f47f af67 	bne.w	800a5f6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a728:	4b18      	ldr	r3, [pc, #96]	@ (800a78c <xQueueSemaphoreTake+0x21c>)
 800a72a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a72e:	601a      	str	r2, [r3, #0]
 800a730:	f3bf 8f4f 	dsb	sy
 800a734:	f3bf 8f6f 	isb	sy
 800a738:	e75d      	b.n	800a5f6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a73a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a73c:	f000 f976 	bl	800aa2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a740:	f000 fcce 	bl	800b0e0 <xTaskResumeAll>
 800a744:	e757      	b.n	800a5f6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a746:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a748:	f000 f970 	bl	800aa2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a74c:	f000 fcc8 	bl	800b0e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a750:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a752:	f000 f9bd 	bl	800aad0 <prvIsQueueEmpty>
 800a756:	4603      	mov	r3, r0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f43f af4c 	beq.w	800a5f6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a760:	2b00      	cmp	r3, #0
 800a762:	d00d      	beq.n	800a780 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a764:	f001 ff00 	bl	800c568 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a768:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a76a:	f000 f8b7 	bl	800a8dc <prvGetDisinheritPriorityAfterTimeout>
 800a76e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a776:	4618      	mov	r0, r3
 800a778:	f001 f980 	bl	800ba7c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a77c:	f001 ff26 	bl	800c5cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a780:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a782:	4618      	mov	r0, r3
 800a784:	3738      	adds	r7, #56	@ 0x38
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	e000ed04 	.word	0xe000ed04

0800a790 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b08e      	sub	sp, #56	@ 0x38
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d10b      	bne.n	800a7be <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7aa:	f383 8811 	msr	BASEPRI, r3
 800a7ae:	f3bf 8f6f 	isb	sy
 800a7b2:	f3bf 8f4f 	dsb	sy
 800a7b6:	623b      	str	r3, [r7, #32]
}
 800a7b8:	bf00      	nop
 800a7ba:	bf00      	nop
 800a7bc:	e7fd      	b.n	800a7ba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d103      	bne.n	800a7cc <xQueueReceiveFromISR+0x3c>
 800a7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d101      	bne.n	800a7d0 <xQueueReceiveFromISR+0x40>
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	e000      	b.n	800a7d2 <xQueueReceiveFromISR+0x42>
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d10b      	bne.n	800a7ee <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7da:	f383 8811 	msr	BASEPRI, r3
 800a7de:	f3bf 8f6f 	isb	sy
 800a7e2:	f3bf 8f4f 	dsb	sy
 800a7e6:	61fb      	str	r3, [r7, #28]
}
 800a7e8:	bf00      	nop
 800a7ea:	bf00      	nop
 800a7ec:	e7fd      	b.n	800a7ea <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7ee:	f001 ff9b 	bl	800c728 <vPortValidateInterruptPriority>
	__asm volatile
 800a7f2:	f3ef 8211 	mrs	r2, BASEPRI
 800a7f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7fa:	f383 8811 	msr	BASEPRI, r3
 800a7fe:	f3bf 8f6f 	isb	sy
 800a802:	f3bf 8f4f 	dsb	sy
 800a806:	61ba      	str	r2, [r7, #24]
 800a808:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a80a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a80c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a812:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a816:	2b00      	cmp	r3, #0
 800a818:	d02f      	beq.n	800a87a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a81a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a81c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a820:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a824:	68b9      	ldr	r1, [r7, #8]
 800a826:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a828:	f000 f8da 	bl	800a9e0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a82e:	1e5a      	subs	r2, r3, #1
 800a830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a832:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a834:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a83c:	d112      	bne.n	800a864 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a840:	691b      	ldr	r3, [r3, #16]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d016      	beq.n	800a874 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a848:	3310      	adds	r3, #16
 800a84a:	4618      	mov	r0, r3
 800a84c:	f000 fe60 	bl	800b510 <xTaskRemoveFromEventList>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00e      	beq.n	800a874 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d00b      	beq.n	800a874 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2201      	movs	r2, #1
 800a860:	601a      	str	r2, [r3, #0]
 800a862:	e007      	b.n	800a874 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a864:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a868:	3301      	adds	r3, #1
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	b25a      	sxtb	r2, r3
 800a86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a874:	2301      	movs	r3, #1
 800a876:	637b      	str	r3, [r7, #52]	@ 0x34
 800a878:	e001      	b.n	800a87e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a87a:	2300      	movs	r3, #0
 800a87c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a87e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a880:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	f383 8811 	msr	BASEPRI, r3
}
 800a888:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a88a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3738      	adds	r7, #56	@ 0x38
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d10b      	bne.n	800a8be <vQueueDelete+0x2a>
	__asm volatile
 800a8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8aa:	f383 8811 	msr	BASEPRI, r3
 800a8ae:	f3bf 8f6f 	isb	sy
 800a8b2:	f3bf 8f4f 	dsb	sy
 800a8b6:	60bb      	str	r3, [r7, #8]
}
 800a8b8:	bf00      	nop
 800a8ba:	bf00      	nop
 800a8bc:	e7fd      	b.n	800a8ba <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f000 f95e 	bl	800ab80 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d102      	bne.n	800a8d4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800a8ce:	68f8      	ldr	r0, [r7, #12]
 800a8d0:	f002 f83a 	bl	800c948 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a8d4:	bf00      	nop
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a8dc:	b480      	push	{r7}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d006      	beq.n	800a8fa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800a8f6:	60fb      	str	r3, [r7, #12]
 800a8f8:	e001      	b.n	800a8fe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
	}
 800a900:	4618      	mov	r0, r3
 800a902:	3714      	adds	r7, #20
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b086      	sub	sp, #24
 800a910:	af00      	add	r7, sp, #0
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a918:	2300      	movs	r3, #0
 800a91a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a920:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a926:	2b00      	cmp	r3, #0
 800a928:	d10d      	bne.n	800a946 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d14d      	bne.n	800a9ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	4618      	mov	r0, r3
 800a938:	f001 f830 	bl	800b99c <xTaskPriorityDisinherit>
 800a93c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2200      	movs	r2, #0
 800a942:	609a      	str	r2, [r3, #8]
 800a944:	e043      	b.n	800a9ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d119      	bne.n	800a980 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6858      	ldr	r0, [r3, #4]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a954:	461a      	mov	r2, r3
 800a956:	68b9      	ldr	r1, [r7, #8]
 800a958:	f003 fa2b 	bl	800ddb2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	685a      	ldr	r2, [r3, #4]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a964:	441a      	add	r2, r3
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	685a      	ldr	r2, [r3, #4]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	689b      	ldr	r3, [r3, #8]
 800a972:	429a      	cmp	r2, r3
 800a974:	d32b      	bcc.n	800a9ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	605a      	str	r2, [r3, #4]
 800a97e:	e026      	b.n	800a9ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	68d8      	ldr	r0, [r3, #12]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a988:	461a      	mov	r2, r3
 800a98a:	68b9      	ldr	r1, [r7, #8]
 800a98c:	f003 fa11 	bl	800ddb2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	68da      	ldr	r2, [r3, #12]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a998:	425b      	negs	r3, r3
 800a99a:	441a      	add	r2, r3
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	68da      	ldr	r2, [r3, #12]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d207      	bcs.n	800a9bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	689a      	ldr	r2, [r3, #8]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9b4:	425b      	negs	r3, r3
 800a9b6:	441a      	add	r2, r3
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2b02      	cmp	r3, #2
 800a9c0:	d105      	bne.n	800a9ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d002      	beq.n	800a9ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	3b01      	subs	r3, #1
 800a9cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	1c5a      	adds	r2, r3, #1
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a9d6:	697b      	ldr	r3, [r7, #20]
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3718      	adds	r7, #24
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d018      	beq.n	800aa24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	68da      	ldr	r2, [r3, #12]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9fa:	441a      	add	r2, r3
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	68da      	ldr	r2, [r3, #12]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d303      	bcc.n	800aa14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	68d9      	ldr	r1, [r3, #12]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	6838      	ldr	r0, [r7, #0]
 800aa20:	f003 f9c7 	bl	800ddb2 <memcpy>
	}
}
 800aa24:	bf00      	nop
 800aa26:	3708      	adds	r7, #8
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aa34:	f001 fd98 	bl	800c568 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa40:	e011      	b.n	800aa66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d012      	beq.n	800aa70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	3324      	adds	r3, #36	@ 0x24
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f000 fd5e 	bl	800b510 <xTaskRemoveFromEventList>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d001      	beq.n	800aa5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aa5a:	f000 fe37 	bl	800b6cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
 800aa60:	3b01      	subs	r3, #1
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	dce9      	bgt.n	800aa42 <prvUnlockQueue+0x16>
 800aa6e:	e000      	b.n	800aa72 <prvUnlockQueue+0x46>
					break;
 800aa70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	22ff      	movs	r2, #255	@ 0xff
 800aa76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800aa7a:	f001 fda7 	bl	800c5cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aa7e:	f001 fd73 	bl	800c568 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa8a:	e011      	b.n	800aab0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	691b      	ldr	r3, [r3, #16]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d012      	beq.n	800aaba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	3310      	adds	r3, #16
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f000 fd39 	bl	800b510 <xTaskRemoveFromEventList>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d001      	beq.n	800aaa8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aaa4:	f000 fe12 	bl	800b6cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aaa8:	7bbb      	ldrb	r3, [r7, #14]
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aab0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	dce9      	bgt.n	800aa8c <prvUnlockQueue+0x60>
 800aab8:	e000      	b.n	800aabc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aaba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	22ff      	movs	r2, #255	@ 0xff
 800aac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800aac4:	f001 fd82 	bl	800c5cc <vPortExitCritical>
}
 800aac8:	bf00      	nop
 800aaca:	3710      	adds	r7, #16
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aad8:	f001 fd46 	bl	800c568 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d102      	bne.n	800aaea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aae4:	2301      	movs	r3, #1
 800aae6:	60fb      	str	r3, [r7, #12]
 800aae8:	e001      	b.n	800aaee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aaea:	2300      	movs	r3, #0
 800aaec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aaee:	f001 fd6d 	bl	800c5cc <vPortExitCritical>

	return xReturn;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3710      	adds	r7, #16
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab04:	f001 fd30 	bl	800c568 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d102      	bne.n	800ab1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ab14:	2301      	movs	r3, #1
 800ab16:	60fb      	str	r3, [r7, #12]
 800ab18:	e001      	b.n	800ab1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab1e:	f001 fd55 	bl	800c5cc <vPortExitCritical>

	return xReturn;
 800ab22:	68fb      	ldr	r3, [r7, #12]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3710      	adds	r7, #16
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b085      	sub	sp, #20
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab36:	2300      	movs	r3, #0
 800ab38:	60fb      	str	r3, [r7, #12]
 800ab3a:	e014      	b.n	800ab66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ab3c:	4a0f      	ldr	r2, [pc, #60]	@ (800ab7c <vQueueAddToRegistry+0x50>)
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d10b      	bne.n	800ab60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ab48:	490c      	ldr	r1, [pc, #48]	@ (800ab7c <vQueueAddToRegistry+0x50>)
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	683a      	ldr	r2, [r7, #0]
 800ab4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ab52:	4a0a      	ldr	r2, [pc, #40]	@ (800ab7c <vQueueAddToRegistry+0x50>)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	00db      	lsls	r3, r3, #3
 800ab58:	4413      	add	r3, r2
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ab5e:	e006      	b.n	800ab6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	3301      	adds	r3, #1
 800ab64:	60fb      	str	r3, [r7, #12]
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2b07      	cmp	r3, #7
 800ab6a:	d9e7      	bls.n	800ab3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ab6c:	bf00      	nop
 800ab6e:	bf00      	nop
 800ab70:	3714      	adds	r7, #20
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	200025d0 	.word	0x200025d0

0800ab80 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ab80:	b480      	push	{r7}
 800ab82:	b085      	sub	sp, #20
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab88:	2300      	movs	r3, #0
 800ab8a:	60fb      	str	r3, [r7, #12]
 800ab8c:	e016      	b.n	800abbc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ab8e:	4a10      	ldr	r2, [pc, #64]	@ (800abd0 <vQueueUnregisterQueue+0x50>)
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	00db      	lsls	r3, r3, #3
 800ab94:	4413      	add	r3, r2
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d10b      	bne.n	800abb6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ab9e:	4a0c      	ldr	r2, [pc, #48]	@ (800abd0 <vQueueUnregisterQueue+0x50>)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2100      	movs	r1, #0
 800aba4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800aba8:	4a09      	ldr	r2, [pc, #36]	@ (800abd0 <vQueueUnregisterQueue+0x50>)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	00db      	lsls	r3, r3, #3
 800abae:	4413      	add	r3, r2
 800abb0:	2200      	movs	r2, #0
 800abb2:	605a      	str	r2, [r3, #4]
				break;
 800abb4:	e006      	b.n	800abc4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	3301      	adds	r3, #1
 800abba:	60fb      	str	r3, [r7, #12]
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2b07      	cmp	r3, #7
 800abc0:	d9e5      	bls.n	800ab8e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800abc2:	bf00      	nop
 800abc4:	bf00      	nop
 800abc6:	3714      	adds	r7, #20
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr
 800abd0:	200025d0 	.word	0x200025d0

0800abd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b086      	sub	sp, #24
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800abe4:	f001 fcc0 	bl	800c568 <vPortEnterCritical>
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800abee:	b25b      	sxtb	r3, r3
 800abf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abf4:	d103      	bne.n	800abfe <vQueueWaitForMessageRestricted+0x2a>
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	2200      	movs	r2, #0
 800abfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac04:	b25b      	sxtb	r3, r3
 800ac06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac0a:	d103      	bne.n	800ac14 <vQueueWaitForMessageRestricted+0x40>
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ac14:	f001 fcda 	bl	800c5cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d106      	bne.n	800ac2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	3324      	adds	r3, #36	@ 0x24
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	68b9      	ldr	r1, [r7, #8]
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f000 fc45 	bl	800b4b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ac2e:	6978      	ldr	r0, [r7, #20]
 800ac30:	f7ff fefc 	bl	800aa2c <prvUnlockQueue>
	}
 800ac34:	bf00      	nop
 800ac36:	3718      	adds	r7, #24
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b08e      	sub	sp, #56	@ 0x38
 800ac40:	af04      	add	r7, sp, #16
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	607a      	str	r2, [r7, #4]
 800ac48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ac4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d10b      	bne.n	800ac68 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ac50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac54:	f383 8811 	msr	BASEPRI, r3
 800ac58:	f3bf 8f6f 	isb	sy
 800ac5c:	f3bf 8f4f 	dsb	sy
 800ac60:	623b      	str	r3, [r7, #32]
}
 800ac62:	bf00      	nop
 800ac64:	bf00      	nop
 800ac66:	e7fd      	b.n	800ac64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ac68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d10b      	bne.n	800ac86 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ac6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	61fb      	str	r3, [r7, #28]
}
 800ac80:	bf00      	nop
 800ac82:	bf00      	nop
 800ac84:	e7fd      	b.n	800ac82 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ac86:	235c      	movs	r3, #92	@ 0x5c
 800ac88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	2b5c      	cmp	r3, #92	@ 0x5c
 800ac8e:	d00b      	beq.n	800aca8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ac90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	61bb      	str	r3, [r7, #24]
}
 800aca2:	bf00      	nop
 800aca4:	bf00      	nop
 800aca6:	e7fd      	b.n	800aca4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aca8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800acaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acac:	2b00      	cmp	r3, #0
 800acae:	d01e      	beq.n	800acee <xTaskCreateStatic+0xb2>
 800acb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d01b      	beq.n	800acee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800acb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acb8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800acba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800acbe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800acc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc2:	2202      	movs	r2, #2
 800acc4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800acc8:	2300      	movs	r3, #0
 800acca:	9303      	str	r3, [sp, #12]
 800accc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acce:	9302      	str	r3, [sp, #8]
 800acd0:	f107 0314 	add.w	r3, r7, #20
 800acd4:	9301      	str	r3, [sp, #4]
 800acd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd8:	9300      	str	r3, [sp, #0]
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	68b9      	ldr	r1, [r7, #8]
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f000 f850 	bl	800ad86 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ace6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ace8:	f000 f8de 	bl	800aea8 <prvAddNewTaskToReadyList>
 800acec:	e001      	b.n	800acf2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800acee:	2300      	movs	r3, #0
 800acf0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800acf2:	697b      	ldr	r3, [r7, #20]
	}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3728      	adds	r7, #40	@ 0x28
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b08c      	sub	sp, #48	@ 0x30
 800ad00:	af04      	add	r7, sp, #16
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	60b9      	str	r1, [r7, #8]
 800ad06:	603b      	str	r3, [r7, #0]
 800ad08:	4613      	mov	r3, r2
 800ad0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ad0c:	88fb      	ldrh	r3, [r7, #6]
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	4618      	mov	r0, r3
 800ad12:	f001 fd4b 	bl	800c7ac <pvPortMalloc>
 800ad16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d00e      	beq.n	800ad3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ad1e:	205c      	movs	r0, #92	@ 0x5c
 800ad20:	f001 fd44 	bl	800c7ac <pvPortMalloc>
 800ad24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d003      	beq.n	800ad34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	697a      	ldr	r2, [r7, #20]
 800ad30:	631a      	str	r2, [r3, #48]	@ 0x30
 800ad32:	e005      	b.n	800ad40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ad34:	6978      	ldr	r0, [r7, #20]
 800ad36:	f001 fe07 	bl	800c948 <vPortFree>
 800ad3a:	e001      	b.n	800ad40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ad40:	69fb      	ldr	r3, [r7, #28]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d017      	beq.n	800ad76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ad4e:	88fa      	ldrh	r2, [r7, #6]
 800ad50:	2300      	movs	r3, #0
 800ad52:	9303      	str	r3, [sp, #12]
 800ad54:	69fb      	ldr	r3, [r7, #28]
 800ad56:	9302      	str	r3, [sp, #8]
 800ad58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad5a:	9301      	str	r3, [sp, #4]
 800ad5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad5e:	9300      	str	r3, [sp, #0]
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	68b9      	ldr	r1, [r7, #8]
 800ad64:	68f8      	ldr	r0, [r7, #12]
 800ad66:	f000 f80e 	bl	800ad86 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad6a:	69f8      	ldr	r0, [r7, #28]
 800ad6c:	f000 f89c 	bl	800aea8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ad70:	2301      	movs	r3, #1
 800ad72:	61bb      	str	r3, [r7, #24]
 800ad74:	e002      	b.n	800ad7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ad76:	f04f 33ff 	mov.w	r3, #4294967295
 800ad7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ad7c:	69bb      	ldr	r3, [r7, #24]
	}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3720      	adds	r7, #32
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b088      	sub	sp, #32
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	60f8      	str	r0, [r7, #12]
 800ad8e:	60b9      	str	r1, [r7, #8]
 800ad90:	607a      	str	r2, [r7, #4]
 800ad92:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ad94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad96:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	21a5      	movs	r1, #165	@ 0xa5
 800ada0:	f002 ff88 	bl	800dcb4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ada4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ada6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800adae:	3b01      	subs	r3, #1
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	4413      	add	r3, r2
 800adb4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	f023 0307 	bic.w	r3, r3, #7
 800adbc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800adbe:	69bb      	ldr	r3, [r7, #24]
 800adc0:	f003 0307 	and.w	r3, r3, #7
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00b      	beq.n	800ade0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800adc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adcc:	f383 8811 	msr	BASEPRI, r3
 800add0:	f3bf 8f6f 	isb	sy
 800add4:	f3bf 8f4f 	dsb	sy
 800add8:	617b      	str	r3, [r7, #20]
}
 800adda:	bf00      	nop
 800addc:	bf00      	nop
 800adde:	e7fd      	b.n	800addc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d01f      	beq.n	800ae26 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ade6:	2300      	movs	r3, #0
 800ade8:	61fb      	str	r3, [r7, #28]
 800adea:	e012      	b.n	800ae12 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800adec:	68ba      	ldr	r2, [r7, #8]
 800adee:	69fb      	ldr	r3, [r7, #28]
 800adf0:	4413      	add	r3, r2
 800adf2:	7819      	ldrb	r1, [r3, #0]
 800adf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adf6:	69fb      	ldr	r3, [r7, #28]
 800adf8:	4413      	add	r3, r2
 800adfa:	3334      	adds	r3, #52	@ 0x34
 800adfc:	460a      	mov	r2, r1
 800adfe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ae00:	68ba      	ldr	r2, [r7, #8]
 800ae02:	69fb      	ldr	r3, [r7, #28]
 800ae04:	4413      	add	r3, r2
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d006      	beq.n	800ae1a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	61fb      	str	r3, [r7, #28]
 800ae12:	69fb      	ldr	r3, [r7, #28]
 800ae14:	2b0f      	cmp	r3, #15
 800ae16:	d9e9      	bls.n	800adec <prvInitialiseNewTask+0x66>
 800ae18:	e000      	b.n	800ae1c <prvInitialiseNewTask+0x96>
			{
				break;
 800ae1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ae1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ae24:	e003      	b.n	800ae2e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ae26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ae2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae30:	2b37      	cmp	r3, #55	@ 0x37
 800ae32:	d901      	bls.n	800ae38 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ae34:	2337      	movs	r3, #55	@ 0x37
 800ae36:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ae38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae3c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ae3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae42:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ae44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae46:	2200      	movs	r2, #0
 800ae48:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae4c:	3304      	adds	r3, #4
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7fe fe34 	bl	8009abc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae56:	3318      	adds	r3, #24
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f7fe fe2f 	bl	8009abc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ae5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae66:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ae6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ae6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae72:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ae74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae76:	2200      	movs	r2, #0
 800ae78:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ae7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ae82:	683a      	ldr	r2, [r7, #0]
 800ae84:	68f9      	ldr	r1, [r7, #12]
 800ae86:	69b8      	ldr	r0, [r7, #24]
 800ae88:	f001 fa3e 	bl	800c308 <pxPortInitialiseStack>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ae92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d002      	beq.n	800ae9e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ae98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae9e:	bf00      	nop
 800aea0:	3720      	adds	r7, #32
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
	...

0800aea8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aeb0:	f001 fb5a 	bl	800c568 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aeb4:	4b2d      	ldr	r3, [pc, #180]	@ (800af6c <prvAddNewTaskToReadyList+0xc4>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	3301      	adds	r3, #1
 800aeba:	4a2c      	ldr	r2, [pc, #176]	@ (800af6c <prvAddNewTaskToReadyList+0xc4>)
 800aebc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aebe:	4b2c      	ldr	r3, [pc, #176]	@ (800af70 <prvAddNewTaskToReadyList+0xc8>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d109      	bne.n	800aeda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aec6:	4a2a      	ldr	r2, [pc, #168]	@ (800af70 <prvAddNewTaskToReadyList+0xc8>)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aecc:	4b27      	ldr	r3, [pc, #156]	@ (800af6c <prvAddNewTaskToReadyList+0xc4>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d110      	bne.n	800aef6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aed4:	f000 fc1e 	bl	800b714 <prvInitialiseTaskLists>
 800aed8:	e00d      	b.n	800aef6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aeda:	4b26      	ldr	r3, [pc, #152]	@ (800af74 <prvAddNewTaskToReadyList+0xcc>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d109      	bne.n	800aef6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aee2:	4b23      	ldr	r3, [pc, #140]	@ (800af70 <prvAddNewTaskToReadyList+0xc8>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d802      	bhi.n	800aef6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aef0:	4a1f      	ldr	r2, [pc, #124]	@ (800af70 <prvAddNewTaskToReadyList+0xc8>)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aef6:	4b20      	ldr	r3, [pc, #128]	@ (800af78 <prvAddNewTaskToReadyList+0xd0>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	3301      	adds	r3, #1
 800aefc:	4a1e      	ldr	r2, [pc, #120]	@ (800af78 <prvAddNewTaskToReadyList+0xd0>)
 800aefe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800af00:	4b1d      	ldr	r3, [pc, #116]	@ (800af78 <prvAddNewTaskToReadyList+0xd0>)
 800af02:	681a      	ldr	r2, [r3, #0]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af0c:	4b1b      	ldr	r3, [pc, #108]	@ (800af7c <prvAddNewTaskToReadyList+0xd4>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	429a      	cmp	r2, r3
 800af12:	d903      	bls.n	800af1c <prvAddNewTaskToReadyList+0x74>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af18:	4a18      	ldr	r2, [pc, #96]	@ (800af7c <prvAddNewTaskToReadyList+0xd4>)
 800af1a:	6013      	str	r3, [r2, #0]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af20:	4613      	mov	r3, r2
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	4413      	add	r3, r2
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	4a15      	ldr	r2, [pc, #84]	@ (800af80 <prvAddNewTaskToReadyList+0xd8>)
 800af2a:	441a      	add	r2, r3
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	3304      	adds	r3, #4
 800af30:	4619      	mov	r1, r3
 800af32:	4610      	mov	r0, r2
 800af34:	f7fe fdcf 	bl	8009ad6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800af38:	f001 fb48 	bl	800c5cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800af3c:	4b0d      	ldr	r3, [pc, #52]	@ (800af74 <prvAddNewTaskToReadyList+0xcc>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d00e      	beq.n	800af62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800af44:	4b0a      	ldr	r3, [pc, #40]	@ (800af70 <prvAddNewTaskToReadyList+0xc8>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af4e:	429a      	cmp	r2, r3
 800af50:	d207      	bcs.n	800af62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800af52:	4b0c      	ldr	r3, [pc, #48]	@ (800af84 <prvAddNewTaskToReadyList+0xdc>)
 800af54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af58:	601a      	str	r2, [r3, #0]
 800af5a:	f3bf 8f4f 	dsb	sy
 800af5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af62:	bf00      	nop
 800af64:	3708      	adds	r7, #8
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	20002ae4 	.word	0x20002ae4
 800af70:	20002610 	.word	0x20002610
 800af74:	20002af0 	.word	0x20002af0
 800af78:	20002b00 	.word	0x20002b00
 800af7c:	20002aec 	.word	0x20002aec
 800af80:	20002614 	.word	0x20002614
 800af84:	e000ed04 	.word	0xe000ed04

0800af88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800af90:	2300      	movs	r3, #0
 800af92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d018      	beq.n	800afcc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800af9a:	4b14      	ldr	r3, [pc, #80]	@ (800afec <vTaskDelay+0x64>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d00b      	beq.n	800afba <vTaskDelay+0x32>
	__asm volatile
 800afa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa6:	f383 8811 	msr	BASEPRI, r3
 800afaa:	f3bf 8f6f 	isb	sy
 800afae:	f3bf 8f4f 	dsb	sy
 800afb2:	60bb      	str	r3, [r7, #8]
}
 800afb4:	bf00      	nop
 800afb6:	bf00      	nop
 800afb8:	e7fd      	b.n	800afb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800afba:	f000 f883 	bl	800b0c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800afbe:	2100      	movs	r1, #0
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 fdf3 	bl	800bbac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800afc6:	f000 f88b 	bl	800b0e0 <xTaskResumeAll>
 800afca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d107      	bne.n	800afe2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800afd2:	4b07      	ldr	r3, [pc, #28]	@ (800aff0 <vTaskDelay+0x68>)
 800afd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afd8:	601a      	str	r2, [r3, #0]
 800afda:	f3bf 8f4f 	dsb	sy
 800afde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800afe2:	bf00      	nop
 800afe4:	3710      	adds	r7, #16
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	20002b0c 	.word	0x20002b0c
 800aff0:	e000ed04 	.word	0xe000ed04

0800aff4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b08a      	sub	sp, #40	@ 0x28
 800aff8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800affa:	2300      	movs	r3, #0
 800affc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800affe:	2300      	movs	r3, #0
 800b000:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b002:	463a      	mov	r2, r7
 800b004:	1d39      	adds	r1, r7, #4
 800b006:	f107 0308 	add.w	r3, r7, #8
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7fe fd02 	bl	8009a14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b010:	6839      	ldr	r1, [r7, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	68ba      	ldr	r2, [r7, #8]
 800b016:	9202      	str	r2, [sp, #8]
 800b018:	9301      	str	r3, [sp, #4]
 800b01a:	2300      	movs	r3, #0
 800b01c:	9300      	str	r3, [sp, #0]
 800b01e:	2300      	movs	r3, #0
 800b020:	460a      	mov	r2, r1
 800b022:	4922      	ldr	r1, [pc, #136]	@ (800b0ac <vTaskStartScheduler+0xb8>)
 800b024:	4822      	ldr	r0, [pc, #136]	@ (800b0b0 <vTaskStartScheduler+0xbc>)
 800b026:	f7ff fe09 	bl	800ac3c <xTaskCreateStatic>
 800b02a:	4603      	mov	r3, r0
 800b02c:	4a21      	ldr	r2, [pc, #132]	@ (800b0b4 <vTaskStartScheduler+0xc0>)
 800b02e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b030:	4b20      	ldr	r3, [pc, #128]	@ (800b0b4 <vTaskStartScheduler+0xc0>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d002      	beq.n	800b03e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b038:	2301      	movs	r3, #1
 800b03a:	617b      	str	r3, [r7, #20]
 800b03c:	e001      	b.n	800b042 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b03e:	2300      	movs	r3, #0
 800b040:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	2b01      	cmp	r3, #1
 800b046:	d102      	bne.n	800b04e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b048:	f000 fe04 	bl	800bc54 <xTimerCreateTimerTask>
 800b04c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	2b01      	cmp	r3, #1
 800b052:	d116      	bne.n	800b082 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b058:	f383 8811 	msr	BASEPRI, r3
 800b05c:	f3bf 8f6f 	isb	sy
 800b060:	f3bf 8f4f 	dsb	sy
 800b064:	613b      	str	r3, [r7, #16]
}
 800b066:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b068:	4b13      	ldr	r3, [pc, #76]	@ (800b0b8 <vTaskStartScheduler+0xc4>)
 800b06a:	f04f 32ff 	mov.w	r2, #4294967295
 800b06e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b070:	4b12      	ldr	r3, [pc, #72]	@ (800b0bc <vTaskStartScheduler+0xc8>)
 800b072:	2201      	movs	r2, #1
 800b074:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b076:	4b12      	ldr	r3, [pc, #72]	@ (800b0c0 <vTaskStartScheduler+0xcc>)
 800b078:	2200      	movs	r2, #0
 800b07a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b07c:	f001 f9d0 	bl	800c420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b080:	e00f      	b.n	800b0a2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b088:	d10b      	bne.n	800b0a2 <vTaskStartScheduler+0xae>
	__asm volatile
 800b08a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b08e:	f383 8811 	msr	BASEPRI, r3
 800b092:	f3bf 8f6f 	isb	sy
 800b096:	f3bf 8f4f 	dsb	sy
 800b09a:	60fb      	str	r3, [r7, #12]
}
 800b09c:	bf00      	nop
 800b09e:	bf00      	nop
 800b0a0:	e7fd      	b.n	800b09e <vTaskStartScheduler+0xaa>
}
 800b0a2:	bf00      	nop
 800b0a4:	3718      	adds	r7, #24
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	080116fc 	.word	0x080116fc
 800b0b0:	0800b6e5 	.word	0x0800b6e5
 800b0b4:	20002b08 	.word	0x20002b08
 800b0b8:	20002b04 	.word	0x20002b04
 800b0bc:	20002af0 	.word	0x20002af0
 800b0c0:	20002ae8 	.word	0x20002ae8

0800b0c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b0c8:	4b04      	ldr	r3, [pc, #16]	@ (800b0dc <vTaskSuspendAll+0x18>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	4a03      	ldr	r2, [pc, #12]	@ (800b0dc <vTaskSuspendAll+0x18>)
 800b0d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b0d2:	bf00      	nop
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr
 800b0dc:	20002b0c 	.word	0x20002b0c

0800b0e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b0ee:	4b42      	ldr	r3, [pc, #264]	@ (800b1f8 <xTaskResumeAll+0x118>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d10b      	bne.n	800b10e <xTaskResumeAll+0x2e>
	__asm volatile
 800b0f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0fa:	f383 8811 	msr	BASEPRI, r3
 800b0fe:	f3bf 8f6f 	isb	sy
 800b102:	f3bf 8f4f 	dsb	sy
 800b106:	603b      	str	r3, [r7, #0]
}
 800b108:	bf00      	nop
 800b10a:	bf00      	nop
 800b10c:	e7fd      	b.n	800b10a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b10e:	f001 fa2b 	bl	800c568 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b112:	4b39      	ldr	r3, [pc, #228]	@ (800b1f8 <xTaskResumeAll+0x118>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	3b01      	subs	r3, #1
 800b118:	4a37      	ldr	r2, [pc, #220]	@ (800b1f8 <xTaskResumeAll+0x118>)
 800b11a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b11c:	4b36      	ldr	r3, [pc, #216]	@ (800b1f8 <xTaskResumeAll+0x118>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d162      	bne.n	800b1ea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b124:	4b35      	ldr	r3, [pc, #212]	@ (800b1fc <xTaskResumeAll+0x11c>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d05e      	beq.n	800b1ea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b12c:	e02f      	b.n	800b18e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b12e:	4b34      	ldr	r3, [pc, #208]	@ (800b200 <xTaskResumeAll+0x120>)
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	68db      	ldr	r3, [r3, #12]
 800b134:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	3318      	adds	r3, #24
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7fe fd28 	bl	8009b90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	3304      	adds	r3, #4
 800b144:	4618      	mov	r0, r3
 800b146:	f7fe fd23 	bl	8009b90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b14e:	4b2d      	ldr	r3, [pc, #180]	@ (800b204 <xTaskResumeAll+0x124>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	429a      	cmp	r2, r3
 800b154:	d903      	bls.n	800b15e <xTaskResumeAll+0x7e>
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b15a:	4a2a      	ldr	r2, [pc, #168]	@ (800b204 <xTaskResumeAll+0x124>)
 800b15c:	6013      	str	r3, [r2, #0]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b162:	4613      	mov	r3, r2
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	4413      	add	r3, r2
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	4a27      	ldr	r2, [pc, #156]	@ (800b208 <xTaskResumeAll+0x128>)
 800b16c:	441a      	add	r2, r3
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	3304      	adds	r3, #4
 800b172:	4619      	mov	r1, r3
 800b174:	4610      	mov	r0, r2
 800b176:	f7fe fcae 	bl	8009ad6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b17e:	4b23      	ldr	r3, [pc, #140]	@ (800b20c <xTaskResumeAll+0x12c>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b184:	429a      	cmp	r2, r3
 800b186:	d302      	bcc.n	800b18e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b188:	4b21      	ldr	r3, [pc, #132]	@ (800b210 <xTaskResumeAll+0x130>)
 800b18a:	2201      	movs	r2, #1
 800b18c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b18e:	4b1c      	ldr	r3, [pc, #112]	@ (800b200 <xTaskResumeAll+0x120>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d1cb      	bne.n	800b12e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d001      	beq.n	800b1a0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b19c:	f000 fb58 	bl	800b850 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b1a0:	4b1c      	ldr	r3, [pc, #112]	@ (800b214 <xTaskResumeAll+0x134>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d010      	beq.n	800b1ce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b1ac:	f000 f846 	bl	800b23c <xTaskIncrementTick>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d002      	beq.n	800b1bc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b1b6:	4b16      	ldr	r3, [pc, #88]	@ (800b210 <xTaskResumeAll+0x130>)
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	3b01      	subs	r3, #1
 800b1c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d1f1      	bne.n	800b1ac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b1c8:	4b12      	ldr	r3, [pc, #72]	@ (800b214 <xTaskResumeAll+0x134>)
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b1ce:	4b10      	ldr	r3, [pc, #64]	@ (800b210 <xTaskResumeAll+0x130>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d009      	beq.n	800b1ea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b1da:	4b0f      	ldr	r3, [pc, #60]	@ (800b218 <xTaskResumeAll+0x138>)
 800b1dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1e0:	601a      	str	r2, [r3, #0]
 800b1e2:	f3bf 8f4f 	dsb	sy
 800b1e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1ea:	f001 f9ef 	bl	800c5cc <vPortExitCritical>

	return xAlreadyYielded;
 800b1ee:	68bb      	ldr	r3, [r7, #8]
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3710      	adds	r7, #16
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	20002b0c 	.word	0x20002b0c
 800b1fc:	20002ae4 	.word	0x20002ae4
 800b200:	20002aa4 	.word	0x20002aa4
 800b204:	20002aec 	.word	0x20002aec
 800b208:	20002614 	.word	0x20002614
 800b20c:	20002610 	.word	0x20002610
 800b210:	20002af8 	.word	0x20002af8
 800b214:	20002af4 	.word	0x20002af4
 800b218:	e000ed04 	.word	0xe000ed04

0800b21c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b222:	4b05      	ldr	r3, [pc, #20]	@ (800b238 <xTaskGetTickCount+0x1c>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b228:	687b      	ldr	r3, [r7, #4]
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	370c      	adds	r7, #12
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop
 800b238:	20002ae8 	.word	0x20002ae8

0800b23c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b086      	sub	sp, #24
 800b240:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b242:	2300      	movs	r3, #0
 800b244:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b246:	4b4f      	ldr	r3, [pc, #316]	@ (800b384 <xTaskIncrementTick+0x148>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f040 8090 	bne.w	800b370 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b250:	4b4d      	ldr	r3, [pc, #308]	@ (800b388 <xTaskIncrementTick+0x14c>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	3301      	adds	r3, #1
 800b256:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b258:	4a4b      	ldr	r2, [pc, #300]	@ (800b388 <xTaskIncrementTick+0x14c>)
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d121      	bne.n	800b2a8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b264:	4b49      	ldr	r3, [pc, #292]	@ (800b38c <xTaskIncrementTick+0x150>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00b      	beq.n	800b286 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b272:	f383 8811 	msr	BASEPRI, r3
 800b276:	f3bf 8f6f 	isb	sy
 800b27a:	f3bf 8f4f 	dsb	sy
 800b27e:	603b      	str	r3, [r7, #0]
}
 800b280:	bf00      	nop
 800b282:	bf00      	nop
 800b284:	e7fd      	b.n	800b282 <xTaskIncrementTick+0x46>
 800b286:	4b41      	ldr	r3, [pc, #260]	@ (800b38c <xTaskIncrementTick+0x150>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	60fb      	str	r3, [r7, #12]
 800b28c:	4b40      	ldr	r3, [pc, #256]	@ (800b390 <xTaskIncrementTick+0x154>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a3e      	ldr	r2, [pc, #248]	@ (800b38c <xTaskIncrementTick+0x150>)
 800b292:	6013      	str	r3, [r2, #0]
 800b294:	4a3e      	ldr	r2, [pc, #248]	@ (800b390 <xTaskIncrementTick+0x154>)
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	6013      	str	r3, [r2, #0]
 800b29a:	4b3e      	ldr	r3, [pc, #248]	@ (800b394 <xTaskIncrementTick+0x158>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	4a3c      	ldr	r2, [pc, #240]	@ (800b394 <xTaskIncrementTick+0x158>)
 800b2a2:	6013      	str	r3, [r2, #0]
 800b2a4:	f000 fad4 	bl	800b850 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b2a8:	4b3b      	ldr	r3, [pc, #236]	@ (800b398 <xTaskIncrementTick+0x15c>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	693a      	ldr	r2, [r7, #16]
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d349      	bcc.n	800b346 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2b2:	4b36      	ldr	r3, [pc, #216]	@ (800b38c <xTaskIncrementTick+0x150>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d104      	bne.n	800b2c6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2bc:	4b36      	ldr	r3, [pc, #216]	@ (800b398 <xTaskIncrementTick+0x15c>)
 800b2be:	f04f 32ff 	mov.w	r2, #4294967295
 800b2c2:	601a      	str	r2, [r3, #0]
					break;
 800b2c4:	e03f      	b.n	800b346 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2c6:	4b31      	ldr	r3, [pc, #196]	@ (800b38c <xTaskIncrementTick+0x150>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b2d6:	693a      	ldr	r2, [r7, #16]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d203      	bcs.n	800b2e6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b2de:	4a2e      	ldr	r2, [pc, #184]	@ (800b398 <xTaskIncrementTick+0x15c>)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b2e4:	e02f      	b.n	800b346 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	3304      	adds	r3, #4
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7fe fc50 	bl	8009b90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d004      	beq.n	800b302 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	3318      	adds	r3, #24
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7fe fc47 	bl	8009b90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b306:	4b25      	ldr	r3, [pc, #148]	@ (800b39c <xTaskIncrementTick+0x160>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d903      	bls.n	800b316 <xTaskIncrementTick+0xda>
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b312:	4a22      	ldr	r2, [pc, #136]	@ (800b39c <xTaskIncrementTick+0x160>)
 800b314:	6013      	str	r3, [r2, #0]
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b31a:	4613      	mov	r3, r2
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	4413      	add	r3, r2
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	4a1f      	ldr	r2, [pc, #124]	@ (800b3a0 <xTaskIncrementTick+0x164>)
 800b324:	441a      	add	r2, r3
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	3304      	adds	r3, #4
 800b32a:	4619      	mov	r1, r3
 800b32c:	4610      	mov	r0, r2
 800b32e:	f7fe fbd2 	bl	8009ad6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b336:	4b1b      	ldr	r3, [pc, #108]	@ (800b3a4 <xTaskIncrementTick+0x168>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d3b8      	bcc.n	800b2b2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b340:	2301      	movs	r3, #1
 800b342:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b344:	e7b5      	b.n	800b2b2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b346:	4b17      	ldr	r3, [pc, #92]	@ (800b3a4 <xTaskIncrementTick+0x168>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b34c:	4914      	ldr	r1, [pc, #80]	@ (800b3a0 <xTaskIncrementTick+0x164>)
 800b34e:	4613      	mov	r3, r2
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	4413      	add	r3, r2
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	440b      	add	r3, r1
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d901      	bls.n	800b362 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b35e:	2301      	movs	r3, #1
 800b360:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b362:	4b11      	ldr	r3, [pc, #68]	@ (800b3a8 <xTaskIncrementTick+0x16c>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d007      	beq.n	800b37a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b36a:	2301      	movs	r3, #1
 800b36c:	617b      	str	r3, [r7, #20]
 800b36e:	e004      	b.n	800b37a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b370:	4b0e      	ldr	r3, [pc, #56]	@ (800b3ac <xTaskIncrementTick+0x170>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	3301      	adds	r3, #1
 800b376:	4a0d      	ldr	r2, [pc, #52]	@ (800b3ac <xTaskIncrementTick+0x170>)
 800b378:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b37a:	697b      	ldr	r3, [r7, #20]
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3718      	adds	r7, #24
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}
 800b384:	20002b0c 	.word	0x20002b0c
 800b388:	20002ae8 	.word	0x20002ae8
 800b38c:	20002a9c 	.word	0x20002a9c
 800b390:	20002aa0 	.word	0x20002aa0
 800b394:	20002afc 	.word	0x20002afc
 800b398:	20002b04 	.word	0x20002b04
 800b39c:	20002aec 	.word	0x20002aec
 800b3a0:	20002614 	.word	0x20002614
 800b3a4:	20002610 	.word	0x20002610
 800b3a8:	20002af8 	.word	0x20002af8
 800b3ac:	20002af4 	.word	0x20002af4

0800b3b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b085      	sub	sp, #20
 800b3b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b3b6:	4b28      	ldr	r3, [pc, #160]	@ (800b458 <vTaskSwitchContext+0xa8>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d003      	beq.n	800b3c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b3be:	4b27      	ldr	r3, [pc, #156]	@ (800b45c <vTaskSwitchContext+0xac>)
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b3c4:	e042      	b.n	800b44c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b3c6:	4b25      	ldr	r3, [pc, #148]	@ (800b45c <vTaskSwitchContext+0xac>)
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3cc:	4b24      	ldr	r3, [pc, #144]	@ (800b460 <vTaskSwitchContext+0xb0>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	60fb      	str	r3, [r7, #12]
 800b3d2:	e011      	b.n	800b3f8 <vTaskSwitchContext+0x48>
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d10b      	bne.n	800b3f2 <vTaskSwitchContext+0x42>
	__asm volatile
 800b3da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3de:	f383 8811 	msr	BASEPRI, r3
 800b3e2:	f3bf 8f6f 	isb	sy
 800b3e6:	f3bf 8f4f 	dsb	sy
 800b3ea:	607b      	str	r3, [r7, #4]
}
 800b3ec:	bf00      	nop
 800b3ee:	bf00      	nop
 800b3f0:	e7fd      	b.n	800b3ee <vTaskSwitchContext+0x3e>
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	3b01      	subs	r3, #1
 800b3f6:	60fb      	str	r3, [r7, #12]
 800b3f8:	491a      	ldr	r1, [pc, #104]	@ (800b464 <vTaskSwitchContext+0xb4>)
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	4613      	mov	r3, r2
 800b3fe:	009b      	lsls	r3, r3, #2
 800b400:	4413      	add	r3, r2
 800b402:	009b      	lsls	r3, r3, #2
 800b404:	440b      	add	r3, r1
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d0e3      	beq.n	800b3d4 <vTaskSwitchContext+0x24>
 800b40c:	68fa      	ldr	r2, [r7, #12]
 800b40e:	4613      	mov	r3, r2
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	4413      	add	r3, r2
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	4a13      	ldr	r2, [pc, #76]	@ (800b464 <vTaskSwitchContext+0xb4>)
 800b418:	4413      	add	r3, r2
 800b41a:	60bb      	str	r3, [r7, #8]
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	685a      	ldr	r2, [r3, #4]
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	605a      	str	r2, [r3, #4]
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	685a      	ldr	r2, [r3, #4]
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	3308      	adds	r3, #8
 800b42e:	429a      	cmp	r2, r3
 800b430:	d104      	bne.n	800b43c <vTaskSwitchContext+0x8c>
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	685a      	ldr	r2, [r3, #4]
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	605a      	str	r2, [r3, #4]
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	68db      	ldr	r3, [r3, #12]
 800b442:	4a09      	ldr	r2, [pc, #36]	@ (800b468 <vTaskSwitchContext+0xb8>)
 800b444:	6013      	str	r3, [r2, #0]
 800b446:	4a06      	ldr	r2, [pc, #24]	@ (800b460 <vTaskSwitchContext+0xb0>)
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	6013      	str	r3, [r2, #0]
}
 800b44c:	bf00      	nop
 800b44e:	3714      	adds	r7, #20
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr
 800b458:	20002b0c 	.word	0x20002b0c
 800b45c:	20002af8 	.word	0x20002af8
 800b460:	20002aec 	.word	0x20002aec
 800b464:	20002614 	.word	0x20002614
 800b468:	20002610 	.word	0x20002610

0800b46c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d10b      	bne.n	800b494 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b47c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b480:	f383 8811 	msr	BASEPRI, r3
 800b484:	f3bf 8f6f 	isb	sy
 800b488:	f3bf 8f4f 	dsb	sy
 800b48c:	60fb      	str	r3, [r7, #12]
}
 800b48e:	bf00      	nop
 800b490:	bf00      	nop
 800b492:	e7fd      	b.n	800b490 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b494:	4b07      	ldr	r3, [pc, #28]	@ (800b4b4 <vTaskPlaceOnEventList+0x48>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	3318      	adds	r3, #24
 800b49a:	4619      	mov	r1, r3
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f7fe fb3e 	bl	8009b1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b4a2:	2101      	movs	r1, #1
 800b4a4:	6838      	ldr	r0, [r7, #0]
 800b4a6:	f000 fb81 	bl	800bbac <prvAddCurrentTaskToDelayedList>
}
 800b4aa:	bf00      	nop
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	20002610 	.word	0x20002610

0800b4b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b086      	sub	sp, #24
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	60b9      	str	r1, [r7, #8]
 800b4c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d10b      	bne.n	800b4e2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b4ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ce:	f383 8811 	msr	BASEPRI, r3
 800b4d2:	f3bf 8f6f 	isb	sy
 800b4d6:	f3bf 8f4f 	dsb	sy
 800b4da:	617b      	str	r3, [r7, #20]
}
 800b4dc:	bf00      	nop
 800b4de:	bf00      	nop
 800b4e0:	e7fd      	b.n	800b4de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b4e2:	4b0a      	ldr	r3, [pc, #40]	@ (800b50c <vTaskPlaceOnEventListRestricted+0x54>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	3318      	adds	r3, #24
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	68f8      	ldr	r0, [r7, #12]
 800b4ec:	f7fe faf3 	bl	8009ad6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d002      	beq.n	800b4fc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b4f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b4fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b4fc:	6879      	ldr	r1, [r7, #4]
 800b4fe:	68b8      	ldr	r0, [r7, #8]
 800b500:	f000 fb54 	bl	800bbac <prvAddCurrentTaskToDelayedList>
	}
 800b504:	bf00      	nop
 800b506:	3718      	adds	r7, #24
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	20002610 	.word	0x20002610

0800b510 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b086      	sub	sp, #24
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d10b      	bne.n	800b53e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b52a:	f383 8811 	msr	BASEPRI, r3
 800b52e:	f3bf 8f6f 	isb	sy
 800b532:	f3bf 8f4f 	dsb	sy
 800b536:	60fb      	str	r3, [r7, #12]
}
 800b538:	bf00      	nop
 800b53a:	bf00      	nop
 800b53c:	e7fd      	b.n	800b53a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	3318      	adds	r3, #24
 800b542:	4618      	mov	r0, r3
 800b544:	f7fe fb24 	bl	8009b90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b548:	4b1d      	ldr	r3, [pc, #116]	@ (800b5c0 <xTaskRemoveFromEventList+0xb0>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d11d      	bne.n	800b58c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	3304      	adds	r3, #4
 800b554:	4618      	mov	r0, r3
 800b556:	f7fe fb1b 	bl	8009b90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b55e:	4b19      	ldr	r3, [pc, #100]	@ (800b5c4 <xTaskRemoveFromEventList+0xb4>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	429a      	cmp	r2, r3
 800b564:	d903      	bls.n	800b56e <xTaskRemoveFromEventList+0x5e>
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b56a:	4a16      	ldr	r2, [pc, #88]	@ (800b5c4 <xTaskRemoveFromEventList+0xb4>)
 800b56c:	6013      	str	r3, [r2, #0]
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b572:	4613      	mov	r3, r2
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	4413      	add	r3, r2
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	4a13      	ldr	r2, [pc, #76]	@ (800b5c8 <xTaskRemoveFromEventList+0xb8>)
 800b57c:	441a      	add	r2, r3
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	3304      	adds	r3, #4
 800b582:	4619      	mov	r1, r3
 800b584:	4610      	mov	r0, r2
 800b586:	f7fe faa6 	bl	8009ad6 <vListInsertEnd>
 800b58a:	e005      	b.n	800b598 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	3318      	adds	r3, #24
 800b590:	4619      	mov	r1, r3
 800b592:	480e      	ldr	r0, [pc, #56]	@ (800b5cc <xTaskRemoveFromEventList+0xbc>)
 800b594:	f7fe fa9f 	bl	8009ad6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b59c:	4b0c      	ldr	r3, [pc, #48]	@ (800b5d0 <xTaskRemoveFromEventList+0xc0>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d905      	bls.n	800b5b2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b5aa:	4b0a      	ldr	r3, [pc, #40]	@ (800b5d4 <xTaskRemoveFromEventList+0xc4>)
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	601a      	str	r2, [r3, #0]
 800b5b0:	e001      	b.n	800b5b6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b5b6:	697b      	ldr	r3, [r7, #20]
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3718      	adds	r7, #24
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}
 800b5c0:	20002b0c 	.word	0x20002b0c
 800b5c4:	20002aec 	.word	0x20002aec
 800b5c8:	20002614 	.word	0x20002614
 800b5cc:	20002aa4 	.word	0x20002aa4
 800b5d0:	20002610 	.word	0x20002610
 800b5d4:	20002af8 	.word	0x20002af8

0800b5d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b083      	sub	sp, #12
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b5e0:	4b06      	ldr	r3, [pc, #24]	@ (800b5fc <vTaskInternalSetTimeOutState+0x24>)
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b5e8:	4b05      	ldr	r3, [pc, #20]	@ (800b600 <vTaskInternalSetTimeOutState+0x28>)
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	605a      	str	r2, [r3, #4]
}
 800b5f0:	bf00      	nop
 800b5f2:	370c      	adds	r7, #12
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr
 800b5fc:	20002afc 	.word	0x20002afc
 800b600:	20002ae8 	.word	0x20002ae8

0800b604 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b088      	sub	sp, #32
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d10b      	bne.n	800b62c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b618:	f383 8811 	msr	BASEPRI, r3
 800b61c:	f3bf 8f6f 	isb	sy
 800b620:	f3bf 8f4f 	dsb	sy
 800b624:	613b      	str	r3, [r7, #16]
}
 800b626:	bf00      	nop
 800b628:	bf00      	nop
 800b62a:	e7fd      	b.n	800b628 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d10b      	bne.n	800b64a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b636:	f383 8811 	msr	BASEPRI, r3
 800b63a:	f3bf 8f6f 	isb	sy
 800b63e:	f3bf 8f4f 	dsb	sy
 800b642:	60fb      	str	r3, [r7, #12]
}
 800b644:	bf00      	nop
 800b646:	bf00      	nop
 800b648:	e7fd      	b.n	800b646 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b64a:	f000 ff8d 	bl	800c568 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b64e:	4b1d      	ldr	r3, [pc, #116]	@ (800b6c4 <xTaskCheckForTimeOut+0xc0>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	69ba      	ldr	r2, [r7, #24]
 800b65a:	1ad3      	subs	r3, r2, r3
 800b65c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b666:	d102      	bne.n	800b66e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b668:	2300      	movs	r3, #0
 800b66a:	61fb      	str	r3, [r7, #28]
 800b66c:	e023      	b.n	800b6b6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	4b15      	ldr	r3, [pc, #84]	@ (800b6c8 <xTaskCheckForTimeOut+0xc4>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	429a      	cmp	r2, r3
 800b678:	d007      	beq.n	800b68a <xTaskCheckForTimeOut+0x86>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	69ba      	ldr	r2, [r7, #24]
 800b680:	429a      	cmp	r2, r3
 800b682:	d302      	bcc.n	800b68a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b684:	2301      	movs	r3, #1
 800b686:	61fb      	str	r3, [r7, #28]
 800b688:	e015      	b.n	800b6b6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	697a      	ldr	r2, [r7, #20]
 800b690:	429a      	cmp	r2, r3
 800b692:	d20b      	bcs.n	800b6ac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	1ad2      	subs	r2, r2, r3
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f7ff ff99 	bl	800b5d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	61fb      	str	r3, [r7, #28]
 800b6aa:	e004      	b.n	800b6b6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b6b6:	f000 ff89 	bl	800c5cc <vPortExitCritical>

	return xReturn;
 800b6ba:	69fb      	ldr	r3, [r7, #28]
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3720      	adds	r7, #32
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	20002ae8 	.word	0x20002ae8
 800b6c8:	20002afc 	.word	0x20002afc

0800b6cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b6d0:	4b03      	ldr	r3, [pc, #12]	@ (800b6e0 <vTaskMissedYield+0x14>)
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	601a      	str	r2, [r3, #0]
}
 800b6d6:	bf00      	nop
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr
 800b6e0:	20002af8 	.word	0x20002af8

0800b6e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b082      	sub	sp, #8
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b6ec:	f000 f852 	bl	800b794 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b6f0:	4b06      	ldr	r3, [pc, #24]	@ (800b70c <prvIdleTask+0x28>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d9f9      	bls.n	800b6ec <prvIdleTask+0x8>
			{
				taskYIELD();
 800b6f8:	4b05      	ldr	r3, [pc, #20]	@ (800b710 <prvIdleTask+0x2c>)
 800b6fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6fe:	601a      	str	r2, [r3, #0]
 800b700:	f3bf 8f4f 	dsb	sy
 800b704:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b708:	e7f0      	b.n	800b6ec <prvIdleTask+0x8>
 800b70a:	bf00      	nop
 800b70c:	20002614 	.word	0x20002614
 800b710:	e000ed04 	.word	0xe000ed04

0800b714 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b71a:	2300      	movs	r3, #0
 800b71c:	607b      	str	r3, [r7, #4]
 800b71e:	e00c      	b.n	800b73a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	4613      	mov	r3, r2
 800b724:	009b      	lsls	r3, r3, #2
 800b726:	4413      	add	r3, r2
 800b728:	009b      	lsls	r3, r3, #2
 800b72a:	4a12      	ldr	r2, [pc, #72]	@ (800b774 <prvInitialiseTaskLists+0x60>)
 800b72c:	4413      	add	r3, r2
 800b72e:	4618      	mov	r0, r3
 800b730:	f7fe f9a4 	bl	8009a7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	3301      	adds	r3, #1
 800b738:	607b      	str	r3, [r7, #4]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2b37      	cmp	r3, #55	@ 0x37
 800b73e:	d9ef      	bls.n	800b720 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b740:	480d      	ldr	r0, [pc, #52]	@ (800b778 <prvInitialiseTaskLists+0x64>)
 800b742:	f7fe f99b 	bl	8009a7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b746:	480d      	ldr	r0, [pc, #52]	@ (800b77c <prvInitialiseTaskLists+0x68>)
 800b748:	f7fe f998 	bl	8009a7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b74c:	480c      	ldr	r0, [pc, #48]	@ (800b780 <prvInitialiseTaskLists+0x6c>)
 800b74e:	f7fe f995 	bl	8009a7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b752:	480c      	ldr	r0, [pc, #48]	@ (800b784 <prvInitialiseTaskLists+0x70>)
 800b754:	f7fe f992 	bl	8009a7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b758:	480b      	ldr	r0, [pc, #44]	@ (800b788 <prvInitialiseTaskLists+0x74>)
 800b75a:	f7fe f98f 	bl	8009a7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b75e:	4b0b      	ldr	r3, [pc, #44]	@ (800b78c <prvInitialiseTaskLists+0x78>)
 800b760:	4a05      	ldr	r2, [pc, #20]	@ (800b778 <prvInitialiseTaskLists+0x64>)
 800b762:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b764:	4b0a      	ldr	r3, [pc, #40]	@ (800b790 <prvInitialiseTaskLists+0x7c>)
 800b766:	4a05      	ldr	r2, [pc, #20]	@ (800b77c <prvInitialiseTaskLists+0x68>)
 800b768:	601a      	str	r2, [r3, #0]
}
 800b76a:	bf00      	nop
 800b76c:	3708      	adds	r7, #8
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	20002614 	.word	0x20002614
 800b778:	20002a74 	.word	0x20002a74
 800b77c:	20002a88 	.word	0x20002a88
 800b780:	20002aa4 	.word	0x20002aa4
 800b784:	20002ab8 	.word	0x20002ab8
 800b788:	20002ad0 	.word	0x20002ad0
 800b78c:	20002a9c 	.word	0x20002a9c
 800b790:	20002aa0 	.word	0x20002aa0

0800b794 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b79a:	e019      	b.n	800b7d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b79c:	f000 fee4 	bl	800c568 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7a0:	4b10      	ldr	r3, [pc, #64]	@ (800b7e4 <prvCheckTasksWaitingTermination+0x50>)
 800b7a2:	68db      	ldr	r3, [r3, #12]
 800b7a4:	68db      	ldr	r3, [r3, #12]
 800b7a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	3304      	adds	r3, #4
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7fe f9ef 	bl	8009b90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b7b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b7e8 <prvCheckTasksWaitingTermination+0x54>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	4a0b      	ldr	r2, [pc, #44]	@ (800b7e8 <prvCheckTasksWaitingTermination+0x54>)
 800b7ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b7bc:	4b0b      	ldr	r3, [pc, #44]	@ (800b7ec <prvCheckTasksWaitingTermination+0x58>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	3b01      	subs	r3, #1
 800b7c2:	4a0a      	ldr	r2, [pc, #40]	@ (800b7ec <prvCheckTasksWaitingTermination+0x58>)
 800b7c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b7c6:	f000 ff01 	bl	800c5cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 f810 	bl	800b7f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7d0:	4b06      	ldr	r3, [pc, #24]	@ (800b7ec <prvCheckTasksWaitingTermination+0x58>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d1e1      	bne.n	800b79c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b7d8:	bf00      	nop
 800b7da:	bf00      	nop
 800b7dc:	3708      	adds	r7, #8
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	20002ab8 	.word	0x20002ab8
 800b7e8:	20002ae4 	.word	0x20002ae4
 800b7ec:	20002acc 	.word	0x20002acc

0800b7f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d108      	bne.n	800b814 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b806:	4618      	mov	r0, r3
 800b808:	f001 f89e 	bl	800c948 <vPortFree>
				vPortFree( pxTCB );
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f001 f89b 	bl	800c948 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b812:	e019      	b.n	800b848 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d103      	bne.n	800b826 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f001 f892 	bl	800c948 <vPortFree>
	}
 800b824:	e010      	b.n	800b848 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b82c:	2b02      	cmp	r3, #2
 800b82e:	d00b      	beq.n	800b848 <prvDeleteTCB+0x58>
	__asm volatile
 800b830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b834:	f383 8811 	msr	BASEPRI, r3
 800b838:	f3bf 8f6f 	isb	sy
 800b83c:	f3bf 8f4f 	dsb	sy
 800b840:	60fb      	str	r3, [r7, #12]
}
 800b842:	bf00      	nop
 800b844:	bf00      	nop
 800b846:	e7fd      	b.n	800b844 <prvDeleteTCB+0x54>
	}
 800b848:	bf00      	nop
 800b84a:	3710      	adds	r7, #16
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b850:	b480      	push	{r7}
 800b852:	b083      	sub	sp, #12
 800b854:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b856:	4b0c      	ldr	r3, [pc, #48]	@ (800b888 <prvResetNextTaskUnblockTime+0x38>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d104      	bne.n	800b86a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b860:	4b0a      	ldr	r3, [pc, #40]	@ (800b88c <prvResetNextTaskUnblockTime+0x3c>)
 800b862:	f04f 32ff 	mov.w	r2, #4294967295
 800b866:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b868:	e008      	b.n	800b87c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b86a:	4b07      	ldr	r3, [pc, #28]	@ (800b888 <prvResetNextTaskUnblockTime+0x38>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	68db      	ldr	r3, [r3, #12]
 800b870:	68db      	ldr	r3, [r3, #12]
 800b872:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	4a04      	ldr	r2, [pc, #16]	@ (800b88c <prvResetNextTaskUnblockTime+0x3c>)
 800b87a:	6013      	str	r3, [r2, #0]
}
 800b87c:	bf00      	nop
 800b87e:	370c      	adds	r7, #12
 800b880:	46bd      	mov	sp, r7
 800b882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b886:	4770      	bx	lr
 800b888:	20002a9c 	.word	0x20002a9c
 800b88c:	20002b04 	.word	0x20002b04

0800b890 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b896:	4b0b      	ldr	r3, [pc, #44]	@ (800b8c4 <xTaskGetSchedulerState+0x34>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d102      	bne.n	800b8a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	607b      	str	r3, [r7, #4]
 800b8a2:	e008      	b.n	800b8b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8a4:	4b08      	ldr	r3, [pc, #32]	@ (800b8c8 <xTaskGetSchedulerState+0x38>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d102      	bne.n	800b8b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b8ac:	2302      	movs	r3, #2
 800b8ae:	607b      	str	r3, [r7, #4]
 800b8b0:	e001      	b.n	800b8b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b8b6:	687b      	ldr	r3, [r7, #4]
	}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	370c      	adds	r7, #12
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr
 800b8c4:	20002af0 	.word	0x20002af0
 800b8c8:	20002b0c 	.word	0x20002b0c

0800b8cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d051      	beq.n	800b986 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8e6:	4b2a      	ldr	r3, [pc, #168]	@ (800b990 <xTaskPriorityInherit+0xc4>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d241      	bcs.n	800b974 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	699b      	ldr	r3, [r3, #24]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	db06      	blt.n	800b906 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8f8:	4b25      	ldr	r3, [pc, #148]	@ (800b990 <xTaskPriorityInherit+0xc4>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8fe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	6959      	ldr	r1, [r3, #20]
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b90e:	4613      	mov	r3, r2
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	4413      	add	r3, r2
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	4a1f      	ldr	r2, [pc, #124]	@ (800b994 <xTaskPriorityInherit+0xc8>)
 800b918:	4413      	add	r3, r2
 800b91a:	4299      	cmp	r1, r3
 800b91c:	d122      	bne.n	800b964 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	3304      	adds	r3, #4
 800b922:	4618      	mov	r0, r3
 800b924:	f7fe f934 	bl	8009b90 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b928:	4b19      	ldr	r3, [pc, #100]	@ (800b990 <xTaskPriorityInherit+0xc4>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b936:	4b18      	ldr	r3, [pc, #96]	@ (800b998 <xTaskPriorityInherit+0xcc>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d903      	bls.n	800b946 <xTaskPriorityInherit+0x7a>
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b942:	4a15      	ldr	r2, [pc, #84]	@ (800b998 <xTaskPriorityInherit+0xcc>)
 800b944:	6013      	str	r3, [r2, #0]
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b94a:	4613      	mov	r3, r2
 800b94c:	009b      	lsls	r3, r3, #2
 800b94e:	4413      	add	r3, r2
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	4a10      	ldr	r2, [pc, #64]	@ (800b994 <xTaskPriorityInherit+0xc8>)
 800b954:	441a      	add	r2, r3
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	3304      	adds	r3, #4
 800b95a:	4619      	mov	r1, r3
 800b95c:	4610      	mov	r0, r2
 800b95e:	f7fe f8ba 	bl	8009ad6 <vListInsertEnd>
 800b962:	e004      	b.n	800b96e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b964:	4b0a      	ldr	r3, [pc, #40]	@ (800b990 <xTaskPriorityInherit+0xc4>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b96e:	2301      	movs	r3, #1
 800b970:	60fb      	str	r3, [r7, #12]
 800b972:	e008      	b.n	800b986 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b978:	4b05      	ldr	r3, [pc, #20]	@ (800b990 <xTaskPriorityInherit+0xc4>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b97e:	429a      	cmp	r2, r3
 800b980:	d201      	bcs.n	800b986 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b982:	2301      	movs	r3, #1
 800b984:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b986:	68fb      	ldr	r3, [r7, #12]
	}
 800b988:	4618      	mov	r0, r3
 800b98a:	3710      	adds	r7, #16
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	20002610 	.word	0x20002610
 800b994:	20002614 	.word	0x20002614
 800b998:	20002aec 	.word	0x20002aec

0800b99c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b086      	sub	sp, #24
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d058      	beq.n	800ba64 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b9b2:	4b2f      	ldr	r3, [pc, #188]	@ (800ba70 <xTaskPriorityDisinherit+0xd4>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	693a      	ldr	r2, [r7, #16]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d00b      	beq.n	800b9d4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c0:	f383 8811 	msr	BASEPRI, r3
 800b9c4:	f3bf 8f6f 	isb	sy
 800b9c8:	f3bf 8f4f 	dsb	sy
 800b9cc:	60fb      	str	r3, [r7, #12]
}
 800b9ce:	bf00      	nop
 800b9d0:	bf00      	nop
 800b9d2:	e7fd      	b.n	800b9d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d10b      	bne.n	800b9f4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b9dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9e0:	f383 8811 	msr	BASEPRI, r3
 800b9e4:	f3bf 8f6f 	isb	sy
 800b9e8:	f3bf 8f4f 	dsb	sy
 800b9ec:	60bb      	str	r3, [r7, #8]
}
 800b9ee:	bf00      	nop
 800b9f0:	bf00      	nop
 800b9f2:	e7fd      	b.n	800b9f0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9f8:	1e5a      	subs	r2, r3, #1
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d02c      	beq.n	800ba64 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d128      	bne.n	800ba64 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	3304      	adds	r3, #4
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7fe f8ba 	bl	8009b90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba28:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba34:	4b0f      	ldr	r3, [pc, #60]	@ (800ba74 <xTaskPriorityDisinherit+0xd8>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d903      	bls.n	800ba44 <xTaskPriorityDisinherit+0xa8>
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba40:	4a0c      	ldr	r2, [pc, #48]	@ (800ba74 <xTaskPriorityDisinherit+0xd8>)
 800ba42:	6013      	str	r3, [r2, #0]
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba48:	4613      	mov	r3, r2
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	4413      	add	r3, r2
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	4a09      	ldr	r2, [pc, #36]	@ (800ba78 <xTaskPriorityDisinherit+0xdc>)
 800ba52:	441a      	add	r2, r3
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	3304      	adds	r3, #4
 800ba58:	4619      	mov	r1, r3
 800ba5a:	4610      	mov	r0, r2
 800ba5c:	f7fe f83b 	bl	8009ad6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba60:	2301      	movs	r3, #1
 800ba62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba64:	697b      	ldr	r3, [r7, #20]
	}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3718      	adds	r7, #24
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	20002610 	.word	0x20002610
 800ba74:	20002aec 	.word	0x20002aec
 800ba78:	20002614 	.word	0x20002614

0800ba7c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b088      	sub	sp, #32
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d06c      	beq.n	800bb6e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ba94:	69bb      	ldr	r3, [r7, #24]
 800ba96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d10b      	bne.n	800bab4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ba9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baa0:	f383 8811 	msr	BASEPRI, r3
 800baa4:	f3bf 8f6f 	isb	sy
 800baa8:	f3bf 8f4f 	dsb	sy
 800baac:	60fb      	str	r3, [r7, #12]
}
 800baae:	bf00      	nop
 800bab0:	bf00      	nop
 800bab2:	e7fd      	b.n	800bab0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bab4:	69bb      	ldr	r3, [r7, #24]
 800bab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bab8:	683a      	ldr	r2, [r7, #0]
 800baba:	429a      	cmp	r2, r3
 800babc:	d902      	bls.n	800bac4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	61fb      	str	r3, [r7, #28]
 800bac2:	e002      	b.n	800baca <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bac8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bace:	69fa      	ldr	r2, [r7, #28]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d04c      	beq.n	800bb6e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bad4:	69bb      	ldr	r3, [r7, #24]
 800bad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bad8:	697a      	ldr	r2, [r7, #20]
 800bada:	429a      	cmp	r2, r3
 800badc:	d147      	bne.n	800bb6e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bade:	4b26      	ldr	r3, [pc, #152]	@ (800bb78 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	69ba      	ldr	r2, [r7, #24]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d10b      	bne.n	800bb00 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800bae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baec:	f383 8811 	msr	BASEPRI, r3
 800baf0:	f3bf 8f6f 	isb	sy
 800baf4:	f3bf 8f4f 	dsb	sy
 800baf8:	60bb      	str	r3, [r7, #8]
}
 800bafa:	bf00      	nop
 800bafc:	bf00      	nop
 800bafe:	e7fd      	b.n	800bafc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bb00:	69bb      	ldr	r3, [r7, #24]
 800bb02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb04:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bb06:	69bb      	ldr	r3, [r7, #24]
 800bb08:	69fa      	ldr	r2, [r7, #28]
 800bb0a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bb0c:	69bb      	ldr	r3, [r7, #24]
 800bb0e:	699b      	ldr	r3, [r3, #24]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	db04      	blt.n	800bb1e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bb1a:	69bb      	ldr	r3, [r7, #24]
 800bb1c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bb1e:	69bb      	ldr	r3, [r7, #24]
 800bb20:	6959      	ldr	r1, [r3, #20]
 800bb22:	693a      	ldr	r2, [r7, #16]
 800bb24:	4613      	mov	r3, r2
 800bb26:	009b      	lsls	r3, r3, #2
 800bb28:	4413      	add	r3, r2
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	4a13      	ldr	r2, [pc, #76]	@ (800bb7c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bb2e:	4413      	add	r3, r2
 800bb30:	4299      	cmp	r1, r3
 800bb32:	d11c      	bne.n	800bb6e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb34:	69bb      	ldr	r3, [r7, #24]
 800bb36:	3304      	adds	r3, #4
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7fe f829 	bl	8009b90 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bb3e:	69bb      	ldr	r3, [r7, #24]
 800bb40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb42:	4b0f      	ldr	r3, [pc, #60]	@ (800bb80 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d903      	bls.n	800bb52 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb4e:	4a0c      	ldr	r2, [pc, #48]	@ (800bb80 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bb50:	6013      	str	r3, [r2, #0]
 800bb52:	69bb      	ldr	r3, [r7, #24]
 800bb54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb56:	4613      	mov	r3, r2
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	4413      	add	r3, r2
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	4a07      	ldr	r2, [pc, #28]	@ (800bb7c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bb60:	441a      	add	r2, r3
 800bb62:	69bb      	ldr	r3, [r7, #24]
 800bb64:	3304      	adds	r3, #4
 800bb66:	4619      	mov	r1, r3
 800bb68:	4610      	mov	r0, r2
 800bb6a:	f7fd ffb4 	bl	8009ad6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb6e:	bf00      	nop
 800bb70:	3720      	adds	r7, #32
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	20002610 	.word	0x20002610
 800bb7c:	20002614 	.word	0x20002614
 800bb80:	20002aec 	.word	0x20002aec

0800bb84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bb84:	b480      	push	{r7}
 800bb86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bb88:	4b07      	ldr	r3, [pc, #28]	@ (800bba8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d004      	beq.n	800bb9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bb90:	4b05      	ldr	r3, [pc, #20]	@ (800bba8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bb96:	3201      	adds	r2, #1
 800bb98:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800bb9a:	4b03      	ldr	r3, [pc, #12]	@ (800bba8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
	}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	46bd      	mov	sp, r7
 800bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba6:	4770      	bx	lr
 800bba8:	20002610 	.word	0x20002610

0800bbac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bbb6:	4b21      	ldr	r3, [pc, #132]	@ (800bc3c <prvAddCurrentTaskToDelayedList+0x90>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbbc:	4b20      	ldr	r3, [pc, #128]	@ (800bc40 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	3304      	adds	r3, #4
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7fd ffe4 	bl	8009b90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbce:	d10a      	bne.n	800bbe6 <prvAddCurrentTaskToDelayedList+0x3a>
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d007      	beq.n	800bbe6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbd6:	4b1a      	ldr	r3, [pc, #104]	@ (800bc40 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	3304      	adds	r3, #4
 800bbdc:	4619      	mov	r1, r3
 800bbde:	4819      	ldr	r0, [pc, #100]	@ (800bc44 <prvAddCurrentTaskToDelayedList+0x98>)
 800bbe0:	f7fd ff79 	bl	8009ad6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bbe4:	e026      	b.n	800bc34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	4413      	add	r3, r2
 800bbec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bbee:	4b14      	ldr	r3, [pc, #80]	@ (800bc40 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	68ba      	ldr	r2, [r7, #8]
 800bbf4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bbf6:	68ba      	ldr	r2, [r7, #8]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d209      	bcs.n	800bc12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbfe:	4b12      	ldr	r3, [pc, #72]	@ (800bc48 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	4b0f      	ldr	r3, [pc, #60]	@ (800bc40 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	3304      	adds	r3, #4
 800bc08:	4619      	mov	r1, r3
 800bc0a:	4610      	mov	r0, r2
 800bc0c:	f7fd ff87 	bl	8009b1e <vListInsert>
}
 800bc10:	e010      	b.n	800bc34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc12:	4b0e      	ldr	r3, [pc, #56]	@ (800bc4c <prvAddCurrentTaskToDelayedList+0xa0>)
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	4b0a      	ldr	r3, [pc, #40]	@ (800bc40 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	3304      	adds	r3, #4
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	4610      	mov	r0, r2
 800bc20:	f7fd ff7d 	bl	8009b1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc24:	4b0a      	ldr	r3, [pc, #40]	@ (800bc50 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	68ba      	ldr	r2, [r7, #8]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d202      	bcs.n	800bc34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bc2e:	4a08      	ldr	r2, [pc, #32]	@ (800bc50 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	6013      	str	r3, [r2, #0]
}
 800bc34:	bf00      	nop
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	20002ae8 	.word	0x20002ae8
 800bc40:	20002610 	.word	0x20002610
 800bc44:	20002ad0 	.word	0x20002ad0
 800bc48:	20002aa0 	.word	0x20002aa0
 800bc4c:	20002a9c 	.word	0x20002a9c
 800bc50:	20002b04 	.word	0x20002b04

0800bc54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b08a      	sub	sp, #40	@ 0x28
 800bc58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bc5e:	f000 fb13 	bl	800c288 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bc62:	4b1d      	ldr	r3, [pc, #116]	@ (800bcd8 <xTimerCreateTimerTask+0x84>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d021      	beq.n	800bcae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bc72:	1d3a      	adds	r2, r7, #4
 800bc74:	f107 0108 	add.w	r1, r7, #8
 800bc78:	f107 030c 	add.w	r3, r7, #12
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7fd fee3 	bl	8009a48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bc82:	6879      	ldr	r1, [r7, #4]
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	68fa      	ldr	r2, [r7, #12]
 800bc88:	9202      	str	r2, [sp, #8]
 800bc8a:	9301      	str	r3, [sp, #4]
 800bc8c:	2302      	movs	r3, #2
 800bc8e:	9300      	str	r3, [sp, #0]
 800bc90:	2300      	movs	r3, #0
 800bc92:	460a      	mov	r2, r1
 800bc94:	4911      	ldr	r1, [pc, #68]	@ (800bcdc <xTimerCreateTimerTask+0x88>)
 800bc96:	4812      	ldr	r0, [pc, #72]	@ (800bce0 <xTimerCreateTimerTask+0x8c>)
 800bc98:	f7fe ffd0 	bl	800ac3c <xTaskCreateStatic>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	4a11      	ldr	r2, [pc, #68]	@ (800bce4 <xTimerCreateTimerTask+0x90>)
 800bca0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bca2:	4b10      	ldr	r3, [pc, #64]	@ (800bce4 <xTimerCreateTimerTask+0x90>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d001      	beq.n	800bcae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d10b      	bne.n	800bccc <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bcb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcb8:	f383 8811 	msr	BASEPRI, r3
 800bcbc:	f3bf 8f6f 	isb	sy
 800bcc0:	f3bf 8f4f 	dsb	sy
 800bcc4:	613b      	str	r3, [r7, #16]
}
 800bcc6:	bf00      	nop
 800bcc8:	bf00      	nop
 800bcca:	e7fd      	b.n	800bcc8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bccc:	697b      	ldr	r3, [r7, #20]
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3718      	adds	r7, #24
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	20002b40 	.word	0x20002b40
 800bcdc:	08011704 	.word	0x08011704
 800bce0:	0800be21 	.word	0x0800be21
 800bce4:	20002b44 	.word	0x20002b44

0800bce8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b08a      	sub	sp, #40	@ 0x28
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	607a      	str	r2, [r7, #4]
 800bcf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d10b      	bne.n	800bd18 <xTimerGenericCommand+0x30>
	__asm volatile
 800bd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd04:	f383 8811 	msr	BASEPRI, r3
 800bd08:	f3bf 8f6f 	isb	sy
 800bd0c:	f3bf 8f4f 	dsb	sy
 800bd10:	623b      	str	r3, [r7, #32]
}
 800bd12:	bf00      	nop
 800bd14:	bf00      	nop
 800bd16:	e7fd      	b.n	800bd14 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bd18:	4b19      	ldr	r3, [pc, #100]	@ (800bd80 <xTimerGenericCommand+0x98>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d02a      	beq.n	800bd76 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	2b05      	cmp	r3, #5
 800bd30:	dc18      	bgt.n	800bd64 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd32:	f7ff fdad 	bl	800b890 <xTaskGetSchedulerState>
 800bd36:	4603      	mov	r3, r0
 800bd38:	2b02      	cmp	r3, #2
 800bd3a:	d109      	bne.n	800bd50 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd3c:	4b10      	ldr	r3, [pc, #64]	@ (800bd80 <xTimerGenericCommand+0x98>)
 800bd3e:	6818      	ldr	r0, [r3, #0]
 800bd40:	f107 0110 	add.w	r1, r7, #16
 800bd44:	2300      	movs	r3, #0
 800bd46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd48:	f7fe f900 	bl	8009f4c <xQueueGenericSend>
 800bd4c:	6278      	str	r0, [r7, #36]	@ 0x24
 800bd4e:	e012      	b.n	800bd76 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bd50:	4b0b      	ldr	r3, [pc, #44]	@ (800bd80 <xTimerGenericCommand+0x98>)
 800bd52:	6818      	ldr	r0, [r3, #0]
 800bd54:	f107 0110 	add.w	r1, r7, #16
 800bd58:	2300      	movs	r3, #0
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f7fe f8f6 	bl	8009f4c <xQueueGenericSend>
 800bd60:	6278      	str	r0, [r7, #36]	@ 0x24
 800bd62:	e008      	b.n	800bd76 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bd64:	4b06      	ldr	r3, [pc, #24]	@ (800bd80 <xTimerGenericCommand+0x98>)
 800bd66:	6818      	ldr	r0, [r3, #0]
 800bd68:	f107 0110 	add.w	r1, r7, #16
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	683a      	ldr	r2, [r7, #0]
 800bd70:	f7fe f9ee 	bl	800a150 <xQueueGenericSendFromISR>
 800bd74:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bd76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3728      	adds	r7, #40	@ 0x28
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}
 800bd80:	20002b40 	.word	0x20002b40

0800bd84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b088      	sub	sp, #32
 800bd88:	af02      	add	r7, sp, #8
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd8e:	4b23      	ldr	r3, [pc, #140]	@ (800be1c <prvProcessExpiredTimer+0x98>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	68db      	ldr	r3, [r3, #12]
 800bd94:	68db      	ldr	r3, [r3, #12]
 800bd96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	3304      	adds	r3, #4
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7fd fef7 	bl	8009b90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bda8:	f003 0304 	and.w	r3, r3, #4
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d023      	beq.n	800bdf8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	699a      	ldr	r2, [r3, #24]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	18d1      	adds	r1, r2, r3
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	683a      	ldr	r2, [r7, #0]
 800bdbc:	6978      	ldr	r0, [r7, #20]
 800bdbe:	f000 f8d5 	bl	800bf6c <prvInsertTimerInActiveList>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d020      	beq.n	800be0a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bdc8:	2300      	movs	r3, #0
 800bdca:	9300      	str	r3, [sp, #0]
 800bdcc:	2300      	movs	r3, #0
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	2100      	movs	r1, #0
 800bdd2:	6978      	ldr	r0, [r7, #20]
 800bdd4:	f7ff ff88 	bl	800bce8 <xTimerGenericCommand>
 800bdd8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d114      	bne.n	800be0a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bde0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bde4:	f383 8811 	msr	BASEPRI, r3
 800bde8:	f3bf 8f6f 	isb	sy
 800bdec:	f3bf 8f4f 	dsb	sy
 800bdf0:	60fb      	str	r3, [r7, #12]
}
 800bdf2:	bf00      	nop
 800bdf4:	bf00      	nop
 800bdf6:	e7fd      	b.n	800bdf4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bdfe:	f023 0301 	bic.w	r3, r3, #1
 800be02:	b2da      	uxtb	r2, r3
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	6a1b      	ldr	r3, [r3, #32]
 800be0e:	6978      	ldr	r0, [r7, #20]
 800be10:	4798      	blx	r3
}
 800be12:	bf00      	nop
 800be14:	3718      	adds	r7, #24
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	20002b38 	.word	0x20002b38

0800be20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be28:	f107 0308 	add.w	r3, r7, #8
 800be2c:	4618      	mov	r0, r3
 800be2e:	f000 f859 	bl	800bee4 <prvGetNextExpireTime>
 800be32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	4619      	mov	r1, r3
 800be38:	68f8      	ldr	r0, [r7, #12]
 800be3a:	f000 f805 	bl	800be48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800be3e:	f000 f8d7 	bl	800bff0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be42:	bf00      	nop
 800be44:	e7f0      	b.n	800be28 <prvTimerTask+0x8>
	...

0800be48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b084      	sub	sp, #16
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800be52:	f7ff f937 	bl	800b0c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be56:	f107 0308 	add.w	r3, r7, #8
 800be5a:	4618      	mov	r0, r3
 800be5c:	f000 f866 	bl	800bf2c <prvSampleTimeNow>
 800be60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d130      	bne.n	800beca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d10a      	bne.n	800be84 <prvProcessTimerOrBlockTask+0x3c>
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	429a      	cmp	r2, r3
 800be74:	d806      	bhi.n	800be84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800be76:	f7ff f933 	bl	800b0e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800be7a:	68f9      	ldr	r1, [r7, #12]
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f7ff ff81 	bl	800bd84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800be82:	e024      	b.n	800bece <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d008      	beq.n	800be9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800be8a:	4b13      	ldr	r3, [pc, #76]	@ (800bed8 <prvProcessTimerOrBlockTask+0x90>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d101      	bne.n	800be98 <prvProcessTimerOrBlockTask+0x50>
 800be94:	2301      	movs	r3, #1
 800be96:	e000      	b.n	800be9a <prvProcessTimerOrBlockTask+0x52>
 800be98:	2300      	movs	r3, #0
 800be9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800be9c:	4b0f      	ldr	r3, [pc, #60]	@ (800bedc <prvProcessTimerOrBlockTask+0x94>)
 800be9e:	6818      	ldr	r0, [r3, #0]
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	1ad3      	subs	r3, r2, r3
 800bea6:	683a      	ldr	r2, [r7, #0]
 800bea8:	4619      	mov	r1, r3
 800beaa:	f7fe fe93 	bl	800abd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800beae:	f7ff f917 	bl	800b0e0 <xTaskResumeAll>
 800beb2:	4603      	mov	r3, r0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d10a      	bne.n	800bece <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800beb8:	4b09      	ldr	r3, [pc, #36]	@ (800bee0 <prvProcessTimerOrBlockTask+0x98>)
 800beba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bebe:	601a      	str	r2, [r3, #0]
 800bec0:	f3bf 8f4f 	dsb	sy
 800bec4:	f3bf 8f6f 	isb	sy
}
 800bec8:	e001      	b.n	800bece <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800beca:	f7ff f909 	bl	800b0e0 <xTaskResumeAll>
}
 800bece:	bf00      	nop
 800bed0:	3710      	adds	r7, #16
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}
 800bed6:	bf00      	nop
 800bed8:	20002b3c 	.word	0x20002b3c
 800bedc:	20002b40 	.word	0x20002b40
 800bee0:	e000ed04 	.word	0xe000ed04

0800bee4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800beec:	4b0e      	ldr	r3, [pc, #56]	@ (800bf28 <prvGetNextExpireTime+0x44>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d101      	bne.n	800befa <prvGetNextExpireTime+0x16>
 800bef6:	2201      	movs	r2, #1
 800bef8:	e000      	b.n	800befc <prvGetNextExpireTime+0x18>
 800befa:	2200      	movs	r2, #0
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d105      	bne.n	800bf14 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf08:	4b07      	ldr	r3, [pc, #28]	@ (800bf28 <prvGetNextExpireTime+0x44>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	68db      	ldr	r3, [r3, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	60fb      	str	r3, [r7, #12]
 800bf12:	e001      	b.n	800bf18 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bf14:	2300      	movs	r3, #0
 800bf16:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bf18:	68fb      	ldr	r3, [r7, #12]
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3714      	adds	r7, #20
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr
 800bf26:	bf00      	nop
 800bf28:	20002b38 	.word	0x20002b38

0800bf2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b084      	sub	sp, #16
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bf34:	f7ff f972 	bl	800b21c <xTaskGetTickCount>
 800bf38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bf3a:	4b0b      	ldr	r3, [pc, #44]	@ (800bf68 <prvSampleTimeNow+0x3c>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	68fa      	ldr	r2, [r7, #12]
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d205      	bcs.n	800bf50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf44:	f000 f93a 	bl	800c1bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2201      	movs	r2, #1
 800bf4c:	601a      	str	r2, [r3, #0]
 800bf4e:	e002      	b.n	800bf56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bf56:	4a04      	ldr	r2, [pc, #16]	@ (800bf68 <prvSampleTimeNow+0x3c>)
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3710      	adds	r7, #16
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	20002b48 	.word	0x20002b48

0800bf6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b086      	sub	sp, #24
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	60f8      	str	r0, [r7, #12]
 800bf74:	60b9      	str	r1, [r7, #8]
 800bf76:	607a      	str	r2, [r7, #4]
 800bf78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	68ba      	ldr	r2, [r7, #8]
 800bf82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	68fa      	ldr	r2, [r7, #12]
 800bf88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bf8a:	68ba      	ldr	r2, [r7, #8]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d812      	bhi.n	800bfb8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	1ad2      	subs	r2, r2, r3
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	699b      	ldr	r3, [r3, #24]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d302      	bcc.n	800bfa6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	617b      	str	r3, [r7, #20]
 800bfa4:	e01b      	b.n	800bfde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bfa6:	4b10      	ldr	r3, [pc, #64]	@ (800bfe8 <prvInsertTimerInActiveList+0x7c>)
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	3304      	adds	r3, #4
 800bfae:	4619      	mov	r1, r3
 800bfb0:	4610      	mov	r0, r2
 800bfb2:	f7fd fdb4 	bl	8009b1e <vListInsert>
 800bfb6:	e012      	b.n	800bfde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bfb8:	687a      	ldr	r2, [r7, #4]
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d206      	bcs.n	800bfce <prvInsertTimerInActiveList+0x62>
 800bfc0:	68ba      	ldr	r2, [r7, #8]
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d302      	bcc.n	800bfce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	617b      	str	r3, [r7, #20]
 800bfcc:	e007      	b.n	800bfde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfce:	4b07      	ldr	r3, [pc, #28]	@ (800bfec <prvInsertTimerInActiveList+0x80>)
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	3304      	adds	r3, #4
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	4610      	mov	r0, r2
 800bfda:	f7fd fda0 	bl	8009b1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bfde:	697b      	ldr	r3, [r7, #20]
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3718      	adds	r7, #24
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	20002b3c 	.word	0x20002b3c
 800bfec:	20002b38 	.word	0x20002b38

0800bff0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b08e      	sub	sp, #56	@ 0x38
 800bff4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bff6:	e0ce      	b.n	800c196 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	da19      	bge.n	800c032 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bffe:	1d3b      	adds	r3, r7, #4
 800c000:	3304      	adds	r3, #4
 800c002:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c006:	2b00      	cmp	r3, #0
 800c008:	d10b      	bne.n	800c022 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c00e:	f383 8811 	msr	BASEPRI, r3
 800c012:	f3bf 8f6f 	isb	sy
 800c016:	f3bf 8f4f 	dsb	sy
 800c01a:	61fb      	str	r3, [r7, #28]
}
 800c01c:	bf00      	nop
 800c01e:	bf00      	nop
 800c020:	e7fd      	b.n	800c01e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c028:	6850      	ldr	r0, [r2, #4]
 800c02a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c02c:	6892      	ldr	r2, [r2, #8]
 800c02e:	4611      	mov	r1, r2
 800c030:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2b00      	cmp	r3, #0
 800c036:	f2c0 80ae 	blt.w	800c196 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c03e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c040:	695b      	ldr	r3, [r3, #20]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d004      	beq.n	800c050 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c048:	3304      	adds	r3, #4
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7fd fda0 	bl	8009b90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c050:	463b      	mov	r3, r7
 800c052:	4618      	mov	r0, r3
 800c054:	f7ff ff6a 	bl	800bf2c <prvSampleTimeNow>
 800c058:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2b09      	cmp	r3, #9
 800c05e:	f200 8097 	bhi.w	800c190 <prvProcessReceivedCommands+0x1a0>
 800c062:	a201      	add	r2, pc, #4	@ (adr r2, 800c068 <prvProcessReceivedCommands+0x78>)
 800c064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c068:	0800c091 	.word	0x0800c091
 800c06c:	0800c091 	.word	0x0800c091
 800c070:	0800c091 	.word	0x0800c091
 800c074:	0800c107 	.word	0x0800c107
 800c078:	0800c11b 	.word	0x0800c11b
 800c07c:	0800c167 	.word	0x0800c167
 800c080:	0800c091 	.word	0x0800c091
 800c084:	0800c091 	.word	0x0800c091
 800c088:	0800c107 	.word	0x0800c107
 800c08c:	0800c11b 	.word	0x0800c11b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c092:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c096:	f043 0301 	orr.w	r3, r3, #1
 800c09a:	b2da      	uxtb	r2, r3
 800c09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c09e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c0a2:	68ba      	ldr	r2, [r7, #8]
 800c0a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0a6:	699b      	ldr	r3, [r3, #24]
 800c0a8:	18d1      	adds	r1, r2, r3
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0b0:	f7ff ff5c 	bl	800bf6c <prvInsertTimerInActiveList>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d06c      	beq.n	800c194 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0bc:	6a1b      	ldr	r3, [r3, #32]
 800c0be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0c8:	f003 0304 	and.w	r3, r3, #4
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d061      	beq.n	800c194 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c0d0:	68ba      	ldr	r2, [r7, #8]
 800c0d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0d4:	699b      	ldr	r3, [r3, #24]
 800c0d6:	441a      	add	r2, r3
 800c0d8:	2300      	movs	r3, #0
 800c0da:	9300      	str	r3, [sp, #0]
 800c0dc:	2300      	movs	r3, #0
 800c0de:	2100      	movs	r1, #0
 800c0e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0e2:	f7ff fe01 	bl	800bce8 <xTimerGenericCommand>
 800c0e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c0e8:	6a3b      	ldr	r3, [r7, #32]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d152      	bne.n	800c194 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f2:	f383 8811 	msr	BASEPRI, r3
 800c0f6:	f3bf 8f6f 	isb	sy
 800c0fa:	f3bf 8f4f 	dsb	sy
 800c0fe:	61bb      	str	r3, [r7, #24]
}
 800c100:	bf00      	nop
 800c102:	bf00      	nop
 800c104:	e7fd      	b.n	800c102 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c108:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c10c:	f023 0301 	bic.w	r3, r3, #1
 800c110:	b2da      	uxtb	r2, r3
 800c112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c114:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c118:	e03d      	b.n	800c196 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c11c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c120:	f043 0301 	orr.w	r3, r3, #1
 800c124:	b2da      	uxtb	r2, r3
 800c126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c128:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c12c:	68ba      	ldr	r2, [r7, #8]
 800c12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c130:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c134:	699b      	ldr	r3, [r3, #24]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d10b      	bne.n	800c152 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c13a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c13e:	f383 8811 	msr	BASEPRI, r3
 800c142:	f3bf 8f6f 	isb	sy
 800c146:	f3bf 8f4f 	dsb	sy
 800c14a:	617b      	str	r3, [r7, #20]
}
 800c14c:	bf00      	nop
 800c14e:	bf00      	nop
 800c150:	e7fd      	b.n	800c14e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c154:	699a      	ldr	r2, [r3, #24]
 800c156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c158:	18d1      	adds	r1, r2, r3
 800c15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c15c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c15e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c160:	f7ff ff04 	bl	800bf6c <prvInsertTimerInActiveList>
					break;
 800c164:	e017      	b.n	800c196 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c168:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c16c:	f003 0302 	and.w	r3, r3, #2
 800c170:	2b00      	cmp	r3, #0
 800c172:	d103      	bne.n	800c17c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c174:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c176:	f000 fbe7 	bl	800c948 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c17a:	e00c      	b.n	800c196 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c17c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c17e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c182:	f023 0301 	bic.w	r3, r3, #1
 800c186:	b2da      	uxtb	r2, r3
 800c188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c18a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c18e:	e002      	b.n	800c196 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c190:	bf00      	nop
 800c192:	e000      	b.n	800c196 <prvProcessReceivedCommands+0x1a6>
					break;
 800c194:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c196:	4b08      	ldr	r3, [pc, #32]	@ (800c1b8 <prvProcessReceivedCommands+0x1c8>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	1d39      	adds	r1, r7, #4
 800c19c:	2200      	movs	r2, #0
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7fe f904 	bl	800a3ac <xQueueReceive>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	f47f af26 	bne.w	800bff8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c1ac:	bf00      	nop
 800c1ae:	bf00      	nop
 800c1b0:	3730      	adds	r7, #48	@ 0x30
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	20002b40 	.word	0x20002b40

0800c1bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b088      	sub	sp, #32
 800c1c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c1c2:	e049      	b.n	800c258 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c1c4:	4b2e      	ldr	r3, [pc, #184]	@ (800c280 <prvSwitchTimerLists+0xc4>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	68db      	ldr	r3, [r3, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1ce:	4b2c      	ldr	r3, [pc, #176]	@ (800c280 <prvSwitchTimerLists+0xc4>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	68db      	ldr	r3, [r3, #12]
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	3304      	adds	r3, #4
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7fd fcd7 	bl	8009b90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	6a1b      	ldr	r3, [r3, #32]
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1f0:	f003 0304 	and.w	r3, r3, #4
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d02f      	beq.n	800c258 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	699b      	ldr	r3, [r3, #24]
 800c1fc:	693a      	ldr	r2, [r7, #16]
 800c1fe:	4413      	add	r3, r2
 800c200:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c202:	68ba      	ldr	r2, [r7, #8]
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	429a      	cmp	r2, r3
 800c208:	d90e      	bls.n	800c228 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	68ba      	ldr	r2, [r7, #8]
 800c20e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	68fa      	ldr	r2, [r7, #12]
 800c214:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c216:	4b1a      	ldr	r3, [pc, #104]	@ (800c280 <prvSwitchTimerLists+0xc4>)
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	3304      	adds	r3, #4
 800c21e:	4619      	mov	r1, r3
 800c220:	4610      	mov	r0, r2
 800c222:	f7fd fc7c 	bl	8009b1e <vListInsert>
 800c226:	e017      	b.n	800c258 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c228:	2300      	movs	r3, #0
 800c22a:	9300      	str	r3, [sp, #0]
 800c22c:	2300      	movs	r3, #0
 800c22e:	693a      	ldr	r2, [r7, #16]
 800c230:	2100      	movs	r1, #0
 800c232:	68f8      	ldr	r0, [r7, #12]
 800c234:	f7ff fd58 	bl	800bce8 <xTimerGenericCommand>
 800c238:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d10b      	bne.n	800c258 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c244:	f383 8811 	msr	BASEPRI, r3
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	603b      	str	r3, [r7, #0]
}
 800c252:	bf00      	nop
 800c254:	bf00      	nop
 800c256:	e7fd      	b.n	800c254 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c258:	4b09      	ldr	r3, [pc, #36]	@ (800c280 <prvSwitchTimerLists+0xc4>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d1b0      	bne.n	800c1c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c262:	4b07      	ldr	r3, [pc, #28]	@ (800c280 <prvSwitchTimerLists+0xc4>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c268:	4b06      	ldr	r3, [pc, #24]	@ (800c284 <prvSwitchTimerLists+0xc8>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4a04      	ldr	r2, [pc, #16]	@ (800c280 <prvSwitchTimerLists+0xc4>)
 800c26e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c270:	4a04      	ldr	r2, [pc, #16]	@ (800c284 <prvSwitchTimerLists+0xc8>)
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	6013      	str	r3, [r2, #0]
}
 800c276:	bf00      	nop
 800c278:	3718      	adds	r7, #24
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	20002b38 	.word	0x20002b38
 800c284:	20002b3c 	.word	0x20002b3c

0800c288 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c28e:	f000 f96b 	bl	800c568 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c292:	4b15      	ldr	r3, [pc, #84]	@ (800c2e8 <prvCheckForValidListAndQueue+0x60>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d120      	bne.n	800c2dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c29a:	4814      	ldr	r0, [pc, #80]	@ (800c2ec <prvCheckForValidListAndQueue+0x64>)
 800c29c:	f7fd fbee 	bl	8009a7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c2a0:	4813      	ldr	r0, [pc, #76]	@ (800c2f0 <prvCheckForValidListAndQueue+0x68>)
 800c2a2:	f7fd fbeb 	bl	8009a7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c2a6:	4b13      	ldr	r3, [pc, #76]	@ (800c2f4 <prvCheckForValidListAndQueue+0x6c>)
 800c2a8:	4a10      	ldr	r2, [pc, #64]	@ (800c2ec <prvCheckForValidListAndQueue+0x64>)
 800c2aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c2ac:	4b12      	ldr	r3, [pc, #72]	@ (800c2f8 <prvCheckForValidListAndQueue+0x70>)
 800c2ae:	4a10      	ldr	r2, [pc, #64]	@ (800c2f0 <prvCheckForValidListAndQueue+0x68>)
 800c2b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	9300      	str	r3, [sp, #0]
 800c2b6:	4b11      	ldr	r3, [pc, #68]	@ (800c2fc <prvCheckForValidListAndQueue+0x74>)
 800c2b8:	4a11      	ldr	r2, [pc, #68]	@ (800c300 <prvCheckForValidListAndQueue+0x78>)
 800c2ba:	2110      	movs	r1, #16
 800c2bc:	200a      	movs	r0, #10
 800c2be:	f7fd fcfb 	bl	8009cb8 <xQueueGenericCreateStatic>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	4a08      	ldr	r2, [pc, #32]	@ (800c2e8 <prvCheckForValidListAndQueue+0x60>)
 800c2c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c2c8:	4b07      	ldr	r3, [pc, #28]	@ (800c2e8 <prvCheckForValidListAndQueue+0x60>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d005      	beq.n	800c2dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c2d0:	4b05      	ldr	r3, [pc, #20]	@ (800c2e8 <prvCheckForValidListAndQueue+0x60>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	490b      	ldr	r1, [pc, #44]	@ (800c304 <prvCheckForValidListAndQueue+0x7c>)
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7fe fc28 	bl	800ab2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c2dc:	f000 f976 	bl	800c5cc <vPortExitCritical>
}
 800c2e0:	bf00      	nop
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	20002b40 	.word	0x20002b40
 800c2ec:	20002b10 	.word	0x20002b10
 800c2f0:	20002b24 	.word	0x20002b24
 800c2f4:	20002b38 	.word	0x20002b38
 800c2f8:	20002b3c 	.word	0x20002b3c
 800c2fc:	20002bec 	.word	0x20002bec
 800c300:	20002b4c 	.word	0x20002b4c
 800c304:	0801170c 	.word	0x0801170c

0800c308 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c308:	b480      	push	{r7}
 800c30a:	b085      	sub	sp, #20
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	60f8      	str	r0, [r7, #12]
 800c310:	60b9      	str	r1, [r7, #8]
 800c312:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	3b04      	subs	r3, #4
 800c318:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c320:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	3b04      	subs	r3, #4
 800c326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	f023 0201 	bic.w	r2, r3, #1
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	3b04      	subs	r3, #4
 800c336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c338:	4a0c      	ldr	r2, [pc, #48]	@ (800c36c <pxPortInitialiseStack+0x64>)
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	3b14      	subs	r3, #20
 800c342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	3b04      	subs	r3, #4
 800c34e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f06f 0202 	mvn.w	r2, #2
 800c356:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	3b20      	subs	r3, #32
 800c35c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c35e:	68fb      	ldr	r3, [r7, #12]
}
 800c360:	4618      	mov	r0, r3
 800c362:	3714      	adds	r7, #20
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr
 800c36c:	0800c371 	.word	0x0800c371

0800c370 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c370:	b480      	push	{r7}
 800c372:	b085      	sub	sp, #20
 800c374:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c376:	2300      	movs	r3, #0
 800c378:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c37a:	4b13      	ldr	r3, [pc, #76]	@ (800c3c8 <prvTaskExitError+0x58>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c382:	d00b      	beq.n	800c39c <prvTaskExitError+0x2c>
	__asm volatile
 800c384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c388:	f383 8811 	msr	BASEPRI, r3
 800c38c:	f3bf 8f6f 	isb	sy
 800c390:	f3bf 8f4f 	dsb	sy
 800c394:	60fb      	str	r3, [r7, #12]
}
 800c396:	bf00      	nop
 800c398:	bf00      	nop
 800c39a:	e7fd      	b.n	800c398 <prvTaskExitError+0x28>
	__asm volatile
 800c39c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3a0:	f383 8811 	msr	BASEPRI, r3
 800c3a4:	f3bf 8f6f 	isb	sy
 800c3a8:	f3bf 8f4f 	dsb	sy
 800c3ac:	60bb      	str	r3, [r7, #8]
}
 800c3ae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c3b0:	bf00      	nop
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d0fc      	beq.n	800c3b2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c3b8:	bf00      	nop
 800c3ba:	bf00      	nop
 800c3bc:	3714      	adds	r7, #20
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop
 800c3c8:	20000058 	.word	0x20000058
 800c3cc:	00000000 	.word	0x00000000

0800c3d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c3d0:	4b07      	ldr	r3, [pc, #28]	@ (800c3f0 <pxCurrentTCBConst2>)
 800c3d2:	6819      	ldr	r1, [r3, #0]
 800c3d4:	6808      	ldr	r0, [r1, #0]
 800c3d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3da:	f380 8809 	msr	PSP, r0
 800c3de:	f3bf 8f6f 	isb	sy
 800c3e2:	f04f 0000 	mov.w	r0, #0
 800c3e6:	f380 8811 	msr	BASEPRI, r0
 800c3ea:	4770      	bx	lr
 800c3ec:	f3af 8000 	nop.w

0800c3f0 <pxCurrentTCBConst2>:
 800c3f0:	20002610 	.word	0x20002610
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c3f4:	bf00      	nop
 800c3f6:	bf00      	nop

0800c3f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c3f8:	4808      	ldr	r0, [pc, #32]	@ (800c41c <prvPortStartFirstTask+0x24>)
 800c3fa:	6800      	ldr	r0, [r0, #0]
 800c3fc:	6800      	ldr	r0, [r0, #0]
 800c3fe:	f380 8808 	msr	MSP, r0
 800c402:	f04f 0000 	mov.w	r0, #0
 800c406:	f380 8814 	msr	CONTROL, r0
 800c40a:	b662      	cpsie	i
 800c40c:	b661      	cpsie	f
 800c40e:	f3bf 8f4f 	dsb	sy
 800c412:	f3bf 8f6f 	isb	sy
 800c416:	df00      	svc	0
 800c418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c41a:	bf00      	nop
 800c41c:	e000ed08 	.word	0xe000ed08

0800c420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b086      	sub	sp, #24
 800c424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c426:	4b47      	ldr	r3, [pc, #284]	@ (800c544 <xPortStartScheduler+0x124>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	4a47      	ldr	r2, [pc, #284]	@ (800c548 <xPortStartScheduler+0x128>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d10b      	bne.n	800c448 <xPortStartScheduler+0x28>
	__asm volatile
 800c430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c434:	f383 8811 	msr	BASEPRI, r3
 800c438:	f3bf 8f6f 	isb	sy
 800c43c:	f3bf 8f4f 	dsb	sy
 800c440:	613b      	str	r3, [r7, #16]
}
 800c442:	bf00      	nop
 800c444:	bf00      	nop
 800c446:	e7fd      	b.n	800c444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c448:	4b3e      	ldr	r3, [pc, #248]	@ (800c544 <xPortStartScheduler+0x124>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4a3f      	ldr	r2, [pc, #252]	@ (800c54c <xPortStartScheduler+0x12c>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d10b      	bne.n	800c46a <xPortStartScheduler+0x4a>
	__asm volatile
 800c452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c456:	f383 8811 	msr	BASEPRI, r3
 800c45a:	f3bf 8f6f 	isb	sy
 800c45e:	f3bf 8f4f 	dsb	sy
 800c462:	60fb      	str	r3, [r7, #12]
}
 800c464:	bf00      	nop
 800c466:	bf00      	nop
 800c468:	e7fd      	b.n	800c466 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c46a:	4b39      	ldr	r3, [pc, #228]	@ (800c550 <xPortStartScheduler+0x130>)
 800c46c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	b2db      	uxtb	r3, r3
 800c474:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	22ff      	movs	r2, #255	@ 0xff
 800c47a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	781b      	ldrb	r3, [r3, #0]
 800c480:	b2db      	uxtb	r3, r3
 800c482:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c484:	78fb      	ldrb	r3, [r7, #3]
 800c486:	b2db      	uxtb	r3, r3
 800c488:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c48c:	b2da      	uxtb	r2, r3
 800c48e:	4b31      	ldr	r3, [pc, #196]	@ (800c554 <xPortStartScheduler+0x134>)
 800c490:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c492:	4b31      	ldr	r3, [pc, #196]	@ (800c558 <xPortStartScheduler+0x138>)
 800c494:	2207      	movs	r2, #7
 800c496:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c498:	e009      	b.n	800c4ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c49a:	4b2f      	ldr	r3, [pc, #188]	@ (800c558 <xPortStartScheduler+0x138>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	3b01      	subs	r3, #1
 800c4a0:	4a2d      	ldr	r2, [pc, #180]	@ (800c558 <xPortStartScheduler+0x138>)
 800c4a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c4a4:	78fb      	ldrb	r3, [r7, #3]
 800c4a6:	b2db      	uxtb	r3, r3
 800c4a8:	005b      	lsls	r3, r3, #1
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4ae:	78fb      	ldrb	r3, [r7, #3]
 800c4b0:	b2db      	uxtb	r3, r3
 800c4b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4b6:	2b80      	cmp	r3, #128	@ 0x80
 800c4b8:	d0ef      	beq.n	800c49a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c4ba:	4b27      	ldr	r3, [pc, #156]	@ (800c558 <xPortStartScheduler+0x138>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f1c3 0307 	rsb	r3, r3, #7
 800c4c2:	2b04      	cmp	r3, #4
 800c4c4:	d00b      	beq.n	800c4de <xPortStartScheduler+0xbe>
	__asm volatile
 800c4c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ca:	f383 8811 	msr	BASEPRI, r3
 800c4ce:	f3bf 8f6f 	isb	sy
 800c4d2:	f3bf 8f4f 	dsb	sy
 800c4d6:	60bb      	str	r3, [r7, #8]
}
 800c4d8:	bf00      	nop
 800c4da:	bf00      	nop
 800c4dc:	e7fd      	b.n	800c4da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c4de:	4b1e      	ldr	r3, [pc, #120]	@ (800c558 <xPortStartScheduler+0x138>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	021b      	lsls	r3, r3, #8
 800c4e4:	4a1c      	ldr	r2, [pc, #112]	@ (800c558 <xPortStartScheduler+0x138>)
 800c4e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c4e8:	4b1b      	ldr	r3, [pc, #108]	@ (800c558 <xPortStartScheduler+0x138>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c4f0:	4a19      	ldr	r2, [pc, #100]	@ (800c558 <xPortStartScheduler+0x138>)
 800c4f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	b2da      	uxtb	r2, r3
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c4fc:	4b17      	ldr	r3, [pc, #92]	@ (800c55c <xPortStartScheduler+0x13c>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4a16      	ldr	r2, [pc, #88]	@ (800c55c <xPortStartScheduler+0x13c>)
 800c502:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c506:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c508:	4b14      	ldr	r3, [pc, #80]	@ (800c55c <xPortStartScheduler+0x13c>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	4a13      	ldr	r2, [pc, #76]	@ (800c55c <xPortStartScheduler+0x13c>)
 800c50e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c512:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c514:	f000 f8da 	bl	800c6cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c518:	4b11      	ldr	r3, [pc, #68]	@ (800c560 <xPortStartScheduler+0x140>)
 800c51a:	2200      	movs	r2, #0
 800c51c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c51e:	f000 f8f9 	bl	800c714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c522:	4b10      	ldr	r3, [pc, #64]	@ (800c564 <xPortStartScheduler+0x144>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4a0f      	ldr	r2, [pc, #60]	@ (800c564 <xPortStartScheduler+0x144>)
 800c528:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c52c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c52e:	f7ff ff63 	bl	800c3f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c532:	f7fe ff3d 	bl	800b3b0 <vTaskSwitchContext>
	prvTaskExitError();
 800c536:	f7ff ff1b 	bl	800c370 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c53a:	2300      	movs	r3, #0
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3718      	adds	r7, #24
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}
 800c544:	e000ed00 	.word	0xe000ed00
 800c548:	410fc271 	.word	0x410fc271
 800c54c:	410fc270 	.word	0x410fc270
 800c550:	e000e400 	.word	0xe000e400
 800c554:	20002c3c 	.word	0x20002c3c
 800c558:	20002c40 	.word	0x20002c40
 800c55c:	e000ed20 	.word	0xe000ed20
 800c560:	20000058 	.word	0x20000058
 800c564:	e000ef34 	.word	0xe000ef34

0800c568 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c568:	b480      	push	{r7}
 800c56a:	b083      	sub	sp, #12
 800c56c:	af00      	add	r7, sp, #0
	__asm volatile
 800c56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c572:	f383 8811 	msr	BASEPRI, r3
 800c576:	f3bf 8f6f 	isb	sy
 800c57a:	f3bf 8f4f 	dsb	sy
 800c57e:	607b      	str	r3, [r7, #4]
}
 800c580:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c582:	4b10      	ldr	r3, [pc, #64]	@ (800c5c4 <vPortEnterCritical+0x5c>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	3301      	adds	r3, #1
 800c588:	4a0e      	ldr	r2, [pc, #56]	@ (800c5c4 <vPortEnterCritical+0x5c>)
 800c58a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c58c:	4b0d      	ldr	r3, [pc, #52]	@ (800c5c4 <vPortEnterCritical+0x5c>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2b01      	cmp	r3, #1
 800c592:	d110      	bne.n	800c5b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c594:	4b0c      	ldr	r3, [pc, #48]	@ (800c5c8 <vPortEnterCritical+0x60>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d00b      	beq.n	800c5b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5a2:	f383 8811 	msr	BASEPRI, r3
 800c5a6:	f3bf 8f6f 	isb	sy
 800c5aa:	f3bf 8f4f 	dsb	sy
 800c5ae:	603b      	str	r3, [r7, #0]
}
 800c5b0:	bf00      	nop
 800c5b2:	bf00      	nop
 800c5b4:	e7fd      	b.n	800c5b2 <vPortEnterCritical+0x4a>
	}
}
 800c5b6:	bf00      	nop
 800c5b8:	370c      	adds	r7, #12
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop
 800c5c4:	20000058 	.word	0x20000058
 800c5c8:	e000ed04 	.word	0xe000ed04

0800c5cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b083      	sub	sp, #12
 800c5d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c5d2:	4b12      	ldr	r3, [pc, #72]	@ (800c61c <vPortExitCritical+0x50>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d10b      	bne.n	800c5f2 <vPortExitCritical+0x26>
	__asm volatile
 800c5da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5de:	f383 8811 	msr	BASEPRI, r3
 800c5e2:	f3bf 8f6f 	isb	sy
 800c5e6:	f3bf 8f4f 	dsb	sy
 800c5ea:	607b      	str	r3, [r7, #4]
}
 800c5ec:	bf00      	nop
 800c5ee:	bf00      	nop
 800c5f0:	e7fd      	b.n	800c5ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c5f2:	4b0a      	ldr	r3, [pc, #40]	@ (800c61c <vPortExitCritical+0x50>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	3b01      	subs	r3, #1
 800c5f8:	4a08      	ldr	r2, [pc, #32]	@ (800c61c <vPortExitCritical+0x50>)
 800c5fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c5fc:	4b07      	ldr	r3, [pc, #28]	@ (800c61c <vPortExitCritical+0x50>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d105      	bne.n	800c610 <vPortExitCritical+0x44>
 800c604:	2300      	movs	r3, #0
 800c606:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	f383 8811 	msr	BASEPRI, r3
}
 800c60e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c610:	bf00      	nop
 800c612:	370c      	adds	r7, #12
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr
 800c61c:	20000058 	.word	0x20000058

0800c620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c620:	f3ef 8009 	mrs	r0, PSP
 800c624:	f3bf 8f6f 	isb	sy
 800c628:	4b15      	ldr	r3, [pc, #84]	@ (800c680 <pxCurrentTCBConst>)
 800c62a:	681a      	ldr	r2, [r3, #0]
 800c62c:	f01e 0f10 	tst.w	lr, #16
 800c630:	bf08      	it	eq
 800c632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c63a:	6010      	str	r0, [r2, #0]
 800c63c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c640:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c644:	f380 8811 	msr	BASEPRI, r0
 800c648:	f3bf 8f4f 	dsb	sy
 800c64c:	f3bf 8f6f 	isb	sy
 800c650:	f7fe feae 	bl	800b3b0 <vTaskSwitchContext>
 800c654:	f04f 0000 	mov.w	r0, #0
 800c658:	f380 8811 	msr	BASEPRI, r0
 800c65c:	bc09      	pop	{r0, r3}
 800c65e:	6819      	ldr	r1, [r3, #0]
 800c660:	6808      	ldr	r0, [r1, #0]
 800c662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c666:	f01e 0f10 	tst.w	lr, #16
 800c66a:	bf08      	it	eq
 800c66c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c670:	f380 8809 	msr	PSP, r0
 800c674:	f3bf 8f6f 	isb	sy
 800c678:	4770      	bx	lr
 800c67a:	bf00      	nop
 800c67c:	f3af 8000 	nop.w

0800c680 <pxCurrentTCBConst>:
 800c680:	20002610 	.word	0x20002610
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c684:	bf00      	nop
 800c686:	bf00      	nop

0800c688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
	__asm volatile
 800c68e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c692:	f383 8811 	msr	BASEPRI, r3
 800c696:	f3bf 8f6f 	isb	sy
 800c69a:	f3bf 8f4f 	dsb	sy
 800c69e:	607b      	str	r3, [r7, #4]
}
 800c6a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c6a2:	f7fe fdcb 	bl	800b23c <xTaskIncrementTick>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d003      	beq.n	800c6b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c6ac:	4b06      	ldr	r3, [pc, #24]	@ (800c6c8 <xPortSysTickHandler+0x40>)
 800c6ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6b2:	601a      	str	r2, [r3, #0]
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	f383 8811 	msr	BASEPRI, r3
}
 800c6be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c6c0:	bf00      	nop
 800c6c2:	3708      	adds	r7, #8
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	e000ed04 	.word	0xe000ed04

0800c6cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c6d0:	4b0b      	ldr	r3, [pc, #44]	@ (800c700 <vPortSetupTimerInterrupt+0x34>)
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c6d6:	4b0b      	ldr	r3, [pc, #44]	@ (800c704 <vPortSetupTimerInterrupt+0x38>)
 800c6d8:	2200      	movs	r2, #0
 800c6da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c6dc:	4b0a      	ldr	r3, [pc, #40]	@ (800c708 <vPortSetupTimerInterrupt+0x3c>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4a0a      	ldr	r2, [pc, #40]	@ (800c70c <vPortSetupTimerInterrupt+0x40>)
 800c6e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6e6:	099b      	lsrs	r3, r3, #6
 800c6e8:	4a09      	ldr	r2, [pc, #36]	@ (800c710 <vPortSetupTimerInterrupt+0x44>)
 800c6ea:	3b01      	subs	r3, #1
 800c6ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c6ee:	4b04      	ldr	r3, [pc, #16]	@ (800c700 <vPortSetupTimerInterrupt+0x34>)
 800c6f0:	2207      	movs	r2, #7
 800c6f2:	601a      	str	r2, [r3, #0]
}
 800c6f4:	bf00      	nop
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	e000e010 	.word	0xe000e010
 800c704:	e000e018 	.word	0xe000e018
 800c708:	20000008 	.word	0x20000008
 800c70c:	10624dd3 	.word	0x10624dd3
 800c710:	e000e014 	.word	0xe000e014

0800c714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c714:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c724 <vPortEnableVFP+0x10>
 800c718:	6801      	ldr	r1, [r0, #0]
 800c71a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c71e:	6001      	str	r1, [r0, #0]
 800c720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c722:	bf00      	nop
 800c724:	e000ed88 	.word	0xe000ed88

0800c728 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c728:	b480      	push	{r7}
 800c72a:	b085      	sub	sp, #20
 800c72c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c72e:	f3ef 8305 	mrs	r3, IPSR
 800c732:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2b0f      	cmp	r3, #15
 800c738:	d915      	bls.n	800c766 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c73a:	4a18      	ldr	r2, [pc, #96]	@ (800c79c <vPortValidateInterruptPriority+0x74>)
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	4413      	add	r3, r2
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c744:	4b16      	ldr	r3, [pc, #88]	@ (800c7a0 <vPortValidateInterruptPriority+0x78>)
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	7afa      	ldrb	r2, [r7, #11]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d20b      	bcs.n	800c766 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c752:	f383 8811 	msr	BASEPRI, r3
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	607b      	str	r3, [r7, #4]
}
 800c760:	bf00      	nop
 800c762:	bf00      	nop
 800c764:	e7fd      	b.n	800c762 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c766:	4b0f      	ldr	r3, [pc, #60]	@ (800c7a4 <vPortValidateInterruptPriority+0x7c>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c76e:	4b0e      	ldr	r3, [pc, #56]	@ (800c7a8 <vPortValidateInterruptPriority+0x80>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	429a      	cmp	r2, r3
 800c774:	d90b      	bls.n	800c78e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c77a:	f383 8811 	msr	BASEPRI, r3
 800c77e:	f3bf 8f6f 	isb	sy
 800c782:	f3bf 8f4f 	dsb	sy
 800c786:	603b      	str	r3, [r7, #0]
}
 800c788:	bf00      	nop
 800c78a:	bf00      	nop
 800c78c:	e7fd      	b.n	800c78a <vPortValidateInterruptPriority+0x62>
	}
 800c78e:	bf00      	nop
 800c790:	3714      	adds	r7, #20
 800c792:	46bd      	mov	sp, r7
 800c794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c798:	4770      	bx	lr
 800c79a:	bf00      	nop
 800c79c:	e000e3f0 	.word	0xe000e3f0
 800c7a0:	20002c3c 	.word	0x20002c3c
 800c7a4:	e000ed0c 	.word	0xe000ed0c
 800c7a8:	20002c40 	.word	0x20002c40

0800c7ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b08a      	sub	sp, #40	@ 0x28
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c7b8:	f7fe fc84 	bl	800b0c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c7bc:	4b5c      	ldr	r3, [pc, #368]	@ (800c930 <pvPortMalloc+0x184>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d101      	bne.n	800c7c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c7c4:	f000 f924 	bl	800ca10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c7c8:	4b5a      	ldr	r3, [pc, #360]	@ (800c934 <pvPortMalloc+0x188>)
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	4013      	ands	r3, r2
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	f040 8095 	bne.w	800c900 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d01e      	beq.n	800c81a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c7dc:	2208      	movs	r2, #8
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	4413      	add	r3, r2
 800c7e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f003 0307 	and.w	r3, r3, #7
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d015      	beq.n	800c81a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f023 0307 	bic.w	r3, r3, #7
 800c7f4:	3308      	adds	r3, #8
 800c7f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f003 0307 	and.w	r3, r3, #7
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d00b      	beq.n	800c81a <pvPortMalloc+0x6e>
	__asm volatile
 800c802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c806:	f383 8811 	msr	BASEPRI, r3
 800c80a:	f3bf 8f6f 	isb	sy
 800c80e:	f3bf 8f4f 	dsb	sy
 800c812:	617b      	str	r3, [r7, #20]
}
 800c814:	bf00      	nop
 800c816:	bf00      	nop
 800c818:	e7fd      	b.n	800c816 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d06f      	beq.n	800c900 <pvPortMalloc+0x154>
 800c820:	4b45      	ldr	r3, [pc, #276]	@ (800c938 <pvPortMalloc+0x18c>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	429a      	cmp	r2, r3
 800c828:	d86a      	bhi.n	800c900 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c82a:	4b44      	ldr	r3, [pc, #272]	@ (800c93c <pvPortMalloc+0x190>)
 800c82c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c82e:	4b43      	ldr	r3, [pc, #268]	@ (800c93c <pvPortMalloc+0x190>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c834:	e004      	b.n	800c840 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c838:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	429a      	cmp	r2, r3
 800c848:	d903      	bls.n	800c852 <pvPortMalloc+0xa6>
 800c84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d1f1      	bne.n	800c836 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c852:	4b37      	ldr	r3, [pc, #220]	@ (800c930 <pvPortMalloc+0x184>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c858:	429a      	cmp	r2, r3
 800c85a:	d051      	beq.n	800c900 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c85c:	6a3b      	ldr	r3, [r7, #32]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	2208      	movs	r2, #8
 800c862:	4413      	add	r3, r2
 800c864:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c868:	681a      	ldr	r2, [r3, #0]
 800c86a:	6a3b      	ldr	r3, [r7, #32]
 800c86c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c870:	685a      	ldr	r2, [r3, #4]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	1ad2      	subs	r2, r2, r3
 800c876:	2308      	movs	r3, #8
 800c878:	005b      	lsls	r3, r3, #1
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d920      	bls.n	800c8c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c87e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	4413      	add	r3, r2
 800c884:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c886:	69bb      	ldr	r3, [r7, #24]
 800c888:	f003 0307 	and.w	r3, r3, #7
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d00b      	beq.n	800c8a8 <pvPortMalloc+0xfc>
	__asm volatile
 800c890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c894:	f383 8811 	msr	BASEPRI, r3
 800c898:	f3bf 8f6f 	isb	sy
 800c89c:	f3bf 8f4f 	dsb	sy
 800c8a0:	613b      	str	r3, [r7, #16]
}
 800c8a2:	bf00      	nop
 800c8a4:	bf00      	nop
 800c8a6:	e7fd      	b.n	800c8a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8aa:	685a      	ldr	r2, [r3, #4]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	1ad2      	subs	r2, r2, r3
 800c8b0:	69bb      	ldr	r3, [r7, #24]
 800c8b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b6:	687a      	ldr	r2, [r7, #4]
 800c8b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c8ba:	69b8      	ldr	r0, [r7, #24]
 800c8bc:	f000 f90a 	bl	800cad4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c8c0:	4b1d      	ldr	r3, [pc, #116]	@ (800c938 <pvPortMalloc+0x18c>)
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	1ad3      	subs	r3, r2, r3
 800c8ca:	4a1b      	ldr	r2, [pc, #108]	@ (800c938 <pvPortMalloc+0x18c>)
 800c8cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c8ce:	4b1a      	ldr	r3, [pc, #104]	@ (800c938 <pvPortMalloc+0x18c>)
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	4b1b      	ldr	r3, [pc, #108]	@ (800c940 <pvPortMalloc+0x194>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d203      	bcs.n	800c8e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c8da:	4b17      	ldr	r3, [pc, #92]	@ (800c938 <pvPortMalloc+0x18c>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4a18      	ldr	r2, [pc, #96]	@ (800c940 <pvPortMalloc+0x194>)
 800c8e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8e4:	685a      	ldr	r2, [r3, #4]
 800c8e6:	4b13      	ldr	r3, [pc, #76]	@ (800c934 <pvPortMalloc+0x188>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	431a      	orrs	r2, r3
 800c8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c8f6:	4b13      	ldr	r3, [pc, #76]	@ (800c944 <pvPortMalloc+0x198>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	4a11      	ldr	r2, [pc, #68]	@ (800c944 <pvPortMalloc+0x198>)
 800c8fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c900:	f7fe fbee 	bl	800b0e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	f003 0307 	and.w	r3, r3, #7
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d00b      	beq.n	800c926 <pvPortMalloc+0x17a>
	__asm volatile
 800c90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c912:	f383 8811 	msr	BASEPRI, r3
 800c916:	f3bf 8f6f 	isb	sy
 800c91a:	f3bf 8f4f 	dsb	sy
 800c91e:	60fb      	str	r3, [r7, #12]
}
 800c920:	bf00      	nop
 800c922:	bf00      	nop
 800c924:	e7fd      	b.n	800c922 <pvPortMalloc+0x176>
	return pvReturn;
 800c926:	69fb      	ldr	r3, [r7, #28]
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3728      	adds	r7, #40	@ 0x28
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	20003804 	.word	0x20003804
 800c934:	20003818 	.word	0x20003818
 800c938:	20003808 	.word	0x20003808
 800c93c:	200037fc 	.word	0x200037fc
 800c940:	2000380c 	.word	0x2000380c
 800c944:	20003810 	.word	0x20003810

0800c948 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b086      	sub	sp, #24
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d04f      	beq.n	800c9fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c95a:	2308      	movs	r3, #8
 800c95c:	425b      	negs	r3, r3
 800c95e:	697a      	ldr	r2, [r7, #20]
 800c960:	4413      	add	r3, r2
 800c962:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	685a      	ldr	r2, [r3, #4]
 800c96c:	4b25      	ldr	r3, [pc, #148]	@ (800ca04 <vPortFree+0xbc>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4013      	ands	r3, r2
 800c972:	2b00      	cmp	r3, #0
 800c974:	d10b      	bne.n	800c98e <vPortFree+0x46>
	__asm volatile
 800c976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c97a:	f383 8811 	msr	BASEPRI, r3
 800c97e:	f3bf 8f6f 	isb	sy
 800c982:	f3bf 8f4f 	dsb	sy
 800c986:	60fb      	str	r3, [r7, #12]
}
 800c988:	bf00      	nop
 800c98a:	bf00      	nop
 800c98c:	e7fd      	b.n	800c98a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d00b      	beq.n	800c9ae <vPortFree+0x66>
	__asm volatile
 800c996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c99a:	f383 8811 	msr	BASEPRI, r3
 800c99e:	f3bf 8f6f 	isb	sy
 800c9a2:	f3bf 8f4f 	dsb	sy
 800c9a6:	60bb      	str	r3, [r7, #8]
}
 800c9a8:	bf00      	nop
 800c9aa:	bf00      	nop
 800c9ac:	e7fd      	b.n	800c9aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	685a      	ldr	r2, [r3, #4]
 800c9b2:	4b14      	ldr	r3, [pc, #80]	@ (800ca04 <vPortFree+0xbc>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4013      	ands	r3, r2
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d01e      	beq.n	800c9fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d11a      	bne.n	800c9fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	685a      	ldr	r2, [r3, #4]
 800c9c8:	4b0e      	ldr	r3, [pc, #56]	@ (800ca04 <vPortFree+0xbc>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	43db      	mvns	r3, r3
 800c9ce:	401a      	ands	r2, r3
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c9d4:	f7fe fb76 	bl	800b0c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	685a      	ldr	r2, [r3, #4]
 800c9dc:	4b0a      	ldr	r3, [pc, #40]	@ (800ca08 <vPortFree+0xc0>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4413      	add	r3, r2
 800c9e2:	4a09      	ldr	r2, [pc, #36]	@ (800ca08 <vPortFree+0xc0>)
 800c9e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c9e6:	6938      	ldr	r0, [r7, #16]
 800c9e8:	f000 f874 	bl	800cad4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c9ec:	4b07      	ldr	r3, [pc, #28]	@ (800ca0c <vPortFree+0xc4>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	4a06      	ldr	r2, [pc, #24]	@ (800ca0c <vPortFree+0xc4>)
 800c9f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c9f6:	f7fe fb73 	bl	800b0e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c9fa:	bf00      	nop
 800c9fc:	3718      	adds	r7, #24
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}
 800ca02:	bf00      	nop
 800ca04:	20003818 	.word	0x20003818
 800ca08:	20003808 	.word	0x20003808
 800ca0c:	20003814 	.word	0x20003814

0800ca10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca10:	b480      	push	{r7}
 800ca12:	b085      	sub	sp, #20
 800ca14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca16:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800ca1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ca1c:	4b27      	ldr	r3, [pc, #156]	@ (800cabc <prvHeapInit+0xac>)
 800ca1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f003 0307 	and.w	r3, r3, #7
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d00c      	beq.n	800ca44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	3307      	adds	r3, #7
 800ca2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f023 0307 	bic.w	r3, r3, #7
 800ca36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca38:	68ba      	ldr	r2, [r7, #8]
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	1ad3      	subs	r3, r2, r3
 800ca3e:	4a1f      	ldr	r2, [pc, #124]	@ (800cabc <prvHeapInit+0xac>)
 800ca40:	4413      	add	r3, r2
 800ca42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca48:	4a1d      	ldr	r2, [pc, #116]	@ (800cac0 <prvHeapInit+0xb0>)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca4e:	4b1c      	ldr	r3, [pc, #112]	@ (800cac0 <prvHeapInit+0xb0>)
 800ca50:	2200      	movs	r2, #0
 800ca52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	68ba      	ldr	r2, [r7, #8]
 800ca58:	4413      	add	r3, r2
 800ca5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ca5c:	2208      	movs	r2, #8
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	1a9b      	subs	r3, r3, r2
 800ca62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f023 0307 	bic.w	r3, r3, #7
 800ca6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	4a15      	ldr	r2, [pc, #84]	@ (800cac4 <prvHeapInit+0xb4>)
 800ca70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ca72:	4b14      	ldr	r3, [pc, #80]	@ (800cac4 <prvHeapInit+0xb4>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	2200      	movs	r2, #0
 800ca78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ca7a:	4b12      	ldr	r3, [pc, #72]	@ (800cac4 <prvHeapInit+0xb4>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	68fa      	ldr	r2, [r7, #12]
 800ca8a:	1ad2      	subs	r2, r2, r3
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca90:	4b0c      	ldr	r3, [pc, #48]	@ (800cac4 <prvHeapInit+0xb4>)
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	4a0a      	ldr	r2, [pc, #40]	@ (800cac8 <prvHeapInit+0xb8>)
 800ca9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	4a09      	ldr	r2, [pc, #36]	@ (800cacc <prvHeapInit+0xbc>)
 800caa6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800caa8:	4b09      	ldr	r3, [pc, #36]	@ (800cad0 <prvHeapInit+0xc0>)
 800caaa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800caae:	601a      	str	r2, [r3, #0]
}
 800cab0:	bf00      	nop
 800cab2:	3714      	adds	r7, #20
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr
 800cabc:	20002c44 	.word	0x20002c44
 800cac0:	200037fc 	.word	0x200037fc
 800cac4:	20003804 	.word	0x20003804
 800cac8:	2000380c 	.word	0x2000380c
 800cacc:	20003808 	.word	0x20003808
 800cad0:	20003818 	.word	0x20003818

0800cad4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cad4:	b480      	push	{r7}
 800cad6:	b085      	sub	sp, #20
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cadc:	4b28      	ldr	r3, [pc, #160]	@ (800cb80 <prvInsertBlockIntoFreeList+0xac>)
 800cade:	60fb      	str	r3, [r7, #12]
 800cae0:	e002      	b.n	800cae8 <prvInsertBlockIntoFreeList+0x14>
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	60fb      	str	r3, [r7, #12]
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	687a      	ldr	r2, [r7, #4]
 800caee:	429a      	cmp	r2, r3
 800caf0:	d8f7      	bhi.n	800cae2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	68ba      	ldr	r2, [r7, #8]
 800cafc:	4413      	add	r3, r2
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d108      	bne.n	800cb16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	685a      	ldr	r2, [r3, #4]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	441a      	add	r2, r3
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	68ba      	ldr	r2, [r7, #8]
 800cb20:	441a      	add	r2, r3
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d118      	bne.n	800cb5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681a      	ldr	r2, [r3, #0]
 800cb2e:	4b15      	ldr	r3, [pc, #84]	@ (800cb84 <prvInsertBlockIntoFreeList+0xb0>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d00d      	beq.n	800cb52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	685a      	ldr	r2, [r3, #4]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	441a      	add	r2, r3
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	601a      	str	r2, [r3, #0]
 800cb50:	e008      	b.n	800cb64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb52:	4b0c      	ldr	r3, [pc, #48]	@ (800cb84 <prvInsertBlockIntoFreeList+0xb0>)
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	601a      	str	r2, [r3, #0]
 800cb5a:	e003      	b.n	800cb64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681a      	ldr	r2, [r3, #0]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cb64:	68fa      	ldr	r2, [r7, #12]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d002      	beq.n	800cb72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb72:	bf00      	nop
 800cb74:	3714      	adds	r7, #20
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	200037fc 	.word	0x200037fc
 800cb84:	20003804 	.word	0x20003804

0800cb88 <__cvt>:
 800cb88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb8c:	ec57 6b10 	vmov	r6, r7, d0
 800cb90:	2f00      	cmp	r7, #0
 800cb92:	460c      	mov	r4, r1
 800cb94:	4619      	mov	r1, r3
 800cb96:	463b      	mov	r3, r7
 800cb98:	bfbb      	ittet	lt
 800cb9a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cb9e:	461f      	movlt	r7, r3
 800cba0:	2300      	movge	r3, #0
 800cba2:	232d      	movlt	r3, #45	@ 0x2d
 800cba4:	700b      	strb	r3, [r1, #0]
 800cba6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cba8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cbac:	4691      	mov	r9, r2
 800cbae:	f023 0820 	bic.w	r8, r3, #32
 800cbb2:	bfbc      	itt	lt
 800cbb4:	4632      	movlt	r2, r6
 800cbb6:	4616      	movlt	r6, r2
 800cbb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cbbc:	d005      	beq.n	800cbca <__cvt+0x42>
 800cbbe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cbc2:	d100      	bne.n	800cbc6 <__cvt+0x3e>
 800cbc4:	3401      	adds	r4, #1
 800cbc6:	2102      	movs	r1, #2
 800cbc8:	e000      	b.n	800cbcc <__cvt+0x44>
 800cbca:	2103      	movs	r1, #3
 800cbcc:	ab03      	add	r3, sp, #12
 800cbce:	9301      	str	r3, [sp, #4]
 800cbd0:	ab02      	add	r3, sp, #8
 800cbd2:	9300      	str	r3, [sp, #0]
 800cbd4:	ec47 6b10 	vmov	d0, r6, r7
 800cbd8:	4653      	mov	r3, sl
 800cbda:	4622      	mov	r2, r4
 800cbdc:	f001 f9a4 	bl	800df28 <_dtoa_r>
 800cbe0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cbe4:	4605      	mov	r5, r0
 800cbe6:	d119      	bne.n	800cc1c <__cvt+0x94>
 800cbe8:	f019 0f01 	tst.w	r9, #1
 800cbec:	d00e      	beq.n	800cc0c <__cvt+0x84>
 800cbee:	eb00 0904 	add.w	r9, r0, r4
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	4630      	mov	r0, r6
 800cbf8:	4639      	mov	r1, r7
 800cbfa:	f7f3 ff65 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbfe:	b108      	cbz	r0, 800cc04 <__cvt+0x7c>
 800cc00:	f8cd 900c 	str.w	r9, [sp, #12]
 800cc04:	2230      	movs	r2, #48	@ 0x30
 800cc06:	9b03      	ldr	r3, [sp, #12]
 800cc08:	454b      	cmp	r3, r9
 800cc0a:	d31e      	bcc.n	800cc4a <__cvt+0xc2>
 800cc0c:	9b03      	ldr	r3, [sp, #12]
 800cc0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc10:	1b5b      	subs	r3, r3, r5
 800cc12:	4628      	mov	r0, r5
 800cc14:	6013      	str	r3, [r2, #0]
 800cc16:	b004      	add	sp, #16
 800cc18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cc20:	eb00 0904 	add.w	r9, r0, r4
 800cc24:	d1e5      	bne.n	800cbf2 <__cvt+0x6a>
 800cc26:	7803      	ldrb	r3, [r0, #0]
 800cc28:	2b30      	cmp	r3, #48	@ 0x30
 800cc2a:	d10a      	bne.n	800cc42 <__cvt+0xba>
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	2300      	movs	r3, #0
 800cc30:	4630      	mov	r0, r6
 800cc32:	4639      	mov	r1, r7
 800cc34:	f7f3 ff48 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc38:	b918      	cbnz	r0, 800cc42 <__cvt+0xba>
 800cc3a:	f1c4 0401 	rsb	r4, r4, #1
 800cc3e:	f8ca 4000 	str.w	r4, [sl]
 800cc42:	f8da 3000 	ldr.w	r3, [sl]
 800cc46:	4499      	add	r9, r3
 800cc48:	e7d3      	b.n	800cbf2 <__cvt+0x6a>
 800cc4a:	1c59      	adds	r1, r3, #1
 800cc4c:	9103      	str	r1, [sp, #12]
 800cc4e:	701a      	strb	r2, [r3, #0]
 800cc50:	e7d9      	b.n	800cc06 <__cvt+0x7e>

0800cc52 <__exponent>:
 800cc52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc54:	2900      	cmp	r1, #0
 800cc56:	bfba      	itte	lt
 800cc58:	4249      	neglt	r1, r1
 800cc5a:	232d      	movlt	r3, #45	@ 0x2d
 800cc5c:	232b      	movge	r3, #43	@ 0x2b
 800cc5e:	2909      	cmp	r1, #9
 800cc60:	7002      	strb	r2, [r0, #0]
 800cc62:	7043      	strb	r3, [r0, #1]
 800cc64:	dd29      	ble.n	800ccba <__exponent+0x68>
 800cc66:	f10d 0307 	add.w	r3, sp, #7
 800cc6a:	461d      	mov	r5, r3
 800cc6c:	270a      	movs	r7, #10
 800cc6e:	461a      	mov	r2, r3
 800cc70:	fbb1 f6f7 	udiv	r6, r1, r7
 800cc74:	fb07 1416 	mls	r4, r7, r6, r1
 800cc78:	3430      	adds	r4, #48	@ 0x30
 800cc7a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cc7e:	460c      	mov	r4, r1
 800cc80:	2c63      	cmp	r4, #99	@ 0x63
 800cc82:	f103 33ff 	add.w	r3, r3, #4294967295
 800cc86:	4631      	mov	r1, r6
 800cc88:	dcf1      	bgt.n	800cc6e <__exponent+0x1c>
 800cc8a:	3130      	adds	r1, #48	@ 0x30
 800cc8c:	1e94      	subs	r4, r2, #2
 800cc8e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cc92:	1c41      	adds	r1, r0, #1
 800cc94:	4623      	mov	r3, r4
 800cc96:	42ab      	cmp	r3, r5
 800cc98:	d30a      	bcc.n	800ccb0 <__exponent+0x5e>
 800cc9a:	f10d 0309 	add.w	r3, sp, #9
 800cc9e:	1a9b      	subs	r3, r3, r2
 800cca0:	42ac      	cmp	r4, r5
 800cca2:	bf88      	it	hi
 800cca4:	2300      	movhi	r3, #0
 800cca6:	3302      	adds	r3, #2
 800cca8:	4403      	add	r3, r0
 800ccaa:	1a18      	subs	r0, r3, r0
 800ccac:	b003      	add	sp, #12
 800ccae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccb0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ccb4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ccb8:	e7ed      	b.n	800cc96 <__exponent+0x44>
 800ccba:	2330      	movs	r3, #48	@ 0x30
 800ccbc:	3130      	adds	r1, #48	@ 0x30
 800ccbe:	7083      	strb	r3, [r0, #2]
 800ccc0:	70c1      	strb	r1, [r0, #3]
 800ccc2:	1d03      	adds	r3, r0, #4
 800ccc4:	e7f1      	b.n	800ccaa <__exponent+0x58>
	...

0800ccc8 <_printf_float>:
 800ccc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cccc:	b08d      	sub	sp, #52	@ 0x34
 800ccce:	460c      	mov	r4, r1
 800ccd0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ccd4:	4616      	mov	r6, r2
 800ccd6:	461f      	mov	r7, r3
 800ccd8:	4605      	mov	r5, r0
 800ccda:	f000 fff3 	bl	800dcc4 <_localeconv_r>
 800ccde:	6803      	ldr	r3, [r0, #0]
 800cce0:	9304      	str	r3, [sp, #16]
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7f3 fac4 	bl	8000270 <strlen>
 800cce8:	2300      	movs	r3, #0
 800ccea:	930a      	str	r3, [sp, #40]	@ 0x28
 800ccec:	f8d8 3000 	ldr.w	r3, [r8]
 800ccf0:	9005      	str	r0, [sp, #20]
 800ccf2:	3307      	adds	r3, #7
 800ccf4:	f023 0307 	bic.w	r3, r3, #7
 800ccf8:	f103 0208 	add.w	r2, r3, #8
 800ccfc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cd00:	f8d4 b000 	ldr.w	fp, [r4]
 800cd04:	f8c8 2000 	str.w	r2, [r8]
 800cd08:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cd0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cd10:	9307      	str	r3, [sp, #28]
 800cd12:	f8cd 8018 	str.w	r8, [sp, #24]
 800cd16:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cd1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd1e:	4b9c      	ldr	r3, [pc, #624]	@ (800cf90 <_printf_float+0x2c8>)
 800cd20:	f04f 32ff 	mov.w	r2, #4294967295
 800cd24:	f7f3 ff02 	bl	8000b2c <__aeabi_dcmpun>
 800cd28:	bb70      	cbnz	r0, 800cd88 <_printf_float+0xc0>
 800cd2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd2e:	4b98      	ldr	r3, [pc, #608]	@ (800cf90 <_printf_float+0x2c8>)
 800cd30:	f04f 32ff 	mov.w	r2, #4294967295
 800cd34:	f7f3 fedc 	bl	8000af0 <__aeabi_dcmple>
 800cd38:	bb30      	cbnz	r0, 800cd88 <_printf_float+0xc0>
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	4640      	mov	r0, r8
 800cd40:	4649      	mov	r1, r9
 800cd42:	f7f3 fecb 	bl	8000adc <__aeabi_dcmplt>
 800cd46:	b110      	cbz	r0, 800cd4e <_printf_float+0x86>
 800cd48:	232d      	movs	r3, #45	@ 0x2d
 800cd4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd4e:	4a91      	ldr	r2, [pc, #580]	@ (800cf94 <_printf_float+0x2cc>)
 800cd50:	4b91      	ldr	r3, [pc, #580]	@ (800cf98 <_printf_float+0x2d0>)
 800cd52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cd56:	bf94      	ite	ls
 800cd58:	4690      	movls	r8, r2
 800cd5a:	4698      	movhi	r8, r3
 800cd5c:	2303      	movs	r3, #3
 800cd5e:	6123      	str	r3, [r4, #16]
 800cd60:	f02b 0304 	bic.w	r3, fp, #4
 800cd64:	6023      	str	r3, [r4, #0]
 800cd66:	f04f 0900 	mov.w	r9, #0
 800cd6a:	9700      	str	r7, [sp, #0]
 800cd6c:	4633      	mov	r3, r6
 800cd6e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cd70:	4621      	mov	r1, r4
 800cd72:	4628      	mov	r0, r5
 800cd74:	f000 f9d2 	bl	800d11c <_printf_common>
 800cd78:	3001      	adds	r0, #1
 800cd7a:	f040 808d 	bne.w	800ce98 <_printf_float+0x1d0>
 800cd7e:	f04f 30ff 	mov.w	r0, #4294967295
 800cd82:	b00d      	add	sp, #52	@ 0x34
 800cd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd88:	4642      	mov	r2, r8
 800cd8a:	464b      	mov	r3, r9
 800cd8c:	4640      	mov	r0, r8
 800cd8e:	4649      	mov	r1, r9
 800cd90:	f7f3 fecc 	bl	8000b2c <__aeabi_dcmpun>
 800cd94:	b140      	cbz	r0, 800cda8 <_printf_float+0xe0>
 800cd96:	464b      	mov	r3, r9
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	bfbc      	itt	lt
 800cd9c:	232d      	movlt	r3, #45	@ 0x2d
 800cd9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cda2:	4a7e      	ldr	r2, [pc, #504]	@ (800cf9c <_printf_float+0x2d4>)
 800cda4:	4b7e      	ldr	r3, [pc, #504]	@ (800cfa0 <_printf_float+0x2d8>)
 800cda6:	e7d4      	b.n	800cd52 <_printf_float+0x8a>
 800cda8:	6863      	ldr	r3, [r4, #4]
 800cdaa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cdae:	9206      	str	r2, [sp, #24]
 800cdb0:	1c5a      	adds	r2, r3, #1
 800cdb2:	d13b      	bne.n	800ce2c <_printf_float+0x164>
 800cdb4:	2306      	movs	r3, #6
 800cdb6:	6063      	str	r3, [r4, #4]
 800cdb8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	6022      	str	r2, [r4, #0]
 800cdc0:	9303      	str	r3, [sp, #12]
 800cdc2:	ab0a      	add	r3, sp, #40	@ 0x28
 800cdc4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cdc8:	ab09      	add	r3, sp, #36	@ 0x24
 800cdca:	9300      	str	r3, [sp, #0]
 800cdcc:	6861      	ldr	r1, [r4, #4]
 800cdce:	ec49 8b10 	vmov	d0, r8, r9
 800cdd2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cdd6:	4628      	mov	r0, r5
 800cdd8:	f7ff fed6 	bl	800cb88 <__cvt>
 800cddc:	9b06      	ldr	r3, [sp, #24]
 800cdde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cde0:	2b47      	cmp	r3, #71	@ 0x47
 800cde2:	4680      	mov	r8, r0
 800cde4:	d129      	bne.n	800ce3a <_printf_float+0x172>
 800cde6:	1cc8      	adds	r0, r1, #3
 800cde8:	db02      	blt.n	800cdf0 <_printf_float+0x128>
 800cdea:	6863      	ldr	r3, [r4, #4]
 800cdec:	4299      	cmp	r1, r3
 800cdee:	dd41      	ble.n	800ce74 <_printf_float+0x1ac>
 800cdf0:	f1aa 0a02 	sub.w	sl, sl, #2
 800cdf4:	fa5f fa8a 	uxtb.w	sl, sl
 800cdf8:	3901      	subs	r1, #1
 800cdfa:	4652      	mov	r2, sl
 800cdfc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ce00:	9109      	str	r1, [sp, #36]	@ 0x24
 800ce02:	f7ff ff26 	bl	800cc52 <__exponent>
 800ce06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ce08:	1813      	adds	r3, r2, r0
 800ce0a:	2a01      	cmp	r2, #1
 800ce0c:	4681      	mov	r9, r0
 800ce0e:	6123      	str	r3, [r4, #16]
 800ce10:	dc02      	bgt.n	800ce18 <_printf_float+0x150>
 800ce12:	6822      	ldr	r2, [r4, #0]
 800ce14:	07d2      	lsls	r2, r2, #31
 800ce16:	d501      	bpl.n	800ce1c <_printf_float+0x154>
 800ce18:	3301      	adds	r3, #1
 800ce1a:	6123      	str	r3, [r4, #16]
 800ce1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d0a2      	beq.n	800cd6a <_printf_float+0xa2>
 800ce24:	232d      	movs	r3, #45	@ 0x2d
 800ce26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce2a:	e79e      	b.n	800cd6a <_printf_float+0xa2>
 800ce2c:	9a06      	ldr	r2, [sp, #24]
 800ce2e:	2a47      	cmp	r2, #71	@ 0x47
 800ce30:	d1c2      	bne.n	800cdb8 <_printf_float+0xf0>
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d1c0      	bne.n	800cdb8 <_printf_float+0xf0>
 800ce36:	2301      	movs	r3, #1
 800ce38:	e7bd      	b.n	800cdb6 <_printf_float+0xee>
 800ce3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ce3e:	d9db      	bls.n	800cdf8 <_printf_float+0x130>
 800ce40:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ce44:	d118      	bne.n	800ce78 <_printf_float+0x1b0>
 800ce46:	2900      	cmp	r1, #0
 800ce48:	6863      	ldr	r3, [r4, #4]
 800ce4a:	dd0b      	ble.n	800ce64 <_printf_float+0x19c>
 800ce4c:	6121      	str	r1, [r4, #16]
 800ce4e:	b913      	cbnz	r3, 800ce56 <_printf_float+0x18e>
 800ce50:	6822      	ldr	r2, [r4, #0]
 800ce52:	07d0      	lsls	r0, r2, #31
 800ce54:	d502      	bpl.n	800ce5c <_printf_float+0x194>
 800ce56:	3301      	adds	r3, #1
 800ce58:	440b      	add	r3, r1
 800ce5a:	6123      	str	r3, [r4, #16]
 800ce5c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ce5e:	f04f 0900 	mov.w	r9, #0
 800ce62:	e7db      	b.n	800ce1c <_printf_float+0x154>
 800ce64:	b913      	cbnz	r3, 800ce6c <_printf_float+0x1a4>
 800ce66:	6822      	ldr	r2, [r4, #0]
 800ce68:	07d2      	lsls	r2, r2, #31
 800ce6a:	d501      	bpl.n	800ce70 <_printf_float+0x1a8>
 800ce6c:	3302      	adds	r3, #2
 800ce6e:	e7f4      	b.n	800ce5a <_printf_float+0x192>
 800ce70:	2301      	movs	r3, #1
 800ce72:	e7f2      	b.n	800ce5a <_printf_float+0x192>
 800ce74:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ce78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce7a:	4299      	cmp	r1, r3
 800ce7c:	db05      	blt.n	800ce8a <_printf_float+0x1c2>
 800ce7e:	6823      	ldr	r3, [r4, #0]
 800ce80:	6121      	str	r1, [r4, #16]
 800ce82:	07d8      	lsls	r0, r3, #31
 800ce84:	d5ea      	bpl.n	800ce5c <_printf_float+0x194>
 800ce86:	1c4b      	adds	r3, r1, #1
 800ce88:	e7e7      	b.n	800ce5a <_printf_float+0x192>
 800ce8a:	2900      	cmp	r1, #0
 800ce8c:	bfd4      	ite	le
 800ce8e:	f1c1 0202 	rsble	r2, r1, #2
 800ce92:	2201      	movgt	r2, #1
 800ce94:	4413      	add	r3, r2
 800ce96:	e7e0      	b.n	800ce5a <_printf_float+0x192>
 800ce98:	6823      	ldr	r3, [r4, #0]
 800ce9a:	055a      	lsls	r2, r3, #21
 800ce9c:	d407      	bmi.n	800ceae <_printf_float+0x1e6>
 800ce9e:	6923      	ldr	r3, [r4, #16]
 800cea0:	4642      	mov	r2, r8
 800cea2:	4631      	mov	r1, r6
 800cea4:	4628      	mov	r0, r5
 800cea6:	47b8      	blx	r7
 800cea8:	3001      	adds	r0, #1
 800ceaa:	d12b      	bne.n	800cf04 <_printf_float+0x23c>
 800ceac:	e767      	b.n	800cd7e <_printf_float+0xb6>
 800ceae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ceb2:	f240 80dd 	bls.w	800d070 <_printf_float+0x3a8>
 800ceb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ceba:	2200      	movs	r2, #0
 800cebc:	2300      	movs	r3, #0
 800cebe:	f7f3 fe03 	bl	8000ac8 <__aeabi_dcmpeq>
 800cec2:	2800      	cmp	r0, #0
 800cec4:	d033      	beq.n	800cf2e <_printf_float+0x266>
 800cec6:	4a37      	ldr	r2, [pc, #220]	@ (800cfa4 <_printf_float+0x2dc>)
 800cec8:	2301      	movs	r3, #1
 800ceca:	4631      	mov	r1, r6
 800cecc:	4628      	mov	r0, r5
 800cece:	47b8      	blx	r7
 800ced0:	3001      	adds	r0, #1
 800ced2:	f43f af54 	beq.w	800cd7e <_printf_float+0xb6>
 800ced6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ceda:	4543      	cmp	r3, r8
 800cedc:	db02      	blt.n	800cee4 <_printf_float+0x21c>
 800cede:	6823      	ldr	r3, [r4, #0]
 800cee0:	07d8      	lsls	r0, r3, #31
 800cee2:	d50f      	bpl.n	800cf04 <_printf_float+0x23c>
 800cee4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cee8:	4631      	mov	r1, r6
 800ceea:	4628      	mov	r0, r5
 800ceec:	47b8      	blx	r7
 800ceee:	3001      	adds	r0, #1
 800cef0:	f43f af45 	beq.w	800cd7e <_printf_float+0xb6>
 800cef4:	f04f 0900 	mov.w	r9, #0
 800cef8:	f108 38ff 	add.w	r8, r8, #4294967295
 800cefc:	f104 0a1a 	add.w	sl, r4, #26
 800cf00:	45c8      	cmp	r8, r9
 800cf02:	dc09      	bgt.n	800cf18 <_printf_float+0x250>
 800cf04:	6823      	ldr	r3, [r4, #0]
 800cf06:	079b      	lsls	r3, r3, #30
 800cf08:	f100 8103 	bmi.w	800d112 <_printf_float+0x44a>
 800cf0c:	68e0      	ldr	r0, [r4, #12]
 800cf0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf10:	4298      	cmp	r0, r3
 800cf12:	bfb8      	it	lt
 800cf14:	4618      	movlt	r0, r3
 800cf16:	e734      	b.n	800cd82 <_printf_float+0xba>
 800cf18:	2301      	movs	r3, #1
 800cf1a:	4652      	mov	r2, sl
 800cf1c:	4631      	mov	r1, r6
 800cf1e:	4628      	mov	r0, r5
 800cf20:	47b8      	blx	r7
 800cf22:	3001      	adds	r0, #1
 800cf24:	f43f af2b 	beq.w	800cd7e <_printf_float+0xb6>
 800cf28:	f109 0901 	add.w	r9, r9, #1
 800cf2c:	e7e8      	b.n	800cf00 <_printf_float+0x238>
 800cf2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	dc39      	bgt.n	800cfa8 <_printf_float+0x2e0>
 800cf34:	4a1b      	ldr	r2, [pc, #108]	@ (800cfa4 <_printf_float+0x2dc>)
 800cf36:	2301      	movs	r3, #1
 800cf38:	4631      	mov	r1, r6
 800cf3a:	4628      	mov	r0, r5
 800cf3c:	47b8      	blx	r7
 800cf3e:	3001      	adds	r0, #1
 800cf40:	f43f af1d 	beq.w	800cd7e <_printf_float+0xb6>
 800cf44:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cf48:	ea59 0303 	orrs.w	r3, r9, r3
 800cf4c:	d102      	bne.n	800cf54 <_printf_float+0x28c>
 800cf4e:	6823      	ldr	r3, [r4, #0]
 800cf50:	07d9      	lsls	r1, r3, #31
 800cf52:	d5d7      	bpl.n	800cf04 <_printf_float+0x23c>
 800cf54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf58:	4631      	mov	r1, r6
 800cf5a:	4628      	mov	r0, r5
 800cf5c:	47b8      	blx	r7
 800cf5e:	3001      	adds	r0, #1
 800cf60:	f43f af0d 	beq.w	800cd7e <_printf_float+0xb6>
 800cf64:	f04f 0a00 	mov.w	sl, #0
 800cf68:	f104 0b1a 	add.w	fp, r4, #26
 800cf6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf6e:	425b      	negs	r3, r3
 800cf70:	4553      	cmp	r3, sl
 800cf72:	dc01      	bgt.n	800cf78 <_printf_float+0x2b0>
 800cf74:	464b      	mov	r3, r9
 800cf76:	e793      	b.n	800cea0 <_printf_float+0x1d8>
 800cf78:	2301      	movs	r3, #1
 800cf7a:	465a      	mov	r2, fp
 800cf7c:	4631      	mov	r1, r6
 800cf7e:	4628      	mov	r0, r5
 800cf80:	47b8      	blx	r7
 800cf82:	3001      	adds	r0, #1
 800cf84:	f43f aefb 	beq.w	800cd7e <_printf_float+0xb6>
 800cf88:	f10a 0a01 	add.w	sl, sl, #1
 800cf8c:	e7ee      	b.n	800cf6c <_printf_float+0x2a4>
 800cf8e:	bf00      	nop
 800cf90:	7fefffff 	.word	0x7fefffff
 800cf94:	080117c8 	.word	0x080117c8
 800cf98:	080117cc 	.word	0x080117cc
 800cf9c:	080117d0 	.word	0x080117d0
 800cfa0:	080117d4 	.word	0x080117d4
 800cfa4:	080117d8 	.word	0x080117d8
 800cfa8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cfaa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cfae:	4553      	cmp	r3, sl
 800cfb0:	bfa8      	it	ge
 800cfb2:	4653      	movge	r3, sl
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	4699      	mov	r9, r3
 800cfb8:	dc36      	bgt.n	800d028 <_printf_float+0x360>
 800cfba:	f04f 0b00 	mov.w	fp, #0
 800cfbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cfc2:	f104 021a 	add.w	r2, r4, #26
 800cfc6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cfc8:	9306      	str	r3, [sp, #24]
 800cfca:	eba3 0309 	sub.w	r3, r3, r9
 800cfce:	455b      	cmp	r3, fp
 800cfd0:	dc31      	bgt.n	800d036 <_printf_float+0x36e>
 800cfd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfd4:	459a      	cmp	sl, r3
 800cfd6:	dc3a      	bgt.n	800d04e <_printf_float+0x386>
 800cfd8:	6823      	ldr	r3, [r4, #0]
 800cfda:	07da      	lsls	r2, r3, #31
 800cfdc:	d437      	bmi.n	800d04e <_printf_float+0x386>
 800cfde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfe0:	ebaa 0903 	sub.w	r9, sl, r3
 800cfe4:	9b06      	ldr	r3, [sp, #24]
 800cfe6:	ebaa 0303 	sub.w	r3, sl, r3
 800cfea:	4599      	cmp	r9, r3
 800cfec:	bfa8      	it	ge
 800cfee:	4699      	movge	r9, r3
 800cff0:	f1b9 0f00 	cmp.w	r9, #0
 800cff4:	dc33      	bgt.n	800d05e <_printf_float+0x396>
 800cff6:	f04f 0800 	mov.w	r8, #0
 800cffa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cffe:	f104 0b1a 	add.w	fp, r4, #26
 800d002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d004:	ebaa 0303 	sub.w	r3, sl, r3
 800d008:	eba3 0309 	sub.w	r3, r3, r9
 800d00c:	4543      	cmp	r3, r8
 800d00e:	f77f af79 	ble.w	800cf04 <_printf_float+0x23c>
 800d012:	2301      	movs	r3, #1
 800d014:	465a      	mov	r2, fp
 800d016:	4631      	mov	r1, r6
 800d018:	4628      	mov	r0, r5
 800d01a:	47b8      	blx	r7
 800d01c:	3001      	adds	r0, #1
 800d01e:	f43f aeae 	beq.w	800cd7e <_printf_float+0xb6>
 800d022:	f108 0801 	add.w	r8, r8, #1
 800d026:	e7ec      	b.n	800d002 <_printf_float+0x33a>
 800d028:	4642      	mov	r2, r8
 800d02a:	4631      	mov	r1, r6
 800d02c:	4628      	mov	r0, r5
 800d02e:	47b8      	blx	r7
 800d030:	3001      	adds	r0, #1
 800d032:	d1c2      	bne.n	800cfba <_printf_float+0x2f2>
 800d034:	e6a3      	b.n	800cd7e <_printf_float+0xb6>
 800d036:	2301      	movs	r3, #1
 800d038:	4631      	mov	r1, r6
 800d03a:	4628      	mov	r0, r5
 800d03c:	9206      	str	r2, [sp, #24]
 800d03e:	47b8      	blx	r7
 800d040:	3001      	adds	r0, #1
 800d042:	f43f ae9c 	beq.w	800cd7e <_printf_float+0xb6>
 800d046:	9a06      	ldr	r2, [sp, #24]
 800d048:	f10b 0b01 	add.w	fp, fp, #1
 800d04c:	e7bb      	b.n	800cfc6 <_printf_float+0x2fe>
 800d04e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d052:	4631      	mov	r1, r6
 800d054:	4628      	mov	r0, r5
 800d056:	47b8      	blx	r7
 800d058:	3001      	adds	r0, #1
 800d05a:	d1c0      	bne.n	800cfde <_printf_float+0x316>
 800d05c:	e68f      	b.n	800cd7e <_printf_float+0xb6>
 800d05e:	9a06      	ldr	r2, [sp, #24]
 800d060:	464b      	mov	r3, r9
 800d062:	4442      	add	r2, r8
 800d064:	4631      	mov	r1, r6
 800d066:	4628      	mov	r0, r5
 800d068:	47b8      	blx	r7
 800d06a:	3001      	adds	r0, #1
 800d06c:	d1c3      	bne.n	800cff6 <_printf_float+0x32e>
 800d06e:	e686      	b.n	800cd7e <_printf_float+0xb6>
 800d070:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d074:	f1ba 0f01 	cmp.w	sl, #1
 800d078:	dc01      	bgt.n	800d07e <_printf_float+0x3b6>
 800d07a:	07db      	lsls	r3, r3, #31
 800d07c:	d536      	bpl.n	800d0ec <_printf_float+0x424>
 800d07e:	2301      	movs	r3, #1
 800d080:	4642      	mov	r2, r8
 800d082:	4631      	mov	r1, r6
 800d084:	4628      	mov	r0, r5
 800d086:	47b8      	blx	r7
 800d088:	3001      	adds	r0, #1
 800d08a:	f43f ae78 	beq.w	800cd7e <_printf_float+0xb6>
 800d08e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d092:	4631      	mov	r1, r6
 800d094:	4628      	mov	r0, r5
 800d096:	47b8      	blx	r7
 800d098:	3001      	adds	r0, #1
 800d09a:	f43f ae70 	beq.w	800cd7e <_printf_float+0xb6>
 800d09e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d0aa:	f7f3 fd0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d0ae:	b9c0      	cbnz	r0, 800d0e2 <_printf_float+0x41a>
 800d0b0:	4653      	mov	r3, sl
 800d0b2:	f108 0201 	add.w	r2, r8, #1
 800d0b6:	4631      	mov	r1, r6
 800d0b8:	4628      	mov	r0, r5
 800d0ba:	47b8      	blx	r7
 800d0bc:	3001      	adds	r0, #1
 800d0be:	d10c      	bne.n	800d0da <_printf_float+0x412>
 800d0c0:	e65d      	b.n	800cd7e <_printf_float+0xb6>
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	465a      	mov	r2, fp
 800d0c6:	4631      	mov	r1, r6
 800d0c8:	4628      	mov	r0, r5
 800d0ca:	47b8      	blx	r7
 800d0cc:	3001      	adds	r0, #1
 800d0ce:	f43f ae56 	beq.w	800cd7e <_printf_float+0xb6>
 800d0d2:	f108 0801 	add.w	r8, r8, #1
 800d0d6:	45d0      	cmp	r8, sl
 800d0d8:	dbf3      	blt.n	800d0c2 <_printf_float+0x3fa>
 800d0da:	464b      	mov	r3, r9
 800d0dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d0e0:	e6df      	b.n	800cea2 <_printf_float+0x1da>
 800d0e2:	f04f 0800 	mov.w	r8, #0
 800d0e6:	f104 0b1a 	add.w	fp, r4, #26
 800d0ea:	e7f4      	b.n	800d0d6 <_printf_float+0x40e>
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	4642      	mov	r2, r8
 800d0f0:	e7e1      	b.n	800d0b6 <_printf_float+0x3ee>
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	464a      	mov	r2, r9
 800d0f6:	4631      	mov	r1, r6
 800d0f8:	4628      	mov	r0, r5
 800d0fa:	47b8      	blx	r7
 800d0fc:	3001      	adds	r0, #1
 800d0fe:	f43f ae3e 	beq.w	800cd7e <_printf_float+0xb6>
 800d102:	f108 0801 	add.w	r8, r8, #1
 800d106:	68e3      	ldr	r3, [r4, #12]
 800d108:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d10a:	1a5b      	subs	r3, r3, r1
 800d10c:	4543      	cmp	r3, r8
 800d10e:	dcf0      	bgt.n	800d0f2 <_printf_float+0x42a>
 800d110:	e6fc      	b.n	800cf0c <_printf_float+0x244>
 800d112:	f04f 0800 	mov.w	r8, #0
 800d116:	f104 0919 	add.w	r9, r4, #25
 800d11a:	e7f4      	b.n	800d106 <_printf_float+0x43e>

0800d11c <_printf_common>:
 800d11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d120:	4616      	mov	r6, r2
 800d122:	4698      	mov	r8, r3
 800d124:	688a      	ldr	r2, [r1, #8]
 800d126:	690b      	ldr	r3, [r1, #16]
 800d128:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d12c:	4293      	cmp	r3, r2
 800d12e:	bfb8      	it	lt
 800d130:	4613      	movlt	r3, r2
 800d132:	6033      	str	r3, [r6, #0]
 800d134:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d138:	4607      	mov	r7, r0
 800d13a:	460c      	mov	r4, r1
 800d13c:	b10a      	cbz	r2, 800d142 <_printf_common+0x26>
 800d13e:	3301      	adds	r3, #1
 800d140:	6033      	str	r3, [r6, #0]
 800d142:	6823      	ldr	r3, [r4, #0]
 800d144:	0699      	lsls	r1, r3, #26
 800d146:	bf42      	ittt	mi
 800d148:	6833      	ldrmi	r3, [r6, #0]
 800d14a:	3302      	addmi	r3, #2
 800d14c:	6033      	strmi	r3, [r6, #0]
 800d14e:	6825      	ldr	r5, [r4, #0]
 800d150:	f015 0506 	ands.w	r5, r5, #6
 800d154:	d106      	bne.n	800d164 <_printf_common+0x48>
 800d156:	f104 0a19 	add.w	sl, r4, #25
 800d15a:	68e3      	ldr	r3, [r4, #12]
 800d15c:	6832      	ldr	r2, [r6, #0]
 800d15e:	1a9b      	subs	r3, r3, r2
 800d160:	42ab      	cmp	r3, r5
 800d162:	dc26      	bgt.n	800d1b2 <_printf_common+0x96>
 800d164:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d168:	6822      	ldr	r2, [r4, #0]
 800d16a:	3b00      	subs	r3, #0
 800d16c:	bf18      	it	ne
 800d16e:	2301      	movne	r3, #1
 800d170:	0692      	lsls	r2, r2, #26
 800d172:	d42b      	bmi.n	800d1cc <_printf_common+0xb0>
 800d174:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d178:	4641      	mov	r1, r8
 800d17a:	4638      	mov	r0, r7
 800d17c:	47c8      	blx	r9
 800d17e:	3001      	adds	r0, #1
 800d180:	d01e      	beq.n	800d1c0 <_printf_common+0xa4>
 800d182:	6823      	ldr	r3, [r4, #0]
 800d184:	6922      	ldr	r2, [r4, #16]
 800d186:	f003 0306 	and.w	r3, r3, #6
 800d18a:	2b04      	cmp	r3, #4
 800d18c:	bf02      	ittt	eq
 800d18e:	68e5      	ldreq	r5, [r4, #12]
 800d190:	6833      	ldreq	r3, [r6, #0]
 800d192:	1aed      	subeq	r5, r5, r3
 800d194:	68a3      	ldr	r3, [r4, #8]
 800d196:	bf0c      	ite	eq
 800d198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d19c:	2500      	movne	r5, #0
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	bfc4      	itt	gt
 800d1a2:	1a9b      	subgt	r3, r3, r2
 800d1a4:	18ed      	addgt	r5, r5, r3
 800d1a6:	2600      	movs	r6, #0
 800d1a8:	341a      	adds	r4, #26
 800d1aa:	42b5      	cmp	r5, r6
 800d1ac:	d11a      	bne.n	800d1e4 <_printf_common+0xc8>
 800d1ae:	2000      	movs	r0, #0
 800d1b0:	e008      	b.n	800d1c4 <_printf_common+0xa8>
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	4652      	mov	r2, sl
 800d1b6:	4641      	mov	r1, r8
 800d1b8:	4638      	mov	r0, r7
 800d1ba:	47c8      	blx	r9
 800d1bc:	3001      	adds	r0, #1
 800d1be:	d103      	bne.n	800d1c8 <_printf_common+0xac>
 800d1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1c8:	3501      	adds	r5, #1
 800d1ca:	e7c6      	b.n	800d15a <_printf_common+0x3e>
 800d1cc:	18e1      	adds	r1, r4, r3
 800d1ce:	1c5a      	adds	r2, r3, #1
 800d1d0:	2030      	movs	r0, #48	@ 0x30
 800d1d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d1d6:	4422      	add	r2, r4
 800d1d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d1dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d1e0:	3302      	adds	r3, #2
 800d1e2:	e7c7      	b.n	800d174 <_printf_common+0x58>
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	4622      	mov	r2, r4
 800d1e8:	4641      	mov	r1, r8
 800d1ea:	4638      	mov	r0, r7
 800d1ec:	47c8      	blx	r9
 800d1ee:	3001      	adds	r0, #1
 800d1f0:	d0e6      	beq.n	800d1c0 <_printf_common+0xa4>
 800d1f2:	3601      	adds	r6, #1
 800d1f4:	e7d9      	b.n	800d1aa <_printf_common+0x8e>
	...

0800d1f8 <_printf_i>:
 800d1f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d1fc:	7e0f      	ldrb	r7, [r1, #24]
 800d1fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d200:	2f78      	cmp	r7, #120	@ 0x78
 800d202:	4691      	mov	r9, r2
 800d204:	4680      	mov	r8, r0
 800d206:	460c      	mov	r4, r1
 800d208:	469a      	mov	sl, r3
 800d20a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d20e:	d807      	bhi.n	800d220 <_printf_i+0x28>
 800d210:	2f62      	cmp	r7, #98	@ 0x62
 800d212:	d80a      	bhi.n	800d22a <_printf_i+0x32>
 800d214:	2f00      	cmp	r7, #0
 800d216:	f000 80d2 	beq.w	800d3be <_printf_i+0x1c6>
 800d21a:	2f58      	cmp	r7, #88	@ 0x58
 800d21c:	f000 80b9 	beq.w	800d392 <_printf_i+0x19a>
 800d220:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d224:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d228:	e03a      	b.n	800d2a0 <_printf_i+0xa8>
 800d22a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d22e:	2b15      	cmp	r3, #21
 800d230:	d8f6      	bhi.n	800d220 <_printf_i+0x28>
 800d232:	a101      	add	r1, pc, #4	@ (adr r1, 800d238 <_printf_i+0x40>)
 800d234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d238:	0800d291 	.word	0x0800d291
 800d23c:	0800d2a5 	.word	0x0800d2a5
 800d240:	0800d221 	.word	0x0800d221
 800d244:	0800d221 	.word	0x0800d221
 800d248:	0800d221 	.word	0x0800d221
 800d24c:	0800d221 	.word	0x0800d221
 800d250:	0800d2a5 	.word	0x0800d2a5
 800d254:	0800d221 	.word	0x0800d221
 800d258:	0800d221 	.word	0x0800d221
 800d25c:	0800d221 	.word	0x0800d221
 800d260:	0800d221 	.word	0x0800d221
 800d264:	0800d3a5 	.word	0x0800d3a5
 800d268:	0800d2cf 	.word	0x0800d2cf
 800d26c:	0800d35f 	.word	0x0800d35f
 800d270:	0800d221 	.word	0x0800d221
 800d274:	0800d221 	.word	0x0800d221
 800d278:	0800d3c7 	.word	0x0800d3c7
 800d27c:	0800d221 	.word	0x0800d221
 800d280:	0800d2cf 	.word	0x0800d2cf
 800d284:	0800d221 	.word	0x0800d221
 800d288:	0800d221 	.word	0x0800d221
 800d28c:	0800d367 	.word	0x0800d367
 800d290:	6833      	ldr	r3, [r6, #0]
 800d292:	1d1a      	adds	r2, r3, #4
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	6032      	str	r2, [r6, #0]
 800d298:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d29c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	e09d      	b.n	800d3e0 <_printf_i+0x1e8>
 800d2a4:	6833      	ldr	r3, [r6, #0]
 800d2a6:	6820      	ldr	r0, [r4, #0]
 800d2a8:	1d19      	adds	r1, r3, #4
 800d2aa:	6031      	str	r1, [r6, #0]
 800d2ac:	0606      	lsls	r6, r0, #24
 800d2ae:	d501      	bpl.n	800d2b4 <_printf_i+0xbc>
 800d2b0:	681d      	ldr	r5, [r3, #0]
 800d2b2:	e003      	b.n	800d2bc <_printf_i+0xc4>
 800d2b4:	0645      	lsls	r5, r0, #25
 800d2b6:	d5fb      	bpl.n	800d2b0 <_printf_i+0xb8>
 800d2b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d2bc:	2d00      	cmp	r5, #0
 800d2be:	da03      	bge.n	800d2c8 <_printf_i+0xd0>
 800d2c0:	232d      	movs	r3, #45	@ 0x2d
 800d2c2:	426d      	negs	r5, r5
 800d2c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d2c8:	4859      	ldr	r0, [pc, #356]	@ (800d430 <_printf_i+0x238>)
 800d2ca:	230a      	movs	r3, #10
 800d2cc:	e011      	b.n	800d2f2 <_printf_i+0xfa>
 800d2ce:	6821      	ldr	r1, [r4, #0]
 800d2d0:	6833      	ldr	r3, [r6, #0]
 800d2d2:	0608      	lsls	r0, r1, #24
 800d2d4:	f853 5b04 	ldr.w	r5, [r3], #4
 800d2d8:	d402      	bmi.n	800d2e0 <_printf_i+0xe8>
 800d2da:	0649      	lsls	r1, r1, #25
 800d2dc:	bf48      	it	mi
 800d2de:	b2ad      	uxthmi	r5, r5
 800d2e0:	2f6f      	cmp	r7, #111	@ 0x6f
 800d2e2:	4853      	ldr	r0, [pc, #332]	@ (800d430 <_printf_i+0x238>)
 800d2e4:	6033      	str	r3, [r6, #0]
 800d2e6:	bf14      	ite	ne
 800d2e8:	230a      	movne	r3, #10
 800d2ea:	2308      	moveq	r3, #8
 800d2ec:	2100      	movs	r1, #0
 800d2ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d2f2:	6866      	ldr	r6, [r4, #4]
 800d2f4:	60a6      	str	r6, [r4, #8]
 800d2f6:	2e00      	cmp	r6, #0
 800d2f8:	bfa2      	ittt	ge
 800d2fa:	6821      	ldrge	r1, [r4, #0]
 800d2fc:	f021 0104 	bicge.w	r1, r1, #4
 800d300:	6021      	strge	r1, [r4, #0]
 800d302:	b90d      	cbnz	r5, 800d308 <_printf_i+0x110>
 800d304:	2e00      	cmp	r6, #0
 800d306:	d04b      	beq.n	800d3a0 <_printf_i+0x1a8>
 800d308:	4616      	mov	r6, r2
 800d30a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d30e:	fb03 5711 	mls	r7, r3, r1, r5
 800d312:	5dc7      	ldrb	r7, [r0, r7]
 800d314:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d318:	462f      	mov	r7, r5
 800d31a:	42bb      	cmp	r3, r7
 800d31c:	460d      	mov	r5, r1
 800d31e:	d9f4      	bls.n	800d30a <_printf_i+0x112>
 800d320:	2b08      	cmp	r3, #8
 800d322:	d10b      	bne.n	800d33c <_printf_i+0x144>
 800d324:	6823      	ldr	r3, [r4, #0]
 800d326:	07df      	lsls	r7, r3, #31
 800d328:	d508      	bpl.n	800d33c <_printf_i+0x144>
 800d32a:	6923      	ldr	r3, [r4, #16]
 800d32c:	6861      	ldr	r1, [r4, #4]
 800d32e:	4299      	cmp	r1, r3
 800d330:	bfde      	ittt	le
 800d332:	2330      	movle	r3, #48	@ 0x30
 800d334:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d338:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d33c:	1b92      	subs	r2, r2, r6
 800d33e:	6122      	str	r2, [r4, #16]
 800d340:	f8cd a000 	str.w	sl, [sp]
 800d344:	464b      	mov	r3, r9
 800d346:	aa03      	add	r2, sp, #12
 800d348:	4621      	mov	r1, r4
 800d34a:	4640      	mov	r0, r8
 800d34c:	f7ff fee6 	bl	800d11c <_printf_common>
 800d350:	3001      	adds	r0, #1
 800d352:	d14a      	bne.n	800d3ea <_printf_i+0x1f2>
 800d354:	f04f 30ff 	mov.w	r0, #4294967295
 800d358:	b004      	add	sp, #16
 800d35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d35e:	6823      	ldr	r3, [r4, #0]
 800d360:	f043 0320 	orr.w	r3, r3, #32
 800d364:	6023      	str	r3, [r4, #0]
 800d366:	4833      	ldr	r0, [pc, #204]	@ (800d434 <_printf_i+0x23c>)
 800d368:	2778      	movs	r7, #120	@ 0x78
 800d36a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d36e:	6823      	ldr	r3, [r4, #0]
 800d370:	6831      	ldr	r1, [r6, #0]
 800d372:	061f      	lsls	r7, r3, #24
 800d374:	f851 5b04 	ldr.w	r5, [r1], #4
 800d378:	d402      	bmi.n	800d380 <_printf_i+0x188>
 800d37a:	065f      	lsls	r7, r3, #25
 800d37c:	bf48      	it	mi
 800d37e:	b2ad      	uxthmi	r5, r5
 800d380:	6031      	str	r1, [r6, #0]
 800d382:	07d9      	lsls	r1, r3, #31
 800d384:	bf44      	itt	mi
 800d386:	f043 0320 	orrmi.w	r3, r3, #32
 800d38a:	6023      	strmi	r3, [r4, #0]
 800d38c:	b11d      	cbz	r5, 800d396 <_printf_i+0x19e>
 800d38e:	2310      	movs	r3, #16
 800d390:	e7ac      	b.n	800d2ec <_printf_i+0xf4>
 800d392:	4827      	ldr	r0, [pc, #156]	@ (800d430 <_printf_i+0x238>)
 800d394:	e7e9      	b.n	800d36a <_printf_i+0x172>
 800d396:	6823      	ldr	r3, [r4, #0]
 800d398:	f023 0320 	bic.w	r3, r3, #32
 800d39c:	6023      	str	r3, [r4, #0]
 800d39e:	e7f6      	b.n	800d38e <_printf_i+0x196>
 800d3a0:	4616      	mov	r6, r2
 800d3a2:	e7bd      	b.n	800d320 <_printf_i+0x128>
 800d3a4:	6833      	ldr	r3, [r6, #0]
 800d3a6:	6825      	ldr	r5, [r4, #0]
 800d3a8:	6961      	ldr	r1, [r4, #20]
 800d3aa:	1d18      	adds	r0, r3, #4
 800d3ac:	6030      	str	r0, [r6, #0]
 800d3ae:	062e      	lsls	r6, r5, #24
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	d501      	bpl.n	800d3b8 <_printf_i+0x1c0>
 800d3b4:	6019      	str	r1, [r3, #0]
 800d3b6:	e002      	b.n	800d3be <_printf_i+0x1c6>
 800d3b8:	0668      	lsls	r0, r5, #25
 800d3ba:	d5fb      	bpl.n	800d3b4 <_printf_i+0x1bc>
 800d3bc:	8019      	strh	r1, [r3, #0]
 800d3be:	2300      	movs	r3, #0
 800d3c0:	6123      	str	r3, [r4, #16]
 800d3c2:	4616      	mov	r6, r2
 800d3c4:	e7bc      	b.n	800d340 <_printf_i+0x148>
 800d3c6:	6833      	ldr	r3, [r6, #0]
 800d3c8:	1d1a      	adds	r2, r3, #4
 800d3ca:	6032      	str	r2, [r6, #0]
 800d3cc:	681e      	ldr	r6, [r3, #0]
 800d3ce:	6862      	ldr	r2, [r4, #4]
 800d3d0:	2100      	movs	r1, #0
 800d3d2:	4630      	mov	r0, r6
 800d3d4:	f7f2 fefc 	bl	80001d0 <memchr>
 800d3d8:	b108      	cbz	r0, 800d3de <_printf_i+0x1e6>
 800d3da:	1b80      	subs	r0, r0, r6
 800d3dc:	6060      	str	r0, [r4, #4]
 800d3de:	6863      	ldr	r3, [r4, #4]
 800d3e0:	6123      	str	r3, [r4, #16]
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d3e8:	e7aa      	b.n	800d340 <_printf_i+0x148>
 800d3ea:	6923      	ldr	r3, [r4, #16]
 800d3ec:	4632      	mov	r2, r6
 800d3ee:	4649      	mov	r1, r9
 800d3f0:	4640      	mov	r0, r8
 800d3f2:	47d0      	blx	sl
 800d3f4:	3001      	adds	r0, #1
 800d3f6:	d0ad      	beq.n	800d354 <_printf_i+0x15c>
 800d3f8:	6823      	ldr	r3, [r4, #0]
 800d3fa:	079b      	lsls	r3, r3, #30
 800d3fc:	d413      	bmi.n	800d426 <_printf_i+0x22e>
 800d3fe:	68e0      	ldr	r0, [r4, #12]
 800d400:	9b03      	ldr	r3, [sp, #12]
 800d402:	4298      	cmp	r0, r3
 800d404:	bfb8      	it	lt
 800d406:	4618      	movlt	r0, r3
 800d408:	e7a6      	b.n	800d358 <_printf_i+0x160>
 800d40a:	2301      	movs	r3, #1
 800d40c:	4632      	mov	r2, r6
 800d40e:	4649      	mov	r1, r9
 800d410:	4640      	mov	r0, r8
 800d412:	47d0      	blx	sl
 800d414:	3001      	adds	r0, #1
 800d416:	d09d      	beq.n	800d354 <_printf_i+0x15c>
 800d418:	3501      	adds	r5, #1
 800d41a:	68e3      	ldr	r3, [r4, #12]
 800d41c:	9903      	ldr	r1, [sp, #12]
 800d41e:	1a5b      	subs	r3, r3, r1
 800d420:	42ab      	cmp	r3, r5
 800d422:	dcf2      	bgt.n	800d40a <_printf_i+0x212>
 800d424:	e7eb      	b.n	800d3fe <_printf_i+0x206>
 800d426:	2500      	movs	r5, #0
 800d428:	f104 0619 	add.w	r6, r4, #25
 800d42c:	e7f5      	b.n	800d41a <_printf_i+0x222>
 800d42e:	bf00      	nop
 800d430:	080117da 	.word	0x080117da
 800d434:	080117eb 	.word	0x080117eb

0800d438 <_scanf_float>:
 800d438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d43c:	b087      	sub	sp, #28
 800d43e:	4617      	mov	r7, r2
 800d440:	9303      	str	r3, [sp, #12]
 800d442:	688b      	ldr	r3, [r1, #8]
 800d444:	1e5a      	subs	r2, r3, #1
 800d446:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d44a:	bf81      	itttt	hi
 800d44c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d450:	eb03 0b05 	addhi.w	fp, r3, r5
 800d454:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d458:	608b      	strhi	r3, [r1, #8]
 800d45a:	680b      	ldr	r3, [r1, #0]
 800d45c:	460a      	mov	r2, r1
 800d45e:	f04f 0500 	mov.w	r5, #0
 800d462:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d466:	f842 3b1c 	str.w	r3, [r2], #28
 800d46a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d46e:	4680      	mov	r8, r0
 800d470:	460c      	mov	r4, r1
 800d472:	bf98      	it	ls
 800d474:	f04f 0b00 	movls.w	fp, #0
 800d478:	9201      	str	r2, [sp, #4]
 800d47a:	4616      	mov	r6, r2
 800d47c:	46aa      	mov	sl, r5
 800d47e:	46a9      	mov	r9, r5
 800d480:	9502      	str	r5, [sp, #8]
 800d482:	68a2      	ldr	r2, [r4, #8]
 800d484:	b152      	cbz	r2, 800d49c <_scanf_float+0x64>
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	781b      	ldrb	r3, [r3, #0]
 800d48a:	2b4e      	cmp	r3, #78	@ 0x4e
 800d48c:	d864      	bhi.n	800d558 <_scanf_float+0x120>
 800d48e:	2b40      	cmp	r3, #64	@ 0x40
 800d490:	d83c      	bhi.n	800d50c <_scanf_float+0xd4>
 800d492:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d496:	b2c8      	uxtb	r0, r1
 800d498:	280e      	cmp	r0, #14
 800d49a:	d93a      	bls.n	800d512 <_scanf_float+0xda>
 800d49c:	f1b9 0f00 	cmp.w	r9, #0
 800d4a0:	d003      	beq.n	800d4aa <_scanf_float+0x72>
 800d4a2:	6823      	ldr	r3, [r4, #0]
 800d4a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d4a8:	6023      	str	r3, [r4, #0]
 800d4aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d4ae:	f1ba 0f01 	cmp.w	sl, #1
 800d4b2:	f200 8117 	bhi.w	800d6e4 <_scanf_float+0x2ac>
 800d4b6:	9b01      	ldr	r3, [sp, #4]
 800d4b8:	429e      	cmp	r6, r3
 800d4ba:	f200 8108 	bhi.w	800d6ce <_scanf_float+0x296>
 800d4be:	2001      	movs	r0, #1
 800d4c0:	b007      	add	sp, #28
 800d4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4c6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d4ca:	2a0d      	cmp	r2, #13
 800d4cc:	d8e6      	bhi.n	800d49c <_scanf_float+0x64>
 800d4ce:	a101      	add	r1, pc, #4	@ (adr r1, 800d4d4 <_scanf_float+0x9c>)
 800d4d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d4d4:	0800d61b 	.word	0x0800d61b
 800d4d8:	0800d49d 	.word	0x0800d49d
 800d4dc:	0800d49d 	.word	0x0800d49d
 800d4e0:	0800d49d 	.word	0x0800d49d
 800d4e4:	0800d67b 	.word	0x0800d67b
 800d4e8:	0800d653 	.word	0x0800d653
 800d4ec:	0800d49d 	.word	0x0800d49d
 800d4f0:	0800d49d 	.word	0x0800d49d
 800d4f4:	0800d629 	.word	0x0800d629
 800d4f8:	0800d49d 	.word	0x0800d49d
 800d4fc:	0800d49d 	.word	0x0800d49d
 800d500:	0800d49d 	.word	0x0800d49d
 800d504:	0800d49d 	.word	0x0800d49d
 800d508:	0800d5e1 	.word	0x0800d5e1
 800d50c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d510:	e7db      	b.n	800d4ca <_scanf_float+0x92>
 800d512:	290e      	cmp	r1, #14
 800d514:	d8c2      	bhi.n	800d49c <_scanf_float+0x64>
 800d516:	a001      	add	r0, pc, #4	@ (adr r0, 800d51c <_scanf_float+0xe4>)
 800d518:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d51c:	0800d5d1 	.word	0x0800d5d1
 800d520:	0800d49d 	.word	0x0800d49d
 800d524:	0800d5d1 	.word	0x0800d5d1
 800d528:	0800d667 	.word	0x0800d667
 800d52c:	0800d49d 	.word	0x0800d49d
 800d530:	0800d579 	.word	0x0800d579
 800d534:	0800d5b7 	.word	0x0800d5b7
 800d538:	0800d5b7 	.word	0x0800d5b7
 800d53c:	0800d5b7 	.word	0x0800d5b7
 800d540:	0800d5b7 	.word	0x0800d5b7
 800d544:	0800d5b7 	.word	0x0800d5b7
 800d548:	0800d5b7 	.word	0x0800d5b7
 800d54c:	0800d5b7 	.word	0x0800d5b7
 800d550:	0800d5b7 	.word	0x0800d5b7
 800d554:	0800d5b7 	.word	0x0800d5b7
 800d558:	2b6e      	cmp	r3, #110	@ 0x6e
 800d55a:	d809      	bhi.n	800d570 <_scanf_float+0x138>
 800d55c:	2b60      	cmp	r3, #96	@ 0x60
 800d55e:	d8b2      	bhi.n	800d4c6 <_scanf_float+0x8e>
 800d560:	2b54      	cmp	r3, #84	@ 0x54
 800d562:	d07b      	beq.n	800d65c <_scanf_float+0x224>
 800d564:	2b59      	cmp	r3, #89	@ 0x59
 800d566:	d199      	bne.n	800d49c <_scanf_float+0x64>
 800d568:	2d07      	cmp	r5, #7
 800d56a:	d197      	bne.n	800d49c <_scanf_float+0x64>
 800d56c:	2508      	movs	r5, #8
 800d56e:	e02c      	b.n	800d5ca <_scanf_float+0x192>
 800d570:	2b74      	cmp	r3, #116	@ 0x74
 800d572:	d073      	beq.n	800d65c <_scanf_float+0x224>
 800d574:	2b79      	cmp	r3, #121	@ 0x79
 800d576:	e7f6      	b.n	800d566 <_scanf_float+0x12e>
 800d578:	6821      	ldr	r1, [r4, #0]
 800d57a:	05c8      	lsls	r0, r1, #23
 800d57c:	d51b      	bpl.n	800d5b6 <_scanf_float+0x17e>
 800d57e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d582:	6021      	str	r1, [r4, #0]
 800d584:	f109 0901 	add.w	r9, r9, #1
 800d588:	f1bb 0f00 	cmp.w	fp, #0
 800d58c:	d003      	beq.n	800d596 <_scanf_float+0x15e>
 800d58e:	3201      	adds	r2, #1
 800d590:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d594:	60a2      	str	r2, [r4, #8]
 800d596:	68a3      	ldr	r3, [r4, #8]
 800d598:	3b01      	subs	r3, #1
 800d59a:	60a3      	str	r3, [r4, #8]
 800d59c:	6923      	ldr	r3, [r4, #16]
 800d59e:	3301      	adds	r3, #1
 800d5a0:	6123      	str	r3, [r4, #16]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	3b01      	subs	r3, #1
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	607b      	str	r3, [r7, #4]
 800d5aa:	f340 8087 	ble.w	800d6bc <_scanf_float+0x284>
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	3301      	adds	r3, #1
 800d5b2:	603b      	str	r3, [r7, #0]
 800d5b4:	e765      	b.n	800d482 <_scanf_float+0x4a>
 800d5b6:	eb1a 0105 	adds.w	r1, sl, r5
 800d5ba:	f47f af6f 	bne.w	800d49c <_scanf_float+0x64>
 800d5be:	6822      	ldr	r2, [r4, #0]
 800d5c0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d5c4:	6022      	str	r2, [r4, #0]
 800d5c6:	460d      	mov	r5, r1
 800d5c8:	468a      	mov	sl, r1
 800d5ca:	f806 3b01 	strb.w	r3, [r6], #1
 800d5ce:	e7e2      	b.n	800d596 <_scanf_float+0x15e>
 800d5d0:	6822      	ldr	r2, [r4, #0]
 800d5d2:	0610      	lsls	r0, r2, #24
 800d5d4:	f57f af62 	bpl.w	800d49c <_scanf_float+0x64>
 800d5d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d5dc:	6022      	str	r2, [r4, #0]
 800d5de:	e7f4      	b.n	800d5ca <_scanf_float+0x192>
 800d5e0:	f1ba 0f00 	cmp.w	sl, #0
 800d5e4:	d10e      	bne.n	800d604 <_scanf_float+0x1cc>
 800d5e6:	f1b9 0f00 	cmp.w	r9, #0
 800d5ea:	d10e      	bne.n	800d60a <_scanf_float+0x1d2>
 800d5ec:	6822      	ldr	r2, [r4, #0]
 800d5ee:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d5f2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d5f6:	d108      	bne.n	800d60a <_scanf_float+0x1d2>
 800d5f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d5fc:	6022      	str	r2, [r4, #0]
 800d5fe:	f04f 0a01 	mov.w	sl, #1
 800d602:	e7e2      	b.n	800d5ca <_scanf_float+0x192>
 800d604:	f1ba 0f02 	cmp.w	sl, #2
 800d608:	d055      	beq.n	800d6b6 <_scanf_float+0x27e>
 800d60a:	2d01      	cmp	r5, #1
 800d60c:	d002      	beq.n	800d614 <_scanf_float+0x1dc>
 800d60e:	2d04      	cmp	r5, #4
 800d610:	f47f af44 	bne.w	800d49c <_scanf_float+0x64>
 800d614:	3501      	adds	r5, #1
 800d616:	b2ed      	uxtb	r5, r5
 800d618:	e7d7      	b.n	800d5ca <_scanf_float+0x192>
 800d61a:	f1ba 0f01 	cmp.w	sl, #1
 800d61e:	f47f af3d 	bne.w	800d49c <_scanf_float+0x64>
 800d622:	f04f 0a02 	mov.w	sl, #2
 800d626:	e7d0      	b.n	800d5ca <_scanf_float+0x192>
 800d628:	b97d      	cbnz	r5, 800d64a <_scanf_float+0x212>
 800d62a:	f1b9 0f00 	cmp.w	r9, #0
 800d62e:	f47f af38 	bne.w	800d4a2 <_scanf_float+0x6a>
 800d632:	6822      	ldr	r2, [r4, #0]
 800d634:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d638:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d63c:	f040 8108 	bne.w	800d850 <_scanf_float+0x418>
 800d640:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d644:	6022      	str	r2, [r4, #0]
 800d646:	2501      	movs	r5, #1
 800d648:	e7bf      	b.n	800d5ca <_scanf_float+0x192>
 800d64a:	2d03      	cmp	r5, #3
 800d64c:	d0e2      	beq.n	800d614 <_scanf_float+0x1dc>
 800d64e:	2d05      	cmp	r5, #5
 800d650:	e7de      	b.n	800d610 <_scanf_float+0x1d8>
 800d652:	2d02      	cmp	r5, #2
 800d654:	f47f af22 	bne.w	800d49c <_scanf_float+0x64>
 800d658:	2503      	movs	r5, #3
 800d65a:	e7b6      	b.n	800d5ca <_scanf_float+0x192>
 800d65c:	2d06      	cmp	r5, #6
 800d65e:	f47f af1d 	bne.w	800d49c <_scanf_float+0x64>
 800d662:	2507      	movs	r5, #7
 800d664:	e7b1      	b.n	800d5ca <_scanf_float+0x192>
 800d666:	6822      	ldr	r2, [r4, #0]
 800d668:	0591      	lsls	r1, r2, #22
 800d66a:	f57f af17 	bpl.w	800d49c <_scanf_float+0x64>
 800d66e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d672:	6022      	str	r2, [r4, #0]
 800d674:	f8cd 9008 	str.w	r9, [sp, #8]
 800d678:	e7a7      	b.n	800d5ca <_scanf_float+0x192>
 800d67a:	6822      	ldr	r2, [r4, #0]
 800d67c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d680:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d684:	d006      	beq.n	800d694 <_scanf_float+0x25c>
 800d686:	0550      	lsls	r0, r2, #21
 800d688:	f57f af08 	bpl.w	800d49c <_scanf_float+0x64>
 800d68c:	f1b9 0f00 	cmp.w	r9, #0
 800d690:	f000 80de 	beq.w	800d850 <_scanf_float+0x418>
 800d694:	0591      	lsls	r1, r2, #22
 800d696:	bf58      	it	pl
 800d698:	9902      	ldrpl	r1, [sp, #8]
 800d69a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d69e:	bf58      	it	pl
 800d6a0:	eba9 0101 	subpl.w	r1, r9, r1
 800d6a4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d6a8:	bf58      	it	pl
 800d6aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d6ae:	6022      	str	r2, [r4, #0]
 800d6b0:	f04f 0900 	mov.w	r9, #0
 800d6b4:	e789      	b.n	800d5ca <_scanf_float+0x192>
 800d6b6:	f04f 0a03 	mov.w	sl, #3
 800d6ba:	e786      	b.n	800d5ca <_scanf_float+0x192>
 800d6bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d6c0:	4639      	mov	r1, r7
 800d6c2:	4640      	mov	r0, r8
 800d6c4:	4798      	blx	r3
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	f43f aedb 	beq.w	800d482 <_scanf_float+0x4a>
 800d6cc:	e6e6      	b.n	800d49c <_scanf_float+0x64>
 800d6ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d6d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d6d6:	463a      	mov	r2, r7
 800d6d8:	4640      	mov	r0, r8
 800d6da:	4798      	blx	r3
 800d6dc:	6923      	ldr	r3, [r4, #16]
 800d6de:	3b01      	subs	r3, #1
 800d6e0:	6123      	str	r3, [r4, #16]
 800d6e2:	e6e8      	b.n	800d4b6 <_scanf_float+0x7e>
 800d6e4:	1e6b      	subs	r3, r5, #1
 800d6e6:	2b06      	cmp	r3, #6
 800d6e8:	d824      	bhi.n	800d734 <_scanf_float+0x2fc>
 800d6ea:	2d02      	cmp	r5, #2
 800d6ec:	d836      	bhi.n	800d75c <_scanf_float+0x324>
 800d6ee:	9b01      	ldr	r3, [sp, #4]
 800d6f0:	429e      	cmp	r6, r3
 800d6f2:	f67f aee4 	bls.w	800d4be <_scanf_float+0x86>
 800d6f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d6fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d6fe:	463a      	mov	r2, r7
 800d700:	4640      	mov	r0, r8
 800d702:	4798      	blx	r3
 800d704:	6923      	ldr	r3, [r4, #16]
 800d706:	3b01      	subs	r3, #1
 800d708:	6123      	str	r3, [r4, #16]
 800d70a:	e7f0      	b.n	800d6ee <_scanf_float+0x2b6>
 800d70c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d710:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d714:	463a      	mov	r2, r7
 800d716:	4640      	mov	r0, r8
 800d718:	4798      	blx	r3
 800d71a:	6923      	ldr	r3, [r4, #16]
 800d71c:	3b01      	subs	r3, #1
 800d71e:	6123      	str	r3, [r4, #16]
 800d720:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d724:	fa5f fa8a 	uxtb.w	sl, sl
 800d728:	f1ba 0f02 	cmp.w	sl, #2
 800d72c:	d1ee      	bne.n	800d70c <_scanf_float+0x2d4>
 800d72e:	3d03      	subs	r5, #3
 800d730:	b2ed      	uxtb	r5, r5
 800d732:	1b76      	subs	r6, r6, r5
 800d734:	6823      	ldr	r3, [r4, #0]
 800d736:	05da      	lsls	r2, r3, #23
 800d738:	d530      	bpl.n	800d79c <_scanf_float+0x364>
 800d73a:	055b      	lsls	r3, r3, #21
 800d73c:	d511      	bpl.n	800d762 <_scanf_float+0x32a>
 800d73e:	9b01      	ldr	r3, [sp, #4]
 800d740:	429e      	cmp	r6, r3
 800d742:	f67f aebc 	bls.w	800d4be <_scanf_float+0x86>
 800d746:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d74a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d74e:	463a      	mov	r2, r7
 800d750:	4640      	mov	r0, r8
 800d752:	4798      	blx	r3
 800d754:	6923      	ldr	r3, [r4, #16]
 800d756:	3b01      	subs	r3, #1
 800d758:	6123      	str	r3, [r4, #16]
 800d75a:	e7f0      	b.n	800d73e <_scanf_float+0x306>
 800d75c:	46aa      	mov	sl, r5
 800d75e:	46b3      	mov	fp, r6
 800d760:	e7de      	b.n	800d720 <_scanf_float+0x2e8>
 800d762:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d766:	6923      	ldr	r3, [r4, #16]
 800d768:	2965      	cmp	r1, #101	@ 0x65
 800d76a:	f103 33ff 	add.w	r3, r3, #4294967295
 800d76e:	f106 35ff 	add.w	r5, r6, #4294967295
 800d772:	6123      	str	r3, [r4, #16]
 800d774:	d00c      	beq.n	800d790 <_scanf_float+0x358>
 800d776:	2945      	cmp	r1, #69	@ 0x45
 800d778:	d00a      	beq.n	800d790 <_scanf_float+0x358>
 800d77a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d77e:	463a      	mov	r2, r7
 800d780:	4640      	mov	r0, r8
 800d782:	4798      	blx	r3
 800d784:	6923      	ldr	r3, [r4, #16]
 800d786:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d78a:	3b01      	subs	r3, #1
 800d78c:	1eb5      	subs	r5, r6, #2
 800d78e:	6123      	str	r3, [r4, #16]
 800d790:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d794:	463a      	mov	r2, r7
 800d796:	4640      	mov	r0, r8
 800d798:	4798      	blx	r3
 800d79a:	462e      	mov	r6, r5
 800d79c:	6822      	ldr	r2, [r4, #0]
 800d79e:	f012 0210 	ands.w	r2, r2, #16
 800d7a2:	d001      	beq.n	800d7a8 <_scanf_float+0x370>
 800d7a4:	2000      	movs	r0, #0
 800d7a6:	e68b      	b.n	800d4c0 <_scanf_float+0x88>
 800d7a8:	7032      	strb	r2, [r6, #0]
 800d7aa:	6823      	ldr	r3, [r4, #0]
 800d7ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d7b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7b4:	d11c      	bne.n	800d7f0 <_scanf_float+0x3b8>
 800d7b6:	9b02      	ldr	r3, [sp, #8]
 800d7b8:	454b      	cmp	r3, r9
 800d7ba:	eba3 0209 	sub.w	r2, r3, r9
 800d7be:	d123      	bne.n	800d808 <_scanf_float+0x3d0>
 800d7c0:	9901      	ldr	r1, [sp, #4]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	4640      	mov	r0, r8
 800d7c6:	f002 fd27 	bl	8010218 <_strtod_r>
 800d7ca:	9b03      	ldr	r3, [sp, #12]
 800d7cc:	6821      	ldr	r1, [r4, #0]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	f011 0f02 	tst.w	r1, #2
 800d7d4:	ec57 6b10 	vmov	r6, r7, d0
 800d7d8:	f103 0204 	add.w	r2, r3, #4
 800d7dc:	d01f      	beq.n	800d81e <_scanf_float+0x3e6>
 800d7de:	9903      	ldr	r1, [sp, #12]
 800d7e0:	600a      	str	r2, [r1, #0]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	e9c3 6700 	strd	r6, r7, [r3]
 800d7e8:	68e3      	ldr	r3, [r4, #12]
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	60e3      	str	r3, [r4, #12]
 800d7ee:	e7d9      	b.n	800d7a4 <_scanf_float+0x36c>
 800d7f0:	9b04      	ldr	r3, [sp, #16]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d0e4      	beq.n	800d7c0 <_scanf_float+0x388>
 800d7f6:	9905      	ldr	r1, [sp, #20]
 800d7f8:	230a      	movs	r3, #10
 800d7fa:	3101      	adds	r1, #1
 800d7fc:	4640      	mov	r0, r8
 800d7fe:	f002 fd8b 	bl	8010318 <_strtol_r>
 800d802:	9b04      	ldr	r3, [sp, #16]
 800d804:	9e05      	ldr	r6, [sp, #20]
 800d806:	1ac2      	subs	r2, r0, r3
 800d808:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d80c:	429e      	cmp	r6, r3
 800d80e:	bf28      	it	cs
 800d810:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d814:	4910      	ldr	r1, [pc, #64]	@ (800d858 <_scanf_float+0x420>)
 800d816:	4630      	mov	r0, r6
 800d818:	f000 f954 	bl	800dac4 <siprintf>
 800d81c:	e7d0      	b.n	800d7c0 <_scanf_float+0x388>
 800d81e:	f011 0f04 	tst.w	r1, #4
 800d822:	9903      	ldr	r1, [sp, #12]
 800d824:	600a      	str	r2, [r1, #0]
 800d826:	d1dc      	bne.n	800d7e2 <_scanf_float+0x3aa>
 800d828:	681d      	ldr	r5, [r3, #0]
 800d82a:	4632      	mov	r2, r6
 800d82c:	463b      	mov	r3, r7
 800d82e:	4630      	mov	r0, r6
 800d830:	4639      	mov	r1, r7
 800d832:	f7f3 f97b 	bl	8000b2c <__aeabi_dcmpun>
 800d836:	b128      	cbz	r0, 800d844 <_scanf_float+0x40c>
 800d838:	4808      	ldr	r0, [pc, #32]	@ (800d85c <_scanf_float+0x424>)
 800d83a:	f000 fac9 	bl	800ddd0 <nanf>
 800d83e:	ed85 0a00 	vstr	s0, [r5]
 800d842:	e7d1      	b.n	800d7e8 <_scanf_float+0x3b0>
 800d844:	4630      	mov	r0, r6
 800d846:	4639      	mov	r1, r7
 800d848:	f7f3 f9ce 	bl	8000be8 <__aeabi_d2f>
 800d84c:	6028      	str	r0, [r5, #0]
 800d84e:	e7cb      	b.n	800d7e8 <_scanf_float+0x3b0>
 800d850:	f04f 0900 	mov.w	r9, #0
 800d854:	e629      	b.n	800d4aa <_scanf_float+0x72>
 800d856:	bf00      	nop
 800d858:	080117fc 	.word	0x080117fc
 800d85c:	0801183c 	.word	0x0801183c

0800d860 <std>:
 800d860:	2300      	movs	r3, #0
 800d862:	b510      	push	{r4, lr}
 800d864:	4604      	mov	r4, r0
 800d866:	e9c0 3300 	strd	r3, r3, [r0]
 800d86a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d86e:	6083      	str	r3, [r0, #8]
 800d870:	8181      	strh	r1, [r0, #12]
 800d872:	6643      	str	r3, [r0, #100]	@ 0x64
 800d874:	81c2      	strh	r2, [r0, #14]
 800d876:	6183      	str	r3, [r0, #24]
 800d878:	4619      	mov	r1, r3
 800d87a:	2208      	movs	r2, #8
 800d87c:	305c      	adds	r0, #92	@ 0x5c
 800d87e:	f000 fa19 	bl	800dcb4 <memset>
 800d882:	4b0d      	ldr	r3, [pc, #52]	@ (800d8b8 <std+0x58>)
 800d884:	6263      	str	r3, [r4, #36]	@ 0x24
 800d886:	4b0d      	ldr	r3, [pc, #52]	@ (800d8bc <std+0x5c>)
 800d888:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d88a:	4b0d      	ldr	r3, [pc, #52]	@ (800d8c0 <std+0x60>)
 800d88c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d88e:	4b0d      	ldr	r3, [pc, #52]	@ (800d8c4 <std+0x64>)
 800d890:	6323      	str	r3, [r4, #48]	@ 0x30
 800d892:	4b0d      	ldr	r3, [pc, #52]	@ (800d8c8 <std+0x68>)
 800d894:	6224      	str	r4, [r4, #32]
 800d896:	429c      	cmp	r4, r3
 800d898:	d006      	beq.n	800d8a8 <std+0x48>
 800d89a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d89e:	4294      	cmp	r4, r2
 800d8a0:	d002      	beq.n	800d8a8 <std+0x48>
 800d8a2:	33d0      	adds	r3, #208	@ 0xd0
 800d8a4:	429c      	cmp	r4, r3
 800d8a6:	d105      	bne.n	800d8b4 <std+0x54>
 800d8a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d8ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8b0:	f000 ba7c 	b.w	800ddac <__retarget_lock_init_recursive>
 800d8b4:	bd10      	pop	{r4, pc}
 800d8b6:	bf00      	nop
 800d8b8:	0800db05 	.word	0x0800db05
 800d8bc:	0800db27 	.word	0x0800db27
 800d8c0:	0800db5f 	.word	0x0800db5f
 800d8c4:	0800db83 	.word	0x0800db83
 800d8c8:	2000381c 	.word	0x2000381c

0800d8cc <stdio_exit_handler>:
 800d8cc:	4a02      	ldr	r2, [pc, #8]	@ (800d8d8 <stdio_exit_handler+0xc>)
 800d8ce:	4903      	ldr	r1, [pc, #12]	@ (800d8dc <stdio_exit_handler+0x10>)
 800d8d0:	4803      	ldr	r0, [pc, #12]	@ (800d8e0 <stdio_exit_handler+0x14>)
 800d8d2:	f000 b869 	b.w	800d9a8 <_fwalk_sglue>
 800d8d6:	bf00      	nop
 800d8d8:	2000005c 	.word	0x2000005c
 800d8dc:	08010959 	.word	0x08010959
 800d8e0:	2000006c 	.word	0x2000006c

0800d8e4 <cleanup_stdio>:
 800d8e4:	6841      	ldr	r1, [r0, #4]
 800d8e6:	4b0c      	ldr	r3, [pc, #48]	@ (800d918 <cleanup_stdio+0x34>)
 800d8e8:	4299      	cmp	r1, r3
 800d8ea:	b510      	push	{r4, lr}
 800d8ec:	4604      	mov	r4, r0
 800d8ee:	d001      	beq.n	800d8f4 <cleanup_stdio+0x10>
 800d8f0:	f003 f832 	bl	8010958 <_fflush_r>
 800d8f4:	68a1      	ldr	r1, [r4, #8]
 800d8f6:	4b09      	ldr	r3, [pc, #36]	@ (800d91c <cleanup_stdio+0x38>)
 800d8f8:	4299      	cmp	r1, r3
 800d8fa:	d002      	beq.n	800d902 <cleanup_stdio+0x1e>
 800d8fc:	4620      	mov	r0, r4
 800d8fe:	f003 f82b 	bl	8010958 <_fflush_r>
 800d902:	68e1      	ldr	r1, [r4, #12]
 800d904:	4b06      	ldr	r3, [pc, #24]	@ (800d920 <cleanup_stdio+0x3c>)
 800d906:	4299      	cmp	r1, r3
 800d908:	d004      	beq.n	800d914 <cleanup_stdio+0x30>
 800d90a:	4620      	mov	r0, r4
 800d90c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d910:	f003 b822 	b.w	8010958 <_fflush_r>
 800d914:	bd10      	pop	{r4, pc}
 800d916:	bf00      	nop
 800d918:	2000381c 	.word	0x2000381c
 800d91c:	20003884 	.word	0x20003884
 800d920:	200038ec 	.word	0x200038ec

0800d924 <global_stdio_init.part.0>:
 800d924:	b510      	push	{r4, lr}
 800d926:	4b0b      	ldr	r3, [pc, #44]	@ (800d954 <global_stdio_init.part.0+0x30>)
 800d928:	4c0b      	ldr	r4, [pc, #44]	@ (800d958 <global_stdio_init.part.0+0x34>)
 800d92a:	4a0c      	ldr	r2, [pc, #48]	@ (800d95c <global_stdio_init.part.0+0x38>)
 800d92c:	601a      	str	r2, [r3, #0]
 800d92e:	4620      	mov	r0, r4
 800d930:	2200      	movs	r2, #0
 800d932:	2104      	movs	r1, #4
 800d934:	f7ff ff94 	bl	800d860 <std>
 800d938:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d93c:	2201      	movs	r2, #1
 800d93e:	2109      	movs	r1, #9
 800d940:	f7ff ff8e 	bl	800d860 <std>
 800d944:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d948:	2202      	movs	r2, #2
 800d94a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d94e:	2112      	movs	r1, #18
 800d950:	f7ff bf86 	b.w	800d860 <std>
 800d954:	20003954 	.word	0x20003954
 800d958:	2000381c 	.word	0x2000381c
 800d95c:	0800d8cd 	.word	0x0800d8cd

0800d960 <__sfp_lock_acquire>:
 800d960:	4801      	ldr	r0, [pc, #4]	@ (800d968 <__sfp_lock_acquire+0x8>)
 800d962:	f000 ba24 	b.w	800ddae <__retarget_lock_acquire_recursive>
 800d966:	bf00      	nop
 800d968:	2000395d 	.word	0x2000395d

0800d96c <__sfp_lock_release>:
 800d96c:	4801      	ldr	r0, [pc, #4]	@ (800d974 <__sfp_lock_release+0x8>)
 800d96e:	f000 ba1f 	b.w	800ddb0 <__retarget_lock_release_recursive>
 800d972:	bf00      	nop
 800d974:	2000395d 	.word	0x2000395d

0800d978 <__sinit>:
 800d978:	b510      	push	{r4, lr}
 800d97a:	4604      	mov	r4, r0
 800d97c:	f7ff fff0 	bl	800d960 <__sfp_lock_acquire>
 800d980:	6a23      	ldr	r3, [r4, #32]
 800d982:	b11b      	cbz	r3, 800d98c <__sinit+0x14>
 800d984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d988:	f7ff bff0 	b.w	800d96c <__sfp_lock_release>
 800d98c:	4b04      	ldr	r3, [pc, #16]	@ (800d9a0 <__sinit+0x28>)
 800d98e:	6223      	str	r3, [r4, #32]
 800d990:	4b04      	ldr	r3, [pc, #16]	@ (800d9a4 <__sinit+0x2c>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d1f5      	bne.n	800d984 <__sinit+0xc>
 800d998:	f7ff ffc4 	bl	800d924 <global_stdio_init.part.0>
 800d99c:	e7f2      	b.n	800d984 <__sinit+0xc>
 800d99e:	bf00      	nop
 800d9a0:	0800d8e5 	.word	0x0800d8e5
 800d9a4:	20003954 	.word	0x20003954

0800d9a8 <_fwalk_sglue>:
 800d9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9ac:	4607      	mov	r7, r0
 800d9ae:	4688      	mov	r8, r1
 800d9b0:	4614      	mov	r4, r2
 800d9b2:	2600      	movs	r6, #0
 800d9b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d9b8:	f1b9 0901 	subs.w	r9, r9, #1
 800d9bc:	d505      	bpl.n	800d9ca <_fwalk_sglue+0x22>
 800d9be:	6824      	ldr	r4, [r4, #0]
 800d9c0:	2c00      	cmp	r4, #0
 800d9c2:	d1f7      	bne.n	800d9b4 <_fwalk_sglue+0xc>
 800d9c4:	4630      	mov	r0, r6
 800d9c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9ca:	89ab      	ldrh	r3, [r5, #12]
 800d9cc:	2b01      	cmp	r3, #1
 800d9ce:	d907      	bls.n	800d9e0 <_fwalk_sglue+0x38>
 800d9d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d9d4:	3301      	adds	r3, #1
 800d9d6:	d003      	beq.n	800d9e0 <_fwalk_sglue+0x38>
 800d9d8:	4629      	mov	r1, r5
 800d9da:	4638      	mov	r0, r7
 800d9dc:	47c0      	blx	r8
 800d9de:	4306      	orrs	r6, r0
 800d9e0:	3568      	adds	r5, #104	@ 0x68
 800d9e2:	e7e9      	b.n	800d9b8 <_fwalk_sglue+0x10>

0800d9e4 <iprintf>:
 800d9e4:	b40f      	push	{r0, r1, r2, r3}
 800d9e6:	b507      	push	{r0, r1, r2, lr}
 800d9e8:	4906      	ldr	r1, [pc, #24]	@ (800da04 <iprintf+0x20>)
 800d9ea:	ab04      	add	r3, sp, #16
 800d9ec:	6808      	ldr	r0, [r1, #0]
 800d9ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9f2:	6881      	ldr	r1, [r0, #8]
 800d9f4:	9301      	str	r3, [sp, #4]
 800d9f6:	f002 fe13 	bl	8010620 <_vfiprintf_r>
 800d9fa:	b003      	add	sp, #12
 800d9fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800da00:	b004      	add	sp, #16
 800da02:	4770      	bx	lr
 800da04:	20000068 	.word	0x20000068

0800da08 <_puts_r>:
 800da08:	6a03      	ldr	r3, [r0, #32]
 800da0a:	b570      	push	{r4, r5, r6, lr}
 800da0c:	6884      	ldr	r4, [r0, #8]
 800da0e:	4605      	mov	r5, r0
 800da10:	460e      	mov	r6, r1
 800da12:	b90b      	cbnz	r3, 800da18 <_puts_r+0x10>
 800da14:	f7ff ffb0 	bl	800d978 <__sinit>
 800da18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800da1a:	07db      	lsls	r3, r3, #31
 800da1c:	d405      	bmi.n	800da2a <_puts_r+0x22>
 800da1e:	89a3      	ldrh	r3, [r4, #12]
 800da20:	0598      	lsls	r0, r3, #22
 800da22:	d402      	bmi.n	800da2a <_puts_r+0x22>
 800da24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da26:	f000 f9c2 	bl	800ddae <__retarget_lock_acquire_recursive>
 800da2a:	89a3      	ldrh	r3, [r4, #12]
 800da2c:	0719      	lsls	r1, r3, #28
 800da2e:	d502      	bpl.n	800da36 <_puts_r+0x2e>
 800da30:	6923      	ldr	r3, [r4, #16]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d135      	bne.n	800daa2 <_puts_r+0x9a>
 800da36:	4621      	mov	r1, r4
 800da38:	4628      	mov	r0, r5
 800da3a:	f000 f8e5 	bl	800dc08 <__swsetup_r>
 800da3e:	b380      	cbz	r0, 800daa2 <_puts_r+0x9a>
 800da40:	f04f 35ff 	mov.w	r5, #4294967295
 800da44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800da46:	07da      	lsls	r2, r3, #31
 800da48:	d405      	bmi.n	800da56 <_puts_r+0x4e>
 800da4a:	89a3      	ldrh	r3, [r4, #12]
 800da4c:	059b      	lsls	r3, r3, #22
 800da4e:	d402      	bmi.n	800da56 <_puts_r+0x4e>
 800da50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da52:	f000 f9ad 	bl	800ddb0 <__retarget_lock_release_recursive>
 800da56:	4628      	mov	r0, r5
 800da58:	bd70      	pop	{r4, r5, r6, pc}
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	da04      	bge.n	800da68 <_puts_r+0x60>
 800da5e:	69a2      	ldr	r2, [r4, #24]
 800da60:	429a      	cmp	r2, r3
 800da62:	dc17      	bgt.n	800da94 <_puts_r+0x8c>
 800da64:	290a      	cmp	r1, #10
 800da66:	d015      	beq.n	800da94 <_puts_r+0x8c>
 800da68:	6823      	ldr	r3, [r4, #0]
 800da6a:	1c5a      	adds	r2, r3, #1
 800da6c:	6022      	str	r2, [r4, #0]
 800da6e:	7019      	strb	r1, [r3, #0]
 800da70:	68a3      	ldr	r3, [r4, #8]
 800da72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800da76:	3b01      	subs	r3, #1
 800da78:	60a3      	str	r3, [r4, #8]
 800da7a:	2900      	cmp	r1, #0
 800da7c:	d1ed      	bne.n	800da5a <_puts_r+0x52>
 800da7e:	2b00      	cmp	r3, #0
 800da80:	da11      	bge.n	800daa6 <_puts_r+0x9e>
 800da82:	4622      	mov	r2, r4
 800da84:	210a      	movs	r1, #10
 800da86:	4628      	mov	r0, r5
 800da88:	f000 f87f 	bl	800db8a <__swbuf_r>
 800da8c:	3001      	adds	r0, #1
 800da8e:	d0d7      	beq.n	800da40 <_puts_r+0x38>
 800da90:	250a      	movs	r5, #10
 800da92:	e7d7      	b.n	800da44 <_puts_r+0x3c>
 800da94:	4622      	mov	r2, r4
 800da96:	4628      	mov	r0, r5
 800da98:	f000 f877 	bl	800db8a <__swbuf_r>
 800da9c:	3001      	adds	r0, #1
 800da9e:	d1e7      	bne.n	800da70 <_puts_r+0x68>
 800daa0:	e7ce      	b.n	800da40 <_puts_r+0x38>
 800daa2:	3e01      	subs	r6, #1
 800daa4:	e7e4      	b.n	800da70 <_puts_r+0x68>
 800daa6:	6823      	ldr	r3, [r4, #0]
 800daa8:	1c5a      	adds	r2, r3, #1
 800daaa:	6022      	str	r2, [r4, #0]
 800daac:	220a      	movs	r2, #10
 800daae:	701a      	strb	r2, [r3, #0]
 800dab0:	e7ee      	b.n	800da90 <_puts_r+0x88>
	...

0800dab4 <puts>:
 800dab4:	4b02      	ldr	r3, [pc, #8]	@ (800dac0 <puts+0xc>)
 800dab6:	4601      	mov	r1, r0
 800dab8:	6818      	ldr	r0, [r3, #0]
 800daba:	f7ff bfa5 	b.w	800da08 <_puts_r>
 800dabe:	bf00      	nop
 800dac0:	20000068 	.word	0x20000068

0800dac4 <siprintf>:
 800dac4:	b40e      	push	{r1, r2, r3}
 800dac6:	b500      	push	{lr}
 800dac8:	b09c      	sub	sp, #112	@ 0x70
 800daca:	ab1d      	add	r3, sp, #116	@ 0x74
 800dacc:	9002      	str	r0, [sp, #8]
 800dace:	9006      	str	r0, [sp, #24]
 800dad0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800dad4:	4809      	ldr	r0, [pc, #36]	@ (800dafc <siprintf+0x38>)
 800dad6:	9107      	str	r1, [sp, #28]
 800dad8:	9104      	str	r1, [sp, #16]
 800dada:	4909      	ldr	r1, [pc, #36]	@ (800db00 <siprintf+0x3c>)
 800dadc:	f853 2b04 	ldr.w	r2, [r3], #4
 800dae0:	9105      	str	r1, [sp, #20]
 800dae2:	6800      	ldr	r0, [r0, #0]
 800dae4:	9301      	str	r3, [sp, #4]
 800dae6:	a902      	add	r1, sp, #8
 800dae8:	f002 fc74 	bl	80103d4 <_svfiprintf_r>
 800daec:	9b02      	ldr	r3, [sp, #8]
 800daee:	2200      	movs	r2, #0
 800daf0:	701a      	strb	r2, [r3, #0]
 800daf2:	b01c      	add	sp, #112	@ 0x70
 800daf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800daf8:	b003      	add	sp, #12
 800dafa:	4770      	bx	lr
 800dafc:	20000068 	.word	0x20000068
 800db00:	ffff0208 	.word	0xffff0208

0800db04 <__sread>:
 800db04:	b510      	push	{r4, lr}
 800db06:	460c      	mov	r4, r1
 800db08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db0c:	f000 f900 	bl	800dd10 <_read_r>
 800db10:	2800      	cmp	r0, #0
 800db12:	bfab      	itete	ge
 800db14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800db16:	89a3      	ldrhlt	r3, [r4, #12]
 800db18:	181b      	addge	r3, r3, r0
 800db1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800db1e:	bfac      	ite	ge
 800db20:	6563      	strge	r3, [r4, #84]	@ 0x54
 800db22:	81a3      	strhlt	r3, [r4, #12]
 800db24:	bd10      	pop	{r4, pc}

0800db26 <__swrite>:
 800db26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db2a:	461f      	mov	r7, r3
 800db2c:	898b      	ldrh	r3, [r1, #12]
 800db2e:	05db      	lsls	r3, r3, #23
 800db30:	4605      	mov	r5, r0
 800db32:	460c      	mov	r4, r1
 800db34:	4616      	mov	r6, r2
 800db36:	d505      	bpl.n	800db44 <__swrite+0x1e>
 800db38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db3c:	2302      	movs	r3, #2
 800db3e:	2200      	movs	r2, #0
 800db40:	f000 f8d4 	bl	800dcec <_lseek_r>
 800db44:	89a3      	ldrh	r3, [r4, #12]
 800db46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800db4e:	81a3      	strh	r3, [r4, #12]
 800db50:	4632      	mov	r2, r6
 800db52:	463b      	mov	r3, r7
 800db54:	4628      	mov	r0, r5
 800db56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db5a:	f000 b8eb 	b.w	800dd34 <_write_r>

0800db5e <__sseek>:
 800db5e:	b510      	push	{r4, lr}
 800db60:	460c      	mov	r4, r1
 800db62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db66:	f000 f8c1 	bl	800dcec <_lseek_r>
 800db6a:	1c43      	adds	r3, r0, #1
 800db6c:	89a3      	ldrh	r3, [r4, #12]
 800db6e:	bf15      	itete	ne
 800db70:	6560      	strne	r0, [r4, #84]	@ 0x54
 800db72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800db76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800db7a:	81a3      	strheq	r3, [r4, #12]
 800db7c:	bf18      	it	ne
 800db7e:	81a3      	strhne	r3, [r4, #12]
 800db80:	bd10      	pop	{r4, pc}

0800db82 <__sclose>:
 800db82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db86:	f000 b8a1 	b.w	800dccc <_close_r>

0800db8a <__swbuf_r>:
 800db8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db8c:	460e      	mov	r6, r1
 800db8e:	4614      	mov	r4, r2
 800db90:	4605      	mov	r5, r0
 800db92:	b118      	cbz	r0, 800db9c <__swbuf_r+0x12>
 800db94:	6a03      	ldr	r3, [r0, #32]
 800db96:	b90b      	cbnz	r3, 800db9c <__swbuf_r+0x12>
 800db98:	f7ff feee 	bl	800d978 <__sinit>
 800db9c:	69a3      	ldr	r3, [r4, #24]
 800db9e:	60a3      	str	r3, [r4, #8]
 800dba0:	89a3      	ldrh	r3, [r4, #12]
 800dba2:	071a      	lsls	r2, r3, #28
 800dba4:	d501      	bpl.n	800dbaa <__swbuf_r+0x20>
 800dba6:	6923      	ldr	r3, [r4, #16]
 800dba8:	b943      	cbnz	r3, 800dbbc <__swbuf_r+0x32>
 800dbaa:	4621      	mov	r1, r4
 800dbac:	4628      	mov	r0, r5
 800dbae:	f000 f82b 	bl	800dc08 <__swsetup_r>
 800dbb2:	b118      	cbz	r0, 800dbbc <__swbuf_r+0x32>
 800dbb4:	f04f 37ff 	mov.w	r7, #4294967295
 800dbb8:	4638      	mov	r0, r7
 800dbba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbbc:	6823      	ldr	r3, [r4, #0]
 800dbbe:	6922      	ldr	r2, [r4, #16]
 800dbc0:	1a98      	subs	r0, r3, r2
 800dbc2:	6963      	ldr	r3, [r4, #20]
 800dbc4:	b2f6      	uxtb	r6, r6
 800dbc6:	4283      	cmp	r3, r0
 800dbc8:	4637      	mov	r7, r6
 800dbca:	dc05      	bgt.n	800dbd8 <__swbuf_r+0x4e>
 800dbcc:	4621      	mov	r1, r4
 800dbce:	4628      	mov	r0, r5
 800dbd0:	f002 fec2 	bl	8010958 <_fflush_r>
 800dbd4:	2800      	cmp	r0, #0
 800dbd6:	d1ed      	bne.n	800dbb4 <__swbuf_r+0x2a>
 800dbd8:	68a3      	ldr	r3, [r4, #8]
 800dbda:	3b01      	subs	r3, #1
 800dbdc:	60a3      	str	r3, [r4, #8]
 800dbde:	6823      	ldr	r3, [r4, #0]
 800dbe0:	1c5a      	adds	r2, r3, #1
 800dbe2:	6022      	str	r2, [r4, #0]
 800dbe4:	701e      	strb	r6, [r3, #0]
 800dbe6:	6962      	ldr	r2, [r4, #20]
 800dbe8:	1c43      	adds	r3, r0, #1
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d004      	beq.n	800dbf8 <__swbuf_r+0x6e>
 800dbee:	89a3      	ldrh	r3, [r4, #12]
 800dbf0:	07db      	lsls	r3, r3, #31
 800dbf2:	d5e1      	bpl.n	800dbb8 <__swbuf_r+0x2e>
 800dbf4:	2e0a      	cmp	r6, #10
 800dbf6:	d1df      	bne.n	800dbb8 <__swbuf_r+0x2e>
 800dbf8:	4621      	mov	r1, r4
 800dbfa:	4628      	mov	r0, r5
 800dbfc:	f002 feac 	bl	8010958 <_fflush_r>
 800dc00:	2800      	cmp	r0, #0
 800dc02:	d0d9      	beq.n	800dbb8 <__swbuf_r+0x2e>
 800dc04:	e7d6      	b.n	800dbb4 <__swbuf_r+0x2a>
	...

0800dc08 <__swsetup_r>:
 800dc08:	b538      	push	{r3, r4, r5, lr}
 800dc0a:	4b29      	ldr	r3, [pc, #164]	@ (800dcb0 <__swsetup_r+0xa8>)
 800dc0c:	4605      	mov	r5, r0
 800dc0e:	6818      	ldr	r0, [r3, #0]
 800dc10:	460c      	mov	r4, r1
 800dc12:	b118      	cbz	r0, 800dc1c <__swsetup_r+0x14>
 800dc14:	6a03      	ldr	r3, [r0, #32]
 800dc16:	b90b      	cbnz	r3, 800dc1c <__swsetup_r+0x14>
 800dc18:	f7ff feae 	bl	800d978 <__sinit>
 800dc1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc20:	0719      	lsls	r1, r3, #28
 800dc22:	d422      	bmi.n	800dc6a <__swsetup_r+0x62>
 800dc24:	06da      	lsls	r2, r3, #27
 800dc26:	d407      	bmi.n	800dc38 <__swsetup_r+0x30>
 800dc28:	2209      	movs	r2, #9
 800dc2a:	602a      	str	r2, [r5, #0]
 800dc2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc30:	81a3      	strh	r3, [r4, #12]
 800dc32:	f04f 30ff 	mov.w	r0, #4294967295
 800dc36:	e033      	b.n	800dca0 <__swsetup_r+0x98>
 800dc38:	0758      	lsls	r0, r3, #29
 800dc3a:	d512      	bpl.n	800dc62 <__swsetup_r+0x5a>
 800dc3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc3e:	b141      	cbz	r1, 800dc52 <__swsetup_r+0x4a>
 800dc40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc44:	4299      	cmp	r1, r3
 800dc46:	d002      	beq.n	800dc4e <__swsetup_r+0x46>
 800dc48:	4628      	mov	r0, r5
 800dc4a:	f000 ff31 	bl	800eab0 <_free_r>
 800dc4e:	2300      	movs	r3, #0
 800dc50:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc52:	89a3      	ldrh	r3, [r4, #12]
 800dc54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dc58:	81a3      	strh	r3, [r4, #12]
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	6063      	str	r3, [r4, #4]
 800dc5e:	6923      	ldr	r3, [r4, #16]
 800dc60:	6023      	str	r3, [r4, #0]
 800dc62:	89a3      	ldrh	r3, [r4, #12]
 800dc64:	f043 0308 	orr.w	r3, r3, #8
 800dc68:	81a3      	strh	r3, [r4, #12]
 800dc6a:	6923      	ldr	r3, [r4, #16]
 800dc6c:	b94b      	cbnz	r3, 800dc82 <__swsetup_r+0x7a>
 800dc6e:	89a3      	ldrh	r3, [r4, #12]
 800dc70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dc74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc78:	d003      	beq.n	800dc82 <__swsetup_r+0x7a>
 800dc7a:	4621      	mov	r1, r4
 800dc7c:	4628      	mov	r0, r5
 800dc7e:	f002 fecb 	bl	8010a18 <__smakebuf_r>
 800dc82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc86:	f013 0201 	ands.w	r2, r3, #1
 800dc8a:	d00a      	beq.n	800dca2 <__swsetup_r+0x9a>
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	60a2      	str	r2, [r4, #8]
 800dc90:	6962      	ldr	r2, [r4, #20]
 800dc92:	4252      	negs	r2, r2
 800dc94:	61a2      	str	r2, [r4, #24]
 800dc96:	6922      	ldr	r2, [r4, #16]
 800dc98:	b942      	cbnz	r2, 800dcac <__swsetup_r+0xa4>
 800dc9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dc9e:	d1c5      	bne.n	800dc2c <__swsetup_r+0x24>
 800dca0:	bd38      	pop	{r3, r4, r5, pc}
 800dca2:	0799      	lsls	r1, r3, #30
 800dca4:	bf58      	it	pl
 800dca6:	6962      	ldrpl	r2, [r4, #20]
 800dca8:	60a2      	str	r2, [r4, #8]
 800dcaa:	e7f4      	b.n	800dc96 <__swsetup_r+0x8e>
 800dcac:	2000      	movs	r0, #0
 800dcae:	e7f7      	b.n	800dca0 <__swsetup_r+0x98>
 800dcb0:	20000068 	.word	0x20000068

0800dcb4 <memset>:
 800dcb4:	4402      	add	r2, r0
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	d100      	bne.n	800dcbe <memset+0xa>
 800dcbc:	4770      	bx	lr
 800dcbe:	f803 1b01 	strb.w	r1, [r3], #1
 800dcc2:	e7f9      	b.n	800dcb8 <memset+0x4>

0800dcc4 <_localeconv_r>:
 800dcc4:	4800      	ldr	r0, [pc, #0]	@ (800dcc8 <_localeconv_r+0x4>)
 800dcc6:	4770      	bx	lr
 800dcc8:	200001a8 	.word	0x200001a8

0800dccc <_close_r>:
 800dccc:	b538      	push	{r3, r4, r5, lr}
 800dcce:	4d06      	ldr	r5, [pc, #24]	@ (800dce8 <_close_r+0x1c>)
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	4604      	mov	r4, r0
 800dcd4:	4608      	mov	r0, r1
 800dcd6:	602b      	str	r3, [r5, #0]
 800dcd8:	f7f4 fe68 	bl	80029ac <_close>
 800dcdc:	1c43      	adds	r3, r0, #1
 800dcde:	d102      	bne.n	800dce6 <_close_r+0x1a>
 800dce0:	682b      	ldr	r3, [r5, #0]
 800dce2:	b103      	cbz	r3, 800dce6 <_close_r+0x1a>
 800dce4:	6023      	str	r3, [r4, #0]
 800dce6:	bd38      	pop	{r3, r4, r5, pc}
 800dce8:	20003958 	.word	0x20003958

0800dcec <_lseek_r>:
 800dcec:	b538      	push	{r3, r4, r5, lr}
 800dcee:	4d07      	ldr	r5, [pc, #28]	@ (800dd0c <_lseek_r+0x20>)
 800dcf0:	4604      	mov	r4, r0
 800dcf2:	4608      	mov	r0, r1
 800dcf4:	4611      	mov	r1, r2
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	602a      	str	r2, [r5, #0]
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	f7f4 fe7d 	bl	80029fa <_lseek>
 800dd00:	1c43      	adds	r3, r0, #1
 800dd02:	d102      	bne.n	800dd0a <_lseek_r+0x1e>
 800dd04:	682b      	ldr	r3, [r5, #0]
 800dd06:	b103      	cbz	r3, 800dd0a <_lseek_r+0x1e>
 800dd08:	6023      	str	r3, [r4, #0]
 800dd0a:	bd38      	pop	{r3, r4, r5, pc}
 800dd0c:	20003958 	.word	0x20003958

0800dd10 <_read_r>:
 800dd10:	b538      	push	{r3, r4, r5, lr}
 800dd12:	4d07      	ldr	r5, [pc, #28]	@ (800dd30 <_read_r+0x20>)
 800dd14:	4604      	mov	r4, r0
 800dd16:	4608      	mov	r0, r1
 800dd18:	4611      	mov	r1, r2
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	602a      	str	r2, [r5, #0]
 800dd1e:	461a      	mov	r2, r3
 800dd20:	f7f4 fe0b 	bl	800293a <_read>
 800dd24:	1c43      	adds	r3, r0, #1
 800dd26:	d102      	bne.n	800dd2e <_read_r+0x1e>
 800dd28:	682b      	ldr	r3, [r5, #0]
 800dd2a:	b103      	cbz	r3, 800dd2e <_read_r+0x1e>
 800dd2c:	6023      	str	r3, [r4, #0]
 800dd2e:	bd38      	pop	{r3, r4, r5, pc}
 800dd30:	20003958 	.word	0x20003958

0800dd34 <_write_r>:
 800dd34:	b538      	push	{r3, r4, r5, lr}
 800dd36:	4d07      	ldr	r5, [pc, #28]	@ (800dd54 <_write_r+0x20>)
 800dd38:	4604      	mov	r4, r0
 800dd3a:	4608      	mov	r0, r1
 800dd3c:	4611      	mov	r1, r2
 800dd3e:	2200      	movs	r2, #0
 800dd40:	602a      	str	r2, [r5, #0]
 800dd42:	461a      	mov	r2, r3
 800dd44:	f7f4 fe16 	bl	8002974 <_write>
 800dd48:	1c43      	adds	r3, r0, #1
 800dd4a:	d102      	bne.n	800dd52 <_write_r+0x1e>
 800dd4c:	682b      	ldr	r3, [r5, #0]
 800dd4e:	b103      	cbz	r3, 800dd52 <_write_r+0x1e>
 800dd50:	6023      	str	r3, [r4, #0]
 800dd52:	bd38      	pop	{r3, r4, r5, pc}
 800dd54:	20003958 	.word	0x20003958

0800dd58 <__errno>:
 800dd58:	4b01      	ldr	r3, [pc, #4]	@ (800dd60 <__errno+0x8>)
 800dd5a:	6818      	ldr	r0, [r3, #0]
 800dd5c:	4770      	bx	lr
 800dd5e:	bf00      	nop
 800dd60:	20000068 	.word	0x20000068

0800dd64 <__libc_init_array>:
 800dd64:	b570      	push	{r4, r5, r6, lr}
 800dd66:	4d0d      	ldr	r5, [pc, #52]	@ (800dd9c <__libc_init_array+0x38>)
 800dd68:	4c0d      	ldr	r4, [pc, #52]	@ (800dda0 <__libc_init_array+0x3c>)
 800dd6a:	1b64      	subs	r4, r4, r5
 800dd6c:	10a4      	asrs	r4, r4, #2
 800dd6e:	2600      	movs	r6, #0
 800dd70:	42a6      	cmp	r6, r4
 800dd72:	d109      	bne.n	800dd88 <__libc_init_array+0x24>
 800dd74:	4d0b      	ldr	r5, [pc, #44]	@ (800dda4 <__libc_init_array+0x40>)
 800dd76:	4c0c      	ldr	r4, [pc, #48]	@ (800dda8 <__libc_init_array+0x44>)
 800dd78:	f003 fade 	bl	8011338 <_init>
 800dd7c:	1b64      	subs	r4, r4, r5
 800dd7e:	10a4      	asrs	r4, r4, #2
 800dd80:	2600      	movs	r6, #0
 800dd82:	42a6      	cmp	r6, r4
 800dd84:	d105      	bne.n	800dd92 <__libc_init_array+0x2e>
 800dd86:	bd70      	pop	{r4, r5, r6, pc}
 800dd88:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd8c:	4798      	blx	r3
 800dd8e:	3601      	adds	r6, #1
 800dd90:	e7ee      	b.n	800dd70 <__libc_init_array+0xc>
 800dd92:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd96:	4798      	blx	r3
 800dd98:	3601      	adds	r6, #1
 800dd9a:	e7f2      	b.n	800dd82 <__libc_init_array+0x1e>
 800dd9c:	08011bfc 	.word	0x08011bfc
 800dda0:	08011bfc 	.word	0x08011bfc
 800dda4:	08011bfc 	.word	0x08011bfc
 800dda8:	08011c00 	.word	0x08011c00

0800ddac <__retarget_lock_init_recursive>:
 800ddac:	4770      	bx	lr

0800ddae <__retarget_lock_acquire_recursive>:
 800ddae:	4770      	bx	lr

0800ddb0 <__retarget_lock_release_recursive>:
 800ddb0:	4770      	bx	lr

0800ddb2 <memcpy>:
 800ddb2:	440a      	add	r2, r1
 800ddb4:	4291      	cmp	r1, r2
 800ddb6:	f100 33ff 	add.w	r3, r0, #4294967295
 800ddba:	d100      	bne.n	800ddbe <memcpy+0xc>
 800ddbc:	4770      	bx	lr
 800ddbe:	b510      	push	{r4, lr}
 800ddc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ddc8:	4291      	cmp	r1, r2
 800ddca:	d1f9      	bne.n	800ddc0 <memcpy+0xe>
 800ddcc:	bd10      	pop	{r4, pc}
	...

0800ddd0 <nanf>:
 800ddd0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ddd8 <nanf+0x8>
 800ddd4:	4770      	bx	lr
 800ddd6:	bf00      	nop
 800ddd8:	7fc00000 	.word	0x7fc00000

0800dddc <__assert_func>:
 800dddc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ddde:	4614      	mov	r4, r2
 800dde0:	461a      	mov	r2, r3
 800dde2:	4b09      	ldr	r3, [pc, #36]	@ (800de08 <__assert_func+0x2c>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	4605      	mov	r5, r0
 800dde8:	68d8      	ldr	r0, [r3, #12]
 800ddea:	b954      	cbnz	r4, 800de02 <__assert_func+0x26>
 800ddec:	4b07      	ldr	r3, [pc, #28]	@ (800de0c <__assert_func+0x30>)
 800ddee:	461c      	mov	r4, r3
 800ddf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ddf4:	9100      	str	r1, [sp, #0]
 800ddf6:	462b      	mov	r3, r5
 800ddf8:	4905      	ldr	r1, [pc, #20]	@ (800de10 <__assert_func+0x34>)
 800ddfa:	f002 fdd5 	bl	80109a8 <fiprintf>
 800ddfe:	f002 feaf 	bl	8010b60 <abort>
 800de02:	4b04      	ldr	r3, [pc, #16]	@ (800de14 <__assert_func+0x38>)
 800de04:	e7f4      	b.n	800ddf0 <__assert_func+0x14>
 800de06:	bf00      	nop
 800de08:	20000068 	.word	0x20000068
 800de0c:	0801183c 	.word	0x0801183c
 800de10:	0801180e 	.word	0x0801180e
 800de14:	08011801 	.word	0x08011801

0800de18 <quorem>:
 800de18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de1c:	6903      	ldr	r3, [r0, #16]
 800de1e:	690c      	ldr	r4, [r1, #16]
 800de20:	42a3      	cmp	r3, r4
 800de22:	4607      	mov	r7, r0
 800de24:	db7e      	blt.n	800df24 <quorem+0x10c>
 800de26:	3c01      	subs	r4, #1
 800de28:	f101 0814 	add.w	r8, r1, #20
 800de2c:	00a3      	lsls	r3, r4, #2
 800de2e:	f100 0514 	add.w	r5, r0, #20
 800de32:	9300      	str	r3, [sp, #0]
 800de34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de38:	9301      	str	r3, [sp, #4]
 800de3a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800de3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de42:	3301      	adds	r3, #1
 800de44:	429a      	cmp	r2, r3
 800de46:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800de4a:	fbb2 f6f3 	udiv	r6, r2, r3
 800de4e:	d32e      	bcc.n	800deae <quorem+0x96>
 800de50:	f04f 0a00 	mov.w	sl, #0
 800de54:	46c4      	mov	ip, r8
 800de56:	46ae      	mov	lr, r5
 800de58:	46d3      	mov	fp, sl
 800de5a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800de5e:	b298      	uxth	r0, r3
 800de60:	fb06 a000 	mla	r0, r6, r0, sl
 800de64:	0c02      	lsrs	r2, r0, #16
 800de66:	0c1b      	lsrs	r3, r3, #16
 800de68:	fb06 2303 	mla	r3, r6, r3, r2
 800de6c:	f8de 2000 	ldr.w	r2, [lr]
 800de70:	b280      	uxth	r0, r0
 800de72:	b292      	uxth	r2, r2
 800de74:	1a12      	subs	r2, r2, r0
 800de76:	445a      	add	r2, fp
 800de78:	f8de 0000 	ldr.w	r0, [lr]
 800de7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de80:	b29b      	uxth	r3, r3
 800de82:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800de86:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800de8a:	b292      	uxth	r2, r2
 800de8c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800de90:	45e1      	cmp	r9, ip
 800de92:	f84e 2b04 	str.w	r2, [lr], #4
 800de96:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800de9a:	d2de      	bcs.n	800de5a <quorem+0x42>
 800de9c:	9b00      	ldr	r3, [sp, #0]
 800de9e:	58eb      	ldr	r3, [r5, r3]
 800dea0:	b92b      	cbnz	r3, 800deae <quorem+0x96>
 800dea2:	9b01      	ldr	r3, [sp, #4]
 800dea4:	3b04      	subs	r3, #4
 800dea6:	429d      	cmp	r5, r3
 800dea8:	461a      	mov	r2, r3
 800deaa:	d32f      	bcc.n	800df0c <quorem+0xf4>
 800deac:	613c      	str	r4, [r7, #16]
 800deae:	4638      	mov	r0, r7
 800deb0:	f001 f9c2 	bl	800f238 <__mcmp>
 800deb4:	2800      	cmp	r0, #0
 800deb6:	db25      	blt.n	800df04 <quorem+0xec>
 800deb8:	4629      	mov	r1, r5
 800deba:	2000      	movs	r0, #0
 800debc:	f858 2b04 	ldr.w	r2, [r8], #4
 800dec0:	f8d1 c000 	ldr.w	ip, [r1]
 800dec4:	fa1f fe82 	uxth.w	lr, r2
 800dec8:	fa1f f38c 	uxth.w	r3, ip
 800decc:	eba3 030e 	sub.w	r3, r3, lr
 800ded0:	4403      	add	r3, r0
 800ded2:	0c12      	lsrs	r2, r2, #16
 800ded4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ded8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dedc:	b29b      	uxth	r3, r3
 800dede:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dee2:	45c1      	cmp	r9, r8
 800dee4:	f841 3b04 	str.w	r3, [r1], #4
 800dee8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800deec:	d2e6      	bcs.n	800debc <quorem+0xa4>
 800deee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800def2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800def6:	b922      	cbnz	r2, 800df02 <quorem+0xea>
 800def8:	3b04      	subs	r3, #4
 800defa:	429d      	cmp	r5, r3
 800defc:	461a      	mov	r2, r3
 800defe:	d30b      	bcc.n	800df18 <quorem+0x100>
 800df00:	613c      	str	r4, [r7, #16]
 800df02:	3601      	adds	r6, #1
 800df04:	4630      	mov	r0, r6
 800df06:	b003      	add	sp, #12
 800df08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df0c:	6812      	ldr	r2, [r2, #0]
 800df0e:	3b04      	subs	r3, #4
 800df10:	2a00      	cmp	r2, #0
 800df12:	d1cb      	bne.n	800deac <quorem+0x94>
 800df14:	3c01      	subs	r4, #1
 800df16:	e7c6      	b.n	800dea6 <quorem+0x8e>
 800df18:	6812      	ldr	r2, [r2, #0]
 800df1a:	3b04      	subs	r3, #4
 800df1c:	2a00      	cmp	r2, #0
 800df1e:	d1ef      	bne.n	800df00 <quorem+0xe8>
 800df20:	3c01      	subs	r4, #1
 800df22:	e7ea      	b.n	800defa <quorem+0xe2>
 800df24:	2000      	movs	r0, #0
 800df26:	e7ee      	b.n	800df06 <quorem+0xee>

0800df28 <_dtoa_r>:
 800df28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df2c:	69c7      	ldr	r7, [r0, #28]
 800df2e:	b099      	sub	sp, #100	@ 0x64
 800df30:	ed8d 0b02 	vstr	d0, [sp, #8]
 800df34:	ec55 4b10 	vmov	r4, r5, d0
 800df38:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800df3a:	9109      	str	r1, [sp, #36]	@ 0x24
 800df3c:	4683      	mov	fp, r0
 800df3e:	920e      	str	r2, [sp, #56]	@ 0x38
 800df40:	9313      	str	r3, [sp, #76]	@ 0x4c
 800df42:	b97f      	cbnz	r7, 800df64 <_dtoa_r+0x3c>
 800df44:	2010      	movs	r0, #16
 800df46:	f000 fdfd 	bl	800eb44 <malloc>
 800df4a:	4602      	mov	r2, r0
 800df4c:	f8cb 001c 	str.w	r0, [fp, #28]
 800df50:	b920      	cbnz	r0, 800df5c <_dtoa_r+0x34>
 800df52:	4ba7      	ldr	r3, [pc, #668]	@ (800e1f0 <_dtoa_r+0x2c8>)
 800df54:	21ef      	movs	r1, #239	@ 0xef
 800df56:	48a7      	ldr	r0, [pc, #668]	@ (800e1f4 <_dtoa_r+0x2cc>)
 800df58:	f7ff ff40 	bl	800dddc <__assert_func>
 800df5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800df60:	6007      	str	r7, [r0, #0]
 800df62:	60c7      	str	r7, [r0, #12]
 800df64:	f8db 301c 	ldr.w	r3, [fp, #28]
 800df68:	6819      	ldr	r1, [r3, #0]
 800df6a:	b159      	cbz	r1, 800df84 <_dtoa_r+0x5c>
 800df6c:	685a      	ldr	r2, [r3, #4]
 800df6e:	604a      	str	r2, [r1, #4]
 800df70:	2301      	movs	r3, #1
 800df72:	4093      	lsls	r3, r2
 800df74:	608b      	str	r3, [r1, #8]
 800df76:	4658      	mov	r0, fp
 800df78:	f000 feda 	bl	800ed30 <_Bfree>
 800df7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800df80:	2200      	movs	r2, #0
 800df82:	601a      	str	r2, [r3, #0]
 800df84:	1e2b      	subs	r3, r5, #0
 800df86:	bfb9      	ittee	lt
 800df88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800df8c:	9303      	strlt	r3, [sp, #12]
 800df8e:	2300      	movge	r3, #0
 800df90:	6033      	strge	r3, [r6, #0]
 800df92:	9f03      	ldr	r7, [sp, #12]
 800df94:	4b98      	ldr	r3, [pc, #608]	@ (800e1f8 <_dtoa_r+0x2d0>)
 800df96:	bfbc      	itt	lt
 800df98:	2201      	movlt	r2, #1
 800df9a:	6032      	strlt	r2, [r6, #0]
 800df9c:	43bb      	bics	r3, r7
 800df9e:	d112      	bne.n	800dfc6 <_dtoa_r+0x9e>
 800dfa0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dfa2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dfa6:	6013      	str	r3, [r2, #0]
 800dfa8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dfac:	4323      	orrs	r3, r4
 800dfae:	f000 854d 	beq.w	800ea4c <_dtoa_r+0xb24>
 800dfb2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dfb4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e20c <_dtoa_r+0x2e4>
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	f000 854f 	beq.w	800ea5c <_dtoa_r+0xb34>
 800dfbe:	f10a 0303 	add.w	r3, sl, #3
 800dfc2:	f000 bd49 	b.w	800ea58 <_dtoa_r+0xb30>
 800dfc6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	ec51 0b17 	vmov	r0, r1, d7
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800dfd6:	f7f2 fd77 	bl	8000ac8 <__aeabi_dcmpeq>
 800dfda:	4680      	mov	r8, r0
 800dfdc:	b158      	cbz	r0, 800dff6 <_dtoa_r+0xce>
 800dfde:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	6013      	str	r3, [r2, #0]
 800dfe4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dfe6:	b113      	cbz	r3, 800dfee <_dtoa_r+0xc6>
 800dfe8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dfea:	4b84      	ldr	r3, [pc, #528]	@ (800e1fc <_dtoa_r+0x2d4>)
 800dfec:	6013      	str	r3, [r2, #0]
 800dfee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e210 <_dtoa_r+0x2e8>
 800dff2:	f000 bd33 	b.w	800ea5c <_dtoa_r+0xb34>
 800dff6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800dffa:	aa16      	add	r2, sp, #88	@ 0x58
 800dffc:	a917      	add	r1, sp, #92	@ 0x5c
 800dffe:	4658      	mov	r0, fp
 800e000:	f001 fa3a 	bl	800f478 <__d2b>
 800e004:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e008:	4681      	mov	r9, r0
 800e00a:	2e00      	cmp	r6, #0
 800e00c:	d077      	beq.n	800e0fe <_dtoa_r+0x1d6>
 800e00e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e010:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e014:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e018:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e01c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e020:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e024:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e028:	4619      	mov	r1, r3
 800e02a:	2200      	movs	r2, #0
 800e02c:	4b74      	ldr	r3, [pc, #464]	@ (800e200 <_dtoa_r+0x2d8>)
 800e02e:	f7f2 f92b 	bl	8000288 <__aeabi_dsub>
 800e032:	a369      	add	r3, pc, #420	@ (adr r3, 800e1d8 <_dtoa_r+0x2b0>)
 800e034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e038:	f7f2 fade 	bl	80005f8 <__aeabi_dmul>
 800e03c:	a368      	add	r3, pc, #416	@ (adr r3, 800e1e0 <_dtoa_r+0x2b8>)
 800e03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e042:	f7f2 f923 	bl	800028c <__adddf3>
 800e046:	4604      	mov	r4, r0
 800e048:	4630      	mov	r0, r6
 800e04a:	460d      	mov	r5, r1
 800e04c:	f7f2 fa6a 	bl	8000524 <__aeabi_i2d>
 800e050:	a365      	add	r3, pc, #404	@ (adr r3, 800e1e8 <_dtoa_r+0x2c0>)
 800e052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e056:	f7f2 facf 	bl	80005f8 <__aeabi_dmul>
 800e05a:	4602      	mov	r2, r0
 800e05c:	460b      	mov	r3, r1
 800e05e:	4620      	mov	r0, r4
 800e060:	4629      	mov	r1, r5
 800e062:	f7f2 f913 	bl	800028c <__adddf3>
 800e066:	4604      	mov	r4, r0
 800e068:	460d      	mov	r5, r1
 800e06a:	f7f2 fd75 	bl	8000b58 <__aeabi_d2iz>
 800e06e:	2200      	movs	r2, #0
 800e070:	4607      	mov	r7, r0
 800e072:	2300      	movs	r3, #0
 800e074:	4620      	mov	r0, r4
 800e076:	4629      	mov	r1, r5
 800e078:	f7f2 fd30 	bl	8000adc <__aeabi_dcmplt>
 800e07c:	b140      	cbz	r0, 800e090 <_dtoa_r+0x168>
 800e07e:	4638      	mov	r0, r7
 800e080:	f7f2 fa50 	bl	8000524 <__aeabi_i2d>
 800e084:	4622      	mov	r2, r4
 800e086:	462b      	mov	r3, r5
 800e088:	f7f2 fd1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e08c:	b900      	cbnz	r0, 800e090 <_dtoa_r+0x168>
 800e08e:	3f01      	subs	r7, #1
 800e090:	2f16      	cmp	r7, #22
 800e092:	d851      	bhi.n	800e138 <_dtoa_r+0x210>
 800e094:	4b5b      	ldr	r3, [pc, #364]	@ (800e204 <_dtoa_r+0x2dc>)
 800e096:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e09e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e0a2:	f7f2 fd1b 	bl	8000adc <__aeabi_dcmplt>
 800e0a6:	2800      	cmp	r0, #0
 800e0a8:	d048      	beq.n	800e13c <_dtoa_r+0x214>
 800e0aa:	3f01      	subs	r7, #1
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	9312      	str	r3, [sp, #72]	@ 0x48
 800e0b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e0b2:	1b9b      	subs	r3, r3, r6
 800e0b4:	1e5a      	subs	r2, r3, #1
 800e0b6:	bf44      	itt	mi
 800e0b8:	f1c3 0801 	rsbmi	r8, r3, #1
 800e0bc:	2300      	movmi	r3, #0
 800e0be:	9208      	str	r2, [sp, #32]
 800e0c0:	bf54      	ite	pl
 800e0c2:	f04f 0800 	movpl.w	r8, #0
 800e0c6:	9308      	strmi	r3, [sp, #32]
 800e0c8:	2f00      	cmp	r7, #0
 800e0ca:	db39      	blt.n	800e140 <_dtoa_r+0x218>
 800e0cc:	9b08      	ldr	r3, [sp, #32]
 800e0ce:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e0d0:	443b      	add	r3, r7
 800e0d2:	9308      	str	r3, [sp, #32]
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e0d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0da:	2b09      	cmp	r3, #9
 800e0dc:	d864      	bhi.n	800e1a8 <_dtoa_r+0x280>
 800e0de:	2b05      	cmp	r3, #5
 800e0e0:	bfc4      	itt	gt
 800e0e2:	3b04      	subgt	r3, #4
 800e0e4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e0e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0e8:	f1a3 0302 	sub.w	r3, r3, #2
 800e0ec:	bfcc      	ite	gt
 800e0ee:	2400      	movgt	r4, #0
 800e0f0:	2401      	movle	r4, #1
 800e0f2:	2b03      	cmp	r3, #3
 800e0f4:	d863      	bhi.n	800e1be <_dtoa_r+0x296>
 800e0f6:	e8df f003 	tbb	[pc, r3]
 800e0fa:	372a      	.short	0x372a
 800e0fc:	5535      	.short	0x5535
 800e0fe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e102:	441e      	add	r6, r3
 800e104:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e108:	2b20      	cmp	r3, #32
 800e10a:	bfc1      	itttt	gt
 800e10c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e110:	409f      	lslgt	r7, r3
 800e112:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e116:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e11a:	bfd6      	itet	le
 800e11c:	f1c3 0320 	rsble	r3, r3, #32
 800e120:	ea47 0003 	orrgt.w	r0, r7, r3
 800e124:	fa04 f003 	lslle.w	r0, r4, r3
 800e128:	f7f2 f9ec 	bl	8000504 <__aeabi_ui2d>
 800e12c:	2201      	movs	r2, #1
 800e12e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e132:	3e01      	subs	r6, #1
 800e134:	9214      	str	r2, [sp, #80]	@ 0x50
 800e136:	e777      	b.n	800e028 <_dtoa_r+0x100>
 800e138:	2301      	movs	r3, #1
 800e13a:	e7b8      	b.n	800e0ae <_dtoa_r+0x186>
 800e13c:	9012      	str	r0, [sp, #72]	@ 0x48
 800e13e:	e7b7      	b.n	800e0b0 <_dtoa_r+0x188>
 800e140:	427b      	negs	r3, r7
 800e142:	930a      	str	r3, [sp, #40]	@ 0x28
 800e144:	2300      	movs	r3, #0
 800e146:	eba8 0807 	sub.w	r8, r8, r7
 800e14a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e14c:	e7c4      	b.n	800e0d8 <_dtoa_r+0x1b0>
 800e14e:	2300      	movs	r3, #0
 800e150:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e152:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e154:	2b00      	cmp	r3, #0
 800e156:	dc35      	bgt.n	800e1c4 <_dtoa_r+0x29c>
 800e158:	2301      	movs	r3, #1
 800e15a:	9300      	str	r3, [sp, #0]
 800e15c:	9307      	str	r3, [sp, #28]
 800e15e:	461a      	mov	r2, r3
 800e160:	920e      	str	r2, [sp, #56]	@ 0x38
 800e162:	e00b      	b.n	800e17c <_dtoa_r+0x254>
 800e164:	2301      	movs	r3, #1
 800e166:	e7f3      	b.n	800e150 <_dtoa_r+0x228>
 800e168:	2300      	movs	r3, #0
 800e16a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e16c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e16e:	18fb      	adds	r3, r7, r3
 800e170:	9300      	str	r3, [sp, #0]
 800e172:	3301      	adds	r3, #1
 800e174:	2b01      	cmp	r3, #1
 800e176:	9307      	str	r3, [sp, #28]
 800e178:	bfb8      	it	lt
 800e17a:	2301      	movlt	r3, #1
 800e17c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e180:	2100      	movs	r1, #0
 800e182:	2204      	movs	r2, #4
 800e184:	f102 0514 	add.w	r5, r2, #20
 800e188:	429d      	cmp	r5, r3
 800e18a:	d91f      	bls.n	800e1cc <_dtoa_r+0x2a4>
 800e18c:	6041      	str	r1, [r0, #4]
 800e18e:	4658      	mov	r0, fp
 800e190:	f000 fd8e 	bl	800ecb0 <_Balloc>
 800e194:	4682      	mov	sl, r0
 800e196:	2800      	cmp	r0, #0
 800e198:	d13c      	bne.n	800e214 <_dtoa_r+0x2ec>
 800e19a:	4b1b      	ldr	r3, [pc, #108]	@ (800e208 <_dtoa_r+0x2e0>)
 800e19c:	4602      	mov	r2, r0
 800e19e:	f240 11af 	movw	r1, #431	@ 0x1af
 800e1a2:	e6d8      	b.n	800df56 <_dtoa_r+0x2e>
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	e7e0      	b.n	800e16a <_dtoa_r+0x242>
 800e1a8:	2401      	movs	r4, #1
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e1b0:	f04f 33ff 	mov.w	r3, #4294967295
 800e1b4:	9300      	str	r3, [sp, #0]
 800e1b6:	9307      	str	r3, [sp, #28]
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	2312      	movs	r3, #18
 800e1bc:	e7d0      	b.n	800e160 <_dtoa_r+0x238>
 800e1be:	2301      	movs	r3, #1
 800e1c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e1c2:	e7f5      	b.n	800e1b0 <_dtoa_r+0x288>
 800e1c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1c6:	9300      	str	r3, [sp, #0]
 800e1c8:	9307      	str	r3, [sp, #28]
 800e1ca:	e7d7      	b.n	800e17c <_dtoa_r+0x254>
 800e1cc:	3101      	adds	r1, #1
 800e1ce:	0052      	lsls	r2, r2, #1
 800e1d0:	e7d8      	b.n	800e184 <_dtoa_r+0x25c>
 800e1d2:	bf00      	nop
 800e1d4:	f3af 8000 	nop.w
 800e1d8:	636f4361 	.word	0x636f4361
 800e1dc:	3fd287a7 	.word	0x3fd287a7
 800e1e0:	8b60c8b3 	.word	0x8b60c8b3
 800e1e4:	3fc68a28 	.word	0x3fc68a28
 800e1e8:	509f79fb 	.word	0x509f79fb
 800e1ec:	3fd34413 	.word	0x3fd34413
 800e1f0:	0801184a 	.word	0x0801184a
 800e1f4:	08011861 	.word	0x08011861
 800e1f8:	7ff00000 	.word	0x7ff00000
 800e1fc:	080117d9 	.word	0x080117d9
 800e200:	3ff80000 	.word	0x3ff80000
 800e204:	08011958 	.word	0x08011958
 800e208:	080118b9 	.word	0x080118b9
 800e20c:	08011846 	.word	0x08011846
 800e210:	080117d8 	.word	0x080117d8
 800e214:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e218:	6018      	str	r0, [r3, #0]
 800e21a:	9b07      	ldr	r3, [sp, #28]
 800e21c:	2b0e      	cmp	r3, #14
 800e21e:	f200 80a4 	bhi.w	800e36a <_dtoa_r+0x442>
 800e222:	2c00      	cmp	r4, #0
 800e224:	f000 80a1 	beq.w	800e36a <_dtoa_r+0x442>
 800e228:	2f00      	cmp	r7, #0
 800e22a:	dd33      	ble.n	800e294 <_dtoa_r+0x36c>
 800e22c:	4bad      	ldr	r3, [pc, #692]	@ (800e4e4 <_dtoa_r+0x5bc>)
 800e22e:	f007 020f 	and.w	r2, r7, #15
 800e232:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e236:	ed93 7b00 	vldr	d7, [r3]
 800e23a:	05f8      	lsls	r0, r7, #23
 800e23c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e240:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e244:	d516      	bpl.n	800e274 <_dtoa_r+0x34c>
 800e246:	4ba8      	ldr	r3, [pc, #672]	@ (800e4e8 <_dtoa_r+0x5c0>)
 800e248:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e24c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e250:	f7f2 fafc 	bl	800084c <__aeabi_ddiv>
 800e254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e258:	f004 040f 	and.w	r4, r4, #15
 800e25c:	2603      	movs	r6, #3
 800e25e:	4da2      	ldr	r5, [pc, #648]	@ (800e4e8 <_dtoa_r+0x5c0>)
 800e260:	b954      	cbnz	r4, 800e278 <_dtoa_r+0x350>
 800e262:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e26a:	f7f2 faef 	bl	800084c <__aeabi_ddiv>
 800e26e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e272:	e028      	b.n	800e2c6 <_dtoa_r+0x39e>
 800e274:	2602      	movs	r6, #2
 800e276:	e7f2      	b.n	800e25e <_dtoa_r+0x336>
 800e278:	07e1      	lsls	r1, r4, #31
 800e27a:	d508      	bpl.n	800e28e <_dtoa_r+0x366>
 800e27c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e280:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e284:	f7f2 f9b8 	bl	80005f8 <__aeabi_dmul>
 800e288:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e28c:	3601      	adds	r6, #1
 800e28e:	1064      	asrs	r4, r4, #1
 800e290:	3508      	adds	r5, #8
 800e292:	e7e5      	b.n	800e260 <_dtoa_r+0x338>
 800e294:	f000 80d2 	beq.w	800e43c <_dtoa_r+0x514>
 800e298:	427c      	negs	r4, r7
 800e29a:	4b92      	ldr	r3, [pc, #584]	@ (800e4e4 <_dtoa_r+0x5bc>)
 800e29c:	4d92      	ldr	r5, [pc, #584]	@ (800e4e8 <_dtoa_r+0x5c0>)
 800e29e:	f004 020f 	and.w	r2, r4, #15
 800e2a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e2ae:	f7f2 f9a3 	bl	80005f8 <__aeabi_dmul>
 800e2b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2b6:	1124      	asrs	r4, r4, #4
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	2602      	movs	r6, #2
 800e2bc:	2c00      	cmp	r4, #0
 800e2be:	f040 80b2 	bne.w	800e426 <_dtoa_r+0x4fe>
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d1d3      	bne.n	800e26e <_dtoa_r+0x346>
 800e2c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e2c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	f000 80b7 	beq.w	800e440 <_dtoa_r+0x518>
 800e2d2:	4b86      	ldr	r3, [pc, #536]	@ (800e4ec <_dtoa_r+0x5c4>)
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	4629      	mov	r1, r5
 800e2da:	f7f2 fbff 	bl	8000adc <__aeabi_dcmplt>
 800e2de:	2800      	cmp	r0, #0
 800e2e0:	f000 80ae 	beq.w	800e440 <_dtoa_r+0x518>
 800e2e4:	9b07      	ldr	r3, [sp, #28]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	f000 80aa 	beq.w	800e440 <_dtoa_r+0x518>
 800e2ec:	9b00      	ldr	r3, [sp, #0]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	dd37      	ble.n	800e362 <_dtoa_r+0x43a>
 800e2f2:	1e7b      	subs	r3, r7, #1
 800e2f4:	9304      	str	r3, [sp, #16]
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	4b7d      	ldr	r3, [pc, #500]	@ (800e4f0 <_dtoa_r+0x5c8>)
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	4629      	mov	r1, r5
 800e2fe:	f7f2 f97b 	bl	80005f8 <__aeabi_dmul>
 800e302:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e306:	9c00      	ldr	r4, [sp, #0]
 800e308:	3601      	adds	r6, #1
 800e30a:	4630      	mov	r0, r6
 800e30c:	f7f2 f90a 	bl	8000524 <__aeabi_i2d>
 800e310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e314:	f7f2 f970 	bl	80005f8 <__aeabi_dmul>
 800e318:	4b76      	ldr	r3, [pc, #472]	@ (800e4f4 <_dtoa_r+0x5cc>)
 800e31a:	2200      	movs	r2, #0
 800e31c:	f7f1 ffb6 	bl	800028c <__adddf3>
 800e320:	4605      	mov	r5, r0
 800e322:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e326:	2c00      	cmp	r4, #0
 800e328:	f040 808d 	bne.w	800e446 <_dtoa_r+0x51e>
 800e32c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e330:	4b71      	ldr	r3, [pc, #452]	@ (800e4f8 <_dtoa_r+0x5d0>)
 800e332:	2200      	movs	r2, #0
 800e334:	f7f1 ffa8 	bl	8000288 <__aeabi_dsub>
 800e338:	4602      	mov	r2, r0
 800e33a:	460b      	mov	r3, r1
 800e33c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e340:	462a      	mov	r2, r5
 800e342:	4633      	mov	r3, r6
 800e344:	f7f2 fbe8 	bl	8000b18 <__aeabi_dcmpgt>
 800e348:	2800      	cmp	r0, #0
 800e34a:	f040 828b 	bne.w	800e864 <_dtoa_r+0x93c>
 800e34e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e352:	462a      	mov	r2, r5
 800e354:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e358:	f7f2 fbc0 	bl	8000adc <__aeabi_dcmplt>
 800e35c:	2800      	cmp	r0, #0
 800e35e:	f040 8128 	bne.w	800e5b2 <_dtoa_r+0x68a>
 800e362:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e366:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e36a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	f2c0 815a 	blt.w	800e626 <_dtoa_r+0x6fe>
 800e372:	2f0e      	cmp	r7, #14
 800e374:	f300 8157 	bgt.w	800e626 <_dtoa_r+0x6fe>
 800e378:	4b5a      	ldr	r3, [pc, #360]	@ (800e4e4 <_dtoa_r+0x5bc>)
 800e37a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e37e:	ed93 7b00 	vldr	d7, [r3]
 800e382:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e384:	2b00      	cmp	r3, #0
 800e386:	ed8d 7b00 	vstr	d7, [sp]
 800e38a:	da03      	bge.n	800e394 <_dtoa_r+0x46c>
 800e38c:	9b07      	ldr	r3, [sp, #28]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	f340 8101 	ble.w	800e596 <_dtoa_r+0x66e>
 800e394:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e398:	4656      	mov	r6, sl
 800e39a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e39e:	4620      	mov	r0, r4
 800e3a0:	4629      	mov	r1, r5
 800e3a2:	f7f2 fa53 	bl	800084c <__aeabi_ddiv>
 800e3a6:	f7f2 fbd7 	bl	8000b58 <__aeabi_d2iz>
 800e3aa:	4680      	mov	r8, r0
 800e3ac:	f7f2 f8ba 	bl	8000524 <__aeabi_i2d>
 800e3b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3b4:	f7f2 f920 	bl	80005f8 <__aeabi_dmul>
 800e3b8:	4602      	mov	r2, r0
 800e3ba:	460b      	mov	r3, r1
 800e3bc:	4620      	mov	r0, r4
 800e3be:	4629      	mov	r1, r5
 800e3c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e3c4:	f7f1 ff60 	bl	8000288 <__aeabi_dsub>
 800e3c8:	f806 4b01 	strb.w	r4, [r6], #1
 800e3cc:	9d07      	ldr	r5, [sp, #28]
 800e3ce:	eba6 040a 	sub.w	r4, r6, sl
 800e3d2:	42a5      	cmp	r5, r4
 800e3d4:	4602      	mov	r2, r0
 800e3d6:	460b      	mov	r3, r1
 800e3d8:	f040 8117 	bne.w	800e60a <_dtoa_r+0x6e2>
 800e3dc:	f7f1 ff56 	bl	800028c <__adddf3>
 800e3e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3e4:	4604      	mov	r4, r0
 800e3e6:	460d      	mov	r5, r1
 800e3e8:	f7f2 fb96 	bl	8000b18 <__aeabi_dcmpgt>
 800e3ec:	2800      	cmp	r0, #0
 800e3ee:	f040 80f9 	bne.w	800e5e4 <_dtoa_r+0x6bc>
 800e3f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3f6:	4620      	mov	r0, r4
 800e3f8:	4629      	mov	r1, r5
 800e3fa:	f7f2 fb65 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3fe:	b118      	cbz	r0, 800e408 <_dtoa_r+0x4e0>
 800e400:	f018 0f01 	tst.w	r8, #1
 800e404:	f040 80ee 	bne.w	800e5e4 <_dtoa_r+0x6bc>
 800e408:	4649      	mov	r1, r9
 800e40a:	4658      	mov	r0, fp
 800e40c:	f000 fc90 	bl	800ed30 <_Bfree>
 800e410:	2300      	movs	r3, #0
 800e412:	7033      	strb	r3, [r6, #0]
 800e414:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e416:	3701      	adds	r7, #1
 800e418:	601f      	str	r7, [r3, #0]
 800e41a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	f000 831d 	beq.w	800ea5c <_dtoa_r+0xb34>
 800e422:	601e      	str	r6, [r3, #0]
 800e424:	e31a      	b.n	800ea5c <_dtoa_r+0xb34>
 800e426:	07e2      	lsls	r2, r4, #31
 800e428:	d505      	bpl.n	800e436 <_dtoa_r+0x50e>
 800e42a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e42e:	f7f2 f8e3 	bl	80005f8 <__aeabi_dmul>
 800e432:	3601      	adds	r6, #1
 800e434:	2301      	movs	r3, #1
 800e436:	1064      	asrs	r4, r4, #1
 800e438:	3508      	adds	r5, #8
 800e43a:	e73f      	b.n	800e2bc <_dtoa_r+0x394>
 800e43c:	2602      	movs	r6, #2
 800e43e:	e742      	b.n	800e2c6 <_dtoa_r+0x39e>
 800e440:	9c07      	ldr	r4, [sp, #28]
 800e442:	9704      	str	r7, [sp, #16]
 800e444:	e761      	b.n	800e30a <_dtoa_r+0x3e2>
 800e446:	4b27      	ldr	r3, [pc, #156]	@ (800e4e4 <_dtoa_r+0x5bc>)
 800e448:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e44a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e44e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e452:	4454      	add	r4, sl
 800e454:	2900      	cmp	r1, #0
 800e456:	d053      	beq.n	800e500 <_dtoa_r+0x5d8>
 800e458:	4928      	ldr	r1, [pc, #160]	@ (800e4fc <_dtoa_r+0x5d4>)
 800e45a:	2000      	movs	r0, #0
 800e45c:	f7f2 f9f6 	bl	800084c <__aeabi_ddiv>
 800e460:	4633      	mov	r3, r6
 800e462:	462a      	mov	r2, r5
 800e464:	f7f1 ff10 	bl	8000288 <__aeabi_dsub>
 800e468:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e46c:	4656      	mov	r6, sl
 800e46e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e472:	f7f2 fb71 	bl	8000b58 <__aeabi_d2iz>
 800e476:	4605      	mov	r5, r0
 800e478:	f7f2 f854 	bl	8000524 <__aeabi_i2d>
 800e47c:	4602      	mov	r2, r0
 800e47e:	460b      	mov	r3, r1
 800e480:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e484:	f7f1 ff00 	bl	8000288 <__aeabi_dsub>
 800e488:	3530      	adds	r5, #48	@ 0x30
 800e48a:	4602      	mov	r2, r0
 800e48c:	460b      	mov	r3, r1
 800e48e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e492:	f806 5b01 	strb.w	r5, [r6], #1
 800e496:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e49a:	f7f2 fb1f 	bl	8000adc <__aeabi_dcmplt>
 800e49e:	2800      	cmp	r0, #0
 800e4a0:	d171      	bne.n	800e586 <_dtoa_r+0x65e>
 800e4a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e4a6:	4911      	ldr	r1, [pc, #68]	@ (800e4ec <_dtoa_r+0x5c4>)
 800e4a8:	2000      	movs	r0, #0
 800e4aa:	f7f1 feed 	bl	8000288 <__aeabi_dsub>
 800e4ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e4b2:	f7f2 fb13 	bl	8000adc <__aeabi_dcmplt>
 800e4b6:	2800      	cmp	r0, #0
 800e4b8:	f040 8095 	bne.w	800e5e6 <_dtoa_r+0x6be>
 800e4bc:	42a6      	cmp	r6, r4
 800e4be:	f43f af50 	beq.w	800e362 <_dtoa_r+0x43a>
 800e4c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e4c6:	4b0a      	ldr	r3, [pc, #40]	@ (800e4f0 <_dtoa_r+0x5c8>)
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	f7f2 f895 	bl	80005f8 <__aeabi_dmul>
 800e4ce:	4b08      	ldr	r3, [pc, #32]	@ (800e4f0 <_dtoa_r+0x5c8>)
 800e4d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4da:	f7f2 f88d 	bl	80005f8 <__aeabi_dmul>
 800e4de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4e2:	e7c4      	b.n	800e46e <_dtoa_r+0x546>
 800e4e4:	08011958 	.word	0x08011958
 800e4e8:	08011930 	.word	0x08011930
 800e4ec:	3ff00000 	.word	0x3ff00000
 800e4f0:	40240000 	.word	0x40240000
 800e4f4:	401c0000 	.word	0x401c0000
 800e4f8:	40140000 	.word	0x40140000
 800e4fc:	3fe00000 	.word	0x3fe00000
 800e500:	4631      	mov	r1, r6
 800e502:	4628      	mov	r0, r5
 800e504:	f7f2 f878 	bl	80005f8 <__aeabi_dmul>
 800e508:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e50c:	9415      	str	r4, [sp, #84]	@ 0x54
 800e50e:	4656      	mov	r6, sl
 800e510:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e514:	f7f2 fb20 	bl	8000b58 <__aeabi_d2iz>
 800e518:	4605      	mov	r5, r0
 800e51a:	f7f2 f803 	bl	8000524 <__aeabi_i2d>
 800e51e:	4602      	mov	r2, r0
 800e520:	460b      	mov	r3, r1
 800e522:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e526:	f7f1 feaf 	bl	8000288 <__aeabi_dsub>
 800e52a:	3530      	adds	r5, #48	@ 0x30
 800e52c:	f806 5b01 	strb.w	r5, [r6], #1
 800e530:	4602      	mov	r2, r0
 800e532:	460b      	mov	r3, r1
 800e534:	42a6      	cmp	r6, r4
 800e536:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e53a:	f04f 0200 	mov.w	r2, #0
 800e53e:	d124      	bne.n	800e58a <_dtoa_r+0x662>
 800e540:	4bac      	ldr	r3, [pc, #688]	@ (800e7f4 <_dtoa_r+0x8cc>)
 800e542:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e546:	f7f1 fea1 	bl	800028c <__adddf3>
 800e54a:	4602      	mov	r2, r0
 800e54c:	460b      	mov	r3, r1
 800e54e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e552:	f7f2 fae1 	bl	8000b18 <__aeabi_dcmpgt>
 800e556:	2800      	cmp	r0, #0
 800e558:	d145      	bne.n	800e5e6 <_dtoa_r+0x6be>
 800e55a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e55e:	49a5      	ldr	r1, [pc, #660]	@ (800e7f4 <_dtoa_r+0x8cc>)
 800e560:	2000      	movs	r0, #0
 800e562:	f7f1 fe91 	bl	8000288 <__aeabi_dsub>
 800e566:	4602      	mov	r2, r0
 800e568:	460b      	mov	r3, r1
 800e56a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e56e:	f7f2 fab5 	bl	8000adc <__aeabi_dcmplt>
 800e572:	2800      	cmp	r0, #0
 800e574:	f43f aef5 	beq.w	800e362 <_dtoa_r+0x43a>
 800e578:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e57a:	1e73      	subs	r3, r6, #1
 800e57c:	9315      	str	r3, [sp, #84]	@ 0x54
 800e57e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e582:	2b30      	cmp	r3, #48	@ 0x30
 800e584:	d0f8      	beq.n	800e578 <_dtoa_r+0x650>
 800e586:	9f04      	ldr	r7, [sp, #16]
 800e588:	e73e      	b.n	800e408 <_dtoa_r+0x4e0>
 800e58a:	4b9b      	ldr	r3, [pc, #620]	@ (800e7f8 <_dtoa_r+0x8d0>)
 800e58c:	f7f2 f834 	bl	80005f8 <__aeabi_dmul>
 800e590:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e594:	e7bc      	b.n	800e510 <_dtoa_r+0x5e8>
 800e596:	d10c      	bne.n	800e5b2 <_dtoa_r+0x68a>
 800e598:	4b98      	ldr	r3, [pc, #608]	@ (800e7fc <_dtoa_r+0x8d4>)
 800e59a:	2200      	movs	r2, #0
 800e59c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5a0:	f7f2 f82a 	bl	80005f8 <__aeabi_dmul>
 800e5a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e5a8:	f7f2 faac 	bl	8000b04 <__aeabi_dcmpge>
 800e5ac:	2800      	cmp	r0, #0
 800e5ae:	f000 8157 	beq.w	800e860 <_dtoa_r+0x938>
 800e5b2:	2400      	movs	r4, #0
 800e5b4:	4625      	mov	r5, r4
 800e5b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e5b8:	43db      	mvns	r3, r3
 800e5ba:	9304      	str	r3, [sp, #16]
 800e5bc:	4656      	mov	r6, sl
 800e5be:	2700      	movs	r7, #0
 800e5c0:	4621      	mov	r1, r4
 800e5c2:	4658      	mov	r0, fp
 800e5c4:	f000 fbb4 	bl	800ed30 <_Bfree>
 800e5c8:	2d00      	cmp	r5, #0
 800e5ca:	d0dc      	beq.n	800e586 <_dtoa_r+0x65e>
 800e5cc:	b12f      	cbz	r7, 800e5da <_dtoa_r+0x6b2>
 800e5ce:	42af      	cmp	r7, r5
 800e5d0:	d003      	beq.n	800e5da <_dtoa_r+0x6b2>
 800e5d2:	4639      	mov	r1, r7
 800e5d4:	4658      	mov	r0, fp
 800e5d6:	f000 fbab 	bl	800ed30 <_Bfree>
 800e5da:	4629      	mov	r1, r5
 800e5dc:	4658      	mov	r0, fp
 800e5de:	f000 fba7 	bl	800ed30 <_Bfree>
 800e5e2:	e7d0      	b.n	800e586 <_dtoa_r+0x65e>
 800e5e4:	9704      	str	r7, [sp, #16]
 800e5e6:	4633      	mov	r3, r6
 800e5e8:	461e      	mov	r6, r3
 800e5ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5ee:	2a39      	cmp	r2, #57	@ 0x39
 800e5f0:	d107      	bne.n	800e602 <_dtoa_r+0x6da>
 800e5f2:	459a      	cmp	sl, r3
 800e5f4:	d1f8      	bne.n	800e5e8 <_dtoa_r+0x6c0>
 800e5f6:	9a04      	ldr	r2, [sp, #16]
 800e5f8:	3201      	adds	r2, #1
 800e5fa:	9204      	str	r2, [sp, #16]
 800e5fc:	2230      	movs	r2, #48	@ 0x30
 800e5fe:	f88a 2000 	strb.w	r2, [sl]
 800e602:	781a      	ldrb	r2, [r3, #0]
 800e604:	3201      	adds	r2, #1
 800e606:	701a      	strb	r2, [r3, #0]
 800e608:	e7bd      	b.n	800e586 <_dtoa_r+0x65e>
 800e60a:	4b7b      	ldr	r3, [pc, #492]	@ (800e7f8 <_dtoa_r+0x8d0>)
 800e60c:	2200      	movs	r2, #0
 800e60e:	f7f1 fff3 	bl	80005f8 <__aeabi_dmul>
 800e612:	2200      	movs	r2, #0
 800e614:	2300      	movs	r3, #0
 800e616:	4604      	mov	r4, r0
 800e618:	460d      	mov	r5, r1
 800e61a:	f7f2 fa55 	bl	8000ac8 <__aeabi_dcmpeq>
 800e61e:	2800      	cmp	r0, #0
 800e620:	f43f aebb 	beq.w	800e39a <_dtoa_r+0x472>
 800e624:	e6f0      	b.n	800e408 <_dtoa_r+0x4e0>
 800e626:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e628:	2a00      	cmp	r2, #0
 800e62a:	f000 80db 	beq.w	800e7e4 <_dtoa_r+0x8bc>
 800e62e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e630:	2a01      	cmp	r2, #1
 800e632:	f300 80bf 	bgt.w	800e7b4 <_dtoa_r+0x88c>
 800e636:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e638:	2a00      	cmp	r2, #0
 800e63a:	f000 80b7 	beq.w	800e7ac <_dtoa_r+0x884>
 800e63e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e642:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e644:	4646      	mov	r6, r8
 800e646:	9a08      	ldr	r2, [sp, #32]
 800e648:	2101      	movs	r1, #1
 800e64a:	441a      	add	r2, r3
 800e64c:	4658      	mov	r0, fp
 800e64e:	4498      	add	r8, r3
 800e650:	9208      	str	r2, [sp, #32]
 800e652:	f000 fc6b 	bl	800ef2c <__i2b>
 800e656:	4605      	mov	r5, r0
 800e658:	b15e      	cbz	r6, 800e672 <_dtoa_r+0x74a>
 800e65a:	9b08      	ldr	r3, [sp, #32]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	dd08      	ble.n	800e672 <_dtoa_r+0x74a>
 800e660:	42b3      	cmp	r3, r6
 800e662:	9a08      	ldr	r2, [sp, #32]
 800e664:	bfa8      	it	ge
 800e666:	4633      	movge	r3, r6
 800e668:	eba8 0803 	sub.w	r8, r8, r3
 800e66c:	1af6      	subs	r6, r6, r3
 800e66e:	1ad3      	subs	r3, r2, r3
 800e670:	9308      	str	r3, [sp, #32]
 800e672:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e674:	b1f3      	cbz	r3, 800e6b4 <_dtoa_r+0x78c>
 800e676:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e678:	2b00      	cmp	r3, #0
 800e67a:	f000 80b7 	beq.w	800e7ec <_dtoa_r+0x8c4>
 800e67e:	b18c      	cbz	r4, 800e6a4 <_dtoa_r+0x77c>
 800e680:	4629      	mov	r1, r5
 800e682:	4622      	mov	r2, r4
 800e684:	4658      	mov	r0, fp
 800e686:	f000 fd11 	bl	800f0ac <__pow5mult>
 800e68a:	464a      	mov	r2, r9
 800e68c:	4601      	mov	r1, r0
 800e68e:	4605      	mov	r5, r0
 800e690:	4658      	mov	r0, fp
 800e692:	f000 fc61 	bl	800ef58 <__multiply>
 800e696:	4649      	mov	r1, r9
 800e698:	9004      	str	r0, [sp, #16]
 800e69a:	4658      	mov	r0, fp
 800e69c:	f000 fb48 	bl	800ed30 <_Bfree>
 800e6a0:	9b04      	ldr	r3, [sp, #16]
 800e6a2:	4699      	mov	r9, r3
 800e6a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6a6:	1b1a      	subs	r2, r3, r4
 800e6a8:	d004      	beq.n	800e6b4 <_dtoa_r+0x78c>
 800e6aa:	4649      	mov	r1, r9
 800e6ac:	4658      	mov	r0, fp
 800e6ae:	f000 fcfd 	bl	800f0ac <__pow5mult>
 800e6b2:	4681      	mov	r9, r0
 800e6b4:	2101      	movs	r1, #1
 800e6b6:	4658      	mov	r0, fp
 800e6b8:	f000 fc38 	bl	800ef2c <__i2b>
 800e6bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6be:	4604      	mov	r4, r0
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	f000 81cf 	beq.w	800ea64 <_dtoa_r+0xb3c>
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	4601      	mov	r1, r0
 800e6ca:	4658      	mov	r0, fp
 800e6cc:	f000 fcee 	bl	800f0ac <__pow5mult>
 800e6d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6d2:	2b01      	cmp	r3, #1
 800e6d4:	4604      	mov	r4, r0
 800e6d6:	f300 8095 	bgt.w	800e804 <_dtoa_r+0x8dc>
 800e6da:	9b02      	ldr	r3, [sp, #8]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	f040 8087 	bne.w	800e7f0 <_dtoa_r+0x8c8>
 800e6e2:	9b03      	ldr	r3, [sp, #12]
 800e6e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	f040 8089 	bne.w	800e800 <_dtoa_r+0x8d8>
 800e6ee:	9b03      	ldr	r3, [sp, #12]
 800e6f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e6f4:	0d1b      	lsrs	r3, r3, #20
 800e6f6:	051b      	lsls	r3, r3, #20
 800e6f8:	b12b      	cbz	r3, 800e706 <_dtoa_r+0x7de>
 800e6fa:	9b08      	ldr	r3, [sp, #32]
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	9308      	str	r3, [sp, #32]
 800e700:	f108 0801 	add.w	r8, r8, #1
 800e704:	2301      	movs	r3, #1
 800e706:	930a      	str	r3, [sp, #40]	@ 0x28
 800e708:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	f000 81b0 	beq.w	800ea70 <_dtoa_r+0xb48>
 800e710:	6923      	ldr	r3, [r4, #16]
 800e712:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e716:	6918      	ldr	r0, [r3, #16]
 800e718:	f000 fbbc 	bl	800ee94 <__hi0bits>
 800e71c:	f1c0 0020 	rsb	r0, r0, #32
 800e720:	9b08      	ldr	r3, [sp, #32]
 800e722:	4418      	add	r0, r3
 800e724:	f010 001f 	ands.w	r0, r0, #31
 800e728:	d077      	beq.n	800e81a <_dtoa_r+0x8f2>
 800e72a:	f1c0 0320 	rsb	r3, r0, #32
 800e72e:	2b04      	cmp	r3, #4
 800e730:	dd6b      	ble.n	800e80a <_dtoa_r+0x8e2>
 800e732:	9b08      	ldr	r3, [sp, #32]
 800e734:	f1c0 001c 	rsb	r0, r0, #28
 800e738:	4403      	add	r3, r0
 800e73a:	4480      	add	r8, r0
 800e73c:	4406      	add	r6, r0
 800e73e:	9308      	str	r3, [sp, #32]
 800e740:	f1b8 0f00 	cmp.w	r8, #0
 800e744:	dd05      	ble.n	800e752 <_dtoa_r+0x82a>
 800e746:	4649      	mov	r1, r9
 800e748:	4642      	mov	r2, r8
 800e74a:	4658      	mov	r0, fp
 800e74c:	f000 fd08 	bl	800f160 <__lshift>
 800e750:	4681      	mov	r9, r0
 800e752:	9b08      	ldr	r3, [sp, #32]
 800e754:	2b00      	cmp	r3, #0
 800e756:	dd05      	ble.n	800e764 <_dtoa_r+0x83c>
 800e758:	4621      	mov	r1, r4
 800e75a:	461a      	mov	r2, r3
 800e75c:	4658      	mov	r0, fp
 800e75e:	f000 fcff 	bl	800f160 <__lshift>
 800e762:	4604      	mov	r4, r0
 800e764:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e766:	2b00      	cmp	r3, #0
 800e768:	d059      	beq.n	800e81e <_dtoa_r+0x8f6>
 800e76a:	4621      	mov	r1, r4
 800e76c:	4648      	mov	r0, r9
 800e76e:	f000 fd63 	bl	800f238 <__mcmp>
 800e772:	2800      	cmp	r0, #0
 800e774:	da53      	bge.n	800e81e <_dtoa_r+0x8f6>
 800e776:	1e7b      	subs	r3, r7, #1
 800e778:	9304      	str	r3, [sp, #16]
 800e77a:	4649      	mov	r1, r9
 800e77c:	2300      	movs	r3, #0
 800e77e:	220a      	movs	r2, #10
 800e780:	4658      	mov	r0, fp
 800e782:	f000 faf7 	bl	800ed74 <__multadd>
 800e786:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e788:	4681      	mov	r9, r0
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	f000 8172 	beq.w	800ea74 <_dtoa_r+0xb4c>
 800e790:	2300      	movs	r3, #0
 800e792:	4629      	mov	r1, r5
 800e794:	220a      	movs	r2, #10
 800e796:	4658      	mov	r0, fp
 800e798:	f000 faec 	bl	800ed74 <__multadd>
 800e79c:	9b00      	ldr	r3, [sp, #0]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	4605      	mov	r5, r0
 800e7a2:	dc67      	bgt.n	800e874 <_dtoa_r+0x94c>
 800e7a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7a6:	2b02      	cmp	r3, #2
 800e7a8:	dc41      	bgt.n	800e82e <_dtoa_r+0x906>
 800e7aa:	e063      	b.n	800e874 <_dtoa_r+0x94c>
 800e7ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e7ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e7b2:	e746      	b.n	800e642 <_dtoa_r+0x71a>
 800e7b4:	9b07      	ldr	r3, [sp, #28]
 800e7b6:	1e5c      	subs	r4, r3, #1
 800e7b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7ba:	42a3      	cmp	r3, r4
 800e7bc:	bfbf      	itttt	lt
 800e7be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e7c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e7c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e7c4:	1ae3      	sublt	r3, r4, r3
 800e7c6:	bfb4      	ite	lt
 800e7c8:	18d2      	addlt	r2, r2, r3
 800e7ca:	1b1c      	subge	r4, r3, r4
 800e7cc:	9b07      	ldr	r3, [sp, #28]
 800e7ce:	bfbc      	itt	lt
 800e7d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e7d2:	2400      	movlt	r4, #0
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	bfb5      	itete	lt
 800e7d8:	eba8 0603 	sublt.w	r6, r8, r3
 800e7dc:	9b07      	ldrge	r3, [sp, #28]
 800e7de:	2300      	movlt	r3, #0
 800e7e0:	4646      	movge	r6, r8
 800e7e2:	e730      	b.n	800e646 <_dtoa_r+0x71e>
 800e7e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e7e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e7e8:	4646      	mov	r6, r8
 800e7ea:	e735      	b.n	800e658 <_dtoa_r+0x730>
 800e7ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e7ee:	e75c      	b.n	800e6aa <_dtoa_r+0x782>
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	e788      	b.n	800e706 <_dtoa_r+0x7de>
 800e7f4:	3fe00000 	.word	0x3fe00000
 800e7f8:	40240000 	.word	0x40240000
 800e7fc:	40140000 	.word	0x40140000
 800e800:	9b02      	ldr	r3, [sp, #8]
 800e802:	e780      	b.n	800e706 <_dtoa_r+0x7de>
 800e804:	2300      	movs	r3, #0
 800e806:	930a      	str	r3, [sp, #40]	@ 0x28
 800e808:	e782      	b.n	800e710 <_dtoa_r+0x7e8>
 800e80a:	d099      	beq.n	800e740 <_dtoa_r+0x818>
 800e80c:	9a08      	ldr	r2, [sp, #32]
 800e80e:	331c      	adds	r3, #28
 800e810:	441a      	add	r2, r3
 800e812:	4498      	add	r8, r3
 800e814:	441e      	add	r6, r3
 800e816:	9208      	str	r2, [sp, #32]
 800e818:	e792      	b.n	800e740 <_dtoa_r+0x818>
 800e81a:	4603      	mov	r3, r0
 800e81c:	e7f6      	b.n	800e80c <_dtoa_r+0x8e4>
 800e81e:	9b07      	ldr	r3, [sp, #28]
 800e820:	9704      	str	r7, [sp, #16]
 800e822:	2b00      	cmp	r3, #0
 800e824:	dc20      	bgt.n	800e868 <_dtoa_r+0x940>
 800e826:	9300      	str	r3, [sp, #0]
 800e828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e82a:	2b02      	cmp	r3, #2
 800e82c:	dd1e      	ble.n	800e86c <_dtoa_r+0x944>
 800e82e:	9b00      	ldr	r3, [sp, #0]
 800e830:	2b00      	cmp	r3, #0
 800e832:	f47f aec0 	bne.w	800e5b6 <_dtoa_r+0x68e>
 800e836:	4621      	mov	r1, r4
 800e838:	2205      	movs	r2, #5
 800e83a:	4658      	mov	r0, fp
 800e83c:	f000 fa9a 	bl	800ed74 <__multadd>
 800e840:	4601      	mov	r1, r0
 800e842:	4604      	mov	r4, r0
 800e844:	4648      	mov	r0, r9
 800e846:	f000 fcf7 	bl	800f238 <__mcmp>
 800e84a:	2800      	cmp	r0, #0
 800e84c:	f77f aeb3 	ble.w	800e5b6 <_dtoa_r+0x68e>
 800e850:	4656      	mov	r6, sl
 800e852:	2331      	movs	r3, #49	@ 0x31
 800e854:	f806 3b01 	strb.w	r3, [r6], #1
 800e858:	9b04      	ldr	r3, [sp, #16]
 800e85a:	3301      	adds	r3, #1
 800e85c:	9304      	str	r3, [sp, #16]
 800e85e:	e6ae      	b.n	800e5be <_dtoa_r+0x696>
 800e860:	9c07      	ldr	r4, [sp, #28]
 800e862:	9704      	str	r7, [sp, #16]
 800e864:	4625      	mov	r5, r4
 800e866:	e7f3      	b.n	800e850 <_dtoa_r+0x928>
 800e868:	9b07      	ldr	r3, [sp, #28]
 800e86a:	9300      	str	r3, [sp, #0]
 800e86c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e86e:	2b00      	cmp	r3, #0
 800e870:	f000 8104 	beq.w	800ea7c <_dtoa_r+0xb54>
 800e874:	2e00      	cmp	r6, #0
 800e876:	dd05      	ble.n	800e884 <_dtoa_r+0x95c>
 800e878:	4629      	mov	r1, r5
 800e87a:	4632      	mov	r2, r6
 800e87c:	4658      	mov	r0, fp
 800e87e:	f000 fc6f 	bl	800f160 <__lshift>
 800e882:	4605      	mov	r5, r0
 800e884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e886:	2b00      	cmp	r3, #0
 800e888:	d05a      	beq.n	800e940 <_dtoa_r+0xa18>
 800e88a:	6869      	ldr	r1, [r5, #4]
 800e88c:	4658      	mov	r0, fp
 800e88e:	f000 fa0f 	bl	800ecb0 <_Balloc>
 800e892:	4606      	mov	r6, r0
 800e894:	b928      	cbnz	r0, 800e8a2 <_dtoa_r+0x97a>
 800e896:	4b84      	ldr	r3, [pc, #528]	@ (800eaa8 <_dtoa_r+0xb80>)
 800e898:	4602      	mov	r2, r0
 800e89a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e89e:	f7ff bb5a 	b.w	800df56 <_dtoa_r+0x2e>
 800e8a2:	692a      	ldr	r2, [r5, #16]
 800e8a4:	3202      	adds	r2, #2
 800e8a6:	0092      	lsls	r2, r2, #2
 800e8a8:	f105 010c 	add.w	r1, r5, #12
 800e8ac:	300c      	adds	r0, #12
 800e8ae:	f7ff fa80 	bl	800ddb2 <memcpy>
 800e8b2:	2201      	movs	r2, #1
 800e8b4:	4631      	mov	r1, r6
 800e8b6:	4658      	mov	r0, fp
 800e8b8:	f000 fc52 	bl	800f160 <__lshift>
 800e8bc:	f10a 0301 	add.w	r3, sl, #1
 800e8c0:	9307      	str	r3, [sp, #28]
 800e8c2:	9b00      	ldr	r3, [sp, #0]
 800e8c4:	4453      	add	r3, sl
 800e8c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e8c8:	9b02      	ldr	r3, [sp, #8]
 800e8ca:	f003 0301 	and.w	r3, r3, #1
 800e8ce:	462f      	mov	r7, r5
 800e8d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8d2:	4605      	mov	r5, r0
 800e8d4:	9b07      	ldr	r3, [sp, #28]
 800e8d6:	4621      	mov	r1, r4
 800e8d8:	3b01      	subs	r3, #1
 800e8da:	4648      	mov	r0, r9
 800e8dc:	9300      	str	r3, [sp, #0]
 800e8de:	f7ff fa9b 	bl	800de18 <quorem>
 800e8e2:	4639      	mov	r1, r7
 800e8e4:	9002      	str	r0, [sp, #8]
 800e8e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e8ea:	4648      	mov	r0, r9
 800e8ec:	f000 fca4 	bl	800f238 <__mcmp>
 800e8f0:	462a      	mov	r2, r5
 800e8f2:	9008      	str	r0, [sp, #32]
 800e8f4:	4621      	mov	r1, r4
 800e8f6:	4658      	mov	r0, fp
 800e8f8:	f000 fcba 	bl	800f270 <__mdiff>
 800e8fc:	68c2      	ldr	r2, [r0, #12]
 800e8fe:	4606      	mov	r6, r0
 800e900:	bb02      	cbnz	r2, 800e944 <_dtoa_r+0xa1c>
 800e902:	4601      	mov	r1, r0
 800e904:	4648      	mov	r0, r9
 800e906:	f000 fc97 	bl	800f238 <__mcmp>
 800e90a:	4602      	mov	r2, r0
 800e90c:	4631      	mov	r1, r6
 800e90e:	4658      	mov	r0, fp
 800e910:	920e      	str	r2, [sp, #56]	@ 0x38
 800e912:	f000 fa0d 	bl	800ed30 <_Bfree>
 800e916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e918:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e91a:	9e07      	ldr	r6, [sp, #28]
 800e91c:	ea43 0102 	orr.w	r1, r3, r2
 800e920:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e922:	4319      	orrs	r1, r3
 800e924:	d110      	bne.n	800e948 <_dtoa_r+0xa20>
 800e926:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e92a:	d029      	beq.n	800e980 <_dtoa_r+0xa58>
 800e92c:	9b08      	ldr	r3, [sp, #32]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	dd02      	ble.n	800e938 <_dtoa_r+0xa10>
 800e932:	9b02      	ldr	r3, [sp, #8]
 800e934:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e938:	9b00      	ldr	r3, [sp, #0]
 800e93a:	f883 8000 	strb.w	r8, [r3]
 800e93e:	e63f      	b.n	800e5c0 <_dtoa_r+0x698>
 800e940:	4628      	mov	r0, r5
 800e942:	e7bb      	b.n	800e8bc <_dtoa_r+0x994>
 800e944:	2201      	movs	r2, #1
 800e946:	e7e1      	b.n	800e90c <_dtoa_r+0x9e4>
 800e948:	9b08      	ldr	r3, [sp, #32]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	db04      	blt.n	800e958 <_dtoa_r+0xa30>
 800e94e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e950:	430b      	orrs	r3, r1
 800e952:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e954:	430b      	orrs	r3, r1
 800e956:	d120      	bne.n	800e99a <_dtoa_r+0xa72>
 800e958:	2a00      	cmp	r2, #0
 800e95a:	dded      	ble.n	800e938 <_dtoa_r+0xa10>
 800e95c:	4649      	mov	r1, r9
 800e95e:	2201      	movs	r2, #1
 800e960:	4658      	mov	r0, fp
 800e962:	f000 fbfd 	bl	800f160 <__lshift>
 800e966:	4621      	mov	r1, r4
 800e968:	4681      	mov	r9, r0
 800e96a:	f000 fc65 	bl	800f238 <__mcmp>
 800e96e:	2800      	cmp	r0, #0
 800e970:	dc03      	bgt.n	800e97a <_dtoa_r+0xa52>
 800e972:	d1e1      	bne.n	800e938 <_dtoa_r+0xa10>
 800e974:	f018 0f01 	tst.w	r8, #1
 800e978:	d0de      	beq.n	800e938 <_dtoa_r+0xa10>
 800e97a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e97e:	d1d8      	bne.n	800e932 <_dtoa_r+0xa0a>
 800e980:	9a00      	ldr	r2, [sp, #0]
 800e982:	2339      	movs	r3, #57	@ 0x39
 800e984:	7013      	strb	r3, [r2, #0]
 800e986:	4633      	mov	r3, r6
 800e988:	461e      	mov	r6, r3
 800e98a:	3b01      	subs	r3, #1
 800e98c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e990:	2a39      	cmp	r2, #57	@ 0x39
 800e992:	d052      	beq.n	800ea3a <_dtoa_r+0xb12>
 800e994:	3201      	adds	r2, #1
 800e996:	701a      	strb	r2, [r3, #0]
 800e998:	e612      	b.n	800e5c0 <_dtoa_r+0x698>
 800e99a:	2a00      	cmp	r2, #0
 800e99c:	dd07      	ble.n	800e9ae <_dtoa_r+0xa86>
 800e99e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e9a2:	d0ed      	beq.n	800e980 <_dtoa_r+0xa58>
 800e9a4:	9a00      	ldr	r2, [sp, #0]
 800e9a6:	f108 0301 	add.w	r3, r8, #1
 800e9aa:	7013      	strb	r3, [r2, #0]
 800e9ac:	e608      	b.n	800e5c0 <_dtoa_r+0x698>
 800e9ae:	9b07      	ldr	r3, [sp, #28]
 800e9b0:	9a07      	ldr	r2, [sp, #28]
 800e9b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e9b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9b8:	4293      	cmp	r3, r2
 800e9ba:	d028      	beq.n	800ea0e <_dtoa_r+0xae6>
 800e9bc:	4649      	mov	r1, r9
 800e9be:	2300      	movs	r3, #0
 800e9c0:	220a      	movs	r2, #10
 800e9c2:	4658      	mov	r0, fp
 800e9c4:	f000 f9d6 	bl	800ed74 <__multadd>
 800e9c8:	42af      	cmp	r7, r5
 800e9ca:	4681      	mov	r9, r0
 800e9cc:	f04f 0300 	mov.w	r3, #0
 800e9d0:	f04f 020a 	mov.w	r2, #10
 800e9d4:	4639      	mov	r1, r7
 800e9d6:	4658      	mov	r0, fp
 800e9d8:	d107      	bne.n	800e9ea <_dtoa_r+0xac2>
 800e9da:	f000 f9cb 	bl	800ed74 <__multadd>
 800e9de:	4607      	mov	r7, r0
 800e9e0:	4605      	mov	r5, r0
 800e9e2:	9b07      	ldr	r3, [sp, #28]
 800e9e4:	3301      	adds	r3, #1
 800e9e6:	9307      	str	r3, [sp, #28]
 800e9e8:	e774      	b.n	800e8d4 <_dtoa_r+0x9ac>
 800e9ea:	f000 f9c3 	bl	800ed74 <__multadd>
 800e9ee:	4629      	mov	r1, r5
 800e9f0:	4607      	mov	r7, r0
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	220a      	movs	r2, #10
 800e9f6:	4658      	mov	r0, fp
 800e9f8:	f000 f9bc 	bl	800ed74 <__multadd>
 800e9fc:	4605      	mov	r5, r0
 800e9fe:	e7f0      	b.n	800e9e2 <_dtoa_r+0xaba>
 800ea00:	9b00      	ldr	r3, [sp, #0]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	bfcc      	ite	gt
 800ea06:	461e      	movgt	r6, r3
 800ea08:	2601      	movle	r6, #1
 800ea0a:	4456      	add	r6, sl
 800ea0c:	2700      	movs	r7, #0
 800ea0e:	4649      	mov	r1, r9
 800ea10:	2201      	movs	r2, #1
 800ea12:	4658      	mov	r0, fp
 800ea14:	f000 fba4 	bl	800f160 <__lshift>
 800ea18:	4621      	mov	r1, r4
 800ea1a:	4681      	mov	r9, r0
 800ea1c:	f000 fc0c 	bl	800f238 <__mcmp>
 800ea20:	2800      	cmp	r0, #0
 800ea22:	dcb0      	bgt.n	800e986 <_dtoa_r+0xa5e>
 800ea24:	d102      	bne.n	800ea2c <_dtoa_r+0xb04>
 800ea26:	f018 0f01 	tst.w	r8, #1
 800ea2a:	d1ac      	bne.n	800e986 <_dtoa_r+0xa5e>
 800ea2c:	4633      	mov	r3, r6
 800ea2e:	461e      	mov	r6, r3
 800ea30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea34:	2a30      	cmp	r2, #48	@ 0x30
 800ea36:	d0fa      	beq.n	800ea2e <_dtoa_r+0xb06>
 800ea38:	e5c2      	b.n	800e5c0 <_dtoa_r+0x698>
 800ea3a:	459a      	cmp	sl, r3
 800ea3c:	d1a4      	bne.n	800e988 <_dtoa_r+0xa60>
 800ea3e:	9b04      	ldr	r3, [sp, #16]
 800ea40:	3301      	adds	r3, #1
 800ea42:	9304      	str	r3, [sp, #16]
 800ea44:	2331      	movs	r3, #49	@ 0x31
 800ea46:	f88a 3000 	strb.w	r3, [sl]
 800ea4a:	e5b9      	b.n	800e5c0 <_dtoa_r+0x698>
 800ea4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ea4e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800eaac <_dtoa_r+0xb84>
 800ea52:	b11b      	cbz	r3, 800ea5c <_dtoa_r+0xb34>
 800ea54:	f10a 0308 	add.w	r3, sl, #8
 800ea58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ea5a:	6013      	str	r3, [r2, #0]
 800ea5c:	4650      	mov	r0, sl
 800ea5e:	b019      	add	sp, #100	@ 0x64
 800ea60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	f77f ae37 	ble.w	800e6da <_dtoa_r+0x7b2>
 800ea6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea70:	2001      	movs	r0, #1
 800ea72:	e655      	b.n	800e720 <_dtoa_r+0x7f8>
 800ea74:	9b00      	ldr	r3, [sp, #0]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	f77f aed6 	ble.w	800e828 <_dtoa_r+0x900>
 800ea7c:	4656      	mov	r6, sl
 800ea7e:	4621      	mov	r1, r4
 800ea80:	4648      	mov	r0, r9
 800ea82:	f7ff f9c9 	bl	800de18 <quorem>
 800ea86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ea8a:	f806 8b01 	strb.w	r8, [r6], #1
 800ea8e:	9b00      	ldr	r3, [sp, #0]
 800ea90:	eba6 020a 	sub.w	r2, r6, sl
 800ea94:	4293      	cmp	r3, r2
 800ea96:	ddb3      	ble.n	800ea00 <_dtoa_r+0xad8>
 800ea98:	4649      	mov	r1, r9
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	220a      	movs	r2, #10
 800ea9e:	4658      	mov	r0, fp
 800eaa0:	f000 f968 	bl	800ed74 <__multadd>
 800eaa4:	4681      	mov	r9, r0
 800eaa6:	e7ea      	b.n	800ea7e <_dtoa_r+0xb56>
 800eaa8:	080118b9 	.word	0x080118b9
 800eaac:	0801183d 	.word	0x0801183d

0800eab0 <_free_r>:
 800eab0:	b538      	push	{r3, r4, r5, lr}
 800eab2:	4605      	mov	r5, r0
 800eab4:	2900      	cmp	r1, #0
 800eab6:	d041      	beq.n	800eb3c <_free_r+0x8c>
 800eab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eabc:	1f0c      	subs	r4, r1, #4
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	bfb8      	it	lt
 800eac2:	18e4      	addlt	r4, r4, r3
 800eac4:	f000 f8e8 	bl	800ec98 <__malloc_lock>
 800eac8:	4a1d      	ldr	r2, [pc, #116]	@ (800eb40 <_free_r+0x90>)
 800eaca:	6813      	ldr	r3, [r2, #0]
 800eacc:	b933      	cbnz	r3, 800eadc <_free_r+0x2c>
 800eace:	6063      	str	r3, [r4, #4]
 800ead0:	6014      	str	r4, [r2, #0]
 800ead2:	4628      	mov	r0, r5
 800ead4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ead8:	f000 b8e4 	b.w	800eca4 <__malloc_unlock>
 800eadc:	42a3      	cmp	r3, r4
 800eade:	d908      	bls.n	800eaf2 <_free_r+0x42>
 800eae0:	6820      	ldr	r0, [r4, #0]
 800eae2:	1821      	adds	r1, r4, r0
 800eae4:	428b      	cmp	r3, r1
 800eae6:	bf01      	itttt	eq
 800eae8:	6819      	ldreq	r1, [r3, #0]
 800eaea:	685b      	ldreq	r3, [r3, #4]
 800eaec:	1809      	addeq	r1, r1, r0
 800eaee:	6021      	streq	r1, [r4, #0]
 800eaf0:	e7ed      	b.n	800eace <_free_r+0x1e>
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	685b      	ldr	r3, [r3, #4]
 800eaf6:	b10b      	cbz	r3, 800eafc <_free_r+0x4c>
 800eaf8:	42a3      	cmp	r3, r4
 800eafa:	d9fa      	bls.n	800eaf2 <_free_r+0x42>
 800eafc:	6811      	ldr	r1, [r2, #0]
 800eafe:	1850      	adds	r0, r2, r1
 800eb00:	42a0      	cmp	r0, r4
 800eb02:	d10b      	bne.n	800eb1c <_free_r+0x6c>
 800eb04:	6820      	ldr	r0, [r4, #0]
 800eb06:	4401      	add	r1, r0
 800eb08:	1850      	adds	r0, r2, r1
 800eb0a:	4283      	cmp	r3, r0
 800eb0c:	6011      	str	r1, [r2, #0]
 800eb0e:	d1e0      	bne.n	800ead2 <_free_r+0x22>
 800eb10:	6818      	ldr	r0, [r3, #0]
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	6053      	str	r3, [r2, #4]
 800eb16:	4408      	add	r0, r1
 800eb18:	6010      	str	r0, [r2, #0]
 800eb1a:	e7da      	b.n	800ead2 <_free_r+0x22>
 800eb1c:	d902      	bls.n	800eb24 <_free_r+0x74>
 800eb1e:	230c      	movs	r3, #12
 800eb20:	602b      	str	r3, [r5, #0]
 800eb22:	e7d6      	b.n	800ead2 <_free_r+0x22>
 800eb24:	6820      	ldr	r0, [r4, #0]
 800eb26:	1821      	adds	r1, r4, r0
 800eb28:	428b      	cmp	r3, r1
 800eb2a:	bf04      	itt	eq
 800eb2c:	6819      	ldreq	r1, [r3, #0]
 800eb2e:	685b      	ldreq	r3, [r3, #4]
 800eb30:	6063      	str	r3, [r4, #4]
 800eb32:	bf04      	itt	eq
 800eb34:	1809      	addeq	r1, r1, r0
 800eb36:	6021      	streq	r1, [r4, #0]
 800eb38:	6054      	str	r4, [r2, #4]
 800eb3a:	e7ca      	b.n	800ead2 <_free_r+0x22>
 800eb3c:	bd38      	pop	{r3, r4, r5, pc}
 800eb3e:	bf00      	nop
 800eb40:	20003964 	.word	0x20003964

0800eb44 <malloc>:
 800eb44:	4b02      	ldr	r3, [pc, #8]	@ (800eb50 <malloc+0xc>)
 800eb46:	4601      	mov	r1, r0
 800eb48:	6818      	ldr	r0, [r3, #0]
 800eb4a:	f000 b825 	b.w	800eb98 <_malloc_r>
 800eb4e:	bf00      	nop
 800eb50:	20000068 	.word	0x20000068

0800eb54 <sbrk_aligned>:
 800eb54:	b570      	push	{r4, r5, r6, lr}
 800eb56:	4e0f      	ldr	r6, [pc, #60]	@ (800eb94 <sbrk_aligned+0x40>)
 800eb58:	460c      	mov	r4, r1
 800eb5a:	6831      	ldr	r1, [r6, #0]
 800eb5c:	4605      	mov	r5, r0
 800eb5e:	b911      	cbnz	r1, 800eb66 <sbrk_aligned+0x12>
 800eb60:	f001 ffe4 	bl	8010b2c <_sbrk_r>
 800eb64:	6030      	str	r0, [r6, #0]
 800eb66:	4621      	mov	r1, r4
 800eb68:	4628      	mov	r0, r5
 800eb6a:	f001 ffdf 	bl	8010b2c <_sbrk_r>
 800eb6e:	1c43      	adds	r3, r0, #1
 800eb70:	d103      	bne.n	800eb7a <sbrk_aligned+0x26>
 800eb72:	f04f 34ff 	mov.w	r4, #4294967295
 800eb76:	4620      	mov	r0, r4
 800eb78:	bd70      	pop	{r4, r5, r6, pc}
 800eb7a:	1cc4      	adds	r4, r0, #3
 800eb7c:	f024 0403 	bic.w	r4, r4, #3
 800eb80:	42a0      	cmp	r0, r4
 800eb82:	d0f8      	beq.n	800eb76 <sbrk_aligned+0x22>
 800eb84:	1a21      	subs	r1, r4, r0
 800eb86:	4628      	mov	r0, r5
 800eb88:	f001 ffd0 	bl	8010b2c <_sbrk_r>
 800eb8c:	3001      	adds	r0, #1
 800eb8e:	d1f2      	bne.n	800eb76 <sbrk_aligned+0x22>
 800eb90:	e7ef      	b.n	800eb72 <sbrk_aligned+0x1e>
 800eb92:	bf00      	nop
 800eb94:	20003960 	.word	0x20003960

0800eb98 <_malloc_r>:
 800eb98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb9c:	1ccd      	adds	r5, r1, #3
 800eb9e:	f025 0503 	bic.w	r5, r5, #3
 800eba2:	3508      	adds	r5, #8
 800eba4:	2d0c      	cmp	r5, #12
 800eba6:	bf38      	it	cc
 800eba8:	250c      	movcc	r5, #12
 800ebaa:	2d00      	cmp	r5, #0
 800ebac:	4606      	mov	r6, r0
 800ebae:	db01      	blt.n	800ebb4 <_malloc_r+0x1c>
 800ebb0:	42a9      	cmp	r1, r5
 800ebb2:	d904      	bls.n	800ebbe <_malloc_r+0x26>
 800ebb4:	230c      	movs	r3, #12
 800ebb6:	6033      	str	r3, [r6, #0]
 800ebb8:	2000      	movs	r0, #0
 800ebba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ec94 <_malloc_r+0xfc>
 800ebc2:	f000 f869 	bl	800ec98 <__malloc_lock>
 800ebc6:	f8d8 3000 	ldr.w	r3, [r8]
 800ebca:	461c      	mov	r4, r3
 800ebcc:	bb44      	cbnz	r4, 800ec20 <_malloc_r+0x88>
 800ebce:	4629      	mov	r1, r5
 800ebd0:	4630      	mov	r0, r6
 800ebd2:	f7ff ffbf 	bl	800eb54 <sbrk_aligned>
 800ebd6:	1c43      	adds	r3, r0, #1
 800ebd8:	4604      	mov	r4, r0
 800ebda:	d158      	bne.n	800ec8e <_malloc_r+0xf6>
 800ebdc:	f8d8 4000 	ldr.w	r4, [r8]
 800ebe0:	4627      	mov	r7, r4
 800ebe2:	2f00      	cmp	r7, #0
 800ebe4:	d143      	bne.n	800ec6e <_malloc_r+0xd6>
 800ebe6:	2c00      	cmp	r4, #0
 800ebe8:	d04b      	beq.n	800ec82 <_malloc_r+0xea>
 800ebea:	6823      	ldr	r3, [r4, #0]
 800ebec:	4639      	mov	r1, r7
 800ebee:	4630      	mov	r0, r6
 800ebf0:	eb04 0903 	add.w	r9, r4, r3
 800ebf4:	f001 ff9a 	bl	8010b2c <_sbrk_r>
 800ebf8:	4581      	cmp	r9, r0
 800ebfa:	d142      	bne.n	800ec82 <_malloc_r+0xea>
 800ebfc:	6821      	ldr	r1, [r4, #0]
 800ebfe:	1a6d      	subs	r5, r5, r1
 800ec00:	4629      	mov	r1, r5
 800ec02:	4630      	mov	r0, r6
 800ec04:	f7ff ffa6 	bl	800eb54 <sbrk_aligned>
 800ec08:	3001      	adds	r0, #1
 800ec0a:	d03a      	beq.n	800ec82 <_malloc_r+0xea>
 800ec0c:	6823      	ldr	r3, [r4, #0]
 800ec0e:	442b      	add	r3, r5
 800ec10:	6023      	str	r3, [r4, #0]
 800ec12:	f8d8 3000 	ldr.w	r3, [r8]
 800ec16:	685a      	ldr	r2, [r3, #4]
 800ec18:	bb62      	cbnz	r2, 800ec74 <_malloc_r+0xdc>
 800ec1a:	f8c8 7000 	str.w	r7, [r8]
 800ec1e:	e00f      	b.n	800ec40 <_malloc_r+0xa8>
 800ec20:	6822      	ldr	r2, [r4, #0]
 800ec22:	1b52      	subs	r2, r2, r5
 800ec24:	d420      	bmi.n	800ec68 <_malloc_r+0xd0>
 800ec26:	2a0b      	cmp	r2, #11
 800ec28:	d917      	bls.n	800ec5a <_malloc_r+0xc2>
 800ec2a:	1961      	adds	r1, r4, r5
 800ec2c:	42a3      	cmp	r3, r4
 800ec2e:	6025      	str	r5, [r4, #0]
 800ec30:	bf18      	it	ne
 800ec32:	6059      	strne	r1, [r3, #4]
 800ec34:	6863      	ldr	r3, [r4, #4]
 800ec36:	bf08      	it	eq
 800ec38:	f8c8 1000 	streq.w	r1, [r8]
 800ec3c:	5162      	str	r2, [r4, r5]
 800ec3e:	604b      	str	r3, [r1, #4]
 800ec40:	4630      	mov	r0, r6
 800ec42:	f000 f82f 	bl	800eca4 <__malloc_unlock>
 800ec46:	f104 000b 	add.w	r0, r4, #11
 800ec4a:	1d23      	adds	r3, r4, #4
 800ec4c:	f020 0007 	bic.w	r0, r0, #7
 800ec50:	1ac2      	subs	r2, r0, r3
 800ec52:	bf1c      	itt	ne
 800ec54:	1a1b      	subne	r3, r3, r0
 800ec56:	50a3      	strne	r3, [r4, r2]
 800ec58:	e7af      	b.n	800ebba <_malloc_r+0x22>
 800ec5a:	6862      	ldr	r2, [r4, #4]
 800ec5c:	42a3      	cmp	r3, r4
 800ec5e:	bf0c      	ite	eq
 800ec60:	f8c8 2000 	streq.w	r2, [r8]
 800ec64:	605a      	strne	r2, [r3, #4]
 800ec66:	e7eb      	b.n	800ec40 <_malloc_r+0xa8>
 800ec68:	4623      	mov	r3, r4
 800ec6a:	6864      	ldr	r4, [r4, #4]
 800ec6c:	e7ae      	b.n	800ebcc <_malloc_r+0x34>
 800ec6e:	463c      	mov	r4, r7
 800ec70:	687f      	ldr	r7, [r7, #4]
 800ec72:	e7b6      	b.n	800ebe2 <_malloc_r+0x4a>
 800ec74:	461a      	mov	r2, r3
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	42a3      	cmp	r3, r4
 800ec7a:	d1fb      	bne.n	800ec74 <_malloc_r+0xdc>
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	6053      	str	r3, [r2, #4]
 800ec80:	e7de      	b.n	800ec40 <_malloc_r+0xa8>
 800ec82:	230c      	movs	r3, #12
 800ec84:	6033      	str	r3, [r6, #0]
 800ec86:	4630      	mov	r0, r6
 800ec88:	f000 f80c 	bl	800eca4 <__malloc_unlock>
 800ec8c:	e794      	b.n	800ebb8 <_malloc_r+0x20>
 800ec8e:	6005      	str	r5, [r0, #0]
 800ec90:	e7d6      	b.n	800ec40 <_malloc_r+0xa8>
 800ec92:	bf00      	nop
 800ec94:	20003964 	.word	0x20003964

0800ec98 <__malloc_lock>:
 800ec98:	4801      	ldr	r0, [pc, #4]	@ (800eca0 <__malloc_lock+0x8>)
 800ec9a:	f7ff b888 	b.w	800ddae <__retarget_lock_acquire_recursive>
 800ec9e:	bf00      	nop
 800eca0:	2000395c 	.word	0x2000395c

0800eca4 <__malloc_unlock>:
 800eca4:	4801      	ldr	r0, [pc, #4]	@ (800ecac <__malloc_unlock+0x8>)
 800eca6:	f7ff b883 	b.w	800ddb0 <__retarget_lock_release_recursive>
 800ecaa:	bf00      	nop
 800ecac:	2000395c 	.word	0x2000395c

0800ecb0 <_Balloc>:
 800ecb0:	b570      	push	{r4, r5, r6, lr}
 800ecb2:	69c6      	ldr	r6, [r0, #28]
 800ecb4:	4604      	mov	r4, r0
 800ecb6:	460d      	mov	r5, r1
 800ecb8:	b976      	cbnz	r6, 800ecd8 <_Balloc+0x28>
 800ecba:	2010      	movs	r0, #16
 800ecbc:	f7ff ff42 	bl	800eb44 <malloc>
 800ecc0:	4602      	mov	r2, r0
 800ecc2:	61e0      	str	r0, [r4, #28]
 800ecc4:	b920      	cbnz	r0, 800ecd0 <_Balloc+0x20>
 800ecc6:	4b18      	ldr	r3, [pc, #96]	@ (800ed28 <_Balloc+0x78>)
 800ecc8:	4818      	ldr	r0, [pc, #96]	@ (800ed2c <_Balloc+0x7c>)
 800ecca:	216b      	movs	r1, #107	@ 0x6b
 800eccc:	f7ff f886 	bl	800dddc <__assert_func>
 800ecd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ecd4:	6006      	str	r6, [r0, #0]
 800ecd6:	60c6      	str	r6, [r0, #12]
 800ecd8:	69e6      	ldr	r6, [r4, #28]
 800ecda:	68f3      	ldr	r3, [r6, #12]
 800ecdc:	b183      	cbz	r3, 800ed00 <_Balloc+0x50>
 800ecde:	69e3      	ldr	r3, [r4, #28]
 800ece0:	68db      	ldr	r3, [r3, #12]
 800ece2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ece6:	b9b8      	cbnz	r0, 800ed18 <_Balloc+0x68>
 800ece8:	2101      	movs	r1, #1
 800ecea:	fa01 f605 	lsl.w	r6, r1, r5
 800ecee:	1d72      	adds	r2, r6, #5
 800ecf0:	0092      	lsls	r2, r2, #2
 800ecf2:	4620      	mov	r0, r4
 800ecf4:	f001 ff3b 	bl	8010b6e <_calloc_r>
 800ecf8:	b160      	cbz	r0, 800ed14 <_Balloc+0x64>
 800ecfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ecfe:	e00e      	b.n	800ed1e <_Balloc+0x6e>
 800ed00:	2221      	movs	r2, #33	@ 0x21
 800ed02:	2104      	movs	r1, #4
 800ed04:	4620      	mov	r0, r4
 800ed06:	f001 ff32 	bl	8010b6e <_calloc_r>
 800ed0a:	69e3      	ldr	r3, [r4, #28]
 800ed0c:	60f0      	str	r0, [r6, #12]
 800ed0e:	68db      	ldr	r3, [r3, #12]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d1e4      	bne.n	800ecde <_Balloc+0x2e>
 800ed14:	2000      	movs	r0, #0
 800ed16:	bd70      	pop	{r4, r5, r6, pc}
 800ed18:	6802      	ldr	r2, [r0, #0]
 800ed1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ed1e:	2300      	movs	r3, #0
 800ed20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ed24:	e7f7      	b.n	800ed16 <_Balloc+0x66>
 800ed26:	bf00      	nop
 800ed28:	0801184a 	.word	0x0801184a
 800ed2c:	080118ca 	.word	0x080118ca

0800ed30 <_Bfree>:
 800ed30:	b570      	push	{r4, r5, r6, lr}
 800ed32:	69c6      	ldr	r6, [r0, #28]
 800ed34:	4605      	mov	r5, r0
 800ed36:	460c      	mov	r4, r1
 800ed38:	b976      	cbnz	r6, 800ed58 <_Bfree+0x28>
 800ed3a:	2010      	movs	r0, #16
 800ed3c:	f7ff ff02 	bl	800eb44 <malloc>
 800ed40:	4602      	mov	r2, r0
 800ed42:	61e8      	str	r0, [r5, #28]
 800ed44:	b920      	cbnz	r0, 800ed50 <_Bfree+0x20>
 800ed46:	4b09      	ldr	r3, [pc, #36]	@ (800ed6c <_Bfree+0x3c>)
 800ed48:	4809      	ldr	r0, [pc, #36]	@ (800ed70 <_Bfree+0x40>)
 800ed4a:	218f      	movs	r1, #143	@ 0x8f
 800ed4c:	f7ff f846 	bl	800dddc <__assert_func>
 800ed50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ed54:	6006      	str	r6, [r0, #0]
 800ed56:	60c6      	str	r6, [r0, #12]
 800ed58:	b13c      	cbz	r4, 800ed6a <_Bfree+0x3a>
 800ed5a:	69eb      	ldr	r3, [r5, #28]
 800ed5c:	6862      	ldr	r2, [r4, #4]
 800ed5e:	68db      	ldr	r3, [r3, #12]
 800ed60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ed64:	6021      	str	r1, [r4, #0]
 800ed66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ed6a:	bd70      	pop	{r4, r5, r6, pc}
 800ed6c:	0801184a 	.word	0x0801184a
 800ed70:	080118ca 	.word	0x080118ca

0800ed74 <__multadd>:
 800ed74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed78:	690d      	ldr	r5, [r1, #16]
 800ed7a:	4607      	mov	r7, r0
 800ed7c:	460c      	mov	r4, r1
 800ed7e:	461e      	mov	r6, r3
 800ed80:	f101 0c14 	add.w	ip, r1, #20
 800ed84:	2000      	movs	r0, #0
 800ed86:	f8dc 3000 	ldr.w	r3, [ip]
 800ed8a:	b299      	uxth	r1, r3
 800ed8c:	fb02 6101 	mla	r1, r2, r1, r6
 800ed90:	0c1e      	lsrs	r6, r3, #16
 800ed92:	0c0b      	lsrs	r3, r1, #16
 800ed94:	fb02 3306 	mla	r3, r2, r6, r3
 800ed98:	b289      	uxth	r1, r1
 800ed9a:	3001      	adds	r0, #1
 800ed9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eda0:	4285      	cmp	r5, r0
 800eda2:	f84c 1b04 	str.w	r1, [ip], #4
 800eda6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800edaa:	dcec      	bgt.n	800ed86 <__multadd+0x12>
 800edac:	b30e      	cbz	r6, 800edf2 <__multadd+0x7e>
 800edae:	68a3      	ldr	r3, [r4, #8]
 800edb0:	42ab      	cmp	r3, r5
 800edb2:	dc19      	bgt.n	800ede8 <__multadd+0x74>
 800edb4:	6861      	ldr	r1, [r4, #4]
 800edb6:	4638      	mov	r0, r7
 800edb8:	3101      	adds	r1, #1
 800edba:	f7ff ff79 	bl	800ecb0 <_Balloc>
 800edbe:	4680      	mov	r8, r0
 800edc0:	b928      	cbnz	r0, 800edce <__multadd+0x5a>
 800edc2:	4602      	mov	r2, r0
 800edc4:	4b0c      	ldr	r3, [pc, #48]	@ (800edf8 <__multadd+0x84>)
 800edc6:	480d      	ldr	r0, [pc, #52]	@ (800edfc <__multadd+0x88>)
 800edc8:	21ba      	movs	r1, #186	@ 0xba
 800edca:	f7ff f807 	bl	800dddc <__assert_func>
 800edce:	6922      	ldr	r2, [r4, #16]
 800edd0:	3202      	adds	r2, #2
 800edd2:	f104 010c 	add.w	r1, r4, #12
 800edd6:	0092      	lsls	r2, r2, #2
 800edd8:	300c      	adds	r0, #12
 800edda:	f7fe ffea 	bl	800ddb2 <memcpy>
 800edde:	4621      	mov	r1, r4
 800ede0:	4638      	mov	r0, r7
 800ede2:	f7ff ffa5 	bl	800ed30 <_Bfree>
 800ede6:	4644      	mov	r4, r8
 800ede8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800edec:	3501      	adds	r5, #1
 800edee:	615e      	str	r6, [r3, #20]
 800edf0:	6125      	str	r5, [r4, #16]
 800edf2:	4620      	mov	r0, r4
 800edf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edf8:	080118b9 	.word	0x080118b9
 800edfc:	080118ca 	.word	0x080118ca

0800ee00 <__s2b>:
 800ee00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee04:	460c      	mov	r4, r1
 800ee06:	4615      	mov	r5, r2
 800ee08:	461f      	mov	r7, r3
 800ee0a:	2209      	movs	r2, #9
 800ee0c:	3308      	adds	r3, #8
 800ee0e:	4606      	mov	r6, r0
 800ee10:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee14:	2100      	movs	r1, #0
 800ee16:	2201      	movs	r2, #1
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	db09      	blt.n	800ee30 <__s2b+0x30>
 800ee1c:	4630      	mov	r0, r6
 800ee1e:	f7ff ff47 	bl	800ecb0 <_Balloc>
 800ee22:	b940      	cbnz	r0, 800ee36 <__s2b+0x36>
 800ee24:	4602      	mov	r2, r0
 800ee26:	4b19      	ldr	r3, [pc, #100]	@ (800ee8c <__s2b+0x8c>)
 800ee28:	4819      	ldr	r0, [pc, #100]	@ (800ee90 <__s2b+0x90>)
 800ee2a:	21d3      	movs	r1, #211	@ 0xd3
 800ee2c:	f7fe ffd6 	bl	800dddc <__assert_func>
 800ee30:	0052      	lsls	r2, r2, #1
 800ee32:	3101      	adds	r1, #1
 800ee34:	e7f0      	b.n	800ee18 <__s2b+0x18>
 800ee36:	9b08      	ldr	r3, [sp, #32]
 800ee38:	6143      	str	r3, [r0, #20]
 800ee3a:	2d09      	cmp	r5, #9
 800ee3c:	f04f 0301 	mov.w	r3, #1
 800ee40:	6103      	str	r3, [r0, #16]
 800ee42:	dd16      	ble.n	800ee72 <__s2b+0x72>
 800ee44:	f104 0909 	add.w	r9, r4, #9
 800ee48:	46c8      	mov	r8, r9
 800ee4a:	442c      	add	r4, r5
 800ee4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ee50:	4601      	mov	r1, r0
 800ee52:	3b30      	subs	r3, #48	@ 0x30
 800ee54:	220a      	movs	r2, #10
 800ee56:	4630      	mov	r0, r6
 800ee58:	f7ff ff8c 	bl	800ed74 <__multadd>
 800ee5c:	45a0      	cmp	r8, r4
 800ee5e:	d1f5      	bne.n	800ee4c <__s2b+0x4c>
 800ee60:	f1a5 0408 	sub.w	r4, r5, #8
 800ee64:	444c      	add	r4, r9
 800ee66:	1b2d      	subs	r5, r5, r4
 800ee68:	1963      	adds	r3, r4, r5
 800ee6a:	42bb      	cmp	r3, r7
 800ee6c:	db04      	blt.n	800ee78 <__s2b+0x78>
 800ee6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee72:	340a      	adds	r4, #10
 800ee74:	2509      	movs	r5, #9
 800ee76:	e7f6      	b.n	800ee66 <__s2b+0x66>
 800ee78:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ee7c:	4601      	mov	r1, r0
 800ee7e:	3b30      	subs	r3, #48	@ 0x30
 800ee80:	220a      	movs	r2, #10
 800ee82:	4630      	mov	r0, r6
 800ee84:	f7ff ff76 	bl	800ed74 <__multadd>
 800ee88:	e7ee      	b.n	800ee68 <__s2b+0x68>
 800ee8a:	bf00      	nop
 800ee8c:	080118b9 	.word	0x080118b9
 800ee90:	080118ca 	.word	0x080118ca

0800ee94 <__hi0bits>:
 800ee94:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ee98:	4603      	mov	r3, r0
 800ee9a:	bf36      	itet	cc
 800ee9c:	0403      	lslcc	r3, r0, #16
 800ee9e:	2000      	movcs	r0, #0
 800eea0:	2010      	movcc	r0, #16
 800eea2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eea6:	bf3c      	itt	cc
 800eea8:	021b      	lslcc	r3, r3, #8
 800eeaa:	3008      	addcc	r0, #8
 800eeac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eeb0:	bf3c      	itt	cc
 800eeb2:	011b      	lslcc	r3, r3, #4
 800eeb4:	3004      	addcc	r0, #4
 800eeb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eeba:	bf3c      	itt	cc
 800eebc:	009b      	lslcc	r3, r3, #2
 800eebe:	3002      	addcc	r0, #2
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	db05      	blt.n	800eed0 <__hi0bits+0x3c>
 800eec4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800eec8:	f100 0001 	add.w	r0, r0, #1
 800eecc:	bf08      	it	eq
 800eece:	2020      	moveq	r0, #32
 800eed0:	4770      	bx	lr

0800eed2 <__lo0bits>:
 800eed2:	6803      	ldr	r3, [r0, #0]
 800eed4:	4602      	mov	r2, r0
 800eed6:	f013 0007 	ands.w	r0, r3, #7
 800eeda:	d00b      	beq.n	800eef4 <__lo0bits+0x22>
 800eedc:	07d9      	lsls	r1, r3, #31
 800eede:	d421      	bmi.n	800ef24 <__lo0bits+0x52>
 800eee0:	0798      	lsls	r0, r3, #30
 800eee2:	bf49      	itett	mi
 800eee4:	085b      	lsrmi	r3, r3, #1
 800eee6:	089b      	lsrpl	r3, r3, #2
 800eee8:	2001      	movmi	r0, #1
 800eeea:	6013      	strmi	r3, [r2, #0]
 800eeec:	bf5c      	itt	pl
 800eeee:	6013      	strpl	r3, [r2, #0]
 800eef0:	2002      	movpl	r0, #2
 800eef2:	4770      	bx	lr
 800eef4:	b299      	uxth	r1, r3
 800eef6:	b909      	cbnz	r1, 800eefc <__lo0bits+0x2a>
 800eef8:	0c1b      	lsrs	r3, r3, #16
 800eefa:	2010      	movs	r0, #16
 800eefc:	b2d9      	uxtb	r1, r3
 800eefe:	b909      	cbnz	r1, 800ef04 <__lo0bits+0x32>
 800ef00:	3008      	adds	r0, #8
 800ef02:	0a1b      	lsrs	r3, r3, #8
 800ef04:	0719      	lsls	r1, r3, #28
 800ef06:	bf04      	itt	eq
 800ef08:	091b      	lsreq	r3, r3, #4
 800ef0a:	3004      	addeq	r0, #4
 800ef0c:	0799      	lsls	r1, r3, #30
 800ef0e:	bf04      	itt	eq
 800ef10:	089b      	lsreq	r3, r3, #2
 800ef12:	3002      	addeq	r0, #2
 800ef14:	07d9      	lsls	r1, r3, #31
 800ef16:	d403      	bmi.n	800ef20 <__lo0bits+0x4e>
 800ef18:	085b      	lsrs	r3, r3, #1
 800ef1a:	f100 0001 	add.w	r0, r0, #1
 800ef1e:	d003      	beq.n	800ef28 <__lo0bits+0x56>
 800ef20:	6013      	str	r3, [r2, #0]
 800ef22:	4770      	bx	lr
 800ef24:	2000      	movs	r0, #0
 800ef26:	4770      	bx	lr
 800ef28:	2020      	movs	r0, #32
 800ef2a:	4770      	bx	lr

0800ef2c <__i2b>:
 800ef2c:	b510      	push	{r4, lr}
 800ef2e:	460c      	mov	r4, r1
 800ef30:	2101      	movs	r1, #1
 800ef32:	f7ff febd 	bl	800ecb0 <_Balloc>
 800ef36:	4602      	mov	r2, r0
 800ef38:	b928      	cbnz	r0, 800ef46 <__i2b+0x1a>
 800ef3a:	4b05      	ldr	r3, [pc, #20]	@ (800ef50 <__i2b+0x24>)
 800ef3c:	4805      	ldr	r0, [pc, #20]	@ (800ef54 <__i2b+0x28>)
 800ef3e:	f240 1145 	movw	r1, #325	@ 0x145
 800ef42:	f7fe ff4b 	bl	800dddc <__assert_func>
 800ef46:	2301      	movs	r3, #1
 800ef48:	6144      	str	r4, [r0, #20]
 800ef4a:	6103      	str	r3, [r0, #16]
 800ef4c:	bd10      	pop	{r4, pc}
 800ef4e:	bf00      	nop
 800ef50:	080118b9 	.word	0x080118b9
 800ef54:	080118ca 	.word	0x080118ca

0800ef58 <__multiply>:
 800ef58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef5c:	4614      	mov	r4, r2
 800ef5e:	690a      	ldr	r2, [r1, #16]
 800ef60:	6923      	ldr	r3, [r4, #16]
 800ef62:	429a      	cmp	r2, r3
 800ef64:	bfa8      	it	ge
 800ef66:	4623      	movge	r3, r4
 800ef68:	460f      	mov	r7, r1
 800ef6a:	bfa4      	itt	ge
 800ef6c:	460c      	movge	r4, r1
 800ef6e:	461f      	movge	r7, r3
 800ef70:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ef74:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ef78:	68a3      	ldr	r3, [r4, #8]
 800ef7a:	6861      	ldr	r1, [r4, #4]
 800ef7c:	eb0a 0609 	add.w	r6, sl, r9
 800ef80:	42b3      	cmp	r3, r6
 800ef82:	b085      	sub	sp, #20
 800ef84:	bfb8      	it	lt
 800ef86:	3101      	addlt	r1, #1
 800ef88:	f7ff fe92 	bl	800ecb0 <_Balloc>
 800ef8c:	b930      	cbnz	r0, 800ef9c <__multiply+0x44>
 800ef8e:	4602      	mov	r2, r0
 800ef90:	4b44      	ldr	r3, [pc, #272]	@ (800f0a4 <__multiply+0x14c>)
 800ef92:	4845      	ldr	r0, [pc, #276]	@ (800f0a8 <__multiply+0x150>)
 800ef94:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ef98:	f7fe ff20 	bl	800dddc <__assert_func>
 800ef9c:	f100 0514 	add.w	r5, r0, #20
 800efa0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800efa4:	462b      	mov	r3, r5
 800efa6:	2200      	movs	r2, #0
 800efa8:	4543      	cmp	r3, r8
 800efaa:	d321      	bcc.n	800eff0 <__multiply+0x98>
 800efac:	f107 0114 	add.w	r1, r7, #20
 800efb0:	f104 0214 	add.w	r2, r4, #20
 800efb4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800efb8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800efbc:	9302      	str	r3, [sp, #8]
 800efbe:	1b13      	subs	r3, r2, r4
 800efc0:	3b15      	subs	r3, #21
 800efc2:	f023 0303 	bic.w	r3, r3, #3
 800efc6:	3304      	adds	r3, #4
 800efc8:	f104 0715 	add.w	r7, r4, #21
 800efcc:	42ba      	cmp	r2, r7
 800efce:	bf38      	it	cc
 800efd0:	2304      	movcc	r3, #4
 800efd2:	9301      	str	r3, [sp, #4]
 800efd4:	9b02      	ldr	r3, [sp, #8]
 800efd6:	9103      	str	r1, [sp, #12]
 800efd8:	428b      	cmp	r3, r1
 800efda:	d80c      	bhi.n	800eff6 <__multiply+0x9e>
 800efdc:	2e00      	cmp	r6, #0
 800efde:	dd03      	ble.n	800efe8 <__multiply+0x90>
 800efe0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d05b      	beq.n	800f0a0 <__multiply+0x148>
 800efe8:	6106      	str	r6, [r0, #16]
 800efea:	b005      	add	sp, #20
 800efec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eff0:	f843 2b04 	str.w	r2, [r3], #4
 800eff4:	e7d8      	b.n	800efa8 <__multiply+0x50>
 800eff6:	f8b1 a000 	ldrh.w	sl, [r1]
 800effa:	f1ba 0f00 	cmp.w	sl, #0
 800effe:	d024      	beq.n	800f04a <__multiply+0xf2>
 800f000:	f104 0e14 	add.w	lr, r4, #20
 800f004:	46a9      	mov	r9, r5
 800f006:	f04f 0c00 	mov.w	ip, #0
 800f00a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f00e:	f8d9 3000 	ldr.w	r3, [r9]
 800f012:	fa1f fb87 	uxth.w	fp, r7
 800f016:	b29b      	uxth	r3, r3
 800f018:	fb0a 330b 	mla	r3, sl, fp, r3
 800f01c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f020:	f8d9 7000 	ldr.w	r7, [r9]
 800f024:	4463      	add	r3, ip
 800f026:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f02a:	fb0a c70b 	mla	r7, sl, fp, ip
 800f02e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f032:	b29b      	uxth	r3, r3
 800f034:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f038:	4572      	cmp	r2, lr
 800f03a:	f849 3b04 	str.w	r3, [r9], #4
 800f03e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f042:	d8e2      	bhi.n	800f00a <__multiply+0xb2>
 800f044:	9b01      	ldr	r3, [sp, #4]
 800f046:	f845 c003 	str.w	ip, [r5, r3]
 800f04a:	9b03      	ldr	r3, [sp, #12]
 800f04c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f050:	3104      	adds	r1, #4
 800f052:	f1b9 0f00 	cmp.w	r9, #0
 800f056:	d021      	beq.n	800f09c <__multiply+0x144>
 800f058:	682b      	ldr	r3, [r5, #0]
 800f05a:	f104 0c14 	add.w	ip, r4, #20
 800f05e:	46ae      	mov	lr, r5
 800f060:	f04f 0a00 	mov.w	sl, #0
 800f064:	f8bc b000 	ldrh.w	fp, [ip]
 800f068:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f06c:	fb09 770b 	mla	r7, r9, fp, r7
 800f070:	4457      	add	r7, sl
 800f072:	b29b      	uxth	r3, r3
 800f074:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f078:	f84e 3b04 	str.w	r3, [lr], #4
 800f07c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f080:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f084:	f8be 3000 	ldrh.w	r3, [lr]
 800f088:	fb09 330a 	mla	r3, r9, sl, r3
 800f08c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f090:	4562      	cmp	r2, ip
 800f092:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f096:	d8e5      	bhi.n	800f064 <__multiply+0x10c>
 800f098:	9f01      	ldr	r7, [sp, #4]
 800f09a:	51eb      	str	r3, [r5, r7]
 800f09c:	3504      	adds	r5, #4
 800f09e:	e799      	b.n	800efd4 <__multiply+0x7c>
 800f0a0:	3e01      	subs	r6, #1
 800f0a2:	e79b      	b.n	800efdc <__multiply+0x84>
 800f0a4:	080118b9 	.word	0x080118b9
 800f0a8:	080118ca 	.word	0x080118ca

0800f0ac <__pow5mult>:
 800f0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0b0:	4615      	mov	r5, r2
 800f0b2:	f012 0203 	ands.w	r2, r2, #3
 800f0b6:	4607      	mov	r7, r0
 800f0b8:	460e      	mov	r6, r1
 800f0ba:	d007      	beq.n	800f0cc <__pow5mult+0x20>
 800f0bc:	4c25      	ldr	r4, [pc, #148]	@ (800f154 <__pow5mult+0xa8>)
 800f0be:	3a01      	subs	r2, #1
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f0c6:	f7ff fe55 	bl	800ed74 <__multadd>
 800f0ca:	4606      	mov	r6, r0
 800f0cc:	10ad      	asrs	r5, r5, #2
 800f0ce:	d03d      	beq.n	800f14c <__pow5mult+0xa0>
 800f0d0:	69fc      	ldr	r4, [r7, #28]
 800f0d2:	b97c      	cbnz	r4, 800f0f4 <__pow5mult+0x48>
 800f0d4:	2010      	movs	r0, #16
 800f0d6:	f7ff fd35 	bl	800eb44 <malloc>
 800f0da:	4602      	mov	r2, r0
 800f0dc:	61f8      	str	r0, [r7, #28]
 800f0de:	b928      	cbnz	r0, 800f0ec <__pow5mult+0x40>
 800f0e0:	4b1d      	ldr	r3, [pc, #116]	@ (800f158 <__pow5mult+0xac>)
 800f0e2:	481e      	ldr	r0, [pc, #120]	@ (800f15c <__pow5mult+0xb0>)
 800f0e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f0e8:	f7fe fe78 	bl	800dddc <__assert_func>
 800f0ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f0f0:	6004      	str	r4, [r0, #0]
 800f0f2:	60c4      	str	r4, [r0, #12]
 800f0f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f0f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f0fc:	b94c      	cbnz	r4, 800f112 <__pow5mult+0x66>
 800f0fe:	f240 2171 	movw	r1, #625	@ 0x271
 800f102:	4638      	mov	r0, r7
 800f104:	f7ff ff12 	bl	800ef2c <__i2b>
 800f108:	2300      	movs	r3, #0
 800f10a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f10e:	4604      	mov	r4, r0
 800f110:	6003      	str	r3, [r0, #0]
 800f112:	f04f 0900 	mov.w	r9, #0
 800f116:	07eb      	lsls	r3, r5, #31
 800f118:	d50a      	bpl.n	800f130 <__pow5mult+0x84>
 800f11a:	4631      	mov	r1, r6
 800f11c:	4622      	mov	r2, r4
 800f11e:	4638      	mov	r0, r7
 800f120:	f7ff ff1a 	bl	800ef58 <__multiply>
 800f124:	4631      	mov	r1, r6
 800f126:	4680      	mov	r8, r0
 800f128:	4638      	mov	r0, r7
 800f12a:	f7ff fe01 	bl	800ed30 <_Bfree>
 800f12e:	4646      	mov	r6, r8
 800f130:	106d      	asrs	r5, r5, #1
 800f132:	d00b      	beq.n	800f14c <__pow5mult+0xa0>
 800f134:	6820      	ldr	r0, [r4, #0]
 800f136:	b938      	cbnz	r0, 800f148 <__pow5mult+0x9c>
 800f138:	4622      	mov	r2, r4
 800f13a:	4621      	mov	r1, r4
 800f13c:	4638      	mov	r0, r7
 800f13e:	f7ff ff0b 	bl	800ef58 <__multiply>
 800f142:	6020      	str	r0, [r4, #0]
 800f144:	f8c0 9000 	str.w	r9, [r0]
 800f148:	4604      	mov	r4, r0
 800f14a:	e7e4      	b.n	800f116 <__pow5mult+0x6a>
 800f14c:	4630      	mov	r0, r6
 800f14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f152:	bf00      	nop
 800f154:	08011924 	.word	0x08011924
 800f158:	0801184a 	.word	0x0801184a
 800f15c:	080118ca 	.word	0x080118ca

0800f160 <__lshift>:
 800f160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f164:	460c      	mov	r4, r1
 800f166:	6849      	ldr	r1, [r1, #4]
 800f168:	6923      	ldr	r3, [r4, #16]
 800f16a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f16e:	68a3      	ldr	r3, [r4, #8]
 800f170:	4607      	mov	r7, r0
 800f172:	4691      	mov	r9, r2
 800f174:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f178:	f108 0601 	add.w	r6, r8, #1
 800f17c:	42b3      	cmp	r3, r6
 800f17e:	db0b      	blt.n	800f198 <__lshift+0x38>
 800f180:	4638      	mov	r0, r7
 800f182:	f7ff fd95 	bl	800ecb0 <_Balloc>
 800f186:	4605      	mov	r5, r0
 800f188:	b948      	cbnz	r0, 800f19e <__lshift+0x3e>
 800f18a:	4602      	mov	r2, r0
 800f18c:	4b28      	ldr	r3, [pc, #160]	@ (800f230 <__lshift+0xd0>)
 800f18e:	4829      	ldr	r0, [pc, #164]	@ (800f234 <__lshift+0xd4>)
 800f190:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f194:	f7fe fe22 	bl	800dddc <__assert_func>
 800f198:	3101      	adds	r1, #1
 800f19a:	005b      	lsls	r3, r3, #1
 800f19c:	e7ee      	b.n	800f17c <__lshift+0x1c>
 800f19e:	2300      	movs	r3, #0
 800f1a0:	f100 0114 	add.w	r1, r0, #20
 800f1a4:	f100 0210 	add.w	r2, r0, #16
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	4553      	cmp	r3, sl
 800f1ac:	db33      	blt.n	800f216 <__lshift+0xb6>
 800f1ae:	6920      	ldr	r0, [r4, #16]
 800f1b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f1b4:	f104 0314 	add.w	r3, r4, #20
 800f1b8:	f019 091f 	ands.w	r9, r9, #31
 800f1bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f1c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f1c4:	d02b      	beq.n	800f21e <__lshift+0xbe>
 800f1c6:	f1c9 0e20 	rsb	lr, r9, #32
 800f1ca:	468a      	mov	sl, r1
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	6818      	ldr	r0, [r3, #0]
 800f1d0:	fa00 f009 	lsl.w	r0, r0, r9
 800f1d4:	4310      	orrs	r0, r2
 800f1d6:	f84a 0b04 	str.w	r0, [sl], #4
 800f1da:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1de:	459c      	cmp	ip, r3
 800f1e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800f1e4:	d8f3      	bhi.n	800f1ce <__lshift+0x6e>
 800f1e6:	ebac 0304 	sub.w	r3, ip, r4
 800f1ea:	3b15      	subs	r3, #21
 800f1ec:	f023 0303 	bic.w	r3, r3, #3
 800f1f0:	3304      	adds	r3, #4
 800f1f2:	f104 0015 	add.w	r0, r4, #21
 800f1f6:	4584      	cmp	ip, r0
 800f1f8:	bf38      	it	cc
 800f1fa:	2304      	movcc	r3, #4
 800f1fc:	50ca      	str	r2, [r1, r3]
 800f1fe:	b10a      	cbz	r2, 800f204 <__lshift+0xa4>
 800f200:	f108 0602 	add.w	r6, r8, #2
 800f204:	3e01      	subs	r6, #1
 800f206:	4638      	mov	r0, r7
 800f208:	612e      	str	r6, [r5, #16]
 800f20a:	4621      	mov	r1, r4
 800f20c:	f7ff fd90 	bl	800ed30 <_Bfree>
 800f210:	4628      	mov	r0, r5
 800f212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f216:	f842 0f04 	str.w	r0, [r2, #4]!
 800f21a:	3301      	adds	r3, #1
 800f21c:	e7c5      	b.n	800f1aa <__lshift+0x4a>
 800f21e:	3904      	subs	r1, #4
 800f220:	f853 2b04 	ldr.w	r2, [r3], #4
 800f224:	f841 2f04 	str.w	r2, [r1, #4]!
 800f228:	459c      	cmp	ip, r3
 800f22a:	d8f9      	bhi.n	800f220 <__lshift+0xc0>
 800f22c:	e7ea      	b.n	800f204 <__lshift+0xa4>
 800f22e:	bf00      	nop
 800f230:	080118b9 	.word	0x080118b9
 800f234:	080118ca 	.word	0x080118ca

0800f238 <__mcmp>:
 800f238:	690a      	ldr	r2, [r1, #16]
 800f23a:	4603      	mov	r3, r0
 800f23c:	6900      	ldr	r0, [r0, #16]
 800f23e:	1a80      	subs	r0, r0, r2
 800f240:	b530      	push	{r4, r5, lr}
 800f242:	d10e      	bne.n	800f262 <__mcmp+0x2a>
 800f244:	3314      	adds	r3, #20
 800f246:	3114      	adds	r1, #20
 800f248:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f24c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f250:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f254:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f258:	4295      	cmp	r5, r2
 800f25a:	d003      	beq.n	800f264 <__mcmp+0x2c>
 800f25c:	d205      	bcs.n	800f26a <__mcmp+0x32>
 800f25e:	f04f 30ff 	mov.w	r0, #4294967295
 800f262:	bd30      	pop	{r4, r5, pc}
 800f264:	42a3      	cmp	r3, r4
 800f266:	d3f3      	bcc.n	800f250 <__mcmp+0x18>
 800f268:	e7fb      	b.n	800f262 <__mcmp+0x2a>
 800f26a:	2001      	movs	r0, #1
 800f26c:	e7f9      	b.n	800f262 <__mcmp+0x2a>
	...

0800f270 <__mdiff>:
 800f270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f274:	4689      	mov	r9, r1
 800f276:	4606      	mov	r6, r0
 800f278:	4611      	mov	r1, r2
 800f27a:	4648      	mov	r0, r9
 800f27c:	4614      	mov	r4, r2
 800f27e:	f7ff ffdb 	bl	800f238 <__mcmp>
 800f282:	1e05      	subs	r5, r0, #0
 800f284:	d112      	bne.n	800f2ac <__mdiff+0x3c>
 800f286:	4629      	mov	r1, r5
 800f288:	4630      	mov	r0, r6
 800f28a:	f7ff fd11 	bl	800ecb0 <_Balloc>
 800f28e:	4602      	mov	r2, r0
 800f290:	b928      	cbnz	r0, 800f29e <__mdiff+0x2e>
 800f292:	4b3f      	ldr	r3, [pc, #252]	@ (800f390 <__mdiff+0x120>)
 800f294:	f240 2137 	movw	r1, #567	@ 0x237
 800f298:	483e      	ldr	r0, [pc, #248]	@ (800f394 <__mdiff+0x124>)
 800f29a:	f7fe fd9f 	bl	800dddc <__assert_func>
 800f29e:	2301      	movs	r3, #1
 800f2a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f2a4:	4610      	mov	r0, r2
 800f2a6:	b003      	add	sp, #12
 800f2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2ac:	bfbc      	itt	lt
 800f2ae:	464b      	movlt	r3, r9
 800f2b0:	46a1      	movlt	r9, r4
 800f2b2:	4630      	mov	r0, r6
 800f2b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f2b8:	bfba      	itte	lt
 800f2ba:	461c      	movlt	r4, r3
 800f2bc:	2501      	movlt	r5, #1
 800f2be:	2500      	movge	r5, #0
 800f2c0:	f7ff fcf6 	bl	800ecb0 <_Balloc>
 800f2c4:	4602      	mov	r2, r0
 800f2c6:	b918      	cbnz	r0, 800f2d0 <__mdiff+0x60>
 800f2c8:	4b31      	ldr	r3, [pc, #196]	@ (800f390 <__mdiff+0x120>)
 800f2ca:	f240 2145 	movw	r1, #581	@ 0x245
 800f2ce:	e7e3      	b.n	800f298 <__mdiff+0x28>
 800f2d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f2d4:	6926      	ldr	r6, [r4, #16]
 800f2d6:	60c5      	str	r5, [r0, #12]
 800f2d8:	f109 0310 	add.w	r3, r9, #16
 800f2dc:	f109 0514 	add.w	r5, r9, #20
 800f2e0:	f104 0e14 	add.w	lr, r4, #20
 800f2e4:	f100 0b14 	add.w	fp, r0, #20
 800f2e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f2ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f2f0:	9301      	str	r3, [sp, #4]
 800f2f2:	46d9      	mov	r9, fp
 800f2f4:	f04f 0c00 	mov.w	ip, #0
 800f2f8:	9b01      	ldr	r3, [sp, #4]
 800f2fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f2fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f302:	9301      	str	r3, [sp, #4]
 800f304:	fa1f f38a 	uxth.w	r3, sl
 800f308:	4619      	mov	r1, r3
 800f30a:	b283      	uxth	r3, r0
 800f30c:	1acb      	subs	r3, r1, r3
 800f30e:	0c00      	lsrs	r0, r0, #16
 800f310:	4463      	add	r3, ip
 800f312:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f316:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f320:	4576      	cmp	r6, lr
 800f322:	f849 3b04 	str.w	r3, [r9], #4
 800f326:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f32a:	d8e5      	bhi.n	800f2f8 <__mdiff+0x88>
 800f32c:	1b33      	subs	r3, r6, r4
 800f32e:	3b15      	subs	r3, #21
 800f330:	f023 0303 	bic.w	r3, r3, #3
 800f334:	3415      	adds	r4, #21
 800f336:	3304      	adds	r3, #4
 800f338:	42a6      	cmp	r6, r4
 800f33a:	bf38      	it	cc
 800f33c:	2304      	movcc	r3, #4
 800f33e:	441d      	add	r5, r3
 800f340:	445b      	add	r3, fp
 800f342:	461e      	mov	r6, r3
 800f344:	462c      	mov	r4, r5
 800f346:	4544      	cmp	r4, r8
 800f348:	d30e      	bcc.n	800f368 <__mdiff+0xf8>
 800f34a:	f108 0103 	add.w	r1, r8, #3
 800f34e:	1b49      	subs	r1, r1, r5
 800f350:	f021 0103 	bic.w	r1, r1, #3
 800f354:	3d03      	subs	r5, #3
 800f356:	45a8      	cmp	r8, r5
 800f358:	bf38      	it	cc
 800f35a:	2100      	movcc	r1, #0
 800f35c:	440b      	add	r3, r1
 800f35e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f362:	b191      	cbz	r1, 800f38a <__mdiff+0x11a>
 800f364:	6117      	str	r7, [r2, #16]
 800f366:	e79d      	b.n	800f2a4 <__mdiff+0x34>
 800f368:	f854 1b04 	ldr.w	r1, [r4], #4
 800f36c:	46e6      	mov	lr, ip
 800f36e:	0c08      	lsrs	r0, r1, #16
 800f370:	fa1c fc81 	uxtah	ip, ip, r1
 800f374:	4471      	add	r1, lr
 800f376:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f37a:	b289      	uxth	r1, r1
 800f37c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f380:	f846 1b04 	str.w	r1, [r6], #4
 800f384:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f388:	e7dd      	b.n	800f346 <__mdiff+0xd6>
 800f38a:	3f01      	subs	r7, #1
 800f38c:	e7e7      	b.n	800f35e <__mdiff+0xee>
 800f38e:	bf00      	nop
 800f390:	080118b9 	.word	0x080118b9
 800f394:	080118ca 	.word	0x080118ca

0800f398 <__ulp>:
 800f398:	b082      	sub	sp, #8
 800f39a:	ed8d 0b00 	vstr	d0, [sp]
 800f39e:	9a01      	ldr	r2, [sp, #4]
 800f3a0:	4b0f      	ldr	r3, [pc, #60]	@ (800f3e0 <__ulp+0x48>)
 800f3a2:	4013      	ands	r3, r2
 800f3a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	dc08      	bgt.n	800f3be <__ulp+0x26>
 800f3ac:	425b      	negs	r3, r3
 800f3ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f3b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f3b6:	da04      	bge.n	800f3c2 <__ulp+0x2a>
 800f3b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f3bc:	4113      	asrs	r3, r2
 800f3be:	2200      	movs	r2, #0
 800f3c0:	e008      	b.n	800f3d4 <__ulp+0x3c>
 800f3c2:	f1a2 0314 	sub.w	r3, r2, #20
 800f3c6:	2b1e      	cmp	r3, #30
 800f3c8:	bfda      	itte	le
 800f3ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f3ce:	40da      	lsrle	r2, r3
 800f3d0:	2201      	movgt	r2, #1
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	4610      	mov	r0, r2
 800f3d8:	ec41 0b10 	vmov	d0, r0, r1
 800f3dc:	b002      	add	sp, #8
 800f3de:	4770      	bx	lr
 800f3e0:	7ff00000 	.word	0x7ff00000

0800f3e4 <__b2d>:
 800f3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3e8:	6906      	ldr	r6, [r0, #16]
 800f3ea:	f100 0814 	add.w	r8, r0, #20
 800f3ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f3f2:	1f37      	subs	r7, r6, #4
 800f3f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f3f8:	4610      	mov	r0, r2
 800f3fa:	f7ff fd4b 	bl	800ee94 <__hi0bits>
 800f3fe:	f1c0 0320 	rsb	r3, r0, #32
 800f402:	280a      	cmp	r0, #10
 800f404:	600b      	str	r3, [r1, #0]
 800f406:	491b      	ldr	r1, [pc, #108]	@ (800f474 <__b2d+0x90>)
 800f408:	dc15      	bgt.n	800f436 <__b2d+0x52>
 800f40a:	f1c0 0c0b 	rsb	ip, r0, #11
 800f40e:	fa22 f30c 	lsr.w	r3, r2, ip
 800f412:	45b8      	cmp	r8, r7
 800f414:	ea43 0501 	orr.w	r5, r3, r1
 800f418:	bf34      	ite	cc
 800f41a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f41e:	2300      	movcs	r3, #0
 800f420:	3015      	adds	r0, #21
 800f422:	fa02 f000 	lsl.w	r0, r2, r0
 800f426:	fa23 f30c 	lsr.w	r3, r3, ip
 800f42a:	4303      	orrs	r3, r0
 800f42c:	461c      	mov	r4, r3
 800f42e:	ec45 4b10 	vmov	d0, r4, r5
 800f432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f436:	45b8      	cmp	r8, r7
 800f438:	bf3a      	itte	cc
 800f43a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f43e:	f1a6 0708 	subcc.w	r7, r6, #8
 800f442:	2300      	movcs	r3, #0
 800f444:	380b      	subs	r0, #11
 800f446:	d012      	beq.n	800f46e <__b2d+0x8a>
 800f448:	f1c0 0120 	rsb	r1, r0, #32
 800f44c:	fa23 f401 	lsr.w	r4, r3, r1
 800f450:	4082      	lsls	r2, r0
 800f452:	4322      	orrs	r2, r4
 800f454:	4547      	cmp	r7, r8
 800f456:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f45a:	bf8c      	ite	hi
 800f45c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f460:	2200      	movls	r2, #0
 800f462:	4083      	lsls	r3, r0
 800f464:	40ca      	lsrs	r2, r1
 800f466:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f46a:	4313      	orrs	r3, r2
 800f46c:	e7de      	b.n	800f42c <__b2d+0x48>
 800f46e:	ea42 0501 	orr.w	r5, r2, r1
 800f472:	e7db      	b.n	800f42c <__b2d+0x48>
 800f474:	3ff00000 	.word	0x3ff00000

0800f478 <__d2b>:
 800f478:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f47c:	460f      	mov	r7, r1
 800f47e:	2101      	movs	r1, #1
 800f480:	ec59 8b10 	vmov	r8, r9, d0
 800f484:	4616      	mov	r6, r2
 800f486:	f7ff fc13 	bl	800ecb0 <_Balloc>
 800f48a:	4604      	mov	r4, r0
 800f48c:	b930      	cbnz	r0, 800f49c <__d2b+0x24>
 800f48e:	4602      	mov	r2, r0
 800f490:	4b23      	ldr	r3, [pc, #140]	@ (800f520 <__d2b+0xa8>)
 800f492:	4824      	ldr	r0, [pc, #144]	@ (800f524 <__d2b+0xac>)
 800f494:	f240 310f 	movw	r1, #783	@ 0x30f
 800f498:	f7fe fca0 	bl	800dddc <__assert_func>
 800f49c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f4a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f4a4:	b10d      	cbz	r5, 800f4aa <__d2b+0x32>
 800f4a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f4aa:	9301      	str	r3, [sp, #4]
 800f4ac:	f1b8 0300 	subs.w	r3, r8, #0
 800f4b0:	d023      	beq.n	800f4fa <__d2b+0x82>
 800f4b2:	4668      	mov	r0, sp
 800f4b4:	9300      	str	r3, [sp, #0]
 800f4b6:	f7ff fd0c 	bl	800eed2 <__lo0bits>
 800f4ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f4be:	b1d0      	cbz	r0, 800f4f6 <__d2b+0x7e>
 800f4c0:	f1c0 0320 	rsb	r3, r0, #32
 800f4c4:	fa02 f303 	lsl.w	r3, r2, r3
 800f4c8:	430b      	orrs	r3, r1
 800f4ca:	40c2      	lsrs	r2, r0
 800f4cc:	6163      	str	r3, [r4, #20]
 800f4ce:	9201      	str	r2, [sp, #4]
 800f4d0:	9b01      	ldr	r3, [sp, #4]
 800f4d2:	61a3      	str	r3, [r4, #24]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	bf0c      	ite	eq
 800f4d8:	2201      	moveq	r2, #1
 800f4da:	2202      	movne	r2, #2
 800f4dc:	6122      	str	r2, [r4, #16]
 800f4de:	b1a5      	cbz	r5, 800f50a <__d2b+0x92>
 800f4e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f4e4:	4405      	add	r5, r0
 800f4e6:	603d      	str	r5, [r7, #0]
 800f4e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f4ec:	6030      	str	r0, [r6, #0]
 800f4ee:	4620      	mov	r0, r4
 800f4f0:	b003      	add	sp, #12
 800f4f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f4f6:	6161      	str	r1, [r4, #20]
 800f4f8:	e7ea      	b.n	800f4d0 <__d2b+0x58>
 800f4fa:	a801      	add	r0, sp, #4
 800f4fc:	f7ff fce9 	bl	800eed2 <__lo0bits>
 800f500:	9b01      	ldr	r3, [sp, #4]
 800f502:	6163      	str	r3, [r4, #20]
 800f504:	3020      	adds	r0, #32
 800f506:	2201      	movs	r2, #1
 800f508:	e7e8      	b.n	800f4dc <__d2b+0x64>
 800f50a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f50e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f512:	6038      	str	r0, [r7, #0]
 800f514:	6918      	ldr	r0, [r3, #16]
 800f516:	f7ff fcbd 	bl	800ee94 <__hi0bits>
 800f51a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f51e:	e7e5      	b.n	800f4ec <__d2b+0x74>
 800f520:	080118b9 	.word	0x080118b9
 800f524:	080118ca 	.word	0x080118ca

0800f528 <__ratio>:
 800f528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f52c:	b085      	sub	sp, #20
 800f52e:	e9cd 1000 	strd	r1, r0, [sp]
 800f532:	a902      	add	r1, sp, #8
 800f534:	f7ff ff56 	bl	800f3e4 <__b2d>
 800f538:	9800      	ldr	r0, [sp, #0]
 800f53a:	a903      	add	r1, sp, #12
 800f53c:	ec55 4b10 	vmov	r4, r5, d0
 800f540:	f7ff ff50 	bl	800f3e4 <__b2d>
 800f544:	9b01      	ldr	r3, [sp, #4]
 800f546:	6919      	ldr	r1, [r3, #16]
 800f548:	9b00      	ldr	r3, [sp, #0]
 800f54a:	691b      	ldr	r3, [r3, #16]
 800f54c:	1ac9      	subs	r1, r1, r3
 800f54e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f552:	1a9b      	subs	r3, r3, r2
 800f554:	ec5b ab10 	vmov	sl, fp, d0
 800f558:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	bfce      	itee	gt
 800f560:	462a      	movgt	r2, r5
 800f562:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f566:	465a      	movle	r2, fp
 800f568:	462f      	mov	r7, r5
 800f56a:	46d9      	mov	r9, fp
 800f56c:	bfcc      	ite	gt
 800f56e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f572:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f576:	464b      	mov	r3, r9
 800f578:	4652      	mov	r2, sl
 800f57a:	4620      	mov	r0, r4
 800f57c:	4639      	mov	r1, r7
 800f57e:	f7f1 f965 	bl	800084c <__aeabi_ddiv>
 800f582:	ec41 0b10 	vmov	d0, r0, r1
 800f586:	b005      	add	sp, #20
 800f588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f58c <__copybits>:
 800f58c:	3901      	subs	r1, #1
 800f58e:	b570      	push	{r4, r5, r6, lr}
 800f590:	1149      	asrs	r1, r1, #5
 800f592:	6914      	ldr	r4, [r2, #16]
 800f594:	3101      	adds	r1, #1
 800f596:	f102 0314 	add.w	r3, r2, #20
 800f59a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f59e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f5a2:	1f05      	subs	r5, r0, #4
 800f5a4:	42a3      	cmp	r3, r4
 800f5a6:	d30c      	bcc.n	800f5c2 <__copybits+0x36>
 800f5a8:	1aa3      	subs	r3, r4, r2
 800f5aa:	3b11      	subs	r3, #17
 800f5ac:	f023 0303 	bic.w	r3, r3, #3
 800f5b0:	3211      	adds	r2, #17
 800f5b2:	42a2      	cmp	r2, r4
 800f5b4:	bf88      	it	hi
 800f5b6:	2300      	movhi	r3, #0
 800f5b8:	4418      	add	r0, r3
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	4288      	cmp	r0, r1
 800f5be:	d305      	bcc.n	800f5cc <__copybits+0x40>
 800f5c0:	bd70      	pop	{r4, r5, r6, pc}
 800f5c2:	f853 6b04 	ldr.w	r6, [r3], #4
 800f5c6:	f845 6f04 	str.w	r6, [r5, #4]!
 800f5ca:	e7eb      	b.n	800f5a4 <__copybits+0x18>
 800f5cc:	f840 3b04 	str.w	r3, [r0], #4
 800f5d0:	e7f4      	b.n	800f5bc <__copybits+0x30>

0800f5d2 <__any_on>:
 800f5d2:	f100 0214 	add.w	r2, r0, #20
 800f5d6:	6900      	ldr	r0, [r0, #16]
 800f5d8:	114b      	asrs	r3, r1, #5
 800f5da:	4298      	cmp	r0, r3
 800f5dc:	b510      	push	{r4, lr}
 800f5de:	db11      	blt.n	800f604 <__any_on+0x32>
 800f5e0:	dd0a      	ble.n	800f5f8 <__any_on+0x26>
 800f5e2:	f011 011f 	ands.w	r1, r1, #31
 800f5e6:	d007      	beq.n	800f5f8 <__any_on+0x26>
 800f5e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f5ec:	fa24 f001 	lsr.w	r0, r4, r1
 800f5f0:	fa00 f101 	lsl.w	r1, r0, r1
 800f5f4:	428c      	cmp	r4, r1
 800f5f6:	d10b      	bne.n	800f610 <__any_on+0x3e>
 800f5f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f5fc:	4293      	cmp	r3, r2
 800f5fe:	d803      	bhi.n	800f608 <__any_on+0x36>
 800f600:	2000      	movs	r0, #0
 800f602:	bd10      	pop	{r4, pc}
 800f604:	4603      	mov	r3, r0
 800f606:	e7f7      	b.n	800f5f8 <__any_on+0x26>
 800f608:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f60c:	2900      	cmp	r1, #0
 800f60e:	d0f5      	beq.n	800f5fc <__any_on+0x2a>
 800f610:	2001      	movs	r0, #1
 800f612:	e7f6      	b.n	800f602 <__any_on+0x30>

0800f614 <sulp>:
 800f614:	b570      	push	{r4, r5, r6, lr}
 800f616:	4604      	mov	r4, r0
 800f618:	460d      	mov	r5, r1
 800f61a:	ec45 4b10 	vmov	d0, r4, r5
 800f61e:	4616      	mov	r6, r2
 800f620:	f7ff feba 	bl	800f398 <__ulp>
 800f624:	ec51 0b10 	vmov	r0, r1, d0
 800f628:	b17e      	cbz	r6, 800f64a <sulp+0x36>
 800f62a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f62e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f632:	2b00      	cmp	r3, #0
 800f634:	dd09      	ble.n	800f64a <sulp+0x36>
 800f636:	051b      	lsls	r3, r3, #20
 800f638:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f63c:	2400      	movs	r4, #0
 800f63e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f642:	4622      	mov	r2, r4
 800f644:	462b      	mov	r3, r5
 800f646:	f7f0 ffd7 	bl	80005f8 <__aeabi_dmul>
 800f64a:	ec41 0b10 	vmov	d0, r0, r1
 800f64e:	bd70      	pop	{r4, r5, r6, pc}

0800f650 <_strtod_l>:
 800f650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f654:	b09f      	sub	sp, #124	@ 0x7c
 800f656:	460c      	mov	r4, r1
 800f658:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f65a:	2200      	movs	r2, #0
 800f65c:	921a      	str	r2, [sp, #104]	@ 0x68
 800f65e:	9005      	str	r0, [sp, #20]
 800f660:	f04f 0a00 	mov.w	sl, #0
 800f664:	f04f 0b00 	mov.w	fp, #0
 800f668:	460a      	mov	r2, r1
 800f66a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f66c:	7811      	ldrb	r1, [r2, #0]
 800f66e:	292b      	cmp	r1, #43	@ 0x2b
 800f670:	d04a      	beq.n	800f708 <_strtod_l+0xb8>
 800f672:	d838      	bhi.n	800f6e6 <_strtod_l+0x96>
 800f674:	290d      	cmp	r1, #13
 800f676:	d832      	bhi.n	800f6de <_strtod_l+0x8e>
 800f678:	2908      	cmp	r1, #8
 800f67a:	d832      	bhi.n	800f6e2 <_strtod_l+0x92>
 800f67c:	2900      	cmp	r1, #0
 800f67e:	d03b      	beq.n	800f6f8 <_strtod_l+0xa8>
 800f680:	2200      	movs	r2, #0
 800f682:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f684:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f686:	782a      	ldrb	r2, [r5, #0]
 800f688:	2a30      	cmp	r2, #48	@ 0x30
 800f68a:	f040 80b3 	bne.w	800f7f4 <_strtod_l+0x1a4>
 800f68e:	786a      	ldrb	r2, [r5, #1]
 800f690:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f694:	2a58      	cmp	r2, #88	@ 0x58
 800f696:	d16e      	bne.n	800f776 <_strtod_l+0x126>
 800f698:	9302      	str	r3, [sp, #8]
 800f69a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f69c:	9301      	str	r3, [sp, #4]
 800f69e:	ab1a      	add	r3, sp, #104	@ 0x68
 800f6a0:	9300      	str	r3, [sp, #0]
 800f6a2:	4a8e      	ldr	r2, [pc, #568]	@ (800f8dc <_strtod_l+0x28c>)
 800f6a4:	9805      	ldr	r0, [sp, #20]
 800f6a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f6a8:	a919      	add	r1, sp, #100	@ 0x64
 800f6aa:	f001 fadb 	bl	8010c64 <__gethex>
 800f6ae:	f010 060f 	ands.w	r6, r0, #15
 800f6b2:	4604      	mov	r4, r0
 800f6b4:	d005      	beq.n	800f6c2 <_strtod_l+0x72>
 800f6b6:	2e06      	cmp	r6, #6
 800f6b8:	d128      	bne.n	800f70c <_strtod_l+0xbc>
 800f6ba:	3501      	adds	r5, #1
 800f6bc:	2300      	movs	r3, #0
 800f6be:	9519      	str	r5, [sp, #100]	@ 0x64
 800f6c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f6c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	f040 858e 	bne.w	80101e6 <_strtod_l+0xb96>
 800f6ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f6cc:	b1cb      	cbz	r3, 800f702 <_strtod_l+0xb2>
 800f6ce:	4652      	mov	r2, sl
 800f6d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f6d4:	ec43 2b10 	vmov	d0, r2, r3
 800f6d8:	b01f      	add	sp, #124	@ 0x7c
 800f6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6de:	2920      	cmp	r1, #32
 800f6e0:	d1ce      	bne.n	800f680 <_strtod_l+0x30>
 800f6e2:	3201      	adds	r2, #1
 800f6e4:	e7c1      	b.n	800f66a <_strtod_l+0x1a>
 800f6e6:	292d      	cmp	r1, #45	@ 0x2d
 800f6e8:	d1ca      	bne.n	800f680 <_strtod_l+0x30>
 800f6ea:	2101      	movs	r1, #1
 800f6ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f6ee:	1c51      	adds	r1, r2, #1
 800f6f0:	9119      	str	r1, [sp, #100]	@ 0x64
 800f6f2:	7852      	ldrb	r2, [r2, #1]
 800f6f4:	2a00      	cmp	r2, #0
 800f6f6:	d1c5      	bne.n	800f684 <_strtod_l+0x34>
 800f6f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f6fa:	9419      	str	r4, [sp, #100]	@ 0x64
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	f040 8570 	bne.w	80101e2 <_strtod_l+0xb92>
 800f702:	4652      	mov	r2, sl
 800f704:	465b      	mov	r3, fp
 800f706:	e7e5      	b.n	800f6d4 <_strtod_l+0x84>
 800f708:	2100      	movs	r1, #0
 800f70a:	e7ef      	b.n	800f6ec <_strtod_l+0x9c>
 800f70c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f70e:	b13a      	cbz	r2, 800f720 <_strtod_l+0xd0>
 800f710:	2135      	movs	r1, #53	@ 0x35
 800f712:	a81c      	add	r0, sp, #112	@ 0x70
 800f714:	f7ff ff3a 	bl	800f58c <__copybits>
 800f718:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f71a:	9805      	ldr	r0, [sp, #20]
 800f71c:	f7ff fb08 	bl	800ed30 <_Bfree>
 800f720:	3e01      	subs	r6, #1
 800f722:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f724:	2e04      	cmp	r6, #4
 800f726:	d806      	bhi.n	800f736 <_strtod_l+0xe6>
 800f728:	e8df f006 	tbb	[pc, r6]
 800f72c:	201d0314 	.word	0x201d0314
 800f730:	14          	.byte	0x14
 800f731:	00          	.byte	0x00
 800f732:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f736:	05e1      	lsls	r1, r4, #23
 800f738:	bf48      	it	mi
 800f73a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f73e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f742:	0d1b      	lsrs	r3, r3, #20
 800f744:	051b      	lsls	r3, r3, #20
 800f746:	2b00      	cmp	r3, #0
 800f748:	d1bb      	bne.n	800f6c2 <_strtod_l+0x72>
 800f74a:	f7fe fb05 	bl	800dd58 <__errno>
 800f74e:	2322      	movs	r3, #34	@ 0x22
 800f750:	6003      	str	r3, [r0, #0]
 800f752:	e7b6      	b.n	800f6c2 <_strtod_l+0x72>
 800f754:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f758:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f75c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f760:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f764:	e7e7      	b.n	800f736 <_strtod_l+0xe6>
 800f766:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800f8e4 <_strtod_l+0x294>
 800f76a:	e7e4      	b.n	800f736 <_strtod_l+0xe6>
 800f76c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f770:	f04f 3aff 	mov.w	sl, #4294967295
 800f774:	e7df      	b.n	800f736 <_strtod_l+0xe6>
 800f776:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f778:	1c5a      	adds	r2, r3, #1
 800f77a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f77c:	785b      	ldrb	r3, [r3, #1]
 800f77e:	2b30      	cmp	r3, #48	@ 0x30
 800f780:	d0f9      	beq.n	800f776 <_strtod_l+0x126>
 800f782:	2b00      	cmp	r3, #0
 800f784:	d09d      	beq.n	800f6c2 <_strtod_l+0x72>
 800f786:	2301      	movs	r3, #1
 800f788:	9309      	str	r3, [sp, #36]	@ 0x24
 800f78a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f78c:	930c      	str	r3, [sp, #48]	@ 0x30
 800f78e:	2300      	movs	r3, #0
 800f790:	9308      	str	r3, [sp, #32]
 800f792:	930a      	str	r3, [sp, #40]	@ 0x28
 800f794:	461f      	mov	r7, r3
 800f796:	220a      	movs	r2, #10
 800f798:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f79a:	7805      	ldrb	r5, [r0, #0]
 800f79c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f7a0:	b2d9      	uxtb	r1, r3
 800f7a2:	2909      	cmp	r1, #9
 800f7a4:	d928      	bls.n	800f7f8 <_strtod_l+0x1a8>
 800f7a6:	494e      	ldr	r1, [pc, #312]	@ (800f8e0 <_strtod_l+0x290>)
 800f7a8:	2201      	movs	r2, #1
 800f7aa:	f001 f98b 	bl	8010ac4 <strncmp>
 800f7ae:	2800      	cmp	r0, #0
 800f7b0:	d032      	beq.n	800f818 <_strtod_l+0x1c8>
 800f7b2:	2000      	movs	r0, #0
 800f7b4:	462a      	mov	r2, r5
 800f7b6:	4681      	mov	r9, r0
 800f7b8:	463d      	mov	r5, r7
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	2a65      	cmp	r2, #101	@ 0x65
 800f7be:	d001      	beq.n	800f7c4 <_strtod_l+0x174>
 800f7c0:	2a45      	cmp	r2, #69	@ 0x45
 800f7c2:	d114      	bne.n	800f7ee <_strtod_l+0x19e>
 800f7c4:	b91d      	cbnz	r5, 800f7ce <_strtod_l+0x17e>
 800f7c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7c8:	4302      	orrs	r2, r0
 800f7ca:	d095      	beq.n	800f6f8 <_strtod_l+0xa8>
 800f7cc:	2500      	movs	r5, #0
 800f7ce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f7d0:	1c62      	adds	r2, r4, #1
 800f7d2:	9219      	str	r2, [sp, #100]	@ 0x64
 800f7d4:	7862      	ldrb	r2, [r4, #1]
 800f7d6:	2a2b      	cmp	r2, #43	@ 0x2b
 800f7d8:	d077      	beq.n	800f8ca <_strtod_l+0x27a>
 800f7da:	2a2d      	cmp	r2, #45	@ 0x2d
 800f7dc:	d07b      	beq.n	800f8d6 <_strtod_l+0x286>
 800f7de:	f04f 0c00 	mov.w	ip, #0
 800f7e2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f7e6:	2909      	cmp	r1, #9
 800f7e8:	f240 8082 	bls.w	800f8f0 <_strtod_l+0x2a0>
 800f7ec:	9419      	str	r4, [sp, #100]	@ 0x64
 800f7ee:	f04f 0800 	mov.w	r8, #0
 800f7f2:	e0a2      	b.n	800f93a <_strtod_l+0x2ea>
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	e7c7      	b.n	800f788 <_strtod_l+0x138>
 800f7f8:	2f08      	cmp	r7, #8
 800f7fa:	bfd5      	itete	le
 800f7fc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800f7fe:	9908      	ldrgt	r1, [sp, #32]
 800f800:	fb02 3301 	mlale	r3, r2, r1, r3
 800f804:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f808:	f100 0001 	add.w	r0, r0, #1
 800f80c:	bfd4      	ite	le
 800f80e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800f810:	9308      	strgt	r3, [sp, #32]
 800f812:	3701      	adds	r7, #1
 800f814:	9019      	str	r0, [sp, #100]	@ 0x64
 800f816:	e7bf      	b.n	800f798 <_strtod_l+0x148>
 800f818:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f81a:	1c5a      	adds	r2, r3, #1
 800f81c:	9219      	str	r2, [sp, #100]	@ 0x64
 800f81e:	785a      	ldrb	r2, [r3, #1]
 800f820:	b37f      	cbz	r7, 800f882 <_strtod_l+0x232>
 800f822:	4681      	mov	r9, r0
 800f824:	463d      	mov	r5, r7
 800f826:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f82a:	2b09      	cmp	r3, #9
 800f82c:	d912      	bls.n	800f854 <_strtod_l+0x204>
 800f82e:	2301      	movs	r3, #1
 800f830:	e7c4      	b.n	800f7bc <_strtod_l+0x16c>
 800f832:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f834:	1c5a      	adds	r2, r3, #1
 800f836:	9219      	str	r2, [sp, #100]	@ 0x64
 800f838:	785a      	ldrb	r2, [r3, #1]
 800f83a:	3001      	adds	r0, #1
 800f83c:	2a30      	cmp	r2, #48	@ 0x30
 800f83e:	d0f8      	beq.n	800f832 <_strtod_l+0x1e2>
 800f840:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f844:	2b08      	cmp	r3, #8
 800f846:	f200 84d3 	bhi.w	80101f0 <_strtod_l+0xba0>
 800f84a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f84c:	930c      	str	r3, [sp, #48]	@ 0x30
 800f84e:	4681      	mov	r9, r0
 800f850:	2000      	movs	r0, #0
 800f852:	4605      	mov	r5, r0
 800f854:	3a30      	subs	r2, #48	@ 0x30
 800f856:	f100 0301 	add.w	r3, r0, #1
 800f85a:	d02a      	beq.n	800f8b2 <_strtod_l+0x262>
 800f85c:	4499      	add	r9, r3
 800f85e:	eb00 0c05 	add.w	ip, r0, r5
 800f862:	462b      	mov	r3, r5
 800f864:	210a      	movs	r1, #10
 800f866:	4563      	cmp	r3, ip
 800f868:	d10d      	bne.n	800f886 <_strtod_l+0x236>
 800f86a:	1c69      	adds	r1, r5, #1
 800f86c:	4401      	add	r1, r0
 800f86e:	4428      	add	r0, r5
 800f870:	2808      	cmp	r0, #8
 800f872:	dc16      	bgt.n	800f8a2 <_strtod_l+0x252>
 800f874:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f876:	230a      	movs	r3, #10
 800f878:	fb03 2300 	mla	r3, r3, r0, r2
 800f87c:	930a      	str	r3, [sp, #40]	@ 0x28
 800f87e:	2300      	movs	r3, #0
 800f880:	e018      	b.n	800f8b4 <_strtod_l+0x264>
 800f882:	4638      	mov	r0, r7
 800f884:	e7da      	b.n	800f83c <_strtod_l+0x1ec>
 800f886:	2b08      	cmp	r3, #8
 800f888:	f103 0301 	add.w	r3, r3, #1
 800f88c:	dc03      	bgt.n	800f896 <_strtod_l+0x246>
 800f88e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f890:	434e      	muls	r6, r1
 800f892:	960a      	str	r6, [sp, #40]	@ 0x28
 800f894:	e7e7      	b.n	800f866 <_strtod_l+0x216>
 800f896:	2b10      	cmp	r3, #16
 800f898:	bfde      	ittt	le
 800f89a:	9e08      	ldrle	r6, [sp, #32]
 800f89c:	434e      	mulle	r6, r1
 800f89e:	9608      	strle	r6, [sp, #32]
 800f8a0:	e7e1      	b.n	800f866 <_strtod_l+0x216>
 800f8a2:	280f      	cmp	r0, #15
 800f8a4:	dceb      	bgt.n	800f87e <_strtod_l+0x22e>
 800f8a6:	9808      	ldr	r0, [sp, #32]
 800f8a8:	230a      	movs	r3, #10
 800f8aa:	fb03 2300 	mla	r3, r3, r0, r2
 800f8ae:	9308      	str	r3, [sp, #32]
 800f8b0:	e7e5      	b.n	800f87e <_strtod_l+0x22e>
 800f8b2:	4629      	mov	r1, r5
 800f8b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f8b6:	1c50      	adds	r0, r2, #1
 800f8b8:	9019      	str	r0, [sp, #100]	@ 0x64
 800f8ba:	7852      	ldrb	r2, [r2, #1]
 800f8bc:	4618      	mov	r0, r3
 800f8be:	460d      	mov	r5, r1
 800f8c0:	e7b1      	b.n	800f826 <_strtod_l+0x1d6>
 800f8c2:	f04f 0900 	mov.w	r9, #0
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	e77d      	b.n	800f7c6 <_strtod_l+0x176>
 800f8ca:	f04f 0c00 	mov.w	ip, #0
 800f8ce:	1ca2      	adds	r2, r4, #2
 800f8d0:	9219      	str	r2, [sp, #100]	@ 0x64
 800f8d2:	78a2      	ldrb	r2, [r4, #2]
 800f8d4:	e785      	b.n	800f7e2 <_strtod_l+0x192>
 800f8d6:	f04f 0c01 	mov.w	ip, #1
 800f8da:	e7f8      	b.n	800f8ce <_strtod_l+0x27e>
 800f8dc:	08011a38 	.word	0x08011a38
 800f8e0:	08011a20 	.word	0x08011a20
 800f8e4:	7ff00000 	.word	0x7ff00000
 800f8e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f8ea:	1c51      	adds	r1, r2, #1
 800f8ec:	9119      	str	r1, [sp, #100]	@ 0x64
 800f8ee:	7852      	ldrb	r2, [r2, #1]
 800f8f0:	2a30      	cmp	r2, #48	@ 0x30
 800f8f2:	d0f9      	beq.n	800f8e8 <_strtod_l+0x298>
 800f8f4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f8f8:	2908      	cmp	r1, #8
 800f8fa:	f63f af78 	bhi.w	800f7ee <_strtod_l+0x19e>
 800f8fe:	3a30      	subs	r2, #48	@ 0x30
 800f900:	920e      	str	r2, [sp, #56]	@ 0x38
 800f902:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f904:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f906:	f04f 080a 	mov.w	r8, #10
 800f90a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f90c:	1c56      	adds	r6, r2, #1
 800f90e:	9619      	str	r6, [sp, #100]	@ 0x64
 800f910:	7852      	ldrb	r2, [r2, #1]
 800f912:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f916:	f1be 0f09 	cmp.w	lr, #9
 800f91a:	d939      	bls.n	800f990 <_strtod_l+0x340>
 800f91c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f91e:	1a76      	subs	r6, r6, r1
 800f920:	2e08      	cmp	r6, #8
 800f922:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f926:	dc03      	bgt.n	800f930 <_strtod_l+0x2e0>
 800f928:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f92a:	4588      	cmp	r8, r1
 800f92c:	bfa8      	it	ge
 800f92e:	4688      	movge	r8, r1
 800f930:	f1bc 0f00 	cmp.w	ip, #0
 800f934:	d001      	beq.n	800f93a <_strtod_l+0x2ea>
 800f936:	f1c8 0800 	rsb	r8, r8, #0
 800f93a:	2d00      	cmp	r5, #0
 800f93c:	d14e      	bne.n	800f9dc <_strtod_l+0x38c>
 800f93e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f940:	4308      	orrs	r0, r1
 800f942:	f47f aebe 	bne.w	800f6c2 <_strtod_l+0x72>
 800f946:	2b00      	cmp	r3, #0
 800f948:	f47f aed6 	bne.w	800f6f8 <_strtod_l+0xa8>
 800f94c:	2a69      	cmp	r2, #105	@ 0x69
 800f94e:	d028      	beq.n	800f9a2 <_strtod_l+0x352>
 800f950:	dc25      	bgt.n	800f99e <_strtod_l+0x34e>
 800f952:	2a49      	cmp	r2, #73	@ 0x49
 800f954:	d025      	beq.n	800f9a2 <_strtod_l+0x352>
 800f956:	2a4e      	cmp	r2, #78	@ 0x4e
 800f958:	f47f aece 	bne.w	800f6f8 <_strtod_l+0xa8>
 800f95c:	499b      	ldr	r1, [pc, #620]	@ (800fbcc <_strtod_l+0x57c>)
 800f95e:	a819      	add	r0, sp, #100	@ 0x64
 800f960:	f001 fba2 	bl	80110a8 <__match>
 800f964:	2800      	cmp	r0, #0
 800f966:	f43f aec7 	beq.w	800f6f8 <_strtod_l+0xa8>
 800f96a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f96c:	781b      	ldrb	r3, [r3, #0]
 800f96e:	2b28      	cmp	r3, #40	@ 0x28
 800f970:	d12e      	bne.n	800f9d0 <_strtod_l+0x380>
 800f972:	4997      	ldr	r1, [pc, #604]	@ (800fbd0 <_strtod_l+0x580>)
 800f974:	aa1c      	add	r2, sp, #112	@ 0x70
 800f976:	a819      	add	r0, sp, #100	@ 0x64
 800f978:	f001 fbaa 	bl	80110d0 <__hexnan>
 800f97c:	2805      	cmp	r0, #5
 800f97e:	d127      	bne.n	800f9d0 <_strtod_l+0x380>
 800f980:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f982:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f986:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f98a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f98e:	e698      	b.n	800f6c2 <_strtod_l+0x72>
 800f990:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f992:	fb08 2101 	mla	r1, r8, r1, r2
 800f996:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f99a:	920e      	str	r2, [sp, #56]	@ 0x38
 800f99c:	e7b5      	b.n	800f90a <_strtod_l+0x2ba>
 800f99e:	2a6e      	cmp	r2, #110	@ 0x6e
 800f9a0:	e7da      	b.n	800f958 <_strtod_l+0x308>
 800f9a2:	498c      	ldr	r1, [pc, #560]	@ (800fbd4 <_strtod_l+0x584>)
 800f9a4:	a819      	add	r0, sp, #100	@ 0x64
 800f9a6:	f001 fb7f 	bl	80110a8 <__match>
 800f9aa:	2800      	cmp	r0, #0
 800f9ac:	f43f aea4 	beq.w	800f6f8 <_strtod_l+0xa8>
 800f9b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f9b2:	4989      	ldr	r1, [pc, #548]	@ (800fbd8 <_strtod_l+0x588>)
 800f9b4:	3b01      	subs	r3, #1
 800f9b6:	a819      	add	r0, sp, #100	@ 0x64
 800f9b8:	9319      	str	r3, [sp, #100]	@ 0x64
 800f9ba:	f001 fb75 	bl	80110a8 <__match>
 800f9be:	b910      	cbnz	r0, 800f9c6 <_strtod_l+0x376>
 800f9c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f9c2:	3301      	adds	r3, #1
 800f9c4:	9319      	str	r3, [sp, #100]	@ 0x64
 800f9c6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800fbe8 <_strtod_l+0x598>
 800f9ca:	f04f 0a00 	mov.w	sl, #0
 800f9ce:	e678      	b.n	800f6c2 <_strtod_l+0x72>
 800f9d0:	4882      	ldr	r0, [pc, #520]	@ (800fbdc <_strtod_l+0x58c>)
 800f9d2:	f001 f8bd 	bl	8010b50 <nan>
 800f9d6:	ec5b ab10 	vmov	sl, fp, d0
 800f9da:	e672      	b.n	800f6c2 <_strtod_l+0x72>
 800f9dc:	eba8 0309 	sub.w	r3, r8, r9
 800f9e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f9e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9e4:	2f00      	cmp	r7, #0
 800f9e6:	bf08      	it	eq
 800f9e8:	462f      	moveq	r7, r5
 800f9ea:	2d10      	cmp	r5, #16
 800f9ec:	462c      	mov	r4, r5
 800f9ee:	bfa8      	it	ge
 800f9f0:	2410      	movge	r4, #16
 800f9f2:	f7f0 fd87 	bl	8000504 <__aeabi_ui2d>
 800f9f6:	2d09      	cmp	r5, #9
 800f9f8:	4682      	mov	sl, r0
 800f9fa:	468b      	mov	fp, r1
 800f9fc:	dc13      	bgt.n	800fa26 <_strtod_l+0x3d6>
 800f9fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	f43f ae5e 	beq.w	800f6c2 <_strtod_l+0x72>
 800fa06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa08:	dd78      	ble.n	800fafc <_strtod_l+0x4ac>
 800fa0a:	2b16      	cmp	r3, #22
 800fa0c:	dc5f      	bgt.n	800face <_strtod_l+0x47e>
 800fa0e:	4974      	ldr	r1, [pc, #464]	@ (800fbe0 <_strtod_l+0x590>)
 800fa10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fa14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa18:	4652      	mov	r2, sl
 800fa1a:	465b      	mov	r3, fp
 800fa1c:	f7f0 fdec 	bl	80005f8 <__aeabi_dmul>
 800fa20:	4682      	mov	sl, r0
 800fa22:	468b      	mov	fp, r1
 800fa24:	e64d      	b.n	800f6c2 <_strtod_l+0x72>
 800fa26:	4b6e      	ldr	r3, [pc, #440]	@ (800fbe0 <_strtod_l+0x590>)
 800fa28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fa2c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800fa30:	f7f0 fde2 	bl	80005f8 <__aeabi_dmul>
 800fa34:	4682      	mov	sl, r0
 800fa36:	9808      	ldr	r0, [sp, #32]
 800fa38:	468b      	mov	fp, r1
 800fa3a:	f7f0 fd63 	bl	8000504 <__aeabi_ui2d>
 800fa3e:	4602      	mov	r2, r0
 800fa40:	460b      	mov	r3, r1
 800fa42:	4650      	mov	r0, sl
 800fa44:	4659      	mov	r1, fp
 800fa46:	f7f0 fc21 	bl	800028c <__adddf3>
 800fa4a:	2d0f      	cmp	r5, #15
 800fa4c:	4682      	mov	sl, r0
 800fa4e:	468b      	mov	fp, r1
 800fa50:	ddd5      	ble.n	800f9fe <_strtod_l+0x3ae>
 800fa52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa54:	1b2c      	subs	r4, r5, r4
 800fa56:	441c      	add	r4, r3
 800fa58:	2c00      	cmp	r4, #0
 800fa5a:	f340 8096 	ble.w	800fb8a <_strtod_l+0x53a>
 800fa5e:	f014 030f 	ands.w	r3, r4, #15
 800fa62:	d00a      	beq.n	800fa7a <_strtod_l+0x42a>
 800fa64:	495e      	ldr	r1, [pc, #376]	@ (800fbe0 <_strtod_l+0x590>)
 800fa66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fa6a:	4652      	mov	r2, sl
 800fa6c:	465b      	mov	r3, fp
 800fa6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa72:	f7f0 fdc1 	bl	80005f8 <__aeabi_dmul>
 800fa76:	4682      	mov	sl, r0
 800fa78:	468b      	mov	fp, r1
 800fa7a:	f034 040f 	bics.w	r4, r4, #15
 800fa7e:	d073      	beq.n	800fb68 <_strtod_l+0x518>
 800fa80:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800fa84:	dd48      	ble.n	800fb18 <_strtod_l+0x4c8>
 800fa86:	2400      	movs	r4, #0
 800fa88:	46a0      	mov	r8, r4
 800fa8a:	940a      	str	r4, [sp, #40]	@ 0x28
 800fa8c:	46a1      	mov	r9, r4
 800fa8e:	9a05      	ldr	r2, [sp, #20]
 800fa90:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800fbe8 <_strtod_l+0x598>
 800fa94:	2322      	movs	r3, #34	@ 0x22
 800fa96:	6013      	str	r3, [r2, #0]
 800fa98:	f04f 0a00 	mov.w	sl, #0
 800fa9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	f43f ae0f 	beq.w	800f6c2 <_strtod_l+0x72>
 800faa4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800faa6:	9805      	ldr	r0, [sp, #20]
 800faa8:	f7ff f942 	bl	800ed30 <_Bfree>
 800faac:	9805      	ldr	r0, [sp, #20]
 800faae:	4649      	mov	r1, r9
 800fab0:	f7ff f93e 	bl	800ed30 <_Bfree>
 800fab4:	9805      	ldr	r0, [sp, #20]
 800fab6:	4641      	mov	r1, r8
 800fab8:	f7ff f93a 	bl	800ed30 <_Bfree>
 800fabc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fabe:	9805      	ldr	r0, [sp, #20]
 800fac0:	f7ff f936 	bl	800ed30 <_Bfree>
 800fac4:	9805      	ldr	r0, [sp, #20]
 800fac6:	4621      	mov	r1, r4
 800fac8:	f7ff f932 	bl	800ed30 <_Bfree>
 800facc:	e5f9      	b.n	800f6c2 <_strtod_l+0x72>
 800face:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fad0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800fad4:	4293      	cmp	r3, r2
 800fad6:	dbbc      	blt.n	800fa52 <_strtod_l+0x402>
 800fad8:	4c41      	ldr	r4, [pc, #260]	@ (800fbe0 <_strtod_l+0x590>)
 800fada:	f1c5 050f 	rsb	r5, r5, #15
 800fade:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fae2:	4652      	mov	r2, sl
 800fae4:	465b      	mov	r3, fp
 800fae6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800faea:	f7f0 fd85 	bl	80005f8 <__aeabi_dmul>
 800faee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800faf0:	1b5d      	subs	r5, r3, r5
 800faf2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800faf6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fafa:	e78f      	b.n	800fa1c <_strtod_l+0x3cc>
 800fafc:	3316      	adds	r3, #22
 800fafe:	dba8      	blt.n	800fa52 <_strtod_l+0x402>
 800fb00:	4b37      	ldr	r3, [pc, #220]	@ (800fbe0 <_strtod_l+0x590>)
 800fb02:	eba9 0808 	sub.w	r8, r9, r8
 800fb06:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800fb0a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800fb0e:	4650      	mov	r0, sl
 800fb10:	4659      	mov	r1, fp
 800fb12:	f7f0 fe9b 	bl	800084c <__aeabi_ddiv>
 800fb16:	e783      	b.n	800fa20 <_strtod_l+0x3d0>
 800fb18:	4b32      	ldr	r3, [pc, #200]	@ (800fbe4 <_strtod_l+0x594>)
 800fb1a:	9308      	str	r3, [sp, #32]
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	1124      	asrs	r4, r4, #4
 800fb20:	4650      	mov	r0, sl
 800fb22:	4659      	mov	r1, fp
 800fb24:	461e      	mov	r6, r3
 800fb26:	2c01      	cmp	r4, #1
 800fb28:	dc21      	bgt.n	800fb6e <_strtod_l+0x51e>
 800fb2a:	b10b      	cbz	r3, 800fb30 <_strtod_l+0x4e0>
 800fb2c:	4682      	mov	sl, r0
 800fb2e:	468b      	mov	fp, r1
 800fb30:	492c      	ldr	r1, [pc, #176]	@ (800fbe4 <_strtod_l+0x594>)
 800fb32:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800fb36:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800fb3a:	4652      	mov	r2, sl
 800fb3c:	465b      	mov	r3, fp
 800fb3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb42:	f7f0 fd59 	bl	80005f8 <__aeabi_dmul>
 800fb46:	4b28      	ldr	r3, [pc, #160]	@ (800fbe8 <_strtod_l+0x598>)
 800fb48:	460a      	mov	r2, r1
 800fb4a:	400b      	ands	r3, r1
 800fb4c:	4927      	ldr	r1, [pc, #156]	@ (800fbec <_strtod_l+0x59c>)
 800fb4e:	428b      	cmp	r3, r1
 800fb50:	4682      	mov	sl, r0
 800fb52:	d898      	bhi.n	800fa86 <_strtod_l+0x436>
 800fb54:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800fb58:	428b      	cmp	r3, r1
 800fb5a:	bf86      	itte	hi
 800fb5c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800fbf0 <_strtod_l+0x5a0>
 800fb60:	f04f 3aff 	movhi.w	sl, #4294967295
 800fb64:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800fb68:	2300      	movs	r3, #0
 800fb6a:	9308      	str	r3, [sp, #32]
 800fb6c:	e07a      	b.n	800fc64 <_strtod_l+0x614>
 800fb6e:	07e2      	lsls	r2, r4, #31
 800fb70:	d505      	bpl.n	800fb7e <_strtod_l+0x52e>
 800fb72:	9b08      	ldr	r3, [sp, #32]
 800fb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb78:	f7f0 fd3e 	bl	80005f8 <__aeabi_dmul>
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	9a08      	ldr	r2, [sp, #32]
 800fb80:	3208      	adds	r2, #8
 800fb82:	3601      	adds	r6, #1
 800fb84:	1064      	asrs	r4, r4, #1
 800fb86:	9208      	str	r2, [sp, #32]
 800fb88:	e7cd      	b.n	800fb26 <_strtod_l+0x4d6>
 800fb8a:	d0ed      	beq.n	800fb68 <_strtod_l+0x518>
 800fb8c:	4264      	negs	r4, r4
 800fb8e:	f014 020f 	ands.w	r2, r4, #15
 800fb92:	d00a      	beq.n	800fbaa <_strtod_l+0x55a>
 800fb94:	4b12      	ldr	r3, [pc, #72]	@ (800fbe0 <_strtod_l+0x590>)
 800fb96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fb9a:	4650      	mov	r0, sl
 800fb9c:	4659      	mov	r1, fp
 800fb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fba2:	f7f0 fe53 	bl	800084c <__aeabi_ddiv>
 800fba6:	4682      	mov	sl, r0
 800fba8:	468b      	mov	fp, r1
 800fbaa:	1124      	asrs	r4, r4, #4
 800fbac:	d0dc      	beq.n	800fb68 <_strtod_l+0x518>
 800fbae:	2c1f      	cmp	r4, #31
 800fbb0:	dd20      	ble.n	800fbf4 <_strtod_l+0x5a4>
 800fbb2:	2400      	movs	r4, #0
 800fbb4:	46a0      	mov	r8, r4
 800fbb6:	940a      	str	r4, [sp, #40]	@ 0x28
 800fbb8:	46a1      	mov	r9, r4
 800fbba:	9a05      	ldr	r2, [sp, #20]
 800fbbc:	2322      	movs	r3, #34	@ 0x22
 800fbbe:	f04f 0a00 	mov.w	sl, #0
 800fbc2:	f04f 0b00 	mov.w	fp, #0
 800fbc6:	6013      	str	r3, [r2, #0]
 800fbc8:	e768      	b.n	800fa9c <_strtod_l+0x44c>
 800fbca:	bf00      	nop
 800fbcc:	080117d5 	.word	0x080117d5
 800fbd0:	08011a24 	.word	0x08011a24
 800fbd4:	080117cd 	.word	0x080117cd
 800fbd8:	08011840 	.word	0x08011840
 800fbdc:	0801183c 	.word	0x0801183c
 800fbe0:	08011958 	.word	0x08011958
 800fbe4:	08011930 	.word	0x08011930
 800fbe8:	7ff00000 	.word	0x7ff00000
 800fbec:	7ca00000 	.word	0x7ca00000
 800fbf0:	7fefffff 	.word	0x7fefffff
 800fbf4:	f014 0310 	ands.w	r3, r4, #16
 800fbf8:	bf18      	it	ne
 800fbfa:	236a      	movne	r3, #106	@ 0x6a
 800fbfc:	4ea9      	ldr	r6, [pc, #676]	@ (800fea4 <_strtod_l+0x854>)
 800fbfe:	9308      	str	r3, [sp, #32]
 800fc00:	4650      	mov	r0, sl
 800fc02:	4659      	mov	r1, fp
 800fc04:	2300      	movs	r3, #0
 800fc06:	07e2      	lsls	r2, r4, #31
 800fc08:	d504      	bpl.n	800fc14 <_strtod_l+0x5c4>
 800fc0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fc0e:	f7f0 fcf3 	bl	80005f8 <__aeabi_dmul>
 800fc12:	2301      	movs	r3, #1
 800fc14:	1064      	asrs	r4, r4, #1
 800fc16:	f106 0608 	add.w	r6, r6, #8
 800fc1a:	d1f4      	bne.n	800fc06 <_strtod_l+0x5b6>
 800fc1c:	b10b      	cbz	r3, 800fc22 <_strtod_l+0x5d2>
 800fc1e:	4682      	mov	sl, r0
 800fc20:	468b      	mov	fp, r1
 800fc22:	9b08      	ldr	r3, [sp, #32]
 800fc24:	b1b3      	cbz	r3, 800fc54 <_strtod_l+0x604>
 800fc26:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800fc2a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	4659      	mov	r1, fp
 800fc32:	dd0f      	ble.n	800fc54 <_strtod_l+0x604>
 800fc34:	2b1f      	cmp	r3, #31
 800fc36:	dd55      	ble.n	800fce4 <_strtod_l+0x694>
 800fc38:	2b34      	cmp	r3, #52	@ 0x34
 800fc3a:	bfde      	ittt	le
 800fc3c:	f04f 33ff 	movle.w	r3, #4294967295
 800fc40:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800fc44:	4093      	lslle	r3, r2
 800fc46:	f04f 0a00 	mov.w	sl, #0
 800fc4a:	bfcc      	ite	gt
 800fc4c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800fc50:	ea03 0b01 	andle.w	fp, r3, r1
 800fc54:	2200      	movs	r2, #0
 800fc56:	2300      	movs	r3, #0
 800fc58:	4650      	mov	r0, sl
 800fc5a:	4659      	mov	r1, fp
 800fc5c:	f7f0 ff34 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc60:	2800      	cmp	r0, #0
 800fc62:	d1a6      	bne.n	800fbb2 <_strtod_l+0x562>
 800fc64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc66:	9300      	str	r3, [sp, #0]
 800fc68:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fc6a:	9805      	ldr	r0, [sp, #20]
 800fc6c:	462b      	mov	r3, r5
 800fc6e:	463a      	mov	r2, r7
 800fc70:	f7ff f8c6 	bl	800ee00 <__s2b>
 800fc74:	900a      	str	r0, [sp, #40]	@ 0x28
 800fc76:	2800      	cmp	r0, #0
 800fc78:	f43f af05 	beq.w	800fa86 <_strtod_l+0x436>
 800fc7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc7e:	2a00      	cmp	r2, #0
 800fc80:	eba9 0308 	sub.w	r3, r9, r8
 800fc84:	bfa8      	it	ge
 800fc86:	2300      	movge	r3, #0
 800fc88:	9312      	str	r3, [sp, #72]	@ 0x48
 800fc8a:	2400      	movs	r4, #0
 800fc8c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800fc90:	9316      	str	r3, [sp, #88]	@ 0x58
 800fc92:	46a0      	mov	r8, r4
 800fc94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc96:	9805      	ldr	r0, [sp, #20]
 800fc98:	6859      	ldr	r1, [r3, #4]
 800fc9a:	f7ff f809 	bl	800ecb0 <_Balloc>
 800fc9e:	4681      	mov	r9, r0
 800fca0:	2800      	cmp	r0, #0
 800fca2:	f43f aef4 	beq.w	800fa8e <_strtod_l+0x43e>
 800fca6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fca8:	691a      	ldr	r2, [r3, #16]
 800fcaa:	3202      	adds	r2, #2
 800fcac:	f103 010c 	add.w	r1, r3, #12
 800fcb0:	0092      	lsls	r2, r2, #2
 800fcb2:	300c      	adds	r0, #12
 800fcb4:	f7fe f87d 	bl	800ddb2 <memcpy>
 800fcb8:	ec4b ab10 	vmov	d0, sl, fp
 800fcbc:	9805      	ldr	r0, [sp, #20]
 800fcbe:	aa1c      	add	r2, sp, #112	@ 0x70
 800fcc0:	a91b      	add	r1, sp, #108	@ 0x6c
 800fcc2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800fcc6:	f7ff fbd7 	bl	800f478 <__d2b>
 800fcca:	901a      	str	r0, [sp, #104]	@ 0x68
 800fccc:	2800      	cmp	r0, #0
 800fcce:	f43f aede 	beq.w	800fa8e <_strtod_l+0x43e>
 800fcd2:	9805      	ldr	r0, [sp, #20]
 800fcd4:	2101      	movs	r1, #1
 800fcd6:	f7ff f929 	bl	800ef2c <__i2b>
 800fcda:	4680      	mov	r8, r0
 800fcdc:	b948      	cbnz	r0, 800fcf2 <_strtod_l+0x6a2>
 800fcde:	f04f 0800 	mov.w	r8, #0
 800fce2:	e6d4      	b.n	800fa8e <_strtod_l+0x43e>
 800fce4:	f04f 32ff 	mov.w	r2, #4294967295
 800fce8:	fa02 f303 	lsl.w	r3, r2, r3
 800fcec:	ea03 0a0a 	and.w	sl, r3, sl
 800fcf0:	e7b0      	b.n	800fc54 <_strtod_l+0x604>
 800fcf2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800fcf4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800fcf6:	2d00      	cmp	r5, #0
 800fcf8:	bfab      	itete	ge
 800fcfa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800fcfc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800fcfe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800fd00:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800fd02:	bfac      	ite	ge
 800fd04:	18ef      	addge	r7, r5, r3
 800fd06:	1b5e      	sublt	r6, r3, r5
 800fd08:	9b08      	ldr	r3, [sp, #32]
 800fd0a:	1aed      	subs	r5, r5, r3
 800fd0c:	4415      	add	r5, r2
 800fd0e:	4b66      	ldr	r3, [pc, #408]	@ (800fea8 <_strtod_l+0x858>)
 800fd10:	3d01      	subs	r5, #1
 800fd12:	429d      	cmp	r5, r3
 800fd14:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fd18:	da50      	bge.n	800fdbc <_strtod_l+0x76c>
 800fd1a:	1b5b      	subs	r3, r3, r5
 800fd1c:	2b1f      	cmp	r3, #31
 800fd1e:	eba2 0203 	sub.w	r2, r2, r3
 800fd22:	f04f 0101 	mov.w	r1, #1
 800fd26:	dc3d      	bgt.n	800fda4 <_strtod_l+0x754>
 800fd28:	fa01 f303 	lsl.w	r3, r1, r3
 800fd2c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fd2e:	2300      	movs	r3, #0
 800fd30:	9310      	str	r3, [sp, #64]	@ 0x40
 800fd32:	18bd      	adds	r5, r7, r2
 800fd34:	9b08      	ldr	r3, [sp, #32]
 800fd36:	42af      	cmp	r7, r5
 800fd38:	4416      	add	r6, r2
 800fd3a:	441e      	add	r6, r3
 800fd3c:	463b      	mov	r3, r7
 800fd3e:	bfa8      	it	ge
 800fd40:	462b      	movge	r3, r5
 800fd42:	42b3      	cmp	r3, r6
 800fd44:	bfa8      	it	ge
 800fd46:	4633      	movge	r3, r6
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	bfc2      	ittt	gt
 800fd4c:	1aed      	subgt	r5, r5, r3
 800fd4e:	1af6      	subgt	r6, r6, r3
 800fd50:	1aff      	subgt	r7, r7, r3
 800fd52:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	dd16      	ble.n	800fd86 <_strtod_l+0x736>
 800fd58:	4641      	mov	r1, r8
 800fd5a:	9805      	ldr	r0, [sp, #20]
 800fd5c:	461a      	mov	r2, r3
 800fd5e:	f7ff f9a5 	bl	800f0ac <__pow5mult>
 800fd62:	4680      	mov	r8, r0
 800fd64:	2800      	cmp	r0, #0
 800fd66:	d0ba      	beq.n	800fcde <_strtod_l+0x68e>
 800fd68:	4601      	mov	r1, r0
 800fd6a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fd6c:	9805      	ldr	r0, [sp, #20]
 800fd6e:	f7ff f8f3 	bl	800ef58 <__multiply>
 800fd72:	900e      	str	r0, [sp, #56]	@ 0x38
 800fd74:	2800      	cmp	r0, #0
 800fd76:	f43f ae8a 	beq.w	800fa8e <_strtod_l+0x43e>
 800fd7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fd7c:	9805      	ldr	r0, [sp, #20]
 800fd7e:	f7fe ffd7 	bl	800ed30 <_Bfree>
 800fd82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd84:	931a      	str	r3, [sp, #104]	@ 0x68
 800fd86:	2d00      	cmp	r5, #0
 800fd88:	dc1d      	bgt.n	800fdc6 <_strtod_l+0x776>
 800fd8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	dd23      	ble.n	800fdd8 <_strtod_l+0x788>
 800fd90:	4649      	mov	r1, r9
 800fd92:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800fd94:	9805      	ldr	r0, [sp, #20]
 800fd96:	f7ff f989 	bl	800f0ac <__pow5mult>
 800fd9a:	4681      	mov	r9, r0
 800fd9c:	b9e0      	cbnz	r0, 800fdd8 <_strtod_l+0x788>
 800fd9e:	f04f 0900 	mov.w	r9, #0
 800fda2:	e674      	b.n	800fa8e <_strtod_l+0x43e>
 800fda4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800fda8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800fdac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800fdb0:	35e2      	adds	r5, #226	@ 0xe2
 800fdb2:	fa01 f305 	lsl.w	r3, r1, r5
 800fdb6:	9310      	str	r3, [sp, #64]	@ 0x40
 800fdb8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800fdba:	e7ba      	b.n	800fd32 <_strtod_l+0x6e2>
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	9310      	str	r3, [sp, #64]	@ 0x40
 800fdc0:	2301      	movs	r3, #1
 800fdc2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fdc4:	e7b5      	b.n	800fd32 <_strtod_l+0x6e2>
 800fdc6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fdc8:	9805      	ldr	r0, [sp, #20]
 800fdca:	462a      	mov	r2, r5
 800fdcc:	f7ff f9c8 	bl	800f160 <__lshift>
 800fdd0:	901a      	str	r0, [sp, #104]	@ 0x68
 800fdd2:	2800      	cmp	r0, #0
 800fdd4:	d1d9      	bne.n	800fd8a <_strtod_l+0x73a>
 800fdd6:	e65a      	b.n	800fa8e <_strtod_l+0x43e>
 800fdd8:	2e00      	cmp	r6, #0
 800fdda:	dd07      	ble.n	800fdec <_strtod_l+0x79c>
 800fddc:	4649      	mov	r1, r9
 800fdde:	9805      	ldr	r0, [sp, #20]
 800fde0:	4632      	mov	r2, r6
 800fde2:	f7ff f9bd 	bl	800f160 <__lshift>
 800fde6:	4681      	mov	r9, r0
 800fde8:	2800      	cmp	r0, #0
 800fdea:	d0d8      	beq.n	800fd9e <_strtod_l+0x74e>
 800fdec:	2f00      	cmp	r7, #0
 800fdee:	dd08      	ble.n	800fe02 <_strtod_l+0x7b2>
 800fdf0:	4641      	mov	r1, r8
 800fdf2:	9805      	ldr	r0, [sp, #20]
 800fdf4:	463a      	mov	r2, r7
 800fdf6:	f7ff f9b3 	bl	800f160 <__lshift>
 800fdfa:	4680      	mov	r8, r0
 800fdfc:	2800      	cmp	r0, #0
 800fdfe:	f43f ae46 	beq.w	800fa8e <_strtod_l+0x43e>
 800fe02:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fe04:	9805      	ldr	r0, [sp, #20]
 800fe06:	464a      	mov	r2, r9
 800fe08:	f7ff fa32 	bl	800f270 <__mdiff>
 800fe0c:	4604      	mov	r4, r0
 800fe0e:	2800      	cmp	r0, #0
 800fe10:	f43f ae3d 	beq.w	800fa8e <_strtod_l+0x43e>
 800fe14:	68c3      	ldr	r3, [r0, #12]
 800fe16:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fe18:	2300      	movs	r3, #0
 800fe1a:	60c3      	str	r3, [r0, #12]
 800fe1c:	4641      	mov	r1, r8
 800fe1e:	f7ff fa0b 	bl	800f238 <__mcmp>
 800fe22:	2800      	cmp	r0, #0
 800fe24:	da46      	bge.n	800feb4 <_strtod_l+0x864>
 800fe26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe28:	ea53 030a 	orrs.w	r3, r3, sl
 800fe2c:	d16c      	bne.n	800ff08 <_strtod_l+0x8b8>
 800fe2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d168      	bne.n	800ff08 <_strtod_l+0x8b8>
 800fe36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fe3a:	0d1b      	lsrs	r3, r3, #20
 800fe3c:	051b      	lsls	r3, r3, #20
 800fe3e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fe42:	d961      	bls.n	800ff08 <_strtod_l+0x8b8>
 800fe44:	6963      	ldr	r3, [r4, #20]
 800fe46:	b913      	cbnz	r3, 800fe4e <_strtod_l+0x7fe>
 800fe48:	6923      	ldr	r3, [r4, #16]
 800fe4a:	2b01      	cmp	r3, #1
 800fe4c:	dd5c      	ble.n	800ff08 <_strtod_l+0x8b8>
 800fe4e:	4621      	mov	r1, r4
 800fe50:	2201      	movs	r2, #1
 800fe52:	9805      	ldr	r0, [sp, #20]
 800fe54:	f7ff f984 	bl	800f160 <__lshift>
 800fe58:	4641      	mov	r1, r8
 800fe5a:	4604      	mov	r4, r0
 800fe5c:	f7ff f9ec 	bl	800f238 <__mcmp>
 800fe60:	2800      	cmp	r0, #0
 800fe62:	dd51      	ble.n	800ff08 <_strtod_l+0x8b8>
 800fe64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fe68:	9a08      	ldr	r2, [sp, #32]
 800fe6a:	0d1b      	lsrs	r3, r3, #20
 800fe6c:	051b      	lsls	r3, r3, #20
 800fe6e:	2a00      	cmp	r2, #0
 800fe70:	d06b      	beq.n	800ff4a <_strtod_l+0x8fa>
 800fe72:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fe76:	d868      	bhi.n	800ff4a <_strtod_l+0x8fa>
 800fe78:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800fe7c:	f67f ae9d 	bls.w	800fbba <_strtod_l+0x56a>
 800fe80:	4b0a      	ldr	r3, [pc, #40]	@ (800feac <_strtod_l+0x85c>)
 800fe82:	4650      	mov	r0, sl
 800fe84:	4659      	mov	r1, fp
 800fe86:	2200      	movs	r2, #0
 800fe88:	f7f0 fbb6 	bl	80005f8 <__aeabi_dmul>
 800fe8c:	4b08      	ldr	r3, [pc, #32]	@ (800feb0 <_strtod_l+0x860>)
 800fe8e:	400b      	ands	r3, r1
 800fe90:	4682      	mov	sl, r0
 800fe92:	468b      	mov	fp, r1
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	f47f ae05 	bne.w	800faa4 <_strtod_l+0x454>
 800fe9a:	9a05      	ldr	r2, [sp, #20]
 800fe9c:	2322      	movs	r3, #34	@ 0x22
 800fe9e:	6013      	str	r3, [r2, #0]
 800fea0:	e600      	b.n	800faa4 <_strtod_l+0x454>
 800fea2:	bf00      	nop
 800fea4:	08011a50 	.word	0x08011a50
 800fea8:	fffffc02 	.word	0xfffffc02
 800feac:	39500000 	.word	0x39500000
 800feb0:	7ff00000 	.word	0x7ff00000
 800feb4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800feb8:	d165      	bne.n	800ff86 <_strtod_l+0x936>
 800feba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800febc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fec0:	b35a      	cbz	r2, 800ff1a <_strtod_l+0x8ca>
 800fec2:	4a9f      	ldr	r2, [pc, #636]	@ (8010140 <_strtod_l+0xaf0>)
 800fec4:	4293      	cmp	r3, r2
 800fec6:	d12b      	bne.n	800ff20 <_strtod_l+0x8d0>
 800fec8:	9b08      	ldr	r3, [sp, #32]
 800feca:	4651      	mov	r1, sl
 800fecc:	b303      	cbz	r3, 800ff10 <_strtod_l+0x8c0>
 800fece:	4b9d      	ldr	r3, [pc, #628]	@ (8010144 <_strtod_l+0xaf4>)
 800fed0:	465a      	mov	r2, fp
 800fed2:	4013      	ands	r3, r2
 800fed4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800fed8:	f04f 32ff 	mov.w	r2, #4294967295
 800fedc:	d81b      	bhi.n	800ff16 <_strtod_l+0x8c6>
 800fede:	0d1b      	lsrs	r3, r3, #20
 800fee0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fee4:	fa02 f303 	lsl.w	r3, r2, r3
 800fee8:	4299      	cmp	r1, r3
 800feea:	d119      	bne.n	800ff20 <_strtod_l+0x8d0>
 800feec:	4b96      	ldr	r3, [pc, #600]	@ (8010148 <_strtod_l+0xaf8>)
 800feee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fef0:	429a      	cmp	r2, r3
 800fef2:	d102      	bne.n	800fefa <_strtod_l+0x8aa>
 800fef4:	3101      	adds	r1, #1
 800fef6:	f43f adca 	beq.w	800fa8e <_strtod_l+0x43e>
 800fefa:	4b92      	ldr	r3, [pc, #584]	@ (8010144 <_strtod_l+0xaf4>)
 800fefc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fefe:	401a      	ands	r2, r3
 800ff00:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ff04:	f04f 0a00 	mov.w	sl, #0
 800ff08:	9b08      	ldr	r3, [sp, #32]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d1b8      	bne.n	800fe80 <_strtod_l+0x830>
 800ff0e:	e5c9      	b.n	800faa4 <_strtod_l+0x454>
 800ff10:	f04f 33ff 	mov.w	r3, #4294967295
 800ff14:	e7e8      	b.n	800fee8 <_strtod_l+0x898>
 800ff16:	4613      	mov	r3, r2
 800ff18:	e7e6      	b.n	800fee8 <_strtod_l+0x898>
 800ff1a:	ea53 030a 	orrs.w	r3, r3, sl
 800ff1e:	d0a1      	beq.n	800fe64 <_strtod_l+0x814>
 800ff20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ff22:	b1db      	cbz	r3, 800ff5c <_strtod_l+0x90c>
 800ff24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ff26:	4213      	tst	r3, r2
 800ff28:	d0ee      	beq.n	800ff08 <_strtod_l+0x8b8>
 800ff2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff2c:	9a08      	ldr	r2, [sp, #32]
 800ff2e:	4650      	mov	r0, sl
 800ff30:	4659      	mov	r1, fp
 800ff32:	b1bb      	cbz	r3, 800ff64 <_strtod_l+0x914>
 800ff34:	f7ff fb6e 	bl	800f614 <sulp>
 800ff38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ff3c:	ec53 2b10 	vmov	r2, r3, d0
 800ff40:	f7f0 f9a4 	bl	800028c <__adddf3>
 800ff44:	4682      	mov	sl, r0
 800ff46:	468b      	mov	fp, r1
 800ff48:	e7de      	b.n	800ff08 <_strtod_l+0x8b8>
 800ff4a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ff4e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ff52:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ff56:	f04f 3aff 	mov.w	sl, #4294967295
 800ff5a:	e7d5      	b.n	800ff08 <_strtod_l+0x8b8>
 800ff5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ff5e:	ea13 0f0a 	tst.w	r3, sl
 800ff62:	e7e1      	b.n	800ff28 <_strtod_l+0x8d8>
 800ff64:	f7ff fb56 	bl	800f614 <sulp>
 800ff68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ff6c:	ec53 2b10 	vmov	r2, r3, d0
 800ff70:	f7f0 f98a 	bl	8000288 <__aeabi_dsub>
 800ff74:	2200      	movs	r2, #0
 800ff76:	2300      	movs	r3, #0
 800ff78:	4682      	mov	sl, r0
 800ff7a:	468b      	mov	fp, r1
 800ff7c:	f7f0 fda4 	bl	8000ac8 <__aeabi_dcmpeq>
 800ff80:	2800      	cmp	r0, #0
 800ff82:	d0c1      	beq.n	800ff08 <_strtod_l+0x8b8>
 800ff84:	e619      	b.n	800fbba <_strtod_l+0x56a>
 800ff86:	4641      	mov	r1, r8
 800ff88:	4620      	mov	r0, r4
 800ff8a:	f7ff facd 	bl	800f528 <__ratio>
 800ff8e:	ec57 6b10 	vmov	r6, r7, d0
 800ff92:	2200      	movs	r2, #0
 800ff94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ff98:	4630      	mov	r0, r6
 800ff9a:	4639      	mov	r1, r7
 800ff9c:	f7f0 fda8 	bl	8000af0 <__aeabi_dcmple>
 800ffa0:	2800      	cmp	r0, #0
 800ffa2:	d06f      	beq.n	8010084 <_strtod_l+0xa34>
 800ffa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d17a      	bne.n	80100a0 <_strtod_l+0xa50>
 800ffaa:	f1ba 0f00 	cmp.w	sl, #0
 800ffae:	d158      	bne.n	8010062 <_strtod_l+0xa12>
 800ffb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ffb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d15a      	bne.n	8010070 <_strtod_l+0xa20>
 800ffba:	4b64      	ldr	r3, [pc, #400]	@ (801014c <_strtod_l+0xafc>)
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	4630      	mov	r0, r6
 800ffc0:	4639      	mov	r1, r7
 800ffc2:	f7f0 fd8b 	bl	8000adc <__aeabi_dcmplt>
 800ffc6:	2800      	cmp	r0, #0
 800ffc8:	d159      	bne.n	801007e <_strtod_l+0xa2e>
 800ffca:	4630      	mov	r0, r6
 800ffcc:	4639      	mov	r1, r7
 800ffce:	4b60      	ldr	r3, [pc, #384]	@ (8010150 <_strtod_l+0xb00>)
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	f7f0 fb11 	bl	80005f8 <__aeabi_dmul>
 800ffd6:	4606      	mov	r6, r0
 800ffd8:	460f      	mov	r7, r1
 800ffda:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ffde:	9606      	str	r6, [sp, #24]
 800ffe0:	9307      	str	r3, [sp, #28]
 800ffe2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ffe6:	4d57      	ldr	r5, [pc, #348]	@ (8010144 <_strtod_l+0xaf4>)
 800ffe8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ffec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ffee:	401d      	ands	r5, r3
 800fff0:	4b58      	ldr	r3, [pc, #352]	@ (8010154 <_strtod_l+0xb04>)
 800fff2:	429d      	cmp	r5, r3
 800fff4:	f040 80b2 	bne.w	801015c <_strtod_l+0xb0c>
 800fff8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fffa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800fffe:	ec4b ab10 	vmov	d0, sl, fp
 8010002:	f7ff f9c9 	bl	800f398 <__ulp>
 8010006:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801000a:	ec51 0b10 	vmov	r0, r1, d0
 801000e:	f7f0 faf3 	bl	80005f8 <__aeabi_dmul>
 8010012:	4652      	mov	r2, sl
 8010014:	465b      	mov	r3, fp
 8010016:	f7f0 f939 	bl	800028c <__adddf3>
 801001a:	460b      	mov	r3, r1
 801001c:	4949      	ldr	r1, [pc, #292]	@ (8010144 <_strtod_l+0xaf4>)
 801001e:	4a4e      	ldr	r2, [pc, #312]	@ (8010158 <_strtod_l+0xb08>)
 8010020:	4019      	ands	r1, r3
 8010022:	4291      	cmp	r1, r2
 8010024:	4682      	mov	sl, r0
 8010026:	d942      	bls.n	80100ae <_strtod_l+0xa5e>
 8010028:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801002a:	4b47      	ldr	r3, [pc, #284]	@ (8010148 <_strtod_l+0xaf8>)
 801002c:	429a      	cmp	r2, r3
 801002e:	d103      	bne.n	8010038 <_strtod_l+0x9e8>
 8010030:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010032:	3301      	adds	r3, #1
 8010034:	f43f ad2b 	beq.w	800fa8e <_strtod_l+0x43e>
 8010038:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8010148 <_strtod_l+0xaf8>
 801003c:	f04f 3aff 	mov.w	sl, #4294967295
 8010040:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010042:	9805      	ldr	r0, [sp, #20]
 8010044:	f7fe fe74 	bl	800ed30 <_Bfree>
 8010048:	9805      	ldr	r0, [sp, #20]
 801004a:	4649      	mov	r1, r9
 801004c:	f7fe fe70 	bl	800ed30 <_Bfree>
 8010050:	9805      	ldr	r0, [sp, #20]
 8010052:	4641      	mov	r1, r8
 8010054:	f7fe fe6c 	bl	800ed30 <_Bfree>
 8010058:	9805      	ldr	r0, [sp, #20]
 801005a:	4621      	mov	r1, r4
 801005c:	f7fe fe68 	bl	800ed30 <_Bfree>
 8010060:	e618      	b.n	800fc94 <_strtod_l+0x644>
 8010062:	f1ba 0f01 	cmp.w	sl, #1
 8010066:	d103      	bne.n	8010070 <_strtod_l+0xa20>
 8010068:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801006a:	2b00      	cmp	r3, #0
 801006c:	f43f ada5 	beq.w	800fbba <_strtod_l+0x56a>
 8010070:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010120 <_strtod_l+0xad0>
 8010074:	4f35      	ldr	r7, [pc, #212]	@ (801014c <_strtod_l+0xafc>)
 8010076:	ed8d 7b06 	vstr	d7, [sp, #24]
 801007a:	2600      	movs	r6, #0
 801007c:	e7b1      	b.n	800ffe2 <_strtod_l+0x992>
 801007e:	4f34      	ldr	r7, [pc, #208]	@ (8010150 <_strtod_l+0xb00>)
 8010080:	2600      	movs	r6, #0
 8010082:	e7aa      	b.n	800ffda <_strtod_l+0x98a>
 8010084:	4b32      	ldr	r3, [pc, #200]	@ (8010150 <_strtod_l+0xb00>)
 8010086:	4630      	mov	r0, r6
 8010088:	4639      	mov	r1, r7
 801008a:	2200      	movs	r2, #0
 801008c:	f7f0 fab4 	bl	80005f8 <__aeabi_dmul>
 8010090:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010092:	4606      	mov	r6, r0
 8010094:	460f      	mov	r7, r1
 8010096:	2b00      	cmp	r3, #0
 8010098:	d09f      	beq.n	800ffda <_strtod_l+0x98a>
 801009a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801009e:	e7a0      	b.n	800ffe2 <_strtod_l+0x992>
 80100a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010128 <_strtod_l+0xad8>
 80100a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80100a8:	ec57 6b17 	vmov	r6, r7, d7
 80100ac:	e799      	b.n	800ffe2 <_strtod_l+0x992>
 80100ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80100b2:	9b08      	ldr	r3, [sp, #32]
 80100b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d1c1      	bne.n	8010040 <_strtod_l+0x9f0>
 80100bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80100c0:	0d1b      	lsrs	r3, r3, #20
 80100c2:	051b      	lsls	r3, r3, #20
 80100c4:	429d      	cmp	r5, r3
 80100c6:	d1bb      	bne.n	8010040 <_strtod_l+0x9f0>
 80100c8:	4630      	mov	r0, r6
 80100ca:	4639      	mov	r1, r7
 80100cc:	f7f0 fdf4 	bl	8000cb8 <__aeabi_d2lz>
 80100d0:	f7f0 fa64 	bl	800059c <__aeabi_l2d>
 80100d4:	4602      	mov	r2, r0
 80100d6:	460b      	mov	r3, r1
 80100d8:	4630      	mov	r0, r6
 80100da:	4639      	mov	r1, r7
 80100dc:	f7f0 f8d4 	bl	8000288 <__aeabi_dsub>
 80100e0:	460b      	mov	r3, r1
 80100e2:	4602      	mov	r2, r0
 80100e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80100e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80100ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100ee:	ea46 060a 	orr.w	r6, r6, sl
 80100f2:	431e      	orrs	r6, r3
 80100f4:	d06f      	beq.n	80101d6 <_strtod_l+0xb86>
 80100f6:	a30e      	add	r3, pc, #56	@ (adr r3, 8010130 <_strtod_l+0xae0>)
 80100f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100fc:	f7f0 fcee 	bl	8000adc <__aeabi_dcmplt>
 8010100:	2800      	cmp	r0, #0
 8010102:	f47f accf 	bne.w	800faa4 <_strtod_l+0x454>
 8010106:	a30c      	add	r3, pc, #48	@ (adr r3, 8010138 <_strtod_l+0xae8>)
 8010108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801010c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010110:	f7f0 fd02 	bl	8000b18 <__aeabi_dcmpgt>
 8010114:	2800      	cmp	r0, #0
 8010116:	d093      	beq.n	8010040 <_strtod_l+0x9f0>
 8010118:	e4c4      	b.n	800faa4 <_strtod_l+0x454>
 801011a:	bf00      	nop
 801011c:	f3af 8000 	nop.w
 8010120:	00000000 	.word	0x00000000
 8010124:	bff00000 	.word	0xbff00000
 8010128:	00000000 	.word	0x00000000
 801012c:	3ff00000 	.word	0x3ff00000
 8010130:	94a03595 	.word	0x94a03595
 8010134:	3fdfffff 	.word	0x3fdfffff
 8010138:	35afe535 	.word	0x35afe535
 801013c:	3fe00000 	.word	0x3fe00000
 8010140:	000fffff 	.word	0x000fffff
 8010144:	7ff00000 	.word	0x7ff00000
 8010148:	7fefffff 	.word	0x7fefffff
 801014c:	3ff00000 	.word	0x3ff00000
 8010150:	3fe00000 	.word	0x3fe00000
 8010154:	7fe00000 	.word	0x7fe00000
 8010158:	7c9fffff 	.word	0x7c9fffff
 801015c:	9b08      	ldr	r3, [sp, #32]
 801015e:	b323      	cbz	r3, 80101aa <_strtod_l+0xb5a>
 8010160:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8010164:	d821      	bhi.n	80101aa <_strtod_l+0xb5a>
 8010166:	a328      	add	r3, pc, #160	@ (adr r3, 8010208 <_strtod_l+0xbb8>)
 8010168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801016c:	4630      	mov	r0, r6
 801016e:	4639      	mov	r1, r7
 8010170:	f7f0 fcbe 	bl	8000af0 <__aeabi_dcmple>
 8010174:	b1a0      	cbz	r0, 80101a0 <_strtod_l+0xb50>
 8010176:	4639      	mov	r1, r7
 8010178:	4630      	mov	r0, r6
 801017a:	f7f0 fd15 	bl	8000ba8 <__aeabi_d2uiz>
 801017e:	2801      	cmp	r0, #1
 8010180:	bf38      	it	cc
 8010182:	2001      	movcc	r0, #1
 8010184:	f7f0 f9be 	bl	8000504 <__aeabi_ui2d>
 8010188:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801018a:	4606      	mov	r6, r0
 801018c:	460f      	mov	r7, r1
 801018e:	b9fb      	cbnz	r3, 80101d0 <_strtod_l+0xb80>
 8010190:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010194:	9014      	str	r0, [sp, #80]	@ 0x50
 8010196:	9315      	str	r3, [sp, #84]	@ 0x54
 8010198:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801019c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80101a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80101a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80101a6:	1b5b      	subs	r3, r3, r5
 80101a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80101aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80101ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80101b2:	f7ff f8f1 	bl	800f398 <__ulp>
 80101b6:	4650      	mov	r0, sl
 80101b8:	ec53 2b10 	vmov	r2, r3, d0
 80101bc:	4659      	mov	r1, fp
 80101be:	f7f0 fa1b 	bl	80005f8 <__aeabi_dmul>
 80101c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80101c6:	f7f0 f861 	bl	800028c <__adddf3>
 80101ca:	4682      	mov	sl, r0
 80101cc:	468b      	mov	fp, r1
 80101ce:	e770      	b.n	80100b2 <_strtod_l+0xa62>
 80101d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80101d4:	e7e0      	b.n	8010198 <_strtod_l+0xb48>
 80101d6:	a30e      	add	r3, pc, #56	@ (adr r3, 8010210 <_strtod_l+0xbc0>)
 80101d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101dc:	f7f0 fc7e 	bl	8000adc <__aeabi_dcmplt>
 80101e0:	e798      	b.n	8010114 <_strtod_l+0xac4>
 80101e2:	2300      	movs	r3, #0
 80101e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80101e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80101e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80101ea:	6013      	str	r3, [r2, #0]
 80101ec:	f7ff ba6d 	b.w	800f6ca <_strtod_l+0x7a>
 80101f0:	2a65      	cmp	r2, #101	@ 0x65
 80101f2:	f43f ab66 	beq.w	800f8c2 <_strtod_l+0x272>
 80101f6:	2a45      	cmp	r2, #69	@ 0x45
 80101f8:	f43f ab63 	beq.w	800f8c2 <_strtod_l+0x272>
 80101fc:	2301      	movs	r3, #1
 80101fe:	f7ff bb9e 	b.w	800f93e <_strtod_l+0x2ee>
 8010202:	bf00      	nop
 8010204:	f3af 8000 	nop.w
 8010208:	ffc00000 	.word	0xffc00000
 801020c:	41dfffff 	.word	0x41dfffff
 8010210:	94a03595 	.word	0x94a03595
 8010214:	3fcfffff 	.word	0x3fcfffff

08010218 <_strtod_r>:
 8010218:	4b01      	ldr	r3, [pc, #4]	@ (8010220 <_strtod_r+0x8>)
 801021a:	f7ff ba19 	b.w	800f650 <_strtod_l>
 801021e:	bf00      	nop
 8010220:	200000b8 	.word	0x200000b8

08010224 <_strtol_l.constprop.0>:
 8010224:	2b24      	cmp	r3, #36	@ 0x24
 8010226:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801022a:	4686      	mov	lr, r0
 801022c:	4690      	mov	r8, r2
 801022e:	d801      	bhi.n	8010234 <_strtol_l.constprop.0+0x10>
 8010230:	2b01      	cmp	r3, #1
 8010232:	d106      	bne.n	8010242 <_strtol_l.constprop.0+0x1e>
 8010234:	f7fd fd90 	bl	800dd58 <__errno>
 8010238:	2316      	movs	r3, #22
 801023a:	6003      	str	r3, [r0, #0]
 801023c:	2000      	movs	r0, #0
 801023e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010242:	4834      	ldr	r0, [pc, #208]	@ (8010314 <_strtol_l.constprop.0+0xf0>)
 8010244:	460d      	mov	r5, r1
 8010246:	462a      	mov	r2, r5
 8010248:	f815 4b01 	ldrb.w	r4, [r5], #1
 801024c:	5d06      	ldrb	r6, [r0, r4]
 801024e:	f016 0608 	ands.w	r6, r6, #8
 8010252:	d1f8      	bne.n	8010246 <_strtol_l.constprop.0+0x22>
 8010254:	2c2d      	cmp	r4, #45	@ 0x2d
 8010256:	d12d      	bne.n	80102b4 <_strtol_l.constprop.0+0x90>
 8010258:	782c      	ldrb	r4, [r5, #0]
 801025a:	2601      	movs	r6, #1
 801025c:	1c95      	adds	r5, r2, #2
 801025e:	f033 0210 	bics.w	r2, r3, #16
 8010262:	d109      	bne.n	8010278 <_strtol_l.constprop.0+0x54>
 8010264:	2c30      	cmp	r4, #48	@ 0x30
 8010266:	d12a      	bne.n	80102be <_strtol_l.constprop.0+0x9a>
 8010268:	782a      	ldrb	r2, [r5, #0]
 801026a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801026e:	2a58      	cmp	r2, #88	@ 0x58
 8010270:	d125      	bne.n	80102be <_strtol_l.constprop.0+0x9a>
 8010272:	786c      	ldrb	r4, [r5, #1]
 8010274:	2310      	movs	r3, #16
 8010276:	3502      	adds	r5, #2
 8010278:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801027c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010280:	2200      	movs	r2, #0
 8010282:	fbbc f9f3 	udiv	r9, ip, r3
 8010286:	4610      	mov	r0, r2
 8010288:	fb03 ca19 	mls	sl, r3, r9, ip
 801028c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010290:	2f09      	cmp	r7, #9
 8010292:	d81b      	bhi.n	80102cc <_strtol_l.constprop.0+0xa8>
 8010294:	463c      	mov	r4, r7
 8010296:	42a3      	cmp	r3, r4
 8010298:	dd27      	ble.n	80102ea <_strtol_l.constprop.0+0xc6>
 801029a:	1c57      	adds	r7, r2, #1
 801029c:	d007      	beq.n	80102ae <_strtol_l.constprop.0+0x8a>
 801029e:	4581      	cmp	r9, r0
 80102a0:	d320      	bcc.n	80102e4 <_strtol_l.constprop.0+0xc0>
 80102a2:	d101      	bne.n	80102a8 <_strtol_l.constprop.0+0x84>
 80102a4:	45a2      	cmp	sl, r4
 80102a6:	db1d      	blt.n	80102e4 <_strtol_l.constprop.0+0xc0>
 80102a8:	fb00 4003 	mla	r0, r0, r3, r4
 80102ac:	2201      	movs	r2, #1
 80102ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80102b2:	e7eb      	b.n	801028c <_strtol_l.constprop.0+0x68>
 80102b4:	2c2b      	cmp	r4, #43	@ 0x2b
 80102b6:	bf04      	itt	eq
 80102b8:	782c      	ldrbeq	r4, [r5, #0]
 80102ba:	1c95      	addeq	r5, r2, #2
 80102bc:	e7cf      	b.n	801025e <_strtol_l.constprop.0+0x3a>
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d1da      	bne.n	8010278 <_strtol_l.constprop.0+0x54>
 80102c2:	2c30      	cmp	r4, #48	@ 0x30
 80102c4:	bf0c      	ite	eq
 80102c6:	2308      	moveq	r3, #8
 80102c8:	230a      	movne	r3, #10
 80102ca:	e7d5      	b.n	8010278 <_strtol_l.constprop.0+0x54>
 80102cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80102d0:	2f19      	cmp	r7, #25
 80102d2:	d801      	bhi.n	80102d8 <_strtol_l.constprop.0+0xb4>
 80102d4:	3c37      	subs	r4, #55	@ 0x37
 80102d6:	e7de      	b.n	8010296 <_strtol_l.constprop.0+0x72>
 80102d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80102dc:	2f19      	cmp	r7, #25
 80102de:	d804      	bhi.n	80102ea <_strtol_l.constprop.0+0xc6>
 80102e0:	3c57      	subs	r4, #87	@ 0x57
 80102e2:	e7d8      	b.n	8010296 <_strtol_l.constprop.0+0x72>
 80102e4:	f04f 32ff 	mov.w	r2, #4294967295
 80102e8:	e7e1      	b.n	80102ae <_strtol_l.constprop.0+0x8a>
 80102ea:	1c53      	adds	r3, r2, #1
 80102ec:	d108      	bne.n	8010300 <_strtol_l.constprop.0+0xdc>
 80102ee:	2322      	movs	r3, #34	@ 0x22
 80102f0:	f8ce 3000 	str.w	r3, [lr]
 80102f4:	4660      	mov	r0, ip
 80102f6:	f1b8 0f00 	cmp.w	r8, #0
 80102fa:	d0a0      	beq.n	801023e <_strtol_l.constprop.0+0x1a>
 80102fc:	1e69      	subs	r1, r5, #1
 80102fe:	e006      	b.n	801030e <_strtol_l.constprop.0+0xea>
 8010300:	b106      	cbz	r6, 8010304 <_strtol_l.constprop.0+0xe0>
 8010302:	4240      	negs	r0, r0
 8010304:	f1b8 0f00 	cmp.w	r8, #0
 8010308:	d099      	beq.n	801023e <_strtol_l.constprop.0+0x1a>
 801030a:	2a00      	cmp	r2, #0
 801030c:	d1f6      	bne.n	80102fc <_strtol_l.constprop.0+0xd8>
 801030e:	f8c8 1000 	str.w	r1, [r8]
 8010312:	e794      	b.n	801023e <_strtol_l.constprop.0+0x1a>
 8010314:	08011a79 	.word	0x08011a79

08010318 <_strtol_r>:
 8010318:	f7ff bf84 	b.w	8010224 <_strtol_l.constprop.0>

0801031c <__ssputs_r>:
 801031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010320:	688e      	ldr	r6, [r1, #8]
 8010322:	461f      	mov	r7, r3
 8010324:	42be      	cmp	r6, r7
 8010326:	680b      	ldr	r3, [r1, #0]
 8010328:	4682      	mov	sl, r0
 801032a:	460c      	mov	r4, r1
 801032c:	4690      	mov	r8, r2
 801032e:	d82d      	bhi.n	801038c <__ssputs_r+0x70>
 8010330:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010334:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010338:	d026      	beq.n	8010388 <__ssputs_r+0x6c>
 801033a:	6965      	ldr	r5, [r4, #20]
 801033c:	6909      	ldr	r1, [r1, #16]
 801033e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010342:	eba3 0901 	sub.w	r9, r3, r1
 8010346:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801034a:	1c7b      	adds	r3, r7, #1
 801034c:	444b      	add	r3, r9
 801034e:	106d      	asrs	r5, r5, #1
 8010350:	429d      	cmp	r5, r3
 8010352:	bf38      	it	cc
 8010354:	461d      	movcc	r5, r3
 8010356:	0553      	lsls	r3, r2, #21
 8010358:	d527      	bpl.n	80103aa <__ssputs_r+0x8e>
 801035a:	4629      	mov	r1, r5
 801035c:	f7fe fc1c 	bl	800eb98 <_malloc_r>
 8010360:	4606      	mov	r6, r0
 8010362:	b360      	cbz	r0, 80103be <__ssputs_r+0xa2>
 8010364:	6921      	ldr	r1, [r4, #16]
 8010366:	464a      	mov	r2, r9
 8010368:	f7fd fd23 	bl	800ddb2 <memcpy>
 801036c:	89a3      	ldrh	r3, [r4, #12]
 801036e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010376:	81a3      	strh	r3, [r4, #12]
 8010378:	6126      	str	r6, [r4, #16]
 801037a:	6165      	str	r5, [r4, #20]
 801037c:	444e      	add	r6, r9
 801037e:	eba5 0509 	sub.w	r5, r5, r9
 8010382:	6026      	str	r6, [r4, #0]
 8010384:	60a5      	str	r5, [r4, #8]
 8010386:	463e      	mov	r6, r7
 8010388:	42be      	cmp	r6, r7
 801038a:	d900      	bls.n	801038e <__ssputs_r+0x72>
 801038c:	463e      	mov	r6, r7
 801038e:	6820      	ldr	r0, [r4, #0]
 8010390:	4632      	mov	r2, r6
 8010392:	4641      	mov	r1, r8
 8010394:	f000 fb7c 	bl	8010a90 <memmove>
 8010398:	68a3      	ldr	r3, [r4, #8]
 801039a:	1b9b      	subs	r3, r3, r6
 801039c:	60a3      	str	r3, [r4, #8]
 801039e:	6823      	ldr	r3, [r4, #0]
 80103a0:	4433      	add	r3, r6
 80103a2:	6023      	str	r3, [r4, #0]
 80103a4:	2000      	movs	r0, #0
 80103a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103aa:	462a      	mov	r2, r5
 80103ac:	f000 ff3d 	bl	801122a <_realloc_r>
 80103b0:	4606      	mov	r6, r0
 80103b2:	2800      	cmp	r0, #0
 80103b4:	d1e0      	bne.n	8010378 <__ssputs_r+0x5c>
 80103b6:	6921      	ldr	r1, [r4, #16]
 80103b8:	4650      	mov	r0, sl
 80103ba:	f7fe fb79 	bl	800eab0 <_free_r>
 80103be:	230c      	movs	r3, #12
 80103c0:	f8ca 3000 	str.w	r3, [sl]
 80103c4:	89a3      	ldrh	r3, [r4, #12]
 80103c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103ca:	81a3      	strh	r3, [r4, #12]
 80103cc:	f04f 30ff 	mov.w	r0, #4294967295
 80103d0:	e7e9      	b.n	80103a6 <__ssputs_r+0x8a>
	...

080103d4 <_svfiprintf_r>:
 80103d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103d8:	4698      	mov	r8, r3
 80103da:	898b      	ldrh	r3, [r1, #12]
 80103dc:	061b      	lsls	r3, r3, #24
 80103de:	b09d      	sub	sp, #116	@ 0x74
 80103e0:	4607      	mov	r7, r0
 80103e2:	460d      	mov	r5, r1
 80103e4:	4614      	mov	r4, r2
 80103e6:	d510      	bpl.n	801040a <_svfiprintf_r+0x36>
 80103e8:	690b      	ldr	r3, [r1, #16]
 80103ea:	b973      	cbnz	r3, 801040a <_svfiprintf_r+0x36>
 80103ec:	2140      	movs	r1, #64	@ 0x40
 80103ee:	f7fe fbd3 	bl	800eb98 <_malloc_r>
 80103f2:	6028      	str	r0, [r5, #0]
 80103f4:	6128      	str	r0, [r5, #16]
 80103f6:	b930      	cbnz	r0, 8010406 <_svfiprintf_r+0x32>
 80103f8:	230c      	movs	r3, #12
 80103fa:	603b      	str	r3, [r7, #0]
 80103fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010400:	b01d      	add	sp, #116	@ 0x74
 8010402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010406:	2340      	movs	r3, #64	@ 0x40
 8010408:	616b      	str	r3, [r5, #20]
 801040a:	2300      	movs	r3, #0
 801040c:	9309      	str	r3, [sp, #36]	@ 0x24
 801040e:	2320      	movs	r3, #32
 8010410:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010414:	f8cd 800c 	str.w	r8, [sp, #12]
 8010418:	2330      	movs	r3, #48	@ 0x30
 801041a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80105b8 <_svfiprintf_r+0x1e4>
 801041e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010422:	f04f 0901 	mov.w	r9, #1
 8010426:	4623      	mov	r3, r4
 8010428:	469a      	mov	sl, r3
 801042a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801042e:	b10a      	cbz	r2, 8010434 <_svfiprintf_r+0x60>
 8010430:	2a25      	cmp	r2, #37	@ 0x25
 8010432:	d1f9      	bne.n	8010428 <_svfiprintf_r+0x54>
 8010434:	ebba 0b04 	subs.w	fp, sl, r4
 8010438:	d00b      	beq.n	8010452 <_svfiprintf_r+0x7e>
 801043a:	465b      	mov	r3, fp
 801043c:	4622      	mov	r2, r4
 801043e:	4629      	mov	r1, r5
 8010440:	4638      	mov	r0, r7
 8010442:	f7ff ff6b 	bl	801031c <__ssputs_r>
 8010446:	3001      	adds	r0, #1
 8010448:	f000 80a7 	beq.w	801059a <_svfiprintf_r+0x1c6>
 801044c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801044e:	445a      	add	r2, fp
 8010450:	9209      	str	r2, [sp, #36]	@ 0x24
 8010452:	f89a 3000 	ldrb.w	r3, [sl]
 8010456:	2b00      	cmp	r3, #0
 8010458:	f000 809f 	beq.w	801059a <_svfiprintf_r+0x1c6>
 801045c:	2300      	movs	r3, #0
 801045e:	f04f 32ff 	mov.w	r2, #4294967295
 8010462:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010466:	f10a 0a01 	add.w	sl, sl, #1
 801046a:	9304      	str	r3, [sp, #16]
 801046c:	9307      	str	r3, [sp, #28]
 801046e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010472:	931a      	str	r3, [sp, #104]	@ 0x68
 8010474:	4654      	mov	r4, sl
 8010476:	2205      	movs	r2, #5
 8010478:	f814 1b01 	ldrb.w	r1, [r4], #1
 801047c:	484e      	ldr	r0, [pc, #312]	@ (80105b8 <_svfiprintf_r+0x1e4>)
 801047e:	f7ef fea7 	bl	80001d0 <memchr>
 8010482:	9a04      	ldr	r2, [sp, #16]
 8010484:	b9d8      	cbnz	r0, 80104be <_svfiprintf_r+0xea>
 8010486:	06d0      	lsls	r0, r2, #27
 8010488:	bf44      	itt	mi
 801048a:	2320      	movmi	r3, #32
 801048c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010490:	0711      	lsls	r1, r2, #28
 8010492:	bf44      	itt	mi
 8010494:	232b      	movmi	r3, #43	@ 0x2b
 8010496:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801049a:	f89a 3000 	ldrb.w	r3, [sl]
 801049e:	2b2a      	cmp	r3, #42	@ 0x2a
 80104a0:	d015      	beq.n	80104ce <_svfiprintf_r+0xfa>
 80104a2:	9a07      	ldr	r2, [sp, #28]
 80104a4:	4654      	mov	r4, sl
 80104a6:	2000      	movs	r0, #0
 80104a8:	f04f 0c0a 	mov.w	ip, #10
 80104ac:	4621      	mov	r1, r4
 80104ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80104b2:	3b30      	subs	r3, #48	@ 0x30
 80104b4:	2b09      	cmp	r3, #9
 80104b6:	d94b      	bls.n	8010550 <_svfiprintf_r+0x17c>
 80104b8:	b1b0      	cbz	r0, 80104e8 <_svfiprintf_r+0x114>
 80104ba:	9207      	str	r2, [sp, #28]
 80104bc:	e014      	b.n	80104e8 <_svfiprintf_r+0x114>
 80104be:	eba0 0308 	sub.w	r3, r0, r8
 80104c2:	fa09 f303 	lsl.w	r3, r9, r3
 80104c6:	4313      	orrs	r3, r2
 80104c8:	9304      	str	r3, [sp, #16]
 80104ca:	46a2      	mov	sl, r4
 80104cc:	e7d2      	b.n	8010474 <_svfiprintf_r+0xa0>
 80104ce:	9b03      	ldr	r3, [sp, #12]
 80104d0:	1d19      	adds	r1, r3, #4
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	9103      	str	r1, [sp, #12]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	bfbb      	ittet	lt
 80104da:	425b      	neglt	r3, r3
 80104dc:	f042 0202 	orrlt.w	r2, r2, #2
 80104e0:	9307      	strge	r3, [sp, #28]
 80104e2:	9307      	strlt	r3, [sp, #28]
 80104e4:	bfb8      	it	lt
 80104e6:	9204      	strlt	r2, [sp, #16]
 80104e8:	7823      	ldrb	r3, [r4, #0]
 80104ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80104ec:	d10a      	bne.n	8010504 <_svfiprintf_r+0x130>
 80104ee:	7863      	ldrb	r3, [r4, #1]
 80104f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80104f2:	d132      	bne.n	801055a <_svfiprintf_r+0x186>
 80104f4:	9b03      	ldr	r3, [sp, #12]
 80104f6:	1d1a      	adds	r2, r3, #4
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	9203      	str	r2, [sp, #12]
 80104fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010500:	3402      	adds	r4, #2
 8010502:	9305      	str	r3, [sp, #20]
 8010504:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80105c8 <_svfiprintf_r+0x1f4>
 8010508:	7821      	ldrb	r1, [r4, #0]
 801050a:	2203      	movs	r2, #3
 801050c:	4650      	mov	r0, sl
 801050e:	f7ef fe5f 	bl	80001d0 <memchr>
 8010512:	b138      	cbz	r0, 8010524 <_svfiprintf_r+0x150>
 8010514:	9b04      	ldr	r3, [sp, #16]
 8010516:	eba0 000a 	sub.w	r0, r0, sl
 801051a:	2240      	movs	r2, #64	@ 0x40
 801051c:	4082      	lsls	r2, r0
 801051e:	4313      	orrs	r3, r2
 8010520:	3401      	adds	r4, #1
 8010522:	9304      	str	r3, [sp, #16]
 8010524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010528:	4824      	ldr	r0, [pc, #144]	@ (80105bc <_svfiprintf_r+0x1e8>)
 801052a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801052e:	2206      	movs	r2, #6
 8010530:	f7ef fe4e 	bl	80001d0 <memchr>
 8010534:	2800      	cmp	r0, #0
 8010536:	d036      	beq.n	80105a6 <_svfiprintf_r+0x1d2>
 8010538:	4b21      	ldr	r3, [pc, #132]	@ (80105c0 <_svfiprintf_r+0x1ec>)
 801053a:	bb1b      	cbnz	r3, 8010584 <_svfiprintf_r+0x1b0>
 801053c:	9b03      	ldr	r3, [sp, #12]
 801053e:	3307      	adds	r3, #7
 8010540:	f023 0307 	bic.w	r3, r3, #7
 8010544:	3308      	adds	r3, #8
 8010546:	9303      	str	r3, [sp, #12]
 8010548:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801054a:	4433      	add	r3, r6
 801054c:	9309      	str	r3, [sp, #36]	@ 0x24
 801054e:	e76a      	b.n	8010426 <_svfiprintf_r+0x52>
 8010550:	fb0c 3202 	mla	r2, ip, r2, r3
 8010554:	460c      	mov	r4, r1
 8010556:	2001      	movs	r0, #1
 8010558:	e7a8      	b.n	80104ac <_svfiprintf_r+0xd8>
 801055a:	2300      	movs	r3, #0
 801055c:	3401      	adds	r4, #1
 801055e:	9305      	str	r3, [sp, #20]
 8010560:	4619      	mov	r1, r3
 8010562:	f04f 0c0a 	mov.w	ip, #10
 8010566:	4620      	mov	r0, r4
 8010568:	f810 2b01 	ldrb.w	r2, [r0], #1
 801056c:	3a30      	subs	r2, #48	@ 0x30
 801056e:	2a09      	cmp	r2, #9
 8010570:	d903      	bls.n	801057a <_svfiprintf_r+0x1a6>
 8010572:	2b00      	cmp	r3, #0
 8010574:	d0c6      	beq.n	8010504 <_svfiprintf_r+0x130>
 8010576:	9105      	str	r1, [sp, #20]
 8010578:	e7c4      	b.n	8010504 <_svfiprintf_r+0x130>
 801057a:	fb0c 2101 	mla	r1, ip, r1, r2
 801057e:	4604      	mov	r4, r0
 8010580:	2301      	movs	r3, #1
 8010582:	e7f0      	b.n	8010566 <_svfiprintf_r+0x192>
 8010584:	ab03      	add	r3, sp, #12
 8010586:	9300      	str	r3, [sp, #0]
 8010588:	462a      	mov	r2, r5
 801058a:	4b0e      	ldr	r3, [pc, #56]	@ (80105c4 <_svfiprintf_r+0x1f0>)
 801058c:	a904      	add	r1, sp, #16
 801058e:	4638      	mov	r0, r7
 8010590:	f7fc fb9a 	bl	800ccc8 <_printf_float>
 8010594:	1c42      	adds	r2, r0, #1
 8010596:	4606      	mov	r6, r0
 8010598:	d1d6      	bne.n	8010548 <_svfiprintf_r+0x174>
 801059a:	89ab      	ldrh	r3, [r5, #12]
 801059c:	065b      	lsls	r3, r3, #25
 801059e:	f53f af2d 	bmi.w	80103fc <_svfiprintf_r+0x28>
 80105a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80105a4:	e72c      	b.n	8010400 <_svfiprintf_r+0x2c>
 80105a6:	ab03      	add	r3, sp, #12
 80105a8:	9300      	str	r3, [sp, #0]
 80105aa:	462a      	mov	r2, r5
 80105ac:	4b05      	ldr	r3, [pc, #20]	@ (80105c4 <_svfiprintf_r+0x1f0>)
 80105ae:	a904      	add	r1, sp, #16
 80105b0:	4638      	mov	r0, r7
 80105b2:	f7fc fe21 	bl	800d1f8 <_printf_i>
 80105b6:	e7ed      	b.n	8010594 <_svfiprintf_r+0x1c0>
 80105b8:	08011b79 	.word	0x08011b79
 80105bc:	08011b83 	.word	0x08011b83
 80105c0:	0800ccc9 	.word	0x0800ccc9
 80105c4:	0801031d 	.word	0x0801031d
 80105c8:	08011b7f 	.word	0x08011b7f

080105cc <__sfputc_r>:
 80105cc:	6893      	ldr	r3, [r2, #8]
 80105ce:	3b01      	subs	r3, #1
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	b410      	push	{r4}
 80105d4:	6093      	str	r3, [r2, #8]
 80105d6:	da08      	bge.n	80105ea <__sfputc_r+0x1e>
 80105d8:	6994      	ldr	r4, [r2, #24]
 80105da:	42a3      	cmp	r3, r4
 80105dc:	db01      	blt.n	80105e2 <__sfputc_r+0x16>
 80105de:	290a      	cmp	r1, #10
 80105e0:	d103      	bne.n	80105ea <__sfputc_r+0x1e>
 80105e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105e6:	f7fd bad0 	b.w	800db8a <__swbuf_r>
 80105ea:	6813      	ldr	r3, [r2, #0]
 80105ec:	1c58      	adds	r0, r3, #1
 80105ee:	6010      	str	r0, [r2, #0]
 80105f0:	7019      	strb	r1, [r3, #0]
 80105f2:	4608      	mov	r0, r1
 80105f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105f8:	4770      	bx	lr

080105fa <__sfputs_r>:
 80105fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105fc:	4606      	mov	r6, r0
 80105fe:	460f      	mov	r7, r1
 8010600:	4614      	mov	r4, r2
 8010602:	18d5      	adds	r5, r2, r3
 8010604:	42ac      	cmp	r4, r5
 8010606:	d101      	bne.n	801060c <__sfputs_r+0x12>
 8010608:	2000      	movs	r0, #0
 801060a:	e007      	b.n	801061c <__sfputs_r+0x22>
 801060c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010610:	463a      	mov	r2, r7
 8010612:	4630      	mov	r0, r6
 8010614:	f7ff ffda 	bl	80105cc <__sfputc_r>
 8010618:	1c43      	adds	r3, r0, #1
 801061a:	d1f3      	bne.n	8010604 <__sfputs_r+0xa>
 801061c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010620 <_vfiprintf_r>:
 8010620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010624:	460d      	mov	r5, r1
 8010626:	b09d      	sub	sp, #116	@ 0x74
 8010628:	4614      	mov	r4, r2
 801062a:	4698      	mov	r8, r3
 801062c:	4606      	mov	r6, r0
 801062e:	b118      	cbz	r0, 8010638 <_vfiprintf_r+0x18>
 8010630:	6a03      	ldr	r3, [r0, #32]
 8010632:	b90b      	cbnz	r3, 8010638 <_vfiprintf_r+0x18>
 8010634:	f7fd f9a0 	bl	800d978 <__sinit>
 8010638:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801063a:	07d9      	lsls	r1, r3, #31
 801063c:	d405      	bmi.n	801064a <_vfiprintf_r+0x2a>
 801063e:	89ab      	ldrh	r3, [r5, #12]
 8010640:	059a      	lsls	r2, r3, #22
 8010642:	d402      	bmi.n	801064a <_vfiprintf_r+0x2a>
 8010644:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010646:	f7fd fbb2 	bl	800ddae <__retarget_lock_acquire_recursive>
 801064a:	89ab      	ldrh	r3, [r5, #12]
 801064c:	071b      	lsls	r3, r3, #28
 801064e:	d501      	bpl.n	8010654 <_vfiprintf_r+0x34>
 8010650:	692b      	ldr	r3, [r5, #16]
 8010652:	b99b      	cbnz	r3, 801067c <_vfiprintf_r+0x5c>
 8010654:	4629      	mov	r1, r5
 8010656:	4630      	mov	r0, r6
 8010658:	f7fd fad6 	bl	800dc08 <__swsetup_r>
 801065c:	b170      	cbz	r0, 801067c <_vfiprintf_r+0x5c>
 801065e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010660:	07dc      	lsls	r4, r3, #31
 8010662:	d504      	bpl.n	801066e <_vfiprintf_r+0x4e>
 8010664:	f04f 30ff 	mov.w	r0, #4294967295
 8010668:	b01d      	add	sp, #116	@ 0x74
 801066a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801066e:	89ab      	ldrh	r3, [r5, #12]
 8010670:	0598      	lsls	r0, r3, #22
 8010672:	d4f7      	bmi.n	8010664 <_vfiprintf_r+0x44>
 8010674:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010676:	f7fd fb9b 	bl	800ddb0 <__retarget_lock_release_recursive>
 801067a:	e7f3      	b.n	8010664 <_vfiprintf_r+0x44>
 801067c:	2300      	movs	r3, #0
 801067e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010680:	2320      	movs	r3, #32
 8010682:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010686:	f8cd 800c 	str.w	r8, [sp, #12]
 801068a:	2330      	movs	r3, #48	@ 0x30
 801068c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801083c <_vfiprintf_r+0x21c>
 8010690:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010694:	f04f 0901 	mov.w	r9, #1
 8010698:	4623      	mov	r3, r4
 801069a:	469a      	mov	sl, r3
 801069c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106a0:	b10a      	cbz	r2, 80106a6 <_vfiprintf_r+0x86>
 80106a2:	2a25      	cmp	r2, #37	@ 0x25
 80106a4:	d1f9      	bne.n	801069a <_vfiprintf_r+0x7a>
 80106a6:	ebba 0b04 	subs.w	fp, sl, r4
 80106aa:	d00b      	beq.n	80106c4 <_vfiprintf_r+0xa4>
 80106ac:	465b      	mov	r3, fp
 80106ae:	4622      	mov	r2, r4
 80106b0:	4629      	mov	r1, r5
 80106b2:	4630      	mov	r0, r6
 80106b4:	f7ff ffa1 	bl	80105fa <__sfputs_r>
 80106b8:	3001      	adds	r0, #1
 80106ba:	f000 80a7 	beq.w	801080c <_vfiprintf_r+0x1ec>
 80106be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80106c0:	445a      	add	r2, fp
 80106c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80106c4:	f89a 3000 	ldrb.w	r3, [sl]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	f000 809f 	beq.w	801080c <_vfiprintf_r+0x1ec>
 80106ce:	2300      	movs	r3, #0
 80106d0:	f04f 32ff 	mov.w	r2, #4294967295
 80106d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80106d8:	f10a 0a01 	add.w	sl, sl, #1
 80106dc:	9304      	str	r3, [sp, #16]
 80106de:	9307      	str	r3, [sp, #28]
 80106e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80106e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80106e6:	4654      	mov	r4, sl
 80106e8:	2205      	movs	r2, #5
 80106ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106ee:	4853      	ldr	r0, [pc, #332]	@ (801083c <_vfiprintf_r+0x21c>)
 80106f0:	f7ef fd6e 	bl	80001d0 <memchr>
 80106f4:	9a04      	ldr	r2, [sp, #16]
 80106f6:	b9d8      	cbnz	r0, 8010730 <_vfiprintf_r+0x110>
 80106f8:	06d1      	lsls	r1, r2, #27
 80106fa:	bf44      	itt	mi
 80106fc:	2320      	movmi	r3, #32
 80106fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010702:	0713      	lsls	r3, r2, #28
 8010704:	bf44      	itt	mi
 8010706:	232b      	movmi	r3, #43	@ 0x2b
 8010708:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801070c:	f89a 3000 	ldrb.w	r3, [sl]
 8010710:	2b2a      	cmp	r3, #42	@ 0x2a
 8010712:	d015      	beq.n	8010740 <_vfiprintf_r+0x120>
 8010714:	9a07      	ldr	r2, [sp, #28]
 8010716:	4654      	mov	r4, sl
 8010718:	2000      	movs	r0, #0
 801071a:	f04f 0c0a 	mov.w	ip, #10
 801071e:	4621      	mov	r1, r4
 8010720:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010724:	3b30      	subs	r3, #48	@ 0x30
 8010726:	2b09      	cmp	r3, #9
 8010728:	d94b      	bls.n	80107c2 <_vfiprintf_r+0x1a2>
 801072a:	b1b0      	cbz	r0, 801075a <_vfiprintf_r+0x13a>
 801072c:	9207      	str	r2, [sp, #28]
 801072e:	e014      	b.n	801075a <_vfiprintf_r+0x13a>
 8010730:	eba0 0308 	sub.w	r3, r0, r8
 8010734:	fa09 f303 	lsl.w	r3, r9, r3
 8010738:	4313      	orrs	r3, r2
 801073a:	9304      	str	r3, [sp, #16]
 801073c:	46a2      	mov	sl, r4
 801073e:	e7d2      	b.n	80106e6 <_vfiprintf_r+0xc6>
 8010740:	9b03      	ldr	r3, [sp, #12]
 8010742:	1d19      	adds	r1, r3, #4
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	9103      	str	r1, [sp, #12]
 8010748:	2b00      	cmp	r3, #0
 801074a:	bfbb      	ittet	lt
 801074c:	425b      	neglt	r3, r3
 801074e:	f042 0202 	orrlt.w	r2, r2, #2
 8010752:	9307      	strge	r3, [sp, #28]
 8010754:	9307      	strlt	r3, [sp, #28]
 8010756:	bfb8      	it	lt
 8010758:	9204      	strlt	r2, [sp, #16]
 801075a:	7823      	ldrb	r3, [r4, #0]
 801075c:	2b2e      	cmp	r3, #46	@ 0x2e
 801075e:	d10a      	bne.n	8010776 <_vfiprintf_r+0x156>
 8010760:	7863      	ldrb	r3, [r4, #1]
 8010762:	2b2a      	cmp	r3, #42	@ 0x2a
 8010764:	d132      	bne.n	80107cc <_vfiprintf_r+0x1ac>
 8010766:	9b03      	ldr	r3, [sp, #12]
 8010768:	1d1a      	adds	r2, r3, #4
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	9203      	str	r2, [sp, #12]
 801076e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010772:	3402      	adds	r4, #2
 8010774:	9305      	str	r3, [sp, #20]
 8010776:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801084c <_vfiprintf_r+0x22c>
 801077a:	7821      	ldrb	r1, [r4, #0]
 801077c:	2203      	movs	r2, #3
 801077e:	4650      	mov	r0, sl
 8010780:	f7ef fd26 	bl	80001d0 <memchr>
 8010784:	b138      	cbz	r0, 8010796 <_vfiprintf_r+0x176>
 8010786:	9b04      	ldr	r3, [sp, #16]
 8010788:	eba0 000a 	sub.w	r0, r0, sl
 801078c:	2240      	movs	r2, #64	@ 0x40
 801078e:	4082      	lsls	r2, r0
 8010790:	4313      	orrs	r3, r2
 8010792:	3401      	adds	r4, #1
 8010794:	9304      	str	r3, [sp, #16]
 8010796:	f814 1b01 	ldrb.w	r1, [r4], #1
 801079a:	4829      	ldr	r0, [pc, #164]	@ (8010840 <_vfiprintf_r+0x220>)
 801079c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80107a0:	2206      	movs	r2, #6
 80107a2:	f7ef fd15 	bl	80001d0 <memchr>
 80107a6:	2800      	cmp	r0, #0
 80107a8:	d03f      	beq.n	801082a <_vfiprintf_r+0x20a>
 80107aa:	4b26      	ldr	r3, [pc, #152]	@ (8010844 <_vfiprintf_r+0x224>)
 80107ac:	bb1b      	cbnz	r3, 80107f6 <_vfiprintf_r+0x1d6>
 80107ae:	9b03      	ldr	r3, [sp, #12]
 80107b0:	3307      	adds	r3, #7
 80107b2:	f023 0307 	bic.w	r3, r3, #7
 80107b6:	3308      	adds	r3, #8
 80107b8:	9303      	str	r3, [sp, #12]
 80107ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107bc:	443b      	add	r3, r7
 80107be:	9309      	str	r3, [sp, #36]	@ 0x24
 80107c0:	e76a      	b.n	8010698 <_vfiprintf_r+0x78>
 80107c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80107c6:	460c      	mov	r4, r1
 80107c8:	2001      	movs	r0, #1
 80107ca:	e7a8      	b.n	801071e <_vfiprintf_r+0xfe>
 80107cc:	2300      	movs	r3, #0
 80107ce:	3401      	adds	r4, #1
 80107d0:	9305      	str	r3, [sp, #20]
 80107d2:	4619      	mov	r1, r3
 80107d4:	f04f 0c0a 	mov.w	ip, #10
 80107d8:	4620      	mov	r0, r4
 80107da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80107de:	3a30      	subs	r2, #48	@ 0x30
 80107e0:	2a09      	cmp	r2, #9
 80107e2:	d903      	bls.n	80107ec <_vfiprintf_r+0x1cc>
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d0c6      	beq.n	8010776 <_vfiprintf_r+0x156>
 80107e8:	9105      	str	r1, [sp, #20]
 80107ea:	e7c4      	b.n	8010776 <_vfiprintf_r+0x156>
 80107ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80107f0:	4604      	mov	r4, r0
 80107f2:	2301      	movs	r3, #1
 80107f4:	e7f0      	b.n	80107d8 <_vfiprintf_r+0x1b8>
 80107f6:	ab03      	add	r3, sp, #12
 80107f8:	9300      	str	r3, [sp, #0]
 80107fa:	462a      	mov	r2, r5
 80107fc:	4b12      	ldr	r3, [pc, #72]	@ (8010848 <_vfiprintf_r+0x228>)
 80107fe:	a904      	add	r1, sp, #16
 8010800:	4630      	mov	r0, r6
 8010802:	f7fc fa61 	bl	800ccc8 <_printf_float>
 8010806:	4607      	mov	r7, r0
 8010808:	1c78      	adds	r0, r7, #1
 801080a:	d1d6      	bne.n	80107ba <_vfiprintf_r+0x19a>
 801080c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801080e:	07d9      	lsls	r1, r3, #31
 8010810:	d405      	bmi.n	801081e <_vfiprintf_r+0x1fe>
 8010812:	89ab      	ldrh	r3, [r5, #12]
 8010814:	059a      	lsls	r2, r3, #22
 8010816:	d402      	bmi.n	801081e <_vfiprintf_r+0x1fe>
 8010818:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801081a:	f7fd fac9 	bl	800ddb0 <__retarget_lock_release_recursive>
 801081e:	89ab      	ldrh	r3, [r5, #12]
 8010820:	065b      	lsls	r3, r3, #25
 8010822:	f53f af1f 	bmi.w	8010664 <_vfiprintf_r+0x44>
 8010826:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010828:	e71e      	b.n	8010668 <_vfiprintf_r+0x48>
 801082a:	ab03      	add	r3, sp, #12
 801082c:	9300      	str	r3, [sp, #0]
 801082e:	462a      	mov	r2, r5
 8010830:	4b05      	ldr	r3, [pc, #20]	@ (8010848 <_vfiprintf_r+0x228>)
 8010832:	a904      	add	r1, sp, #16
 8010834:	4630      	mov	r0, r6
 8010836:	f7fc fcdf 	bl	800d1f8 <_printf_i>
 801083a:	e7e4      	b.n	8010806 <_vfiprintf_r+0x1e6>
 801083c:	08011b79 	.word	0x08011b79
 8010840:	08011b83 	.word	0x08011b83
 8010844:	0800ccc9 	.word	0x0800ccc9
 8010848:	080105fb 	.word	0x080105fb
 801084c:	08011b7f 	.word	0x08011b7f

08010850 <__sflush_r>:
 8010850:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010858:	0716      	lsls	r6, r2, #28
 801085a:	4605      	mov	r5, r0
 801085c:	460c      	mov	r4, r1
 801085e:	d454      	bmi.n	801090a <__sflush_r+0xba>
 8010860:	684b      	ldr	r3, [r1, #4]
 8010862:	2b00      	cmp	r3, #0
 8010864:	dc02      	bgt.n	801086c <__sflush_r+0x1c>
 8010866:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010868:	2b00      	cmp	r3, #0
 801086a:	dd48      	ble.n	80108fe <__sflush_r+0xae>
 801086c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801086e:	2e00      	cmp	r6, #0
 8010870:	d045      	beq.n	80108fe <__sflush_r+0xae>
 8010872:	2300      	movs	r3, #0
 8010874:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010878:	682f      	ldr	r7, [r5, #0]
 801087a:	6a21      	ldr	r1, [r4, #32]
 801087c:	602b      	str	r3, [r5, #0]
 801087e:	d030      	beq.n	80108e2 <__sflush_r+0x92>
 8010880:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010882:	89a3      	ldrh	r3, [r4, #12]
 8010884:	0759      	lsls	r1, r3, #29
 8010886:	d505      	bpl.n	8010894 <__sflush_r+0x44>
 8010888:	6863      	ldr	r3, [r4, #4]
 801088a:	1ad2      	subs	r2, r2, r3
 801088c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801088e:	b10b      	cbz	r3, 8010894 <__sflush_r+0x44>
 8010890:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010892:	1ad2      	subs	r2, r2, r3
 8010894:	2300      	movs	r3, #0
 8010896:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010898:	6a21      	ldr	r1, [r4, #32]
 801089a:	4628      	mov	r0, r5
 801089c:	47b0      	blx	r6
 801089e:	1c43      	adds	r3, r0, #1
 80108a0:	89a3      	ldrh	r3, [r4, #12]
 80108a2:	d106      	bne.n	80108b2 <__sflush_r+0x62>
 80108a4:	6829      	ldr	r1, [r5, #0]
 80108a6:	291d      	cmp	r1, #29
 80108a8:	d82b      	bhi.n	8010902 <__sflush_r+0xb2>
 80108aa:	4a2a      	ldr	r2, [pc, #168]	@ (8010954 <__sflush_r+0x104>)
 80108ac:	410a      	asrs	r2, r1
 80108ae:	07d6      	lsls	r6, r2, #31
 80108b0:	d427      	bmi.n	8010902 <__sflush_r+0xb2>
 80108b2:	2200      	movs	r2, #0
 80108b4:	6062      	str	r2, [r4, #4]
 80108b6:	04d9      	lsls	r1, r3, #19
 80108b8:	6922      	ldr	r2, [r4, #16]
 80108ba:	6022      	str	r2, [r4, #0]
 80108bc:	d504      	bpl.n	80108c8 <__sflush_r+0x78>
 80108be:	1c42      	adds	r2, r0, #1
 80108c0:	d101      	bne.n	80108c6 <__sflush_r+0x76>
 80108c2:	682b      	ldr	r3, [r5, #0]
 80108c4:	b903      	cbnz	r3, 80108c8 <__sflush_r+0x78>
 80108c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80108c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80108ca:	602f      	str	r7, [r5, #0]
 80108cc:	b1b9      	cbz	r1, 80108fe <__sflush_r+0xae>
 80108ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80108d2:	4299      	cmp	r1, r3
 80108d4:	d002      	beq.n	80108dc <__sflush_r+0x8c>
 80108d6:	4628      	mov	r0, r5
 80108d8:	f7fe f8ea 	bl	800eab0 <_free_r>
 80108dc:	2300      	movs	r3, #0
 80108de:	6363      	str	r3, [r4, #52]	@ 0x34
 80108e0:	e00d      	b.n	80108fe <__sflush_r+0xae>
 80108e2:	2301      	movs	r3, #1
 80108e4:	4628      	mov	r0, r5
 80108e6:	47b0      	blx	r6
 80108e8:	4602      	mov	r2, r0
 80108ea:	1c50      	adds	r0, r2, #1
 80108ec:	d1c9      	bne.n	8010882 <__sflush_r+0x32>
 80108ee:	682b      	ldr	r3, [r5, #0]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d0c6      	beq.n	8010882 <__sflush_r+0x32>
 80108f4:	2b1d      	cmp	r3, #29
 80108f6:	d001      	beq.n	80108fc <__sflush_r+0xac>
 80108f8:	2b16      	cmp	r3, #22
 80108fa:	d11e      	bne.n	801093a <__sflush_r+0xea>
 80108fc:	602f      	str	r7, [r5, #0]
 80108fe:	2000      	movs	r0, #0
 8010900:	e022      	b.n	8010948 <__sflush_r+0xf8>
 8010902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010906:	b21b      	sxth	r3, r3
 8010908:	e01b      	b.n	8010942 <__sflush_r+0xf2>
 801090a:	690f      	ldr	r7, [r1, #16]
 801090c:	2f00      	cmp	r7, #0
 801090e:	d0f6      	beq.n	80108fe <__sflush_r+0xae>
 8010910:	0793      	lsls	r3, r2, #30
 8010912:	680e      	ldr	r6, [r1, #0]
 8010914:	bf08      	it	eq
 8010916:	694b      	ldreq	r3, [r1, #20]
 8010918:	600f      	str	r7, [r1, #0]
 801091a:	bf18      	it	ne
 801091c:	2300      	movne	r3, #0
 801091e:	eba6 0807 	sub.w	r8, r6, r7
 8010922:	608b      	str	r3, [r1, #8]
 8010924:	f1b8 0f00 	cmp.w	r8, #0
 8010928:	dde9      	ble.n	80108fe <__sflush_r+0xae>
 801092a:	6a21      	ldr	r1, [r4, #32]
 801092c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801092e:	4643      	mov	r3, r8
 8010930:	463a      	mov	r2, r7
 8010932:	4628      	mov	r0, r5
 8010934:	47b0      	blx	r6
 8010936:	2800      	cmp	r0, #0
 8010938:	dc08      	bgt.n	801094c <__sflush_r+0xfc>
 801093a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801093e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010942:	81a3      	strh	r3, [r4, #12]
 8010944:	f04f 30ff 	mov.w	r0, #4294967295
 8010948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801094c:	4407      	add	r7, r0
 801094e:	eba8 0800 	sub.w	r8, r8, r0
 8010952:	e7e7      	b.n	8010924 <__sflush_r+0xd4>
 8010954:	dfbffffe 	.word	0xdfbffffe

08010958 <_fflush_r>:
 8010958:	b538      	push	{r3, r4, r5, lr}
 801095a:	690b      	ldr	r3, [r1, #16]
 801095c:	4605      	mov	r5, r0
 801095e:	460c      	mov	r4, r1
 8010960:	b913      	cbnz	r3, 8010968 <_fflush_r+0x10>
 8010962:	2500      	movs	r5, #0
 8010964:	4628      	mov	r0, r5
 8010966:	bd38      	pop	{r3, r4, r5, pc}
 8010968:	b118      	cbz	r0, 8010972 <_fflush_r+0x1a>
 801096a:	6a03      	ldr	r3, [r0, #32]
 801096c:	b90b      	cbnz	r3, 8010972 <_fflush_r+0x1a>
 801096e:	f7fd f803 	bl	800d978 <__sinit>
 8010972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d0f3      	beq.n	8010962 <_fflush_r+0xa>
 801097a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801097c:	07d0      	lsls	r0, r2, #31
 801097e:	d404      	bmi.n	801098a <_fflush_r+0x32>
 8010980:	0599      	lsls	r1, r3, #22
 8010982:	d402      	bmi.n	801098a <_fflush_r+0x32>
 8010984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010986:	f7fd fa12 	bl	800ddae <__retarget_lock_acquire_recursive>
 801098a:	4628      	mov	r0, r5
 801098c:	4621      	mov	r1, r4
 801098e:	f7ff ff5f 	bl	8010850 <__sflush_r>
 8010992:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010994:	07da      	lsls	r2, r3, #31
 8010996:	4605      	mov	r5, r0
 8010998:	d4e4      	bmi.n	8010964 <_fflush_r+0xc>
 801099a:	89a3      	ldrh	r3, [r4, #12]
 801099c:	059b      	lsls	r3, r3, #22
 801099e:	d4e1      	bmi.n	8010964 <_fflush_r+0xc>
 80109a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80109a2:	f7fd fa05 	bl	800ddb0 <__retarget_lock_release_recursive>
 80109a6:	e7dd      	b.n	8010964 <_fflush_r+0xc>

080109a8 <fiprintf>:
 80109a8:	b40e      	push	{r1, r2, r3}
 80109aa:	b503      	push	{r0, r1, lr}
 80109ac:	4601      	mov	r1, r0
 80109ae:	ab03      	add	r3, sp, #12
 80109b0:	4805      	ldr	r0, [pc, #20]	@ (80109c8 <fiprintf+0x20>)
 80109b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80109b6:	6800      	ldr	r0, [r0, #0]
 80109b8:	9301      	str	r3, [sp, #4]
 80109ba:	f7ff fe31 	bl	8010620 <_vfiprintf_r>
 80109be:	b002      	add	sp, #8
 80109c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80109c4:	b003      	add	sp, #12
 80109c6:	4770      	bx	lr
 80109c8:	20000068 	.word	0x20000068

080109cc <__swhatbuf_r>:
 80109cc:	b570      	push	{r4, r5, r6, lr}
 80109ce:	460c      	mov	r4, r1
 80109d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109d4:	2900      	cmp	r1, #0
 80109d6:	b096      	sub	sp, #88	@ 0x58
 80109d8:	4615      	mov	r5, r2
 80109da:	461e      	mov	r6, r3
 80109dc:	da0d      	bge.n	80109fa <__swhatbuf_r+0x2e>
 80109de:	89a3      	ldrh	r3, [r4, #12]
 80109e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80109e4:	f04f 0100 	mov.w	r1, #0
 80109e8:	bf14      	ite	ne
 80109ea:	2340      	movne	r3, #64	@ 0x40
 80109ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80109f0:	2000      	movs	r0, #0
 80109f2:	6031      	str	r1, [r6, #0]
 80109f4:	602b      	str	r3, [r5, #0]
 80109f6:	b016      	add	sp, #88	@ 0x58
 80109f8:	bd70      	pop	{r4, r5, r6, pc}
 80109fa:	466a      	mov	r2, sp
 80109fc:	f000 f874 	bl	8010ae8 <_fstat_r>
 8010a00:	2800      	cmp	r0, #0
 8010a02:	dbec      	blt.n	80109de <__swhatbuf_r+0x12>
 8010a04:	9901      	ldr	r1, [sp, #4]
 8010a06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010a0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010a0e:	4259      	negs	r1, r3
 8010a10:	4159      	adcs	r1, r3
 8010a12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010a16:	e7eb      	b.n	80109f0 <__swhatbuf_r+0x24>

08010a18 <__smakebuf_r>:
 8010a18:	898b      	ldrh	r3, [r1, #12]
 8010a1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a1c:	079d      	lsls	r5, r3, #30
 8010a1e:	4606      	mov	r6, r0
 8010a20:	460c      	mov	r4, r1
 8010a22:	d507      	bpl.n	8010a34 <__smakebuf_r+0x1c>
 8010a24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010a28:	6023      	str	r3, [r4, #0]
 8010a2a:	6123      	str	r3, [r4, #16]
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	6163      	str	r3, [r4, #20]
 8010a30:	b003      	add	sp, #12
 8010a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a34:	ab01      	add	r3, sp, #4
 8010a36:	466a      	mov	r2, sp
 8010a38:	f7ff ffc8 	bl	80109cc <__swhatbuf_r>
 8010a3c:	9f00      	ldr	r7, [sp, #0]
 8010a3e:	4605      	mov	r5, r0
 8010a40:	4639      	mov	r1, r7
 8010a42:	4630      	mov	r0, r6
 8010a44:	f7fe f8a8 	bl	800eb98 <_malloc_r>
 8010a48:	b948      	cbnz	r0, 8010a5e <__smakebuf_r+0x46>
 8010a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a4e:	059a      	lsls	r2, r3, #22
 8010a50:	d4ee      	bmi.n	8010a30 <__smakebuf_r+0x18>
 8010a52:	f023 0303 	bic.w	r3, r3, #3
 8010a56:	f043 0302 	orr.w	r3, r3, #2
 8010a5a:	81a3      	strh	r3, [r4, #12]
 8010a5c:	e7e2      	b.n	8010a24 <__smakebuf_r+0xc>
 8010a5e:	89a3      	ldrh	r3, [r4, #12]
 8010a60:	6020      	str	r0, [r4, #0]
 8010a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a66:	81a3      	strh	r3, [r4, #12]
 8010a68:	9b01      	ldr	r3, [sp, #4]
 8010a6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010a6e:	b15b      	cbz	r3, 8010a88 <__smakebuf_r+0x70>
 8010a70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a74:	4630      	mov	r0, r6
 8010a76:	f000 f849 	bl	8010b0c <_isatty_r>
 8010a7a:	b128      	cbz	r0, 8010a88 <__smakebuf_r+0x70>
 8010a7c:	89a3      	ldrh	r3, [r4, #12]
 8010a7e:	f023 0303 	bic.w	r3, r3, #3
 8010a82:	f043 0301 	orr.w	r3, r3, #1
 8010a86:	81a3      	strh	r3, [r4, #12]
 8010a88:	89a3      	ldrh	r3, [r4, #12]
 8010a8a:	431d      	orrs	r5, r3
 8010a8c:	81a5      	strh	r5, [r4, #12]
 8010a8e:	e7cf      	b.n	8010a30 <__smakebuf_r+0x18>

08010a90 <memmove>:
 8010a90:	4288      	cmp	r0, r1
 8010a92:	b510      	push	{r4, lr}
 8010a94:	eb01 0402 	add.w	r4, r1, r2
 8010a98:	d902      	bls.n	8010aa0 <memmove+0x10>
 8010a9a:	4284      	cmp	r4, r0
 8010a9c:	4623      	mov	r3, r4
 8010a9e:	d807      	bhi.n	8010ab0 <memmove+0x20>
 8010aa0:	1e43      	subs	r3, r0, #1
 8010aa2:	42a1      	cmp	r1, r4
 8010aa4:	d008      	beq.n	8010ab8 <memmove+0x28>
 8010aa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010aaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010aae:	e7f8      	b.n	8010aa2 <memmove+0x12>
 8010ab0:	4402      	add	r2, r0
 8010ab2:	4601      	mov	r1, r0
 8010ab4:	428a      	cmp	r2, r1
 8010ab6:	d100      	bne.n	8010aba <memmove+0x2a>
 8010ab8:	bd10      	pop	{r4, pc}
 8010aba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010abe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010ac2:	e7f7      	b.n	8010ab4 <memmove+0x24>

08010ac4 <strncmp>:
 8010ac4:	b510      	push	{r4, lr}
 8010ac6:	b16a      	cbz	r2, 8010ae4 <strncmp+0x20>
 8010ac8:	3901      	subs	r1, #1
 8010aca:	1884      	adds	r4, r0, r2
 8010acc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ad0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010ad4:	429a      	cmp	r2, r3
 8010ad6:	d103      	bne.n	8010ae0 <strncmp+0x1c>
 8010ad8:	42a0      	cmp	r0, r4
 8010ada:	d001      	beq.n	8010ae0 <strncmp+0x1c>
 8010adc:	2a00      	cmp	r2, #0
 8010ade:	d1f5      	bne.n	8010acc <strncmp+0x8>
 8010ae0:	1ad0      	subs	r0, r2, r3
 8010ae2:	bd10      	pop	{r4, pc}
 8010ae4:	4610      	mov	r0, r2
 8010ae6:	e7fc      	b.n	8010ae2 <strncmp+0x1e>

08010ae8 <_fstat_r>:
 8010ae8:	b538      	push	{r3, r4, r5, lr}
 8010aea:	4d07      	ldr	r5, [pc, #28]	@ (8010b08 <_fstat_r+0x20>)
 8010aec:	2300      	movs	r3, #0
 8010aee:	4604      	mov	r4, r0
 8010af0:	4608      	mov	r0, r1
 8010af2:	4611      	mov	r1, r2
 8010af4:	602b      	str	r3, [r5, #0]
 8010af6:	f7f1 ff65 	bl	80029c4 <_fstat>
 8010afa:	1c43      	adds	r3, r0, #1
 8010afc:	d102      	bne.n	8010b04 <_fstat_r+0x1c>
 8010afe:	682b      	ldr	r3, [r5, #0]
 8010b00:	b103      	cbz	r3, 8010b04 <_fstat_r+0x1c>
 8010b02:	6023      	str	r3, [r4, #0]
 8010b04:	bd38      	pop	{r3, r4, r5, pc}
 8010b06:	bf00      	nop
 8010b08:	20003958 	.word	0x20003958

08010b0c <_isatty_r>:
 8010b0c:	b538      	push	{r3, r4, r5, lr}
 8010b0e:	4d06      	ldr	r5, [pc, #24]	@ (8010b28 <_isatty_r+0x1c>)
 8010b10:	2300      	movs	r3, #0
 8010b12:	4604      	mov	r4, r0
 8010b14:	4608      	mov	r0, r1
 8010b16:	602b      	str	r3, [r5, #0]
 8010b18:	f7f1 ff64 	bl	80029e4 <_isatty>
 8010b1c:	1c43      	adds	r3, r0, #1
 8010b1e:	d102      	bne.n	8010b26 <_isatty_r+0x1a>
 8010b20:	682b      	ldr	r3, [r5, #0]
 8010b22:	b103      	cbz	r3, 8010b26 <_isatty_r+0x1a>
 8010b24:	6023      	str	r3, [r4, #0]
 8010b26:	bd38      	pop	{r3, r4, r5, pc}
 8010b28:	20003958 	.word	0x20003958

08010b2c <_sbrk_r>:
 8010b2c:	b538      	push	{r3, r4, r5, lr}
 8010b2e:	4d06      	ldr	r5, [pc, #24]	@ (8010b48 <_sbrk_r+0x1c>)
 8010b30:	2300      	movs	r3, #0
 8010b32:	4604      	mov	r4, r0
 8010b34:	4608      	mov	r0, r1
 8010b36:	602b      	str	r3, [r5, #0]
 8010b38:	f7f1 ff6c 	bl	8002a14 <_sbrk>
 8010b3c:	1c43      	adds	r3, r0, #1
 8010b3e:	d102      	bne.n	8010b46 <_sbrk_r+0x1a>
 8010b40:	682b      	ldr	r3, [r5, #0]
 8010b42:	b103      	cbz	r3, 8010b46 <_sbrk_r+0x1a>
 8010b44:	6023      	str	r3, [r4, #0]
 8010b46:	bd38      	pop	{r3, r4, r5, pc}
 8010b48:	20003958 	.word	0x20003958
 8010b4c:	00000000 	.word	0x00000000

08010b50 <nan>:
 8010b50:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010b58 <nan+0x8>
 8010b54:	4770      	bx	lr
 8010b56:	bf00      	nop
 8010b58:	00000000 	.word	0x00000000
 8010b5c:	7ff80000 	.word	0x7ff80000

08010b60 <abort>:
 8010b60:	b508      	push	{r3, lr}
 8010b62:	2006      	movs	r0, #6
 8010b64:	f000 fbc4 	bl	80112f0 <raise>
 8010b68:	2001      	movs	r0, #1
 8010b6a:	f7f1 fedb 	bl	8002924 <_exit>

08010b6e <_calloc_r>:
 8010b6e:	b570      	push	{r4, r5, r6, lr}
 8010b70:	fba1 5402 	umull	r5, r4, r1, r2
 8010b74:	b93c      	cbnz	r4, 8010b86 <_calloc_r+0x18>
 8010b76:	4629      	mov	r1, r5
 8010b78:	f7fe f80e 	bl	800eb98 <_malloc_r>
 8010b7c:	4606      	mov	r6, r0
 8010b7e:	b928      	cbnz	r0, 8010b8c <_calloc_r+0x1e>
 8010b80:	2600      	movs	r6, #0
 8010b82:	4630      	mov	r0, r6
 8010b84:	bd70      	pop	{r4, r5, r6, pc}
 8010b86:	220c      	movs	r2, #12
 8010b88:	6002      	str	r2, [r0, #0]
 8010b8a:	e7f9      	b.n	8010b80 <_calloc_r+0x12>
 8010b8c:	462a      	mov	r2, r5
 8010b8e:	4621      	mov	r1, r4
 8010b90:	f7fd f890 	bl	800dcb4 <memset>
 8010b94:	e7f5      	b.n	8010b82 <_calloc_r+0x14>

08010b96 <rshift>:
 8010b96:	6903      	ldr	r3, [r0, #16]
 8010b98:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ba0:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010ba4:	f100 0414 	add.w	r4, r0, #20
 8010ba8:	dd45      	ble.n	8010c36 <rshift+0xa0>
 8010baa:	f011 011f 	ands.w	r1, r1, #31
 8010bae:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010bb2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010bb6:	d10c      	bne.n	8010bd2 <rshift+0x3c>
 8010bb8:	f100 0710 	add.w	r7, r0, #16
 8010bbc:	4629      	mov	r1, r5
 8010bbe:	42b1      	cmp	r1, r6
 8010bc0:	d334      	bcc.n	8010c2c <rshift+0x96>
 8010bc2:	1a9b      	subs	r3, r3, r2
 8010bc4:	009b      	lsls	r3, r3, #2
 8010bc6:	1eea      	subs	r2, r5, #3
 8010bc8:	4296      	cmp	r6, r2
 8010bca:	bf38      	it	cc
 8010bcc:	2300      	movcc	r3, #0
 8010bce:	4423      	add	r3, r4
 8010bd0:	e015      	b.n	8010bfe <rshift+0x68>
 8010bd2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010bd6:	f1c1 0820 	rsb	r8, r1, #32
 8010bda:	40cf      	lsrs	r7, r1
 8010bdc:	f105 0e04 	add.w	lr, r5, #4
 8010be0:	46a1      	mov	r9, r4
 8010be2:	4576      	cmp	r6, lr
 8010be4:	46f4      	mov	ip, lr
 8010be6:	d815      	bhi.n	8010c14 <rshift+0x7e>
 8010be8:	1a9a      	subs	r2, r3, r2
 8010bea:	0092      	lsls	r2, r2, #2
 8010bec:	3a04      	subs	r2, #4
 8010bee:	3501      	adds	r5, #1
 8010bf0:	42ae      	cmp	r6, r5
 8010bf2:	bf38      	it	cc
 8010bf4:	2200      	movcc	r2, #0
 8010bf6:	18a3      	adds	r3, r4, r2
 8010bf8:	50a7      	str	r7, [r4, r2]
 8010bfa:	b107      	cbz	r7, 8010bfe <rshift+0x68>
 8010bfc:	3304      	adds	r3, #4
 8010bfe:	1b1a      	subs	r2, r3, r4
 8010c00:	42a3      	cmp	r3, r4
 8010c02:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010c06:	bf08      	it	eq
 8010c08:	2300      	moveq	r3, #0
 8010c0a:	6102      	str	r2, [r0, #16]
 8010c0c:	bf08      	it	eq
 8010c0e:	6143      	streq	r3, [r0, #20]
 8010c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c14:	f8dc c000 	ldr.w	ip, [ip]
 8010c18:	fa0c fc08 	lsl.w	ip, ip, r8
 8010c1c:	ea4c 0707 	orr.w	r7, ip, r7
 8010c20:	f849 7b04 	str.w	r7, [r9], #4
 8010c24:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010c28:	40cf      	lsrs	r7, r1
 8010c2a:	e7da      	b.n	8010be2 <rshift+0x4c>
 8010c2c:	f851 cb04 	ldr.w	ip, [r1], #4
 8010c30:	f847 cf04 	str.w	ip, [r7, #4]!
 8010c34:	e7c3      	b.n	8010bbe <rshift+0x28>
 8010c36:	4623      	mov	r3, r4
 8010c38:	e7e1      	b.n	8010bfe <rshift+0x68>

08010c3a <__hexdig_fun>:
 8010c3a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010c3e:	2b09      	cmp	r3, #9
 8010c40:	d802      	bhi.n	8010c48 <__hexdig_fun+0xe>
 8010c42:	3820      	subs	r0, #32
 8010c44:	b2c0      	uxtb	r0, r0
 8010c46:	4770      	bx	lr
 8010c48:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010c4c:	2b05      	cmp	r3, #5
 8010c4e:	d801      	bhi.n	8010c54 <__hexdig_fun+0x1a>
 8010c50:	3847      	subs	r0, #71	@ 0x47
 8010c52:	e7f7      	b.n	8010c44 <__hexdig_fun+0xa>
 8010c54:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010c58:	2b05      	cmp	r3, #5
 8010c5a:	d801      	bhi.n	8010c60 <__hexdig_fun+0x26>
 8010c5c:	3827      	subs	r0, #39	@ 0x27
 8010c5e:	e7f1      	b.n	8010c44 <__hexdig_fun+0xa>
 8010c60:	2000      	movs	r0, #0
 8010c62:	4770      	bx	lr

08010c64 <__gethex>:
 8010c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c68:	b085      	sub	sp, #20
 8010c6a:	468a      	mov	sl, r1
 8010c6c:	9302      	str	r3, [sp, #8]
 8010c6e:	680b      	ldr	r3, [r1, #0]
 8010c70:	9001      	str	r0, [sp, #4]
 8010c72:	4690      	mov	r8, r2
 8010c74:	1c9c      	adds	r4, r3, #2
 8010c76:	46a1      	mov	r9, r4
 8010c78:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010c7c:	2830      	cmp	r0, #48	@ 0x30
 8010c7e:	d0fa      	beq.n	8010c76 <__gethex+0x12>
 8010c80:	eba9 0303 	sub.w	r3, r9, r3
 8010c84:	f1a3 0b02 	sub.w	fp, r3, #2
 8010c88:	f7ff ffd7 	bl	8010c3a <__hexdig_fun>
 8010c8c:	4605      	mov	r5, r0
 8010c8e:	2800      	cmp	r0, #0
 8010c90:	d168      	bne.n	8010d64 <__gethex+0x100>
 8010c92:	49a0      	ldr	r1, [pc, #640]	@ (8010f14 <__gethex+0x2b0>)
 8010c94:	2201      	movs	r2, #1
 8010c96:	4648      	mov	r0, r9
 8010c98:	f7ff ff14 	bl	8010ac4 <strncmp>
 8010c9c:	4607      	mov	r7, r0
 8010c9e:	2800      	cmp	r0, #0
 8010ca0:	d167      	bne.n	8010d72 <__gethex+0x10e>
 8010ca2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010ca6:	4626      	mov	r6, r4
 8010ca8:	f7ff ffc7 	bl	8010c3a <__hexdig_fun>
 8010cac:	2800      	cmp	r0, #0
 8010cae:	d062      	beq.n	8010d76 <__gethex+0x112>
 8010cb0:	4623      	mov	r3, r4
 8010cb2:	7818      	ldrb	r0, [r3, #0]
 8010cb4:	2830      	cmp	r0, #48	@ 0x30
 8010cb6:	4699      	mov	r9, r3
 8010cb8:	f103 0301 	add.w	r3, r3, #1
 8010cbc:	d0f9      	beq.n	8010cb2 <__gethex+0x4e>
 8010cbe:	f7ff ffbc 	bl	8010c3a <__hexdig_fun>
 8010cc2:	fab0 f580 	clz	r5, r0
 8010cc6:	096d      	lsrs	r5, r5, #5
 8010cc8:	f04f 0b01 	mov.w	fp, #1
 8010ccc:	464a      	mov	r2, r9
 8010cce:	4616      	mov	r6, r2
 8010cd0:	3201      	adds	r2, #1
 8010cd2:	7830      	ldrb	r0, [r6, #0]
 8010cd4:	f7ff ffb1 	bl	8010c3a <__hexdig_fun>
 8010cd8:	2800      	cmp	r0, #0
 8010cda:	d1f8      	bne.n	8010cce <__gethex+0x6a>
 8010cdc:	498d      	ldr	r1, [pc, #564]	@ (8010f14 <__gethex+0x2b0>)
 8010cde:	2201      	movs	r2, #1
 8010ce0:	4630      	mov	r0, r6
 8010ce2:	f7ff feef 	bl	8010ac4 <strncmp>
 8010ce6:	2800      	cmp	r0, #0
 8010ce8:	d13f      	bne.n	8010d6a <__gethex+0x106>
 8010cea:	b944      	cbnz	r4, 8010cfe <__gethex+0x9a>
 8010cec:	1c74      	adds	r4, r6, #1
 8010cee:	4622      	mov	r2, r4
 8010cf0:	4616      	mov	r6, r2
 8010cf2:	3201      	adds	r2, #1
 8010cf4:	7830      	ldrb	r0, [r6, #0]
 8010cf6:	f7ff ffa0 	bl	8010c3a <__hexdig_fun>
 8010cfa:	2800      	cmp	r0, #0
 8010cfc:	d1f8      	bne.n	8010cf0 <__gethex+0x8c>
 8010cfe:	1ba4      	subs	r4, r4, r6
 8010d00:	00a7      	lsls	r7, r4, #2
 8010d02:	7833      	ldrb	r3, [r6, #0]
 8010d04:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010d08:	2b50      	cmp	r3, #80	@ 0x50
 8010d0a:	d13e      	bne.n	8010d8a <__gethex+0x126>
 8010d0c:	7873      	ldrb	r3, [r6, #1]
 8010d0e:	2b2b      	cmp	r3, #43	@ 0x2b
 8010d10:	d033      	beq.n	8010d7a <__gethex+0x116>
 8010d12:	2b2d      	cmp	r3, #45	@ 0x2d
 8010d14:	d034      	beq.n	8010d80 <__gethex+0x11c>
 8010d16:	1c71      	adds	r1, r6, #1
 8010d18:	2400      	movs	r4, #0
 8010d1a:	7808      	ldrb	r0, [r1, #0]
 8010d1c:	f7ff ff8d 	bl	8010c3a <__hexdig_fun>
 8010d20:	1e43      	subs	r3, r0, #1
 8010d22:	b2db      	uxtb	r3, r3
 8010d24:	2b18      	cmp	r3, #24
 8010d26:	d830      	bhi.n	8010d8a <__gethex+0x126>
 8010d28:	f1a0 0210 	sub.w	r2, r0, #16
 8010d2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010d30:	f7ff ff83 	bl	8010c3a <__hexdig_fun>
 8010d34:	f100 3cff 	add.w	ip, r0, #4294967295
 8010d38:	fa5f fc8c 	uxtb.w	ip, ip
 8010d3c:	f1bc 0f18 	cmp.w	ip, #24
 8010d40:	f04f 030a 	mov.w	r3, #10
 8010d44:	d91e      	bls.n	8010d84 <__gethex+0x120>
 8010d46:	b104      	cbz	r4, 8010d4a <__gethex+0xe6>
 8010d48:	4252      	negs	r2, r2
 8010d4a:	4417      	add	r7, r2
 8010d4c:	f8ca 1000 	str.w	r1, [sl]
 8010d50:	b1ed      	cbz	r5, 8010d8e <__gethex+0x12a>
 8010d52:	f1bb 0f00 	cmp.w	fp, #0
 8010d56:	bf0c      	ite	eq
 8010d58:	2506      	moveq	r5, #6
 8010d5a:	2500      	movne	r5, #0
 8010d5c:	4628      	mov	r0, r5
 8010d5e:	b005      	add	sp, #20
 8010d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d64:	2500      	movs	r5, #0
 8010d66:	462c      	mov	r4, r5
 8010d68:	e7b0      	b.n	8010ccc <__gethex+0x68>
 8010d6a:	2c00      	cmp	r4, #0
 8010d6c:	d1c7      	bne.n	8010cfe <__gethex+0x9a>
 8010d6e:	4627      	mov	r7, r4
 8010d70:	e7c7      	b.n	8010d02 <__gethex+0x9e>
 8010d72:	464e      	mov	r6, r9
 8010d74:	462f      	mov	r7, r5
 8010d76:	2501      	movs	r5, #1
 8010d78:	e7c3      	b.n	8010d02 <__gethex+0x9e>
 8010d7a:	2400      	movs	r4, #0
 8010d7c:	1cb1      	adds	r1, r6, #2
 8010d7e:	e7cc      	b.n	8010d1a <__gethex+0xb6>
 8010d80:	2401      	movs	r4, #1
 8010d82:	e7fb      	b.n	8010d7c <__gethex+0x118>
 8010d84:	fb03 0002 	mla	r0, r3, r2, r0
 8010d88:	e7ce      	b.n	8010d28 <__gethex+0xc4>
 8010d8a:	4631      	mov	r1, r6
 8010d8c:	e7de      	b.n	8010d4c <__gethex+0xe8>
 8010d8e:	eba6 0309 	sub.w	r3, r6, r9
 8010d92:	3b01      	subs	r3, #1
 8010d94:	4629      	mov	r1, r5
 8010d96:	2b07      	cmp	r3, #7
 8010d98:	dc0a      	bgt.n	8010db0 <__gethex+0x14c>
 8010d9a:	9801      	ldr	r0, [sp, #4]
 8010d9c:	f7fd ff88 	bl	800ecb0 <_Balloc>
 8010da0:	4604      	mov	r4, r0
 8010da2:	b940      	cbnz	r0, 8010db6 <__gethex+0x152>
 8010da4:	4b5c      	ldr	r3, [pc, #368]	@ (8010f18 <__gethex+0x2b4>)
 8010da6:	4602      	mov	r2, r0
 8010da8:	21e4      	movs	r1, #228	@ 0xe4
 8010daa:	485c      	ldr	r0, [pc, #368]	@ (8010f1c <__gethex+0x2b8>)
 8010dac:	f7fd f816 	bl	800dddc <__assert_func>
 8010db0:	3101      	adds	r1, #1
 8010db2:	105b      	asrs	r3, r3, #1
 8010db4:	e7ef      	b.n	8010d96 <__gethex+0x132>
 8010db6:	f100 0a14 	add.w	sl, r0, #20
 8010dba:	2300      	movs	r3, #0
 8010dbc:	4655      	mov	r5, sl
 8010dbe:	469b      	mov	fp, r3
 8010dc0:	45b1      	cmp	r9, r6
 8010dc2:	d337      	bcc.n	8010e34 <__gethex+0x1d0>
 8010dc4:	f845 bb04 	str.w	fp, [r5], #4
 8010dc8:	eba5 050a 	sub.w	r5, r5, sl
 8010dcc:	10ad      	asrs	r5, r5, #2
 8010dce:	6125      	str	r5, [r4, #16]
 8010dd0:	4658      	mov	r0, fp
 8010dd2:	f7fe f85f 	bl	800ee94 <__hi0bits>
 8010dd6:	016d      	lsls	r5, r5, #5
 8010dd8:	f8d8 6000 	ldr.w	r6, [r8]
 8010ddc:	1a2d      	subs	r5, r5, r0
 8010dde:	42b5      	cmp	r5, r6
 8010de0:	dd54      	ble.n	8010e8c <__gethex+0x228>
 8010de2:	1bad      	subs	r5, r5, r6
 8010de4:	4629      	mov	r1, r5
 8010de6:	4620      	mov	r0, r4
 8010de8:	f7fe fbf3 	bl	800f5d2 <__any_on>
 8010dec:	4681      	mov	r9, r0
 8010dee:	b178      	cbz	r0, 8010e10 <__gethex+0x1ac>
 8010df0:	1e6b      	subs	r3, r5, #1
 8010df2:	1159      	asrs	r1, r3, #5
 8010df4:	f003 021f 	and.w	r2, r3, #31
 8010df8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010dfc:	f04f 0901 	mov.w	r9, #1
 8010e00:	fa09 f202 	lsl.w	r2, r9, r2
 8010e04:	420a      	tst	r2, r1
 8010e06:	d003      	beq.n	8010e10 <__gethex+0x1ac>
 8010e08:	454b      	cmp	r3, r9
 8010e0a:	dc36      	bgt.n	8010e7a <__gethex+0x216>
 8010e0c:	f04f 0902 	mov.w	r9, #2
 8010e10:	4629      	mov	r1, r5
 8010e12:	4620      	mov	r0, r4
 8010e14:	f7ff febf 	bl	8010b96 <rshift>
 8010e18:	442f      	add	r7, r5
 8010e1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010e1e:	42bb      	cmp	r3, r7
 8010e20:	da42      	bge.n	8010ea8 <__gethex+0x244>
 8010e22:	9801      	ldr	r0, [sp, #4]
 8010e24:	4621      	mov	r1, r4
 8010e26:	f7fd ff83 	bl	800ed30 <_Bfree>
 8010e2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	6013      	str	r3, [r2, #0]
 8010e30:	25a3      	movs	r5, #163	@ 0xa3
 8010e32:	e793      	b.n	8010d5c <__gethex+0xf8>
 8010e34:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010e38:	2a2e      	cmp	r2, #46	@ 0x2e
 8010e3a:	d012      	beq.n	8010e62 <__gethex+0x1fe>
 8010e3c:	2b20      	cmp	r3, #32
 8010e3e:	d104      	bne.n	8010e4a <__gethex+0x1e6>
 8010e40:	f845 bb04 	str.w	fp, [r5], #4
 8010e44:	f04f 0b00 	mov.w	fp, #0
 8010e48:	465b      	mov	r3, fp
 8010e4a:	7830      	ldrb	r0, [r6, #0]
 8010e4c:	9303      	str	r3, [sp, #12]
 8010e4e:	f7ff fef4 	bl	8010c3a <__hexdig_fun>
 8010e52:	9b03      	ldr	r3, [sp, #12]
 8010e54:	f000 000f 	and.w	r0, r0, #15
 8010e58:	4098      	lsls	r0, r3
 8010e5a:	ea4b 0b00 	orr.w	fp, fp, r0
 8010e5e:	3304      	adds	r3, #4
 8010e60:	e7ae      	b.n	8010dc0 <__gethex+0x15c>
 8010e62:	45b1      	cmp	r9, r6
 8010e64:	d8ea      	bhi.n	8010e3c <__gethex+0x1d8>
 8010e66:	492b      	ldr	r1, [pc, #172]	@ (8010f14 <__gethex+0x2b0>)
 8010e68:	9303      	str	r3, [sp, #12]
 8010e6a:	2201      	movs	r2, #1
 8010e6c:	4630      	mov	r0, r6
 8010e6e:	f7ff fe29 	bl	8010ac4 <strncmp>
 8010e72:	9b03      	ldr	r3, [sp, #12]
 8010e74:	2800      	cmp	r0, #0
 8010e76:	d1e1      	bne.n	8010e3c <__gethex+0x1d8>
 8010e78:	e7a2      	b.n	8010dc0 <__gethex+0x15c>
 8010e7a:	1ea9      	subs	r1, r5, #2
 8010e7c:	4620      	mov	r0, r4
 8010e7e:	f7fe fba8 	bl	800f5d2 <__any_on>
 8010e82:	2800      	cmp	r0, #0
 8010e84:	d0c2      	beq.n	8010e0c <__gethex+0x1a8>
 8010e86:	f04f 0903 	mov.w	r9, #3
 8010e8a:	e7c1      	b.n	8010e10 <__gethex+0x1ac>
 8010e8c:	da09      	bge.n	8010ea2 <__gethex+0x23e>
 8010e8e:	1b75      	subs	r5, r6, r5
 8010e90:	4621      	mov	r1, r4
 8010e92:	9801      	ldr	r0, [sp, #4]
 8010e94:	462a      	mov	r2, r5
 8010e96:	f7fe f963 	bl	800f160 <__lshift>
 8010e9a:	1b7f      	subs	r7, r7, r5
 8010e9c:	4604      	mov	r4, r0
 8010e9e:	f100 0a14 	add.w	sl, r0, #20
 8010ea2:	f04f 0900 	mov.w	r9, #0
 8010ea6:	e7b8      	b.n	8010e1a <__gethex+0x1b6>
 8010ea8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010eac:	42bd      	cmp	r5, r7
 8010eae:	dd6f      	ble.n	8010f90 <__gethex+0x32c>
 8010eb0:	1bed      	subs	r5, r5, r7
 8010eb2:	42ae      	cmp	r6, r5
 8010eb4:	dc34      	bgt.n	8010f20 <__gethex+0x2bc>
 8010eb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010eba:	2b02      	cmp	r3, #2
 8010ebc:	d022      	beq.n	8010f04 <__gethex+0x2a0>
 8010ebe:	2b03      	cmp	r3, #3
 8010ec0:	d024      	beq.n	8010f0c <__gethex+0x2a8>
 8010ec2:	2b01      	cmp	r3, #1
 8010ec4:	d115      	bne.n	8010ef2 <__gethex+0x28e>
 8010ec6:	42ae      	cmp	r6, r5
 8010ec8:	d113      	bne.n	8010ef2 <__gethex+0x28e>
 8010eca:	2e01      	cmp	r6, #1
 8010ecc:	d10b      	bne.n	8010ee6 <__gethex+0x282>
 8010ece:	9a02      	ldr	r2, [sp, #8]
 8010ed0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010ed4:	6013      	str	r3, [r2, #0]
 8010ed6:	2301      	movs	r3, #1
 8010ed8:	6123      	str	r3, [r4, #16]
 8010eda:	f8ca 3000 	str.w	r3, [sl]
 8010ede:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ee0:	2562      	movs	r5, #98	@ 0x62
 8010ee2:	601c      	str	r4, [r3, #0]
 8010ee4:	e73a      	b.n	8010d5c <__gethex+0xf8>
 8010ee6:	1e71      	subs	r1, r6, #1
 8010ee8:	4620      	mov	r0, r4
 8010eea:	f7fe fb72 	bl	800f5d2 <__any_on>
 8010eee:	2800      	cmp	r0, #0
 8010ef0:	d1ed      	bne.n	8010ece <__gethex+0x26a>
 8010ef2:	9801      	ldr	r0, [sp, #4]
 8010ef4:	4621      	mov	r1, r4
 8010ef6:	f7fd ff1b 	bl	800ed30 <_Bfree>
 8010efa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010efc:	2300      	movs	r3, #0
 8010efe:	6013      	str	r3, [r2, #0]
 8010f00:	2550      	movs	r5, #80	@ 0x50
 8010f02:	e72b      	b.n	8010d5c <__gethex+0xf8>
 8010f04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d1f3      	bne.n	8010ef2 <__gethex+0x28e>
 8010f0a:	e7e0      	b.n	8010ece <__gethex+0x26a>
 8010f0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d1dd      	bne.n	8010ece <__gethex+0x26a>
 8010f12:	e7ee      	b.n	8010ef2 <__gethex+0x28e>
 8010f14:	08011a20 	.word	0x08011a20
 8010f18:	080118b9 	.word	0x080118b9
 8010f1c:	08011b92 	.word	0x08011b92
 8010f20:	1e6f      	subs	r7, r5, #1
 8010f22:	f1b9 0f00 	cmp.w	r9, #0
 8010f26:	d130      	bne.n	8010f8a <__gethex+0x326>
 8010f28:	b127      	cbz	r7, 8010f34 <__gethex+0x2d0>
 8010f2a:	4639      	mov	r1, r7
 8010f2c:	4620      	mov	r0, r4
 8010f2e:	f7fe fb50 	bl	800f5d2 <__any_on>
 8010f32:	4681      	mov	r9, r0
 8010f34:	117a      	asrs	r2, r7, #5
 8010f36:	2301      	movs	r3, #1
 8010f38:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010f3c:	f007 071f 	and.w	r7, r7, #31
 8010f40:	40bb      	lsls	r3, r7
 8010f42:	4213      	tst	r3, r2
 8010f44:	4629      	mov	r1, r5
 8010f46:	4620      	mov	r0, r4
 8010f48:	bf18      	it	ne
 8010f4a:	f049 0902 	orrne.w	r9, r9, #2
 8010f4e:	f7ff fe22 	bl	8010b96 <rshift>
 8010f52:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010f56:	1b76      	subs	r6, r6, r5
 8010f58:	2502      	movs	r5, #2
 8010f5a:	f1b9 0f00 	cmp.w	r9, #0
 8010f5e:	d047      	beq.n	8010ff0 <__gethex+0x38c>
 8010f60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010f64:	2b02      	cmp	r3, #2
 8010f66:	d015      	beq.n	8010f94 <__gethex+0x330>
 8010f68:	2b03      	cmp	r3, #3
 8010f6a:	d017      	beq.n	8010f9c <__gethex+0x338>
 8010f6c:	2b01      	cmp	r3, #1
 8010f6e:	d109      	bne.n	8010f84 <__gethex+0x320>
 8010f70:	f019 0f02 	tst.w	r9, #2
 8010f74:	d006      	beq.n	8010f84 <__gethex+0x320>
 8010f76:	f8da 3000 	ldr.w	r3, [sl]
 8010f7a:	ea49 0903 	orr.w	r9, r9, r3
 8010f7e:	f019 0f01 	tst.w	r9, #1
 8010f82:	d10e      	bne.n	8010fa2 <__gethex+0x33e>
 8010f84:	f045 0510 	orr.w	r5, r5, #16
 8010f88:	e032      	b.n	8010ff0 <__gethex+0x38c>
 8010f8a:	f04f 0901 	mov.w	r9, #1
 8010f8e:	e7d1      	b.n	8010f34 <__gethex+0x2d0>
 8010f90:	2501      	movs	r5, #1
 8010f92:	e7e2      	b.n	8010f5a <__gethex+0x2f6>
 8010f94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010f96:	f1c3 0301 	rsb	r3, r3, #1
 8010f9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010f9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d0f0      	beq.n	8010f84 <__gethex+0x320>
 8010fa2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010fa6:	f104 0314 	add.w	r3, r4, #20
 8010faa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010fae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010fb2:	f04f 0c00 	mov.w	ip, #0
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010fbc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010fc0:	d01b      	beq.n	8010ffa <__gethex+0x396>
 8010fc2:	3201      	adds	r2, #1
 8010fc4:	6002      	str	r2, [r0, #0]
 8010fc6:	2d02      	cmp	r5, #2
 8010fc8:	f104 0314 	add.w	r3, r4, #20
 8010fcc:	d13c      	bne.n	8011048 <__gethex+0x3e4>
 8010fce:	f8d8 2000 	ldr.w	r2, [r8]
 8010fd2:	3a01      	subs	r2, #1
 8010fd4:	42b2      	cmp	r2, r6
 8010fd6:	d109      	bne.n	8010fec <__gethex+0x388>
 8010fd8:	1171      	asrs	r1, r6, #5
 8010fda:	2201      	movs	r2, #1
 8010fdc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010fe0:	f006 061f 	and.w	r6, r6, #31
 8010fe4:	fa02 f606 	lsl.w	r6, r2, r6
 8010fe8:	421e      	tst	r6, r3
 8010fea:	d13a      	bne.n	8011062 <__gethex+0x3fe>
 8010fec:	f045 0520 	orr.w	r5, r5, #32
 8010ff0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ff2:	601c      	str	r4, [r3, #0]
 8010ff4:	9b02      	ldr	r3, [sp, #8]
 8010ff6:	601f      	str	r7, [r3, #0]
 8010ff8:	e6b0      	b.n	8010d5c <__gethex+0xf8>
 8010ffa:	4299      	cmp	r1, r3
 8010ffc:	f843 cc04 	str.w	ip, [r3, #-4]
 8011000:	d8d9      	bhi.n	8010fb6 <__gethex+0x352>
 8011002:	68a3      	ldr	r3, [r4, #8]
 8011004:	459b      	cmp	fp, r3
 8011006:	db17      	blt.n	8011038 <__gethex+0x3d4>
 8011008:	6861      	ldr	r1, [r4, #4]
 801100a:	9801      	ldr	r0, [sp, #4]
 801100c:	3101      	adds	r1, #1
 801100e:	f7fd fe4f 	bl	800ecb0 <_Balloc>
 8011012:	4681      	mov	r9, r0
 8011014:	b918      	cbnz	r0, 801101e <__gethex+0x3ba>
 8011016:	4b1a      	ldr	r3, [pc, #104]	@ (8011080 <__gethex+0x41c>)
 8011018:	4602      	mov	r2, r0
 801101a:	2184      	movs	r1, #132	@ 0x84
 801101c:	e6c5      	b.n	8010daa <__gethex+0x146>
 801101e:	6922      	ldr	r2, [r4, #16]
 8011020:	3202      	adds	r2, #2
 8011022:	f104 010c 	add.w	r1, r4, #12
 8011026:	0092      	lsls	r2, r2, #2
 8011028:	300c      	adds	r0, #12
 801102a:	f7fc fec2 	bl	800ddb2 <memcpy>
 801102e:	4621      	mov	r1, r4
 8011030:	9801      	ldr	r0, [sp, #4]
 8011032:	f7fd fe7d 	bl	800ed30 <_Bfree>
 8011036:	464c      	mov	r4, r9
 8011038:	6923      	ldr	r3, [r4, #16]
 801103a:	1c5a      	adds	r2, r3, #1
 801103c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011040:	6122      	str	r2, [r4, #16]
 8011042:	2201      	movs	r2, #1
 8011044:	615a      	str	r2, [r3, #20]
 8011046:	e7be      	b.n	8010fc6 <__gethex+0x362>
 8011048:	6922      	ldr	r2, [r4, #16]
 801104a:	455a      	cmp	r2, fp
 801104c:	dd0b      	ble.n	8011066 <__gethex+0x402>
 801104e:	2101      	movs	r1, #1
 8011050:	4620      	mov	r0, r4
 8011052:	f7ff fda0 	bl	8010b96 <rshift>
 8011056:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801105a:	3701      	adds	r7, #1
 801105c:	42bb      	cmp	r3, r7
 801105e:	f6ff aee0 	blt.w	8010e22 <__gethex+0x1be>
 8011062:	2501      	movs	r5, #1
 8011064:	e7c2      	b.n	8010fec <__gethex+0x388>
 8011066:	f016 061f 	ands.w	r6, r6, #31
 801106a:	d0fa      	beq.n	8011062 <__gethex+0x3fe>
 801106c:	4453      	add	r3, sl
 801106e:	f1c6 0620 	rsb	r6, r6, #32
 8011072:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011076:	f7fd ff0d 	bl	800ee94 <__hi0bits>
 801107a:	42b0      	cmp	r0, r6
 801107c:	dbe7      	blt.n	801104e <__gethex+0x3ea>
 801107e:	e7f0      	b.n	8011062 <__gethex+0x3fe>
 8011080:	080118b9 	.word	0x080118b9

08011084 <L_shift>:
 8011084:	f1c2 0208 	rsb	r2, r2, #8
 8011088:	0092      	lsls	r2, r2, #2
 801108a:	b570      	push	{r4, r5, r6, lr}
 801108c:	f1c2 0620 	rsb	r6, r2, #32
 8011090:	6843      	ldr	r3, [r0, #4]
 8011092:	6804      	ldr	r4, [r0, #0]
 8011094:	fa03 f506 	lsl.w	r5, r3, r6
 8011098:	432c      	orrs	r4, r5
 801109a:	40d3      	lsrs	r3, r2
 801109c:	6004      	str	r4, [r0, #0]
 801109e:	f840 3f04 	str.w	r3, [r0, #4]!
 80110a2:	4288      	cmp	r0, r1
 80110a4:	d3f4      	bcc.n	8011090 <L_shift+0xc>
 80110a6:	bd70      	pop	{r4, r5, r6, pc}

080110a8 <__match>:
 80110a8:	b530      	push	{r4, r5, lr}
 80110aa:	6803      	ldr	r3, [r0, #0]
 80110ac:	3301      	adds	r3, #1
 80110ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80110b2:	b914      	cbnz	r4, 80110ba <__match+0x12>
 80110b4:	6003      	str	r3, [r0, #0]
 80110b6:	2001      	movs	r0, #1
 80110b8:	bd30      	pop	{r4, r5, pc}
 80110ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110be:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80110c2:	2d19      	cmp	r5, #25
 80110c4:	bf98      	it	ls
 80110c6:	3220      	addls	r2, #32
 80110c8:	42a2      	cmp	r2, r4
 80110ca:	d0f0      	beq.n	80110ae <__match+0x6>
 80110cc:	2000      	movs	r0, #0
 80110ce:	e7f3      	b.n	80110b8 <__match+0x10>

080110d0 <__hexnan>:
 80110d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110d4:	680b      	ldr	r3, [r1, #0]
 80110d6:	6801      	ldr	r1, [r0, #0]
 80110d8:	115e      	asrs	r6, r3, #5
 80110da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80110de:	f013 031f 	ands.w	r3, r3, #31
 80110e2:	b087      	sub	sp, #28
 80110e4:	bf18      	it	ne
 80110e6:	3604      	addne	r6, #4
 80110e8:	2500      	movs	r5, #0
 80110ea:	1f37      	subs	r7, r6, #4
 80110ec:	4682      	mov	sl, r0
 80110ee:	4690      	mov	r8, r2
 80110f0:	9301      	str	r3, [sp, #4]
 80110f2:	f846 5c04 	str.w	r5, [r6, #-4]
 80110f6:	46b9      	mov	r9, r7
 80110f8:	463c      	mov	r4, r7
 80110fa:	9502      	str	r5, [sp, #8]
 80110fc:	46ab      	mov	fp, r5
 80110fe:	784a      	ldrb	r2, [r1, #1]
 8011100:	1c4b      	adds	r3, r1, #1
 8011102:	9303      	str	r3, [sp, #12]
 8011104:	b342      	cbz	r2, 8011158 <__hexnan+0x88>
 8011106:	4610      	mov	r0, r2
 8011108:	9105      	str	r1, [sp, #20]
 801110a:	9204      	str	r2, [sp, #16]
 801110c:	f7ff fd95 	bl	8010c3a <__hexdig_fun>
 8011110:	2800      	cmp	r0, #0
 8011112:	d151      	bne.n	80111b8 <__hexnan+0xe8>
 8011114:	9a04      	ldr	r2, [sp, #16]
 8011116:	9905      	ldr	r1, [sp, #20]
 8011118:	2a20      	cmp	r2, #32
 801111a:	d818      	bhi.n	801114e <__hexnan+0x7e>
 801111c:	9b02      	ldr	r3, [sp, #8]
 801111e:	459b      	cmp	fp, r3
 8011120:	dd13      	ble.n	801114a <__hexnan+0x7a>
 8011122:	454c      	cmp	r4, r9
 8011124:	d206      	bcs.n	8011134 <__hexnan+0x64>
 8011126:	2d07      	cmp	r5, #7
 8011128:	dc04      	bgt.n	8011134 <__hexnan+0x64>
 801112a:	462a      	mov	r2, r5
 801112c:	4649      	mov	r1, r9
 801112e:	4620      	mov	r0, r4
 8011130:	f7ff ffa8 	bl	8011084 <L_shift>
 8011134:	4544      	cmp	r4, r8
 8011136:	d952      	bls.n	80111de <__hexnan+0x10e>
 8011138:	2300      	movs	r3, #0
 801113a:	f1a4 0904 	sub.w	r9, r4, #4
 801113e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011142:	f8cd b008 	str.w	fp, [sp, #8]
 8011146:	464c      	mov	r4, r9
 8011148:	461d      	mov	r5, r3
 801114a:	9903      	ldr	r1, [sp, #12]
 801114c:	e7d7      	b.n	80110fe <__hexnan+0x2e>
 801114e:	2a29      	cmp	r2, #41	@ 0x29
 8011150:	d157      	bne.n	8011202 <__hexnan+0x132>
 8011152:	3102      	adds	r1, #2
 8011154:	f8ca 1000 	str.w	r1, [sl]
 8011158:	f1bb 0f00 	cmp.w	fp, #0
 801115c:	d051      	beq.n	8011202 <__hexnan+0x132>
 801115e:	454c      	cmp	r4, r9
 8011160:	d206      	bcs.n	8011170 <__hexnan+0xa0>
 8011162:	2d07      	cmp	r5, #7
 8011164:	dc04      	bgt.n	8011170 <__hexnan+0xa0>
 8011166:	462a      	mov	r2, r5
 8011168:	4649      	mov	r1, r9
 801116a:	4620      	mov	r0, r4
 801116c:	f7ff ff8a 	bl	8011084 <L_shift>
 8011170:	4544      	cmp	r4, r8
 8011172:	d936      	bls.n	80111e2 <__hexnan+0x112>
 8011174:	f1a8 0204 	sub.w	r2, r8, #4
 8011178:	4623      	mov	r3, r4
 801117a:	f853 1b04 	ldr.w	r1, [r3], #4
 801117e:	f842 1f04 	str.w	r1, [r2, #4]!
 8011182:	429f      	cmp	r7, r3
 8011184:	d2f9      	bcs.n	801117a <__hexnan+0xaa>
 8011186:	1b3b      	subs	r3, r7, r4
 8011188:	f023 0303 	bic.w	r3, r3, #3
 801118c:	3304      	adds	r3, #4
 801118e:	3401      	adds	r4, #1
 8011190:	3e03      	subs	r6, #3
 8011192:	42b4      	cmp	r4, r6
 8011194:	bf88      	it	hi
 8011196:	2304      	movhi	r3, #4
 8011198:	4443      	add	r3, r8
 801119a:	2200      	movs	r2, #0
 801119c:	f843 2b04 	str.w	r2, [r3], #4
 80111a0:	429f      	cmp	r7, r3
 80111a2:	d2fb      	bcs.n	801119c <__hexnan+0xcc>
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	b91b      	cbnz	r3, 80111b0 <__hexnan+0xe0>
 80111a8:	4547      	cmp	r7, r8
 80111aa:	d128      	bne.n	80111fe <__hexnan+0x12e>
 80111ac:	2301      	movs	r3, #1
 80111ae:	603b      	str	r3, [r7, #0]
 80111b0:	2005      	movs	r0, #5
 80111b2:	b007      	add	sp, #28
 80111b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111b8:	3501      	adds	r5, #1
 80111ba:	2d08      	cmp	r5, #8
 80111bc:	f10b 0b01 	add.w	fp, fp, #1
 80111c0:	dd06      	ble.n	80111d0 <__hexnan+0x100>
 80111c2:	4544      	cmp	r4, r8
 80111c4:	d9c1      	bls.n	801114a <__hexnan+0x7a>
 80111c6:	2300      	movs	r3, #0
 80111c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80111cc:	2501      	movs	r5, #1
 80111ce:	3c04      	subs	r4, #4
 80111d0:	6822      	ldr	r2, [r4, #0]
 80111d2:	f000 000f 	and.w	r0, r0, #15
 80111d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80111da:	6020      	str	r0, [r4, #0]
 80111dc:	e7b5      	b.n	801114a <__hexnan+0x7a>
 80111de:	2508      	movs	r5, #8
 80111e0:	e7b3      	b.n	801114a <__hexnan+0x7a>
 80111e2:	9b01      	ldr	r3, [sp, #4]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d0dd      	beq.n	80111a4 <__hexnan+0xd4>
 80111e8:	f1c3 0320 	rsb	r3, r3, #32
 80111ec:	f04f 32ff 	mov.w	r2, #4294967295
 80111f0:	40da      	lsrs	r2, r3
 80111f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80111f6:	4013      	ands	r3, r2
 80111f8:	f846 3c04 	str.w	r3, [r6, #-4]
 80111fc:	e7d2      	b.n	80111a4 <__hexnan+0xd4>
 80111fe:	3f04      	subs	r7, #4
 8011200:	e7d0      	b.n	80111a4 <__hexnan+0xd4>
 8011202:	2004      	movs	r0, #4
 8011204:	e7d5      	b.n	80111b2 <__hexnan+0xe2>

08011206 <__ascii_mbtowc>:
 8011206:	b082      	sub	sp, #8
 8011208:	b901      	cbnz	r1, 801120c <__ascii_mbtowc+0x6>
 801120a:	a901      	add	r1, sp, #4
 801120c:	b142      	cbz	r2, 8011220 <__ascii_mbtowc+0x1a>
 801120e:	b14b      	cbz	r3, 8011224 <__ascii_mbtowc+0x1e>
 8011210:	7813      	ldrb	r3, [r2, #0]
 8011212:	600b      	str	r3, [r1, #0]
 8011214:	7812      	ldrb	r2, [r2, #0]
 8011216:	1e10      	subs	r0, r2, #0
 8011218:	bf18      	it	ne
 801121a:	2001      	movne	r0, #1
 801121c:	b002      	add	sp, #8
 801121e:	4770      	bx	lr
 8011220:	4610      	mov	r0, r2
 8011222:	e7fb      	b.n	801121c <__ascii_mbtowc+0x16>
 8011224:	f06f 0001 	mvn.w	r0, #1
 8011228:	e7f8      	b.n	801121c <__ascii_mbtowc+0x16>

0801122a <_realloc_r>:
 801122a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801122e:	4680      	mov	r8, r0
 8011230:	4615      	mov	r5, r2
 8011232:	460c      	mov	r4, r1
 8011234:	b921      	cbnz	r1, 8011240 <_realloc_r+0x16>
 8011236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801123a:	4611      	mov	r1, r2
 801123c:	f7fd bcac 	b.w	800eb98 <_malloc_r>
 8011240:	b92a      	cbnz	r2, 801124e <_realloc_r+0x24>
 8011242:	f7fd fc35 	bl	800eab0 <_free_r>
 8011246:	2400      	movs	r4, #0
 8011248:	4620      	mov	r0, r4
 801124a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801124e:	f000 f86b 	bl	8011328 <_malloc_usable_size_r>
 8011252:	4285      	cmp	r5, r0
 8011254:	4606      	mov	r6, r0
 8011256:	d802      	bhi.n	801125e <_realloc_r+0x34>
 8011258:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801125c:	d8f4      	bhi.n	8011248 <_realloc_r+0x1e>
 801125e:	4629      	mov	r1, r5
 8011260:	4640      	mov	r0, r8
 8011262:	f7fd fc99 	bl	800eb98 <_malloc_r>
 8011266:	4607      	mov	r7, r0
 8011268:	2800      	cmp	r0, #0
 801126a:	d0ec      	beq.n	8011246 <_realloc_r+0x1c>
 801126c:	42b5      	cmp	r5, r6
 801126e:	462a      	mov	r2, r5
 8011270:	4621      	mov	r1, r4
 8011272:	bf28      	it	cs
 8011274:	4632      	movcs	r2, r6
 8011276:	f7fc fd9c 	bl	800ddb2 <memcpy>
 801127a:	4621      	mov	r1, r4
 801127c:	4640      	mov	r0, r8
 801127e:	f7fd fc17 	bl	800eab0 <_free_r>
 8011282:	463c      	mov	r4, r7
 8011284:	e7e0      	b.n	8011248 <_realloc_r+0x1e>

08011286 <__ascii_wctomb>:
 8011286:	4603      	mov	r3, r0
 8011288:	4608      	mov	r0, r1
 801128a:	b141      	cbz	r1, 801129e <__ascii_wctomb+0x18>
 801128c:	2aff      	cmp	r2, #255	@ 0xff
 801128e:	d904      	bls.n	801129a <__ascii_wctomb+0x14>
 8011290:	228a      	movs	r2, #138	@ 0x8a
 8011292:	601a      	str	r2, [r3, #0]
 8011294:	f04f 30ff 	mov.w	r0, #4294967295
 8011298:	4770      	bx	lr
 801129a:	700a      	strb	r2, [r1, #0]
 801129c:	2001      	movs	r0, #1
 801129e:	4770      	bx	lr

080112a0 <_raise_r>:
 80112a0:	291f      	cmp	r1, #31
 80112a2:	b538      	push	{r3, r4, r5, lr}
 80112a4:	4605      	mov	r5, r0
 80112a6:	460c      	mov	r4, r1
 80112a8:	d904      	bls.n	80112b4 <_raise_r+0x14>
 80112aa:	2316      	movs	r3, #22
 80112ac:	6003      	str	r3, [r0, #0]
 80112ae:	f04f 30ff 	mov.w	r0, #4294967295
 80112b2:	bd38      	pop	{r3, r4, r5, pc}
 80112b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80112b6:	b112      	cbz	r2, 80112be <_raise_r+0x1e>
 80112b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80112bc:	b94b      	cbnz	r3, 80112d2 <_raise_r+0x32>
 80112be:	4628      	mov	r0, r5
 80112c0:	f000 f830 	bl	8011324 <_getpid_r>
 80112c4:	4622      	mov	r2, r4
 80112c6:	4601      	mov	r1, r0
 80112c8:	4628      	mov	r0, r5
 80112ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80112ce:	f000 b817 	b.w	8011300 <_kill_r>
 80112d2:	2b01      	cmp	r3, #1
 80112d4:	d00a      	beq.n	80112ec <_raise_r+0x4c>
 80112d6:	1c59      	adds	r1, r3, #1
 80112d8:	d103      	bne.n	80112e2 <_raise_r+0x42>
 80112da:	2316      	movs	r3, #22
 80112dc:	6003      	str	r3, [r0, #0]
 80112de:	2001      	movs	r0, #1
 80112e0:	e7e7      	b.n	80112b2 <_raise_r+0x12>
 80112e2:	2100      	movs	r1, #0
 80112e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80112e8:	4620      	mov	r0, r4
 80112ea:	4798      	blx	r3
 80112ec:	2000      	movs	r0, #0
 80112ee:	e7e0      	b.n	80112b2 <_raise_r+0x12>

080112f0 <raise>:
 80112f0:	4b02      	ldr	r3, [pc, #8]	@ (80112fc <raise+0xc>)
 80112f2:	4601      	mov	r1, r0
 80112f4:	6818      	ldr	r0, [r3, #0]
 80112f6:	f7ff bfd3 	b.w	80112a0 <_raise_r>
 80112fa:	bf00      	nop
 80112fc:	20000068 	.word	0x20000068

08011300 <_kill_r>:
 8011300:	b538      	push	{r3, r4, r5, lr}
 8011302:	4d07      	ldr	r5, [pc, #28]	@ (8011320 <_kill_r+0x20>)
 8011304:	2300      	movs	r3, #0
 8011306:	4604      	mov	r4, r0
 8011308:	4608      	mov	r0, r1
 801130a:	4611      	mov	r1, r2
 801130c:	602b      	str	r3, [r5, #0]
 801130e:	f7f1 faf9 	bl	8002904 <_kill>
 8011312:	1c43      	adds	r3, r0, #1
 8011314:	d102      	bne.n	801131c <_kill_r+0x1c>
 8011316:	682b      	ldr	r3, [r5, #0]
 8011318:	b103      	cbz	r3, 801131c <_kill_r+0x1c>
 801131a:	6023      	str	r3, [r4, #0]
 801131c:	bd38      	pop	{r3, r4, r5, pc}
 801131e:	bf00      	nop
 8011320:	20003958 	.word	0x20003958

08011324 <_getpid_r>:
 8011324:	f7f1 bae6 	b.w	80028f4 <_getpid>

08011328 <_malloc_usable_size_r>:
 8011328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801132c:	1f18      	subs	r0, r3, #4
 801132e:	2b00      	cmp	r3, #0
 8011330:	bfbc      	itt	lt
 8011332:	580b      	ldrlt	r3, [r1, r0]
 8011334:	18c0      	addlt	r0, r0, r3
 8011336:	4770      	bx	lr

08011338 <_init>:
 8011338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801133a:	bf00      	nop
 801133c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801133e:	bc08      	pop	{r3}
 8011340:	469e      	mov	lr, r3
 8011342:	4770      	bx	lr

08011344 <_fini>:
 8011344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011346:	bf00      	nop
 8011348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801134a:	bc08      	pop	{r3}
 801134c:	469e      	mov	lr, r3
 801134e:	4770      	bx	lr
