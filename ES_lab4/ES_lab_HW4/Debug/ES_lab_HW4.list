
ES_lab_HW4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010760  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000934  080108f0  080108f0  000118f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011224  08011224  00013224  2**0
                  CONTENTS
  4 .ARM          00000008  08011224  08011224  00012224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801122c  0801122c  00013224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801122c  0801122c  0001222c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011230  08011230  00012230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000224  20000000  08011234  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003740  20000224  08011458  00013224  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003964  08011458  00013964  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e0bb  00000000  00000000  00013254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006695  00000000  00000000  0004130f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002790  00000000  00000000  000479a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e82  00000000  00000000  0004a138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000310ef  00000000  00000000  0004bfba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000311e5  00000000  00000000  0007d0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116209  00000000  00000000  000ae28e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c4497  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bbe0  00000000  00000000  001c44dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001d00bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000224 	.word	0x20000224
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080108d8 	.word	0x080108d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000228 	.word	0x20000228
 80001cc:	080108d8 	.word	0x080108d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000fe4:	b5b0      	push	{r4, r5, r7, lr}
 8000fe6:	b08a      	sub	sp, #40	@ 0x28
 8000fe8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueGGG";
 8000fea:	4b69      	ldr	r3, [pc, #420]	@ (8001190 <MX_BlueNRG_MS_Init+0x1ac>)
 8000fec:	613b      	str	r3, [r7, #16]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 8000fee:	f000 f8f9 	bl	80011e4 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f001 fe48 	bl	8002c88 <BSP_PB_GetState>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	4b65      	ldr	r3, [pc, #404]	@ (8001194 <MX_BlueNRG_MS_Init+0x1b0>)
 8000ffe:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 8001000:	2100      	movs	r1, #0
 8001002:	4865      	ldr	r0, [pc, #404]	@ (8001198 <MX_BlueNRG_MS_Init+0x1b4>)
 8001004:	f007 ffd4 	bl	8008fb0 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8001008:	1dba      	adds	r2, r7, #6
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f007 fe42 	bl	8008c9a <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 8001016:	f007 fe84 	bl	8008d22 <hci_reset>
  HAL_Delay(100);
 800101a:	2064      	movs	r0, #100	@ 0x64
 800101c:	f002 fba0 	bl	8003760 <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
 8001020:	7a3b      	ldrb	r3, [r7, #8]
 8001022:	4619      	mov	r1, r3
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	461a      	mov	r2, r3
 8001028:	485c      	ldr	r0, [pc, #368]	@ (800119c <MX_BlueNRG_MS_Init+0x1b8>)
 800102a:	f00b ffab 	bl	800cf84 <iprintf>
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 800102e:	7a3b      	ldrb	r3, [r7, #8]
 8001030:	2b30      	cmp	r3, #48	@ 0x30
 8001032:	d902      	bls.n	800103a <MX_BlueNRG_MS_Init+0x56>
    bnrg_expansion_board = IDB05A1;
 8001034:	4b5a      	ldr	r3, [pc, #360]	@ (80011a0 <MX_BlueNRG_MS_Init+0x1bc>)
 8001036:	2201      	movs	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 800103a:	f107 0209 	add.w	r2, r7, #9
 800103e:	4b59      	ldr	r3, [pc, #356]	@ (80011a4 <MX_BlueNRG_MS_Init+0x1c0>)
 8001040:	2106      	movs	r1, #6
 8001042:	2080      	movs	r0, #128	@ 0x80
 8001044:	f007 fda3 	bl	8008b8e <aci_hal_read_config_data>
 8001048:	4603      	mov	r3, r0
 800104a:	617b      	str	r3, [r7, #20]

  if (ret) {
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <MX_BlueNRG_MS_Init+0x74>
    PRINTF("Read Static Random address failed.\n");
 8001052:	4855      	ldr	r0, [pc, #340]	@ (80011a8 <MX_BlueNRG_MS_Init+0x1c4>)
 8001054:	f00b fffe 	bl	800d054 <puts>
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8001058:	4b52      	ldr	r3, [pc, #328]	@ (80011a4 <MX_BlueNRG_MS_Init+0x1c0>)
 800105a:	795b      	ldrb	r3, [r3, #5]
 800105c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001060:	2bc0      	cmp	r3, #192	@ 0xc0
 8001062:	d004      	beq.n	800106e <MX_BlueNRG_MS_Init+0x8a>
    PRINTF("Static Random address not well formed.\n");
 8001064:	4851      	ldr	r0, [pc, #324]	@ (80011ac <MX_BlueNRG_MS_Init+0x1c8>)
 8001066:	f00b fff5 	bl	800d054 <puts>
    while(1);
 800106a:	bf00      	nop
 800106c:	e7fd      	b.n	800106a <MX_BlueNRG_MS_Init+0x86>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 800106e:	f007 fb5a 	bl	8008726 <aci_gatt_init>
 8001072:	4603      	mov	r3, r0
 8001074:	617b      	str	r3, [r7, #20]
  if(ret){
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d002      	beq.n	8001082 <MX_BlueNRG_MS_Init+0x9e>
    PRINTF("GATT_Init failed.\n");
 800107c:	484c      	ldr	r0, [pc, #304]	@ (80011b0 <MX_BlueNRG_MS_Init+0x1cc>)
 800107e:	f00b ffe9 	bl	800d054 <puts>
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8001082:	4b47      	ldr	r3, [pc, #284]	@ (80011a0 <MX_BlueNRG_MS_Init+0x1bc>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d110      	bne.n	80010ac <MX_BlueNRG_MS_Init+0xc8>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800108a:	f107 020e 	add.w	r2, r7, #14
 800108e:	f107 030a 	add.w	r3, r7, #10
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	4613      	mov	r3, r2
 800109c:	2207      	movs	r2, #7
 800109e:	2100      	movs	r1, #0
 80010a0:	2001      	movs	r0, #1
 80010a2:	f007 f914 	bl	80082ce <aci_gap_init_IDB05A1>
 80010a6:	4603      	mov	r3, r0
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	e00a      	b.n	80010c2 <MX_BlueNRG_MS_Init+0xde>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80010ac:	f107 030a 	add.w	r3, r7, #10
 80010b0:	f107 020c 	add.w	r2, r7, #12
 80010b4:	f107 010e 	add.w	r1, r7, #14
 80010b8:	2001      	movs	r0, #1
 80010ba:	f007 f958 	bl	800836e <aci_gap_init_IDB04A1>
 80010be:	4603      	mov	r3, r0
 80010c0:	617b      	str	r3, [r7, #20]
  }
  if (ret != BLE_STATUS_SUCCESS) {
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <MX_BlueNRG_MS_Init+0xea>
    PRINTF("GAP_Init failed.\n");
 80010c8:	483a      	ldr	r0, [pc, #232]	@ (80011b4 <MX_BlueNRG_MS_Init+0x1d0>)
 80010ca:	f00b ffc3 	bl	800d054 <puts>
  }

  /* Update device x */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 80010ce:	89fc      	ldrh	r4, [r7, #14]
 80010d0:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 80010d2:	6938      	ldr	r0, [r7, #16]
 80010d4:	f7ff f8cc 	bl	8000270 <strlen>
 80010d8:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	4613      	mov	r3, r2
 80010e2:	2200      	movs	r2, #0
 80010e4:	4629      	mov	r1, r5
 80010e6:	4620      	mov	r0, r4
 80010e8:	f007 fc94 	bl	8008a14 <aci_gatt_update_char_value>
 80010ec:	4603      	mov	r3, r0
 80010ee:	617b      	str	r3, [r7, #20]
  if (ret) {
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d004      	beq.n	8001100 <MX_BlueNRG_MS_Init+0x11c>
    PRINTF("aci_gatt_update_char_value failed.\n");
 80010f6:	4830      	ldr	r0, [pc, #192]	@ (80011b8 <MX_BlueNRG_MS_Init+0x1d4>)
 80010f8:	f00b ffac 	bl	800d054 <puts>
    while(1);
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <MX_BlueNRG_MS_Init+0x118>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8001100:	2301      	movs	r3, #1
 8001102:	9303      	str	r3, [sp, #12]
 8001104:	4b2d      	ldr	r3, [pc, #180]	@ (80011bc <MX_BlueNRG_MS_Init+0x1d8>)
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	2300      	movs	r3, #0
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	2310      	movs	r3, #16
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2307      	movs	r3, #7
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	2001      	movs	r0, #1
 8001118:	f007 fa5d 	bl	80085d6 <aci_gap_set_auth_requirement>
 800111c:	4603      	mov	r3, r0
 800111e:	617b      	str	r3, [r7, #20]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d004      	beq.n	8001130 <MX_BlueNRG_MS_Init+0x14c>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
 8001126:	4826      	ldr	r0, [pc, #152]	@ (80011c0 <MX_BlueNRG_MS_Init+0x1dc>)
 8001128:	f00b ff94 	bl	800d054 <puts>
    while(1);
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <MX_BlueNRG_MS_Init+0x148>
  }

  PRINTF("BLE Stack Initialized\n");
 8001130:	4824      	ldr	r0, [pc, #144]	@ (80011c4 <MX_BlueNRG_MS_Init+0x1e0>)
 8001132:	f00b ff8f 	bl	800d054 <puts>

  // TODO: add my own service
  ret = Add_HWServW2ST_Service();
 8001136:	f000 f883 	bl	8001240 <Add_HWServW2ST_Service>
 800113a:	4603      	mov	r3, r0
 800113c:	617b      	str	r3, [r7, #20]
  if(ret == BLE_STATUS_SUCCESS) {
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10a      	bne.n	800115a <MX_BlueNRG_MS_Init+0x176>
    PRINTF("BlueMS HW service added successfully.\n");
 8001144:	4820      	ldr	r0, [pc, #128]	@ (80011c8 <MX_BlueNRG_MS_Init+0x1e4>)
 8001146:	f00b ff85 	bl	800d054 <puts>
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
  }

  ret = Add_SWServW2ST_Service();
 800114a:	f000 f94b 	bl	80013e4 <Add_SWServW2ST_Service>
 800114e:	4603      	mov	r3, r0
 8001150:	617b      	str	r3, [r7, #20]
  if(ret == BLE_STATUS_SUCCESS) {
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d10a      	bne.n	800116e <MX_BlueNRG_MS_Init+0x18a>
 8001158:	e005      	b.n	8001166 <MX_BlueNRG_MS_Init+0x182>
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
 800115a:	6979      	ldr	r1, [r7, #20]
 800115c:	481b      	ldr	r0, [pc, #108]	@ (80011cc <MX_BlueNRG_MS_Init+0x1e8>)
 800115e:	f00b ff11 	bl	800cf84 <iprintf>
    while(1);
 8001162:	bf00      	nop
 8001164:	e7fd      	b.n	8001162 <MX_BlueNRG_MS_Init+0x17e>
     PRINTF("BlueMS SW service added successfully.\n");
 8001166:	481a      	ldr	r0, [pc, #104]	@ (80011d0 <MX_BlueNRG_MS_Init+0x1ec>)
 8001168:	f00b ff74 	bl	800d054 <puts>
 800116c:	e005      	b.n	800117a <MX_BlueNRG_MS_Init+0x196>
  } else {
     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
 800116e:	6979      	ldr	r1, [r7, #20]
 8001170:	4816      	ldr	r0, [pc, #88]	@ (80011cc <MX_BlueNRG_MS_Init+0x1e8>)
 8001172:	f00b ff07 	bl	800cf84 <iprintf>
     while(1);
 8001176:	bf00      	nop
 8001178:	e7fd      	b.n	8001176 <MX_BlueNRG_MS_Init+0x192>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 800117a:	2104      	movs	r1, #4
 800117c:	2001      	movs	r0, #1
 800117e:	f007 fd5b 	bl	8008c38 <aci_hal_set_tx_power_level>
 8001182:	4603      	mov	r3, r0
 8001184:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bdb0      	pop	{r4, r5, r7, pc}
 800118e:	bf00      	nop
 8001190:	080108f0 	.word	0x080108f0
 8001194:	20000000 	.word	0x20000000
 8001198:	0800182d 	.word	0x0800182d
 800119c:	080108f8 	.word	0x080108f8
 80011a0:	20000240 	.word	0x20000240
 80011a4:	20000244 	.word	0x20000244
 80011a8:	0801090c 	.word	0x0801090c
 80011ac:	08010930 	.word	0x08010930
 80011b0:	08010958 	.word	0x08010958
 80011b4:	0801096c 	.word	0x0801096c
 80011b8:	08010980 	.word	0x08010980
 80011bc:	0001e240 	.word	0x0001e240
 80011c0:	080109a4 	.word	0x080109a4
 80011c4:	080109d4 	.word	0x080109d4
 80011c8:	080109ec 	.word	0x080109ec
 80011cc:	08010a14 	.word	0x08010a14
 80011d0:	08010a44 	.word	0x08010a44

080011d4 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 80011d8:	f000 f812 	bl	8001200 <User_Process>
  hci_user_evt_proc();
 80011dc:	f008 f862 	bl	80092a4 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80011e8:	2101      	movs	r1, #1
 80011ea:	2000      	movs	r0, #0
 80011ec:	f001 fcf8 	bl	8002be0 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 80011f0:	2000      	movs	r0, #0
 80011f2:	f001 fca3 	bl	8002b3c <BSP_LED_Init>

  BSP_COM_Init(COM1);
 80011f6:	2000      	movs	r0, #0
 80011f8:	f001 fda4 	bl	8002d44 <BSP_COM_Init>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  if (set_connectable)
 8001204:	4b05      	ldr	r3, [pc, #20]	@ (800121c <User_Process+0x1c>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d004      	beq.n	8001218 <User_Process+0x18>
  {
    Set_DeviceConnectable();
 800120e:	f000 fa81 	bl	8001714 <Set_DeviceConnectable>
    set_connectable = FALSE;
 8001212:	4b02      	ldr	r3, [pc, #8]	@ (800121c <User_Process+0x1c>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000001 	.word	0x20000001

08001220 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 800122a:	4b04      	ldr	r3, [pc, #16]	@ (800123c <BSP_PB_Callback+0x1c>)
 800122c:	2201      	movs	r2, #1
 800122e:	701a      	strb	r2, [r3, #0]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	2000024a 	.word	0x2000024a

08001240 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b08d      	sub	sp, #52	@ 0x34
 8001244:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8001246:	231b      	movs	r3, #27
 8001248:	713b      	strb	r3, [r7, #4]
 800124a:	23c5      	movs	r3, #197	@ 0xc5
 800124c:	717b      	strb	r3, [r7, #5]
 800124e:	23d5      	movs	r3, #213	@ 0xd5
 8001250:	71bb      	strb	r3, [r7, #6]
 8001252:	23a5      	movs	r3, #165	@ 0xa5
 8001254:	71fb      	strb	r3, [r7, #7]
 8001256:	2302      	movs	r3, #2
 8001258:	723b      	strb	r3, [r7, #8]
 800125a:	2300      	movs	r3, #0
 800125c:	727b      	strb	r3, [r7, #9]
 800125e:	23b4      	movs	r3, #180	@ 0xb4
 8001260:	72bb      	strb	r3, [r7, #10]
 8001262:	239a      	movs	r3, #154	@ 0x9a
 8001264:	72fb      	strb	r3, [r7, #11]
 8001266:	23e1      	movs	r3, #225	@ 0xe1
 8001268:	733b      	strb	r3, [r7, #12]
 800126a:	2311      	movs	r3, #17
 800126c:	737b      	strb	r3, [r7, #13]
 800126e:	2301      	movs	r3, #1
 8001270:	73bb      	strb	r3, [r7, #14]
 8001272:	2300      	movs	r3, #0
 8001274:	73fb      	strb	r3, [r7, #15]
 8001276:	2300      	movs	r3, #0
 8001278:	743b      	strb	r3, [r7, #16]
 800127a:	2300      	movs	r3, #0
 800127c:	747b      	strb	r3, [r7, #17]
 800127e:	2300      	movs	r3, #0
 8001280:	74bb      	strb	r3, [r7, #18]
 8001282:	2300      	movs	r3, #0
 8001284:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8001286:	4b52      	ldr	r3, [pc, #328]	@ (80013d0 <Add_HWServW2ST_Service+0x190>)
 8001288:	461c      	mov	r4, r3
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800128e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8001292:	4b50      	ldr	r3, [pc, #320]	@ (80013d4 <Add_HWServW2ST_Service+0x194>)
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2310      	movs	r3, #16
 8001298:	2201      	movs	r2, #1
 800129a:	494d      	ldr	r1, [pc, #308]	@ (80013d0 <Add_HWServW2ST_Service+0x190>)
 800129c:	2002      	movs	r0, #2
 800129e:	f007 fa65 	bl	800876c <aci_gatt_add_serv>
 80012a2:	4603      	mov	r3, r0
 80012a4:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80012a6:	7dfb      	ldrb	r3, [r7, #23]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <Add_HWServW2ST_Service+0x70>
    return BLE_STATUS_ERROR;
 80012ac:	2347      	movs	r3, #71	@ 0x47
 80012ae:	e08a      	b.n	80013c6 <Add_HWServW2ST_Service+0x186>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 80012b0:	231b      	movs	r3, #27
 80012b2:	713b      	strb	r3, [r7, #4]
 80012b4:	23c5      	movs	r3, #197	@ 0xc5
 80012b6:	717b      	strb	r3, [r7, #5]
 80012b8:	23d5      	movs	r3, #213	@ 0xd5
 80012ba:	71bb      	strb	r3, [r7, #6]
 80012bc:	23a5      	movs	r3, #165	@ 0xa5
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	2302      	movs	r3, #2
 80012c2:	723b      	strb	r3, [r7, #8]
 80012c4:	2300      	movs	r3, #0
 80012c6:	727b      	strb	r3, [r7, #9]
 80012c8:	2336      	movs	r3, #54	@ 0x36
 80012ca:	72bb      	strb	r3, [r7, #10]
 80012cc:	23ac      	movs	r3, #172	@ 0xac
 80012ce:	72fb      	strb	r3, [r7, #11]
 80012d0:	23e1      	movs	r3, #225	@ 0xe1
 80012d2:	733b      	strb	r3, [r7, #12]
 80012d4:	2311      	movs	r3, #17
 80012d6:	737b      	strb	r3, [r7, #13]
 80012d8:	2301      	movs	r3, #1
 80012da:	73bb      	strb	r3, [r7, #14]
 80012dc:	2300      	movs	r3, #0
 80012de:	73fb      	strb	r3, [r7, #15]
 80012e0:	2300      	movs	r3, #0
 80012e2:	743b      	strb	r3, [r7, #16]
 80012e4:	2300      	movs	r3, #0
 80012e6:	747b      	strb	r3, [r7, #17]
 80012e8:	2300      	movs	r3, #0
 80012ea:	74bb      	strb	r3, [r7, #18]
 80012ec:	2300      	movs	r3, #0
 80012ee:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 80012f0:	7cbb      	ldrb	r3, [r7, #18]
 80012f2:	f043 0304 	orr.w	r3, r3, #4
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 80012fa:	7cbb      	ldrb	r3, [r7, #18]
 80012fc:	f043 0310 	orr.w	r3, r3, #16
 8001300:	b2db      	uxtb	r3, r3
 8001302:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001304:	4b34      	ldr	r3, [pc, #208]	@ (80013d8 <Add_HWServW2ST_Service+0x198>)
 8001306:	461c      	mov	r4, r3
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800130c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8001310:	4b30      	ldr	r3, [pc, #192]	@ (80013d4 <Add_HWServW2ST_Service+0x194>)
 8001312:	8818      	ldrh	r0, [r3, #0]
 8001314:	4b31      	ldr	r3, [pc, #196]	@ (80013dc <Add_HWServW2ST_Service+0x19c>)
 8001316:	9305      	str	r3, [sp, #20]
 8001318:	2300      	movs	r3, #0
 800131a:	9304      	str	r3, [sp, #16]
 800131c:	2310      	movs	r3, #16
 800131e:	9303      	str	r3, [sp, #12]
 8001320:	2304      	movs	r3, #4
 8001322:	9302      	str	r3, [sp, #8]
 8001324:	2300      	movs	r3, #0
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	2302      	movs	r3, #2
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2304      	movs	r3, #4
 800132e:	4a2a      	ldr	r2, [pc, #168]	@ (80013d8 <Add_HWServW2ST_Service+0x198>)
 8001330:	2102      	movs	r1, #2
 8001332:	f007 faa4 	bl	800887e <aci_gatt_add_char>
 8001336:	4603      	mov	r3, r0
 8001338:	75fb      	strb	r3, [r7, #23]
                           4,
                           CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800133a:	7dfb      	ldrb	r3, [r7, #23]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <Add_HWServW2ST_Service+0x104>
    return BLE_STATUS_ERROR;
 8001340:	2347      	movs	r3, #71	@ 0x47
 8001342:	e040      	b.n	80013c6 <Add_HWServW2ST_Service+0x186>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8001344:	231b      	movs	r3, #27
 8001346:	713b      	strb	r3, [r7, #4]
 8001348:	23c5      	movs	r3, #197	@ 0xc5
 800134a:	717b      	strb	r3, [r7, #5]
 800134c:	23d5      	movs	r3, #213	@ 0xd5
 800134e:	71bb      	strb	r3, [r7, #6]
 8001350:	23a5      	movs	r3, #165	@ 0xa5
 8001352:	71fb      	strb	r3, [r7, #7]
 8001354:	2302      	movs	r3, #2
 8001356:	723b      	strb	r3, [r7, #8]
 8001358:	2300      	movs	r3, #0
 800135a:	727b      	strb	r3, [r7, #9]
 800135c:	2336      	movs	r3, #54	@ 0x36
 800135e:	72bb      	strb	r3, [r7, #10]
 8001360:	23ac      	movs	r3, #172	@ 0xac
 8001362:	72fb      	strb	r3, [r7, #11]
 8001364:	23e1      	movs	r3, #225	@ 0xe1
 8001366:	733b      	strb	r3, [r7, #12]
 8001368:	2311      	movs	r3, #17
 800136a:	737b      	strb	r3, [r7, #13]
 800136c:	2301      	movs	r3, #1
 800136e:	73bb      	strb	r3, [r7, #14]
 8001370:	2300      	movs	r3, #0
 8001372:	73fb      	strb	r3, [r7, #15]
 8001374:	2300      	movs	r3, #0
 8001376:	743b      	strb	r3, [r7, #16]
 8001378:	2300      	movs	r3, #0
 800137a:	747b      	strb	r3, [r7, #17]
 800137c:	23e0      	movs	r3, #224	@ 0xe0
 800137e:	74bb      	strb	r3, [r7, #18]
 8001380:	2300      	movs	r3, #0
 8001382:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001384:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <Add_HWServW2ST_Service+0x198>)
 8001386:	461c      	mov	r4, r3
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800138c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8001390:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <Add_HWServW2ST_Service+0x194>)
 8001392:	8818      	ldrh	r0, [r3, #0]
 8001394:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <Add_HWServW2ST_Service+0x1a0>)
 8001396:	9305      	str	r3, [sp, #20]
 8001398:	2300      	movs	r3, #0
 800139a:	9304      	str	r3, [sp, #16]
 800139c:	2310      	movs	r3, #16
 800139e:	9303      	str	r3, [sp, #12]
 80013a0:	2304      	movs	r3, #4
 80013a2:	9302      	str	r3, [sp, #8]
 80013a4:	2300      	movs	r3, #0
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	2312      	movs	r3, #18
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2306      	movs	r3, #6
 80013ae:	4a0a      	ldr	r2, [pc, #40]	@ (80013d8 <Add_HWServW2ST_Service+0x198>)
 80013b0:	2102      	movs	r1, #2
 80013b2:	f007 fa64 	bl	800887e <aci_gatt_add_char>
 80013b6:	4603      	mov	r3, r0
 80013b8:	75fb      	strb	r3, [r7, #23]
                           3*2,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80013ba:	7dfb      	ldrb	r3, [r7, #23]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <Add_HWServW2ST_Service+0x184>
    return BLE_STATUS_ERROR;
 80013c0:	2347      	movs	r3, #71	@ 0x47
 80013c2:	e000      	b.n	80013c6 <Add_HWServW2ST_Service+0x186>

  return BLE_STATUS_SUCCESS;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	371c      	adds	r7, #28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd90      	pop	{r4, r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000258 	.word	0x20000258
 80013d4:	2000024c 	.word	0x2000024c
 80013d8:	20000268 	.word	0x20000268
 80013dc:	2000024e 	.word	0x2000024e
 80013e0:	20000250 	.word	0x20000250

080013e4 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b08d      	sub	sp, #52	@ 0x34
 80013e8:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberOfRecords=1;
 80013ea:	2301      	movs	r3, #1
 80013ec:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 80013ee:	231b      	movs	r3, #27
 80013f0:	703b      	strb	r3, [r7, #0]
 80013f2:	23c5      	movs	r3, #197	@ 0xc5
 80013f4:	707b      	strb	r3, [r7, #1]
 80013f6:	23d5      	movs	r3, #213	@ 0xd5
 80013f8:	70bb      	strb	r3, [r7, #2]
 80013fa:	23a5      	movs	r3, #165	@ 0xa5
 80013fc:	70fb      	strb	r3, [r7, #3]
 80013fe:	2302      	movs	r3, #2
 8001400:	713b      	strb	r3, [r7, #4]
 8001402:	2300      	movs	r3, #0
 8001404:	717b      	strb	r3, [r7, #5]
 8001406:	23b4      	movs	r3, #180	@ 0xb4
 8001408:	71bb      	strb	r3, [r7, #6]
 800140a:	239a      	movs	r3, #154	@ 0x9a
 800140c:	71fb      	strb	r3, [r7, #7]
 800140e:	23e1      	movs	r3, #225	@ 0xe1
 8001410:	723b      	strb	r3, [r7, #8]
 8001412:	2311      	movs	r3, #17
 8001414:	727b      	strb	r3, [r7, #9]
 8001416:	2302      	movs	r3, #2
 8001418:	72bb      	strb	r3, [r7, #10]
 800141a:	2300      	movs	r3, #0
 800141c:	72fb      	strb	r3, [r7, #11]
 800141e:	2300      	movs	r3, #0
 8001420:	733b      	strb	r3, [r7, #12]
 8001422:	2300      	movs	r3, #0
 8001424:	737b      	strb	r3, [r7, #13]
 8001426:	2300      	movs	r3, #0
 8001428:	73bb      	strb	r3, [r7, #14]
 800142a:	2300      	movs	r3, #0
 800142c:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800142e:	4b31      	ldr	r3, [pc, #196]	@ (80014f4 <Add_SWServW2ST_Service+0x110>)
 8001430:	461c      	mov	r4, r3
 8001432:	463b      	mov	r3, r7
 8001434:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001436:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	461a      	mov	r2, r3
 8001440:	0052      	lsls	r2, r2, #1
 8001442:	4413      	add	r3, r2
 8001444:	b2db      	uxtb	r3, r3
 8001446:	3301      	adds	r3, #1
 8001448:	b2db      	uxtb	r3, r3
 800144a:	4a2b      	ldr	r2, [pc, #172]	@ (80014f8 <Add_SWServW2ST_Service+0x114>)
 800144c:	9200      	str	r2, [sp, #0]
 800144e:	2201      	movs	r2, #1
 8001450:	4928      	ldr	r1, [pc, #160]	@ (80014f4 <Add_SWServW2ST_Service+0x110>)
 8001452:	2002      	movs	r0, #2
 8001454:	f007 f98a 	bl	800876c <aci_gatt_add_serv>
 8001458:	4603      	mov	r3, r0
 800145a:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 800145c:	7cfb      	ldrb	r3, [r7, #19]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d13f      	bne.n	80014e2 <Add_SWServW2ST_Service+0xfe>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 8001462:	231b      	movs	r3, #27
 8001464:	703b      	strb	r3, [r7, #0]
 8001466:	23c5      	movs	r3, #197	@ 0xc5
 8001468:	707b      	strb	r3, [r7, #1]
 800146a:	23d5      	movs	r3, #213	@ 0xd5
 800146c:	70bb      	strb	r3, [r7, #2]
 800146e:	23a5      	movs	r3, #165	@ 0xa5
 8001470:	70fb      	strb	r3, [r7, #3]
 8001472:	2302      	movs	r3, #2
 8001474:	713b      	strb	r3, [r7, #4]
 8001476:	2300      	movs	r3, #0
 8001478:	717b      	strb	r3, [r7, #5]
 800147a:	2336      	movs	r3, #54	@ 0x36
 800147c:	71bb      	strb	r3, [r7, #6]
 800147e:	23ac      	movs	r3, #172	@ 0xac
 8001480:	71fb      	strb	r3, [r7, #7]
 8001482:	23e1      	movs	r3, #225	@ 0xe1
 8001484:	723b      	strb	r3, [r7, #8]
 8001486:	2311      	movs	r3, #17
 8001488:	727b      	strb	r3, [r7, #9]
 800148a:	2301      	movs	r3, #1
 800148c:	72bb      	strb	r3, [r7, #10]
 800148e:	2300      	movs	r3, #0
 8001490:	72fb      	strb	r3, [r7, #11]
 8001492:	2300      	movs	r3, #0
 8001494:	733b      	strb	r3, [r7, #12]
 8001496:	2301      	movs	r3, #1
 8001498:	737b      	strb	r3, [r7, #13]
 800149a:	2300      	movs	r3, #0
 800149c:	73bb      	strb	r3, [r7, #14]
 800149e:	2300      	movs	r3, #0
 80014a0:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80014a2:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <Add_SWServW2ST_Service+0x118>)
 80014a4:	461c      	mov	r4, r3
 80014a6:	463b      	mov	r3, r7
 80014a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 80014ae:	4b12      	ldr	r3, [pc, #72]	@ (80014f8 <Add_SWServW2ST_Service+0x114>)
 80014b0:	8818      	ldrh	r0, [r3, #0]
 80014b2:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <Add_SWServW2ST_Service+0x11c>)
 80014b4:	9305      	str	r3, [sp, #20]
 80014b6:	2300      	movs	r3, #0
 80014b8:	9304      	str	r3, [sp, #16]
 80014ba:	2310      	movs	r3, #16
 80014bc:	9303      	str	r3, [sp, #12]
 80014be:	2301      	movs	r3, #1
 80014c0:	9302      	str	r3, [sp, #8]
 80014c2:	2300      	movs	r3, #0
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	230e      	movs	r3, #14
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2302      	movs	r3, #2
 80014cc:	4a0b      	ldr	r2, [pc, #44]	@ (80014fc <Add_SWServW2ST_Service+0x118>)
 80014ce:	2102      	movs	r1, #2
 80014d0:	f007 f9d5 	bl	800887e <aci_gatt_add_char>
 80014d4:	4603      	mov	r3, r0
 80014d6:	74fb      	strb	r3, [r7, #19]
						   CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
						   GATT_NOTIFY_ATTRIBUTE_WRITE,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 80014d8:	7cfb      	ldrb	r3, [r7, #19]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d103      	bne.n	80014e6 <Add_SWServW2ST_Service+0x102>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 80014de:	2300      	movs	r3, #0
 80014e0:	e003      	b.n	80014ea <Add_SWServW2ST_Service+0x106>
    goto fail;
 80014e2:	bf00      	nop
 80014e4:	e000      	b.n	80014e8 <Add_SWServW2ST_Service+0x104>
    goto fail;
 80014e6:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 80014e8:	2347      	movs	r3, #71	@ 0x47
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	371c      	adds	r7, #28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd90      	pop	{r4, r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000258 	.word	0x20000258
 80014f8:	20000252 	.word	0x20000252
 80014fc:	20000268 	.word	0x20000268
 8001500:	20000254 	.word	0x20000254

08001504 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af02      	add	r7, sp, #8
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  uint8_t buff[2*3];
  tBleStatus ret;

//  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));

  HOST_TO_LE_16(buff, x_axes->AXIS_X);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	747b      	strb	r3, [r7, #17]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	121b      	asrs	r3, r3, #8
 800151e:	b2db      	uxtb	r3, r3
 8001520:	743b      	strb	r3, [r7, #16]
  HOST_TO_LE_16(buff+2, x_axes->AXIS_Y);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	74fb      	strb	r3, [r7, #19]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	121b      	asrs	r3, r3, #8
 8001530:	b2db      	uxtb	r3, r3
 8001532:	74bb      	strb	r3, [r7, #18]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_Z);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	757b      	strb	r3, [r7, #21]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	121b      	asrs	r3, r3, #8
 8001542:	b2db      	uxtb	r3, r3
 8001544:	753b      	strb	r3, [r7, #20]
//  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
//
//  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
//  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
//  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
  if (connected) {
 8001546:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <Acc_Update+0x84>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d016      	beq.n	800157c <Acc_Update+0x78>
	  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 800154e:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <Acc_Update+0x88>)
 8001550:	8818      	ldrh	r0, [r3, #0]
 8001552:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <Acc_Update+0x8c>)
 8001554:	8819      	ldrh	r1, [r3, #0]
 8001556:	f107 0310 	add.w	r3, r7, #16
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	2306      	movs	r3, #6
 800155e:	2200      	movs	r2, #0
 8001560:	f007 fa58 	bl	8008a14 <aci_gatt_update_char_value>
 8001564:	4603      	mov	r3, r0
 8001566:	75fb      	strb	r3, [r7, #23]
					   0, 2*3, buff);

	  if (ret != BLE_STATUS_SUCCESS){
 8001568:	7dfb      	ldrb	r3, [r7, #23]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d006      	beq.n	800157c <Acc_Update+0x78>
	    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
 800156e:	7dfb      	ldrb	r3, [r7, #23]
 8001570:	4619      	mov	r1, r3
 8001572:	4808      	ldr	r0, [pc, #32]	@ (8001594 <Acc_Update+0x90>)
 8001574:	f00b fd06 	bl	800cf84 <iprintf>
	    return BLE_STATUS_ERROR ;
 8001578:	2347      	movs	r3, #71	@ 0x47
 800157a:	e000      	b.n	800157e <Acc_Update+0x7a>
	  }
  }

  return BLE_STATUS_SUCCESS;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	2000027c 	.word	0x2000027c
 800158c:	2000024c 	.word	0x2000024c
 8001590:	20000250 	.word	0x20000250
 8001594:	08010a6c 	.word	0x08010a6c

08001598 <Read_delayTime>:

tBleStatus Read_delayTime()
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af02      	add	r7, sp, #8
  uint8_t buff[4];
  tBleStatus ret;

//  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));

  HOST_TO_LE_32(buff, delayTime);
 800159e:	4b17      	ldr	r3, [pc, #92]	@ (80015fc <Read_delayTime+0x64>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	0e1b      	lsrs	r3, r3, #24
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	703b      	strb	r3, [r7, #0]
 80015a8:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <Read_delayTime+0x64>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	0c1b      	lsrs	r3, r3, #16
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	707b      	strb	r3, [r7, #1]
 80015b2:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <Read_delayTime+0x64>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	0a1b      	lsrs	r3, r3, #8
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	70bb      	strb	r3, [r7, #2]
 80015bc:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <Read_delayTime+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	70fb      	strb	r3, [r7, #3]
//
//  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
//  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
//  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 80015c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <Read_delayTime+0x68>)
 80015c6:	8818      	ldrh	r0, [r3, #0]
 80015c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <Read_delayTime+0x6c>)
 80015ca:	8819      	ldrh	r1, [r3, #0]
 80015cc:	463b      	mov	r3, r7
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	2304      	movs	r3, #4
 80015d2:	2200      	movs	r2, #0
 80015d4:	f007 fa1e 	bl	8008a14 <aci_gatt_update_char_value>
 80015d8:	4603      	mov	r3, r0
 80015da:	71fb      	strb	r3, [r7, #7]
				   0, 4, buff);
  if (ret != BLE_STATUS_SUCCESS){
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d006      	beq.n	80015f0 <Read_delayTime+0x58>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\r\n",ret) ;
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	4619      	mov	r1, r3
 80015e6:	4808      	ldr	r0, [pc, #32]	@ (8001608 <Read_delayTime+0x70>)
 80015e8:	f00b fccc 	bl	800cf84 <iprintf>
    return BLE_STATUS_ERROR ;
 80015ec:	2347      	movs	r3, #71	@ 0x47
 80015ee:	e000      	b.n	80015f2 <Read_delayTime+0x5a>
  }

  return BLE_STATUS_SUCCESS;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000004 	.word	0x20000004
 8001600:	2000024c 	.word	0x2000024c
 8001604:	2000024e 	.word	0x2000024e
 8001608:	08010aa8 	.word	0x08010aa8

0800160c <Read_Request_CB>:
* Description    : Update the sensor values.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	80fb      	strh	r3, [r7, #6]
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 8001616:	88fa      	ldrh	r2, [r7, #6]
 8001618:	4b14      	ldr	r3, [pc, #80]	@ (800166c <Read_Request_CB+0x60>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	3301      	adds	r3, #1
 800161e:	429a      	cmp	r2, r3
 8001620:	d105      	bne.n	800162e <Read_Request_CB+0x22>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 8001622:	4a13      	ldr	r2, [pc, #76]	@ (8001670 <Read_Request_CB+0x64>)
 8001624:	4913      	ldr	r1, [pc, #76]	@ (8001674 <Read_Request_CB+0x68>)
 8001626:	4814      	ldr	r0, [pc, #80]	@ (8001678 <Read_Request_CB+0x6c>)
 8001628:	f7ff ff6c 	bl	8001504 <Acc_Update>
 800162c:	e007      	b.n	800163e <Read_Request_CB+0x32>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 800162e:	88fa      	ldrh	r2, [r7, #6]
 8001630:	4b12      	ldr	r3, [pc, #72]	@ (800167c <Read_Request_CB+0x70>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	429a      	cmp	r2, r3
 8001638:	d101      	bne.n	800163e <Read_Request_CB+0x32>
  {
	Read_delayTime();
 800163a:	f7ff ffad 	bl	8001598 <Read_delayTime>
  }

  if(connection_handle !=0)
 800163e:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <Read_Request_CB+0x74>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00e      	beq.n	8001664 <Read_Request_CB+0x58>
  {
    ret = aci_gatt_allow_read(connection_handle);
 8001646:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <Read_Request_CB+0x74>)
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f007 fa72 	bl	8008b34 <aci_gatt_allow_read>
 8001650:	4603      	mov	r3, r0
 8001652:	73fb      	strb	r3, [r7, #15]
    if (ret != BLE_STATUS_SUCCESS)
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d004      	beq.n	8001664 <Read_Request_CB+0x58>
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	4619      	mov	r1, r3
 800165e:	4809      	ldr	r0, [pc, #36]	@ (8001684 <Read_Request_CB+0x78>)
 8001660:	f00b fc90 	bl	800cf84 <iprintf>
    }
  }
}
 8001664:	bf00      	nop
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000250 	.word	0x20000250
 8001670:	20000298 	.word	0x20000298
 8001674:	2000028c 	.word	0x2000028c
 8001678:	20000280 	.word	0x20000280
 800167c:	2000024e 	.word	0x2000024e
 8001680:	20000278 	.word	0x20000278
 8001684:	08010b20 	.word	0x08010b20

08001688 <Write_Request_CB>:

void Write_Request_CB(uint16_t handle, uint8_t data_length, uint8_t* data)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	603a      	str	r2, [r7, #0]
 8001692:	80fb      	strh	r3, [r7, #6]
 8001694:	460b      	mov	r3, r1
 8001696:	717b      	strb	r3, [r7, #5]
	PRINTF("HANDLE: %d; EXPECTED: %d\r\n", handle, QuaternionsCharHandle + 1);
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	4a18      	ldr	r2, [pc, #96]	@ (80016fc <Write_Request_CB+0x74>)
 800169c:	8812      	ldrh	r2, [r2, #0]
 800169e:	3201      	adds	r2, #1
 80016a0:	4619      	mov	r1, r3
 80016a2:	4817      	ldr	r0, [pc, #92]	@ (8001700 <Write_Request_CB+0x78>)
 80016a4:	f00b fc6e 	bl	800cf84 <iprintf>
	if (handle == QuaternionsCharHandle + 1)
 80016a8:	88fa      	ldrh	r2, [r7, #6]
 80016aa:	4b14      	ldr	r3, [pc, #80]	@ (80016fc <Write_Request_CB+0x74>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d11f      	bne.n	80016f4 <Write_Request_CB+0x6c>
	{
//		BSP_LED_Toggle(LED2);
		uint32_t newDelayTime = data[0] + (data[1] << 8);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	3301      	adds	r3, #1
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	021b      	lsls	r3, r3, #8
 80016c2:	4413      	add	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
		PRINTF("Data: %d\r\n", newDelayTime);
 80016c6:	68f9      	ldr	r1, [r7, #12]
 80016c8:	480e      	ldr	r0, [pc, #56]	@ (8001704 <Write_Request_CB+0x7c>)
 80016ca:	f00b fc5b 	bl	800cf84 <iprintf>
		if (newDelayTime > 0)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00c      	beq.n	80016ee <Write_Request_CB+0x66>
		{
			delayTime = newDelayTime * 100;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2264      	movs	r2, #100	@ 0x64
 80016d8:	fb02 f303 	mul.w	r3, r2, r3
 80016dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001708 <Write_Request_CB+0x80>)
 80016de:	6013      	str	r3, [r2, #0]
			PRINTF("Write request success!!! %d\r\n", delayTime);
 80016e0:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <Write_Request_CB+0x80>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	4809      	ldr	r0, [pc, #36]	@ (800170c <Write_Request_CB+0x84>)
 80016e8:	f00b fc4c 	bl	800cf84 <iprintf>
		else
		{
			PRINTF("INVALID DATA VALUE!!!\r\n");
		}
	}
}
 80016ec:	e002      	b.n	80016f4 <Write_Request_CB+0x6c>
			PRINTF("INVALID DATA VALUE!!!\r\n");
 80016ee:	4808      	ldr	r0, [pc, #32]	@ (8001710 <Write_Request_CB+0x88>)
 80016f0:	f00b fcb0 	bl	800d054 <puts>
}
 80016f4:	bf00      	nop
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000254 	.word	0x20000254
 8001700:	08010b48 	.word	0x08010b48
 8001704:	08010b64 	.word	0x08010b64
 8001708:	20000004 	.word	0x20000004
 800170c:	08010b70 	.word	0x08010b70
 8001710:	08010b90 	.word	0x08010b90

08001714 <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b092      	sub	sp, #72	@ 0x48
 8001718:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 800171a:	4a3f      	ldr	r2, [pc, #252]	@ (8001818 <Set_DeviceConnectable+0x104>)
 800171c:	f107 031c 	add.w	r3, r7, #28
 8001720:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001724:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 8001728:	2302      	movs	r3, #2
 800172a:	703b      	strb	r3, [r7, #0]
 800172c:	230a      	movs	r3, #10
 800172e:	707b      	strb	r3, [r7, #1]
 8001730:	2300      	movs	r3, #0
 8001732:	70bb      	strb	r3, [r7, #2]
 8001734:	2308      	movs	r3, #8
 8001736:	70fb      	strb	r3, [r7, #3]
 8001738:	2309      	movs	r3, #9
 800173a:	713b      	strb	r3, [r7, #4]
 800173c:	2342      	movs	r3, #66	@ 0x42
 800173e:	717b      	strb	r3, [r7, #5]
 8001740:	236c      	movs	r3, #108	@ 0x6c
 8001742:	71bb      	strb	r3, [r7, #6]
 8001744:	2375      	movs	r3, #117	@ 0x75
 8001746:	71fb      	strb	r3, [r7, #7]
 8001748:	2365      	movs	r3, #101	@ 0x65
 800174a:	723b      	strb	r3, [r7, #8]
 800174c:	2347      	movs	r3, #71	@ 0x47
 800174e:	727b      	strb	r3, [r7, #9]
 8001750:	2347      	movs	r3, #71	@ 0x47
 8001752:	72bb      	strb	r3, [r7, #10]
 8001754:	2347      	movs	r3, #71	@ 0x47
 8001756:	72fb      	strb	r3, [r7, #11]
 8001758:	230d      	movs	r3, #13
 800175a:	733b      	strb	r3, [r7, #12]
 800175c:	23ff      	movs	r3, #255	@ 0xff
 800175e:	737b      	strb	r3, [r7, #13]
 8001760:	2301      	movs	r3, #1
 8001762:	73bb      	strb	r3, [r7, #14]
 8001764:	2380      	movs	r3, #128	@ 0x80
 8001766:	73fb      	strb	r3, [r7, #15]
 8001768:	2300      	movs	r3, #0
 800176a:	743b      	strb	r3, [r7, #16]
 800176c:	23f4      	movs	r3, #244	@ 0xf4
 800176e:	747b      	strb	r3, [r7, #17]
 8001770:	2300      	movs	r3, #0
 8001772:	74bb      	strb	r3, [r7, #18]
 8001774:	2300      	movs	r3, #0
 8001776:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 8001778:	4b28      	ldr	r3, [pc, #160]	@ (800181c <Set_DeviceConnectable+0x108>)
 800177a:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 800177c:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 800177e:	4b27      	ldr	r3, [pc, #156]	@ (800181c <Set_DeviceConnectable+0x108>)
 8001780:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 8001782:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 8001784:	4b25      	ldr	r3, [pc, #148]	@ (800181c <Set_DeviceConnectable+0x108>)
 8001786:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 8001788:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 800178a:	4b24      	ldr	r3, [pc, #144]	@ (800181c <Set_DeviceConnectable+0x108>)
 800178c:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 800178e:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 8001790:	4b22      	ldr	r3, [pc, #136]	@ (800181c <Set_DeviceConnectable+0x108>)
 8001792:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 8001794:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 8001796:	4b21      	ldr	r3, [pc, #132]	@ (800181c <Set_DeviceConnectable+0x108>)
 8001798:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 800179a:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 800179c:	7cbb      	ldrb	r3, [r7, #18]
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 80017a6:	2100      	movs	r1, #0
 80017a8:	2000      	movs	r0, #0
 80017aa:	f007 fb26 	bl	8008dfa <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");
 80017ae:	481c      	ldr	r0, [pc, #112]	@ (8001820 <Set_DeviceConnectable+0x10c>)
 80017b0:	f00b fc50 	bl	800d054 <puts>

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 80017b4:	2300      	movs	r3, #0
 80017b6:	9306      	str	r3, [sp, #24]
 80017b8:	2300      	movs	r3, #0
 80017ba:	9305      	str	r3, [sp, #20]
 80017bc:	2300      	movs	r3, #0
 80017be:	9304      	str	r3, [sp, #16]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9303      	str	r3, [sp, #12]
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	9302      	str	r3, [sp, #8]
 80017ca:	2308      	movs	r3, #8
 80017cc:	9301      	str	r3, [sp, #4]
 80017ce:	2300      	movs	r3, #0
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2301      	movs	r3, #1
 80017d4:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 80017d8:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80017dc:	2000      	movs	r0, #0
 80017de:	f006 fe10 	bl	8008402 <aci_gap_set_discoverable>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
								STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 80017e8:	463b      	mov	r3, r7
 80017ea:	4619      	mov	r1, r3
 80017ec:	201a      	movs	r0, #26
 80017ee:	f006 ff49 	bl	8008684 <aci_gap_update_adv_data>

  if(ret != BLE_STATUS_SUCCESS)
 80017f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d006      	beq.n	8001808 <Set_DeviceConnectable+0xf4>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
 80017fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017fe:	4619      	mov	r1, r3
 8001800:	4808      	ldr	r0, [pc, #32]	@ (8001824 <Set_DeviceConnectable+0x110>)
 8001802:	f00b fbbf 	bl	800cf84 <iprintf>
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 8001806:	e002      	b.n	800180e <Set_DeviceConnectable+0xfa>
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
 8001808:	4807      	ldr	r0, [pc, #28]	@ (8001828 <Set_DeviceConnectable+0x114>)
 800180a:	f00b fc23 	bl	800d054 <puts>
}
 800180e:	bf00      	nop
 8001810:	3728      	adds	r7, #40	@ 0x28
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	08010c50 	.word	0x08010c50
 800181c:	20000244 	.word	0x20000244
 8001820:	08010bdc 	.word	0x08010bdc
 8001824:	08010bfc 	.word	0x08010bfc
 8001828:	08010c28 	.word	0x08010c28

0800182c <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	@ 0x28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	627b      	str	r3, [r7, #36]	@ 0x24
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183a:	3301      	adds	r3, #1
 800183c:	623b      	str	r3, [r7, #32]
  PRINTF("HCI PACKET TYPE: 0x%04x, EXPECTED: 0x%04x\r\n", hci_pckt->type, HCI_EVENT_PKT);
 800183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2204      	movs	r2, #4
 8001844:	4619      	mov	r1, r3
 8001846:	4835      	ldr	r0, [pc, #212]	@ (800191c <user_notify+0xf0>)
 8001848:	f00b fb9c 	bl	800cf84 <iprintf>

  if(hci_pckt->type != HCI_EVENT_PKT)
 800184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b04      	cmp	r3, #4
 8001852:	d15b      	bne.n	800190c <user_notify+0xe0>
    return;

  PRINTF("EVENT PACKET: 0x%04x, EXPECTED: 0x%04x\r\n", event_pckt->evt, EVT_VENDOR);
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	22ff      	movs	r2, #255	@ 0xff
 800185a:	4619      	mov	r1, r3
 800185c:	4830      	ldr	r0, [pc, #192]	@ (8001920 <user_notify+0xf4>)
 800185e:	f00b fb91 	bl	800cf84 <iprintf>
  switch(event_pckt->evt){
 8001862:	6a3b      	ldr	r3, [r7, #32]
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2bff      	cmp	r3, #255	@ 0xff
 8001868:	d01f      	beq.n	80018aa <user_notify+0x7e>
 800186a:	2bff      	cmp	r3, #255	@ 0xff
 800186c:	dc53      	bgt.n	8001916 <user_notify+0xea>
 800186e:	2b05      	cmp	r3, #5
 8001870:	d002      	beq.n	8001878 <user_notify+0x4c>
 8001872:	2b3e      	cmp	r3, #62	@ 0x3e
 8001874:	d003      	beq.n	800187e <user_notify+0x52>
 8001876:	e04e      	b.n	8001916 <user_notify+0xea>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8001878:	f000 f858 	bl	800192c <GAP_DisconnectionComplete_CB>
    }
    break;
 800187c:	e04b      	b.n	8001916 <user_notify+0xea>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	3302      	adds	r3, #2
 8001882:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d141      	bne.n	8001910 <user_notify+0xe4>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	3301      	adds	r3, #1
 8001890:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1d5a      	adds	r2, r3, #5
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800189c:	b29b      	uxth	r3, r3
 800189e:	4619      	mov	r1, r3
 80018a0:	4610      	mov	r0, r2
 80018a2:	f000 f85b 	bl	800195c <GAP_ConnectionComplete_CB>
        }
        break;
 80018a6:	bf00      	nop
      }
    }
    break;
 80018a8:	e032      	b.n	8001910 <user_notify+0xe4>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 80018aa:	6a3b      	ldr	r3, [r7, #32]
 80018ac:	3302      	adds	r3, #2
 80018ae:	61fb      	str	r3, [r7, #28]
      PRINTF("ECODE: 0x%04x\r\n", blue_evt->ecode);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	4619      	mov	r1, r3
 80018b8:	481a      	ldr	r0, [pc, #104]	@ (8001924 <user_notify+0xf8>)
 80018ba:	f00b fb63 	bl	800cf84 <iprintf>
      switch(blue_evt->ecode){
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	f640 4201 	movw	r2, #3073	@ 0xc01
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d00d      	beq.n	80018e8 <user_notify+0xbc>
 80018cc:	f640 4214 	movw	r2, #3092	@ 0xc14
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d11f      	bne.n	8001914 <user_notify+0xe8>

      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	3302      	adds	r3, #2
 80018d8:	61bb      	str	r3, [r7, #24]
          Read_Request_CB(pr->attr_handle);
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	885b      	ldrh	r3, [r3, #2]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fe93 	bl	800160c <Read_Request_CB>
        }
        break;
 80018e6:	e010      	b.n	800190a <user_notify+0xde>
        // TODO: add a write event
      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          PRINTF("ENTERED WRITE SEGMENT\r\n");
 80018e8:	480f      	ldr	r0, [pc, #60]	@ (8001928 <user_notify+0xfc>)
 80018ea:	f00b fbb3 	bl	800d054 <puts>
          evt_gatt_attr_modified_IDB05A1 *pr = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3302      	adds	r3, #2
 80018f2:	617b      	str	r3, [r7, #20]
          Write_Request_CB(pr->attr_handle, pr->data_length, pr->att_data);
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	885b      	ldrh	r3, [r3, #2]
 80018f8:	b298      	uxth	r0, r3
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	7919      	ldrb	r1, [r3, #4]
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	3307      	adds	r3, #7
 8001902:	461a      	mov	r2, r3
 8001904:	f7ff fec0 	bl	8001688 <Write_Request_CB>
        }
        break;
 8001908:	bf00      	nop
      }


    }
    break;
 800190a:	e003      	b.n	8001914 <user_notify+0xe8>
    return;
 800190c:	bf00      	nop
 800190e:	e002      	b.n	8001916 <user_notify+0xea>
    break;
 8001910:	bf00      	nop
 8001912:	e000      	b.n	8001916 <user_notify+0xea>
    break;
 8001914:	bf00      	nop
  }
}
 8001916:	3728      	adds	r7, #40	@ 0x28
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	08010c58 	.word	0x08010c58
 8001920:	08010c84 	.word	0x08010c84
 8001924:	08010cb0 	.word	0x08010cb0
 8001928:	08010cc0 	.word	0x08010cc0

0800192c <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  connected = FALSE;
 8001930:	4b06      	ldr	r3, [pc, #24]	@ (800194c <GAP_DisconnectionComplete_CB+0x20>)
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
 8001936:	4806      	ldr	r0, [pc, #24]	@ (8001950 <GAP_DisconnectionComplete_CB+0x24>)
 8001938:	f00b fb8c 	bl	800d054 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 800193c:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <GAP_DisconnectionComplete_CB+0x28>)
 800193e:	2201      	movs	r2, #1
 8001940:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8001942:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <GAP_DisconnectionComplete_CB+0x2c>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}
 800194c:	2000027c 	.word	0x2000027c
 8001950:	08010cd8 	.word	0x08010cd8
 8001954:	20000001 	.word	0x20000001
 8001958:	2000027a 	.word	0x2000027a

0800195c <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8001968:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <GAP_ConnectionComplete_CB+0x54>)
 800196a:	2201      	movs	r2, #1
 800196c:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 800196e:	4a11      	ldr	r2, [pc, #68]	@ (80019b4 <GAP_ConnectionComplete_CB+0x58>)
 8001970:	887b      	ldrh	r3, [r7, #2]
 8001972:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
 8001974:	4810      	ldr	r0, [pc, #64]	@ (80019b8 <GAP_ConnectionComplete_CB+0x5c>)
 8001976:	f00b fb05 	bl	800cf84 <iprintf>
  for(uint32_t i = 5; i > 0; i--){
 800197a:	2305      	movs	r3, #5
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	e00a      	b.n	8001996 <GAP_ConnectionComplete_CB+0x3a>
    PRINTF("%02X-", addr[i]);
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4413      	add	r3, r2
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	4619      	mov	r1, r3
 800198a:	480c      	ldr	r0, [pc, #48]	@ (80019bc <GAP_ConnectionComplete_CB+0x60>)
 800198c:	f00b fafa 	bl	800cf84 <iprintf>
  for(uint32_t i = 5; i > 0; i--){
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3b01      	subs	r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1f1      	bne.n	8001980 <GAP_ConnectionComplete_CB+0x24>
  }
  PRINTF("%02X\n", addr[0]);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4619      	mov	r1, r3
 80019a2:	4807      	ldr	r0, [pc, #28]	@ (80019c0 <GAP_ConnectionComplete_CB+0x64>)
 80019a4:	f00b faee 	bl	800cf84 <iprintf>
}
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	2000027c 	.word	0x2000027c
 80019b4:	20000278 	.word	0x20000278
 80019b8:	08010ce8 	.word	0x08010ce8
 80019bc:	08010d00 	.word	0x08010d00
 80019c0:	08010d08 	.word	0x08010d08

080019c4 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019cc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a4c <HCI_TL_SPI_Init+0x88>)
 80019ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d0:	4a1e      	ldr	r2, [pc, #120]	@ (8001a4c <HCI_TL_SPI_Init+0x88>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019d8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a4c <HCI_TL_SPI_Init+0x88>)
 80019da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80019e4:	2340      	movs	r3, #64	@ 0x40
 80019e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80019f2:	f107 030c 	add.w	r3, r7, #12
 80019f6:	4619      	mov	r1, r3
 80019f8:	4815      	ldr	r0, [pc, #84]	@ (8001a50 <HCI_TL_SPI_Init+0x8c>)
 80019fa:	f002 f951 	bl	8003ca0 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80019fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a04:	2301      	movs	r3, #1
 8001a06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001a10:	f107 030c 	add.w	r3, r7, #12
 8001a14:	4619      	mov	r1, r3
 8001a16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a1a:	f002 f941 	bl	8003ca0 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001a1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	4619      	mov	r1, r3
 8001a36:	4807      	ldr	r0, [pc, #28]	@ (8001a54 <HCI_TL_SPI_Init+0x90>)
 8001a38:	f002 f932 	bl	8003ca0 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 8001a3c:	f001 fbbe 	bl	80031bc <BSP_SPI3_Init>
 8001a40:	4603      	mov	r3, r0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3720      	adds	r7, #32
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	48001000 	.word	0x48001000
 8001a54:	48000c00 	.word	0x48000c00

08001a58 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8001a5c:	2140      	movs	r1, #64	@ 0x40
 8001a5e:	4808      	ldr	r0, [pc, #32]	@ (8001a80 <HCI_TL_SPI_DeInit+0x28>)
 8001a60:	f002 fac8 	bl	8003ff4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8001a64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a68:	4806      	ldr	r0, [pc, #24]	@ (8001a84 <HCI_TL_SPI_DeInit+0x2c>)
 8001a6a:	f002 fac3 	bl	8003ff4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8001a6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a76:	f002 fabd 	bl	8003ff4 <HAL_GPIO_DeInit>
  return 0;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	48001000 	.word	0x48001000
 8001a84:	48000c00 	.word	0x48000c00

08001a88 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a92:	480d      	ldr	r0, [pc, #52]	@ (8001ac8 <HCI_TL_SPI_Reset+0x40>)
 8001a94:	f002 fbba 	bl	800420c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aa2:	f002 fbb3 	bl	800420c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001aa6:	2005      	movs	r0, #5
 8001aa8:	f001 fe5a 	bl	8003760 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001aac:	2201      	movs	r2, #1
 8001aae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ab2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ab6:	f002 fba9 	bl	800420c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001aba:	2005      	movs	r0, #5
 8001abc:	f001 fe50 	bl	8003760 <HAL_Delay>
  return 0;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	48000c00 	.word	0x48000c00

08001acc <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8001adc:	23ff      	movs	r3, #255	@ 0xff
 8001ade:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001ae0:	4a26      	ldr	r2, [pc, #152]	@ (8001b7c <HCI_TL_SPI_Receive+0xb0>)
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aea:	6018      	str	r0, [r3, #0]
 8001aec:	3304      	adds	r3, #4
 8001aee:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001af0:	2200      	movs	r2, #0
 8001af2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001af6:	4822      	ldr	r0, [pc, #136]	@ (8001b80 <HCI_TL_SPI_Receive+0xb4>)
 8001af8:	f002 fb88 	bl	800420c <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001afc:	f107 010c 	add.w	r1, r7, #12
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	2205      	movs	r2, #5
 8001b06:	4618      	mov	r0, r3
 8001b08:	f001 fb88 	bl	800321c <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 8001b0c:	7b3b      	ldrb	r3, [r7, #12]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d129      	bne.n	8001b66 <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8001b12:	7c3b      	ldrb	r3, [r7, #16]
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	b21a      	sxth	r2, r3
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	b21b      	sxth	r3, r3
 8001b20:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8001b22:	8bfb      	ldrh	r3, [r7, #30]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d01e      	beq.n	8001b66 <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8001b28:	8bfa      	ldrh	r2, [r7, #30]
 8001b2a:	887b      	ldrh	r3, [r7, #2]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d901      	bls.n	8001b34 <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 8001b30:	887b      	ldrh	r3, [r7, #2]
 8001b32:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8001b34:	2300      	movs	r3, #0
 8001b36:	777b      	strb	r3, [r7, #29]
 8001b38:	e010      	b.n	8001b5c <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8001b3a:	f107 011b 	add.w	r1, r7, #27
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	2201      	movs	r2, #1
 8001b44:	4618      	mov	r0, r3
 8001b46:	f001 fb69 	bl	800321c <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 8001b4a:	7f7b      	ldrb	r3, [r7, #29]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	4413      	add	r3, r2
 8001b50:	7efa      	ldrb	r2, [r7, #27]
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8001b56:	7f7b      	ldrb	r3, [r7, #29]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	777b      	strb	r3, [r7, #29]
 8001b5c:	7f7b      	ldrb	r3, [r7, #29]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	8bfa      	ldrh	r2, [r7, #30]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d8e9      	bhi.n	8001b3a <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001b66:	2201      	movs	r2, #1
 8001b68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b6c:	4804      	ldr	r0, [pc, #16]	@ (8001b80 <HCI_TL_SPI_Receive+0xb4>)
 8001b6e:	f002 fb4d 	bl	800420c <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8001b72:	7f7b      	ldrb	r3, [r7, #29]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	08010d10 	.word	0x08010d10
 8001b80:	48000c00 	.word	0x48000c00

08001b84 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001b90:	4a24      	ldr	r2, [pc, #144]	@ (8001c24 <HCI_TL_SPI_Send+0xa0>)
 8001b92:	f107 0310 	add.w	r3, r7, #16
 8001b96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b9a:	6018      	str	r0, [r3, #0]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001ba0:	f001 fdd2 	bl	8003748 <HAL_GetTick>
 8001ba4:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001baa:	2200      	movs	r2, #0
 8001bac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bb0:	481d      	ldr	r0, [pc, #116]	@ (8001c28 <HCI_TL_SPI_Send+0xa4>)
 8001bb2:	f002 fb2b 	bl	800420c <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001bb6:	f107 0108 	add.w	r1, r7, #8
 8001bba:	f107 0310 	add.w	r3, r7, #16
 8001bbe:	2205      	movs	r2, #5
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f001 fb2b 	bl	800321c <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 8001bc6:	7a3b      	ldrb	r3, [r7, #8]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d10f      	bne.n	8001bec <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8001bcc:	7a7b      	ldrb	r3, [r7, #9]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	887b      	ldrh	r3, [r7, #2]
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d806      	bhi.n	8001be4 <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 8001bd6:	887b      	ldrh	r3, [r7, #2]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4914      	ldr	r1, [pc, #80]	@ (8001c2c <HCI_TL_SPI_Send+0xa8>)
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f001 fb1d 	bl	800321c <BSP_SPI3_SendRecv>
 8001be2:	e006      	b.n	8001bf2 <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8001be4:	f06f 0301 	mvn.w	r3, #1
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	e002      	b.n	8001bf2 <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8001bec:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf0:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bf8:	480b      	ldr	r0, [pc, #44]	@ (8001c28 <HCI_TL_SPI_Send+0xa4>)
 8001bfa:	f002 fb07 	bl	800420c <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001bfe:	f001 fda3 	bl	8003748 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b0f      	cmp	r3, #15
 8001c0a:	d903      	bls.n	8001c14 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 8001c0c:	f06f 0302 	mvn.w	r3, #2
 8001c10:	61fb      	str	r3, [r7, #28]
      break;
 8001c12:	e002      	b.n	8001c1a <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	dbc5      	blt.n	8001ba6 <HCI_TL_SPI_Send+0x22>

  return result;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3720      	adds	r7, #32
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	08010d18 	.word	0x08010d18
 8001c28:	48000c00 	.word	0x48000c00
 8001c2c:	200002ac 	.word	0x200002ac

08001c30 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001c34:	2140      	movs	r1, #64	@ 0x40
 8001c36:	4805      	ldr	r0, [pc, #20]	@ (8001c4c <IsDataAvailable+0x1c>)
 8001c38:	f002 fad0 	bl	80041dc <HAL_GPIO_ReadPin>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	bf0c      	ite	eq
 8001c42:	2301      	moveq	r3, #1
 8001c44:	2300      	movne	r3, #0
 8001c46:	b2db      	uxtb	r3, r3
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	48001000 	.word	0x48001000

08001c50 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8001c56:	4b12      	ldr	r3, [pc, #72]	@ (8001ca0 <hci_tl_lowlevel_init+0x50>)
 8001c58:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001c5a:	4b12      	ldr	r3, [pc, #72]	@ (8001ca4 <hci_tl_lowlevel_init+0x54>)
 8001c5c:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8001c5e:	4b12      	ldr	r3, [pc, #72]	@ (8001ca8 <hci_tl_lowlevel_init+0x58>)
 8001c60:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001c62:	4b12      	ldr	r3, [pc, #72]	@ (8001cac <hci_tl_lowlevel_init+0x5c>)
 8001c64:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8001c66:	4b12      	ldr	r3, [pc, #72]	@ (8001cb0 <hci_tl_lowlevel_init+0x60>)
 8001c68:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8001c6a:	4b12      	ldr	r3, [pc, #72]	@ (8001cb4 <hci_tl_lowlevel_init+0x64>)
 8001c6c:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	4618      	mov	r0, r3
 8001c72:	f007 f9df 	bl	8009034 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8001c76:	4910      	ldr	r1, [pc, #64]	@ (8001cb8 <hci_tl_lowlevel_init+0x68>)
 8001c78:	4810      	ldr	r0, [pc, #64]	@ (8001cbc <hci_tl_lowlevel_init+0x6c>)
 8001c7a:	f001 ffcd 	bl	8003c18 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001c7e:	4a10      	ldr	r2, [pc, #64]	@ (8001cc0 <hci_tl_lowlevel_init+0x70>)
 8001c80:	2100      	movs	r1, #0
 8001c82:	480e      	ldr	r0, [pc, #56]	@ (8001cbc <hci_tl_lowlevel_init+0x6c>)
 8001c84:	f001 ffae 	bl	8003be4 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	2017      	movs	r0, #23
 8001c8e:	f001 fe66 	bl	800395e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c92:	2017      	movs	r0, #23
 8001c94:	f001 fe7f 	bl	8003996 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8001c98:	bf00      	nop
 8001c9a:	3720      	adds	r7, #32
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	080019c5 	.word	0x080019c5
 8001ca4:	08001a59 	.word	0x08001a59
 8001ca8:	08001b85 	.word	0x08001b85
 8001cac:	08001acd 	.word	0x08001acd
 8001cb0:	08001a89 	.word	0x08001a89
 8001cb4:	0800325d 	.word	0x0800325d
 8001cb8:	16000006 	.word	0x16000006
 8001cbc:	200002a4 	.word	0x200002a4
 8001cc0:	08001cc5 	.word	0x08001cc5

08001cc4 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001cc8:	e005      	b.n	8001cd6 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f007 fb16 	bl	80092fc <hci_notify_asynch_evt>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d105      	bne.n	8001ce2 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8001cd6:	f7ff ffab 	bl	8001c30 <IsDataAvailable>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f4      	bne.n	8001cca <hci_tl_lowlevel_isr+0x6>
 8001ce0:	e000      	b.n	8001ce4 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8001ce2:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cec:	f001 fcc4 	bl	8003678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cf0:	f000 f832 	bl	8001d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cf4:	f000 f98c 	bl	8002010 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001cf8:	f000 f890 	bl	8001e1c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8001cfc:	f000 f8c6 	bl	8001e8c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001d00:	f000 f902 	bl	8001f08 <MX_QUADSPI_Init>
  MX_USART3_UART_Init();
 8001d04:	f000 f926 	bl	8001f54 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d08:	f000 f954 	bl	8001fb4 <MX_USB_OTG_FS_PCD_Init>
  MX_BlueNRG_MS_Init();
 8001d0c:	f7ff f96a 	bl	8000fe4 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */

  BSP_ACCELERO_Init();
 8001d10:	f001 fb46 	bl	80033a0 <BSP_ACCELERO_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d14:	f007 fc8a 	bl	800962c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TASK_BLE */
  TASK_BLEHandle = osThreadNew(StartTASK_BLE, NULL, &TASK_BLE_attributes);
 8001d18:	4a09      	ldr	r2, [pc, #36]	@ (8001d40 <main+0x58>)
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4809      	ldr	r0, [pc, #36]	@ (8001d44 <main+0x5c>)
 8001d1e:	f007 fccf 	bl	80096c0 <osThreadNew>
 8001d22:	4603      	mov	r3, r0
 8001d24:	4a08      	ldr	r2, [pc, #32]	@ (8001d48 <main+0x60>)
 8001d26:	6013      	str	r3, [r2, #0]

  /* creation of TASK_ACC */
  TASK_ACCHandle = osThreadNew(StartTASK_ACC, NULL, &TASK_ACC_attributes);
 8001d28:	4a08      	ldr	r2, [pc, #32]	@ (8001d4c <main+0x64>)
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4808      	ldr	r0, [pc, #32]	@ (8001d50 <main+0x68>)
 8001d2e:	f007 fcc7 	bl	80096c0 <osThreadNew>
 8001d32:	4603      	mov	r3, r0
 8001d34:	4a07      	ldr	r2, [pc, #28]	@ (8001d54 <main+0x6c>)
 8001d36:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001d38:	f007 fc9c 	bl	8009674 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <main+0x54>
 8001d40:	08010d50 	.word	0x08010d50
 8001d44:	08002355 	.word	0x08002355
 8001d48:	200009e8 	.word	0x200009e8
 8001d4c:	08010d74 	.word	0x08010d74
 8001d50:	0800236d 	.word	0x0800236d
 8001d54:	20001248 	.word	0x20001248

08001d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b096      	sub	sp, #88	@ 0x58
 8001d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d5e:	f107 0314 	add.w	r3, r7, #20
 8001d62:	2244      	movs	r2, #68	@ 0x44
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f00b fa74 	bl	800d254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d6c:	463b      	mov	r3, r7
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	60da      	str	r2, [r3, #12]
 8001d78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d7a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001d7e:	f003 fa23 	bl	80051c8 <HAL_PWREx_ControlVoltageScaling>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001d88:	f000 fb2e 	bl	80023e8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001d8c:	f003 f9fe 	bl	800518c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001d90:	4b21      	ldr	r3, [pc, #132]	@ (8001e18 <SystemClock_Config+0xc0>)
 8001d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d96:	4a20      	ldr	r2, [pc, #128]	@ (8001e18 <SystemClock_Config+0xc0>)
 8001d98:	f023 0318 	bic.w	r3, r3, #24
 8001d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001da0:	2314      	movs	r3, #20
 8001da2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001da4:	2301      	movs	r3, #1
 8001da6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001da8:	2301      	movs	r3, #1
 8001daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001db0:	2360      	movs	r3, #96	@ 0x60
 8001db2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001db4:	2302      	movs	r3, #2
 8001db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001db8:	2301      	movs	r3, #1
 8001dba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001dc0:	2328      	movs	r3, #40	@ 0x28
 8001dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001dc4:	2307      	movs	r3, #7
 8001dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f003 fb19 	bl	800540c <HAL_RCC_OscConfig>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001de0:	f000 fb02 	bl	80023e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001de4:	230f      	movs	r3, #15
 8001de6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de8:	2303      	movs	r3, #3
 8001dea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001df8:	463b      	mov	r3, r7
 8001dfa:	2104      	movs	r1, #4
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f003 fee1 	bl	8005bc4 <HAL_RCC_ClockConfig>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001e08:	f000 faee 	bl	80023e8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001e0c:	f004 fbe8 	bl	80065e0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001e10:	bf00      	nop
 8001e12:	3758      	adds	r7, #88	@ 0x58
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40021000 	.word	0x40021000

08001e1c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001e20:	4b18      	ldr	r3, [pc, #96]	@ (8001e84 <MX_DFSDM1_Init+0x68>)
 8001e22:	4a19      	ldr	r2, [pc, #100]	@ (8001e88 <MX_DFSDM1_Init+0x6c>)
 8001e24:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001e26:	4b17      	ldr	r3, [pc, #92]	@ (8001e84 <MX_DFSDM1_Init+0x68>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001e2c:	4b15      	ldr	r3, [pc, #84]	@ (8001e84 <MX_DFSDM1_Init+0x68>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001e32:	4b14      	ldr	r3, [pc, #80]	@ (8001e84 <MX_DFSDM1_Init+0x68>)
 8001e34:	2202      	movs	r2, #2
 8001e36:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001e38:	4b12      	ldr	r3, [pc, #72]	@ (8001e84 <MX_DFSDM1_Init+0x68>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001e3e:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <MX_DFSDM1_Init+0x68>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001e44:	4b0f      	ldr	r3, [pc, #60]	@ (8001e84 <MX_DFSDM1_Init+0x68>)
 8001e46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e4a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e84 <MX_DFSDM1_Init+0x68>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001e52:	4b0c      	ldr	r3, [pc, #48]	@ (8001e84 <MX_DFSDM1_Init+0x68>)
 8001e54:	2204      	movs	r2, #4
 8001e56:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001e58:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <MX_DFSDM1_Init+0x68>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001e5e:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <MX_DFSDM1_Init+0x68>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001e64:	4b07      	ldr	r3, [pc, #28]	@ (8001e84 <MX_DFSDM1_Init+0x68>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001e6a:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <MX_DFSDM1_Init+0x68>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001e70:	4804      	ldr	r0, [pc, #16]	@ (8001e84 <MX_DFSDM1_Init+0x68>)
 8001e72:	f001 fdab 	bl	80039cc <HAL_DFSDM_ChannelInit>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001e7c:	f000 fab4 	bl	80023e8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	200003ac 	.word	0x200003ac
 8001e88:	40016020 	.word	0x40016020

08001e8c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e90:	4b1b      	ldr	r3, [pc, #108]	@ (8001f00 <MX_I2C2_Init+0x74>)
 8001e92:	4a1c      	ldr	r2, [pc, #112]	@ (8001f04 <MX_I2C2_Init+0x78>)
 8001e94:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8001e96:	4b1a      	ldr	r3, [pc, #104]	@ (8001f00 <MX_I2C2_Init+0x74>)
 8001e98:	f640 6214 	movw	r2, #3604	@ 0xe14
 8001e9c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001e9e:	4b18      	ldr	r3, [pc, #96]	@ (8001f00 <MX_I2C2_Init+0x74>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ea4:	4b16      	ldr	r3, [pc, #88]	@ (8001f00 <MX_I2C2_Init+0x74>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001eaa:	4b15      	ldr	r3, [pc, #84]	@ (8001f00 <MX_I2C2_Init+0x74>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001eb0:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <MX_I2C2_Init+0x74>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001eb6:	4b12      	ldr	r3, [pc, #72]	@ (8001f00 <MX_I2C2_Init+0x74>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ebc:	4b10      	ldr	r3, [pc, #64]	@ (8001f00 <MX_I2C2_Init+0x74>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f00 <MX_I2C2_Init+0x74>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ec8:	480d      	ldr	r0, [pc, #52]	@ (8001f00 <MX_I2C2_Init+0x74>)
 8001eca:	f002 f9da 	bl	8004282 <HAL_I2C_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001ed4:	f000 fa88 	bl	80023e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4809      	ldr	r0, [pc, #36]	@ (8001f00 <MX_I2C2_Init+0x74>)
 8001edc:	f002 ff8c 	bl	8004df8 <HAL_I2CEx_ConfigAnalogFilter>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001ee6:	f000 fa7f 	bl	80023e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001eea:	2100      	movs	r1, #0
 8001eec:	4804      	ldr	r0, [pc, #16]	@ (8001f00 <MX_I2C2_Init+0x74>)
 8001eee:	f002 ffce 	bl	8004e8e <HAL_I2CEx_ConfigDigitalFilter>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001ef8:	f000 fa76 	bl	80023e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	200003e4 	.word	0x200003e4
 8001f04:	40005800 	.word	0x40005800

08001f08 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f4c <MX_QUADSPI_Init+0x44>)
 8001f0e:	4a10      	ldr	r2, [pc, #64]	@ (8001f50 <MX_QUADSPI_Init+0x48>)
 8001f10:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001f12:	4b0e      	ldr	r3, [pc, #56]	@ (8001f4c <MX_QUADSPI_Init+0x44>)
 8001f14:	2202      	movs	r2, #2
 8001f16:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001f18:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <MX_QUADSPI_Init+0x44>)
 8001f1a:	2204      	movs	r2, #4
 8001f1c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <MX_QUADSPI_Init+0x44>)
 8001f20:	2210      	movs	r2, #16
 8001f22:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001f24:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <MX_QUADSPI_Init+0x44>)
 8001f26:	2217      	movs	r2, #23
 8001f28:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001f2a:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <MX_QUADSPI_Init+0x44>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001f30:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <MX_QUADSPI_Init+0x44>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001f36:	4805      	ldr	r0, [pc, #20]	@ (8001f4c <MX_QUADSPI_Init+0x44>)
 8001f38:	f003 f9ac 	bl	8005294 <HAL_QSPI_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001f42:	f000 fa51 	bl	80023e8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000438 	.word	0x20000438
 8001f50:	a0001000 	.word	0xa0001000

08001f54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f58:	4b14      	ldr	r3, [pc, #80]	@ (8001fac <MX_USART3_UART_Init+0x58>)
 8001f5a:	4a15      	ldr	r2, [pc, #84]	@ (8001fb0 <MX_USART3_UART_Init+0x5c>)
 8001f5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f5e:	4b13      	ldr	r3, [pc, #76]	@ (8001fac <MX_USART3_UART_Init+0x58>)
 8001f60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f66:	4b11      	ldr	r3, [pc, #68]	@ (8001fac <MX_USART3_UART_Init+0x58>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fac <MX_USART3_UART_Init+0x58>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f72:	4b0e      	ldr	r3, [pc, #56]	@ (8001fac <MX_USART3_UART_Init+0x58>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f78:	4b0c      	ldr	r3, [pc, #48]	@ (8001fac <MX_USART3_UART_Init+0x58>)
 8001f7a:	220c      	movs	r2, #12
 8001f7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <MX_USART3_UART_Init+0x58>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f84:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <MX_USART3_UART_Init+0x58>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f8a:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <MX_USART3_UART_Init+0x58>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <MX_USART3_UART_Init+0x58>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f96:	4805      	ldr	r0, [pc, #20]	@ (8001fac <MX_USART3_UART_Init+0x58>)
 8001f98:	f005 f942 	bl	8007220 <HAL_UART_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001fa2:	f000 fa21 	bl	80023e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	2000047c 	.word	0x2000047c
 8001fb0:	40004800 	.word	0x40004800

08001fb4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001fb8:	4b14      	ldr	r3, [pc, #80]	@ (800200c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001fbe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001fc0:	4b12      	ldr	r3, [pc, #72]	@ (800200c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fc2:	2206      	movs	r2, #6
 8001fc4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001fc6:	4b11      	ldr	r3, [pc, #68]	@ (800200c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fc8:	2202      	movs	r2, #2
 8001fca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800200c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fce:	2202      	movs	r2, #2
 8001fd0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800200c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800200c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001fde:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001fe4:	4b09      	ldr	r3, [pc, #36]	@ (800200c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001fea:	4b08      	ldr	r3, [pc, #32]	@ (800200c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	@ (800200c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001ff6:	4805      	ldr	r0, [pc, #20]	@ (800200c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ff8:	f002 ff95 	bl	8004f26 <HAL_PCD_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002002:	f000 f9f1 	bl	80023e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000504 	.word	0x20000504

08002010 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	@ 0x28
 8002014:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
 8002024:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002026:	4bbd      	ldr	r3, [pc, #756]	@ (800231c <MX_GPIO_Init+0x30c>)
 8002028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202a:	4abc      	ldr	r2, [pc, #752]	@ (800231c <MX_GPIO_Init+0x30c>)
 800202c:	f043 0310 	orr.w	r3, r3, #16
 8002030:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002032:	4bba      	ldr	r3, [pc, #744]	@ (800231c <MX_GPIO_Init+0x30c>)
 8002034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800203e:	4bb7      	ldr	r3, [pc, #732]	@ (800231c <MX_GPIO_Init+0x30c>)
 8002040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002042:	4ab6      	ldr	r2, [pc, #728]	@ (800231c <MX_GPIO_Init+0x30c>)
 8002044:	f043 0304 	orr.w	r3, r3, #4
 8002048:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800204a:	4bb4      	ldr	r3, [pc, #720]	@ (800231c <MX_GPIO_Init+0x30c>)
 800204c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002056:	4bb1      	ldr	r3, [pc, #708]	@ (800231c <MX_GPIO_Init+0x30c>)
 8002058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205a:	4ab0      	ldr	r2, [pc, #704]	@ (800231c <MX_GPIO_Init+0x30c>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002062:	4bae      	ldr	r3, [pc, #696]	@ (800231c <MX_GPIO_Init+0x30c>)
 8002064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800206e:	4bab      	ldr	r3, [pc, #684]	@ (800231c <MX_GPIO_Init+0x30c>)
 8002070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002072:	4aaa      	ldr	r2, [pc, #680]	@ (800231c <MX_GPIO_Init+0x30c>)
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800207a:	4ba8      	ldr	r3, [pc, #672]	@ (800231c <MX_GPIO_Init+0x30c>)
 800207c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002086:	4ba5      	ldr	r3, [pc, #660]	@ (800231c <MX_GPIO_Init+0x30c>)
 8002088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208a:	4aa4      	ldr	r2, [pc, #656]	@ (800231c <MX_GPIO_Init+0x30c>)
 800208c:	f043 0308 	orr.w	r3, r3, #8
 8002090:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002092:	4ba2      	ldr	r3, [pc, #648]	@ (800231c <MX_GPIO_Init+0x30c>)
 8002094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	603b      	str	r3, [r7, #0]
 800209c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800209e:	2200      	movs	r2, #0
 80020a0:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80020a4:	489e      	ldr	r0, [pc, #632]	@ (8002320 <MX_GPIO_Init+0x310>)
 80020a6:	f002 f8b1 	bl	800420c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80020aa:	2200      	movs	r2, #0
 80020ac:	f248 1104 	movw	r1, #33028	@ 0x8104
 80020b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020b4:	f002 f8aa 	bl	800420c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 80020b8:	2200      	movs	r2, #0
 80020ba:	f24b 0114 	movw	r1, #45076	@ 0xb014
 80020be:	4899      	ldr	r0, [pc, #612]	@ (8002324 <MX_GPIO_Init+0x314>)
 80020c0:	f002 f8a4 	bl	800420c <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80020c4:	2200      	movs	r2, #0
 80020c6:	f241 0181 	movw	r1, #4225	@ 0x1081
 80020ca:	4897      	ldr	r0, [pc, #604]	@ (8002328 <MX_GPIO_Init+0x318>)
 80020cc:	f002 f89e 	bl	800420c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80020d0:	2201      	movs	r2, #1
 80020d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020d6:	4894      	ldr	r0, [pc, #592]	@ (8002328 <MX_GPIO_Init+0x318>)
 80020d8:	f002 f898 	bl	800420c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80020dc:	2200      	movs	r2, #0
 80020de:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80020e2:	4892      	ldr	r0, [pc, #584]	@ (800232c <MX_GPIO_Init+0x31c>)
 80020e4:	f002 f892 	bl	800420c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80020e8:	2201      	movs	r2, #1
 80020ea:	2120      	movs	r1, #32
 80020ec:	488d      	ldr	r0, [pc, #564]	@ (8002324 <MX_GPIO_Init+0x314>)
 80020ee:	f002 f88d 	bl	800420c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80020f2:	2201      	movs	r2, #1
 80020f4:	2101      	movs	r1, #1
 80020f6:	488a      	ldr	r0, [pc, #552]	@ (8002320 <MX_GPIO_Init+0x310>)
 80020f8:	f002 f888 	bl	800420c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80020fc:	f240 1315 	movw	r3, #277	@ 0x115
 8002100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002102:	2301      	movs	r3, #1
 8002104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800210e:	f107 0314 	add.w	r3, r7, #20
 8002112:	4619      	mov	r1, r3
 8002114:	4882      	ldr	r0, [pc, #520]	@ (8002320 <MX_GPIO_Init+0x310>)
 8002116:	f001 fdc3 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800211a:	236a      	movs	r3, #106	@ 0x6a
 800211c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800211e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	4619      	mov	r1, r3
 800212e:	487c      	ldr	r0, [pc, #496]	@ (8002320 <MX_GPIO_Init+0x310>)
 8002130:	f001 fdb6 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8002134:	233f      	movs	r3, #63	@ 0x3f
 8002136:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002138:	230b      	movs	r3, #11
 800213a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	4619      	mov	r1, r3
 8002146:	4879      	ldr	r0, [pc, #484]	@ (800232c <MX_GPIO_Init+0x31c>)
 8002148:	f001 fdaa 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800214c:	2303      	movs	r3, #3
 800214e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002150:	2302      	movs	r3, #2
 8002152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002158:	2303      	movs	r3, #3
 800215a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800215c:	2308      	movs	r3, #8
 800215e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	4619      	mov	r1, r3
 8002166:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800216a:	f001 fd99 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800216e:	f248 1304 	movw	r3, #33028	@ 0x8104
 8002172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002174:	2301      	movs	r3, #1
 8002176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217c:	2300      	movs	r3, #0
 800217e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	4619      	mov	r1, r3
 8002186:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800218a:	f001 fd89 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800218e:	2308      	movs	r3, #8
 8002190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	2302      	movs	r3, #2
 8002194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219a:	2300      	movs	r3, #0
 800219c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800219e:	2301      	movs	r3, #1
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80021a2:	f107 0314 	add.w	r3, r7, #20
 80021a6:	4619      	mov	r1, r3
 80021a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021ac:	f001 fd78 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80021b0:	2310      	movs	r3, #16
 80021b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80021b4:	230b      	movs	r3, #11
 80021b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	4619      	mov	r1, r3
 80021c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021c6:	f001 fd6b 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80021ca:	23e0      	movs	r3, #224	@ 0xe0
 80021cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d6:	2303      	movs	r3, #3
 80021d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021da:	2305      	movs	r3, #5
 80021dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	4619      	mov	r1, r3
 80021e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021e8:	f001 fd5a 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80021ec:	2301      	movs	r3, #1
 80021ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021f0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80021f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	4619      	mov	r1, r3
 8002200:	4848      	ldr	r0, [pc, #288]	@ (8002324 <MX_GPIO_Init+0x314>)
 8002202:	f001 fd4d 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002206:	2302      	movs	r3, #2
 8002208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800220a:	230b      	movs	r3, #11
 800220c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002212:	f107 0314 	add.w	r3, r7, #20
 8002216:	4619      	mov	r1, r3
 8002218:	4842      	ldr	r0, [pc, #264]	@ (8002324 <MX_GPIO_Init+0x314>)
 800221a:	f001 fd41 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 800221e:	f24b 0334 	movw	r3, #45108	@ 0xb034
 8002222:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002224:	2301      	movs	r3, #1
 8002226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222c:	2300      	movs	r3, #0
 800222e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	4619      	mov	r1, r3
 8002236:	483b      	ldr	r0, [pc, #236]	@ (8002324 <MX_GPIO_Init+0x314>)
 8002238:	f001 fd32 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 800223c:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8002240:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002242:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	4619      	mov	r1, r3
 8002252:	4835      	ldr	r0, [pc, #212]	@ (8002328 <MX_GPIO_Init+0x318>)
 8002254:	f001 fd24 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8002258:	f243 0381 	movw	r3, #12417	@ 0x3081
 800225c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225e:	2301      	movs	r3, #1
 8002260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	2300      	movs	r3, #0
 8002268:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800226a:	f107 0314 	add.w	r3, r7, #20
 800226e:	4619      	mov	r1, r3
 8002270:	482d      	ldr	r0, [pc, #180]	@ (8002328 <MX_GPIO_Init+0x318>)
 8002272:	f001 fd15 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002276:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800227a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800227c:	2301      	movs	r3, #1
 800227e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2300      	movs	r3, #0
 8002286:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	4619      	mov	r1, r3
 800228e:	4827      	ldr	r0, [pc, #156]	@ (800232c <MX_GPIO_Init+0x31c>)
 8002290:	f001 fd06 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8002294:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800229a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800229e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	4619      	mov	r1, r3
 80022aa:	4820      	ldr	r0, [pc, #128]	@ (800232c <MX_GPIO_Init+0x31c>)
 80022ac:	f001 fcf8 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80022b0:	2302      	movs	r3, #2
 80022b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b4:	2302      	movs	r3, #2
 80022b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022bc:	2303      	movs	r3, #3
 80022be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022c0:	2305      	movs	r3, #5
 80022c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80022c4:	f107 0314 	add.w	r3, r7, #20
 80022c8:	4619      	mov	r1, r3
 80022ca:	4817      	ldr	r0, [pc, #92]	@ (8002328 <MX_GPIO_Init+0x318>)
 80022cc:	f001 fce8 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80022d0:	2378      	movs	r3, #120	@ 0x78
 80022d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	2302      	movs	r3, #2
 80022d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022dc:	2303      	movs	r3, #3
 80022de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022e0:	2307      	movs	r3, #7
 80022e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	4619      	mov	r1, r3
 80022ea:	480f      	ldr	r0, [pc, #60]	@ (8002328 <MX_GPIO_Init+0x318>)
 80022ec:	f001 fcd8 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80022f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022f6:	2312      	movs	r3, #18
 80022f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fe:	2303      	movs	r3, #3
 8002300:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002302:	2304      	movs	r3, #4
 8002304:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002306:	f107 0314 	add.w	r3, r7, #20
 800230a:	4619      	mov	r1, r3
 800230c:	4805      	ldr	r0, [pc, #20]	@ (8002324 <MX_GPIO_Init+0x314>)
 800230e:	f001 fcc7 	bl	8003ca0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	2105      	movs	r1, #5
 8002316:	2017      	movs	r0, #23
 8002318:	e00a      	b.n	8002330 <MX_GPIO_Init+0x320>
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000
 8002320:	48001000 	.word	0x48001000
 8002324:	48000400 	.word	0x48000400
 8002328:	48000c00 	.word	0x48000c00
 800232c:	48000800 	.word	0x48000800
 8002330:	f001 fb15 	bl	800395e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002334:	2017      	movs	r0, #23
 8002336:	f001 fb2e 	bl	8003996 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	2105      	movs	r1, #5
 800233e:	2028      	movs	r0, #40	@ 0x28
 8002340:	f001 fb0d 	bl	800395e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002344:	2028      	movs	r0, #40	@ 0x28
 8002346:	f001 fb26 	bl	8003996 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800234a:	bf00      	nop
 800234c:	3728      	adds	r7, #40	@ 0x28
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop

08002354 <StartTASK_BLE>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTASK_BLE */
void StartTASK_BLE(void *argument)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
//	if (set_connectable)
//	  {
//		Set_DeviceConnectable();
//		set_connectable = FALSE;
//	  }
	MX_BlueNRG_MS_Process();
 800235c:	f7fe ff3a 	bl	80011d4 <MX_BlueNRG_MS_Process>
//
//	  hci_user_evt_proc();
    osDelay(1);
 8002360:	2001      	movs	r0, #1
 8002362:	f007 fa3f 	bl	80097e4 <osDelay>
	MX_BlueNRG_MS_Process();
 8002366:	bf00      	nop
 8002368:	e7f8      	b.n	800235c <StartTASK_BLE+0x8>
	...

0800236c <StartTASK_ACC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTASK_ACC */
void StartTASK_ACC(void *argument)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTASK_ACC */
  /* Infinite loop */
  uint32_t curTimeTick = HAL_GetTick();
 8002374:	f001 f9e8 	bl	8003748 <HAL_GetTick>
 8002378:	6178      	str	r0, [r7, #20]
  uint32_t nextTimeTick = HAL_GetTick();
 800237a:	f001 f9e5 	bl	8003748 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

  int16_t pDataXYZ[3];
  for(;;)
  {
	BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8002380:	f107 0308 	add.w	r3, r7, #8
 8002384:	4618      	mov	r0, r3
 8002386:	f001 f849 	bl	800341c <BSP_ACCELERO_AccGetXYZ>
	x_axes.AXIS_X = pDataXYZ[0];
 800238a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800238e:	461a      	mov	r2, r3
 8002390:	4b11      	ldr	r3, [pc, #68]	@ (80023d8 <StartTASK_ACC+0x6c>)
 8002392:	601a      	str	r2, [r3, #0]
	x_axes.AXIS_Y = pDataXYZ[1];
 8002394:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002398:	461a      	mov	r2, r3
 800239a:	4b0f      	ldr	r3, [pc, #60]	@ (80023d8 <StartTASK_ACC+0x6c>)
 800239c:	605a      	str	r2, [r3, #4]
	x_axes.AXIS_Z = pDataXYZ[2];
 800239e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80023a2:	461a      	mov	r2, r3
 80023a4:	4b0c      	ldr	r3, [pc, #48]	@ (80023d8 <StartTASK_ACC+0x6c>)
 80023a6:	609a      	str	r2, [r3, #8]

//
	Acc_Update(&x_axes, &g_axes, &m_axes);
 80023a8:	4a0c      	ldr	r2, [pc, #48]	@ (80023dc <StartTASK_ACC+0x70>)
 80023aa:	490d      	ldr	r1, [pc, #52]	@ (80023e0 <StartTASK_ACC+0x74>)
 80023ac:	480a      	ldr	r0, [pc, #40]	@ (80023d8 <StartTASK_ACC+0x6c>)
 80023ae:	f7ff f8a9 	bl	8001504 <Acc_Update>
//	sprintf(TxData, "(%d, %d, %d)", pDataXYZ[0], pDataXYZ[1], pDataXYZ[2]);
//	ret = WIFI_SendData(Socket, TxData, strlen(TxData), &Datalen, WIFI_WRITE_TIMEOUT);
    nextTimeTick = HAL_GetTick();
 80023b2:	f001 f9c9 	bl	8003748 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]
    while (nextTimeTick - curTimeTick <= delayTime)
 80023b8:	e002      	b.n	80023c0 <StartTASK_ACC+0x54>
    {
    	nextTimeTick = HAL_GetTick();
 80023ba:	f001 f9c5 	bl	8003748 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]
    while (nextTimeTick - curTimeTick <= delayTime)
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	1ad2      	subs	r2, r2, r3
 80023c6:	4b07      	ldr	r3, [pc, #28]	@ (80023e4 <StartTASK_ACC+0x78>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d9f5      	bls.n	80023ba <StartTASK_ACC+0x4e>
    }
    curTimeTick = HAL_GetTick();
 80023ce:	f001 f9bb 	bl	8003748 <HAL_GetTick>
 80023d2:	6178      	str	r0, [r7, #20]
  {
 80023d4:	e7d4      	b.n	8002380 <StartTASK_ACC+0x14>
 80023d6:	bf00      	nop
 80023d8:	20000280 	.word	0x20000280
 80023dc:	20000298 	.word	0x20000298
 80023e0:	2000028c 	.word	0x2000028c
 80023e4:	20000004 	.word	0x20000004

080023e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023ec:	b672      	cpsid	i
}
 80023ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <Error_Handler+0x8>

080023f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fa:	4b11      	ldr	r3, [pc, #68]	@ (8002440 <HAL_MspInit+0x4c>)
 80023fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023fe:	4a10      	ldr	r2, [pc, #64]	@ (8002440 <HAL_MspInit+0x4c>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	6613      	str	r3, [r2, #96]	@ 0x60
 8002406:	4b0e      	ldr	r3, [pc, #56]	@ (8002440 <HAL_MspInit+0x4c>)
 8002408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	4b0b      	ldr	r3, [pc, #44]	@ (8002440 <HAL_MspInit+0x4c>)
 8002414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002416:	4a0a      	ldr	r2, [pc, #40]	@ (8002440 <HAL_MspInit+0x4c>)
 8002418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800241c:	6593      	str	r3, [r2, #88]	@ 0x58
 800241e:	4b08      	ldr	r3, [pc, #32]	@ (8002440 <HAL_MspInit+0x4c>)
 8002420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	210f      	movs	r1, #15
 800242e:	f06f 0001 	mvn.w	r0, #1
 8002432:	f001 fa94 	bl	800395e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000

08002444 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b0ac      	sub	sp, #176	@ 0xb0
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	2288      	movs	r2, #136	@ 0x88
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f00a fef5 	bl	800d254 <memset>
  if(DFSDM1_Init == 0)
 800246a:	4b25      	ldr	r3, [pc, #148]	@ (8002500 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d142      	bne.n	80024f8 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002472:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002476:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002478:	2300      	movs	r3, #0
 800247a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800247e:	f107 0314 	add.w	r3, r7, #20
 8002482:	4618      	mov	r0, r3
 8002484:	f003 fdc2 	bl	800600c <HAL_RCCEx_PeriphCLKConfig>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800248e:	f7ff ffab 	bl	80023e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002492:	4b1c      	ldr	r3, [pc, #112]	@ (8002504 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002496:	4a1b      	ldr	r2, [pc, #108]	@ (8002504 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002498:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800249c:	6613      	str	r3, [r2, #96]	@ 0x60
 800249e:	4b19      	ldr	r3, [pc, #100]	@ (8002504 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80024a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024aa:	4b16      	ldr	r3, [pc, #88]	@ (8002504 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ae:	4a15      	ldr	r2, [pc, #84]	@ (8002504 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80024b0:	f043 0310 	orr.w	r3, r3, #16
 80024b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024b6:	4b13      	ldr	r3, [pc, #76]	@ (8002504 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80024c2:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80024c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ca:	2302      	movs	r3, #2
 80024cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80024dc:	2306      	movs	r3, #6
 80024de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024e2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80024e6:	4619      	mov	r1, r3
 80024e8:	4807      	ldr	r0, [pc, #28]	@ (8002508 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80024ea:	f001 fbd9 	bl	8003ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80024ee:	4b04      	ldr	r3, [pc, #16]	@ (8002500 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	3301      	adds	r3, #1
 80024f4:	4a02      	ldr	r2, [pc, #8]	@ (8002500 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80024f6:	6013      	str	r3, [r2, #0]
  }

}
 80024f8:	bf00      	nop
 80024fa:	37b0      	adds	r7, #176	@ 0xb0
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20001aa8 	.word	0x20001aa8
 8002504:	40021000 	.word	0x40021000
 8002508:	48001000 	.word	0x48001000

0800250c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b0ac      	sub	sp, #176	@ 0xb0
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002524:	f107 0314 	add.w	r3, r7, #20
 8002528:	2288      	movs	r2, #136	@ 0x88
 800252a:	2100      	movs	r1, #0
 800252c:	4618      	mov	r0, r3
 800252e:	f00a fe91 	bl	800d254 <memset>
  if(hi2c->Instance==I2C2)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a21      	ldr	r2, [pc, #132]	@ (80025bc <HAL_I2C_MspInit+0xb0>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d13b      	bne.n	80025b4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800253c:	2380      	movs	r3, #128	@ 0x80
 800253e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002540:	2300      	movs	r3, #0
 8002542:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	4618      	mov	r0, r3
 800254a:	f003 fd5f 	bl	800600c <HAL_RCCEx_PeriphCLKConfig>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002554:	f7ff ff48 	bl	80023e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002558:	4b19      	ldr	r3, [pc, #100]	@ (80025c0 <HAL_I2C_MspInit+0xb4>)
 800255a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800255c:	4a18      	ldr	r2, [pc, #96]	@ (80025c0 <HAL_I2C_MspInit+0xb4>)
 800255e:	f043 0302 	orr.w	r3, r3, #2
 8002562:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002564:	4b16      	ldr	r3, [pc, #88]	@ (80025c0 <HAL_I2C_MspInit+0xb4>)
 8002566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002570:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002574:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002578:	2312      	movs	r3, #18
 800257a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800257e:	2301      	movs	r3, #1
 8002580:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002584:	2303      	movs	r3, #3
 8002586:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800258a:	2304      	movs	r3, #4
 800258c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002590:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002594:	4619      	mov	r1, r3
 8002596:	480b      	ldr	r0, [pc, #44]	@ (80025c4 <HAL_I2C_MspInit+0xb8>)
 8002598:	f001 fb82 	bl	8003ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800259c:	4b08      	ldr	r3, [pc, #32]	@ (80025c0 <HAL_I2C_MspInit+0xb4>)
 800259e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a0:	4a07      	ldr	r2, [pc, #28]	@ (80025c0 <HAL_I2C_MspInit+0xb4>)
 80025a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80025a8:	4b05      	ldr	r3, [pc, #20]	@ (80025c0 <HAL_I2C_MspInit+0xb4>)
 80025aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80025b4:	bf00      	nop
 80025b6:	37b0      	adds	r7, #176	@ 0xb0
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40005800 	.word	0x40005800
 80025c0:	40021000 	.word	0x40021000
 80025c4:	48000400 	.word	0x48000400

080025c8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002604 <HAL_I2C_MspDeInit+0x3c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d10f      	bne.n	80025fa <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80025da:	4b0b      	ldr	r3, [pc, #44]	@ (8002608 <HAL_I2C_MspDeInit+0x40>)
 80025dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025de:	4a0a      	ldr	r2, [pc, #40]	@ (8002608 <HAL_I2C_MspDeInit+0x40>)
 80025e0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80025e4:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80025e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80025ea:	4808      	ldr	r0, [pc, #32]	@ (800260c <HAL_I2C_MspDeInit+0x44>)
 80025ec:	f001 fd02 	bl	8003ff4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80025f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80025f4:	4805      	ldr	r0, [pc, #20]	@ (800260c <HAL_I2C_MspDeInit+0x44>)
 80025f6:	f001 fcfd 	bl	8003ff4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40005800 	.word	0x40005800
 8002608:	40021000 	.word	0x40021000
 800260c:	48000400 	.word	0x48000400

08002610 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08a      	sub	sp, #40	@ 0x28
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a17      	ldr	r2, [pc, #92]	@ (800268c <HAL_QSPI_MspInit+0x7c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d128      	bne.n	8002684 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002632:	4b17      	ldr	r3, [pc, #92]	@ (8002690 <HAL_QSPI_MspInit+0x80>)
 8002634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002636:	4a16      	ldr	r2, [pc, #88]	@ (8002690 <HAL_QSPI_MspInit+0x80>)
 8002638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800263c:	6513      	str	r3, [r2, #80]	@ 0x50
 800263e:	4b14      	ldr	r3, [pc, #80]	@ (8002690 <HAL_QSPI_MspInit+0x80>)
 8002640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800264a:	4b11      	ldr	r3, [pc, #68]	@ (8002690 <HAL_QSPI_MspInit+0x80>)
 800264c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264e:	4a10      	ldr	r2, [pc, #64]	@ (8002690 <HAL_QSPI_MspInit+0x80>)
 8002650:	f043 0310 	orr.w	r3, r3, #16
 8002654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002656:	4b0e      	ldr	r3, [pc, #56]	@ (8002690 <HAL_QSPI_MspInit+0x80>)
 8002658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800265a:	f003 0310 	and.w	r3, r3, #16
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002662:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8002666:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002668:	2302      	movs	r3, #2
 800266a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002670:	2303      	movs	r3, #3
 8002672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002674:	230a      	movs	r3, #10
 8002676:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002678:	f107 0314 	add.w	r3, r7, #20
 800267c:	4619      	mov	r1, r3
 800267e:	4805      	ldr	r0, [pc, #20]	@ (8002694 <HAL_QSPI_MspInit+0x84>)
 8002680:	f001 fb0e 	bl	8003ca0 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002684:	bf00      	nop
 8002686:	3728      	adds	r7, #40	@ 0x28
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	a0001000 	.word	0xa0001000
 8002690:	40021000 	.word	0x40021000
 8002694:	48001000 	.word	0x48001000

08002698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b0ac      	sub	sp, #176	@ 0xb0
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	2288      	movs	r2, #136	@ 0x88
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f00a fdcb 	bl	800d254 <memset>
  if(huart->Instance==USART3)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a21      	ldr	r2, [pc, #132]	@ (8002748 <HAL_UART_MspInit+0xb0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d13b      	bne.n	8002740 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80026c8:	2304      	movs	r3, #4
 80026ca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80026cc:	2300      	movs	r3, #0
 80026ce:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	4618      	mov	r0, r3
 80026d6:	f003 fc99 	bl	800600c <HAL_RCCEx_PeriphCLKConfig>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026e0:	f7ff fe82 	bl	80023e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80026e4:	4b19      	ldr	r3, [pc, #100]	@ (800274c <HAL_UART_MspInit+0xb4>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e8:	4a18      	ldr	r2, [pc, #96]	@ (800274c <HAL_UART_MspInit+0xb4>)
 80026ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80026f0:	4b16      	ldr	r3, [pc, #88]	@ (800274c <HAL_UART_MspInit+0xb4>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026fc:	4b13      	ldr	r3, [pc, #76]	@ (800274c <HAL_UART_MspInit+0xb4>)
 80026fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002700:	4a12      	ldr	r2, [pc, #72]	@ (800274c <HAL_UART_MspInit+0xb4>)
 8002702:	f043 0308 	orr.w	r3, r3, #8
 8002706:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002708:	4b10      	ldr	r3, [pc, #64]	@ (800274c <HAL_UART_MspInit+0xb4>)
 800270a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002714:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002718:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271c:	2302      	movs	r3, #2
 800271e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002728:	2303      	movs	r3, #3
 800272a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800272e:	2307      	movs	r3, #7
 8002730:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002734:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002738:	4619      	mov	r1, r3
 800273a:	4805      	ldr	r0, [pc, #20]	@ (8002750 <HAL_UART_MspInit+0xb8>)
 800273c:	f001 fab0 	bl	8003ca0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002740:	bf00      	nop
 8002742:	37b0      	adds	r7, #176	@ 0xb0
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40004800 	.word	0x40004800
 800274c:	40021000 	.word	0x40021000
 8002750:	48000c00 	.word	0x48000c00

08002754 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b0ac      	sub	sp, #176	@ 0xb0
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800276c:	f107 0314 	add.w	r3, r7, #20
 8002770:	2288      	movs	r2, #136	@ 0x88
 8002772:	2100      	movs	r1, #0
 8002774:	4618      	mov	r0, r3
 8002776:	f00a fd6d 	bl	800d254 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002782:	d17c      	bne.n	800287e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002784:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002788:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800278a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800278e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002792:	2301      	movs	r3, #1
 8002794:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002796:	2301      	movs	r3, #1
 8002798:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800279a:	2318      	movs	r3, #24
 800279c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800279e:	2307      	movs	r3, #7
 80027a0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80027a2:	2302      	movs	r3, #2
 80027a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80027a6:	2302      	movs	r3, #2
 80027a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80027aa:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80027ae:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	4618      	mov	r0, r3
 80027b6:	f003 fc29 	bl	800600c <HAL_RCCEx_PeriphCLKConfig>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80027c0:	f7ff fe12 	bl	80023e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c4:	4b30      	ldr	r3, [pc, #192]	@ (8002888 <HAL_PCD_MspInit+0x134>)
 80027c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027c8:	4a2f      	ldr	r2, [pc, #188]	@ (8002888 <HAL_PCD_MspInit+0x134>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002888 <HAL_PCD_MspInit+0x134>)
 80027d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80027dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80027f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80027f4:	4619      	mov	r1, r3
 80027f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027fa:	f001 fa51 	bl	8003ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80027fe:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002802:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002806:	2302      	movs	r3, #2
 8002808:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002812:	2303      	movs	r3, #3
 8002814:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002818:	230a      	movs	r3, #10
 800281a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002822:	4619      	mov	r1, r3
 8002824:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002828:	f001 fa3a 	bl	8003ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800282c:	4b16      	ldr	r3, [pc, #88]	@ (8002888 <HAL_PCD_MspInit+0x134>)
 800282e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002830:	4a15      	ldr	r2, [pc, #84]	@ (8002888 <HAL_PCD_MspInit+0x134>)
 8002832:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002836:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002838:	4b13      	ldr	r3, [pc, #76]	@ (8002888 <HAL_PCD_MspInit+0x134>)
 800283a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800283c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002844:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <HAL_PCD_MspInit+0x134>)
 8002846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d114      	bne.n	800287a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002850:	4b0d      	ldr	r3, [pc, #52]	@ (8002888 <HAL_PCD_MspInit+0x134>)
 8002852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002854:	4a0c      	ldr	r2, [pc, #48]	@ (8002888 <HAL_PCD_MspInit+0x134>)
 8002856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800285a:	6593      	str	r3, [r2, #88]	@ 0x58
 800285c:	4b0a      	ldr	r3, [pc, #40]	@ (8002888 <HAL_PCD_MspInit+0x134>)
 800285e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002868:	f002 fd04 	bl	8005274 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800286c:	4b06      	ldr	r3, [pc, #24]	@ (8002888 <HAL_PCD_MspInit+0x134>)
 800286e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002870:	4a05      	ldr	r2, [pc, #20]	@ (8002888 <HAL_PCD_MspInit+0x134>)
 8002872:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002876:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002878:	e001      	b.n	800287e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800287a:	f002 fcfb 	bl	8005274 <HAL_PWREx_EnableVddUSB>
}
 800287e:	bf00      	nop
 8002880:	37b0      	adds	r7, #176	@ 0xb0
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40021000 	.word	0x40021000

0800288c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002890:	bf00      	nop
 8002892:	e7fd      	b.n	8002890 <NMI_Handler+0x4>

08002894 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002898:	bf00      	nop
 800289a:	e7fd      	b.n	8002898 <HardFault_Handler+0x4>

0800289c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028a0:	bf00      	nop
 80028a2:	e7fd      	b.n	80028a0 <MemManage_Handler+0x4>

080028a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028a8:	bf00      	nop
 80028aa:	e7fd      	b.n	80028a8 <BusFault_Handler+0x4>

080028ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028b0:	bf00      	nop
 80028b2:	e7fd      	b.n	80028b0 <UsageFault_Handler+0x4>

080028b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028c6:	f000 ff2b 	bl	8003720 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80028ca:	f008 fbb3 	bl	800b034 <xTaskGetSchedulerState>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d001      	beq.n	80028d8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80028d4:	f009 f9a8 	bl	800bc28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028d8:	bf00      	nop
 80028da:	bd80      	pop	{r7, pc}

080028dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80028e0:	2020      	movs	r0, #32
 80028e2:	f001 fcab 	bl	800423c <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 80028e6:	4806      	ldr	r0, [pc, #24]	@ (8002900 <EXTI9_5_IRQHandler+0x24>)
 80028e8:	f001 f9aa 	bl	8003c40 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80028ec:	2080      	movs	r0, #128	@ 0x80
 80028ee:	f001 fca5 	bl	800423c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80028f2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80028f6:	f001 fca1 	bl	800423c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	200002a4 	.word	0x200002a4

08002904 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002908:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800290c:	f001 fc96 	bl	800423c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002910:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002914:	f001 fc92 	bl	800423c <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8002918:	4806      	ldr	r0, [pc, #24]	@ (8002934 <EXTI15_10_IRQHandler+0x30>)
 800291a:	f001 f991 	bl	8003c40 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800291e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002922:	f001 fc8b 	bl	800423c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002926:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800292a:	f001 fc87 	bl	800423c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000010 	.word	0x20000010

08002938 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return 1;
 800293c:	2301      	movs	r3, #1
}
 800293e:	4618      	mov	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <_kill>:

int _kill(int pid, int sig)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002952:	f00a fcd1 	bl	800d2f8 <__errno>
 8002956:	4603      	mov	r3, r0
 8002958:	2216      	movs	r2, #22
 800295a:	601a      	str	r2, [r3, #0]
  return -1;
 800295c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002960:	4618      	mov	r0, r3
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <_exit>:

void _exit (int status)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002970:	f04f 31ff 	mov.w	r1, #4294967295
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff ffe7 	bl	8002948 <_kill>
  while (1) {}    /* Make sure we hang here */
 800297a:	bf00      	nop
 800297c:	e7fd      	b.n	800297a <_exit+0x12>

0800297e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b086      	sub	sp, #24
 8002982:	af00      	add	r7, sp, #0
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	e00a      	b.n	80029a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002990:	f3af 8000 	nop.w
 8002994:	4601      	mov	r1, r0
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	1c5a      	adds	r2, r3, #1
 800299a:	60ba      	str	r2, [r7, #8]
 800299c:	b2ca      	uxtb	r2, r1
 800299e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	3301      	adds	r3, #1
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	dbf0      	blt.n	8002990 <_read+0x12>
  }

  return len;
 80029ae:	687b      	ldr	r3, [r7, #4]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	e009      	b.n	80029de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	60ba      	str	r2, [r7, #8]
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fb78 	bl	80030c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	3301      	adds	r3, #1
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	dbf1      	blt.n	80029ca <_write+0x12>
  }
  return len;
 80029e6:	687b      	ldr	r3, [r7, #4]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <_close>:

int _close(int file)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a18:	605a      	str	r2, [r3, #4]
  return 0;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <_isatty>:

int _isatty(int file)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a30:	2301      	movs	r3, #1
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b085      	sub	sp, #20
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a60:	4a14      	ldr	r2, [pc, #80]	@ (8002ab4 <_sbrk+0x5c>)
 8002a62:	4b15      	ldr	r3, [pc, #84]	@ (8002ab8 <_sbrk+0x60>)
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a6c:	4b13      	ldr	r3, [pc, #76]	@ (8002abc <_sbrk+0x64>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d102      	bne.n	8002a7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a74:	4b11      	ldr	r3, [pc, #68]	@ (8002abc <_sbrk+0x64>)
 8002a76:	4a12      	ldr	r2, [pc, #72]	@ (8002ac0 <_sbrk+0x68>)
 8002a78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a7a:	4b10      	ldr	r3, [pc, #64]	@ (8002abc <_sbrk+0x64>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d207      	bcs.n	8002a98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a88:	f00a fc36 	bl	800d2f8 <__errno>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	220c      	movs	r2, #12
 8002a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a92:	f04f 33ff 	mov.w	r3, #4294967295
 8002a96:	e009      	b.n	8002aac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a98:	4b08      	ldr	r3, [pc, #32]	@ (8002abc <_sbrk+0x64>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a9e:	4b07      	ldr	r3, [pc, #28]	@ (8002abc <_sbrk+0x64>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	4a05      	ldr	r2, [pc, #20]	@ (8002abc <_sbrk+0x64>)
 8002aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20018000 	.word	0x20018000
 8002ab8:	00000400 	.word	0x00000400
 8002abc:	20001aac 	.word	0x20001aac
 8002ac0:	20003968 	.word	0x20003968

08002ac4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002ac8:	4b06      	ldr	r3, [pc, #24]	@ (8002ae4 <SystemInit+0x20>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ace:	4a05      	ldr	r2, [pc, #20]	@ (8002ae4 <SystemInit+0x20>)
 8002ad0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ad4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ae8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002aec:	f7ff ffea 	bl	8002ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002af0:	480c      	ldr	r0, [pc, #48]	@ (8002b24 <LoopForever+0x6>)
  ldr r1, =_edata
 8002af2:	490d      	ldr	r1, [pc, #52]	@ (8002b28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002af4:	4a0d      	ldr	r2, [pc, #52]	@ (8002b2c <LoopForever+0xe>)
  movs r3, #0
 8002af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002af8:	e002      	b.n	8002b00 <LoopCopyDataInit>

08002afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002afe:	3304      	adds	r3, #4

08002b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b04:	d3f9      	bcc.n	8002afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b06:	4a0a      	ldr	r2, [pc, #40]	@ (8002b30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b08:	4c0a      	ldr	r4, [pc, #40]	@ (8002b34 <LoopForever+0x16>)
  movs r3, #0
 8002b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b0c:	e001      	b.n	8002b12 <LoopFillZerobss>

08002b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b10:	3204      	adds	r2, #4

08002b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b14:	d3fb      	bcc.n	8002b0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b16:	f00a fbf5 	bl	800d304 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b1a:	f7ff f8e5 	bl	8001ce8 <main>

08002b1e <LoopForever>:

LoopForever:
    b LoopForever
 8002b1e:	e7fe      	b.n	8002b1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b28:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8002b2c:	08011234 	.word	0x08011234
  ldr r2, =_sbss
 8002b30:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8002b34:	20003964 	.word	0x20003964

08002b38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b38:	e7fe      	b.n	8002b38 <ADC1_2_IRQHandler>
	...

08002b3c <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	4a04      	ldr	r2, [pc, #16]	@ (8002b5c <BSP_LED_Init+0x20>)
 8002b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4e:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	08010de0 	.word	0x08010de0

08002b60 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b66:	4b1c      	ldr	r3, [pc, #112]	@ (8002bd8 <LED_USER_GPIO_Init+0x78>)
 8002b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8002bd8 <LED_USER_GPIO_Init+0x78>)
 8002b6c:	f043 0302 	orr.w	r3, r3, #2
 8002b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b72:	4b19      	ldr	r3, [pc, #100]	@ (8002bd8 <LED_USER_GPIO_Init+0x78>)
 8002b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	60bb      	str	r3, [r7, #8]
 8002b7c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7e:	f107 030c 	add.w	r3, r7, #12
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	605a      	str	r2, [r3, #4]
 8002b88:	609a      	str	r2, [r3, #8]
 8002b8a:	60da      	str	r2, [r3, #12]
 8002b8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b8e:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <LED_USER_GPIO_Init+0x78>)
 8002b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b92:	4a11      	ldr	r2, [pc, #68]	@ (8002bd8 <LED_USER_GPIO_Init+0x78>)
 8002b94:	f043 0302 	orr.w	r3, r3, #2
 8002b98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd8 <LED_USER_GPIO_Init+0x78>)
 8002b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	607b      	str	r3, [r7, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002bac:	480b      	ldr	r0, [pc, #44]	@ (8002bdc <LED_USER_GPIO_Init+0x7c>)
 8002bae:	f001 fb2d 	bl	800420c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8002bb2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002bb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8002bc4:	f107 030c 	add.w	r3, r7, #12
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4804      	ldr	r0, [pc, #16]	@ (8002bdc <LED_USER_GPIO_Init+0x7c>)
 8002bcc:	f001 f868 	bl	8003ca0 <HAL_GPIO_Init>

}
 8002bd0:	bf00      	nop
 8002bd2:	3720      	adds	r7, #32
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	48000400 	.word	0x48000400

08002be0 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	460a      	mov	r2, r1
 8002bea:	71fb      	strb	r3, [r7, #7]
 8002bec:	4613      	mov	r3, r2
 8002bee:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	4a1f      	ldr	r2, [pc, #124]	@ (8002c74 <BSP_PB_Init+0x94>)
 8002bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfc:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8002bfe:	79bb      	ldrb	r3, [r7, #6]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d132      	bne.n	8002c6a <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4a1b      	ldr	r2, [pc, #108]	@ (8002c78 <BSP_PB_Init+0x98>)
 8002c0a:	441a      	add	r2, r3
 8002c0c:	79fb      	ldrb	r3, [r7, #7]
 8002c0e:	491b      	ldr	r1, [pc, #108]	@ (8002c7c <BSP_PB_Init+0x9c>)
 8002c10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c14:	4619      	mov	r1, r3
 8002c16:	4610      	mov	r0, r2
 8002c18:	f000 fffe 	bl	8003c18 <HAL_EXTI_GetHandle>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002c22:	f06f 0303 	mvn.w	r3, #3
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	e01f      	b.n	8002c6a <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4a12      	ldr	r2, [pc, #72]	@ (8002c78 <BSP_PB_Init+0x98>)
 8002c30:	1898      	adds	r0, r3, r2
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	4a12      	ldr	r2, [pc, #72]	@ (8002c80 <BSP_PB_Init+0xa0>)
 8002c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	f000 ffd1 	bl	8003be4 <HAL_EXTI_RegisterCallback>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002c48:	f06f 0303 	mvn.w	r3, #3
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	e00c      	b.n	8002c6a <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002c50:	2028      	movs	r0, #40	@ 0x28
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	4a0b      	ldr	r2, [pc, #44]	@ (8002c84 <BSP_PB_Init+0xa4>)
 8002c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f000 fe7e 	bl	800395e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002c62:	2328      	movs	r3, #40	@ 0x28
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fe96 	bl	8003996 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	08010de4 	.word	0x08010de4
 8002c78:	20000010 	.word	0x20000010
 8002c7c:	08010de8 	.word	0x08010de8
 8002c80:	08010dec 	.word	0x08010dec
 8002c84:	08010df0 	.word	0x08010df0

08002c88 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	4a09      	ldr	r2, [pc, #36]	@ (8002cbc <BSP_PB_GetState+0x34>)
 8002c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f001 fa9b 	bl	80041dc <HAL_GPIO_ReadPin>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bf0c      	ite	eq
 8002cac:	2301      	moveq	r3, #1
 8002cae:	2300      	movne	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	2000000c 	.word	0x2000000c

08002cc0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	f7fe faab 	bl	8001220 <BSP_PB_Callback>
}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cd6:	4b19      	ldr	r3, [pc, #100]	@ (8002d3c <BUTTON_USER_GPIO_Init+0x6c>)
 8002cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cda:	4a18      	ldr	r2, [pc, #96]	@ (8002d3c <BUTTON_USER_GPIO_Init+0x6c>)
 8002cdc:	f043 0304 	orr.w	r3, r3, #4
 8002ce0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ce2:	4b16      	ldr	r3, [pc, #88]	@ (8002d3c <BUTTON_USER_GPIO_Init+0x6c>)
 8002ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cee:	f107 030c 	add.w	r3, r7, #12
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	605a      	str	r2, [r3, #4]
 8002cf8:	609a      	str	r2, [r3, #8]
 8002cfa:	60da      	str	r2, [r3, #12]
 8002cfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8002d3c <BUTTON_USER_GPIO_Init+0x6c>)
 8002d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d02:	4a0e      	ldr	r2, [pc, #56]	@ (8002d3c <BUTTON_USER_GPIO_Init+0x6c>)
 8002d04:	f043 0304 	orr.w	r3, r3, #4
 8002d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d3c <BUTTON_USER_GPIO_Init+0x6c>)
 8002d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	607b      	str	r3, [r7, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8002d16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d1c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002d20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8002d26:	f107 030c 	add.w	r3, r7, #12
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4804      	ldr	r0, [pc, #16]	@ (8002d40 <BUTTON_USER_GPIO_Init+0x70>)
 8002d2e:	f000 ffb7 	bl	8003ca0 <HAL_GPIO_Init>

}
 8002d32:	bf00      	nop
 8002d34:	3720      	adds	r7, #32
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	48000800 	.word	0x48000800

08002d44 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d903      	bls.n	8002d60 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002d58:	f06f 0301 	mvn.w	r3, #1
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	e025      	b.n	8002dac <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	79fa      	ldrb	r2, [r7, #7]
 8002d64:	4914      	ldr	r1, [pc, #80]	@ (8002db8 <BSP_COM_Init+0x74>)
 8002d66:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002d6a:	4814      	ldr	r0, [pc, #80]	@ (8002dbc <BSP_COM_Init+0x78>)
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	4413      	add	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4403      	add	r3, r0
 8002d76:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8002d78:	79fa      	ldrb	r2, [r7, #7]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	4413      	add	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	4a0e      	ldr	r2, [pc, #56]	@ (8002dbc <BSP_COM_Init+0x78>)
 8002d84:	4413      	add	r3, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 f9ba 	bl	8003100 <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8002d8c:	79fa      	ldrb	r2, [r7, #7]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	4413      	add	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	4a09      	ldr	r2, [pc, #36]	@ (8002dbc <BSP_COM_Init+0x78>)
 8002d98:	4413      	add	r3, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 f960 	bl	8003060 <MX_USART1_UART_Init>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002da6:	f06f 0303 	mvn.w	r3, #3
 8002daa:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002dac:	68fb      	ldr	r3, [r7, #12]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000018 	.word	0x20000018
 8002dbc:	20001ab0 	.word	0x20001ab0

08002dc0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08a      	sub	sp, #40	@ 0x28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002dc8:	4b27      	ldr	r3, [pc, #156]	@ (8002e68 <I2Cx_MspInit+0xa8>)
 8002dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dcc:	4a26      	ldr	r2, [pc, #152]	@ (8002e68 <I2Cx_MspInit+0xa8>)
 8002dce:	f043 0302 	orr.w	r3, r3, #2
 8002dd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dd4:	4b24      	ldr	r3, [pc, #144]	@ (8002e68 <I2Cx_MspInit+0xa8>)
 8002dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002de0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002de4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002de6:	2312      	movs	r3, #18
 8002de8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002dea:	2301      	movs	r3, #1
 8002dec:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dee:	2303      	movs	r3, #3
 8002df0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002df2:	2304      	movs	r3, #4
 8002df4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002df6:	f107 0314 	add.w	r3, r7, #20
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	481b      	ldr	r0, [pc, #108]	@ (8002e6c <I2Cx_MspInit+0xac>)
 8002dfe:	f000 ff4f 	bl	8003ca0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002e02:	f107 0314 	add.w	r3, r7, #20
 8002e06:	4619      	mov	r1, r3
 8002e08:	4818      	ldr	r0, [pc, #96]	@ (8002e6c <I2Cx_MspInit+0xac>)
 8002e0a:	f000 ff49 	bl	8003ca0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002e0e:	4b16      	ldr	r3, [pc, #88]	@ (8002e68 <I2Cx_MspInit+0xa8>)
 8002e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e12:	4a15      	ldr	r2, [pc, #84]	@ (8002e68 <I2Cx_MspInit+0xa8>)
 8002e14:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e18:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e1a:	4b13      	ldr	r3, [pc, #76]	@ (8002e68 <I2Cx_MspInit+0xa8>)
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002e26:	4b10      	ldr	r3, [pc, #64]	@ (8002e68 <I2Cx_MspInit+0xa8>)
 8002e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e2a:	4a0f      	ldr	r2, [pc, #60]	@ (8002e68 <I2Cx_MspInit+0xa8>)
 8002e2c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e30:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002e32:	4b0d      	ldr	r3, [pc, #52]	@ (8002e68 <I2Cx_MspInit+0xa8>)
 8002e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e36:	4a0c      	ldr	r2, [pc, #48]	@ (8002e68 <I2Cx_MspInit+0xa8>)
 8002e38:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002e3c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002e3e:	2200      	movs	r2, #0
 8002e40:	210f      	movs	r1, #15
 8002e42:	2021      	movs	r0, #33	@ 0x21
 8002e44:	f000 fd8b 	bl	800395e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002e48:	2021      	movs	r0, #33	@ 0x21
 8002e4a:	f000 fda4 	bl	8003996 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	210f      	movs	r1, #15
 8002e52:	2022      	movs	r0, #34	@ 0x22
 8002e54:	f000 fd83 	bl	800395e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002e58:	2022      	movs	r0, #34	@ 0x22
 8002e5a:	f000 fd9c 	bl	8003996 <HAL_NVIC_EnableIRQ>
}
 8002e5e:	bf00      	nop
 8002e60:	3728      	adds	r7, #40	@ 0x28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	48000400 	.word	0x48000400

08002e70 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a12      	ldr	r2, [pc, #72]	@ (8002ec4 <I2Cx_Init+0x54>)
 8002e7c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a11      	ldr	r2, [pc, #68]	@ (8002ec8 <I2Cx_Init+0x58>)
 8002e82:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7ff ff89 	bl	8002dc0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f001 f9e7 	bl	8004282 <HAL_I2C_Init>

  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f001 ff9e 	bl	8004df8 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40005800 	.word	0x40005800
 8002ec8:	00702681 	.word	0x00702681

08002ecc <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08a      	sub	sp, #40	@ 0x28
 8002ed0:	af04      	add	r7, sp, #16
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	4608      	mov	r0, r1
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4603      	mov	r3, r0
 8002edc:	72fb      	strb	r3, [r7, #11]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	813b      	strh	r3, [r7, #8]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002eea:	7afb      	ldrb	r3, [r7, #11]
 8002eec:	b299      	uxth	r1, r3
 8002eee:	88f8      	ldrh	r0, [r7, #6]
 8002ef0:	893a      	ldrh	r2, [r7, #8]
 8002ef2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ef6:	9302      	str	r3, [sp, #8]
 8002ef8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002efa:	9301      	str	r3, [sp, #4]
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	4603      	mov	r3, r0
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f001 fb9c 	bl	8004640 <HAL_I2C_Mem_Read>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d004      	beq.n	8002f1c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002f12:	7afb      	ldrb	r3, [r7, #11]
 8002f14:	4619      	mov	r1, r3
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f832 	bl	8002f80 <I2Cx_Error>
  }
  return status;
 8002f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b08a      	sub	sp, #40	@ 0x28
 8002f2a:	af04      	add	r7, sp, #16
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	4608      	mov	r0, r1
 8002f30:	4611      	mov	r1, r2
 8002f32:	461a      	mov	r2, r3
 8002f34:	4603      	mov	r3, r0
 8002f36:	72fb      	strb	r3, [r7, #11]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	813b      	strh	r3, [r7, #8]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002f44:	7afb      	ldrb	r3, [r7, #11]
 8002f46:	b299      	uxth	r1, r3
 8002f48:	88f8      	ldrh	r0, [r7, #6]
 8002f4a:	893a      	ldrh	r2, [r7, #8]
 8002f4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f50:	9302      	str	r3, [sp, #8]
 8002f52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002f54:	9301      	str	r3, [sp, #4]
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f001 fa5b 	bl	8004418 <HAL_I2C_Mem_Write>
 8002f62:	4603      	mov	r3, r0
 8002f64:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002f66:	7dfb      	ldrb	r3, [r7, #23]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d004      	beq.n	8002f76 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002f6c:	7afb      	ldrb	r3, [r7, #11]
 8002f6e:	4619      	mov	r1, r3
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f805 	bl	8002f80 <I2Cx_Error>
  }
  return status;
 8002f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f001 fa13 	bl	80043b8 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff ff6c 	bl	8002e70 <I2Cx_Init>
}
 8002f98:	bf00      	nop
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002fa4:	4802      	ldr	r0, [pc, #8]	@ (8002fb0 <SENSOR_IO_Init+0x10>)
 8002fa6:	f7ff ff63 	bl	8002e70 <I2Cx_Init>
}
 8002faa:	bf00      	nop
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20001b3c 	.word	0x20001b3c

08002fb4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	4603      	mov	r3, r0
 8002fbc:	71fb      	strb	r3, [r7, #7]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	71bb      	strb	r3, [r7, #6]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002fc6:	79bb      	ldrb	r3, [r7, #6]
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	79f9      	ldrb	r1, [r7, #7]
 8002fcc:	2301      	movs	r3, #1
 8002fce:	9301      	str	r3, [sp, #4]
 8002fd0:	1d7b      	adds	r3, r7, #5
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	4803      	ldr	r0, [pc, #12]	@ (8002fe4 <SENSOR_IO_Write+0x30>)
 8002fd8:	f7ff ffa5 	bl	8002f26 <I2Cx_WriteMultiple>
}
 8002fdc:	bf00      	nop
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20001b3c 	.word	0x20001b3c

08002fe8 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	4603      	mov	r3, r0
 8002ff0:	460a      	mov	r2, r1
 8002ff2:	71fb      	strb	r3, [r7, #7]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002ffc:	79bb      	ldrb	r3, [r7, #6]
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	79f9      	ldrb	r1, [r7, #7]
 8003002:	2301      	movs	r3, #1
 8003004:	9301      	str	r3, [sp, #4]
 8003006:	f107 030f 	add.w	r3, r7, #15
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	2301      	movs	r3, #1
 800300e:	4804      	ldr	r0, [pc, #16]	@ (8003020 <SENSOR_IO_Read+0x38>)
 8003010:	f7ff ff5c 	bl	8002ecc <I2Cx_ReadMultiple>

  return read_value;
 8003014:	7bfb      	ldrb	r3, [r7, #15]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20001b3c 	.word	0x20001b3c

08003024 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af02      	add	r7, sp, #8
 800302a:	603a      	str	r2, [r7, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	4603      	mov	r3, r0
 8003030:	71fb      	strb	r3, [r7, #7]
 8003032:	460b      	mov	r3, r1
 8003034:	71bb      	strb	r3, [r7, #6]
 8003036:	4613      	mov	r3, r2
 8003038:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800303a:	79bb      	ldrb	r3, [r7, #6]
 800303c:	b29a      	uxth	r2, r3
 800303e:	79f9      	ldrb	r1, [r7, #7]
 8003040:	88bb      	ldrh	r3, [r7, #4]
 8003042:	9301      	str	r3, [sp, #4]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	2301      	movs	r3, #1
 800304a:	4804      	ldr	r0, [pc, #16]	@ (800305c <SENSOR_IO_ReadMultiple+0x38>)
 800304c:	f7ff ff3e 	bl	8002ecc <I2Cx_ReadMultiple>
 8003050:	4603      	mov	r3, r0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20001b3c 	.word	0x20001b3c

08003060 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a15      	ldr	r2, [pc, #84]	@ (80030c4 <MX_USART1_UART_Init+0x64>)
 8003070:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003078:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	220c      	movs	r2, #12
 8003090:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f004 f8b8 	bl	8007220 <HAL_UART_Init>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <MX_USART1_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40013800 	.word	0x40013800

080030c8 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80030d0:	4b09      	ldr	r3, [pc, #36]	@ (80030f8 <__io_putchar+0x30>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	4613      	mov	r3, r2
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	4413      	add	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4a07      	ldr	r2, [pc, #28]	@ (80030fc <__io_putchar+0x34>)
 80030e0:	1898      	adds	r0, r3, r2
 80030e2:	1d39      	adds	r1, r7, #4
 80030e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030e8:	2201      	movs	r2, #1
 80030ea:	f004 f8e7 	bl	80072bc <HAL_UART_Transmit>
  return ch;
 80030ee:	687b      	ldr	r3, [r7, #4]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	20001b38 	.word	0x20001b38
 80030fc:	20001ab0 	.word	0x20001ab0

08003100 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b0ac      	sub	sp, #176	@ 0xb0
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003108:	f107 0314 	add.w	r3, r7, #20
 800310c:	2288      	movs	r2, #136	@ 0x88
 800310e:	2100      	movs	r1, #0
 8003110:	4618      	mov	r0, r3
 8003112:	f00a f89f 	bl	800d254 <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003116:	2301      	movs	r3, #1
 8003118:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800311a:	2300      	movs	r3, #0
 800311c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800311e:	f107 0314 	add.w	r3, r7, #20
 8003122:	4618      	mov	r0, r3
 8003124:	f002 ff72 	bl	800600c <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003128:	4b22      	ldr	r3, [pc, #136]	@ (80031b4 <USART1_MspInit+0xb4>)
 800312a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800312c:	4a21      	ldr	r2, [pc, #132]	@ (80031b4 <USART1_MspInit+0xb4>)
 800312e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003132:	6613      	str	r3, [r2, #96]	@ 0x60
 8003134:	4b1f      	ldr	r3, [pc, #124]	@ (80031b4 <USART1_MspInit+0xb4>)
 8003136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003138:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003140:	4b1c      	ldr	r3, [pc, #112]	@ (80031b4 <USART1_MspInit+0xb4>)
 8003142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003144:	4a1b      	ldr	r2, [pc, #108]	@ (80031b4 <USART1_MspInit+0xb4>)
 8003146:	f043 0302 	orr.w	r3, r3, #2
 800314a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800314c:	4b19      	ldr	r3, [pc, #100]	@ (80031b4 <USART1_MspInit+0xb4>)
 800314e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8003158:	2340      	movs	r3, #64	@ 0x40
 800315a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315e:	2302      	movs	r3, #2
 8003160:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003164:	2300      	movs	r3, #0
 8003166:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800316a:	2303      	movs	r3, #3
 800316c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 8003170:	2307      	movs	r3, #7
 8003172:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8003176:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800317a:	4619      	mov	r1, r3
 800317c:	480e      	ldr	r0, [pc, #56]	@ (80031b8 <USART1_MspInit+0xb8>)
 800317e:	f000 fd8f 	bl	8003ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 8003182:	2380      	movs	r3, #128	@ 0x80
 8003184:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003188:	2302      	movs	r3, #2
 800318a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318e:	2300      	movs	r3, #0
 8003190:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003194:	2303      	movs	r3, #3
 8003196:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 800319a:	2307      	movs	r3, #7
 800319c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 80031a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80031a4:	4619      	mov	r1, r3
 80031a6:	4804      	ldr	r0, [pc, #16]	@ (80031b8 <USART1_MspInit+0xb8>)
 80031a8:	f000 fd7a 	bl	8003ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 80031ac:	bf00      	nop
 80031ae:	37b0      	adds	r7, #176	@ 0xb0
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40021000 	.word	0x40021000
 80031b8:	48000400 	.word	0x48000400

080031bc <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80031c2:	2300      	movs	r3, #0
 80031c4:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 80031c6:	4b12      	ldr	r3, [pc, #72]	@ (8003210 <BSP_SPI3_Init+0x54>)
 80031c8:	4a12      	ldr	r2, [pc, #72]	@ (8003214 <BSP_SPI3_Init+0x58>)
 80031ca:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 80031cc:	4b12      	ldr	r3, [pc, #72]	@ (8003218 <BSP_SPI3_Init+0x5c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	4911      	ldr	r1, [pc, #68]	@ (8003218 <BSP_SPI3_Init+0x5c>)
 80031d4:	600a      	str	r2, [r1, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d114      	bne.n	8003204 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 80031da:	480d      	ldr	r0, [pc, #52]	@ (8003210 <BSP_SPI3_Init+0x54>)
 80031dc:	f003 feae 	bl	8006f3c <HAL_SPI_GetState>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10e      	bne.n	8003204 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 80031e6:	480a      	ldr	r0, [pc, #40]	@ (8003210 <BSP_SPI3_Init+0x54>)
 80031e8:	f000 f882 	bl	80032f0 <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d108      	bne.n	8003204 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 80031f2:	4807      	ldr	r0, [pc, #28]	@ (8003210 <BSP_SPI3_Init+0x54>)
 80031f4:	f000 f83a 	bl	800326c <MX_SPI3_Init>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 80031fe:	f06f 0307 	mvn.w	r3, #7
 8003202:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8003204:	687b      	ldr	r3, [r7, #4]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20001b90 	.word	0x20001b90
 8003214:	40003c00 	.word	0x40003c00
 8003218:	20001bf4 	.word	0x20001bf4

0800321c <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af02      	add	r7, sp, #8
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	4613      	mov	r3, r2
 8003228:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003234:	9200      	str	r2, [sp, #0]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	68f9      	ldr	r1, [r7, #12]
 800323a:	4807      	ldr	r0, [pc, #28]	@ (8003258 <BSP_SPI3_SendRecv+0x3c>)
 800323c:	f003 fc5f 	bl	8006afe <HAL_SPI_TransmitReceive>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8003246:	f06f 0305 	mvn.w	r3, #5
 800324a:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800324c:	697b      	ldr	r3, [r7, #20]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20001b90 	.word	0x20001b90

0800325c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003260:	f000 fa72 	bl	8003748 <HAL_GetTick>
 8003264:	4603      	mov	r3, r0
}
 8003266:	4618      	mov	r0, r3
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a1c      	ldr	r2, [pc, #112]	@ (80032ec <MX_SPI3_Init+0x80>)
 800327c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003284:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003292:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032a6:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2207      	movs	r2, #7
 80032c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2208      	movs	r2, #8
 80032d0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f003 fb66 	bl	80069a4 <HAL_SPI_Init>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40003c00 	.word	0x40003c00

080032f0 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	@ 0x28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80032f8:	4b27      	ldr	r3, [pc, #156]	@ (8003398 <SPI3_MspInit+0xa8>)
 80032fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fc:	4a26      	ldr	r2, [pc, #152]	@ (8003398 <SPI3_MspInit+0xa8>)
 80032fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003302:	6593      	str	r3, [r2, #88]	@ 0x58
 8003304:	4b24      	ldr	r3, [pc, #144]	@ (8003398 <SPI3_MspInit+0xa8>)
 8003306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003308:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003310:	4b21      	ldr	r3, [pc, #132]	@ (8003398 <SPI3_MspInit+0xa8>)
 8003312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003314:	4a20      	ldr	r2, [pc, #128]	@ (8003398 <SPI3_MspInit+0xa8>)
 8003316:	f043 0304 	orr.w	r3, r3, #4
 800331a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800331c:	4b1e      	ldr	r3, [pc, #120]	@ (8003398 <SPI3_MspInit+0xa8>)
 800331e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 8003328:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800332c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332e:	2302      	movs	r3, #2
 8003330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	2300      	movs	r3, #0
 8003334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003336:	2303      	movs	r3, #3
 8003338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 800333a:	2306      	movs	r3, #6
 800333c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 800333e:	f107 0314 	add.w	r3, r7, #20
 8003342:	4619      	mov	r1, r3
 8003344:	4815      	ldr	r0, [pc, #84]	@ (800339c <SPI3_MspInit+0xac>)
 8003346:	f000 fcab 	bl	8003ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 800334a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800334e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003350:	2302      	movs	r3, #2
 8003352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003354:	2300      	movs	r3, #0
 8003356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003358:	2303      	movs	r3, #3
 800335a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 800335c:	2306      	movs	r3, #6
 800335e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003360:	f107 0314 	add.w	r3, r7, #20
 8003364:	4619      	mov	r1, r3
 8003366:	480d      	ldr	r0, [pc, #52]	@ (800339c <SPI3_MspInit+0xac>)
 8003368:	f000 fc9a 	bl	8003ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 800336c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003372:	2302      	movs	r3, #2
 8003374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	2300      	movs	r3, #0
 8003378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800337a:	2303      	movs	r3, #3
 800337c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 800337e:	2306      	movs	r3, #6
 8003380:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003382:	f107 0314 	add.w	r3, r7, #20
 8003386:	4619      	mov	r1, r3
 8003388:	4804      	ldr	r0, [pc, #16]	@ (800339c <SPI3_MspInit+0xac>)
 800338a:	f000 fc89 	bl	8003ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 800338e:	bf00      	nop
 8003390:	3728      	adds	r7, #40	@ 0x28
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40021000 	.word	0x40021000
 800339c:	48000800 	.word	0x48000800

080033a0 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80033aa:	2300      	movs	r3, #0
 80033ac:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80033ae:	4b19      	ldr	r3, [pc, #100]	@ (8003414 <BSP_ACCELERO_Init+0x74>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	4798      	blx	r3
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b6a      	cmp	r3, #106	@ 0x6a
 80033b8:	d002      	beq.n	80033c0 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	73fb      	strb	r3, [r7, #15]
 80033be:	e024      	b.n	800340a <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80033c0:	4b15      	ldr	r3, [pc, #84]	@ (8003418 <BSP_ACCELERO_Init+0x78>)
 80033c2:	4a14      	ldr	r2, [pc, #80]	@ (8003414 <BSP_ACCELERO_Init+0x74>)
 80033c4:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80033c6:	2330      	movs	r3, #48	@ 0x30
 80033c8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80033ce:	2300      	movs	r3, #0
 80033d0:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80033d2:	2340      	movs	r3, #64	@ 0x40
 80033d4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80033d6:	2300      	movs	r3, #0
 80033d8:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80033da:	2300      	movs	r3, #0
 80033dc:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80033de:	797a      	ldrb	r2, [r7, #5]
 80033e0:	7abb      	ldrb	r3, [r7, #10]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80033e8:	7a3b      	ldrb	r3, [r7, #8]
 80033ea:	f043 0304 	orr.w	r3, r3, #4
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	021b      	lsls	r3, r3, #8
 80033f2:	b21a      	sxth	r2, r3
 80033f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	b21b      	sxth	r3, r3
 80033fc:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80033fe:	4b06      	ldr	r3, [pc, #24]	@ (8003418 <BSP_ACCELERO_Init+0x78>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	89ba      	ldrh	r2, [r7, #12]
 8003406:	4610      	mov	r0, r2
 8003408:	4798      	blx	r3
  }  

  return ret;
 800340a:	7bfb      	ldrb	r3, [r7, #15]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	2000001c 	.word	0x2000001c
 8003418:	20001bf8 	.word	0x20001bf8

0800341c <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8003424:	4b08      	ldr	r3, [pc, #32]	@ (8003448 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d009      	beq.n	8003440 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800342c:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003432:	2b00      	cmp	r3, #0
 8003434:	d004      	beq.n	8003440 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8003436:	4b04      	ldr	r3, [pc, #16]	@ (8003448 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4798      	blx	r3
    }
  }
}
 8003440:	bf00      	nop
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	20001bf8 	.word	0x20001bf8

0800344c <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003456:	2300      	movs	r3, #0
 8003458:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800345a:	2110      	movs	r1, #16
 800345c:	20d4      	movs	r0, #212	@ 0xd4
 800345e:	f7ff fdc3 	bl	8002fe8 <SENSOR_IO_Read>
 8003462:	4603      	mov	r3, r0
 8003464:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8003466:	88fb      	ldrh	r3, [r7, #6]
 8003468:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800346a:	7bbb      	ldrb	r3, [r7, #14]
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003472:	7bba      	ldrb	r2, [r7, #14]
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	4313      	orrs	r3, r2
 8003478:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800347a:	7bbb      	ldrb	r3, [r7, #14]
 800347c:	461a      	mov	r2, r3
 800347e:	2110      	movs	r1, #16
 8003480:	20d4      	movs	r0, #212	@ 0xd4
 8003482:	f7ff fd97 	bl	8002fb4 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003486:	2112      	movs	r1, #18
 8003488:	20d4      	movs	r0, #212	@ 0xd4
 800348a:	f7ff fdad 	bl	8002fe8 <SENSOR_IO_Read>
 800348e:	4603      	mov	r3, r0
 8003490:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	0a1b      	lsrs	r3, r3, #8
 8003496:	b29b      	uxth	r3, r3
 8003498:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800349a:	7bbb      	ldrb	r3, [r7, #14]
 800349c:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 80034a0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80034a2:	7bba      	ldrb	r2, [r7, #14]
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80034aa:	7bbb      	ldrb	r3, [r7, #14]
 80034ac:	461a      	mov	r2, r3
 80034ae:	2112      	movs	r1, #18
 80034b0:	20d4      	movs	r0, #212	@ 0xd4
 80034b2:	f7ff fd7f 	bl	8002fb4 <SENSOR_IO_Write>
}
 80034b6:	bf00      	nop
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b082      	sub	sp, #8
 80034c2:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80034c4:	2300      	movs	r3, #0
 80034c6:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80034c8:	2110      	movs	r1, #16
 80034ca:	20d4      	movs	r0, #212	@ 0xd4
 80034cc:	f7ff fd8c 	bl	8002fe8 <SENSOR_IO_Read>
 80034d0:	4603      	mov	r3, r0
 80034d2:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	461a      	mov	r2, r3
 80034e0:	2110      	movs	r1, #16
 80034e2:	20d4      	movs	r0, #212	@ 0xd4
 80034e4:	f7ff fd66 	bl	8002fb4 <SENSOR_IO_Write>
}
 80034e8:	bf00      	nop
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80034f4:	f7ff fd54 	bl	8002fa0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80034f8:	210f      	movs	r1, #15
 80034fa:	20d4      	movs	r0, #212	@ 0xd4
 80034fc:	f7ff fd74 	bl	8002fe8 <SENSOR_IO_Read>
 8003500:	4603      	mov	r3, r0
}
 8003502:	4618      	mov	r0, r3
 8003504:	bd80      	pop	{r7, pc}

08003506 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b084      	sub	sp, #16
 800350a:	af00      	add	r7, sp, #0
 800350c:	4603      	mov	r3, r0
 800350e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003510:	2300      	movs	r3, #0
 8003512:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8003514:	2115      	movs	r1, #21
 8003516:	20d4      	movs	r0, #212	@ 0xd4
 8003518:	f7ff fd66 	bl	8002fe8 <SENSOR_IO_Read>
 800351c:	4603      	mov	r3, r0
 800351e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	f023 0310 	bic.w	r3, r3, #16
 8003526:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003528:	88fb      	ldrh	r3, [r7, #6]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800352e:	7bfb      	ldrb	r3, [r7, #15]
 8003530:	f043 0310 	orr.w	r3, r3, #16
 8003534:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	461a      	mov	r2, r3
 800353a:	2115      	movs	r1, #21
 800353c:	20d4      	movs	r0, #212	@ 0xd4
 800353e:	f7ff fd39 	bl	8002fb4 <SENSOR_IO_Write>
}
 8003542:	bf00      	nop
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b088      	sub	sp, #32
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8003554:	2300      	movs	r3, #0
 8003556:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003562:	2110      	movs	r1, #16
 8003564:	20d4      	movs	r0, #212	@ 0xd4
 8003566:	f7ff fd3f 	bl	8002fe8 <SENSOR_IO_Read>
 800356a:	4603      	mov	r3, r0
 800356c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800356e:	f107 0208 	add.w	r2, r7, #8
 8003572:	2306      	movs	r3, #6
 8003574:	2128      	movs	r1, #40	@ 0x28
 8003576:	20d4      	movs	r0, #212	@ 0xd4
 8003578:	f7ff fd54 	bl	8003024 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800357c:	2300      	movs	r3, #0
 800357e:	77fb      	strb	r3, [r7, #31]
 8003580:	e01a      	b.n	80035b8 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003582:	7ffb      	ldrb	r3, [r7, #31]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	3301      	adds	r3, #1
 8003588:	3320      	adds	r3, #32
 800358a:	443b      	add	r3, r7
 800358c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003590:	021b      	lsls	r3, r3, #8
 8003592:	b29b      	uxth	r3, r3
 8003594:	7ffa      	ldrb	r2, [r7, #31]
 8003596:	0052      	lsls	r2, r2, #1
 8003598:	3220      	adds	r2, #32
 800359a:	443a      	add	r2, r7
 800359c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80035a0:	4413      	add	r3, r2
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	7ffb      	ldrb	r3, [r7, #31]
 80035a6:	b212      	sxth	r2, r2
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	3320      	adds	r3, #32
 80035ac:	443b      	add	r3, r7
 80035ae:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80035b2:	7ffb      	ldrb	r3, [r7, #31]
 80035b4:	3301      	adds	r3, #1
 80035b6:	77fb      	strb	r3, [r7, #31]
 80035b8:	7ffb      	ldrb	r3, [r7, #31]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d9e1      	bls.n	8003582 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80035be:	7dfb      	ldrb	r3, [r7, #23]
 80035c0:	f003 030c 	and.w	r3, r3, #12
 80035c4:	2b0c      	cmp	r3, #12
 80035c6:	d829      	bhi.n	800361c <LSM6DSL_AccReadXYZ+0xd0>
 80035c8:	a201      	add	r2, pc, #4	@ (adr r2, 80035d0 <LSM6DSL_AccReadXYZ+0x84>)
 80035ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ce:	bf00      	nop
 80035d0:	08003605 	.word	0x08003605
 80035d4:	0800361d 	.word	0x0800361d
 80035d8:	0800361d 	.word	0x0800361d
 80035dc:	0800361d 	.word	0x0800361d
 80035e0:	08003617 	.word	0x08003617
 80035e4:	0800361d 	.word	0x0800361d
 80035e8:	0800361d 	.word	0x0800361d
 80035ec:	0800361d 	.word	0x0800361d
 80035f0:	0800360b 	.word	0x0800360b
 80035f4:	0800361d 	.word	0x0800361d
 80035f8:	0800361d 	.word	0x0800361d
 80035fc:	0800361d 	.word	0x0800361d
 8003600:	08003611 	.word	0x08003611
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8003604:	4b18      	ldr	r3, [pc, #96]	@ (8003668 <LSM6DSL_AccReadXYZ+0x11c>)
 8003606:	61bb      	str	r3, [r7, #24]
    break;
 8003608:	e008      	b.n	800361c <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800360a:	4b18      	ldr	r3, [pc, #96]	@ (800366c <LSM6DSL_AccReadXYZ+0x120>)
 800360c:	61bb      	str	r3, [r7, #24]
    break;
 800360e:	e005      	b.n	800361c <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8003610:	4b17      	ldr	r3, [pc, #92]	@ (8003670 <LSM6DSL_AccReadXYZ+0x124>)
 8003612:	61bb      	str	r3, [r7, #24]
    break;
 8003614:	e002      	b.n	800361c <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8003616:	4b17      	ldr	r3, [pc, #92]	@ (8003674 <LSM6DSL_AccReadXYZ+0x128>)
 8003618:	61bb      	str	r3, [r7, #24]
    break;    
 800361a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800361c:	2300      	movs	r3, #0
 800361e:	77fb      	strb	r3, [r7, #31]
 8003620:	e01a      	b.n	8003658 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8003622:	7ffb      	ldrb	r3, [r7, #31]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	3320      	adds	r3, #32
 8003628:	443b      	add	r3, r7
 800362a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800362e:	ee07 3a90 	vmov	s15, r3
 8003632:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003636:	edd7 7a06 	vldr	s15, [r7, #24]
 800363a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800363e:	7ffb      	ldrb	r3, [r7, #31]
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	4413      	add	r3, r2
 8003646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800364a:	ee17 2a90 	vmov	r2, s15
 800364e:	b212      	sxth	r2, r2
 8003650:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003652:	7ffb      	ldrb	r3, [r7, #31]
 8003654:	3301      	adds	r3, #1
 8003656:	77fb      	strb	r3, [r7, #31]
 8003658:	7ffb      	ldrb	r3, [r7, #31]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d9e1      	bls.n	8003622 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 800365e:	bf00      	nop
 8003660:	bf00      	nop
 8003662:	3720      	adds	r7, #32
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	3d79db23 	.word	0x3d79db23
 800366c:	3df9db23 	.word	0x3df9db23
 8003670:	3e79db23 	.word	0x3e79db23
 8003674:	3ef9db23 	.word	0x3ef9db23

08003678 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003682:	2003      	movs	r0, #3
 8003684:	f000 f960 	bl	8003948 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003688:	200f      	movs	r0, #15
 800368a:	f000 f80d 	bl	80036a8 <HAL_InitTick>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	71fb      	strb	r3, [r7, #7]
 8003698:	e001      	b.n	800369e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800369a:	f7fe feab 	bl	80023f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800369e:	79fb      	ldrb	r3, [r7, #7]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80036b4:	4b17      	ldr	r3, [pc, #92]	@ (8003714 <HAL_InitTick+0x6c>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d023      	beq.n	8003704 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80036bc:	4b16      	ldr	r3, [pc, #88]	@ (8003718 <HAL_InitTick+0x70>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	4b14      	ldr	r3, [pc, #80]	@ (8003714 <HAL_InitTick+0x6c>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	4619      	mov	r1, r3
 80036c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80036ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 f96d 	bl	80039b2 <HAL_SYSTICK_Config>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10f      	bne.n	80036fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b0f      	cmp	r3, #15
 80036e2:	d809      	bhi.n	80036f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036e4:	2200      	movs	r2, #0
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ec:	f000 f937 	bl	800395e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036f0:	4a0a      	ldr	r2, [pc, #40]	@ (800371c <HAL_InitTick+0x74>)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	e007      	b.n	8003708 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]
 80036fc:	e004      	b.n	8003708 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	73fb      	strb	r3, [r7, #15]
 8003702:	e001      	b.n	8003708 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003708:	7bfb      	ldrb	r3, [r7, #15]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20000054 	.word	0x20000054
 8003718:	20000008 	.word	0x20000008
 800371c:	20000050 	.word	0x20000050

08003720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003724:	4b06      	ldr	r3, [pc, #24]	@ (8003740 <HAL_IncTick+0x20>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	4b06      	ldr	r3, [pc, #24]	@ (8003744 <HAL_IncTick+0x24>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4413      	add	r3, r2
 8003730:	4a04      	ldr	r2, [pc, #16]	@ (8003744 <HAL_IncTick+0x24>)
 8003732:	6013      	str	r3, [r2, #0]
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	20000054 	.word	0x20000054
 8003744:	20001bfc 	.word	0x20001bfc

08003748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  return uwTick;
 800374c:	4b03      	ldr	r3, [pc, #12]	@ (800375c <HAL_GetTick+0x14>)
 800374e:	681b      	ldr	r3, [r3, #0]
}
 8003750:	4618      	mov	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	20001bfc 	.word	0x20001bfc

08003760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003768:	f7ff ffee 	bl	8003748 <HAL_GetTick>
 800376c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d005      	beq.n	8003786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800377a:	4b0a      	ldr	r3, [pc, #40]	@ (80037a4 <HAL_Delay+0x44>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4413      	add	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003786:	bf00      	nop
 8003788:	f7ff ffde 	bl	8003748 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	429a      	cmp	r2, r3
 8003796:	d8f7      	bhi.n	8003788 <HAL_Delay+0x28>
  {
  }
}
 8003798:	bf00      	nop
 800379a:	bf00      	nop
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20000054 	.word	0x20000054

080037a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b8:	4b0c      	ldr	r3, [pc, #48]	@ (80037ec <__NVIC_SetPriorityGrouping+0x44>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037c4:	4013      	ands	r3, r2
 80037c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037da:	4a04      	ldr	r2, [pc, #16]	@ (80037ec <__NVIC_SetPriorityGrouping+0x44>)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	60d3      	str	r3, [r2, #12]
}
 80037e0:	bf00      	nop
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	e000ed00 	.word	0xe000ed00

080037f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f4:	4b04      	ldr	r3, [pc, #16]	@ (8003808 <__NVIC_GetPriorityGrouping+0x18>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	0a1b      	lsrs	r3, r3, #8
 80037fa:	f003 0307 	and.w	r3, r3, #7
}
 80037fe:	4618      	mov	r0, r3
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381a:	2b00      	cmp	r3, #0
 800381c:	db0b      	blt.n	8003836 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800381e:	79fb      	ldrb	r3, [r7, #7]
 8003820:	f003 021f 	and.w	r2, r3, #31
 8003824:	4907      	ldr	r1, [pc, #28]	@ (8003844 <__NVIC_EnableIRQ+0x38>)
 8003826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	2001      	movs	r0, #1
 800382e:	fa00 f202 	lsl.w	r2, r0, r2
 8003832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	e000e100 	.word	0xe000e100

08003848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	6039      	str	r1, [r7, #0]
 8003852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003858:	2b00      	cmp	r3, #0
 800385a:	db0a      	blt.n	8003872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	b2da      	uxtb	r2, r3
 8003860:	490c      	ldr	r1, [pc, #48]	@ (8003894 <__NVIC_SetPriority+0x4c>)
 8003862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003866:	0112      	lsls	r2, r2, #4
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	440b      	add	r3, r1
 800386c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003870:	e00a      	b.n	8003888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	b2da      	uxtb	r2, r3
 8003876:	4908      	ldr	r1, [pc, #32]	@ (8003898 <__NVIC_SetPriority+0x50>)
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	3b04      	subs	r3, #4
 8003880:	0112      	lsls	r2, r2, #4
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	440b      	add	r3, r1
 8003886:	761a      	strb	r2, [r3, #24]
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	e000e100 	.word	0xe000e100
 8003898:	e000ed00 	.word	0xe000ed00

0800389c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800389c:	b480      	push	{r7}
 800389e:	b089      	sub	sp, #36	@ 0x24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f1c3 0307 	rsb	r3, r3, #7
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	bf28      	it	cs
 80038ba:	2304      	movcs	r3, #4
 80038bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	3304      	adds	r3, #4
 80038c2:	2b06      	cmp	r3, #6
 80038c4:	d902      	bls.n	80038cc <NVIC_EncodePriority+0x30>
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	3b03      	subs	r3, #3
 80038ca:	e000      	b.n	80038ce <NVIC_EncodePriority+0x32>
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d0:	f04f 32ff 	mov.w	r2, #4294967295
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43da      	mvns	r2, r3
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	401a      	ands	r2, r3
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e4:	f04f 31ff 	mov.w	r1, #4294967295
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	fa01 f303 	lsl.w	r3, r1, r3
 80038ee:	43d9      	mvns	r1, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f4:	4313      	orrs	r3, r2
         );
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3724      	adds	r7, #36	@ 0x24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
	...

08003904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3b01      	subs	r3, #1
 8003910:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003914:	d301      	bcc.n	800391a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003916:	2301      	movs	r3, #1
 8003918:	e00f      	b.n	800393a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800391a:	4a0a      	ldr	r2, [pc, #40]	@ (8003944 <SysTick_Config+0x40>)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3b01      	subs	r3, #1
 8003920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003922:	210f      	movs	r1, #15
 8003924:	f04f 30ff 	mov.w	r0, #4294967295
 8003928:	f7ff ff8e 	bl	8003848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800392c:	4b05      	ldr	r3, [pc, #20]	@ (8003944 <SysTick_Config+0x40>)
 800392e:	2200      	movs	r2, #0
 8003930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003932:	4b04      	ldr	r3, [pc, #16]	@ (8003944 <SysTick_Config+0x40>)
 8003934:	2207      	movs	r2, #7
 8003936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	e000e010 	.word	0xe000e010

08003948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff ff29 	bl	80037a8 <__NVIC_SetPriorityGrouping>
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b086      	sub	sp, #24
 8003962:	af00      	add	r7, sp, #0
 8003964:	4603      	mov	r3, r0
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	607a      	str	r2, [r7, #4]
 800396a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003970:	f7ff ff3e 	bl	80037f0 <__NVIC_GetPriorityGrouping>
 8003974:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	6978      	ldr	r0, [r7, #20]
 800397c:	f7ff ff8e 	bl	800389c <NVIC_EncodePriority>
 8003980:	4602      	mov	r2, r0
 8003982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003986:	4611      	mov	r1, r2
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff ff5d 	bl	8003848 <__NVIC_SetPriority>
}
 800398e:	bf00      	nop
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	4603      	mov	r3, r0
 800399e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff ff31 	bl	800380c <__NVIC_EnableIRQ>
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff ffa2 	bl	8003904 <SysTick_Config>
 80039c0:	4603      	mov	r3, r0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e0ac      	b.n	8003b38 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 f8b2 	bl	8003b4c <DFSDM_GetChannelFromInstance>
 80039e8:	4603      	mov	r3, r0
 80039ea:	4a55      	ldr	r2, [pc, #340]	@ (8003b40 <HAL_DFSDM_ChannelInit+0x174>)
 80039ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e09f      	b.n	8003b38 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7fe fd23 	bl	8002444 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80039fe:	4b51      	ldr	r3, [pc, #324]	@ (8003b44 <HAL_DFSDM_ChannelInit+0x178>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	3301      	adds	r3, #1
 8003a04:	4a4f      	ldr	r2, [pc, #316]	@ (8003b44 <HAL_DFSDM_ChannelInit+0x178>)
 8003a06:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003a08:	4b4e      	ldr	r3, [pc, #312]	@ (8003b44 <HAL_DFSDM_ChannelInit+0x178>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d125      	bne.n	8003a5c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003a10:	4b4d      	ldr	r3, [pc, #308]	@ (8003b48 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a4c      	ldr	r2, [pc, #304]	@ (8003b48 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a16:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003a1a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003a1c:	4b4a      	ldr	r3, [pc, #296]	@ (8003b48 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	4948      	ldr	r1, [pc, #288]	@ (8003b48 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003a2a:	4b47      	ldr	r3, [pc, #284]	@ (8003b48 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a46      	ldr	r2, [pc, #280]	@ (8003b48 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a30:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003a34:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	791b      	ldrb	r3, [r3, #4]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d108      	bne.n	8003a50 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003a3e:	4b42      	ldr	r3, [pc, #264]	@ (8003b48 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	041b      	lsls	r3, r3, #16
 8003a4a:	493f      	ldr	r1, [pc, #252]	@ (8003b48 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003a50:	4b3d      	ldr	r3, [pc, #244]	@ (8003b48 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a3c      	ldr	r2, [pc, #240]	@ (8003b48 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a5a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003a6a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6819      	ldr	r1, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003a7a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003a80:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 020f 	bic.w	r2, r2, #15
 8003a98:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6819      	ldr	r1, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8003ac0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6899      	ldr	r1, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f002 0207 	and.w	r2, r2, #7
 8003aec:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6859      	ldr	r1, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afe:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b18:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 f810 	bl	8003b4c <DFSDM_GetChannelFromInstance>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	4904      	ldr	r1, [pc, #16]	@ (8003b40 <HAL_DFSDM_ChannelInit+0x174>)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20001c04 	.word	0x20001c04
 8003b44:	20001c00 	.word	0x20001c00
 8003b48:	40016000 	.word	0x40016000

08003b4c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a1c      	ldr	r2, [pc, #112]	@ (8003bc8 <DFSDM_GetChannelFromInstance+0x7c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d102      	bne.n	8003b62 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	e02b      	b.n	8003bba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a19      	ldr	r2, [pc, #100]	@ (8003bcc <DFSDM_GetChannelFromInstance+0x80>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d102      	bne.n	8003b70 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	e024      	b.n	8003bba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a17      	ldr	r2, [pc, #92]	@ (8003bd0 <DFSDM_GetChannelFromInstance+0x84>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d102      	bne.n	8003b7e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	e01d      	b.n	8003bba <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a14      	ldr	r2, [pc, #80]	@ (8003bd4 <DFSDM_GetChannelFromInstance+0x88>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d102      	bne.n	8003b8c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003b86:	2304      	movs	r3, #4
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	e016      	b.n	8003bba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a12      	ldr	r2, [pc, #72]	@ (8003bd8 <DFSDM_GetChannelFromInstance+0x8c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d102      	bne.n	8003b9a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003b94:	2305      	movs	r3, #5
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	e00f      	b.n	8003bba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a0f      	ldr	r2, [pc, #60]	@ (8003bdc <DFSDM_GetChannelFromInstance+0x90>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d102      	bne.n	8003ba8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003ba2:	2306      	movs	r3, #6
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	e008      	b.n	8003bba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a0d      	ldr	r2, [pc, #52]	@ (8003be0 <DFSDM_GetChannelFromInstance+0x94>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d102      	bne.n	8003bb6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003bb0:	2307      	movs	r3, #7
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	e001      	b.n	8003bba <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003bba:	68fb      	ldr	r3, [r7, #12]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	40016000 	.word	0x40016000
 8003bcc:	40016020 	.word	0x40016020
 8003bd0:	40016040 	.word	0x40016040
 8003bd4:	40016080 	.word	0x40016080
 8003bd8:	400160a0 	.word	0x400160a0
 8003bdc:	400160c0 	.word	0x400160c0
 8003be0:	400160e0 	.word	0x400160e0

08003be4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	460b      	mov	r3, r1
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8003bf6:	7afb      	ldrb	r3, [r7, #11]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d103      	bne.n	8003c04 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	605a      	str	r2, [r3, #4]
      break;
 8003c02:	e002      	b.n	8003c0a <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	75fb      	strb	r3, [r7, #23]
      break;
 8003c08:	bf00      	nop
  }

  return status;
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	371c      	adds	r7, #28
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e003      	b.n	8003c34 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003c32:	2300      	movs	r3, #0
  }
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	0c1b      	lsrs	r3, r3, #16
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	4b0c      	ldr	r3, [pc, #48]	@ (8003c9c <HAL_EXTI_IRQHandler+0x5c>)
 8003c6a:	4413      	add	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	4013      	ands	r3, r2
 8003c76:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	4798      	blx	r3
    }
  }
}
 8003c92:	bf00      	nop
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40010414 	.word	0x40010414

08003ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003caa:	2300      	movs	r3, #0
 8003cac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cae:	e17f      	b.n	8003fb0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 8171 	beq.w	8003faa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d005      	beq.n	8003ce0 <HAL_GPIO_Init+0x40>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 0303 	and.w	r3, r3, #3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d130      	bne.n	8003d42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	2203      	movs	r2, #3
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	68da      	ldr	r2, [r3, #12]
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d16:	2201      	movs	r2, #1
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4013      	ands	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	091b      	lsrs	r3, r3, #4
 8003d2c:	f003 0201 	and.w	r2, r3, #1
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	2b03      	cmp	r3, #3
 8003d4c:	d118      	bne.n	8003d80 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003d54:	2201      	movs	r2, #1
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4013      	ands	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	08db      	lsrs	r3, r3, #3
 8003d6a:	f003 0201 	and.w	r2, r3, #1
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d017      	beq.n	8003dbc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	2203      	movs	r2, #3
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4013      	ands	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f003 0303 	and.w	r3, r3, #3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d123      	bne.n	8003e10 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	08da      	lsrs	r2, r3, #3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3208      	adds	r2, #8
 8003dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	220f      	movs	r2, #15
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43db      	mvns	r3, r3
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4013      	ands	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	08da      	lsrs	r2, r3, #3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3208      	adds	r2, #8
 8003e0a:	6939      	ldr	r1, [r7, #16]
 8003e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4013      	ands	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 0203 	and.w	r2, r3, #3
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80ac 	beq.w	8003faa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e52:	4b5f      	ldr	r3, [pc, #380]	@ (8003fd0 <HAL_GPIO_Init+0x330>)
 8003e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e56:	4a5e      	ldr	r2, [pc, #376]	@ (8003fd0 <HAL_GPIO_Init+0x330>)
 8003e58:	f043 0301 	orr.w	r3, r3, #1
 8003e5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e5e:	4b5c      	ldr	r3, [pc, #368]	@ (8003fd0 <HAL_GPIO_Init+0x330>)
 8003e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	60bb      	str	r3, [r7, #8]
 8003e68:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e6a:	4a5a      	ldr	r2, [pc, #360]	@ (8003fd4 <HAL_GPIO_Init+0x334>)
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	089b      	lsrs	r3, r3, #2
 8003e70:	3302      	adds	r3, #2
 8003e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e76:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	220f      	movs	r2, #15
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	43db      	mvns	r3, r3
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003e94:	d025      	beq.n	8003ee2 <HAL_GPIO_Init+0x242>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a4f      	ldr	r2, [pc, #316]	@ (8003fd8 <HAL_GPIO_Init+0x338>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d01f      	beq.n	8003ede <HAL_GPIO_Init+0x23e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a4e      	ldr	r2, [pc, #312]	@ (8003fdc <HAL_GPIO_Init+0x33c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d019      	beq.n	8003eda <HAL_GPIO_Init+0x23a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a4d      	ldr	r2, [pc, #308]	@ (8003fe0 <HAL_GPIO_Init+0x340>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d013      	beq.n	8003ed6 <HAL_GPIO_Init+0x236>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a4c      	ldr	r2, [pc, #304]	@ (8003fe4 <HAL_GPIO_Init+0x344>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00d      	beq.n	8003ed2 <HAL_GPIO_Init+0x232>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a4b      	ldr	r2, [pc, #300]	@ (8003fe8 <HAL_GPIO_Init+0x348>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d007      	beq.n	8003ece <HAL_GPIO_Init+0x22e>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a4a      	ldr	r2, [pc, #296]	@ (8003fec <HAL_GPIO_Init+0x34c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d101      	bne.n	8003eca <HAL_GPIO_Init+0x22a>
 8003ec6:	2306      	movs	r3, #6
 8003ec8:	e00c      	b.n	8003ee4 <HAL_GPIO_Init+0x244>
 8003eca:	2307      	movs	r3, #7
 8003ecc:	e00a      	b.n	8003ee4 <HAL_GPIO_Init+0x244>
 8003ece:	2305      	movs	r3, #5
 8003ed0:	e008      	b.n	8003ee4 <HAL_GPIO_Init+0x244>
 8003ed2:	2304      	movs	r3, #4
 8003ed4:	e006      	b.n	8003ee4 <HAL_GPIO_Init+0x244>
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e004      	b.n	8003ee4 <HAL_GPIO_Init+0x244>
 8003eda:	2302      	movs	r3, #2
 8003edc:	e002      	b.n	8003ee4 <HAL_GPIO_Init+0x244>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <HAL_GPIO_Init+0x244>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	f002 0203 	and.w	r2, r2, #3
 8003eea:	0092      	lsls	r2, r2, #2
 8003eec:	4093      	lsls	r3, r2
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ef4:	4937      	ldr	r1, [pc, #220]	@ (8003fd4 <HAL_GPIO_Init+0x334>)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	089b      	lsrs	r3, r3, #2
 8003efa:	3302      	adds	r3, #2
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f02:	4b3b      	ldr	r3, [pc, #236]	@ (8003ff0 <HAL_GPIO_Init+0x350>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f26:	4a32      	ldr	r2, [pc, #200]	@ (8003ff0 <HAL_GPIO_Init+0x350>)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f2c:	4b30      	ldr	r3, [pc, #192]	@ (8003ff0 <HAL_GPIO_Init+0x350>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	43db      	mvns	r3, r3
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f50:	4a27      	ldr	r2, [pc, #156]	@ (8003ff0 <HAL_GPIO_Init+0x350>)
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003f56:	4b26      	ldr	r3, [pc, #152]	@ (8003ff0 <HAL_GPIO_Init+0x350>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	4013      	ands	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f7a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ff0 <HAL_GPIO_Init+0x350>)
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003f80:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff0 <HAL_GPIO_Init+0x350>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fa4:	4a12      	ldr	r2, [pc, #72]	@ (8003ff0 <HAL_GPIO_Init+0x350>)
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	3301      	adds	r3, #1
 8003fae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f47f ae78 	bne.w	8003cb0 <HAL_GPIO_Init+0x10>
  }
}
 8003fc0:	bf00      	nop
 8003fc2:	bf00      	nop
 8003fc4:	371c      	adds	r7, #28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	40010000 	.word	0x40010000
 8003fd8:	48000400 	.word	0x48000400
 8003fdc:	48000800 	.word	0x48000800
 8003fe0:	48000c00 	.word	0x48000c00
 8003fe4:	48001000 	.word	0x48001000
 8003fe8:	48001400 	.word	0x48001400
 8003fec:	48001800 	.word	0x48001800
 8003ff0:	40010400 	.word	0x40010400

08003ff4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ffe:	2300      	movs	r3, #0
 8004000:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004002:	e0cd      	b.n	80041a0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004004:	2201      	movs	r2, #1
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	4013      	ands	r3, r2
 8004010:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80c0 	beq.w	800419a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800401a:	4a68      	ldr	r2, [pc, #416]	@ (80041bc <HAL_GPIO_DeInit+0x1c8>)
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	089b      	lsrs	r3, r3, #2
 8004020:	3302      	adds	r3, #2
 8004022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004026:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	220f      	movs	r2, #15
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4013      	ands	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004042:	d025      	beq.n	8004090 <HAL_GPIO_DeInit+0x9c>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a5e      	ldr	r2, [pc, #376]	@ (80041c0 <HAL_GPIO_DeInit+0x1cc>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d01f      	beq.n	800408c <HAL_GPIO_DeInit+0x98>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a5d      	ldr	r2, [pc, #372]	@ (80041c4 <HAL_GPIO_DeInit+0x1d0>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d019      	beq.n	8004088 <HAL_GPIO_DeInit+0x94>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a5c      	ldr	r2, [pc, #368]	@ (80041c8 <HAL_GPIO_DeInit+0x1d4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d013      	beq.n	8004084 <HAL_GPIO_DeInit+0x90>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a5b      	ldr	r2, [pc, #364]	@ (80041cc <HAL_GPIO_DeInit+0x1d8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d00d      	beq.n	8004080 <HAL_GPIO_DeInit+0x8c>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a5a      	ldr	r2, [pc, #360]	@ (80041d0 <HAL_GPIO_DeInit+0x1dc>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d007      	beq.n	800407c <HAL_GPIO_DeInit+0x88>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a59      	ldr	r2, [pc, #356]	@ (80041d4 <HAL_GPIO_DeInit+0x1e0>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d101      	bne.n	8004078 <HAL_GPIO_DeInit+0x84>
 8004074:	2306      	movs	r3, #6
 8004076:	e00c      	b.n	8004092 <HAL_GPIO_DeInit+0x9e>
 8004078:	2307      	movs	r3, #7
 800407a:	e00a      	b.n	8004092 <HAL_GPIO_DeInit+0x9e>
 800407c:	2305      	movs	r3, #5
 800407e:	e008      	b.n	8004092 <HAL_GPIO_DeInit+0x9e>
 8004080:	2304      	movs	r3, #4
 8004082:	e006      	b.n	8004092 <HAL_GPIO_DeInit+0x9e>
 8004084:	2303      	movs	r3, #3
 8004086:	e004      	b.n	8004092 <HAL_GPIO_DeInit+0x9e>
 8004088:	2302      	movs	r3, #2
 800408a:	e002      	b.n	8004092 <HAL_GPIO_DeInit+0x9e>
 800408c:	2301      	movs	r3, #1
 800408e:	e000      	b.n	8004092 <HAL_GPIO_DeInit+0x9e>
 8004090:	2300      	movs	r3, #0
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	f002 0203 	and.w	r2, r2, #3
 8004098:	0092      	lsls	r2, r2, #2
 800409a:	4093      	lsls	r3, r2
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d132      	bne.n	8004108 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80040a2:	4b4d      	ldr	r3, [pc, #308]	@ (80041d8 <HAL_GPIO_DeInit+0x1e4>)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	43db      	mvns	r3, r3
 80040aa:	494b      	ldr	r1, [pc, #300]	@ (80041d8 <HAL_GPIO_DeInit+0x1e4>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80040b0:	4b49      	ldr	r3, [pc, #292]	@ (80041d8 <HAL_GPIO_DeInit+0x1e4>)
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	43db      	mvns	r3, r3
 80040b8:	4947      	ldr	r1, [pc, #284]	@ (80041d8 <HAL_GPIO_DeInit+0x1e4>)
 80040ba:	4013      	ands	r3, r2
 80040bc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80040be:	4b46      	ldr	r3, [pc, #280]	@ (80041d8 <HAL_GPIO_DeInit+0x1e4>)
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	43db      	mvns	r3, r3
 80040c6:	4944      	ldr	r1, [pc, #272]	@ (80041d8 <HAL_GPIO_DeInit+0x1e4>)
 80040c8:	4013      	ands	r3, r2
 80040ca:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80040cc:	4b42      	ldr	r3, [pc, #264]	@ (80041d8 <HAL_GPIO_DeInit+0x1e4>)
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	43db      	mvns	r3, r3
 80040d4:	4940      	ldr	r1, [pc, #256]	@ (80041d8 <HAL_GPIO_DeInit+0x1e4>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	220f      	movs	r2, #15
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80040ea:	4a34      	ldr	r2, [pc, #208]	@ (80041bc <HAL_GPIO_DeInit+0x1c8>)
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	089b      	lsrs	r3, r3, #2
 80040f0:	3302      	adds	r3, #2
 80040f2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	43da      	mvns	r2, r3
 80040fa:	4830      	ldr	r0, [pc, #192]	@ (80041bc <HAL_GPIO_DeInit+0x1c8>)
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	089b      	lsrs	r3, r3, #2
 8004100:	400a      	ands	r2, r1
 8004102:	3302      	adds	r3, #2
 8004104:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	2103      	movs	r1, #3
 8004112:	fa01 f303 	lsl.w	r3, r1, r3
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	08da      	lsrs	r2, r3, #3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3208      	adds	r2, #8
 8004124:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	220f      	movs	r2, #15
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	43db      	mvns	r3, r3
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	08d2      	lsrs	r2, r2, #3
 800413c:	4019      	ands	r1, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3208      	adds	r2, #8
 8004142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	2103      	movs	r1, #3
 8004150:	fa01 f303 	lsl.w	r3, r1, r3
 8004154:	43db      	mvns	r3, r3
 8004156:	401a      	ands	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	2101      	movs	r1, #1
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	fa01 f303 	lsl.w	r3, r1, r3
 8004168:	43db      	mvns	r3, r3
 800416a:	401a      	ands	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	2103      	movs	r1, #3
 800417a:	fa01 f303 	lsl.w	r3, r1, r3
 800417e:	43db      	mvns	r3, r3
 8004180:	401a      	ands	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800418a:	2101      	movs	r1, #1
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	fa01 f303 	lsl.w	r3, r1, r3
 8004192:	43db      	mvns	r3, r3
 8004194:	401a      	ands	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	3301      	adds	r3, #1
 800419e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	fa22 f303 	lsr.w	r3, r2, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f47f af2b 	bne.w	8004004 <HAL_GPIO_DeInit+0x10>
  }
}
 80041ae:	bf00      	nop
 80041b0:	bf00      	nop
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	40010000 	.word	0x40010000
 80041c0:	48000400 	.word	0x48000400
 80041c4:	48000800 	.word	0x48000800
 80041c8:	48000c00 	.word	0x48000c00
 80041cc:	48001000 	.word	0x48001000
 80041d0:	48001400 	.word	0x48001400
 80041d4:	48001800 	.word	0x48001800
 80041d8:	40010400 	.word	0x40010400

080041dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	887b      	ldrh	r3, [r7, #2]
 80041ee:	4013      	ands	r3, r2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041f4:	2301      	movs	r3, #1
 80041f6:	73fb      	strb	r3, [r7, #15]
 80041f8:	e001      	b.n	80041fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041fa:	2300      	movs	r3, #0
 80041fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	460b      	mov	r3, r1
 8004216:	807b      	strh	r3, [r7, #2]
 8004218:	4613      	mov	r3, r2
 800421a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800421c:	787b      	ldrb	r3, [r7, #1]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004222:	887a      	ldrh	r2, [r7, #2]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004228:	e002      	b.n	8004230 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800422a:	887a      	ldrh	r2, [r7, #2]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	4603      	mov	r3, r0
 8004244:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004246:	4b08      	ldr	r3, [pc, #32]	@ (8004268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004248:	695a      	ldr	r2, [r3, #20]
 800424a:	88fb      	ldrh	r3, [r7, #6]
 800424c:	4013      	ands	r3, r2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d006      	beq.n	8004260 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004252:	4a05      	ldr	r2, [pc, #20]	@ (8004268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004254:	88fb      	ldrh	r3, [r7, #6]
 8004256:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004258:	88fb      	ldrh	r3, [r7, #6]
 800425a:	4618      	mov	r0, r3
 800425c:	f000 f806 	bl	800426c <HAL_GPIO_EXTI_Callback>
  }
}
 8004260:	bf00      	nop
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40010400 	.word	0x40010400

0800426c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b082      	sub	sp, #8
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e08d      	b.n	80043b0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d106      	bne.n	80042ae <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7fe f92f 	bl	800250c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2224      	movs	r2, #36	@ 0x24
 80042b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0201 	bic.w	r2, r2, #1
 80042c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80042d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d107      	bne.n	80042fc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042f8:	609a      	str	r2, [r3, #8]
 80042fa:	e006      	b.n	800430a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004308:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d108      	bne.n	8004324 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004320:	605a      	str	r2, [r3, #4]
 8004322:	e007      	b.n	8004334 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004332:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6812      	ldr	r2, [r2, #0]
 800433e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004342:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004346:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004356:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69d9      	ldr	r1, [r3, #28]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1a      	ldr	r2, [r3, #32]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f042 0201 	orr.w	r2, r2, #1
 8004390:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e021      	b.n	800440e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2224      	movs	r2, #36	@ 0x24
 80043ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0201 	bic.w	r2, r2, #1
 80043e0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7fe f8f0 	bl	80025c8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b088      	sub	sp, #32
 800441c:	af02      	add	r7, sp, #8
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	4608      	mov	r0, r1
 8004422:	4611      	mov	r1, r2
 8004424:	461a      	mov	r2, r3
 8004426:	4603      	mov	r3, r0
 8004428:	817b      	strh	r3, [r7, #10]
 800442a:	460b      	mov	r3, r1
 800442c:	813b      	strh	r3, [r7, #8]
 800442e:	4613      	mov	r3, r2
 8004430:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b20      	cmp	r3, #32
 800443c:	f040 80f9 	bne.w	8004632 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <HAL_I2C_Mem_Write+0x34>
 8004446:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004448:	2b00      	cmp	r3, #0
 800444a:	d105      	bne.n	8004458 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004452:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0ed      	b.n	8004634 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800445e:	2b01      	cmp	r3, #1
 8004460:	d101      	bne.n	8004466 <HAL_I2C_Mem_Write+0x4e>
 8004462:	2302      	movs	r3, #2
 8004464:	e0e6      	b.n	8004634 <HAL_I2C_Mem_Write+0x21c>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800446e:	f7ff f96b 	bl	8003748 <HAL_GetTick>
 8004472:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	2319      	movs	r3, #25
 800447a:	2201      	movs	r2, #1
 800447c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 fac3 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0d1      	b.n	8004634 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2221      	movs	r2, #33	@ 0x21
 8004494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2240      	movs	r2, #64	@ 0x40
 800449c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a3a      	ldr	r2, [r7, #32]
 80044aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80044b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044b8:	88f8      	ldrh	r0, [r7, #6]
 80044ba:	893a      	ldrh	r2, [r7, #8]
 80044bc:	8979      	ldrh	r1, [r7, #10]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	9301      	str	r3, [sp, #4]
 80044c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	4603      	mov	r3, r0
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 f9d3 	bl	8004874 <I2C_RequestMemoryWrite>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e0a9      	b.n	8004634 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2bff      	cmp	r3, #255	@ 0xff
 80044e8:	d90e      	bls.n	8004508 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	22ff      	movs	r2, #255	@ 0xff
 80044ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	8979      	ldrh	r1, [r7, #10]
 80044f8:	2300      	movs	r3, #0
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 fc47 	bl	8004d94 <I2C_TransferConfig>
 8004506:	e00f      	b.n	8004528 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004516:	b2da      	uxtb	r2, r3
 8004518:	8979      	ldrh	r1, [r7, #10]
 800451a:	2300      	movs	r3, #0
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fc36 	bl	8004d94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f000 fac6 	bl	8004abe <I2C_WaitOnTXISFlagUntilTimeout>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e07b      	b.n	8004634 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004540:	781a      	ldrb	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d034      	beq.n	80045e0 <HAL_I2C_Mem_Write+0x1c8>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800457a:	2b00      	cmp	r3, #0
 800457c:	d130      	bne.n	80045e0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004584:	2200      	movs	r2, #0
 8004586:	2180      	movs	r1, #128	@ 0x80
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 fa3f 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e04d      	b.n	8004634 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459c:	b29b      	uxth	r3, r3
 800459e:	2bff      	cmp	r3, #255	@ 0xff
 80045a0:	d90e      	bls.n	80045c0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	22ff      	movs	r2, #255	@ 0xff
 80045a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	8979      	ldrh	r1, [r7, #10]
 80045b0:	2300      	movs	r3, #0
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 fbeb 	bl	8004d94 <I2C_TransferConfig>
 80045be:	e00f      	b.n	80045e0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	8979      	ldrh	r1, [r7, #10]
 80045d2:	2300      	movs	r3, #0
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 fbda 	bl	8004d94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d19e      	bne.n	8004528 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 faac 	bl	8004b4c <I2C_WaitOnSTOPFlagUntilTimeout>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e01a      	b.n	8004634 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2220      	movs	r2, #32
 8004604:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6859      	ldr	r1, [r3, #4]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	4b0a      	ldr	r3, [pc, #40]	@ (800463c <HAL_I2C_Mem_Write+0x224>)
 8004612:	400b      	ands	r3, r1
 8004614:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	e000      	b.n	8004634 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004632:	2302      	movs	r3, #2
  }
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	fe00e800 	.word	0xfe00e800

08004640 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af02      	add	r7, sp, #8
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	4608      	mov	r0, r1
 800464a:	4611      	mov	r1, r2
 800464c:	461a      	mov	r2, r3
 800464e:	4603      	mov	r3, r0
 8004650:	817b      	strh	r3, [r7, #10]
 8004652:	460b      	mov	r3, r1
 8004654:	813b      	strh	r3, [r7, #8]
 8004656:	4613      	mov	r3, r2
 8004658:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b20      	cmp	r3, #32
 8004664:	f040 80fd 	bne.w	8004862 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <HAL_I2C_Mem_Read+0x34>
 800466e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004670:	2b00      	cmp	r3, #0
 8004672:	d105      	bne.n	8004680 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800467a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e0f1      	b.n	8004864 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <HAL_I2C_Mem_Read+0x4e>
 800468a:	2302      	movs	r3, #2
 800468c:	e0ea      	b.n	8004864 <HAL_I2C_Mem_Read+0x224>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004696:	f7ff f857 	bl	8003748 <HAL_GetTick>
 800469a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	2319      	movs	r3, #25
 80046a2:	2201      	movs	r2, #1
 80046a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 f9af 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e0d5      	b.n	8004864 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2222      	movs	r2, #34	@ 0x22
 80046bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2240      	movs	r2, #64	@ 0x40
 80046c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a3a      	ldr	r2, [r7, #32]
 80046d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80046d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046e0:	88f8      	ldrh	r0, [r7, #6]
 80046e2:	893a      	ldrh	r2, [r7, #8]
 80046e4:	8979      	ldrh	r1, [r7, #10]
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	9301      	str	r3, [sp, #4]
 80046ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	4603      	mov	r3, r0
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 f913 	bl	800491c <I2C_RequestMemoryRead>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e0ad      	b.n	8004864 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800470c:	b29b      	uxth	r3, r3
 800470e:	2bff      	cmp	r3, #255	@ 0xff
 8004710:	d90e      	bls.n	8004730 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2201      	movs	r2, #1
 8004716:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800471c:	b2da      	uxtb	r2, r3
 800471e:	8979      	ldrh	r1, [r7, #10]
 8004720:	4b52      	ldr	r3, [pc, #328]	@ (800486c <HAL_I2C_Mem_Read+0x22c>)
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 fb33 	bl	8004d94 <I2C_TransferConfig>
 800472e:	e00f      	b.n	8004750 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004734:	b29a      	uxth	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800473e:	b2da      	uxtb	r2, r3
 8004740:	8979      	ldrh	r1, [r7, #10]
 8004742:	4b4a      	ldr	r3, [pc, #296]	@ (800486c <HAL_I2C_Mem_Read+0x22c>)
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 fb22 	bl	8004d94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004756:	2200      	movs	r2, #0
 8004758:	2104      	movs	r1, #4
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 f956 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e07c      	b.n	8004864 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004774:	b2d2      	uxtb	r2, r2
 8004776:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477c:	1c5a      	adds	r2, r3, #1
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004786:	3b01      	subs	r3, #1
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004792:	b29b      	uxth	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	b29a      	uxth	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d034      	beq.n	8004810 <HAL_I2C_Mem_Read+0x1d0>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d130      	bne.n	8004810 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b4:	2200      	movs	r2, #0
 80047b6:	2180      	movs	r1, #128	@ 0x80
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 f927 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e04d      	b.n	8004864 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2bff      	cmp	r3, #255	@ 0xff
 80047d0:	d90e      	bls.n	80047f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2201      	movs	r2, #1
 80047d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	8979      	ldrh	r1, [r7, #10]
 80047e0:	2300      	movs	r3, #0
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 fad3 	bl	8004d94 <I2C_TransferConfig>
 80047ee:	e00f      	b.n	8004810 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	8979      	ldrh	r1, [r7, #10]
 8004802:	2300      	movs	r3, #0
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 fac2 	bl	8004d94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004814:	b29b      	uxth	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d19a      	bne.n	8004750 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 f994 	bl	8004b4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e01a      	b.n	8004864 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2220      	movs	r2, #32
 8004834:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6859      	ldr	r1, [r3, #4]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	4b0b      	ldr	r3, [pc, #44]	@ (8004870 <HAL_I2C_Mem_Read+0x230>)
 8004842:	400b      	ands	r3, r1
 8004844:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2220      	movs	r2, #32
 800484a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	e000      	b.n	8004864 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004862:	2302      	movs	r3, #2
  }
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	80002400 	.word	0x80002400
 8004870:	fe00e800 	.word	0xfe00e800

08004874 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af02      	add	r7, sp, #8
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	4608      	mov	r0, r1
 800487e:	4611      	mov	r1, r2
 8004880:	461a      	mov	r2, r3
 8004882:	4603      	mov	r3, r0
 8004884:	817b      	strh	r3, [r7, #10]
 8004886:	460b      	mov	r3, r1
 8004888:	813b      	strh	r3, [r7, #8]
 800488a:	4613      	mov	r3, r2
 800488c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800488e:	88fb      	ldrh	r3, [r7, #6]
 8004890:	b2da      	uxtb	r2, r3
 8004892:	8979      	ldrh	r1, [r7, #10]
 8004894:	4b20      	ldr	r3, [pc, #128]	@ (8004918 <I2C_RequestMemoryWrite+0xa4>)
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 fa79 	bl	8004d94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	69b9      	ldr	r1, [r7, #24]
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 f909 	bl	8004abe <I2C_WaitOnTXISFlagUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e02c      	b.n	8004910 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048b6:	88fb      	ldrh	r3, [r7, #6]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d105      	bne.n	80048c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048bc:	893b      	ldrh	r3, [r7, #8]
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80048c6:	e015      	b.n	80048f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048c8:	893b      	ldrh	r3, [r7, #8]
 80048ca:	0a1b      	lsrs	r3, r3, #8
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048d6:	69fa      	ldr	r2, [r7, #28]
 80048d8:	69b9      	ldr	r1, [r7, #24]
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 f8ef 	bl	8004abe <I2C_WaitOnTXISFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e012      	b.n	8004910 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048ea:	893b      	ldrh	r3, [r7, #8]
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	2200      	movs	r2, #0
 80048fc:	2180      	movs	r1, #128	@ 0x80
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 f884 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e000      	b.n	8004910 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	80002000 	.word	0x80002000

0800491c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af02      	add	r7, sp, #8
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	4608      	mov	r0, r1
 8004926:	4611      	mov	r1, r2
 8004928:	461a      	mov	r2, r3
 800492a:	4603      	mov	r3, r0
 800492c:	817b      	strh	r3, [r7, #10]
 800492e:	460b      	mov	r3, r1
 8004930:	813b      	strh	r3, [r7, #8]
 8004932:	4613      	mov	r3, r2
 8004934:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004936:	88fb      	ldrh	r3, [r7, #6]
 8004938:	b2da      	uxtb	r2, r3
 800493a:	8979      	ldrh	r1, [r7, #10]
 800493c:	4b20      	ldr	r3, [pc, #128]	@ (80049c0 <I2C_RequestMemoryRead+0xa4>)
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	2300      	movs	r3, #0
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 fa26 	bl	8004d94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004948:	69fa      	ldr	r2, [r7, #28]
 800494a:	69b9      	ldr	r1, [r7, #24]
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 f8b6 	bl	8004abe <I2C_WaitOnTXISFlagUntilTimeout>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e02c      	b.n	80049b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800495c:	88fb      	ldrh	r3, [r7, #6]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d105      	bne.n	800496e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004962:	893b      	ldrh	r3, [r7, #8]
 8004964:	b2da      	uxtb	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	629a      	str	r2, [r3, #40]	@ 0x28
 800496c:	e015      	b.n	800499a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800496e:	893b      	ldrh	r3, [r7, #8]
 8004970:	0a1b      	lsrs	r3, r3, #8
 8004972:	b29b      	uxth	r3, r3
 8004974:	b2da      	uxtb	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800497c:	69fa      	ldr	r2, [r7, #28]
 800497e:	69b9      	ldr	r1, [r7, #24]
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 f89c 	bl	8004abe <I2C_WaitOnTXISFlagUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e012      	b.n	80049b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004990:	893b      	ldrh	r3, [r7, #8]
 8004992:	b2da      	uxtb	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	2200      	movs	r2, #0
 80049a2:	2140      	movs	r1, #64	@ 0x40
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 f831 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e000      	b.n	80049b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	80002000 	.word	0x80002000

080049c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d103      	bne.n	80049e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2200      	movs	r2, #0
 80049e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d007      	beq.n	8004a00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699a      	ldr	r2, [r3, #24]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	619a      	str	r2, [r3, #24]
  }
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a1c:	e03b      	b.n	8004a96 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	6839      	ldr	r1, [r7, #0]
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 f8d6 	bl	8004bd4 <I2C_IsErrorOccurred>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e041      	b.n	8004ab6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a38:	d02d      	beq.n	8004a96 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a3a:	f7fe fe85 	bl	8003748 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d302      	bcc.n	8004a50 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d122      	bne.n	8004a96 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699a      	ldr	r2, [r3, #24]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	bf0c      	ite	eq
 8004a60:	2301      	moveq	r3, #1
 8004a62:	2300      	movne	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	461a      	mov	r2, r3
 8004a68:	79fb      	ldrb	r3, [r7, #7]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d113      	bne.n	8004a96 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a72:	f043 0220 	orr.w	r2, r3, #32
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e00f      	b.n	8004ab6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	699a      	ldr	r2, [r3, #24]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	bf0c      	ite	eq
 8004aa6:	2301      	moveq	r3, #1
 8004aa8:	2300      	movne	r3, #0
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	461a      	mov	r2, r3
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d0b4      	beq.n	8004a1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	60f8      	str	r0, [r7, #12]
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004aca:	e033      	b.n	8004b34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	68b9      	ldr	r1, [r7, #8]
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 f87f 	bl	8004bd4 <I2C_IsErrorOccurred>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e031      	b.n	8004b44 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae6:	d025      	beq.n	8004b34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae8:	f7fe fe2e 	bl	8003748 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d302      	bcc.n	8004afe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d11a      	bne.n	8004b34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d013      	beq.n	8004b34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b10:	f043 0220 	orr.w	r2, r3, #32
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e007      	b.n	8004b44 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d1c4      	bne.n	8004acc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b58:	e02f      	b.n	8004bba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	68b9      	ldr	r1, [r7, #8]
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 f838 	bl	8004bd4 <I2C_IsErrorOccurred>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e02d      	b.n	8004bca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6e:	f7fe fdeb 	bl	8003748 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d302      	bcc.n	8004b84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d11a      	bne.n	8004bba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	d013      	beq.n	8004bba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b96:	f043 0220 	orr.w	r2, r3, #32
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e007      	b.n	8004bca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	f003 0320 	and.w	r3, r3, #32
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d1c8      	bne.n	8004b5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
	...

08004bd4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08a      	sub	sp, #40	@ 0x28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	f003 0310 	and.w	r3, r3, #16
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d068      	beq.n	8004cd2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2210      	movs	r2, #16
 8004c06:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c08:	e049      	b.n	8004c9e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c10:	d045      	beq.n	8004c9e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c12:	f7fe fd99 	bl	8003748 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d302      	bcc.n	8004c28 <I2C_IsErrorOccurred+0x54>
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d13a      	bne.n	8004c9e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c32:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c3a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c4a:	d121      	bne.n	8004c90 <I2C_IsErrorOccurred+0xbc>
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c52:	d01d      	beq.n	8004c90 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004c54:	7cfb      	ldrb	r3, [r7, #19]
 8004c56:	2b20      	cmp	r3, #32
 8004c58:	d01a      	beq.n	8004c90 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c68:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004c6a:	f7fe fd6d 	bl	8003748 <HAL_GetTick>
 8004c6e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c70:	e00e      	b.n	8004c90 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004c72:	f7fe fd69 	bl	8003748 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b19      	cmp	r3, #25
 8004c7e:	d907      	bls.n	8004c90 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	f043 0320 	orr.w	r3, r3, #32
 8004c86:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004c8e:	e006      	b.n	8004c9e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	2b20      	cmp	r3, #32
 8004c9c:	d1e9      	bne.n	8004c72 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	f003 0320 	and.w	r3, r3, #32
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	d003      	beq.n	8004cb4 <I2C_IsErrorOccurred+0xe0>
 8004cac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0aa      	beq.n	8004c0a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d103      	bne.n	8004cc4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	f043 0304 	orr.w	r3, r3, #4
 8004cca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00b      	beq.n	8004cfc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	f043 0301 	orr.w	r3, r3, #1
 8004cea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004cf4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00b      	beq.n	8004d1e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	f043 0308 	orr.w	r3, r3, #8
 8004d0c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d16:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00b      	beq.n	8004d40 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	f043 0302 	orr.w	r3, r3, #2
 8004d2e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004d40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01c      	beq.n	8004d82 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f7ff fe3b 	bl	80049c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6859      	ldr	r1, [r3, #4]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	4b0d      	ldr	r3, [pc, #52]	@ (8004d90 <I2C_IsErrorOccurred+0x1bc>)
 8004d5a:	400b      	ands	r3, r1
 8004d5c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	431a      	orrs	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004d82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3728      	adds	r7, #40	@ 0x28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	fe00e800 	.word	0xfe00e800

08004d94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	607b      	str	r3, [r7, #4]
 8004d9e:	460b      	mov	r3, r1
 8004da0:	817b      	strh	r3, [r7, #10]
 8004da2:	4613      	mov	r3, r2
 8004da4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004da6:	897b      	ldrh	r3, [r7, #10]
 8004da8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004dac:	7a7b      	ldrb	r3, [r7, #9]
 8004dae:	041b      	lsls	r3, r3, #16
 8004db0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004db4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004dc2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	0d5b      	lsrs	r3, r3, #21
 8004dce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004dd2:	4b08      	ldr	r3, [pc, #32]	@ (8004df4 <I2C_TransferConfig+0x60>)
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	ea02 0103 	and.w	r1, r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004de6:	bf00      	nop
 8004de8:	371c      	adds	r7, #28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	03ff63ff 	.word	0x03ff63ff

08004df8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b20      	cmp	r3, #32
 8004e0c:	d138      	bne.n	8004e80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d101      	bne.n	8004e1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e18:	2302      	movs	r3, #2
 8004e1a:	e032      	b.n	8004e82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2224      	movs	r2, #36	@ 0x24
 8004e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0201 	bic.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6819      	ldr	r1, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	e000      	b.n	8004e82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e80:	2302      	movs	r3, #2
  }
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b085      	sub	sp, #20
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b20      	cmp	r3, #32
 8004ea2:	d139      	bne.n	8004f18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d101      	bne.n	8004eb2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	e033      	b.n	8004f1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2224      	movs	r2, #36	@ 0x24
 8004ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0201 	bic.w	r2, r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004ee0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	021b      	lsls	r3, r3, #8
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f14:	2300      	movs	r3, #0
 8004f16:	e000      	b.n	8004f1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f18:	2302      	movs	r3, #2
  }
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b086      	sub	sp, #24
 8004f2a:	af02      	add	r7, sp, #8
 8004f2c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e101      	b.n	800513c <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d106      	bne.n	8004f52 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7fd fc01 	bl	8002754 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2203      	movs	r2, #3
 8004f56:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f002 ff33 	bl	8007dd0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6818      	ldr	r0, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	7c1a      	ldrb	r2, [r3, #16]
 8004f72:	f88d 2000 	strb.w	r2, [sp]
 8004f76:	3304      	adds	r3, #4
 8004f78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f7a:	f002 fefc 	bl	8007d76 <USB_CoreInit>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d005      	beq.n	8004f90 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e0d5      	b.n	800513c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2100      	movs	r1, #0
 8004f96:	4618      	mov	r0, r3
 8004f98:	f002 ff2b 	bl	8007df2 <USB_SetCurrentMode>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d005      	beq.n	8004fae <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e0c6      	b.n	800513c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fae:	2300      	movs	r3, #0
 8004fb0:	73fb      	strb	r3, [r7, #15]
 8004fb2:	e04a      	b.n	800504a <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004fb4:	7bfa      	ldrb	r2, [r7, #15]
 8004fb6:	6879      	ldr	r1, [r7, #4]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	4413      	add	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	440b      	add	r3, r1
 8004fc2:	3315      	adds	r3, #21
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004fc8:	7bfa      	ldrb	r2, [r7, #15]
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	4413      	add	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	440b      	add	r3, r1
 8004fd6:	3314      	adds	r3, #20
 8004fd8:	7bfa      	ldrb	r2, [r7, #15]
 8004fda:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004fdc:	7bfa      	ldrb	r2, [r7, #15]
 8004fde:	7bfb      	ldrb	r3, [r7, #15]
 8004fe0:	b298      	uxth	r0, r3
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	4413      	add	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	440b      	add	r3, r1
 8004fee:	332e      	adds	r3, #46	@ 0x2e
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ff4:	7bfa      	ldrb	r2, [r7, #15]
 8004ff6:	6879      	ldr	r1, [r7, #4]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	00db      	lsls	r3, r3, #3
 8004ffc:	4413      	add	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	440b      	add	r3, r1
 8005002:	3318      	adds	r3, #24
 8005004:	2200      	movs	r2, #0
 8005006:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005008:	7bfa      	ldrb	r2, [r7, #15]
 800500a:	6879      	ldr	r1, [r7, #4]
 800500c:	4613      	mov	r3, r2
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	331c      	adds	r3, #28
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800501c:	7bfa      	ldrb	r2, [r7, #15]
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	4613      	mov	r3, r2
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	3320      	adds	r3, #32
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005030:	7bfa      	ldrb	r2, [r7, #15]
 8005032:	6879      	ldr	r1, [r7, #4]
 8005034:	4613      	mov	r3, r2
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	4413      	add	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	440b      	add	r3, r1
 800503e:	3324      	adds	r3, #36	@ 0x24
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	3301      	adds	r3, #1
 8005048:	73fb      	strb	r3, [r7, #15]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	791b      	ldrb	r3, [r3, #4]
 800504e:	7bfa      	ldrb	r2, [r7, #15]
 8005050:	429a      	cmp	r2, r3
 8005052:	d3af      	bcc.n	8004fb4 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005054:	2300      	movs	r3, #0
 8005056:	73fb      	strb	r3, [r7, #15]
 8005058:	e044      	b.n	80050e4 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800505a:	7bfa      	ldrb	r2, [r7, #15]
 800505c:	6879      	ldr	r1, [r7, #4]
 800505e:	4613      	mov	r3, r2
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	4413      	add	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	440b      	add	r3, r1
 8005068:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800506c:	2200      	movs	r2, #0
 800506e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005070:	7bfa      	ldrb	r2, [r7, #15]
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	4613      	mov	r3, r2
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	4413      	add	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005082:	7bfa      	ldrb	r2, [r7, #15]
 8005084:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005086:	7bfa      	ldrb	r2, [r7, #15]
 8005088:	6879      	ldr	r1, [r7, #4]
 800508a:	4613      	mov	r3, r2
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	4413      	add	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	440b      	add	r3, r1
 8005094:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005098:	2200      	movs	r2, #0
 800509a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800509c:	7bfa      	ldrb	r2, [r7, #15]
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	4613      	mov	r3, r2
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	4413      	add	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80050b2:	7bfa      	ldrb	r2, [r7, #15]
 80050b4:	6879      	ldr	r1, [r7, #4]
 80050b6:	4613      	mov	r3, r2
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	4413      	add	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	440b      	add	r3, r1
 80050c0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80050c8:	7bfa      	ldrb	r2, [r7, #15]
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	4613      	mov	r3, r2
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	4413      	add	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	440b      	add	r3, r1
 80050d6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	3301      	adds	r3, #1
 80050e2:	73fb      	strb	r3, [r7, #15]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	791b      	ldrb	r3, [r3, #4]
 80050e8:	7bfa      	ldrb	r2, [r7, #15]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d3b5      	bcc.n	800505a <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6818      	ldr	r0, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	7c1a      	ldrb	r2, [r3, #16]
 80050f6:	f88d 2000 	strb.w	r2, [sp]
 80050fa:	3304      	adds	r3, #4
 80050fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050fe:	f002 fec5 	bl	8007e8c <USB_DevInit>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d005      	beq.n	8005114 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e013      	b.n	800513c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	7b1b      	ldrb	r3, [r3, #12]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d102      	bne.n	8005130 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f80a 	bl	8005144 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4618      	mov	r0, r3
 8005136:	f003 f86a 	bl	800820e <USB_DevDisconnect>

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005172:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005176:	f043 0303 	orr.w	r3, r3, #3
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005190:	4b05      	ldr	r3, [pc, #20]	@ (80051a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a04      	ldr	r2, [pc, #16]	@ (80051a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005196:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800519a:	6013      	str	r3, [r2, #0]
}
 800519c:	bf00      	nop
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	40007000 	.word	0x40007000

080051ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80051b0:	4b04      	ldr	r3, [pc, #16]	@ (80051c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	40007000 	.word	0x40007000

080051c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051d6:	d130      	bne.n	800523a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80051d8:	4b23      	ldr	r3, [pc, #140]	@ (8005268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051e4:	d038      	beq.n	8005258 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051e6:	4b20      	ldr	r3, [pc, #128]	@ (8005268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80051ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051f6:	4b1d      	ldr	r3, [pc, #116]	@ (800526c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2232      	movs	r2, #50	@ 0x32
 80051fc:	fb02 f303 	mul.w	r3, r2, r3
 8005200:	4a1b      	ldr	r2, [pc, #108]	@ (8005270 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005202:	fba2 2303 	umull	r2, r3, r2, r3
 8005206:	0c9b      	lsrs	r3, r3, #18
 8005208:	3301      	adds	r3, #1
 800520a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800520c:	e002      	b.n	8005214 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	3b01      	subs	r3, #1
 8005212:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005214:	4b14      	ldr	r3, [pc, #80]	@ (8005268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800521c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005220:	d102      	bne.n	8005228 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1f2      	bne.n	800520e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005228:	4b0f      	ldr	r3, [pc, #60]	@ (8005268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005234:	d110      	bne.n	8005258 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e00f      	b.n	800525a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800523a:	4b0b      	ldr	r3, [pc, #44]	@ (8005268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005246:	d007      	beq.n	8005258 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005248:	4b07      	ldr	r3, [pc, #28]	@ (8005268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005250:	4a05      	ldr	r2, [pc, #20]	@ (8005268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005252:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005256:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40007000 	.word	0x40007000
 800526c:	20000008 	.word	0x20000008
 8005270:	431bde83 	.word	0x431bde83

08005274 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005274:	b480      	push	{r7}
 8005276:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005278:	4b05      	ldr	r3, [pc, #20]	@ (8005290 <HAL_PWREx_EnableVddUSB+0x1c>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	4a04      	ldr	r2, [pc, #16]	@ (8005290 <HAL_PWREx_EnableVddUSB+0x1c>)
 800527e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005282:	6053      	str	r3, [r2, #4]
}
 8005284:	bf00      	nop
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40007000 	.word	0x40007000

08005294 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af02      	add	r7, sp, #8
 800529a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800529c:	f7fe fa54 	bl	8003748 <HAL_GetTick>
 80052a0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e063      	b.n	8005374 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10b      	bne.n	80052d0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f7fd f9a5 	bl	8002610 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80052c6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f858 	bl	8005380 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	3b01      	subs	r3, #1
 80052e0:	021a      	lsls	r2, r3, #8
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	2120      	movs	r1, #32
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f850 	bl	800539c <QSPI_WaitFlagStateUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005300:	7afb      	ldrb	r3, [r7, #11]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d131      	bne.n	800536a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005310:	f023 0310 	bic.w	r3, r3, #16
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6852      	ldr	r2, [r2, #4]
 8005318:	0611      	lsls	r1, r2, #24
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	68d2      	ldr	r2, [r2, #12]
 800531e:	4311      	orrs	r1, r2
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	430b      	orrs	r3, r1
 8005326:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	4b13      	ldr	r3, [pc, #76]	@ (800537c <HAL_QSPI_Init+0xe8>)
 8005330:	4013      	ands	r3, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6912      	ldr	r2, [r2, #16]
 8005336:	0411      	lsls	r1, r2, #16
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6952      	ldr	r2, [r2, #20]
 800533c:	4311      	orrs	r1, r2
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6992      	ldr	r2, [r2, #24]
 8005342:	4311      	orrs	r1, r2
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6812      	ldr	r2, [r2, #0]
 8005348:	430b      	orrs	r3, r1
 800534a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 0201 	orr.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8005372:	7afb      	ldrb	r3, [r7, #11]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	ffe0f8fe 	.word	0xffe0f8fe

08005380 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	603b      	str	r3, [r7, #0]
 80053a8:	4613      	mov	r3, r2
 80053aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80053ac:	e01a      	b.n	80053e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b4:	d016      	beq.n	80053e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053b6:	f7fe f9c7 	bl	8003748 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d302      	bcc.n	80053cc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10b      	bne.n	80053e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2204      	movs	r2, #4
 80053d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d8:	f043 0201 	orr.w	r2, r3, #1
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e00e      	b.n	8005402 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	4013      	ands	r3, r2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	bf14      	ite	ne
 80053f2:	2301      	movne	r3, #1
 80053f4:	2300      	moveq	r3, #0
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	461a      	mov	r2, r3
 80053fa:	79fb      	ldrb	r3, [r7, #7]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d1d6      	bne.n	80053ae <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
	...

0800540c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e3ca      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800541e:	4b97      	ldr	r3, [pc, #604]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 030c 	and.w	r3, r3, #12
 8005426:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005428:	4b94      	ldr	r3, [pc, #592]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f003 0303 	and.w	r3, r3, #3
 8005430:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0310 	and.w	r3, r3, #16
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 80e4 	beq.w	8005608 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <HAL_RCC_OscConfig+0x4a>
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	2b0c      	cmp	r3, #12
 800544a:	f040 808b 	bne.w	8005564 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2b01      	cmp	r3, #1
 8005452:	f040 8087 	bne.w	8005564 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005456:	4b89      	ldr	r3, [pc, #548]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d005      	beq.n	800546e <HAL_RCC_OscConfig+0x62>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e3a2      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1a      	ldr	r2, [r3, #32]
 8005472:	4b82      	ldr	r3, [pc, #520]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	2b00      	cmp	r3, #0
 800547c:	d004      	beq.n	8005488 <HAL_RCC_OscConfig+0x7c>
 800547e:	4b7f      	ldr	r3, [pc, #508]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005486:	e005      	b.n	8005494 <HAL_RCC_OscConfig+0x88>
 8005488:	4b7c      	ldr	r3, [pc, #496]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 800548a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800548e:	091b      	lsrs	r3, r3, #4
 8005490:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005494:	4293      	cmp	r3, r2
 8005496:	d223      	bcs.n	80054e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	4618      	mov	r0, r3
 800549e:	f000 fd55 	bl	8005f4c <RCC_SetFlashLatencyFromMSIRange>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e383      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054ac:	4b73      	ldr	r3, [pc, #460]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a72      	ldr	r2, [pc, #456]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 80054b2:	f043 0308 	orr.w	r3, r3, #8
 80054b6:	6013      	str	r3, [r2, #0]
 80054b8:	4b70      	ldr	r3, [pc, #448]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	496d      	ldr	r1, [pc, #436]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054ca:	4b6c      	ldr	r3, [pc, #432]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	021b      	lsls	r3, r3, #8
 80054d8:	4968      	ldr	r1, [pc, #416]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	604b      	str	r3, [r1, #4]
 80054de:	e025      	b.n	800552c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054e0:	4b66      	ldr	r3, [pc, #408]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a65      	ldr	r2, [pc, #404]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 80054e6:	f043 0308 	orr.w	r3, r3, #8
 80054ea:	6013      	str	r3, [r2, #0]
 80054ec:	4b63      	ldr	r3, [pc, #396]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	4960      	ldr	r1, [pc, #384]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054fe:	4b5f      	ldr	r3, [pc, #380]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	021b      	lsls	r3, r3, #8
 800550c:	495b      	ldr	r1, [pc, #364]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 800550e:	4313      	orrs	r3, r2
 8005510:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d109      	bne.n	800552c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	4618      	mov	r0, r3
 800551e:	f000 fd15 	bl	8005f4c <RCC_SetFlashLatencyFromMSIRange>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e343      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800552c:	f000 fc4a 	bl	8005dc4 <HAL_RCC_GetSysClockFreq>
 8005530:	4602      	mov	r2, r0
 8005532:	4b52      	ldr	r3, [pc, #328]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	091b      	lsrs	r3, r3, #4
 8005538:	f003 030f 	and.w	r3, r3, #15
 800553c:	4950      	ldr	r1, [pc, #320]	@ (8005680 <HAL_RCC_OscConfig+0x274>)
 800553e:	5ccb      	ldrb	r3, [r1, r3]
 8005540:	f003 031f 	and.w	r3, r3, #31
 8005544:	fa22 f303 	lsr.w	r3, r2, r3
 8005548:	4a4e      	ldr	r2, [pc, #312]	@ (8005684 <HAL_RCC_OscConfig+0x278>)
 800554a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800554c:	4b4e      	ldr	r3, [pc, #312]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4618      	mov	r0, r3
 8005552:	f7fe f8a9 	bl	80036a8 <HAL_InitTick>
 8005556:	4603      	mov	r3, r0
 8005558:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800555a:	7bfb      	ldrb	r3, [r7, #15]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d052      	beq.n	8005606 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	e327      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d032      	beq.n	80055d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800556c:	4b43      	ldr	r3, [pc, #268]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a42      	ldr	r2, [pc, #264]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 8005572:	f043 0301 	orr.w	r3, r3, #1
 8005576:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005578:	f7fe f8e6 	bl	8003748 <HAL_GetTick>
 800557c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005580:	f7fe f8e2 	bl	8003748 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e310      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005592:	4b3a      	ldr	r3, [pc, #232]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0f0      	beq.n	8005580 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800559e:	4b37      	ldr	r3, [pc, #220]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a36      	ldr	r2, [pc, #216]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 80055a4:	f043 0308 	orr.w	r3, r3, #8
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	4b34      	ldr	r3, [pc, #208]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	4931      	ldr	r1, [pc, #196]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055bc:	4b2f      	ldr	r3, [pc, #188]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	69db      	ldr	r3, [r3, #28]
 80055c8:	021b      	lsls	r3, r3, #8
 80055ca:	492c      	ldr	r1, [pc, #176]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	604b      	str	r3, [r1, #4]
 80055d0:	e01a      	b.n	8005608 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80055d2:	4b2a      	ldr	r3, [pc, #168]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a29      	ldr	r2, [pc, #164]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 80055d8:	f023 0301 	bic.w	r3, r3, #1
 80055dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055de:	f7fe f8b3 	bl	8003748 <HAL_GetTick>
 80055e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055e4:	e008      	b.n	80055f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055e6:	f7fe f8af 	bl	8003748 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d901      	bls.n	80055f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e2dd      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055f8:	4b20      	ldr	r3, [pc, #128]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1f0      	bne.n	80055e6 <HAL_RCC_OscConfig+0x1da>
 8005604:	e000      	b.n	8005608 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005606:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b00      	cmp	r3, #0
 8005612:	d074      	beq.n	80056fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	2b08      	cmp	r3, #8
 8005618:	d005      	beq.n	8005626 <HAL_RCC_OscConfig+0x21a>
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	2b0c      	cmp	r3, #12
 800561e:	d10e      	bne.n	800563e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	2b03      	cmp	r3, #3
 8005624:	d10b      	bne.n	800563e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005626:	4b15      	ldr	r3, [pc, #84]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d064      	beq.n	80056fc <HAL_RCC_OscConfig+0x2f0>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d160      	bne.n	80056fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e2ba      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005646:	d106      	bne.n	8005656 <HAL_RCC_OscConfig+0x24a>
 8005648:	4b0c      	ldr	r3, [pc, #48]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a0b      	ldr	r2, [pc, #44]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 800564e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005652:	6013      	str	r3, [r2, #0]
 8005654:	e026      	b.n	80056a4 <HAL_RCC_OscConfig+0x298>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800565e:	d115      	bne.n	800568c <HAL_RCC_OscConfig+0x280>
 8005660:	4b06      	ldr	r3, [pc, #24]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a05      	ldr	r2, [pc, #20]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 8005666:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800566a:	6013      	str	r3, [r2, #0]
 800566c:	4b03      	ldr	r3, [pc, #12]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a02      	ldr	r2, [pc, #8]	@ (800567c <HAL_RCC_OscConfig+0x270>)
 8005672:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005676:	6013      	str	r3, [r2, #0]
 8005678:	e014      	b.n	80056a4 <HAL_RCC_OscConfig+0x298>
 800567a:	bf00      	nop
 800567c:	40021000 	.word	0x40021000
 8005680:	08010d98 	.word	0x08010d98
 8005684:	20000008 	.word	0x20000008
 8005688:	20000050 	.word	0x20000050
 800568c:	4ba0      	ldr	r3, [pc, #640]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a9f      	ldr	r2, [pc, #636]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 8005692:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	4b9d      	ldr	r3, [pc, #628]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a9c      	ldr	r2, [pc, #624]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 800569e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d013      	beq.n	80056d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ac:	f7fe f84c 	bl	8003748 <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056b4:	f7fe f848 	bl	8003748 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b64      	cmp	r3, #100	@ 0x64
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e276      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056c6:	4b92      	ldr	r3, [pc, #584]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0f0      	beq.n	80056b4 <HAL_RCC_OscConfig+0x2a8>
 80056d2:	e014      	b.n	80056fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d4:	f7fe f838 	bl	8003748 <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056dc:	f7fe f834 	bl	8003748 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b64      	cmp	r3, #100	@ 0x64
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e262      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056ee:	4b88      	ldr	r3, [pc, #544]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1f0      	bne.n	80056dc <HAL_RCC_OscConfig+0x2d0>
 80056fa:	e000      	b.n	80056fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d060      	beq.n	80057cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	2b04      	cmp	r3, #4
 800570e:	d005      	beq.n	800571c <HAL_RCC_OscConfig+0x310>
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	2b0c      	cmp	r3, #12
 8005714:	d119      	bne.n	800574a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2b02      	cmp	r3, #2
 800571a:	d116      	bne.n	800574a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800571c:	4b7c      	ldr	r3, [pc, #496]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005724:	2b00      	cmp	r3, #0
 8005726:	d005      	beq.n	8005734 <HAL_RCC_OscConfig+0x328>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e23f      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005734:	4b76      	ldr	r3, [pc, #472]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	061b      	lsls	r3, r3, #24
 8005742:	4973      	ldr	r1, [pc, #460]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 8005744:	4313      	orrs	r3, r2
 8005746:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005748:	e040      	b.n	80057cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d023      	beq.n	800579a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005752:	4b6f      	ldr	r3, [pc, #444]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a6e      	ldr	r2, [pc, #440]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 8005758:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800575c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575e:	f7fd fff3 	bl	8003748 <HAL_GetTick>
 8005762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005764:	e008      	b.n	8005778 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005766:	f7fd ffef 	bl	8003748 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d901      	bls.n	8005778 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e21d      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005778:	4b65      	ldr	r3, [pc, #404]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005780:	2b00      	cmp	r3, #0
 8005782:	d0f0      	beq.n	8005766 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005784:	4b62      	ldr	r3, [pc, #392]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	061b      	lsls	r3, r3, #24
 8005792:	495f      	ldr	r1, [pc, #380]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 8005794:	4313      	orrs	r3, r2
 8005796:	604b      	str	r3, [r1, #4]
 8005798:	e018      	b.n	80057cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800579a:	4b5d      	ldr	r3, [pc, #372]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a5c      	ldr	r2, [pc, #368]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 80057a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a6:	f7fd ffcf 	bl	8003748 <HAL_GetTick>
 80057aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057ac:	e008      	b.n	80057c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ae:	f7fd ffcb 	bl	8003748 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e1f9      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057c0:	4b53      	ldr	r3, [pc, #332]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1f0      	bne.n	80057ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0308 	and.w	r3, r3, #8
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d03c      	beq.n	8005852 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d01c      	beq.n	800581a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057e0:	4b4b      	ldr	r3, [pc, #300]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 80057e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057e6:	4a4a      	ldr	r2, [pc, #296]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 80057e8:	f043 0301 	orr.w	r3, r3, #1
 80057ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f0:	f7fd ffaa 	bl	8003748 <HAL_GetTick>
 80057f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057f6:	e008      	b.n	800580a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057f8:	f7fd ffa6 	bl	8003748 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b02      	cmp	r3, #2
 8005804:	d901      	bls.n	800580a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e1d4      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800580a:	4b41      	ldr	r3, [pc, #260]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 800580c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d0ef      	beq.n	80057f8 <HAL_RCC_OscConfig+0x3ec>
 8005818:	e01b      	b.n	8005852 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800581a:	4b3d      	ldr	r3, [pc, #244]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 800581c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005820:	4a3b      	ldr	r2, [pc, #236]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 8005822:	f023 0301 	bic.w	r3, r3, #1
 8005826:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800582a:	f7fd ff8d 	bl	8003748 <HAL_GetTick>
 800582e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005830:	e008      	b.n	8005844 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005832:	f7fd ff89 	bl	8003748 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d901      	bls.n	8005844 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e1b7      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005844:	4b32      	ldr	r3, [pc, #200]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 8005846:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1ef      	bne.n	8005832 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 80a6 	beq.w	80059ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005860:	2300      	movs	r3, #0
 8005862:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005864:	4b2a      	ldr	r3, [pc, #168]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 8005866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10d      	bne.n	800588c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005870:	4b27      	ldr	r3, [pc, #156]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 8005872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005874:	4a26      	ldr	r2, [pc, #152]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 8005876:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800587a:	6593      	str	r3, [r2, #88]	@ 0x58
 800587c:	4b24      	ldr	r3, [pc, #144]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 800587e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005884:	60bb      	str	r3, [r7, #8]
 8005886:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005888:	2301      	movs	r3, #1
 800588a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800588c:	4b21      	ldr	r3, [pc, #132]	@ (8005914 <HAL_RCC_OscConfig+0x508>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005894:	2b00      	cmp	r3, #0
 8005896:	d118      	bne.n	80058ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005898:	4b1e      	ldr	r3, [pc, #120]	@ (8005914 <HAL_RCC_OscConfig+0x508>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a1d      	ldr	r2, [pc, #116]	@ (8005914 <HAL_RCC_OscConfig+0x508>)
 800589e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058a4:	f7fd ff50 	bl	8003748 <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058aa:	e008      	b.n	80058be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058ac:	f7fd ff4c 	bl	8003748 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e17a      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058be:	4b15      	ldr	r3, [pc, #84]	@ (8005914 <HAL_RCC_OscConfig+0x508>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0f0      	beq.n	80058ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d108      	bne.n	80058e4 <HAL_RCC_OscConfig+0x4d8>
 80058d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 80058d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058d8:	4a0d      	ldr	r2, [pc, #52]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 80058da:	f043 0301 	orr.w	r3, r3, #1
 80058de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058e2:	e029      	b.n	8005938 <HAL_RCC_OscConfig+0x52c>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	2b05      	cmp	r3, #5
 80058ea:	d115      	bne.n	8005918 <HAL_RCC_OscConfig+0x50c>
 80058ec:	4b08      	ldr	r3, [pc, #32]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 80058ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058f2:	4a07      	ldr	r2, [pc, #28]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 80058f4:	f043 0304 	orr.w	r3, r3, #4
 80058f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058fc:	4b04      	ldr	r3, [pc, #16]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 80058fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005902:	4a03      	ldr	r2, [pc, #12]	@ (8005910 <HAL_RCC_OscConfig+0x504>)
 8005904:	f043 0301 	orr.w	r3, r3, #1
 8005908:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800590c:	e014      	b.n	8005938 <HAL_RCC_OscConfig+0x52c>
 800590e:	bf00      	nop
 8005910:	40021000 	.word	0x40021000
 8005914:	40007000 	.word	0x40007000
 8005918:	4b9c      	ldr	r3, [pc, #624]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 800591a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800591e:	4a9b      	ldr	r2, [pc, #620]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 8005920:	f023 0301 	bic.w	r3, r3, #1
 8005924:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005928:	4b98      	ldr	r3, [pc, #608]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 800592a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800592e:	4a97      	ldr	r2, [pc, #604]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 8005930:	f023 0304 	bic.w	r3, r3, #4
 8005934:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d016      	beq.n	800596e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005940:	f7fd ff02 	bl	8003748 <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005946:	e00a      	b.n	800595e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005948:	f7fd fefe 	bl	8003748 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005956:	4293      	cmp	r3, r2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e12a      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800595e:	4b8b      	ldr	r3, [pc, #556]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 8005960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0ed      	beq.n	8005948 <HAL_RCC_OscConfig+0x53c>
 800596c:	e015      	b.n	800599a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800596e:	f7fd feeb 	bl	8003748 <HAL_GetTick>
 8005972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005974:	e00a      	b.n	800598c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005976:	f7fd fee7 	bl	8003748 <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005984:	4293      	cmp	r3, r2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e113      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800598c:	4b7f      	ldr	r3, [pc, #508]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 800598e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1ed      	bne.n	8005976 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800599a:	7ffb      	ldrb	r3, [r7, #31]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d105      	bne.n	80059ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059a0:	4b7a      	ldr	r3, [pc, #488]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 80059a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059a4:	4a79      	ldr	r2, [pc, #484]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 80059a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059aa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 80fe 	beq.w	8005bb2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	f040 80d0 	bne.w	8005b60 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80059c0:	4b72      	ldr	r3, [pc, #456]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f003 0203 	and.w	r2, r3, #3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d130      	bne.n	8005a36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059de:	3b01      	subs	r3, #1
 80059e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d127      	bne.n	8005a36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d11f      	bne.n	8005a36 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a00:	2a07      	cmp	r2, #7
 8005a02:	bf14      	ite	ne
 8005a04:	2201      	movne	r2, #1
 8005a06:	2200      	moveq	r2, #0
 8005a08:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d113      	bne.n	8005a36 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a18:	085b      	lsrs	r3, r3, #1
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d109      	bne.n	8005a36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2c:	085b      	lsrs	r3, r3, #1
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d06e      	beq.n	8005b14 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	2b0c      	cmp	r3, #12
 8005a3a:	d069      	beq.n	8005b10 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a3c:	4b53      	ldr	r3, [pc, #332]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d105      	bne.n	8005a54 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005a48:	4b50      	ldr	r3, [pc, #320]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e0ad      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a58:	4b4c      	ldr	r3, [pc, #304]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a4b      	ldr	r2, [pc, #300]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 8005a5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a62:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a64:	f7fd fe70 	bl	8003748 <HAL_GetTick>
 8005a68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a6a:	e008      	b.n	8005a7e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a6c:	f7fd fe6c 	bl	8003748 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e09a      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a7e:	4b43      	ldr	r3, [pc, #268]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1f0      	bne.n	8005a6c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a8a:	4b40      	ldr	r3, [pc, #256]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	4b40      	ldr	r3, [pc, #256]	@ (8005b90 <HAL_RCC_OscConfig+0x784>)
 8005a90:	4013      	ands	r3, r2
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005a9a:	3a01      	subs	r2, #1
 8005a9c:	0112      	lsls	r2, r2, #4
 8005a9e:	4311      	orrs	r1, r2
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005aa4:	0212      	lsls	r2, r2, #8
 8005aa6:	4311      	orrs	r1, r2
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005aac:	0852      	lsrs	r2, r2, #1
 8005aae:	3a01      	subs	r2, #1
 8005ab0:	0552      	lsls	r2, r2, #21
 8005ab2:	4311      	orrs	r1, r2
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005ab8:	0852      	lsrs	r2, r2, #1
 8005aba:	3a01      	subs	r2, #1
 8005abc:	0652      	lsls	r2, r2, #25
 8005abe:	4311      	orrs	r1, r2
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005ac4:	0912      	lsrs	r2, r2, #4
 8005ac6:	0452      	lsls	r2, r2, #17
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	4930      	ldr	r1, [pc, #192]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005ad0:	4b2e      	ldr	r3, [pc, #184]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a2d      	ldr	r2, [pc, #180]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 8005ad6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ada:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005adc:	4b2b      	ldr	r3, [pc, #172]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	4a2a      	ldr	r2, [pc, #168]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 8005ae2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ae6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ae8:	f7fd fe2e 	bl	8003748 <HAL_GetTick>
 8005aec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aee:	e008      	b.n	8005b02 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005af0:	f7fd fe2a 	bl	8003748 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e058      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b02:	4b22      	ldr	r3, [pc, #136]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d0f0      	beq.n	8005af0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b0e:	e050      	b.n	8005bb2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e04f      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b14:	4b1d      	ldr	r3, [pc, #116]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d148      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005b20:	4b1a      	ldr	r3, [pc, #104]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a19      	ldr	r2, [pc, #100]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 8005b26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b2c:	4b17      	ldr	r3, [pc, #92]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	4a16      	ldr	r2, [pc, #88]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 8005b32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b38:	f7fd fe06 	bl	8003748 <HAL_GetTick>
 8005b3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b40:	f7fd fe02 	bl	8003748 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e030      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b52:	4b0e      	ldr	r3, [pc, #56]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0f0      	beq.n	8005b40 <HAL_RCC_OscConfig+0x734>
 8005b5e:	e028      	b.n	8005bb2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	2b0c      	cmp	r3, #12
 8005b64:	d023      	beq.n	8005bae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b66:	4b09      	ldr	r3, [pc, #36]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a08      	ldr	r2, [pc, #32]	@ (8005b8c <HAL_RCC_OscConfig+0x780>)
 8005b6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b72:	f7fd fde9 	bl	8003748 <HAL_GetTick>
 8005b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b78:	e00c      	b.n	8005b94 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b7a:	f7fd fde5 	bl	8003748 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d905      	bls.n	8005b94 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e013      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7a8>
 8005b8c:	40021000 	.word	0x40021000
 8005b90:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b94:	4b09      	ldr	r3, [pc, #36]	@ (8005bbc <HAL_RCC_OscConfig+0x7b0>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1ec      	bne.n	8005b7a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005ba0:	4b06      	ldr	r3, [pc, #24]	@ (8005bbc <HAL_RCC_OscConfig+0x7b0>)
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	4905      	ldr	r1, [pc, #20]	@ (8005bbc <HAL_RCC_OscConfig+0x7b0>)
 8005ba6:	4b06      	ldr	r3, [pc, #24]	@ (8005bc0 <HAL_RCC_OscConfig+0x7b4>)
 8005ba8:	4013      	ands	r3, r2
 8005baa:	60cb      	str	r3, [r1, #12]
 8005bac:	e001      	b.n	8005bb2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e000      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3720      	adds	r7, #32
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	40021000 	.word	0x40021000
 8005bc0:	feeefffc 	.word	0xfeeefffc

08005bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e0e7      	b.n	8005da8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bd8:	4b75      	ldr	r3, [pc, #468]	@ (8005db0 <HAL_RCC_ClockConfig+0x1ec>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0307 	and.w	r3, r3, #7
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d910      	bls.n	8005c08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005be6:	4b72      	ldr	r3, [pc, #456]	@ (8005db0 <HAL_RCC_ClockConfig+0x1ec>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f023 0207 	bic.w	r2, r3, #7
 8005bee:	4970      	ldr	r1, [pc, #448]	@ (8005db0 <HAL_RCC_ClockConfig+0x1ec>)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf6:	4b6e      	ldr	r3, [pc, #440]	@ (8005db0 <HAL_RCC_ClockConfig+0x1ec>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0307 	and.w	r3, r3, #7
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d001      	beq.n	8005c08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e0cf      	b.n	8005da8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0302 	and.w	r3, r3, #2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d010      	beq.n	8005c36 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	4b66      	ldr	r3, [pc, #408]	@ (8005db4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d908      	bls.n	8005c36 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c24:	4b63      	ldr	r3, [pc, #396]	@ (8005db4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	4960      	ldr	r1, [pc, #384]	@ (8005db4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d04c      	beq.n	8005cdc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d107      	bne.n	8005c5a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c4a:	4b5a      	ldr	r3, [pc, #360]	@ (8005db4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d121      	bne.n	8005c9a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e0a6      	b.n	8005da8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d107      	bne.n	8005c72 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c62:	4b54      	ldr	r3, [pc, #336]	@ (8005db4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d115      	bne.n	8005c9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e09a      	b.n	8005da8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d107      	bne.n	8005c8a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c7a:	4b4e      	ldr	r3, [pc, #312]	@ (8005db4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d109      	bne.n	8005c9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e08e      	b.n	8005da8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c8a:	4b4a      	ldr	r3, [pc, #296]	@ (8005db4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e086      	b.n	8005da8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c9a:	4b46      	ldr	r3, [pc, #280]	@ (8005db4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f023 0203 	bic.w	r2, r3, #3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	4943      	ldr	r1, [pc, #268]	@ (8005db4 <HAL_RCC_ClockConfig+0x1f0>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cac:	f7fd fd4c 	bl	8003748 <HAL_GetTick>
 8005cb0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cb2:	e00a      	b.n	8005cca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cb4:	f7fd fd48 	bl	8003748 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e06e      	b.n	8005da8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cca:	4b3a      	ldr	r3, [pc, #232]	@ (8005db4 <HAL_RCC_ClockConfig+0x1f0>)
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f003 020c 	and.w	r2, r3, #12
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d1eb      	bne.n	8005cb4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d010      	beq.n	8005d0a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	4b31      	ldr	r3, [pc, #196]	@ (8005db4 <HAL_RCC_ClockConfig+0x1f0>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d208      	bcs.n	8005d0a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cf8:	4b2e      	ldr	r3, [pc, #184]	@ (8005db4 <HAL_RCC_ClockConfig+0x1f0>)
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	492b      	ldr	r1, [pc, #172]	@ (8005db4 <HAL_RCC_ClockConfig+0x1f0>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d0a:	4b29      	ldr	r3, [pc, #164]	@ (8005db0 <HAL_RCC_ClockConfig+0x1ec>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0307 	and.w	r3, r3, #7
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d210      	bcs.n	8005d3a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d18:	4b25      	ldr	r3, [pc, #148]	@ (8005db0 <HAL_RCC_ClockConfig+0x1ec>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f023 0207 	bic.w	r2, r3, #7
 8005d20:	4923      	ldr	r1, [pc, #140]	@ (8005db0 <HAL_RCC_ClockConfig+0x1ec>)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d28:	4b21      	ldr	r3, [pc, #132]	@ (8005db0 <HAL_RCC_ClockConfig+0x1ec>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0307 	and.w	r3, r3, #7
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d001      	beq.n	8005d3a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e036      	b.n	8005da8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0304 	and.w	r3, r3, #4
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d008      	beq.n	8005d58 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d46:	4b1b      	ldr	r3, [pc, #108]	@ (8005db4 <HAL_RCC_ClockConfig+0x1f0>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	4918      	ldr	r1, [pc, #96]	@ (8005db4 <HAL_RCC_ClockConfig+0x1f0>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0308 	and.w	r3, r3, #8
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d009      	beq.n	8005d78 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d64:	4b13      	ldr	r3, [pc, #76]	@ (8005db4 <HAL_RCC_ClockConfig+0x1f0>)
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	4910      	ldr	r1, [pc, #64]	@ (8005db4 <HAL_RCC_ClockConfig+0x1f0>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d78:	f000 f824 	bl	8005dc4 <HAL_RCC_GetSysClockFreq>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005db4 <HAL_RCC_ClockConfig+0x1f0>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	091b      	lsrs	r3, r3, #4
 8005d84:	f003 030f 	and.w	r3, r3, #15
 8005d88:	490b      	ldr	r1, [pc, #44]	@ (8005db8 <HAL_RCC_ClockConfig+0x1f4>)
 8005d8a:	5ccb      	ldrb	r3, [r1, r3]
 8005d8c:	f003 031f 	and.w	r3, r3, #31
 8005d90:	fa22 f303 	lsr.w	r3, r2, r3
 8005d94:	4a09      	ldr	r2, [pc, #36]	@ (8005dbc <HAL_RCC_ClockConfig+0x1f8>)
 8005d96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005d98:	4b09      	ldr	r3, [pc, #36]	@ (8005dc0 <HAL_RCC_ClockConfig+0x1fc>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7fd fc83 	bl	80036a8 <HAL_InitTick>
 8005da2:	4603      	mov	r3, r0
 8005da4:	72fb      	strb	r3, [r7, #11]

  return status;
 8005da6:	7afb      	ldrb	r3, [r7, #11]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	40022000 	.word	0x40022000
 8005db4:	40021000 	.word	0x40021000
 8005db8:	08010d98 	.word	0x08010d98
 8005dbc:	20000008 	.word	0x20000008
 8005dc0:	20000050 	.word	0x20000050

08005dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b089      	sub	sp, #36	@ 0x24
 8005dc8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	61fb      	str	r3, [r7, #28]
 8005dce:	2300      	movs	r3, #0
 8005dd0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dd2:	4b3e      	ldr	r3, [pc, #248]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x108>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 030c 	and.w	r3, r3, #12
 8005dda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x108>)
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f003 0303 	and.w	r3, r3, #3
 8005de4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d005      	beq.n	8005df8 <HAL_RCC_GetSysClockFreq+0x34>
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	2b0c      	cmp	r3, #12
 8005df0:	d121      	bne.n	8005e36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d11e      	bne.n	8005e36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005df8:	4b34      	ldr	r3, [pc, #208]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x108>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0308 	and.w	r3, r3, #8
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d107      	bne.n	8005e14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e04:	4b31      	ldr	r3, [pc, #196]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x108>)
 8005e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e0a:	0a1b      	lsrs	r3, r3, #8
 8005e0c:	f003 030f 	and.w	r3, r3, #15
 8005e10:	61fb      	str	r3, [r7, #28]
 8005e12:	e005      	b.n	8005e20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e14:	4b2d      	ldr	r3, [pc, #180]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x108>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	091b      	lsrs	r3, r3, #4
 8005e1a:	f003 030f 	and.w	r3, r3, #15
 8005e1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e20:	4a2b      	ldr	r2, [pc, #172]	@ (8005ed0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10d      	bne.n	8005e4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e34:	e00a      	b.n	8005e4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	2b04      	cmp	r3, #4
 8005e3a:	d102      	bne.n	8005e42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e3c:	4b25      	ldr	r3, [pc, #148]	@ (8005ed4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e3e:	61bb      	str	r3, [r7, #24]
 8005e40:	e004      	b.n	8005e4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	d101      	bne.n	8005e4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e48:	4b23      	ldr	r3, [pc, #140]	@ (8005ed8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	2b0c      	cmp	r3, #12
 8005e50:	d134      	bne.n	8005ebc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e52:	4b1e      	ldr	r3, [pc, #120]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x108>)
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d003      	beq.n	8005e6a <HAL_RCC_GetSysClockFreq+0xa6>
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	2b03      	cmp	r3, #3
 8005e66:	d003      	beq.n	8005e70 <HAL_RCC_GetSysClockFreq+0xac>
 8005e68:	e005      	b.n	8005e76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ed4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e6c:	617b      	str	r3, [r7, #20]
      break;
 8005e6e:	e005      	b.n	8005e7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005e70:	4b19      	ldr	r3, [pc, #100]	@ (8005ed8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e72:	617b      	str	r3, [r7, #20]
      break;
 8005e74:	e002      	b.n	8005e7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	617b      	str	r3, [r7, #20]
      break;
 8005e7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e7c:	4b13      	ldr	r3, [pc, #76]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x108>)
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	091b      	lsrs	r3, r3, #4
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	3301      	adds	r3, #1
 8005e88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005e8a:	4b10      	ldr	r3, [pc, #64]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x108>)
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	0a1b      	lsrs	r3, r3, #8
 8005e90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	fb03 f202 	mul.w	r2, r3, r2
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x108>)
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	0e5b      	lsrs	r3, r3, #25
 8005ea8:	f003 0303 	and.w	r3, r3, #3
 8005eac:	3301      	adds	r3, #1
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ebc:	69bb      	ldr	r3, [r7, #24]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3724      	adds	r7, #36	@ 0x24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	08010db0 	.word	0x08010db0
 8005ed4:	00f42400 	.word	0x00f42400
 8005ed8:	007a1200 	.word	0x007a1200

08005edc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005edc:	b480      	push	{r7}
 8005ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ee0:	4b03      	ldr	r3, [pc, #12]	@ (8005ef0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	20000008 	.word	0x20000008

08005ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ef8:	f7ff fff0 	bl	8005edc <HAL_RCC_GetHCLKFreq>
 8005efc:	4602      	mov	r2, r0
 8005efe:	4b06      	ldr	r3, [pc, #24]	@ (8005f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	0a1b      	lsrs	r3, r3, #8
 8005f04:	f003 0307 	and.w	r3, r3, #7
 8005f08:	4904      	ldr	r1, [pc, #16]	@ (8005f1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f0a:	5ccb      	ldrb	r3, [r1, r3]
 8005f0c:	f003 031f 	and.w	r3, r3, #31
 8005f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	40021000 	.word	0x40021000
 8005f1c:	08010da8 	.word	0x08010da8

08005f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f24:	f7ff ffda 	bl	8005edc <HAL_RCC_GetHCLKFreq>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	4b06      	ldr	r3, [pc, #24]	@ (8005f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	0adb      	lsrs	r3, r3, #11
 8005f30:	f003 0307 	and.w	r3, r3, #7
 8005f34:	4904      	ldr	r1, [pc, #16]	@ (8005f48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f36:	5ccb      	ldrb	r3, [r1, r3]
 8005f38:	f003 031f 	and.w	r3, r3, #31
 8005f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	40021000 	.word	0x40021000
 8005f48:	08010da8 	.word	0x08010da8

08005f4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005f54:	2300      	movs	r3, #0
 8005f56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005f58:	4b2a      	ldr	r3, [pc, #168]	@ (8006004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d003      	beq.n	8005f6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005f64:	f7ff f922 	bl	80051ac <HAL_PWREx_GetVoltageRange>
 8005f68:	6178      	str	r0, [r7, #20]
 8005f6a:	e014      	b.n	8005f96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f6c:	4b25      	ldr	r3, [pc, #148]	@ (8006004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f70:	4a24      	ldr	r2, [pc, #144]	@ (8006004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f76:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f78:	4b22      	ldr	r3, [pc, #136]	@ (8006004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005f84:	f7ff f912 	bl	80051ac <HAL_PWREx_GetVoltageRange>
 8005f88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8006004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f8e:	4a1d      	ldr	r2, [pc, #116]	@ (8006004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f94:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f9c:	d10b      	bne.n	8005fb6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b80      	cmp	r3, #128	@ 0x80
 8005fa2:	d919      	bls.n	8005fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2ba0      	cmp	r3, #160	@ 0xa0
 8005fa8:	d902      	bls.n	8005fb0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005faa:	2302      	movs	r3, #2
 8005fac:	613b      	str	r3, [r7, #16]
 8005fae:	e013      	b.n	8005fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	613b      	str	r3, [r7, #16]
 8005fb4:	e010      	b.n	8005fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b80      	cmp	r3, #128	@ 0x80
 8005fba:	d902      	bls.n	8005fc2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	613b      	str	r3, [r7, #16]
 8005fc0:	e00a      	b.n	8005fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b80      	cmp	r3, #128	@ 0x80
 8005fc6:	d102      	bne.n	8005fce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005fc8:	2302      	movs	r3, #2
 8005fca:	613b      	str	r3, [r7, #16]
 8005fcc:	e004      	b.n	8005fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b70      	cmp	r3, #112	@ 0x70
 8005fd2:	d101      	bne.n	8005fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8006008 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f023 0207 	bic.w	r2, r3, #7
 8005fe0:	4909      	ldr	r1, [pc, #36]	@ (8006008 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005fe8:	4b07      	ldr	r3, [pc, #28]	@ (8006008 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0307 	and.w	r3, r3, #7
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d001      	beq.n	8005ffa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e000      	b.n	8005ffc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3718      	adds	r7, #24
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	40021000 	.word	0x40021000
 8006008:	40022000 	.word	0x40022000

0800600c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006014:	2300      	movs	r3, #0
 8006016:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006018:	2300      	movs	r3, #0
 800601a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006024:	2b00      	cmp	r3, #0
 8006026:	d041      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800602c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006030:	d02a      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006032:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006036:	d824      	bhi.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006038:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800603c:	d008      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800603e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006042:	d81e      	bhi.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00a      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006048:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800604c:	d010      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800604e:	e018      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006050:	4b86      	ldr	r3, [pc, #536]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	4a85      	ldr	r2, [pc, #532]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006056:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800605a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800605c:	e015      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3304      	adds	r3, #4
 8006062:	2100      	movs	r1, #0
 8006064:	4618      	mov	r0, r3
 8006066:	f000 facb 	bl	8006600 <RCCEx_PLLSAI1_Config>
 800606a:	4603      	mov	r3, r0
 800606c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800606e:	e00c      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3320      	adds	r3, #32
 8006074:	2100      	movs	r1, #0
 8006076:	4618      	mov	r0, r3
 8006078:	f000 fbb6 	bl	80067e8 <RCCEx_PLLSAI2_Config>
 800607c:	4603      	mov	r3, r0
 800607e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006080:	e003      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	74fb      	strb	r3, [r7, #19]
      break;
 8006086:	e000      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006088:	bf00      	nop
    }

    if(ret == HAL_OK)
 800608a:	7cfb      	ldrb	r3, [r7, #19]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10b      	bne.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006090:	4b76      	ldr	r3, [pc, #472]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006096:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800609e:	4973      	ldr	r1, [pc, #460]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80060a6:	e001      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a8:	7cfb      	ldrb	r3, [r7, #19]
 80060aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d041      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80060c0:	d02a      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80060c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80060c6:	d824      	bhi.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80060c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060cc:	d008      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80060ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060d2:	d81e      	bhi.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00a      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80060d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060dc:	d010      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80060de:	e018      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80060e0:	4b62      	ldr	r3, [pc, #392]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	4a61      	ldr	r2, [pc, #388]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060ec:	e015      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	3304      	adds	r3, #4
 80060f2:	2100      	movs	r1, #0
 80060f4:	4618      	mov	r0, r3
 80060f6:	f000 fa83 	bl	8006600 <RCCEx_PLLSAI1_Config>
 80060fa:	4603      	mov	r3, r0
 80060fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060fe:	e00c      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3320      	adds	r3, #32
 8006104:	2100      	movs	r1, #0
 8006106:	4618      	mov	r0, r3
 8006108:	f000 fb6e 	bl	80067e8 <RCCEx_PLLSAI2_Config>
 800610c:	4603      	mov	r3, r0
 800610e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006110:	e003      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	74fb      	strb	r3, [r7, #19]
      break;
 8006116:	e000      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006118:	bf00      	nop
    }

    if(ret == HAL_OK)
 800611a:	7cfb      	ldrb	r3, [r7, #19]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10b      	bne.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006120:	4b52      	ldr	r3, [pc, #328]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006126:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800612e:	494f      	ldr	r1, [pc, #316]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006130:	4313      	orrs	r3, r2
 8006132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006136:	e001      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006138:	7cfb      	ldrb	r3, [r7, #19]
 800613a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 80a0 	beq.w	800628a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800614a:	2300      	movs	r3, #0
 800614c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800614e:	4b47      	ldr	r3, [pc, #284]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800615a:	2301      	movs	r3, #1
 800615c:	e000      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800615e:	2300      	movs	r3, #0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00d      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006164:	4b41      	ldr	r3, [pc, #260]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006168:	4a40      	ldr	r2, [pc, #256]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800616a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800616e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006170:	4b3e      	ldr	r3, [pc, #248]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006178:	60bb      	str	r3, [r7, #8]
 800617a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800617c:	2301      	movs	r3, #1
 800617e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006180:	4b3b      	ldr	r3, [pc, #236]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a3a      	ldr	r2, [pc, #232]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006186:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800618a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800618c:	f7fd fadc 	bl	8003748 <HAL_GetTick>
 8006190:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006192:	e009      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006194:	f7fd fad8 	bl	8003748 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d902      	bls.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	74fb      	strb	r3, [r7, #19]
        break;
 80061a6:	e005      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80061a8:	4b31      	ldr	r3, [pc, #196]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d0ef      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80061b4:	7cfb      	ldrb	r3, [r7, #19]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d15c      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80061ba:	4b2c      	ldr	r3, [pc, #176]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d01f      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d019      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80061d8:	4b24      	ldr	r3, [pc, #144]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061e4:	4b21      	ldr	r3, [pc, #132]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061ea:	4a20      	ldr	r2, [pc, #128]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061f4:	4b1d      	ldr	r3, [pc, #116]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061fa:	4a1c      	ldr	r2, [pc, #112]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006200:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006204:	4a19      	ldr	r2, [pc, #100]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d016      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006216:	f7fd fa97 	bl	8003748 <HAL_GetTick>
 800621a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800621c:	e00b      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800621e:	f7fd fa93 	bl	8003748 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	f241 3288 	movw	r2, #5000	@ 0x1388
 800622c:	4293      	cmp	r3, r2
 800622e:	d902      	bls.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	74fb      	strb	r3, [r7, #19]
            break;
 8006234:	e006      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006236:	4b0d      	ldr	r3, [pc, #52]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b00      	cmp	r3, #0
 8006242:	d0ec      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006244:	7cfb      	ldrb	r3, [r7, #19]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10c      	bne.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800624a:	4b08      	ldr	r3, [pc, #32]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800624c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006250:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800625a:	4904      	ldr	r1, [pc, #16]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800625c:	4313      	orrs	r3, r2
 800625e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006262:	e009      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006264:	7cfb      	ldrb	r3, [r7, #19]
 8006266:	74bb      	strb	r3, [r7, #18]
 8006268:	e006      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800626a:	bf00      	nop
 800626c:	40021000 	.word	0x40021000
 8006270:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006274:	7cfb      	ldrb	r3, [r7, #19]
 8006276:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006278:	7c7b      	ldrb	r3, [r7, #17]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d105      	bne.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800627e:	4b9e      	ldr	r3, [pc, #632]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006282:	4a9d      	ldr	r2, [pc, #628]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006284:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006288:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00a      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006296:	4b98      	ldr	r3, [pc, #608]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800629c:	f023 0203 	bic.w	r2, r3, #3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a4:	4994      	ldr	r1, [pc, #592]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00a      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062b8:	4b8f      	ldr	r3, [pc, #572]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062be:	f023 020c 	bic.w	r2, r3, #12
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062c6:	498c      	ldr	r1, [pc, #560]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0304 	and.w	r3, r3, #4
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00a      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062da:	4b87      	ldr	r3, [pc, #540]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e8:	4983      	ldr	r1, [pc, #524]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0308 	and.w	r3, r3, #8
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00a      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80062fc:	4b7e      	ldr	r3, [pc, #504]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006302:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800630a:	497b      	ldr	r1, [pc, #492]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800630c:	4313      	orrs	r3, r2
 800630e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0310 	and.w	r3, r3, #16
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00a      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800631e:	4b76      	ldr	r3, [pc, #472]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006324:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800632c:	4972      	ldr	r1, [pc, #456]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800632e:	4313      	orrs	r3, r2
 8006330:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0320 	and.w	r3, r3, #32
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00a      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006340:	4b6d      	ldr	r3, [pc, #436]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006346:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800634e:	496a      	ldr	r1, [pc, #424]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006350:	4313      	orrs	r3, r2
 8006352:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00a      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006362:	4b65      	ldr	r3, [pc, #404]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006368:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006370:	4961      	ldr	r1, [pc, #388]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006372:	4313      	orrs	r3, r2
 8006374:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00a      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006384:	4b5c      	ldr	r3, [pc, #368]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800638a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006392:	4959      	ldr	r1, [pc, #356]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006394:	4313      	orrs	r3, r2
 8006396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063a6:	4b54      	ldr	r3, [pc, #336]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063b4:	4950      	ldr	r1, [pc, #320]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00a      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80063c8:	4b4b      	ldr	r3, [pc, #300]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063d6:	4948      	ldr	r1, [pc, #288]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00a      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80063ea:	4b43      	ldr	r3, [pc, #268]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063f8:	493f      	ldr	r1, [pc, #252]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d028      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800640c:	4b3a      	ldr	r3, [pc, #232]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800640e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006412:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800641a:	4937      	ldr	r1, [pc, #220]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800641c:	4313      	orrs	r3, r2
 800641e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006426:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800642a:	d106      	bne.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800642c:	4b32      	ldr	r3, [pc, #200]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	4a31      	ldr	r2, [pc, #196]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006432:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006436:	60d3      	str	r3, [r2, #12]
 8006438:	e011      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800643e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006442:	d10c      	bne.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3304      	adds	r3, #4
 8006448:	2101      	movs	r1, #1
 800644a:	4618      	mov	r0, r3
 800644c:	f000 f8d8 	bl	8006600 <RCCEx_PLLSAI1_Config>
 8006450:	4603      	mov	r3, r0
 8006452:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006454:	7cfb      	ldrb	r3, [r7, #19]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800645a:	7cfb      	ldrb	r3, [r7, #19]
 800645c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d028      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800646a:	4b23      	ldr	r3, [pc, #140]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800646c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006470:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006478:	491f      	ldr	r1, [pc, #124]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800647a:	4313      	orrs	r3, r2
 800647c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006484:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006488:	d106      	bne.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800648a:	4b1b      	ldr	r3, [pc, #108]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	4a1a      	ldr	r2, [pc, #104]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006490:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006494:	60d3      	str	r3, [r2, #12]
 8006496:	e011      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800649c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064a0:	d10c      	bne.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	3304      	adds	r3, #4
 80064a6:	2101      	movs	r1, #1
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 f8a9 	bl	8006600 <RCCEx_PLLSAI1_Config>
 80064ae:	4603      	mov	r3, r0
 80064b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064b2:	7cfb      	ldrb	r3, [r7, #19]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80064b8:	7cfb      	ldrb	r3, [r7, #19]
 80064ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d02b      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064c8:	4b0b      	ldr	r3, [pc, #44]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064d6:	4908      	ldr	r1, [pc, #32]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064e6:	d109      	bne.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064e8:	4b03      	ldr	r3, [pc, #12]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	4a02      	ldr	r2, [pc, #8]	@ (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064f2:	60d3      	str	r3, [r2, #12]
 80064f4:	e014      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80064f6:	bf00      	nop
 80064f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006500:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006504:	d10c      	bne.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	3304      	adds	r3, #4
 800650a:	2101      	movs	r1, #1
 800650c:	4618      	mov	r0, r3
 800650e:	f000 f877 	bl	8006600 <RCCEx_PLLSAI1_Config>
 8006512:	4603      	mov	r3, r0
 8006514:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006516:	7cfb      	ldrb	r3, [r7, #19]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d001      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800651c:	7cfb      	ldrb	r3, [r7, #19]
 800651e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d02f      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800652c:	4b2b      	ldr	r3, [pc, #172]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800652e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006532:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800653a:	4928      	ldr	r1, [pc, #160]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800653c:	4313      	orrs	r3, r2
 800653e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006546:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800654a:	d10d      	bne.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	3304      	adds	r3, #4
 8006550:	2102      	movs	r1, #2
 8006552:	4618      	mov	r0, r3
 8006554:	f000 f854 	bl	8006600 <RCCEx_PLLSAI1_Config>
 8006558:	4603      	mov	r3, r0
 800655a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800655c:	7cfb      	ldrb	r3, [r7, #19]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d014      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006562:	7cfb      	ldrb	r3, [r7, #19]
 8006564:	74bb      	strb	r3, [r7, #18]
 8006566:	e011      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800656c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006570:	d10c      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	3320      	adds	r3, #32
 8006576:	2102      	movs	r1, #2
 8006578:	4618      	mov	r0, r3
 800657a:	f000 f935 	bl	80067e8 <RCCEx_PLLSAI2_Config>
 800657e:	4603      	mov	r3, r0
 8006580:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006582:	7cfb      	ldrb	r3, [r7, #19]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006588:	7cfb      	ldrb	r3, [r7, #19]
 800658a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00a      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006598:	4b10      	ldr	r3, [pc, #64]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800659a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800659e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065a6:	490d      	ldr	r1, [pc, #52]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00b      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80065ba:	4b08      	ldr	r3, [pc, #32]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065ca:	4904      	ldr	r1, [pc, #16]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80065d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3718      	adds	r7, #24
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	40021000 	.word	0x40021000

080065e0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80065e0:	b480      	push	{r7}
 80065e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80065e4:	4b05      	ldr	r3, [pc, #20]	@ (80065fc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a04      	ldr	r2, [pc, #16]	@ (80065fc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80065ea:	f043 0304 	orr.w	r3, r3, #4
 80065ee:	6013      	str	r3, [r2, #0]
}
 80065f0:	bf00      	nop
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	40021000 	.word	0x40021000

08006600 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800660e:	4b75      	ldr	r3, [pc, #468]	@ (80067e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f003 0303 	and.w	r3, r3, #3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d018      	beq.n	800664c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800661a:	4b72      	ldr	r3, [pc, #456]	@ (80067e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	f003 0203 	and.w	r2, r3, #3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	429a      	cmp	r2, r3
 8006628:	d10d      	bne.n	8006646 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
       ||
 800662e:	2b00      	cmp	r3, #0
 8006630:	d009      	beq.n	8006646 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006632:	4b6c      	ldr	r3, [pc, #432]	@ (80067e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	091b      	lsrs	r3, r3, #4
 8006638:	f003 0307 	and.w	r3, r3, #7
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
       ||
 8006642:	429a      	cmp	r2, r3
 8006644:	d047      	beq.n	80066d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	73fb      	strb	r3, [r7, #15]
 800664a:	e044      	b.n	80066d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b03      	cmp	r3, #3
 8006652:	d018      	beq.n	8006686 <RCCEx_PLLSAI1_Config+0x86>
 8006654:	2b03      	cmp	r3, #3
 8006656:	d825      	bhi.n	80066a4 <RCCEx_PLLSAI1_Config+0xa4>
 8006658:	2b01      	cmp	r3, #1
 800665a:	d002      	beq.n	8006662 <RCCEx_PLLSAI1_Config+0x62>
 800665c:	2b02      	cmp	r3, #2
 800665e:	d009      	beq.n	8006674 <RCCEx_PLLSAI1_Config+0x74>
 8006660:	e020      	b.n	80066a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006662:	4b60      	ldr	r3, [pc, #384]	@ (80067e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b00      	cmp	r3, #0
 800666c:	d11d      	bne.n	80066aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006672:	e01a      	b.n	80066aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006674:	4b5b      	ldr	r3, [pc, #364]	@ (80067e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800667c:	2b00      	cmp	r3, #0
 800667e:	d116      	bne.n	80066ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006684:	e013      	b.n	80066ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006686:	4b57      	ldr	r3, [pc, #348]	@ (80067e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10f      	bne.n	80066b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006692:	4b54      	ldr	r3, [pc, #336]	@ (80067e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d109      	bne.n	80066b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80066a2:	e006      	b.n	80066b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	73fb      	strb	r3, [r7, #15]
      break;
 80066a8:	e004      	b.n	80066b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80066aa:	bf00      	nop
 80066ac:	e002      	b.n	80066b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80066ae:	bf00      	nop
 80066b0:	e000      	b.n	80066b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80066b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10d      	bne.n	80066d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80066ba:	4b4a      	ldr	r3, [pc, #296]	@ (80067e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6819      	ldr	r1, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	3b01      	subs	r3, #1
 80066cc:	011b      	lsls	r3, r3, #4
 80066ce:	430b      	orrs	r3, r1
 80066d0:	4944      	ldr	r1, [pc, #272]	@ (80067e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80066d6:	7bfb      	ldrb	r3, [r7, #15]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d17d      	bne.n	80067d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80066dc:	4b41      	ldr	r3, [pc, #260]	@ (80067e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a40      	ldr	r2, [pc, #256]	@ (80067e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80066e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066e8:	f7fd f82e 	bl	8003748 <HAL_GetTick>
 80066ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80066ee:	e009      	b.n	8006704 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066f0:	f7fd f82a 	bl	8003748 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d902      	bls.n	8006704 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	73fb      	strb	r3, [r7, #15]
        break;
 8006702:	e005      	b.n	8006710 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006704:	4b37      	ldr	r3, [pc, #220]	@ (80067e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1ef      	bne.n	80066f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006710:	7bfb      	ldrb	r3, [r7, #15]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d160      	bne.n	80067d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d111      	bne.n	8006740 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800671c:	4b31      	ldr	r3, [pc, #196]	@ (80067e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006724:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	6892      	ldr	r2, [r2, #8]
 800672c:	0211      	lsls	r1, r2, #8
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	68d2      	ldr	r2, [r2, #12]
 8006732:	0912      	lsrs	r2, r2, #4
 8006734:	0452      	lsls	r2, r2, #17
 8006736:	430a      	orrs	r2, r1
 8006738:	492a      	ldr	r1, [pc, #168]	@ (80067e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800673a:	4313      	orrs	r3, r2
 800673c:	610b      	str	r3, [r1, #16]
 800673e:	e027      	b.n	8006790 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d112      	bne.n	800676c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006746:	4b27      	ldr	r3, [pc, #156]	@ (80067e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800674e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	6892      	ldr	r2, [r2, #8]
 8006756:	0211      	lsls	r1, r2, #8
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	6912      	ldr	r2, [r2, #16]
 800675c:	0852      	lsrs	r2, r2, #1
 800675e:	3a01      	subs	r2, #1
 8006760:	0552      	lsls	r2, r2, #21
 8006762:	430a      	orrs	r2, r1
 8006764:	491f      	ldr	r1, [pc, #124]	@ (80067e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006766:	4313      	orrs	r3, r2
 8006768:	610b      	str	r3, [r1, #16]
 800676a:	e011      	b.n	8006790 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800676c:	4b1d      	ldr	r3, [pc, #116]	@ (80067e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006774:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	6892      	ldr	r2, [r2, #8]
 800677c:	0211      	lsls	r1, r2, #8
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	6952      	ldr	r2, [r2, #20]
 8006782:	0852      	lsrs	r2, r2, #1
 8006784:	3a01      	subs	r2, #1
 8006786:	0652      	lsls	r2, r2, #25
 8006788:	430a      	orrs	r2, r1
 800678a:	4916      	ldr	r1, [pc, #88]	@ (80067e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800678c:	4313      	orrs	r3, r2
 800678e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006790:	4b14      	ldr	r3, [pc, #80]	@ (80067e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a13      	ldr	r2, [pc, #76]	@ (80067e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006796:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800679a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800679c:	f7fc ffd4 	bl	8003748 <HAL_GetTick>
 80067a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80067a2:	e009      	b.n	80067b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067a4:	f7fc ffd0 	bl	8003748 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d902      	bls.n	80067b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	73fb      	strb	r3, [r7, #15]
          break;
 80067b6:	e005      	b.n	80067c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80067b8:	4b0a      	ldr	r3, [pc, #40]	@ (80067e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d0ef      	beq.n	80067a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d106      	bne.n	80067d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80067ca:	4b06      	ldr	r3, [pc, #24]	@ (80067e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067cc:	691a      	ldr	r2, [r3, #16]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	4904      	ldr	r1, [pc, #16]	@ (80067e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	40021000 	.word	0x40021000

080067e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067f2:	2300      	movs	r3, #0
 80067f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80067f6:	4b6a      	ldr	r3, [pc, #424]	@ (80069a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	f003 0303 	and.w	r3, r3, #3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d018      	beq.n	8006834 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006802:	4b67      	ldr	r3, [pc, #412]	@ (80069a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f003 0203 	and.w	r2, r3, #3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	429a      	cmp	r2, r3
 8006810:	d10d      	bne.n	800682e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
       ||
 8006816:	2b00      	cmp	r3, #0
 8006818:	d009      	beq.n	800682e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800681a:	4b61      	ldr	r3, [pc, #388]	@ (80069a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	091b      	lsrs	r3, r3, #4
 8006820:	f003 0307 	and.w	r3, r3, #7
 8006824:	1c5a      	adds	r2, r3, #1
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
       ||
 800682a:	429a      	cmp	r2, r3
 800682c:	d047      	beq.n	80068be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	73fb      	strb	r3, [r7, #15]
 8006832:	e044      	b.n	80068be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2b03      	cmp	r3, #3
 800683a:	d018      	beq.n	800686e <RCCEx_PLLSAI2_Config+0x86>
 800683c:	2b03      	cmp	r3, #3
 800683e:	d825      	bhi.n	800688c <RCCEx_PLLSAI2_Config+0xa4>
 8006840:	2b01      	cmp	r3, #1
 8006842:	d002      	beq.n	800684a <RCCEx_PLLSAI2_Config+0x62>
 8006844:	2b02      	cmp	r3, #2
 8006846:	d009      	beq.n	800685c <RCCEx_PLLSAI2_Config+0x74>
 8006848:	e020      	b.n	800688c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800684a:	4b55      	ldr	r3, [pc, #340]	@ (80069a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d11d      	bne.n	8006892 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800685a:	e01a      	b.n	8006892 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800685c:	4b50      	ldr	r3, [pc, #320]	@ (80069a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006864:	2b00      	cmp	r3, #0
 8006866:	d116      	bne.n	8006896 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800686c:	e013      	b.n	8006896 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800686e:	4b4c      	ldr	r3, [pc, #304]	@ (80069a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10f      	bne.n	800689a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800687a:	4b49      	ldr	r3, [pc, #292]	@ (80069a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d109      	bne.n	800689a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800688a:	e006      	b.n	800689a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	73fb      	strb	r3, [r7, #15]
      break;
 8006890:	e004      	b.n	800689c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006892:	bf00      	nop
 8006894:	e002      	b.n	800689c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006896:	bf00      	nop
 8006898:	e000      	b.n	800689c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800689a:	bf00      	nop
    }

    if(status == HAL_OK)
 800689c:	7bfb      	ldrb	r3, [r7, #15]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10d      	bne.n	80068be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80068a2:	4b3f      	ldr	r3, [pc, #252]	@ (80069a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6819      	ldr	r1, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	3b01      	subs	r3, #1
 80068b4:	011b      	lsls	r3, r3, #4
 80068b6:	430b      	orrs	r3, r1
 80068b8:	4939      	ldr	r1, [pc, #228]	@ (80069a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80068be:	7bfb      	ldrb	r3, [r7, #15]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d167      	bne.n	8006994 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80068c4:	4b36      	ldr	r3, [pc, #216]	@ (80069a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a35      	ldr	r2, [pc, #212]	@ (80069a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068d0:	f7fc ff3a 	bl	8003748 <HAL_GetTick>
 80068d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80068d6:	e009      	b.n	80068ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80068d8:	f7fc ff36 	bl	8003748 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d902      	bls.n	80068ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	73fb      	strb	r3, [r7, #15]
        break;
 80068ea:	e005      	b.n	80068f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80068ec:	4b2c      	ldr	r3, [pc, #176]	@ (80069a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1ef      	bne.n	80068d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d14a      	bne.n	8006994 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d111      	bne.n	8006928 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006904:	4b26      	ldr	r3, [pc, #152]	@ (80069a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006906:	695b      	ldr	r3, [r3, #20]
 8006908:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800690c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	6892      	ldr	r2, [r2, #8]
 8006914:	0211      	lsls	r1, r2, #8
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	68d2      	ldr	r2, [r2, #12]
 800691a:	0912      	lsrs	r2, r2, #4
 800691c:	0452      	lsls	r2, r2, #17
 800691e:	430a      	orrs	r2, r1
 8006920:	491f      	ldr	r1, [pc, #124]	@ (80069a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006922:	4313      	orrs	r3, r2
 8006924:	614b      	str	r3, [r1, #20]
 8006926:	e011      	b.n	800694c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006928:	4b1d      	ldr	r3, [pc, #116]	@ (80069a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006930:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6892      	ldr	r2, [r2, #8]
 8006938:	0211      	lsls	r1, r2, #8
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	6912      	ldr	r2, [r2, #16]
 800693e:	0852      	lsrs	r2, r2, #1
 8006940:	3a01      	subs	r2, #1
 8006942:	0652      	lsls	r2, r2, #25
 8006944:	430a      	orrs	r2, r1
 8006946:	4916      	ldr	r1, [pc, #88]	@ (80069a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006948:	4313      	orrs	r3, r2
 800694a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800694c:	4b14      	ldr	r3, [pc, #80]	@ (80069a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a13      	ldr	r2, [pc, #76]	@ (80069a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006952:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006956:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006958:	f7fc fef6 	bl	8003748 <HAL_GetTick>
 800695c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800695e:	e009      	b.n	8006974 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006960:	f7fc fef2 	bl	8003748 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b02      	cmp	r3, #2
 800696c:	d902      	bls.n	8006974 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	73fb      	strb	r3, [r7, #15]
          break;
 8006972:	e005      	b.n	8006980 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006974:	4b0a      	ldr	r3, [pc, #40]	@ (80069a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d0ef      	beq.n	8006960 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006980:	7bfb      	ldrb	r3, [r7, #15]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d106      	bne.n	8006994 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006986:	4b06      	ldr	r3, [pc, #24]	@ (80069a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006988:	695a      	ldr	r2, [r3, #20]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	4904      	ldr	r1, [pc, #16]	@ (80069a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006990:	4313      	orrs	r3, r2
 8006992:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006994:	7bfb      	ldrb	r3, [r7, #15]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	40021000 	.word	0x40021000

080069a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d101      	bne.n	80069b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e095      	b.n	8006ae2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d108      	bne.n	80069d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069c6:	d009      	beq.n	80069dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	61da      	str	r2, [r3, #28]
 80069ce:	e005      	b.n	80069dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d106      	bne.n	80069fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f877 	bl	8006aea <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006a1c:	d902      	bls.n	8006a24 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]
 8006a22:	e002      	b.n	8006a2a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006a24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006a28:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006a32:	d007      	beq.n	8006a44 <HAL_SPI_Init+0xa0>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006a3c:	d002      	beq.n	8006a44 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006a54:	431a      	orrs	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	431a      	orrs	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a72:	431a      	orrs	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a7c:	431a      	orrs	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a86:	ea42 0103 	orr.w	r1, r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a8e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	0c1b      	lsrs	r3, r3, #16
 8006aa0:	f003 0204 	and.w	r2, r3, #4
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa8:	f003 0310 	and.w	r3, r3, #16
 8006aac:	431a      	orrs	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ab2:	f003 0308 	and.w	r3, r3, #8
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006ac0:	ea42 0103 	orr.w	r1, r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006af2:	bf00      	nop
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b08a      	sub	sp, #40	@ 0x28
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	60f8      	str	r0, [r7, #12]
 8006b06:	60b9      	str	r1, [r7, #8]
 8006b08:	607a      	str	r2, [r7, #4]
 8006b0a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b10:	f7fc fe1a 	bl	8003748 <HAL_GetTick>
 8006b14:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b1c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006b24:	887b      	ldrh	r3, [r7, #2]
 8006b26:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006b28:	887b      	ldrh	r3, [r7, #2]
 8006b2a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b2c:	7ffb      	ldrb	r3, [r7, #31]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d00c      	beq.n	8006b4c <HAL_SPI_TransmitReceive+0x4e>
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b38:	d106      	bne.n	8006b48 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d102      	bne.n	8006b48 <HAL_SPI_TransmitReceive+0x4a>
 8006b42:	7ffb      	ldrb	r3, [r7, #31]
 8006b44:	2b04      	cmp	r3, #4
 8006b46:	d001      	beq.n	8006b4c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006b48:	2302      	movs	r3, #2
 8006b4a:	e1f3      	b.n	8006f34 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d005      	beq.n	8006b5e <HAL_SPI_TransmitReceive+0x60>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d002      	beq.n	8006b5e <HAL_SPI_TransmitReceive+0x60>
 8006b58:	887b      	ldrh	r3, [r7, #2]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e1e8      	b.n	8006f34 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d101      	bne.n	8006b70 <HAL_SPI_TransmitReceive+0x72>
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	e1e1      	b.n	8006f34 <HAL_SPI_TransmitReceive+0x436>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b04      	cmp	r3, #4
 8006b82:	d003      	beq.n	8006b8c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2205      	movs	r2, #5
 8006b88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	887a      	ldrh	r2, [r7, #2]
 8006b9c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	887a      	ldrh	r2, [r7, #2]
 8006ba4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	887a      	ldrh	r2, [r7, #2]
 8006bb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	887a      	ldrh	r2, [r7, #2]
 8006bb8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006bce:	d802      	bhi.n	8006bd6 <HAL_SPI_TransmitReceive+0xd8>
 8006bd0:	8abb      	ldrh	r3, [r7, #20]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d908      	bls.n	8006be8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006be4:	605a      	str	r2, [r3, #4]
 8006be6:	e007      	b.n	8006bf8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006bf6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c02:	2b40      	cmp	r3, #64	@ 0x40
 8006c04:	d007      	beq.n	8006c16 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c1e:	f240 8083 	bls.w	8006d28 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d002      	beq.n	8006c30 <HAL_SPI_TransmitReceive+0x132>
 8006c2a:	8afb      	ldrh	r3, [r7, #22]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d16f      	bne.n	8006d10 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c34:	881a      	ldrh	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c40:	1c9a      	adds	r2, r3, #2
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c54:	e05c      	b.n	8006d10 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f003 0302 	and.w	r3, r3, #2
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d11b      	bne.n	8006c9c <HAL_SPI_TransmitReceive+0x19e>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d016      	beq.n	8006c9c <HAL_SPI_TransmitReceive+0x19e>
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d113      	bne.n	8006c9c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c78:	881a      	ldrh	r2, [r3, #0]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c84:	1c9a      	adds	r2, r3, #2
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	3b01      	subs	r3, #1
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d11c      	bne.n	8006ce4 <HAL_SPI_TransmitReceive+0x1e6>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d016      	beq.n	8006ce4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68da      	ldr	r2, [r3, #12]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc0:	b292      	uxth	r2, r2
 8006cc2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc8:	1c9a      	adds	r2, r3, #2
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ce4:	f7fc fd30 	bl	8003748 <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d80d      	bhi.n	8006d10 <HAL_SPI_TransmitReceive+0x212>
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cfa:	d009      	beq.n	8006d10 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e111      	b.n	8006f34 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d19d      	bne.n	8006c56 <HAL_SPI_TransmitReceive+0x158>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d197      	bne.n	8006c56 <HAL_SPI_TransmitReceive+0x158>
 8006d26:	e0e5      	b.n	8006ef4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d003      	beq.n	8006d38 <HAL_SPI_TransmitReceive+0x23a>
 8006d30:	8afb      	ldrh	r3, [r7, #22]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	f040 80d1 	bne.w	8006eda <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d912      	bls.n	8006d68 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d46:	881a      	ldrh	r2, [r3, #0]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d52:	1c9a      	adds	r2, r3, #2
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	3b02      	subs	r3, #2
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006d66:	e0b8      	b.n	8006eda <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	330c      	adds	r3, #12
 8006d72:	7812      	ldrb	r2, [r2, #0]
 8006d74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d7a:	1c5a      	adds	r2, r3, #1
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	3b01      	subs	r3, #1
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d8e:	e0a4      	b.n	8006eda <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f003 0302 	and.w	r3, r3, #2
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d134      	bne.n	8006e08 <HAL_SPI_TransmitReceive+0x30a>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d02f      	beq.n	8006e08 <HAL_SPI_TransmitReceive+0x30a>
 8006da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d12c      	bne.n	8006e08 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d912      	bls.n	8006dde <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dbc:	881a      	ldrh	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc8:	1c9a      	adds	r2, r3, #2
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	3b02      	subs	r3, #2
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ddc:	e012      	b.n	8006e04 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	330c      	adds	r3, #12
 8006de8:	7812      	ldrb	r2, [r2, #0]
 8006dea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d148      	bne.n	8006ea8 <HAL_SPI_TransmitReceive+0x3aa>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d042      	beq.n	8006ea8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d923      	bls.n	8006e76 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68da      	ldr	r2, [r3, #12]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e38:	b292      	uxth	r2, r2
 8006e3a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e40:	1c9a      	adds	r2, r3, #2
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	3b02      	subs	r3, #2
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d81f      	bhi.n	8006ea4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006e72:	605a      	str	r2, [r3, #4]
 8006e74:	e016      	b.n	8006ea4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f103 020c 	add.w	r2, r3, #12
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e82:	7812      	ldrb	r2, [r2, #0]
 8006e84:	b2d2      	uxtb	r2, r2
 8006e86:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e8c:	1c5a      	adds	r2, r3, #1
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ea8:	f7fc fc4e 	bl	8003748 <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d803      	bhi.n	8006ec0 <HAL_SPI_TransmitReceive+0x3c2>
 8006eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebe:	d102      	bne.n	8006ec6 <HAL_SPI_TransmitReceive+0x3c8>
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d109      	bne.n	8006eda <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e02c      	b.n	8006f34 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f47f af55 	bne.w	8006d90 <HAL_SPI_TransmitReceive+0x292>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f47f af4e 	bne.w	8006d90 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ef4:	6a3a      	ldr	r2, [r7, #32]
 8006ef6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 f94b 	bl	8007194 <SPI_EndRxTxTransaction>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d008      	beq.n	8006f16 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2220      	movs	r2, #32
 8006f08:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e00e      	b.n	8006f34 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d001      	beq.n	8006f32 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e000      	b.n	8006f34 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006f32:	2300      	movs	r3, #0
  }
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3728      	adds	r7, #40	@ 0x28
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f4a:	b2db      	uxtb	r3, r3
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b088      	sub	sp, #32
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	603b      	str	r3, [r7, #0]
 8006f64:	4613      	mov	r3, r2
 8006f66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f68:	f7fc fbee 	bl	8003748 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f70:	1a9b      	subs	r3, r3, r2
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	4413      	add	r3, r2
 8006f76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f78:	f7fc fbe6 	bl	8003748 <HAL_GetTick>
 8006f7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f7e:	4b39      	ldr	r3, [pc, #228]	@ (8007064 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	015b      	lsls	r3, r3, #5
 8006f84:	0d1b      	lsrs	r3, r3, #20
 8006f86:	69fa      	ldr	r2, [r7, #28]
 8006f88:	fb02 f303 	mul.w	r3, r2, r3
 8006f8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f8e:	e054      	b.n	800703a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f96:	d050      	beq.n	800703a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f98:	f7fc fbd6 	bl	8003748 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	69fa      	ldr	r2, [r7, #28]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d902      	bls.n	8006fae <SPI_WaitFlagStateUntilTimeout+0x56>
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d13d      	bne.n	800702a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006fbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fc6:	d111      	bne.n	8006fec <SPI_WaitFlagStateUntilTimeout+0x94>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fd0:	d004      	beq.n	8006fdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fda:	d107      	bne.n	8006fec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ff4:	d10f      	bne.n	8007016 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007004:	601a      	str	r2, [r3, #0]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007014:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e017      	b.n	800705a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	3b01      	subs	r3, #1
 8007038:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	689a      	ldr	r2, [r3, #8]
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	4013      	ands	r3, r2
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	429a      	cmp	r2, r3
 8007048:	bf0c      	ite	eq
 800704a:	2301      	moveq	r3, #1
 800704c:	2300      	movne	r3, #0
 800704e:	b2db      	uxtb	r3, r3
 8007050:	461a      	mov	r2, r3
 8007052:	79fb      	ldrb	r3, [r7, #7]
 8007054:	429a      	cmp	r2, r3
 8007056:	d19b      	bne.n	8006f90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3720      	adds	r7, #32
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	20000008 	.word	0x20000008

08007068 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b08a      	sub	sp, #40	@ 0x28
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
 8007074:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007076:	2300      	movs	r3, #0
 8007078:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800707a:	f7fc fb65 	bl	8003748 <HAL_GetTick>
 800707e:	4602      	mov	r2, r0
 8007080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007082:	1a9b      	subs	r3, r3, r2
 8007084:	683a      	ldr	r2, [r7, #0]
 8007086:	4413      	add	r3, r2
 8007088:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800708a:	f7fc fb5d 	bl	8003748 <HAL_GetTick>
 800708e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	330c      	adds	r3, #12
 8007096:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007098:	4b3d      	ldr	r3, [pc, #244]	@ (8007190 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	4613      	mov	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	00da      	lsls	r2, r3, #3
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	0d1b      	lsrs	r3, r3, #20
 80070a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070aa:	fb02 f303 	mul.w	r3, r2, r3
 80070ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80070b0:	e060      	b.n	8007174 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80070b8:	d107      	bne.n	80070ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d104      	bne.n	80070ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80070c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d0:	d050      	beq.n	8007174 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070d2:	f7fc fb39 	bl	8003748 <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070de:	429a      	cmp	r2, r3
 80070e0:	d902      	bls.n	80070e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80070e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d13d      	bne.n	8007164 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80070f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007100:	d111      	bne.n	8007126 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800710a:	d004      	beq.n	8007116 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007114:	d107      	bne.n	8007126 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007124:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800712a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800712e:	d10f      	bne.n	8007150 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800713e:	601a      	str	r2, [r3, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800714e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e010      	b.n	8007186 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800716a:	2300      	movs	r3, #0
 800716c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	3b01      	subs	r3, #1
 8007172:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689a      	ldr	r2, [r3, #8]
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	4013      	ands	r3, r2
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	429a      	cmp	r2, r3
 8007182:	d196      	bne.n	80070b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3728      	adds	r7, #40	@ 0x28
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	20000008 	.word	0x20000008

08007194 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b086      	sub	sp, #24
 8007198:	af02      	add	r7, sp, #8
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f7ff ff5b 	bl	8007068 <SPI_WaitFifoStateUntilTimeout>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d007      	beq.n	80071c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071bc:	f043 0220 	orr.w	r2, r3, #32
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e027      	b.n	8007218 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	2200      	movs	r2, #0
 80071d0:	2180      	movs	r1, #128	@ 0x80
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f7ff fec0 	bl	8006f58 <SPI_WaitFlagStateUntilTimeout>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d007      	beq.n	80071ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071e2:	f043 0220 	orr.w	r2, r3, #32
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e014      	b.n	8007218 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f7ff ff34 	bl	8007068 <SPI_WaitFifoStateUntilTimeout>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d007      	beq.n	8007216 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800720a:	f043 0220 	orr.w	r2, r3, #32
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e000      	b.n	8007218 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e040      	b.n	80072b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007236:	2b00      	cmp	r3, #0
 8007238:	d106      	bne.n	8007248 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7fb fa28 	bl	8002698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2224      	movs	r2, #36	@ 0x24
 800724c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f022 0201 	bic.w	r2, r2, #1
 800725c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007262:	2b00      	cmp	r3, #0
 8007264:	d002      	beq.n	800726c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fb6a 	bl	8007940 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f8af 	bl	80073d0 <UART_SetConfig>
 8007272:	4603      	mov	r3, r0
 8007274:	2b01      	cmp	r3, #1
 8007276:	d101      	bne.n	800727c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e01b      	b.n	80072b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800728a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	689a      	ldr	r2, [r3, #8]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800729a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f042 0201 	orr.w	r2, r2, #1
 80072aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fbe9 	bl	8007a84 <UART_CheckIdleState>
 80072b2:	4603      	mov	r3, r0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b08a      	sub	sp, #40	@ 0x28
 80072c0:	af02      	add	r7, sp, #8
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	603b      	str	r3, [r7, #0]
 80072c8:	4613      	mov	r3, r2
 80072ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072d0:	2b20      	cmp	r3, #32
 80072d2:	d177      	bne.n	80073c4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d002      	beq.n	80072e0 <HAL_UART_Transmit+0x24>
 80072da:	88fb      	ldrh	r3, [r7, #6]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d101      	bne.n	80072e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e070      	b.n	80073c6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2221      	movs	r2, #33	@ 0x21
 80072f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072f2:	f7fc fa29 	bl	8003748 <HAL_GetTick>
 80072f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	88fa      	ldrh	r2, [r7, #6]
 80072fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	88fa      	ldrh	r2, [r7, #6]
 8007304:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007310:	d108      	bne.n	8007324 <HAL_UART_Transmit+0x68>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d104      	bne.n	8007324 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800731a:	2300      	movs	r3, #0
 800731c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	61bb      	str	r3, [r7, #24]
 8007322:	e003      	b.n	800732c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007328:	2300      	movs	r3, #0
 800732a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800732c:	e02f      	b.n	800738e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	2200      	movs	r2, #0
 8007336:	2180      	movs	r1, #128	@ 0x80
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f000 fc4b 	bl	8007bd4 <UART_WaitOnFlagUntilTimeout>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d004      	beq.n	800734e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2220      	movs	r2, #32
 8007348:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e03b      	b.n	80073c6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d10b      	bne.n	800736c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	881a      	ldrh	r2, [r3, #0]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007360:	b292      	uxth	r2, r2
 8007362:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	3302      	adds	r3, #2
 8007368:	61bb      	str	r3, [r7, #24]
 800736a:	e007      	b.n	800737c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	781a      	ldrb	r2, [r3, #0]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	3301      	adds	r3, #1
 800737a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007382:	b29b      	uxth	r3, r3
 8007384:	3b01      	subs	r3, #1
 8007386:	b29a      	uxth	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007394:	b29b      	uxth	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1c9      	bne.n	800732e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2200      	movs	r2, #0
 80073a2:	2140      	movs	r1, #64	@ 0x40
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 fc15 	bl	8007bd4 <UART_WaitOnFlagUntilTimeout>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d004      	beq.n	80073ba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2220      	movs	r2, #32
 80073b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e005      	b.n	80073c6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2220      	movs	r2, #32
 80073be:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	e000      	b.n	80073c6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80073c4:	2302      	movs	r3, #2
  }
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3720      	adds	r7, #32
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
	...

080073d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073d4:	b08a      	sub	sp, #40	@ 0x28
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	689a      	ldr	r2, [r3, #8]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	431a      	orrs	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	431a      	orrs	r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	69db      	ldr	r3, [r3, #28]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	4ba4      	ldr	r3, [pc, #656]	@ (8007690 <UART_SetConfig+0x2c0>)
 8007400:	4013      	ands	r3, r2
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	6812      	ldr	r2, [r2, #0]
 8007406:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007408:	430b      	orrs	r3, r1
 800740a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	68da      	ldr	r2, [r3, #12]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a99      	ldr	r2, [pc, #612]	@ (8007694 <UART_SetConfig+0x2c4>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d004      	beq.n	800743c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007438:	4313      	orrs	r3, r2
 800743a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800744c:	430a      	orrs	r2, r1
 800744e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a90      	ldr	r2, [pc, #576]	@ (8007698 <UART_SetConfig+0x2c8>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d126      	bne.n	80074a8 <UART_SetConfig+0xd8>
 800745a:	4b90      	ldr	r3, [pc, #576]	@ (800769c <UART_SetConfig+0x2cc>)
 800745c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007460:	f003 0303 	and.w	r3, r3, #3
 8007464:	2b03      	cmp	r3, #3
 8007466:	d81b      	bhi.n	80074a0 <UART_SetConfig+0xd0>
 8007468:	a201      	add	r2, pc, #4	@ (adr r2, 8007470 <UART_SetConfig+0xa0>)
 800746a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746e:	bf00      	nop
 8007470:	08007481 	.word	0x08007481
 8007474:	08007491 	.word	0x08007491
 8007478:	08007489 	.word	0x08007489
 800747c:	08007499 	.word	0x08007499
 8007480:	2301      	movs	r3, #1
 8007482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007486:	e116      	b.n	80076b6 <UART_SetConfig+0x2e6>
 8007488:	2302      	movs	r3, #2
 800748a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800748e:	e112      	b.n	80076b6 <UART_SetConfig+0x2e6>
 8007490:	2304      	movs	r3, #4
 8007492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007496:	e10e      	b.n	80076b6 <UART_SetConfig+0x2e6>
 8007498:	2308      	movs	r3, #8
 800749a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800749e:	e10a      	b.n	80076b6 <UART_SetConfig+0x2e6>
 80074a0:	2310      	movs	r3, #16
 80074a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074a6:	e106      	b.n	80076b6 <UART_SetConfig+0x2e6>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a7c      	ldr	r2, [pc, #496]	@ (80076a0 <UART_SetConfig+0x2d0>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d138      	bne.n	8007524 <UART_SetConfig+0x154>
 80074b2:	4b7a      	ldr	r3, [pc, #488]	@ (800769c <UART_SetConfig+0x2cc>)
 80074b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074b8:	f003 030c 	and.w	r3, r3, #12
 80074bc:	2b0c      	cmp	r3, #12
 80074be:	d82d      	bhi.n	800751c <UART_SetConfig+0x14c>
 80074c0:	a201      	add	r2, pc, #4	@ (adr r2, 80074c8 <UART_SetConfig+0xf8>)
 80074c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c6:	bf00      	nop
 80074c8:	080074fd 	.word	0x080074fd
 80074cc:	0800751d 	.word	0x0800751d
 80074d0:	0800751d 	.word	0x0800751d
 80074d4:	0800751d 	.word	0x0800751d
 80074d8:	0800750d 	.word	0x0800750d
 80074dc:	0800751d 	.word	0x0800751d
 80074e0:	0800751d 	.word	0x0800751d
 80074e4:	0800751d 	.word	0x0800751d
 80074e8:	08007505 	.word	0x08007505
 80074ec:	0800751d 	.word	0x0800751d
 80074f0:	0800751d 	.word	0x0800751d
 80074f4:	0800751d 	.word	0x0800751d
 80074f8:	08007515 	.word	0x08007515
 80074fc:	2300      	movs	r3, #0
 80074fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007502:	e0d8      	b.n	80076b6 <UART_SetConfig+0x2e6>
 8007504:	2302      	movs	r3, #2
 8007506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800750a:	e0d4      	b.n	80076b6 <UART_SetConfig+0x2e6>
 800750c:	2304      	movs	r3, #4
 800750e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007512:	e0d0      	b.n	80076b6 <UART_SetConfig+0x2e6>
 8007514:	2308      	movs	r3, #8
 8007516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800751a:	e0cc      	b.n	80076b6 <UART_SetConfig+0x2e6>
 800751c:	2310      	movs	r3, #16
 800751e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007522:	e0c8      	b.n	80076b6 <UART_SetConfig+0x2e6>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a5e      	ldr	r2, [pc, #376]	@ (80076a4 <UART_SetConfig+0x2d4>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d125      	bne.n	800757a <UART_SetConfig+0x1aa>
 800752e:	4b5b      	ldr	r3, [pc, #364]	@ (800769c <UART_SetConfig+0x2cc>)
 8007530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007534:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007538:	2b30      	cmp	r3, #48	@ 0x30
 800753a:	d016      	beq.n	800756a <UART_SetConfig+0x19a>
 800753c:	2b30      	cmp	r3, #48	@ 0x30
 800753e:	d818      	bhi.n	8007572 <UART_SetConfig+0x1a2>
 8007540:	2b20      	cmp	r3, #32
 8007542:	d00a      	beq.n	800755a <UART_SetConfig+0x18a>
 8007544:	2b20      	cmp	r3, #32
 8007546:	d814      	bhi.n	8007572 <UART_SetConfig+0x1a2>
 8007548:	2b00      	cmp	r3, #0
 800754a:	d002      	beq.n	8007552 <UART_SetConfig+0x182>
 800754c:	2b10      	cmp	r3, #16
 800754e:	d008      	beq.n	8007562 <UART_SetConfig+0x192>
 8007550:	e00f      	b.n	8007572 <UART_SetConfig+0x1a2>
 8007552:	2300      	movs	r3, #0
 8007554:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007558:	e0ad      	b.n	80076b6 <UART_SetConfig+0x2e6>
 800755a:	2302      	movs	r3, #2
 800755c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007560:	e0a9      	b.n	80076b6 <UART_SetConfig+0x2e6>
 8007562:	2304      	movs	r3, #4
 8007564:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007568:	e0a5      	b.n	80076b6 <UART_SetConfig+0x2e6>
 800756a:	2308      	movs	r3, #8
 800756c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007570:	e0a1      	b.n	80076b6 <UART_SetConfig+0x2e6>
 8007572:	2310      	movs	r3, #16
 8007574:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007578:	e09d      	b.n	80076b6 <UART_SetConfig+0x2e6>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a4a      	ldr	r2, [pc, #296]	@ (80076a8 <UART_SetConfig+0x2d8>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d125      	bne.n	80075d0 <UART_SetConfig+0x200>
 8007584:	4b45      	ldr	r3, [pc, #276]	@ (800769c <UART_SetConfig+0x2cc>)
 8007586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800758a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800758e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007590:	d016      	beq.n	80075c0 <UART_SetConfig+0x1f0>
 8007592:	2bc0      	cmp	r3, #192	@ 0xc0
 8007594:	d818      	bhi.n	80075c8 <UART_SetConfig+0x1f8>
 8007596:	2b80      	cmp	r3, #128	@ 0x80
 8007598:	d00a      	beq.n	80075b0 <UART_SetConfig+0x1e0>
 800759a:	2b80      	cmp	r3, #128	@ 0x80
 800759c:	d814      	bhi.n	80075c8 <UART_SetConfig+0x1f8>
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d002      	beq.n	80075a8 <UART_SetConfig+0x1d8>
 80075a2:	2b40      	cmp	r3, #64	@ 0x40
 80075a4:	d008      	beq.n	80075b8 <UART_SetConfig+0x1e8>
 80075a6:	e00f      	b.n	80075c8 <UART_SetConfig+0x1f8>
 80075a8:	2300      	movs	r3, #0
 80075aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075ae:	e082      	b.n	80076b6 <UART_SetConfig+0x2e6>
 80075b0:	2302      	movs	r3, #2
 80075b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075b6:	e07e      	b.n	80076b6 <UART_SetConfig+0x2e6>
 80075b8:	2304      	movs	r3, #4
 80075ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075be:	e07a      	b.n	80076b6 <UART_SetConfig+0x2e6>
 80075c0:	2308      	movs	r3, #8
 80075c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075c6:	e076      	b.n	80076b6 <UART_SetConfig+0x2e6>
 80075c8:	2310      	movs	r3, #16
 80075ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075ce:	e072      	b.n	80076b6 <UART_SetConfig+0x2e6>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a35      	ldr	r2, [pc, #212]	@ (80076ac <UART_SetConfig+0x2dc>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d12a      	bne.n	8007630 <UART_SetConfig+0x260>
 80075da:	4b30      	ldr	r3, [pc, #192]	@ (800769c <UART_SetConfig+0x2cc>)
 80075dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075e8:	d01a      	beq.n	8007620 <UART_SetConfig+0x250>
 80075ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075ee:	d81b      	bhi.n	8007628 <UART_SetConfig+0x258>
 80075f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075f4:	d00c      	beq.n	8007610 <UART_SetConfig+0x240>
 80075f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075fa:	d815      	bhi.n	8007628 <UART_SetConfig+0x258>
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d003      	beq.n	8007608 <UART_SetConfig+0x238>
 8007600:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007604:	d008      	beq.n	8007618 <UART_SetConfig+0x248>
 8007606:	e00f      	b.n	8007628 <UART_SetConfig+0x258>
 8007608:	2300      	movs	r3, #0
 800760a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800760e:	e052      	b.n	80076b6 <UART_SetConfig+0x2e6>
 8007610:	2302      	movs	r3, #2
 8007612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007616:	e04e      	b.n	80076b6 <UART_SetConfig+0x2e6>
 8007618:	2304      	movs	r3, #4
 800761a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800761e:	e04a      	b.n	80076b6 <UART_SetConfig+0x2e6>
 8007620:	2308      	movs	r3, #8
 8007622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007626:	e046      	b.n	80076b6 <UART_SetConfig+0x2e6>
 8007628:	2310      	movs	r3, #16
 800762a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800762e:	e042      	b.n	80076b6 <UART_SetConfig+0x2e6>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a17      	ldr	r2, [pc, #92]	@ (8007694 <UART_SetConfig+0x2c4>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d13a      	bne.n	80076b0 <UART_SetConfig+0x2e0>
 800763a:	4b18      	ldr	r3, [pc, #96]	@ (800769c <UART_SetConfig+0x2cc>)
 800763c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007640:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007644:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007648:	d01a      	beq.n	8007680 <UART_SetConfig+0x2b0>
 800764a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800764e:	d81b      	bhi.n	8007688 <UART_SetConfig+0x2b8>
 8007650:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007654:	d00c      	beq.n	8007670 <UART_SetConfig+0x2a0>
 8007656:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800765a:	d815      	bhi.n	8007688 <UART_SetConfig+0x2b8>
 800765c:	2b00      	cmp	r3, #0
 800765e:	d003      	beq.n	8007668 <UART_SetConfig+0x298>
 8007660:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007664:	d008      	beq.n	8007678 <UART_SetConfig+0x2a8>
 8007666:	e00f      	b.n	8007688 <UART_SetConfig+0x2b8>
 8007668:	2300      	movs	r3, #0
 800766a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800766e:	e022      	b.n	80076b6 <UART_SetConfig+0x2e6>
 8007670:	2302      	movs	r3, #2
 8007672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007676:	e01e      	b.n	80076b6 <UART_SetConfig+0x2e6>
 8007678:	2304      	movs	r3, #4
 800767a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800767e:	e01a      	b.n	80076b6 <UART_SetConfig+0x2e6>
 8007680:	2308      	movs	r3, #8
 8007682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007686:	e016      	b.n	80076b6 <UART_SetConfig+0x2e6>
 8007688:	2310      	movs	r3, #16
 800768a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800768e:	e012      	b.n	80076b6 <UART_SetConfig+0x2e6>
 8007690:	efff69f3 	.word	0xefff69f3
 8007694:	40008000 	.word	0x40008000
 8007698:	40013800 	.word	0x40013800
 800769c:	40021000 	.word	0x40021000
 80076a0:	40004400 	.word	0x40004400
 80076a4:	40004800 	.word	0x40004800
 80076a8:	40004c00 	.word	0x40004c00
 80076ac:	40005000 	.word	0x40005000
 80076b0:	2310      	movs	r3, #16
 80076b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a9f      	ldr	r2, [pc, #636]	@ (8007938 <UART_SetConfig+0x568>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d17a      	bne.n	80077b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80076c4:	2b08      	cmp	r3, #8
 80076c6:	d824      	bhi.n	8007712 <UART_SetConfig+0x342>
 80076c8:	a201      	add	r2, pc, #4	@ (adr r2, 80076d0 <UART_SetConfig+0x300>)
 80076ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ce:	bf00      	nop
 80076d0:	080076f5 	.word	0x080076f5
 80076d4:	08007713 	.word	0x08007713
 80076d8:	080076fd 	.word	0x080076fd
 80076dc:	08007713 	.word	0x08007713
 80076e0:	08007703 	.word	0x08007703
 80076e4:	08007713 	.word	0x08007713
 80076e8:	08007713 	.word	0x08007713
 80076ec:	08007713 	.word	0x08007713
 80076f0:	0800770b 	.word	0x0800770b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076f4:	f7fe fbfe 	bl	8005ef4 <HAL_RCC_GetPCLK1Freq>
 80076f8:	61f8      	str	r0, [r7, #28]
        break;
 80076fa:	e010      	b.n	800771e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076fc:	4b8f      	ldr	r3, [pc, #572]	@ (800793c <UART_SetConfig+0x56c>)
 80076fe:	61fb      	str	r3, [r7, #28]
        break;
 8007700:	e00d      	b.n	800771e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007702:	f7fe fb5f 	bl	8005dc4 <HAL_RCC_GetSysClockFreq>
 8007706:	61f8      	str	r0, [r7, #28]
        break;
 8007708:	e009      	b.n	800771e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800770a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800770e:	61fb      	str	r3, [r7, #28]
        break;
 8007710:	e005      	b.n	800771e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007712:	2300      	movs	r3, #0
 8007714:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800771c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	2b00      	cmp	r3, #0
 8007722:	f000 80fb 	beq.w	800791c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	685a      	ldr	r2, [r3, #4]
 800772a:	4613      	mov	r3, r2
 800772c:	005b      	lsls	r3, r3, #1
 800772e:	4413      	add	r3, r2
 8007730:	69fa      	ldr	r2, [r7, #28]
 8007732:	429a      	cmp	r2, r3
 8007734:	d305      	bcc.n	8007742 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800773c:	69fa      	ldr	r2, [r7, #28]
 800773e:	429a      	cmp	r2, r3
 8007740:	d903      	bls.n	800774a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007748:	e0e8      	b.n	800791c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	2200      	movs	r2, #0
 800774e:	461c      	mov	r4, r3
 8007750:	4615      	mov	r5, r2
 8007752:	f04f 0200 	mov.w	r2, #0
 8007756:	f04f 0300 	mov.w	r3, #0
 800775a:	022b      	lsls	r3, r5, #8
 800775c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007760:	0222      	lsls	r2, r4, #8
 8007762:	68f9      	ldr	r1, [r7, #12]
 8007764:	6849      	ldr	r1, [r1, #4]
 8007766:	0849      	lsrs	r1, r1, #1
 8007768:	2000      	movs	r0, #0
 800776a:	4688      	mov	r8, r1
 800776c:	4681      	mov	r9, r0
 800776e:	eb12 0a08 	adds.w	sl, r2, r8
 8007772:	eb43 0b09 	adc.w	fp, r3, r9
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	603b      	str	r3, [r7, #0]
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007784:	4650      	mov	r0, sl
 8007786:	4659      	mov	r1, fp
 8007788:	f7f9 fa7e 	bl	8000c88 <__aeabi_uldivmod>
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	4613      	mov	r3, r2
 8007792:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800779a:	d308      	bcc.n	80077ae <UART_SetConfig+0x3de>
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077a2:	d204      	bcs.n	80077ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	69ba      	ldr	r2, [r7, #24]
 80077aa:	60da      	str	r2, [r3, #12]
 80077ac:	e0b6      	b.n	800791c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80077b4:	e0b2      	b.n	800791c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	69db      	ldr	r3, [r3, #28]
 80077ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077be:	d15e      	bne.n	800787e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80077c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80077c4:	2b08      	cmp	r3, #8
 80077c6:	d828      	bhi.n	800781a <UART_SetConfig+0x44a>
 80077c8:	a201      	add	r2, pc, #4	@ (adr r2, 80077d0 <UART_SetConfig+0x400>)
 80077ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ce:	bf00      	nop
 80077d0:	080077f5 	.word	0x080077f5
 80077d4:	080077fd 	.word	0x080077fd
 80077d8:	08007805 	.word	0x08007805
 80077dc:	0800781b 	.word	0x0800781b
 80077e0:	0800780b 	.word	0x0800780b
 80077e4:	0800781b 	.word	0x0800781b
 80077e8:	0800781b 	.word	0x0800781b
 80077ec:	0800781b 	.word	0x0800781b
 80077f0:	08007813 	.word	0x08007813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077f4:	f7fe fb7e 	bl	8005ef4 <HAL_RCC_GetPCLK1Freq>
 80077f8:	61f8      	str	r0, [r7, #28]
        break;
 80077fa:	e014      	b.n	8007826 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077fc:	f7fe fb90 	bl	8005f20 <HAL_RCC_GetPCLK2Freq>
 8007800:	61f8      	str	r0, [r7, #28]
        break;
 8007802:	e010      	b.n	8007826 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007804:	4b4d      	ldr	r3, [pc, #308]	@ (800793c <UART_SetConfig+0x56c>)
 8007806:	61fb      	str	r3, [r7, #28]
        break;
 8007808:	e00d      	b.n	8007826 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800780a:	f7fe fadb 	bl	8005dc4 <HAL_RCC_GetSysClockFreq>
 800780e:	61f8      	str	r0, [r7, #28]
        break;
 8007810:	e009      	b.n	8007826 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007812:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007816:	61fb      	str	r3, [r7, #28]
        break;
 8007818:	e005      	b.n	8007826 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800781a:	2300      	movs	r3, #0
 800781c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007824:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d077      	beq.n	800791c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	005a      	lsls	r2, r3, #1
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	085b      	lsrs	r3, r3, #1
 8007836:	441a      	add	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007840:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	2b0f      	cmp	r3, #15
 8007846:	d916      	bls.n	8007876 <UART_SetConfig+0x4a6>
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800784e:	d212      	bcs.n	8007876 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	b29b      	uxth	r3, r3
 8007854:	f023 030f 	bic.w	r3, r3, #15
 8007858:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	085b      	lsrs	r3, r3, #1
 800785e:	b29b      	uxth	r3, r3
 8007860:	f003 0307 	and.w	r3, r3, #7
 8007864:	b29a      	uxth	r2, r3
 8007866:	8afb      	ldrh	r3, [r7, #22]
 8007868:	4313      	orrs	r3, r2
 800786a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	8afa      	ldrh	r2, [r7, #22]
 8007872:	60da      	str	r2, [r3, #12]
 8007874:	e052      	b.n	800791c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800787c:	e04e      	b.n	800791c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800787e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007882:	2b08      	cmp	r3, #8
 8007884:	d827      	bhi.n	80078d6 <UART_SetConfig+0x506>
 8007886:	a201      	add	r2, pc, #4	@ (adr r2, 800788c <UART_SetConfig+0x4bc>)
 8007888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788c:	080078b1 	.word	0x080078b1
 8007890:	080078b9 	.word	0x080078b9
 8007894:	080078c1 	.word	0x080078c1
 8007898:	080078d7 	.word	0x080078d7
 800789c:	080078c7 	.word	0x080078c7
 80078a0:	080078d7 	.word	0x080078d7
 80078a4:	080078d7 	.word	0x080078d7
 80078a8:	080078d7 	.word	0x080078d7
 80078ac:	080078cf 	.word	0x080078cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078b0:	f7fe fb20 	bl	8005ef4 <HAL_RCC_GetPCLK1Freq>
 80078b4:	61f8      	str	r0, [r7, #28]
        break;
 80078b6:	e014      	b.n	80078e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078b8:	f7fe fb32 	bl	8005f20 <HAL_RCC_GetPCLK2Freq>
 80078bc:	61f8      	str	r0, [r7, #28]
        break;
 80078be:	e010      	b.n	80078e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078c0:	4b1e      	ldr	r3, [pc, #120]	@ (800793c <UART_SetConfig+0x56c>)
 80078c2:	61fb      	str	r3, [r7, #28]
        break;
 80078c4:	e00d      	b.n	80078e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078c6:	f7fe fa7d 	bl	8005dc4 <HAL_RCC_GetSysClockFreq>
 80078ca:	61f8      	str	r0, [r7, #28]
        break;
 80078cc:	e009      	b.n	80078e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078d2:	61fb      	str	r3, [r7, #28]
        break;
 80078d4:	e005      	b.n	80078e2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80078d6:	2300      	movs	r3, #0
 80078d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80078e0:	bf00      	nop
    }

    if (pclk != 0U)
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d019      	beq.n	800791c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	085a      	lsrs	r2, r3, #1
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	441a      	add	r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	2b0f      	cmp	r3, #15
 8007900:	d909      	bls.n	8007916 <UART_SetConfig+0x546>
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007908:	d205      	bcs.n	8007916 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	b29a      	uxth	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	60da      	str	r2, [r3, #12]
 8007914:	e002      	b.n	800791c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007928:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800792c:	4618      	mov	r0, r3
 800792e:	3728      	adds	r7, #40	@ 0x28
 8007930:	46bd      	mov	sp, r7
 8007932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007936:	bf00      	nop
 8007938:	40008000 	.word	0x40008000
 800793c:	00f42400 	.word	0x00f42400

08007940 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800794c:	f003 0308 	and.w	r3, r3, #8
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00a      	beq.n	800796a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	430a      	orrs	r2, r1
 8007968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00a      	beq.n	800798c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	430a      	orrs	r2, r1
 800798a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007990:	f003 0302 	and.w	r3, r3, #2
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00a      	beq.n	80079ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	430a      	orrs	r2, r1
 80079ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b2:	f003 0304 	and.w	r3, r3, #4
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00a      	beq.n	80079d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	430a      	orrs	r2, r1
 80079ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d4:	f003 0310 	and.w	r3, r3, #16
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00a      	beq.n	80079f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f6:	f003 0320 	and.w	r3, r3, #32
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00a      	beq.n	8007a14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	430a      	orrs	r2, r1
 8007a12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d01a      	beq.n	8007a56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a3e:	d10a      	bne.n	8007a56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00a      	beq.n	8007a78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	430a      	orrs	r2, r1
 8007a76:	605a      	str	r2, [r3, #4]
  }
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b098      	sub	sp, #96	@ 0x60
 8007a88:	af02      	add	r7, sp, #8
 8007a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a94:	f7fb fe58 	bl	8003748 <HAL_GetTick>
 8007a98:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0308 	and.w	r3, r3, #8
 8007aa4:	2b08      	cmp	r3, #8
 8007aa6:	d12e      	bne.n	8007b06 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007aa8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f88c 	bl	8007bd4 <UART_WaitOnFlagUntilTimeout>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d021      	beq.n	8007b06 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aca:	e853 3f00 	ldrex	r3, [r3]
 8007ace:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ad2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ad6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	461a      	mov	r2, r3
 8007ade:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ae0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ae2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ae6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ae8:	e841 2300 	strex	r3, r2, [r1]
 8007aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1e6      	bne.n	8007ac2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2220      	movs	r2, #32
 8007af8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e062      	b.n	8007bcc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0304 	and.w	r3, r3, #4
 8007b10:	2b04      	cmp	r3, #4
 8007b12:	d149      	bne.n	8007ba8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f856 	bl	8007bd4 <UART_WaitOnFlagUntilTimeout>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d03c      	beq.n	8007ba8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b36:	e853 3f00 	ldrex	r3, [r3]
 8007b3a:	623b      	str	r3, [r7, #32]
   return(result);
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	461a      	mov	r2, r3
 8007b4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b54:	e841 2300 	strex	r3, r2, [r1]
 8007b58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1e6      	bne.n	8007b2e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3308      	adds	r3, #8
 8007b66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	e853 3f00 	ldrex	r3, [r3]
 8007b6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f023 0301 	bic.w	r3, r3, #1
 8007b76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3308      	adds	r3, #8
 8007b7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b80:	61fa      	str	r2, [r7, #28]
 8007b82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b84:	69b9      	ldr	r1, [r7, #24]
 8007b86:	69fa      	ldr	r2, [r7, #28]
 8007b88:	e841 2300 	strex	r3, r2, [r1]
 8007b8c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1e5      	bne.n	8007b60 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2220      	movs	r2, #32
 8007b98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e011      	b.n	8007bcc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2220      	movs	r2, #32
 8007bac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3758      	adds	r7, #88	@ 0x58
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	603b      	str	r3, [r7, #0]
 8007be0:	4613      	mov	r3, r2
 8007be2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007be4:	e04f      	b.n	8007c86 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bec:	d04b      	beq.n	8007c86 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bee:	f7fb fdab 	bl	8003748 <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	69ba      	ldr	r2, [r7, #24]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d302      	bcc.n	8007c04 <UART_WaitOnFlagUntilTimeout+0x30>
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d101      	bne.n	8007c08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e04e      	b.n	8007ca6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0304 	and.w	r3, r3, #4
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d037      	beq.n	8007c86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	2b80      	cmp	r3, #128	@ 0x80
 8007c1a:	d034      	beq.n	8007c86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2b40      	cmp	r3, #64	@ 0x40
 8007c20:	d031      	beq.n	8007c86 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	69db      	ldr	r3, [r3, #28]
 8007c28:	f003 0308 	and.w	r3, r3, #8
 8007c2c:	2b08      	cmp	r3, #8
 8007c2e:	d110      	bne.n	8007c52 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2208      	movs	r2, #8
 8007c36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f000 f838 	bl	8007cae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2208      	movs	r2, #8
 8007c42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e029      	b.n	8007ca6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	69db      	ldr	r3, [r3, #28]
 8007c58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c60:	d111      	bne.n	8007c86 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f000 f81e 	bl	8007cae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2220      	movs	r2, #32
 8007c76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007c82:	2303      	movs	r3, #3
 8007c84:	e00f      	b.n	8007ca6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	69da      	ldr	r2, [r3, #28]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	4013      	ands	r3, r2
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	bf0c      	ite	eq
 8007c96:	2301      	moveq	r3, #1
 8007c98:	2300      	movne	r3, #0
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	79fb      	ldrb	r3, [r7, #7]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d0a0      	beq.n	8007be6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cae:	b480      	push	{r7}
 8007cb0:	b095      	sub	sp, #84	@ 0x54
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cbe:	e853 3f00 	ldrex	r3, [r3]
 8007cc2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cd6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007cda:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007cdc:	e841 2300 	strex	r3, r2, [r1]
 8007ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1e6      	bne.n	8007cb6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	3308      	adds	r3, #8
 8007cee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf0:	6a3b      	ldr	r3, [r7, #32]
 8007cf2:	e853 3f00 	ldrex	r3, [r3]
 8007cf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	f023 0301 	bic.w	r3, r3, #1
 8007cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3308      	adds	r3, #8
 8007d06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d10:	e841 2300 	strex	r3, r2, [r1]
 8007d14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1e5      	bne.n	8007ce8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d118      	bne.n	8007d56 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	e853 3f00 	ldrex	r3, [r3]
 8007d30:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	f023 0310 	bic.w	r3, r3, #16
 8007d38:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d42:	61bb      	str	r3, [r7, #24]
 8007d44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d46:	6979      	ldr	r1, [r7, #20]
 8007d48:	69ba      	ldr	r2, [r7, #24]
 8007d4a:	e841 2300 	strex	r3, r2, [r1]
 8007d4e:	613b      	str	r3, [r7, #16]
   return(result);
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1e6      	bne.n	8007d24 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2220      	movs	r2, #32
 8007d5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007d6a:	bf00      	nop
 8007d6c:	3754      	adds	r7, #84	@ 0x54
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr

08007d76 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d76:	b084      	sub	sp, #16
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	f107 001c 	add.w	r0, r7, #28
 8007d84:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fa69 	bl	800826c <USB_CoreReset>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007d9e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d106      	bne.n	8007db4 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007daa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	639a      	str	r2, [r3, #56]	@ 0x38
 8007db2:	e005      	b.n	8007dc0 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007dcc:	b004      	add	sp, #16
 8007dce:	4770      	bx	lr

08007dd0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	f023 0201 	bic.w	r2, r3, #1
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b084      	sub	sp, #16
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e0e:	78fb      	ldrb	r3, [r7, #3]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d115      	bne.n	8007e40 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007e20:	200a      	movs	r0, #10
 8007e22:	f7fb fc9d 	bl	8003760 <HAL_Delay>
      ms += 10U;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	330a      	adds	r3, #10
 8007e2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 fa0f 	bl	8008250 <USB_GetMode>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d01e      	beq.n	8007e76 <USB_SetCurrentMode+0x84>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2bc7      	cmp	r3, #199	@ 0xc7
 8007e3c:	d9f0      	bls.n	8007e20 <USB_SetCurrentMode+0x2e>
 8007e3e:	e01a      	b.n	8007e76 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e40:	78fb      	ldrb	r3, [r7, #3]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d115      	bne.n	8007e72 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007e52:	200a      	movs	r0, #10
 8007e54:	f7fb fc84 	bl	8003760 <HAL_Delay>
      ms += 10U;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	330a      	adds	r3, #10
 8007e5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f9f6 	bl	8008250 <USB_GetMode>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d005      	beq.n	8007e76 <USB_SetCurrentMode+0x84>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2bc7      	cmp	r3, #199	@ 0xc7
 8007e6e:	d9f0      	bls.n	8007e52 <USB_SetCurrentMode+0x60>
 8007e70:	e001      	b.n	8007e76 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e005      	b.n	8007e82 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2bc8      	cmp	r3, #200	@ 0xc8
 8007e7a:	d101      	bne.n	8007e80 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e000      	b.n	8007e82 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
	...

08007e8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e8c:	b084      	sub	sp, #16
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b086      	sub	sp, #24
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007e9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	613b      	str	r3, [r7, #16]
 8007eaa:	e009      	b.n	8007ec0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	3340      	adds	r3, #64	@ 0x40
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4413      	add	r3, r2
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	613b      	str	r3, [r7, #16]
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	2b0e      	cmp	r3, #14
 8007ec4:	d9f2      	bls.n	8007eac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007ec6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d11c      	bne.n	8007f08 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007edc:	f043 0302 	orr.w	r3, r3, #2
 8007ee0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ee6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	e005      	b.n	8007f14 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f0c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007f20:	2103      	movs	r1, #3
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f95a 	bl	80081dc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f28:	2110      	movs	r1, #16
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f8f6 	bl	800811c <USB_FlushTxFifo>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d001      	beq.n	8007f3a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f920 	bl	8008180 <USB_FlushRxFifo>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f50:	461a      	mov	r2, r3
 8007f52:	2300      	movs	r3, #0
 8007f54:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	2300      	movs	r3, #0
 8007f60:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f68:	461a      	mov	r2, r3
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f6e:	2300      	movs	r3, #0
 8007f70:	613b      	str	r3, [r7, #16]
 8007f72:	e043      	b.n	8007ffc <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	015a      	lsls	r2, r3, #5
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f8a:	d118      	bne.n	8007fbe <USB_DevInit+0x132>
    {
      if (i == 0U)
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10a      	bne.n	8007fa8 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	015a      	lsls	r2, r3, #5
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4413      	add	r3, r2
 8007f9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007fa4:	6013      	str	r3, [r2, #0]
 8007fa6:	e013      	b.n	8007fd0 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007fba:	6013      	str	r3, [r2, #0]
 8007fbc:	e008      	b.n	8007fd0 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	015a      	lsls	r2, r3, #5
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fca:	461a      	mov	r2, r3
 8007fcc:	2300      	movs	r3, #0
 8007fce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	015a      	lsls	r2, r3, #5
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fdc:	461a      	mov	r2, r3
 8007fde:	2300      	movs	r3, #0
 8007fe0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	015a      	lsls	r2, r3, #5
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	4413      	add	r3, r2
 8007fea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fee:	461a      	mov	r2, r3
 8007ff0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ff4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	613b      	str	r3, [r7, #16]
 8007ffc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008000:	461a      	mov	r2, r3
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	4293      	cmp	r3, r2
 8008006:	d3b5      	bcc.n	8007f74 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008008:	2300      	movs	r3, #0
 800800a:	613b      	str	r3, [r7, #16]
 800800c:	e043      	b.n	8008096 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	015a      	lsls	r2, r3, #5
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	4413      	add	r3, r2
 8008016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008020:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008024:	d118      	bne.n	8008058 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10a      	bne.n	8008042 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	015a      	lsls	r2, r3, #5
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	4413      	add	r3, r2
 8008034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008038:	461a      	mov	r2, r3
 800803a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800803e:	6013      	str	r3, [r2, #0]
 8008040:	e013      	b.n	800806a <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	015a      	lsls	r2, r3, #5
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	4413      	add	r3, r2
 800804a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800804e:	461a      	mov	r2, r3
 8008050:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008054:	6013      	str	r3, [r2, #0]
 8008056:	e008      	b.n	800806a <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	015a      	lsls	r2, r3, #5
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	4413      	add	r3, r2
 8008060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008064:	461a      	mov	r2, r3
 8008066:	2300      	movs	r3, #0
 8008068:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	015a      	lsls	r2, r3, #5
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	4413      	add	r3, r2
 8008072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008076:	461a      	mov	r2, r3
 8008078:	2300      	movs	r3, #0
 800807a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	015a      	lsls	r2, r3, #5
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4413      	add	r3, r2
 8008084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008088:	461a      	mov	r2, r3
 800808a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800808e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	3301      	adds	r3, #1
 8008094:	613b      	str	r3, [r7, #16]
 8008096:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800809a:	461a      	mov	r2, r3
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	4293      	cmp	r3, r2
 80080a0:	d3b5      	bcc.n	800800e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80080b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080b4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80080c2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	f043 0210 	orr.w	r2, r3, #16
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	699a      	ldr	r2, [r3, #24]
 80080d4:	4b10      	ldr	r3, [pc, #64]	@ (8008118 <USB_DevInit+0x28c>)
 80080d6:	4313      	orrs	r3, r2
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80080dc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d005      	beq.n	80080f0 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	f043 0208 	orr.w	r2, r3, #8
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80080f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d107      	bne.n	8008108 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008100:	f043 0304 	orr.w	r3, r3, #4
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008108:	7dfb      	ldrb	r3, [r7, #23]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3718      	adds	r7, #24
 800810e:	46bd      	mov	sp, r7
 8008110:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008114:	b004      	add	sp, #16
 8008116:	4770      	bx	lr
 8008118:	803c3800 	.word	0x803c3800

0800811c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008126:	2300      	movs	r3, #0
 8008128:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3301      	adds	r3, #1
 800812e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008136:	d901      	bls.n	800813c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008138:	2303      	movs	r3, #3
 800813a:	e01b      	b.n	8008174 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	2b00      	cmp	r3, #0
 8008142:	daf2      	bge.n	800812a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008144:	2300      	movs	r3, #0
 8008146:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	019b      	lsls	r3, r3, #6
 800814c:	f043 0220 	orr.w	r2, r3, #32
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	3301      	adds	r3, #1
 8008158:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008160:	d901      	bls.n	8008166 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	e006      	b.n	8008174 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	f003 0320 	and.w	r3, r3, #32
 800816e:	2b20      	cmp	r3, #32
 8008170:	d0f0      	beq.n	8008154 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008188:	2300      	movs	r3, #0
 800818a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	3301      	adds	r3, #1
 8008190:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008198:	d901      	bls.n	800819e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	e018      	b.n	80081d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	daf2      	bge.n	800818c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80081a6:	2300      	movs	r3, #0
 80081a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2210      	movs	r2, #16
 80081ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	3301      	adds	r3, #1
 80081b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081bc:	d901      	bls.n	80081c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e006      	b.n	80081d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	f003 0310 	and.w	r3, r3, #16
 80081ca:	2b10      	cmp	r3, #16
 80081cc:	d0f0      	beq.n	80081b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	460b      	mov	r3, r1
 80081e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	78fb      	ldrb	r3, [r7, #3]
 80081f6:	68f9      	ldr	r1, [r7, #12]
 80081f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081fc:	4313      	orrs	r3, r2
 80081fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3714      	adds	r7, #20
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800820e:	b480      	push	{r7}
 8008210:	b085      	sub	sp, #20
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008228:	f023 0303 	bic.w	r3, r3, #3
 800822c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800823c:	f043 0302 	orr.w	r3, r3, #2
 8008240:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	695b      	ldr	r3, [r3, #20]
 800825c:	f003 0301 	and.w	r3, r3, #1
}
 8008260:	4618      	mov	r0, r3
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008274:	2300      	movs	r3, #0
 8008276:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	3301      	adds	r3, #1
 800827c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008284:	d901      	bls.n	800828a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008286:	2303      	movs	r3, #3
 8008288:	e01b      	b.n	80082c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	2b00      	cmp	r3, #0
 8008290:	daf2      	bge.n	8008278 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008292:	2300      	movs	r3, #0
 8008294:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	f043 0201 	orr.w	r2, r3, #1
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	3301      	adds	r3, #1
 80082a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082ae:	d901      	bls.n	80082b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e006      	b.n	80082c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d0f0      	beq.n	80082a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3714      	adds	r7, #20
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b08c      	sub	sp, #48	@ 0x30
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	603b      	str	r3, [r7, #0]
 80082d6:	4603      	mov	r3, r0
 80082d8:	71fb      	strb	r3, [r7, #7]
 80082da:	460b      	mov	r3, r1
 80082dc:	71bb      	strb	r3, [r7, #6]
 80082de:	4613      	mov	r3, r2
 80082e0:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 80082e2:	79fb      	ldrb	r3, [r7, #7]
 80082e4:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 80082e6:	79bb      	ldrb	r3, [r7, #6]
 80082e8:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 80082ea:	797b      	ldrb	r3, [r7, #5]
 80082ec:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80082ee:	f107 030c 	add.w	r3, r7, #12
 80082f2:	2207      	movs	r2, #7
 80082f4:	2100      	movs	r1, #0
 80082f6:	4618      	mov	r0, r3
 80082f8:	f004 ffac 	bl	800d254 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80082fc:	f107 0318 	add.w	r3, r7, #24
 8008300:	2218      	movs	r2, #24
 8008302:	2100      	movs	r1, #0
 8008304:	4618      	mov	r0, r3
 8008306:	f004 ffa5 	bl	800d254 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800830a:	233f      	movs	r3, #63	@ 0x3f
 800830c:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 800830e:	238a      	movs	r3, #138	@ 0x8a
 8008310:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8008312:	f107 0314 	add.w	r3, r7, #20
 8008316:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8008318:	2303      	movs	r3, #3
 800831a:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &resp;
 800831c:	f107 030c 	add.w	r3, r7, #12
 8008320:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8008322:	2307      	movs	r3, #7
 8008324:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008326:	f107 0318 	add.w	r3, r7, #24
 800832a:	2100      	movs	r1, #0
 800832c:	4618      	mov	r0, r3
 800832e:	f000 fea1 	bl	8009074 <hci_send_req>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	da01      	bge.n	800833c <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8008338:	23ff      	movs	r3, #255	@ 0xff
 800833a:	e014      	b.n	8008366 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 800833c:	7b3b      	ldrb	r3, [r7, #12]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8008342:	7b3b      	ldrb	r3, [r7, #12]
 8008344:	e00f      	b.n	8008366 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8008346:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800834a:	b29a      	uxth	r2, r3
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8008350:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8008354:	b29a      	uxth	r2, r3
 8008356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008358:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800835a:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800835e:	b29a      	uxth	r2, r3
 8008360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008362:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3730      	adds	r7, #48	@ 0x30
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b08e      	sub	sp, #56	@ 0x38
 8008372:	af00      	add	r7, sp, #0
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
 8008378:	603b      	str	r3, [r7, #0]
 800837a:	4603      	mov	r3, r0
 800837c:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 800837e:	7bfb      	ldrb	r3, [r7, #15]
 8008380:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008382:	f107 0314 	add.w	r3, r7, #20
 8008386:	2207      	movs	r2, #7
 8008388:	2100      	movs	r1, #0
 800838a:	4618      	mov	r0, r3
 800838c:	f004 ff62 	bl	800d254 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008390:	f107 0320 	add.w	r3, r7, #32
 8008394:	2218      	movs	r2, #24
 8008396:	2100      	movs	r1, #0
 8008398:	4618      	mov	r0, r3
 800839a:	f004 ff5b 	bl	800d254 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800839e:	233f      	movs	r3, #63	@ 0x3f
 80083a0:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 80083a2:	238a      	movs	r3, #138	@ 0x8a
 80083a4:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = &cp;
 80083a6:	f107 031c 	add.w	r3, r7, #28
 80083aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = sizeof(cp);
 80083ac:	2301      	movs	r3, #1
 80083ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 80083b0:	f107 0314 	add.w	r3, r7, #20
 80083b4:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 80083b6:	2307      	movs	r3, #7
 80083b8:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 80083ba:	f107 0320 	add.w	r3, r7, #32
 80083be:	2100      	movs	r1, #0
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 fe57 	bl	8009074 <hci_send_req>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	da01      	bge.n	80083d0 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 80083cc:	23ff      	movs	r3, #255	@ 0xff
 80083ce:	e014      	b.n	80083fa <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 80083d0:	7d3b      	ldrb	r3, [r7, #20]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d001      	beq.n	80083da <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 80083d6:	7d3b      	ldrb	r3, [r7, #20]
 80083d8:	e00f      	b.n	80083fa <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 80083da:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 80083de:	b29a      	uxth	r2, r3
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80083e4:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80083ee:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3738      	adds	r7, #56	@ 0x38
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8008402:	b590      	push	{r4, r7, lr}
 8008404:	b095      	sub	sp, #84	@ 0x54
 8008406:	af00      	add	r7, sp, #0
 8008408:	4604      	mov	r4, r0
 800840a:	4608      	mov	r0, r1
 800840c:	4611      	mov	r1, r2
 800840e:	461a      	mov	r2, r3
 8008410:	4623      	mov	r3, r4
 8008412:	71fb      	strb	r3, [r7, #7]
 8008414:	4603      	mov	r3, r0
 8008416:	80bb      	strh	r3, [r7, #4]
 8008418:	460b      	mov	r3, r1
 800841a:	807b      	strh	r3, [r7, #2]
 800841c:	4613      	mov	r3, r2
 800841e:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8008420:	2300      	movs	r3, #0
 8008422:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8008426:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800842a:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800842e:	4413      	add	r3, r2
 8008430:	330e      	adds	r3, #14
 8008432:	2b28      	cmp	r3, #40	@ 0x28
 8008434:	d901      	bls.n	800843a <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8008436:	2342      	movs	r3, #66	@ 0x42
 8008438:	e0c9      	b.n	80085ce <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 800843a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800843e:	3350      	adds	r3, #80	@ 0x50
 8008440:	443b      	add	r3, r7
 8008442:	79fa      	ldrb	r2, [r7, #7]
 8008444:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008448:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800844c:	3301      	adds	r3, #1
 800844e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8008452:	88bb      	ldrh	r3, [r7, #4]
 8008454:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8008456:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800845a:	f107 0208 	add.w	r2, r7, #8
 800845e:	4413      	add	r3, r2
 8008460:	88ba      	ldrh	r2, [r7, #4]
 8008462:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008464:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008468:	3302      	adds	r3, #2
 800846a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 800846e:	887b      	ldrh	r3, [r7, #2]
 8008470:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8008472:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008476:	f107 0208 	add.w	r2, r7, #8
 800847a:	4413      	add	r3, r2
 800847c:	887a      	ldrh	r2, [r7, #2]
 800847e:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008480:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008484:	3302      	adds	r3, #2
 8008486:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = OwnAddrType;
 800848a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800848e:	3350      	adds	r3, #80	@ 0x50
 8008490:	443b      	add	r3, r7
 8008492:	79ba      	ldrb	r2, [r7, #6]
 8008494:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008498:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800849c:	3301      	adds	r3, #1
 800849e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 80084a2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80084a6:	3350      	adds	r3, #80	@ 0x50
 80084a8:	443b      	add	r3, r7
 80084aa:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 80084ae:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80084b2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80084b6:	3301      	adds	r3, #1
 80084b8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = LocalNameLen;
 80084bc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80084c0:	3350      	adds	r3, #80	@ 0x50
 80084c2:	443b      	add	r3, r7
 80084c4:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 80084c8:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80084cc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80084d0:	3301      	adds	r3, #1
 80084d2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 80084d6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80084da:	f107 0208 	add.w	r2, r7, #8
 80084de:	4413      	add	r3, r2
 80084e0:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 80084e4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80084e6:	4618      	mov	r0, r3
 80084e8:	f004 ff33 	bl	800d352 <memcpy>
  indx +=  LocalNameLen;
 80084ec:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80084f0:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80084f4:	4413      	add	r3, r2
 80084f6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 80084fa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80084fe:	3350      	adds	r3, #80	@ 0x50
 8008500:	443b      	add	r3, r7
 8008502:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8008506:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800850a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800850e:	3301      	adds	r3, #1
 8008510:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8008514:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008518:	f107 0208 	add.w	r2, r7, #8
 800851c:	4413      	add	r3, r2
 800851e:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8008522:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8008524:	4618      	mov	r0, r3
 8008526:	f004 ff14 	bl	800d352 <memcpy>
  indx +=  ServiceUUIDLen;  
 800852a:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800852e:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8008532:	4413      	add	r3, r2
 8008534:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8008538:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800853c:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8008540:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008544:	f107 0208 	add.w	r2, r7, #8
 8008548:	4413      	add	r3, r2
 800854a:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 800854e:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008550:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008554:	3302      	adds	r3, #2
 8008556:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 800855a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800855e:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8008562:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008566:	f107 0208 	add.w	r2, r7, #8
 800856a:	4413      	add	r3, r2
 800856c:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8008570:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8008572:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008576:	3302      	adds	r3, #2
 8008578:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800857c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008580:	2218      	movs	r2, #24
 8008582:	2100      	movs	r1, #0
 8008584:	4618      	mov	r0, r3
 8008586:	f004 fe65 	bl	800d254 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800858a:	233f      	movs	r3, #63	@ 0x3f
 800858c:	86bb      	strh	r3, [r7, #52]	@ 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800858e:	2383      	movs	r3, #131	@ 0x83
 8008590:	86fb      	strh	r3, [r7, #54]	@ 0x36
  rq.cparam = (void *)buffer;
 8008592:	f107 0308 	add.w	r3, r7, #8
 8008596:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.clen = indx;
 8008598:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800859c:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rparam = &status;
 800859e:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 80085a2:	647b      	str	r3, [r7, #68]	@ 0x44
  rq.rlen = 1;
 80085a4:	2301      	movs	r3, #1
 80085a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 80085a8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80085ac:	2100      	movs	r1, #0
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 fd60 	bl	8009074 <hci_send_req>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	da01      	bge.n	80085be <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 80085ba:	23ff      	movs	r3, #255	@ 0xff
 80085bc:	e007      	b.n	80085ce <aci_gap_set_discoverable+0x1cc>

  if (status) {
 80085be:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d002      	beq.n	80085cc <aci_gap_set_discoverable+0x1ca>
    return status;
 80085c6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80085ca:	e000      	b.n	80085ce <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3754      	adds	r7, #84	@ 0x54
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd90      	pop	{r4, r7, pc}

080085d6 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 80085d6:	b590      	push	{r4, r7, lr}
 80085d8:	b091      	sub	sp, #68	@ 0x44
 80085da:	af00      	add	r7, sp, #0
 80085dc:	603a      	str	r2, [r7, #0]
 80085de:	461a      	mov	r2, r3
 80085e0:	4603      	mov	r3, r0
 80085e2:	71fb      	strb	r3, [r7, #7]
 80085e4:	460b      	mov	r3, r1
 80085e6:	71bb      	strb	r3, [r7, #6]
 80085e8:	4613      	mov	r3, r2
 80085ea:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 80085ec:	79fb      	ldrb	r3, [r7, #7]
 80085ee:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 80085f0:	79bb      	ldrb	r3, [r7, #6]
 80085f2:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 80085f4:	79bb      	ldrb	r3, [r7, #6]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00a      	beq.n	8008610 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	f107 030e 	add.w	r3, r7, #14
 8008600:	6814      	ldr	r4, [r2, #0]
 8008602:	6850      	ldr	r0, [r2, #4]
 8008604:	6891      	ldr	r1, [r2, #8]
 8008606:	68d2      	ldr	r2, [r2, #12]
 8008608:	601c      	str	r4, [r3, #0]
 800860a:	6058      	str	r0, [r3, #4]
 800860c:	6099      	str	r1, [r3, #8]
 800860e:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8008610:	797b      	ldrb	r3, [r7, #5]
 8008612:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8008614:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8008618:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800861a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800861e:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8008622:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008624:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
  cp.bonding_mode = bonding_mode;
 8008628:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800862c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008630:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008634:	2218      	movs	r2, #24
 8008636:	2100      	movs	r1, #0
 8008638:	4618      	mov	r0, r3
 800863a:	f004 fe0b 	bl	800d254 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800863e:	233f      	movs	r3, #63	@ 0x3f
 8008640:	853b      	strh	r3, [r7, #40]	@ 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8008642:	2386      	movs	r3, #134	@ 0x86
 8008644:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rq.cparam = &cp;
 8008646:	f107 030c 	add.w	r3, r7, #12
 800864a:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.clen = sizeof(cp);
 800864c:	231a      	movs	r3, #26
 800864e:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rparam = &status;
 8008650:	f107 030b 	add.w	r3, r7, #11
 8008654:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rlen = 1;
 8008656:	2301      	movs	r3, #1
 8008658:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 800865a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800865e:	2100      	movs	r1, #0
 8008660:	4618      	mov	r0, r3
 8008662:	f000 fd07 	bl	8009074 <hci_send_req>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	da01      	bge.n	8008670 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 800866c:	23ff      	movs	r3, #255	@ 0xff
 800866e:	e005      	b.n	800867c <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 8008670:	7afb      	ldrb	r3, [r7, #11]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d001      	beq.n	800867a <aci_gap_set_auth_requirement+0xa4>
    return status;
 8008676:	7afb      	ldrb	r3, [r7, #11]
 8008678:	e000      	b.n	800867c <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3744      	adds	r7, #68	@ 0x44
 8008680:	46bd      	mov	sp, r7
 8008682:	bd90      	pop	{r4, r7, pc}

08008684 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b092      	sub	sp, #72	@ 0x48
 8008688:	af00      	add	r7, sp, #0
 800868a:	4603      	mov	r3, r0
 800868c:	6039      	str	r1, [r7, #0]
 800868e:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 8008690:	2300      	movs	r3, #0
 8008692:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 8008696:	79fb      	ldrb	r3, [r7, #7]
 8008698:	2b1f      	cmp	r3, #31
 800869a:	d901      	bls.n	80086a0 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 800869c:	2342      	movs	r3, #66	@ 0x42
 800869e:	e03e      	b.n	800871e <aci_gap_update_adv_data+0x9a>

  buffer[indx] = AdvLen;
 80086a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80086a4:	3348      	adds	r3, #72	@ 0x48
 80086a6:	443b      	add	r3, r7
 80086a8:	79fa      	ldrb	r2, [r7, #7]
 80086aa:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 80086ae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80086b2:	3301      	adds	r3, #1
 80086b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 80086b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80086bc:	f107 0208 	add.w	r2, r7, #8
 80086c0:	4413      	add	r3, r2
 80086c2:	79fa      	ldrb	r2, [r7, #7]
 80086c4:	6839      	ldr	r1, [r7, #0]
 80086c6:	4618      	mov	r0, r3
 80086c8:	f004 fe43 	bl	800d352 <memcpy>
  indx +=  AdvLen;
 80086cc:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80086d0:	79fb      	ldrb	r3, [r7, #7]
 80086d2:	4413      	add	r3, r2
 80086d4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80086d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80086dc:	2218      	movs	r2, #24
 80086de:	2100      	movs	r1, #0
 80086e0:	4618      	mov	r0, r3
 80086e2:	f004 fdb7 	bl	800d254 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80086e6:	233f      	movs	r3, #63	@ 0x3f
 80086e8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 80086ea:	238e      	movs	r3, #142	@ 0x8e
 80086ec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 80086ee:	f107 0308 	add.w	r3, r7, #8
 80086f2:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 80086f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80086f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &status;
 80086fa:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 80086fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = 1;
 8008700:	2301      	movs	r3, #1
 8008702:	643b      	str	r3, [r7, #64]	@ 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 8008704:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008708:	2100      	movs	r1, #0
 800870a:	4618      	mov	r0, r3
 800870c:	f000 fcb2 	bl	8009074 <hci_send_req>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	da01      	bge.n	800871a <aci_gap_update_adv_data+0x96>
    return BLE_STATUS_TIMEOUT;
 8008716:	23ff      	movs	r3, #255	@ 0xff
 8008718:	e001      	b.n	800871e <aci_gap_update_adv_data+0x9a>
    
  return status;
 800871a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800871e:	4618      	mov	r0, r3
 8008720:	3748      	adds	r7, #72	@ 0x48
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b088      	sub	sp, #32
 800872a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800872c:	f107 0308 	add.w	r3, r7, #8
 8008730:	2218      	movs	r2, #24
 8008732:	2100      	movs	r1, #0
 8008734:	4618      	mov	r0, r3
 8008736:	f004 fd8d 	bl	800d254 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800873a:	233f      	movs	r3, #63	@ 0x3f
 800873c:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 800873e:	f240 1301 	movw	r3, #257	@ 0x101
 8008742:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008744:	1dfb      	adds	r3, r7, #7
 8008746:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008748:	2301      	movs	r3, #1
 800874a:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800874c:	f107 0308 	add.w	r3, r7, #8
 8008750:	2100      	movs	r1, #0
 8008752:	4618      	mov	r0, r3
 8008754:	f000 fc8e 	bl	8009074 <hci_send_req>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	da01      	bge.n	8008762 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800875e:	23ff      	movs	r3, #255	@ 0xff
 8008760:	e000      	b.n	8008764 <aci_gatt_init+0x3e>

  return status;
 8008762:	79fb      	ldrb	r3, [r7, #7]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3720      	adds	r7, #32
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b090      	sub	sp, #64	@ 0x40
 8008770:	af00      	add	r7, sp, #0
 8008772:	6039      	str	r1, [r7, #0]
 8008774:	4611      	mov	r1, r2
 8008776:	461a      	mov	r2, r3
 8008778:	4603      	mov	r3, r0
 800877a:	71fb      	strb	r3, [r7, #7]
 800877c:	460b      	mov	r3, r1
 800877e:	71bb      	strb	r3, [r7, #6]
 8008780:	4613      	mov	r3, r2
 8008782:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8008784:	2300      	movs	r3, #0
 8008786:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_uuid_type;
 800878a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800878e:	3340      	adds	r3, #64	@ 0x40
 8008790:	443b      	add	r3, r7
 8008792:	79fa      	ldrb	r2, [r7, #7]
 8008794:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008798:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800879c:	3301      	adds	r3, #1
 800879e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 80087a2:	79fb      	ldrb	r3, [r7, #7]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d103      	bne.n	80087b0 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 80087a8:	2302      	movs	r3, #2
 80087aa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80087ae:	e002      	b.n	80087b6 <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 80087b0:	2310      	movs	r3, #16
 80087b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 80087b6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80087ba:	f107 020c 	add.w	r2, r7, #12
 80087be:	4413      	add	r3, r2
 80087c0:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	4618      	mov	r0, r3
 80087c8:	f004 fdc3 	bl	800d352 <memcpy>
  indx +=  uuid_len;
 80087cc:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 80087d0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80087d4:	4413      	add	r3, r2
 80087d6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_type;
 80087da:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80087de:	3340      	adds	r3, #64	@ 0x40
 80087e0:	443b      	add	r3, r7
 80087e2:	79ba      	ldrb	r2, [r7, #6]
 80087e4:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80087e8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80087ec:	3301      	adds	r3, #1
 80087ee:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = max_attr_records;
 80087f2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80087f6:	3340      	adds	r3, #64	@ 0x40
 80087f8:	443b      	add	r3, r7
 80087fa:	797a      	ldrb	r2, [r7, #5]
 80087fc:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008800:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008804:	3301      	adds	r3, #1
 8008806:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800880a:	f107 0320 	add.w	r3, r7, #32
 800880e:	2203      	movs	r2, #3
 8008810:	2100      	movs	r1, #0
 8008812:	4618      	mov	r0, r3
 8008814:	f004 fd1e 	bl	800d254 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008818:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800881c:	2218      	movs	r2, #24
 800881e:	2100      	movs	r1, #0
 8008820:	4618      	mov	r0, r3
 8008822:	f004 fd17 	bl	800d254 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008826:	233f      	movs	r3, #63	@ 0x3f
 8008828:	84bb      	strh	r3, [r7, #36]	@ 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 800882a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800882e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  rq.cparam = (void *)buffer;
 8008830:	f107 030c 	add.w	r3, r7, #12
 8008834:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.clen = indx;
 8008836:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800883a:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rparam = &resp;
 800883c:	f107 0320 	add.w	r3, r7, #32
 8008840:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8008842:	2303      	movs	r3, #3
 8008844:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8008846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800884a:	2100      	movs	r1, #0
 800884c:	4618      	mov	r0, r3
 800884e:	f000 fc11 	bl	8009074 <hci_send_req>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	da01      	bge.n	800885c <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 8008858:	23ff      	movs	r3, #255	@ 0xff
 800885a:	e00c      	b.n	8008876 <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 800885c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d002      	beq.n	800886a <aci_gatt_add_serv+0xfe>
    return resp.status;
 8008864:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008868:	e005      	b.n	8008876 <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 800886a:	f8b7 3021 	ldrh.w	r3, [r7, #33]	@ 0x21
 800886e:	b29a      	uxth	r2, r3
 8008870:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008872:	801a      	strh	r2, [r3, #0]

  return 0;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3740      	adds	r7, #64	@ 0x40
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b092      	sub	sp, #72	@ 0x48
 8008882:	af00      	add	r7, sp, #0
 8008884:	603a      	str	r2, [r7, #0]
 8008886:	461a      	mov	r2, r3
 8008888:	4603      	mov	r3, r0
 800888a:	80fb      	strh	r3, [r7, #6]
 800888c:	460b      	mov	r3, r1
 800888e:	717b      	strb	r3, [r7, #5]
 8008890:	4613      	mov	r3, r2
 8008892:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8008894:	2300      	movs	r3, #0
 8008896:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  serviceHandle = htobs(serviceHandle);
 800889a:	88fb      	ldrh	r3, [r7, #6]
 800889c:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800889e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80088a2:	f107 020c 	add.w	r2, r7, #12
 80088a6:	4413      	add	r3, r2
 80088a8:	88fa      	ldrh	r2, [r7, #6]
 80088aa:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80088ac:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80088b0:	3302      	adds	r3, #2
 80088b2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charUuidType;
 80088b6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80088ba:	3348      	adds	r3, #72	@ 0x48
 80088bc:	443b      	add	r3, r7
 80088be:	797a      	ldrb	r2, [r7, #5]
 80088c0:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80088c4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80088c8:	3301      	adds	r3, #1
 80088ca:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  if(charUuidType == UUID_TYPE_16){
 80088ce:	797b      	ldrb	r3, [r7, #5]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d103      	bne.n	80088dc <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 80088d4:	2302      	movs	r3, #2
 80088d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80088da:	e002      	b.n	80088e2 <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 80088dc:	2310      	movs	r3, #16
 80088de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80088e2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80088e6:	f107 020c 	add.w	r2, r7, #12
 80088ea:	4413      	add	r3, r2
 80088ec:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80088f0:	6839      	ldr	r1, [r7, #0]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f004 fd2d 	bl	800d352 <memcpy>
  indx +=  uuid_len;
 80088f8:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80088fc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008900:	4413      	add	r3, r2
 8008902:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charValueLen;
 8008906:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800890a:	3348      	adds	r3, #72	@ 0x48
 800890c:	443b      	add	r3, r7
 800890e:	793a      	ldrb	r2, [r7, #4]
 8008910:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008914:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008918:	3301      	adds	r3, #1
 800891a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charProperties;
 800891e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008922:	3348      	adds	r3, #72	@ 0x48
 8008924:	443b      	add	r3, r7
 8008926:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 800892a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800892e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008932:	3301      	adds	r3, #1
 8008934:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = secPermissions;
 8008938:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800893c:	3348      	adds	r3, #72	@ 0x48
 800893e:	443b      	add	r3, r7
 8008940:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8008944:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008948:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800894c:	3301      	adds	r3, #1
 800894e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = gattEvtMask;
 8008952:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008956:	3348      	adds	r3, #72	@ 0x48
 8008958:	443b      	add	r3, r7
 800895a:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 800895e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008962:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008966:	3301      	adds	r3, #1
 8008968:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = encryKeySize;
 800896c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008970:	3348      	adds	r3, #72	@ 0x48
 8008972:	443b      	add	r3, r7
 8008974:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8008978:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800897c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008980:	3301      	adds	r3, #1
 8008982:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = isVariable;
 8008986:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800898a:	3348      	adds	r3, #72	@ 0x48
 800898c:	443b      	add	r3, r7
 800898e:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8008992:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008996:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800899a:	3301      	adds	r3, #1
 800899c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80089a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80089a4:	2203      	movs	r2, #3
 80089a6:	2100      	movs	r1, #0
 80089a8:	4618      	mov	r0, r3
 80089aa:	f004 fc53 	bl	800d254 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80089ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80089b2:	2218      	movs	r2, #24
 80089b4:	2100      	movs	r1, #0
 80089b6:	4618      	mov	r0, r3
 80089b8:	f004 fc4c 	bl	800d254 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80089bc:	233f      	movs	r3, #63	@ 0x3f
 80089be:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 80089c0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80089c4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 80089c6:	f107 030c 	add.w	r3, r7, #12
 80089ca:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 80089cc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80089d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &resp;
 80089d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80089d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 80089d8:	2303      	movs	r3, #3
 80089da:	643b      	str	r3, [r7, #64]	@ 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 80089dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80089e0:	2100      	movs	r1, #0
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 fb46 	bl	8009074 <hci_send_req>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	da01      	bge.n	80089f2 <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 80089ee:	23ff      	movs	r3, #255	@ 0xff
 80089f0:	e00c      	b.n	8008a0c <aci_gatt_add_char+0x18e>

  if (resp.status) {
 80089f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d002      	beq.n	8008a00 <aci_gatt_add_char+0x182>
    return resp.status;
 80089fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80089fe:	e005      	b.n	8008a0c <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8008a00:	f8b7 3029 	ldrh.w	r3, [r7, #41]	@ 0x29
 8008a04:	b29a      	uxth	r2, r3
 8008a06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a08:	801a      	strh	r2, [r3, #0]

  return 0;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3748      	adds	r7, #72	@ 0x48
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8008a14:	b590      	push	{r4, r7, lr}
 8008a16:	b0ab      	sub	sp, #172	@ 0xac
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	4604      	mov	r4, r0
 8008a1c:	4608      	mov	r0, r1
 8008a1e:	4611      	mov	r1, r2
 8008a20:	461a      	mov	r2, r3
 8008a22:	4623      	mov	r3, r4
 8008a24:	80fb      	strh	r3, [r7, #6]
 8008a26:	4603      	mov	r3, r0
 8008a28:	80bb      	strh	r3, [r7, #4]
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	70fb      	strb	r3, [r7, #3]
 8008a2e:	4613      	mov	r3, r2
 8008a30:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8008a32:	2300      	movs	r3, #0
 8008a34:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8008a38:	78bb      	ldrb	r3, [r7, #2]
 8008a3a:	2b7a      	cmp	r3, #122	@ 0x7a
 8008a3c:	d901      	bls.n	8008a42 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 8008a3e:	2342      	movs	r3, #66	@ 0x42
 8008a40:	e074      	b.n	8008b2c <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 8008a42:	88fb      	ldrh	r3, [r7, #6]
 8008a44:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8008a46:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008a4a:	f107 0208 	add.w	r2, r7, #8
 8008a4e:	4413      	add	r3, r2
 8008a50:	88fa      	ldrh	r2, [r7, #6]
 8008a52:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008a54:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008a58:	3302      	adds	r3, #2
 8008a5a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  charHandle = htobs(charHandle);
 8008a5e:	88bb      	ldrh	r3, [r7, #4]
 8008a60:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8008a62:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008a66:	f107 0208 	add.w	r2, r7, #8
 8008a6a:	4413      	add	r3, r2
 8008a6c:	88ba      	ldrh	r2, [r7, #4]
 8008a6e:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008a70:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008a74:	3302      	adds	r3, #2
 8008a76:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValOffset;
 8008a7a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008a7e:	33a8      	adds	r3, #168	@ 0xa8
 8008a80:	443b      	add	r3, r7
 8008a82:	78fa      	ldrb	r2, [r7, #3]
 8008a84:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8008a88:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValueLen;
 8008a92:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008a96:	33a8      	adds	r3, #168	@ 0xa8
 8008a98:	443b      	add	r3, r7
 8008a9a:	78ba      	ldrb	r2, [r7, #2]
 8008a9c:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8008aa0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8008aaa:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008aae:	f107 0208 	add.w	r2, r7, #8
 8008ab2:	4413      	add	r3, r2
 8008ab4:	78ba      	ldrb	r2, [r7, #2]
 8008ab6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8008aba:	4618      	mov	r0, r3
 8008abc:	f004 fc49 	bl	800d352 <memcpy>
  indx +=  charValueLen;
 8008ac0:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8008ac4:	78bb      	ldrb	r3, [r7, #2]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008acc:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8008ad0:	2218      	movs	r2, #24
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f004 fbbd 	bl	800d254 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008ada:	233f      	movs	r3, #63	@ 0x3f
 8008adc:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8008ae0:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8008ae4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 8008ae8:	f107 0308 	add.w	r3, r7, #8
 8008aec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 8008af0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008af4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 8008af8:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 8008afc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 8008b00:	2301      	movs	r3, #1
 8008b02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8008b06:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 fab1 	bl	8009074 <hci_send_req>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	da01      	bge.n	8008b1c <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 8008b18:	23ff      	movs	r3, #255	@ 0xff
 8008b1a:	e007      	b.n	8008b2c <aci_gatt_update_char_value+0x118>

  if (status) {
 8008b1c:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d002      	beq.n	8008b2a <aci_gatt_update_char_value+0x116>
    return status;
 8008b24:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8008b28:	e000      	b.n	8008b2c <aci_gatt_update_char_value+0x118>
  }

  return 0;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	37ac      	adds	r7, #172	@ 0xac
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd90      	pop	{r4, r7, pc}

08008b34 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b08a      	sub	sp, #40	@ 0x28
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 8008b3e:	88fb      	ldrh	r3, [r7, #6]
 8008b40:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 8008b42:	f107 0310 	add.w	r3, r7, #16
 8008b46:	2218      	movs	r2, #24
 8008b48:	2100      	movs	r1, #0
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f004 fb82 	bl	800d254 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 8008b50:	233f      	movs	r3, #63	@ 0x3f
 8008b52:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8008b54:	f240 1327 	movw	r3, #295	@ 0x127
 8008b58:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 8008b5a:	f107 030c 	add.w	r3, r7, #12
 8008b5e:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 8008b60:	2302      	movs	r3, #2
 8008b62:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 8008b64:	f107 030b 	add.w	r3, r7, #11
 8008b68:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 8008b6e:	f107 0310 	add.w	r3, r7, #16
 8008b72:	2100      	movs	r1, #0
 8008b74:	4618      	mov	r0, r3
 8008b76:	f000 fa7d 	bl	8009074 <hci_send_req>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	da01      	bge.n	8008b84 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 8008b80:	23ff      	movs	r3, #255	@ 0xff
 8008b82:	e000      	b.n	8008b86 <aci_gatt_allow_read+0x52>

    return status;
 8008b84:	7afb      	ldrb	r3, [r7, #11]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3728      	adds	r7, #40	@ 0x28
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b0ac      	sub	sp, #176	@ 0xb0
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	60ba      	str	r2, [r7, #8]
 8008b96:	607b      	str	r3, [r7, #4]
 8008b98:	4603      	mov	r3, r0
 8008b9a:	73fb      	strb	r3, [r7, #15]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
 8008ba2:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008ba6:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008baa:	2218      	movs	r2, #24
 8008bac:	2100      	movs	r1, #0
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f004 fb50 	bl	800d254 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008bb4:	233f      	movs	r3, #63	@ 0x3f
 8008bb6:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 8008bba:	230d      	movs	r3, #13
 8008bbc:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  rq.cparam = &cp;
 8008bc0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8008bc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  rq.clen = sizeof(cp);
 8008bc8:	2301      	movs	r3, #1
 8008bca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  rq.rparam = &rp;
 8008bce:	f107 0314 	add.w	r3, r7, #20
 8008bd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  rq.rlen = sizeof(rp);
 8008bd6:	2380      	movs	r3, #128	@ 0x80
 8008bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008bdc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008be0:	2100      	movs	r1, #0
 8008be2:	4618      	mov	r0, r3
 8008be4:	f000 fa46 	bl	8009074 <hci_send_req>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	da01      	bge.n	8008bf2 <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 8008bee:	23ff      	movs	r3, #255	@ 0xff
 8008bf0:	e01e      	b.n	8008c30 <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 8008bf2:	7d3b      	ldrb	r3, [r7, #20]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d001      	beq.n	8008bfc <aci_hal_read_config_data+0x6e>
    return rp.status;
 8008bf8:	7d3b      	ldrb	r3, [r7, #20]
 8008bfa:	e019      	b.n	8008c30 <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 8008bfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	3b01      	subs	r3, #1
 8008c04:	b2da      	uxtb	r2, r3
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	89bb      	ldrh	r3, [r7, #12]
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d201      	bcs.n	8008c1a <aci_hal_read_config_data+0x8c>
 8008c16:	89ba      	ldrh	r2, [r7, #12]
 8008c18:	e002      	b.n	8008c20 <aci_hal_read_config_data+0x92>
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	f107 0314 	add.w	r3, r7, #20
 8008c24:	3301      	adds	r3, #1
 8008c26:	4619      	mov	r1, r3
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f004 fb92 	bl	800d352 <memcpy>
  
  return 0;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	37b0      	adds	r7, #176	@ 0xb0
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b08a      	sub	sp, #40	@ 0x28
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	4603      	mov	r3, r0
 8008c40:	460a      	mov	r2, r1
 8008c42:	71fb      	strb	r3, [r7, #7]
 8008c44:	4613      	mov	r3, r2
 8008c46:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8008c48:	79fb      	ldrb	r3, [r7, #7]
 8008c4a:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8008c4c:	79bb      	ldrb	r3, [r7, #6]
 8008c4e:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008c50:	f107 0310 	add.w	r3, r7, #16
 8008c54:	2218      	movs	r2, #24
 8008c56:	2100      	movs	r1, #0
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f004 fafb 	bl	800d254 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008c5e:	233f      	movs	r3, #63	@ 0x3f
 8008c60:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8008c62:	230f      	movs	r3, #15
 8008c64:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8008c66:	f107 030c 	add.w	r3, r7, #12
 8008c6a:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8008c70:	f107 030b 	add.w	r3, r7, #11
 8008c74:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8008c76:	2301      	movs	r3, #1
 8008c78:	627b      	str	r3, [r7, #36]	@ 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8008c7a:	f107 0310 	add.w	r3, r7, #16
 8008c7e:	2100      	movs	r1, #0
 8008c80:	4618      	mov	r0, r3
 8008c82:	f000 f9f7 	bl	8009074 <hci_send_req>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	da01      	bge.n	8008c90 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8008c8c:	23ff      	movs	r3, #255	@ 0xff
 8008c8e:	e000      	b.n	8008c92 <aci_hal_set_tx_power_level+0x5a>

  return status;
 8008c90:	7afb      	ldrb	r3, [r7, #11]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3728      	adds	r7, #40	@ 0x28
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8008c9a:	b590      	push	{r4, r7, lr}
 8008c9c:	b089      	sub	sp, #36	@ 0x24
 8008c9e:	af02      	add	r7, sp, #8
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8008ca4:	f107 0410 	add.w	r4, r7, #16
 8008ca8:	f107 0215 	add.w	r2, r7, #21
 8008cac:	f107 0112 	add.w	r1, r7, #18
 8008cb0:	f107 0016 	add.w	r0, r7, #22
 8008cb4:	f107 030e 	add.w	r3, r7, #14
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	4623      	mov	r3, r4
 8008cbc:	f000 f853 	bl	8008d66 <hci_le_read_local_version>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8008cc4:	7dfb      	ldrb	r3, [r7, #23]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d126      	bne.n	8008d18 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8008cca:	8a7b      	ldrh	r3, [r7, #18]
 8008ccc:	0a1b      	lsrs	r3, r3, #8
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	b2da      	uxtb	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8008cd6:	8a7b      	ldrh	r3, [r7, #18]
 8008cd8:	021b      	lsls	r3, r3, #8
 8008cda:	b29a      	uxth	r2, r3
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	881b      	ldrh	r3, [r3, #0]
 8008ce4:	b21a      	sxth	r2, r3
 8008ce6:	89fb      	ldrh	r3, [r7, #14]
 8008ce8:	091b      	lsrs	r3, r3, #4
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	011b      	lsls	r3, r3, #4
 8008cee:	b21b      	sxth	r3, r3
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	b21b      	sxth	r3, r3
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	b21b      	sxth	r3, r3
 8008cf8:	b29a      	uxth	r2, r3
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	881b      	ldrh	r3, [r3, #0]
 8008d02:	b21a      	sxth	r2, r3
 8008d04:	89fb      	ldrh	r3, [r7, #14]
 8008d06:	b21b      	sxth	r3, r3
 8008d08:	f003 030f 	and.w	r3, r3, #15
 8008d0c:	b21b      	sxth	r3, r3
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	b21b      	sxth	r3, r3
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8008d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	371c      	adds	r7, #28
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd90      	pop	{r4, r7, pc}

08008d22 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b088      	sub	sp, #32
 8008d26:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008d28:	f107 0308 	add.w	r3, r7, #8
 8008d2c:	2218      	movs	r2, #24
 8008d2e:	2100      	movs	r1, #0
 8008d30:	4618      	mov	r0, r3
 8008d32:	f004 fa8f 	bl	800d254 <memset>
  rq.ogf = OGF_HOST_CTL;
 8008d36:	2303      	movs	r3, #3
 8008d38:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008d3e:	1dfb      	adds	r3, r7, #7
 8008d40:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008d42:	2301      	movs	r3, #1
 8008d44:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008d46:	f107 0308 	add.w	r3, r7, #8
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f000 f991 	bl	8009074 <hci_send_req>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	da01      	bge.n	8008d5c <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8008d58:	23ff      	movs	r3, #255	@ 0xff
 8008d5a:	e000      	b.n	8008d5e <hci_reset+0x3c>
  
  return status;  
 8008d5c:	79fb      	ldrb	r3, [r7, #7]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3720      	adds	r7, #32
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b08e      	sub	sp, #56	@ 0x38
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	60f8      	str	r0, [r7, #12]
 8008d6e:	60b9      	str	r1, [r7, #8]
 8008d70:	607a      	str	r2, [r7, #4]
 8008d72:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008d74:	f107 0314 	add.w	r3, r7, #20
 8008d78:	2209      	movs	r2, #9
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f004 fa69 	bl	800d254 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008d82:	f107 0320 	add.w	r3, r7, #32
 8008d86:	2218      	movs	r2, #24
 8008d88:	2100      	movs	r1, #0
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f004 fa62 	bl	800d254 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8008d90:	2304      	movs	r3, #4
 8008d92:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8008d94:	2301      	movs	r3, #1
 8008d96:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = NULL;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = 0;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8008da0:	f107 0314 	add.w	r3, r7, #20
 8008da4:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8008da6:	2309      	movs	r3, #9
 8008da8:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008daa:	f107 0320 	add.w	r3, r7, #32
 8008dae:	2100      	movs	r1, #0
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 f95f 	bl	8009074 <hci_send_req>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	da01      	bge.n	8008dc0 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8008dbc:	23ff      	movs	r3, #255	@ 0xff
 8008dbe:	e018      	b.n	8008df2 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8008dc0:	7d3b      	ldrb	r3, [r7, #20]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d001      	beq.n	8008dca <hci_le_read_local_version+0x64>
    return resp.status;
 8008dc6:	7d3b      	ldrb	r3, [r7, #20]
 8008dc8:	e013      	b.n	8008df2 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8008dca:	7d7a      	ldrb	r2, [r7, #21]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8008dd0:	8afa      	ldrh	r2, [r7, #22]
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8008dd6:	7e3a      	ldrb	r2, [r7, #24]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8008ddc:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8008de0:	b29a      	uxth	r2, r3
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8008de6:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8008dea:	b29a      	uxth	r2, r3
 8008dec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008dee:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3738      	adds	r7, #56	@ 0x38
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b092      	sub	sp, #72	@ 0x48
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	4603      	mov	r3, r0
 8008e02:	6039      	str	r1, [r7, #0]
 8008e04:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8008e06:	f107 0310 	add.w	r3, r7, #16
 8008e0a:	2220      	movs	r2, #32
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f004 fa20 	bl	800d254 <memset>
  scan_resp_cp.length = length;
 8008e14:	79fb      	ldrb	r3, [r7, #7]
 8008e16:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8008e18:	79fb      	ldrb	r3, [r7, #7]
 8008e1a:	2b1f      	cmp	r3, #31
 8008e1c:	bf28      	it	cs
 8008e1e:	231f      	movcs	r3, #31
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	461a      	mov	r2, r3
 8008e24:	f107 0310 	add.w	r3, r7, #16
 8008e28:	3301      	adds	r3, #1
 8008e2a:	6839      	ldr	r1, [r7, #0]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f004 fa90 	bl	800d352 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008e32:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008e36:	2218      	movs	r2, #24
 8008e38:	2100      	movs	r1, #0
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f004 fa0a 	bl	800d254 <memset>
  rq.ogf = OGF_LE_CTL;
 8008e40:	2308      	movs	r3, #8
 8008e42:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8008e44:	2309      	movs	r3, #9
 8008e46:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &scan_resp_cp;
 8008e48:	f107 0310 	add.w	r3, r7, #16
 8008e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8008e4e:	2320      	movs	r3, #32
 8008e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 8008e52:	f107 030f 	add.w	r3, r7, #15
 8008e56:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008e5c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008e60:	2100      	movs	r1, #0
 8008e62:	4618      	mov	r0, r3
 8008e64:	f000 f906 	bl	8009074 <hci_send_req>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	da01      	bge.n	8008e72 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 8008e6e:	23ff      	movs	r3, #255	@ 0xff
 8008e70:	e000      	b.n	8008e74 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8008e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3748      	adds	r7, #72	@ 0x48
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	3308      	adds	r3, #8
 8008e88:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	2b04      	cmp	r3, #4
 8008e90:	d001      	beq.n	8008e96 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8008e92:	2301      	movs	r3, #1
 8008e94:	e00c      	b.n	8008eb0 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	3302      	adds	r3, #2
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008ea4:	3b03      	subs	r3, #3
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d001      	beq.n	8008eae <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8008eaa:	2302      	movs	r3, #2
 8008eac:	e000      	b.n	8008eb0 <verify_packet+0x34>
  
  return 0;      
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3714      	adds	r7, #20
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b0a6      	sub	sp, #152	@ 0x98
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	607b      	str	r3, [r7, #4]
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	81fb      	strh	r3, [r7, #14]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	81bb      	strh	r3, [r7, #12]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8008ed0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008ed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ed8:	b21a      	sxth	r2, r3
 8008eda:	89fb      	ldrh	r3, [r7, #14]
 8008edc:	029b      	lsls	r3, r3, #10
 8008ede:	b21b      	sxth	r3, r3
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	b21b      	sxth	r3, r3
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8008ee8:	7afb      	ldrb	r3, [r7, #11]
 8008eea:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8008eec:	2301      	movs	r3, #1
 8008eee:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8008ef0:	f107 0318 	add.w	r3, r7, #24
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	f107 0314 	add.w	r3, r7, #20
 8008efc:	8819      	ldrh	r1, [r3, #0]
 8008efe:	789b      	ldrb	r3, [r3, #2]
 8008f00:	8011      	strh	r1, [r2, #0]
 8008f02:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8008f04:	f107 0318 	add.w	r3, r7, #24
 8008f08:	3304      	adds	r3, #4
 8008f0a:	7afa      	ldrb	r2, [r7, #11]
 8008f0c:	6879      	ldr	r1, [r7, #4]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f004 fa1f 	bl	800d352 <memcpy>
  
  if (hciContext.io.Send)
 8008f14:	4b08      	ldr	r3, [pc, #32]	@ (8008f38 <send_cmd+0x7c>)
 8008f16:	691b      	ldr	r3, [r3, #16]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d009      	beq.n	8008f30 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8008f1c:	4b06      	ldr	r3, [pc, #24]	@ (8008f38 <send_cmd+0x7c>)
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	7afa      	ldrb	r2, [r7, #11]
 8008f22:	b292      	uxth	r2, r2
 8008f24:	3204      	adds	r2, #4
 8008f26:	b291      	uxth	r1, r2
 8008f28:	f107 0218 	add.w	r2, r7, #24
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	4798      	blx	r3
  }
}
 8008f30:	bf00      	nop
 8008f32:	3798      	adds	r7, #152	@ 0x98
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	20001ef0 	.word	0x20001ef0

08008f3c <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8008f46:	e00a      	b.n	8008f5e <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8008f48:	f107 030c 	add.w	r3, r7, #12
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6838      	ldr	r0, [r7, #0]
 8008f50:	f000 fae8 	bl	8009524 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	4619      	mov	r1, r3
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 fa4f 	bl	80093fc <list_insert_head>
  while (!list_is_empty(src_list))
 8008f5e:	6838      	ldr	r0, [r7, #0]
 8008f60:	f000 fa2a 	bl	80093b8 <list_is_empty>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d0ee      	beq.n	8008f48 <move_list+0xc>
  }
}
 8008f6a:	bf00      	nop
 8008f6c:	bf00      	nop
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008f7a:	e009      	b.n	8008f90 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8008f7c:	1d3b      	adds	r3, r7, #4
 8008f7e:	4619      	mov	r1, r3
 8008f80:	4809      	ldr	r0, [pc, #36]	@ (8008fa8 <free_event_list+0x34>)
 8008f82:	f000 faa8 	bl	80094d6 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4619      	mov	r1, r3
 8008f8a:	4808      	ldr	r0, [pc, #32]	@ (8008fac <free_event_list+0x38>)
 8008f8c:	f000 fa5c 	bl	8009448 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008f90:	4806      	ldr	r0, [pc, #24]	@ (8008fac <free_event_list+0x38>)
 8008f92:	f000 faee 	bl	8009572 <list_get_size>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	ddef      	ble.n	8008f7c <free_event_list+0x8>
  }
}
 8008f9c:	bf00      	nop
 8008f9e:	bf00      	nop
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	20001c2c 	.word	0x20001c2c
 8008fac:	20001c24 	.word	0x20001c24

08008fb0 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d002      	beq.n	8008fc6 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8008fc0:	4a18      	ldr	r2, [pc, #96]	@ (8009024 <hci_init+0x74>)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8008fc6:	4818      	ldr	r0, [pc, #96]	@ (8009028 <hci_init+0x78>)
 8008fc8:	f000 f9e6 	bl	8009398 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8008fcc:	4817      	ldr	r0, [pc, #92]	@ (800902c <hci_init+0x7c>)
 8008fce:	f000 f9e3 	bl	8009398 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8008fd2:	f7f8 fe3d 	bl	8001c50 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	73fb      	strb	r3, [r7, #15]
 8008fda:	e00c      	b.n	8008ff6 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8008fdc:	7bfb      	ldrb	r3, [r7, #15]
 8008fde:	228c      	movs	r2, #140	@ 0x8c
 8008fe0:	fb02 f303 	mul.w	r3, r2, r3
 8008fe4:	4a12      	ldr	r2, [pc, #72]	@ (8009030 <hci_init+0x80>)
 8008fe6:	4413      	add	r3, r2
 8008fe8:	4619      	mov	r1, r3
 8008fea:	480f      	ldr	r0, [pc, #60]	@ (8009028 <hci_init+0x78>)
 8008fec:	f000 fa2c 	bl	8009448 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008ff0:	7bfb      	ldrb	r3, [r7, #15]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	73fb      	strb	r3, [r7, #15]
 8008ff6:	7bfb      	ldrb	r3, [r7, #15]
 8008ff8:	2b04      	cmp	r3, #4
 8008ffa:	d9ef      	bls.n	8008fdc <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8008ffc:	4b09      	ldr	r3, [pc, #36]	@ (8009024 <hci_init+0x74>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d003      	beq.n	800900c <hci_init+0x5c>
 8009004:	4b07      	ldr	r3, [pc, #28]	@ (8009024 <hci_init+0x74>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2000      	movs	r0, #0
 800900a:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800900c:	4b05      	ldr	r3, [pc, #20]	@ (8009024 <hci_init+0x74>)
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d002      	beq.n	800901a <hci_init+0x6a>
 8009014:	4b03      	ldr	r3, [pc, #12]	@ (8009024 <hci_init+0x74>)
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	4798      	blx	r3
}
 800901a:	bf00      	nop
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	20001ef0 	.word	0x20001ef0
 8009028:	20001c24 	.word	0x20001c24
 800902c:	20001c2c 	.word	0x20001c2c
 8009030:	20001c34 	.word	0x20001c34

08009034 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a0b      	ldr	r2, [pc, #44]	@ (8009070 <hci_register_io_bus+0x3c>)
 8009042:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	4a09      	ldr	r2, [pc, #36]	@ (8009070 <hci_register_io_bus+0x3c>)
 800904a:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	4a07      	ldr	r2, [pc, #28]	@ (8009070 <hci_register_io_bus+0x3c>)
 8009052:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	4a05      	ldr	r2, [pc, #20]	@ (8009070 <hci_register_io_bus+0x3c>)
 800905a:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	4a03      	ldr	r2, [pc, #12]	@ (8009070 <hci_register_io_bus+0x3c>)
 8009062:	6093      	str	r3, [r2, #8]
}
 8009064:	bf00      	nop
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	20001ef0 	.word	0x20001ef0

08009074 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b08e      	sub	sp, #56	@ 0x38
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	460b      	mov	r3, r1
 800907e:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	885b      	ldrh	r3, [r3, #2]
 8009084:	b21b      	sxth	r3, r3
 8009086:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800908a:	b21a      	sxth	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	881b      	ldrh	r3, [r3, #0]
 8009090:	029b      	lsls	r3, r3, #10
 8009092:	b21b      	sxth	r3, r3
 8009094:	4313      	orrs	r3, r2
 8009096:	b21b      	sxth	r3, r3
 8009098:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800909a:	2300      	movs	r3, #0
 800909c:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800909e:	f107 0308 	add.w	r3, r7, #8
 80090a2:	4618      	mov	r0, r3
 80090a4:	f000 f978 	bl	8009398 <list_init_head>

  free_event_list();
 80090a8:	f7ff ff64 	bl	8008f74 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	8818      	ldrh	r0, [r3, #0]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	8859      	ldrh	r1, [r3, #2]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	b2da      	uxtb	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f7ff fefd 	bl	8008ebc <send_cmd>
  
  if (async)
 80090c2:	78fb      	ldrb	r3, [r7, #3]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d001      	beq.n	80090cc <hci_send_req+0x58>
  {
    return 0;
 80090c8:	2300      	movs	r3, #0
 80090ca:	e0e2      	b.n	8009292 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 80090cc:	f7fa fb3c 	bl	8003748 <HAL_GetTick>
 80090d0:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80090d2:	f7fa fb39 	bl	8003748 <HAL_GetTick>
 80090d6:	4602      	mov	r2, r0
 80090d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090da:	1ad3      	subs	r3, r2, r3
 80090dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80090e0:	f200 80b3 	bhi.w	800924a <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80090e4:	486d      	ldr	r0, [pc, #436]	@ (800929c <hci_send_req+0x228>)
 80090e6:	f000 f967 	bl	80093b8 <list_is_empty>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d000      	beq.n	80090f2 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80090f0:	e7ef      	b.n	80090d2 <hci_send_req+0x5e>
      {
        break;
 80090f2:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 80090f4:	f107 0310 	add.w	r3, r7, #16
 80090f8:	4619      	mov	r1, r3
 80090fa:	4868      	ldr	r0, [pc, #416]	@ (800929c <hci_send_req+0x228>)
 80090fc:	f000 f9eb 	bl	80094d6 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	3308      	adds	r3, #8
 8009104:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8009106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	2b04      	cmp	r3, #4
 800910c:	d17f      	bne.n	800920e <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 800910e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009110:	3301      	adds	r3, #1
 8009112:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	3308      	adds	r3, #8
 8009118:	3303      	adds	r3, #3
 800911a:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8009122:	3b03      	subs	r3, #3
 8009124:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8009126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	2b3e      	cmp	r3, #62	@ 0x3e
 800912c:	d04c      	beq.n	80091c8 <hci_send_req+0x154>
 800912e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009130:	dc68      	bgt.n	8009204 <hci_send_req+0x190>
 8009132:	2b10      	cmp	r3, #16
 8009134:	f000 808b 	beq.w	800924e <hci_send_req+0x1da>
 8009138:	2b10      	cmp	r3, #16
 800913a:	dc63      	bgt.n	8009204 <hci_send_req+0x190>
 800913c:	2b0e      	cmp	r3, #14
 800913e:	d023      	beq.n	8009188 <hci_send_req+0x114>
 8009140:	2b0f      	cmp	r3, #15
 8009142:	d15f      	bne.n	8009204 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8009144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009146:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	885b      	ldrh	r3, [r3, #2]
 800914c:	b29b      	uxth	r3, r3
 800914e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009150:	429a      	cmp	r2, r3
 8009152:	d17e      	bne.n	8009252 <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	2b0f      	cmp	r3, #15
 800915a:	d004      	beq.n	8009166 <hci_send_req+0xf2>
          if (cs->status) {
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d051      	beq.n	8009208 <hci_send_req+0x194>
            goto failed;
 8009164:	e078      	b.n	8009258 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	695a      	ldr	r2, [r3, #20]
 800916a:	6a3b      	ldr	r3, [r7, #32]
 800916c:	429a      	cmp	r2, r3
 800916e:	bf28      	it	cs
 8009170:	461a      	movcs	r2, r3
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6918      	ldr	r0, [r3, #16]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	695b      	ldr	r3, [r3, #20]
 800917e:	461a      	mov	r2, r3
 8009180:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009182:	f004 f8e6 	bl	800d352 <memcpy>
        goto done;
 8009186:	e078      	b.n	800927a <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8009188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800918a:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009192:	b29b      	uxth	r3, r3
 8009194:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009196:	429a      	cmp	r2, r3
 8009198:	d15d      	bne.n	8009256 <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800919a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800919c:	3303      	adds	r3, #3
 800919e:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 80091a0:	6a3b      	ldr	r3, [r7, #32]
 80091a2:	3b03      	subs	r3, #3
 80091a4:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	695a      	ldr	r2, [r3, #20]
 80091aa:	6a3b      	ldr	r3, [r7, #32]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	bf28      	it	cs
 80091b0:	461a      	movcs	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6918      	ldr	r0, [r3, #16]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	695b      	ldr	r3, [r3, #20]
 80091be:	461a      	mov	r2, r3
 80091c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80091c2:	f004 f8c6 	bl	800d352 <memcpy>
        goto done;
 80091c6:	e058      	b.n	800927a <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 80091c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ca:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	461a      	mov	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d118      	bne.n	800920c <hci_send_req+0x198>
          break;
      
        len -= 1;
 80091da:	6a3b      	ldr	r3, [r7, #32]
 80091dc:	3b01      	subs	r3, #1
 80091de:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	695a      	ldr	r2, [r3, #20]
 80091e4:	6a3b      	ldr	r3, [r7, #32]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	bf28      	it	cs
 80091ea:	461a      	movcs	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6918      	ldr	r0, [r3, #16]
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	1c59      	adds	r1, r3, #1
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	695b      	ldr	r3, [r3, #20]
 80091fc:	461a      	mov	r2, r3
 80091fe:	f004 f8a8 	bl	800d352 <memcpy>
        goto done;
 8009202:	e03a      	b.n	800927a <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8009204:	bf00      	nop
 8009206:	e002      	b.n	800920e <hci_send_req+0x19a>
          break;
 8009208:	bf00      	nop
 800920a:	e000      	b.n	800920e <hci_send_req+0x19a>
          break;
 800920c:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800920e:	4824      	ldr	r0, [pc, #144]	@ (80092a0 <hci_send_req+0x22c>)
 8009210:	f000 f8d2 	bl	80093b8 <list_is_empty>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00d      	beq.n	8009236 <hci_send_req+0x1c2>
 800921a:	4820      	ldr	r0, [pc, #128]	@ (800929c <hci_send_req+0x228>)
 800921c:	f000 f8cc 	bl	80093b8 <list_is_empty>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d007      	beq.n	8009236 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	4619      	mov	r1, r3
 800922a:	481d      	ldr	r0, [pc, #116]	@ (80092a0 <hci_send_req+0x22c>)
 800922c:	f000 f90c 	bl	8009448 <list_insert_tail>
      hciReadPacket=NULL;
 8009230:	2300      	movs	r3, #0
 8009232:	613b      	str	r3, [r7, #16]
 8009234:	e008      	b.n	8009248 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	f107 0308 	add.w	r3, r7, #8
 800923c:	4611      	mov	r1, r2
 800923e:	4618      	mov	r0, r3
 8009240:	f000 f902 	bl	8009448 <list_insert_tail>
      hciReadPacket=NULL;
 8009244:	2300      	movs	r3, #0
 8009246:	613b      	str	r3, [r7, #16]
  {
 8009248:	e740      	b.n	80090cc <hci_send_req+0x58>
        goto failed;
 800924a:	bf00      	nop
 800924c:	e004      	b.n	8009258 <hci_send_req+0x1e4>
        goto failed;
 800924e:	bf00      	nop
 8009250:	e002      	b.n	8009258 <hci_send_req+0x1e4>
          goto failed;
 8009252:	bf00      	nop
 8009254:	e000      	b.n	8009258 <hci_send_req+0x1e4>
          goto failed;
 8009256:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d004      	beq.n	8009268 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	4619      	mov	r1, r3
 8009262:	480f      	ldr	r0, [pc, #60]	@ (80092a0 <hci_send_req+0x22c>)
 8009264:	f000 f8ca 	bl	80093fc <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8009268:	f107 0308 	add.w	r3, r7, #8
 800926c:	4619      	mov	r1, r3
 800926e:	480b      	ldr	r0, [pc, #44]	@ (800929c <hci_send_req+0x228>)
 8009270:	f7ff fe64 	bl	8008f3c <move_list>

  return -1;
 8009274:	f04f 33ff 	mov.w	r3, #4294967295
 8009278:	e00b      	b.n	8009292 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	4619      	mov	r1, r3
 800927e:	4808      	ldr	r0, [pc, #32]	@ (80092a0 <hci_send_req+0x22c>)
 8009280:	f000 f8bc 	bl	80093fc <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8009284:	f107 0308 	add.w	r3, r7, #8
 8009288:	4619      	mov	r1, r3
 800928a:	4804      	ldr	r0, [pc, #16]	@ (800929c <hci_send_req+0x228>)
 800928c:	f7ff fe56 	bl	8008f3c <move_list>

  return 0;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3738      	adds	r7, #56	@ 0x38
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	20001c2c 	.word	0x20001c2c
 80092a0:	20001c24 	.word	0x20001c24

080092a4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 80092aa:	2300      	movs	r3, #0
 80092ac:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80092ae:	e013      	b.n	80092d8 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 80092b0:	1d3b      	adds	r3, r7, #4
 80092b2:	4619      	mov	r1, r3
 80092b4:	480e      	ldr	r0, [pc, #56]	@ (80092f0 <hci_user_evt_proc+0x4c>)
 80092b6:	f000 f90e 	bl	80094d6 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80092ba:	4b0e      	ldr	r3, [pc, #56]	@ (80092f4 <hci_user_evt_proc+0x50>)
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d005      	beq.n	80092ce <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 80092c2:	4b0c      	ldr	r3, [pc, #48]	@ (80092f4 <hci_user_evt_proc+0x50>)
 80092c4:	69db      	ldr	r3, [r3, #28]
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	3208      	adds	r2, #8
 80092ca:	4610      	mov	r0, r2
 80092cc:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4619      	mov	r1, r3
 80092d2:	4809      	ldr	r0, [pc, #36]	@ (80092f8 <hci_user_evt_proc+0x54>)
 80092d4:	f000 f8b8 	bl	8009448 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80092d8:	4805      	ldr	r0, [pc, #20]	@ (80092f0 <hci_user_evt_proc+0x4c>)
 80092da:	f000 f86d 	bl	80093b8 <list_is_empty>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d0e5      	beq.n	80092b0 <hci_user_evt_proc+0xc>
  }
}
 80092e4:	bf00      	nop
 80092e6:	bf00      	nop
 80092e8:	3708      	adds	r7, #8
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	20001c2c 	.word	0x20001c2c
 80092f4:	20001ef0 	.word	0x20001ef0
 80092f8:	20001c24 	.word	0x20001c24

080092fc <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b086      	sub	sp, #24
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8009304:	2300      	movs	r3, #0
 8009306:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8009308:	2300      	movs	r3, #0
 800930a:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800930c:	481f      	ldr	r0, [pc, #124]	@ (800938c <hci_notify_asynch_evt+0x90>)
 800930e:	f000 f853 	bl	80093b8 <list_is_empty>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d132      	bne.n	800937e <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8009318:	f107 030c 	add.w	r3, r7, #12
 800931c:	4619      	mov	r1, r3
 800931e:	481b      	ldr	r0, [pc, #108]	@ (800938c <hci_notify_asynch_evt+0x90>)
 8009320:	f000 f8d9 	bl	80094d6 <list_remove_head>
    
    if (hciContext.io.Receive)
 8009324:	4b1a      	ldr	r3, [pc, #104]	@ (8009390 <hci_notify_asynch_evt+0x94>)
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d02a      	beq.n	8009382 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800932c:	4b18      	ldr	r3, [pc, #96]	@ (8009390 <hci_notify_asynch_evt+0x94>)
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	3208      	adds	r2, #8
 8009334:	2180      	movs	r1, #128	@ 0x80
 8009336:	4610      	mov	r0, r2
 8009338:	4798      	blx	r3
 800933a:	4603      	mov	r3, r0
 800933c:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800933e:	7cfb      	ldrb	r3, [r7, #19]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d016      	beq.n	8009372 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	7cfa      	ldrb	r2, [r7, #19]
 8009348:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	4618      	mov	r0, r3
 8009350:	f7ff fd94 	bl	8008e7c <verify_packet>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d105      	bne.n	8009366 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	4619      	mov	r1, r3
 800935e:	480d      	ldr	r0, [pc, #52]	@ (8009394 <hci_notify_asynch_evt+0x98>)
 8009360:	f000 f872 	bl	8009448 <list_insert_tail>
 8009364:	e00d      	b.n	8009382 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	4619      	mov	r1, r3
 800936a:	4808      	ldr	r0, [pc, #32]	@ (800938c <hci_notify_asynch_evt+0x90>)
 800936c:	f000 f846 	bl	80093fc <list_insert_head>
 8009370:	e007      	b.n	8009382 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	4619      	mov	r1, r3
 8009376:	4805      	ldr	r0, [pc, #20]	@ (800938c <hci_notify_asynch_evt+0x90>)
 8009378:	f000 f840 	bl	80093fc <list_insert_head>
 800937c:	e001      	b.n	8009382 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800937e:	2301      	movs	r3, #1
 8009380:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8009382:	697b      	ldr	r3, [r7, #20]

}
 8009384:	4618      	mov	r0, r3
 8009386:	3718      	adds	r7, #24
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	20001c24 	.word	0x20001c24
 8009390:	20001ef0 	.word	0x20001ef0
 8009394:	20001c2c 	.word	0x20001c2c

08009398 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	605a      	str	r2, [r3, #4]
}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b087      	sub	sp, #28
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093c0:	f3ef 8310 	mrs	r3, PRIMASK
 80093c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80093c6:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80093c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80093ca:	b672      	cpsid	i
}
 80093cc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d102      	bne.n	80093de <list_is_empty+0x26>
  {
    return_value = 1;
 80093d8:	2301      	movs	r3, #1
 80093da:	75fb      	strb	r3, [r7, #23]
 80093dc:	e001      	b.n	80093e2 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 80093de:	2300      	movs	r3, #0
 80093e0:	75fb      	strb	r3, [r7, #23]
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	f383 8810 	msr	PRIMASK, r3
}
 80093ec:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 80093ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	371c      	adds	r7, #28
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b087      	sub	sp, #28
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009406:	f3ef 8310 	mrs	r3, PRIMASK
 800940a:	60fb      	str	r3, [r7, #12]
  return(result);
 800940c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800940e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009410:	b672      	cpsid	i
}
 8009412:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	683a      	ldr	r2, [r7, #0]
 8009426:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	683a      	ldr	r2, [r7, #0]
 800942e:	605a      	str	r2, [r3, #4]
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	f383 8810 	msr	PRIMASK, r3
}
 800943a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800943c:	bf00      	nop
 800943e:	371c      	adds	r7, #28
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8009448:	b480      	push	{r7}
 800944a:	b087      	sub	sp, #28
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009452:	f3ef 8310 	mrs	r3, PRIMASK
 8009456:	60fb      	str	r3, [r7, #12]
  return(result);
 8009458:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800945a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800945c:	b672      	cpsid	i
}
 800945e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	685a      	ldr	r2, [r3, #4]
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	683a      	ldr	r2, [r7, #0]
 8009472:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	683a      	ldr	r2, [r7, #0]
 800947a:	601a      	str	r2, [r3, #0]
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	f383 8810 	msr	PRIMASK, r3
}
 8009486:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009488:	bf00      	nop
 800948a:	371c      	adds	r7, #28
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8009494:	b480      	push	{r7}
 8009496:	b087      	sub	sp, #28
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800949c:	f3ef 8310 	mrs	r3, PRIMASK
 80094a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80094a2:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80094a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80094a6:	b672      	cpsid	i
}
 80094a8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	6812      	ldr	r2, [r2, #0]
 80094b2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	6852      	ldr	r2, [r2, #4]
 80094bc:	605a      	str	r2, [r3, #4]
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	f383 8810 	msr	PRIMASK, r3
}
 80094c8:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80094ca:	bf00      	nop
 80094cc:	371c      	adds	r7, #28
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr

080094d6 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b086      	sub	sp, #24
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094e0:	f3ef 8310 	mrs	r3, PRIMASK
 80094e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80094e6:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80094e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80094ea:	b672      	cpsid	i
}
 80094ec:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7ff ffca 	bl	8009494 <list_remove_node>
  (*node)->next = NULL;
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2200      	movs	r2, #0
 8009506:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2200      	movs	r2, #0
 800950e:	605a      	str	r2, [r3, #4]
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	f383 8810 	msr	PRIMASK, r3
}
 800951a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800951c:	bf00      	nop
 800951e:	3718      	adds	r7, #24
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b086      	sub	sp, #24
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800952e:	f3ef 8310 	mrs	r3, PRIMASK
 8009532:	60fb      	str	r3, [r7, #12]
  return(result);
 8009534:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009536:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009538:	b672      	cpsid	i
}
 800953a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	685a      	ldr	r2, [r3, #4]
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	4618      	mov	r0, r3
 800954a:	f7ff ffa3 	bl	8009494 <list_remove_node>
  (*node)->next = NULL;
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2200      	movs	r2, #0
 8009554:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2200      	movs	r2, #0
 800955c:	605a      	str	r2, [r3, #4]
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	f383 8810 	msr	PRIMASK, r3
}
 8009568:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800956a:	bf00      	nop
 800956c:	3718      	adds	r7, #24
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8009572:	b480      	push	{r7}
 8009574:	b089      	sub	sp, #36	@ 0x24
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  int size = 0;
 800957a:	2300      	movs	r3, #0
 800957c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800957e:	f3ef 8310 	mrs	r3, PRIMASK
 8009582:	613b      	str	r3, [r7, #16]
  return(result);
 8009584:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009586:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009588:	b672      	cpsid	i
}
 800958a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8009592:	e005      	b.n	80095a0 <list_get_size+0x2e>
  {
    size++;
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	3301      	adds	r3, #1
 8009598:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80095a0:	69ba      	ldr	r2, [r7, #24]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d1f5      	bne.n	8009594 <list_get_size+0x22>
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f383 8810 	msr	PRIMASK, r3
}
 80095b2:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 80095b4:	69fb      	ldr	r3, [r7, #28]
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3724      	adds	r7, #36	@ 0x24
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr
	...

080095c4 <__NVIC_SetPriority>:
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	4603      	mov	r3, r0
 80095cc:	6039      	str	r1, [r7, #0]
 80095ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80095d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	db0a      	blt.n	80095ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	b2da      	uxtb	r2, r3
 80095dc:	490c      	ldr	r1, [pc, #48]	@ (8009610 <__NVIC_SetPriority+0x4c>)
 80095de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095e2:	0112      	lsls	r2, r2, #4
 80095e4:	b2d2      	uxtb	r2, r2
 80095e6:	440b      	add	r3, r1
 80095e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80095ec:	e00a      	b.n	8009604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	b2da      	uxtb	r2, r3
 80095f2:	4908      	ldr	r1, [pc, #32]	@ (8009614 <__NVIC_SetPriority+0x50>)
 80095f4:	79fb      	ldrb	r3, [r7, #7]
 80095f6:	f003 030f 	and.w	r3, r3, #15
 80095fa:	3b04      	subs	r3, #4
 80095fc:	0112      	lsls	r2, r2, #4
 80095fe:	b2d2      	uxtb	r2, r2
 8009600:	440b      	add	r3, r1
 8009602:	761a      	strb	r2, [r3, #24]
}
 8009604:	bf00      	nop
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr
 8009610:	e000e100 	.word	0xe000e100
 8009614:	e000ed00 	.word	0xe000ed00

08009618 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009618:	b580      	push	{r7, lr}
 800961a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800961c:	2100      	movs	r1, #0
 800961e:	f06f 0004 	mvn.w	r0, #4
 8009622:	f7ff ffcf 	bl	80095c4 <__NVIC_SetPriority>
#endif
}
 8009626:	bf00      	nop
 8009628:	bd80      	pop	{r7, pc}
	...

0800962c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009632:	f3ef 8305 	mrs	r3, IPSR
 8009636:	603b      	str	r3, [r7, #0]
  return(result);
 8009638:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800963a:	2b00      	cmp	r3, #0
 800963c:	d003      	beq.n	8009646 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800963e:	f06f 0305 	mvn.w	r3, #5
 8009642:	607b      	str	r3, [r7, #4]
 8009644:	e00c      	b.n	8009660 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009646:	4b0a      	ldr	r3, [pc, #40]	@ (8009670 <osKernelInitialize+0x44>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d105      	bne.n	800965a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800964e:	4b08      	ldr	r3, [pc, #32]	@ (8009670 <osKernelInitialize+0x44>)
 8009650:	2201      	movs	r2, #1
 8009652:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009654:	2300      	movs	r3, #0
 8009656:	607b      	str	r3, [r7, #4]
 8009658:	e002      	b.n	8009660 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800965a:	f04f 33ff 	mov.w	r3, #4294967295
 800965e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009660:	687b      	ldr	r3, [r7, #4]
}
 8009662:	4618      	mov	r0, r3
 8009664:	370c      	adds	r7, #12
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop
 8009670:	20001f10 	.word	0x20001f10

08009674 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800967a:	f3ef 8305 	mrs	r3, IPSR
 800967e:	603b      	str	r3, [r7, #0]
  return(result);
 8009680:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009682:	2b00      	cmp	r3, #0
 8009684:	d003      	beq.n	800968e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009686:	f06f 0305 	mvn.w	r3, #5
 800968a:	607b      	str	r3, [r7, #4]
 800968c:	e010      	b.n	80096b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800968e:	4b0b      	ldr	r3, [pc, #44]	@ (80096bc <osKernelStart+0x48>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d109      	bne.n	80096aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009696:	f7ff ffbf 	bl	8009618 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800969a:	4b08      	ldr	r3, [pc, #32]	@ (80096bc <osKernelStart+0x48>)
 800969c:	2202      	movs	r2, #2
 800969e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80096a0:	f001 f87a 	bl	800a798 <vTaskStartScheduler>
      stat = osOK;
 80096a4:	2300      	movs	r3, #0
 80096a6:	607b      	str	r3, [r7, #4]
 80096a8:	e002      	b.n	80096b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80096aa:	f04f 33ff 	mov.w	r3, #4294967295
 80096ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80096b0:	687b      	ldr	r3, [r7, #4]
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	20001f10 	.word	0x20001f10

080096c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b08e      	sub	sp, #56	@ 0x38
 80096c4:	af04      	add	r7, sp, #16
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80096cc:	2300      	movs	r3, #0
 80096ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096d0:	f3ef 8305 	mrs	r3, IPSR
 80096d4:	617b      	str	r3, [r7, #20]
  return(result);
 80096d6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d17e      	bne.n	80097da <osThreadNew+0x11a>
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d07b      	beq.n	80097da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80096e2:	2380      	movs	r3, #128	@ 0x80
 80096e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80096e6:	2318      	movs	r3, #24
 80096e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80096ea:	2300      	movs	r3, #0
 80096ec:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80096ee:	f04f 33ff 	mov.w	r3, #4294967295
 80096f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d045      	beq.n	8009786 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d002      	beq.n	8009708 <osThreadNew+0x48>
        name = attr->name;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	699b      	ldr	r3, [r3, #24]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d002      	beq.n	8009716 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d008      	beq.n	800972e <osThreadNew+0x6e>
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	2b38      	cmp	r3, #56	@ 0x38
 8009720:	d805      	bhi.n	800972e <osThreadNew+0x6e>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	f003 0301 	and.w	r3, r3, #1
 800972a:	2b00      	cmp	r3, #0
 800972c:	d001      	beq.n	8009732 <osThreadNew+0x72>
        return (NULL);
 800972e:	2300      	movs	r3, #0
 8009730:	e054      	b.n	80097dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	695b      	ldr	r3, [r3, #20]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d003      	beq.n	8009742 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	695b      	ldr	r3, [r3, #20]
 800973e:	089b      	lsrs	r3, r3, #2
 8009740:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00e      	beq.n	8009768 <osThreadNew+0xa8>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	2b5b      	cmp	r3, #91	@ 0x5b
 8009750:	d90a      	bls.n	8009768 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009756:	2b00      	cmp	r3, #0
 8009758:	d006      	beq.n	8009768 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	695b      	ldr	r3, [r3, #20]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d002      	beq.n	8009768 <osThreadNew+0xa8>
        mem = 1;
 8009762:	2301      	movs	r3, #1
 8009764:	61bb      	str	r3, [r7, #24]
 8009766:	e010      	b.n	800978a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d10c      	bne.n	800978a <osThreadNew+0xca>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d108      	bne.n	800978a <osThreadNew+0xca>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d104      	bne.n	800978a <osThreadNew+0xca>
          mem = 0;
 8009780:	2300      	movs	r3, #0
 8009782:	61bb      	str	r3, [r7, #24]
 8009784:	e001      	b.n	800978a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009786:	2300      	movs	r3, #0
 8009788:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	2b01      	cmp	r3, #1
 800978e:	d110      	bne.n	80097b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009798:	9202      	str	r2, [sp, #8]
 800979a:	9301      	str	r3, [sp, #4]
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	9300      	str	r3, [sp, #0]
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	6a3a      	ldr	r2, [r7, #32]
 80097a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	f000 fe1a 	bl	800a3e0 <xTaskCreateStatic>
 80097ac:	4603      	mov	r3, r0
 80097ae:	613b      	str	r3, [r7, #16]
 80097b0:	e013      	b.n	80097da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80097b2:	69bb      	ldr	r3, [r7, #24]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d110      	bne.n	80097da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80097b8:	6a3b      	ldr	r3, [r7, #32]
 80097ba:	b29a      	uxth	r2, r3
 80097bc:	f107 0310 	add.w	r3, r7, #16
 80097c0:	9301      	str	r3, [sp, #4]
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	9300      	str	r3, [sp, #0]
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80097ca:	68f8      	ldr	r0, [r7, #12]
 80097cc:	f000 fe68 	bl	800a4a0 <xTaskCreate>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d001      	beq.n	80097da <osThreadNew+0x11a>
            hTask = NULL;
 80097d6:	2300      	movs	r3, #0
 80097d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80097da:	693b      	ldr	r3, [r7, #16]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3728      	adds	r7, #40	@ 0x28
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097ec:	f3ef 8305 	mrs	r3, IPSR
 80097f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80097f2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d003      	beq.n	8009800 <osDelay+0x1c>
    stat = osErrorISR;
 80097f8:	f06f 0305 	mvn.w	r3, #5
 80097fc:	60fb      	str	r3, [r7, #12]
 80097fe:	e007      	b.n	8009810 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009800:	2300      	movs	r3, #0
 8009802:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d002      	beq.n	8009810 <osDelay+0x2c>
      vTaskDelay(ticks);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 ff8e 	bl	800a72c <vTaskDelay>
    }
  }

  return (stat);
 8009810:	68fb      	ldr	r3, [r7, #12]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
	...

0800981c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800981c:	b480      	push	{r7}
 800981e:	b085      	sub	sp, #20
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	4a07      	ldr	r2, [pc, #28]	@ (8009848 <vApplicationGetIdleTaskMemory+0x2c>)
 800982c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	4a06      	ldr	r2, [pc, #24]	@ (800984c <vApplicationGetIdleTaskMemory+0x30>)
 8009832:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2280      	movs	r2, #128	@ 0x80
 8009838:	601a      	str	r2, [r3, #0]
}
 800983a:	bf00      	nop
 800983c:	3714      	adds	r7, #20
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	20001f14 	.word	0x20001f14
 800984c:	20001f70 	.word	0x20001f70

08009850 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	4a07      	ldr	r2, [pc, #28]	@ (800987c <vApplicationGetTimerTaskMemory+0x2c>)
 8009860:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	4a06      	ldr	r2, [pc, #24]	@ (8009880 <vApplicationGetTimerTaskMemory+0x30>)
 8009866:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800986e:	601a      	str	r2, [r3, #0]
}
 8009870:	bf00      	nop
 8009872:	3714      	adds	r7, #20
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr
 800987c:	20002170 	.word	0x20002170
 8009880:	200021cc 	.word	0x200021cc

08009884 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f103 0208 	add.w	r2, r3, #8
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f04f 32ff 	mov.w	r2, #4294967295
 800989c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f103 0208 	add.w	r2, r3, #8
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f103 0208 	add.w	r2, r3, #8
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80098b8:	bf00      	nop
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80098d2:	bf00      	nop
 80098d4:	370c      	adds	r7, #12
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr

080098de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80098de:	b480      	push	{r7}
 80098e0:	b085      	sub	sp, #20
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
 80098e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	689a      	ldr	r2, [r3, #8]
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	683a      	ldr	r2, [r7, #0]
 8009902:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	683a      	ldr	r2, [r7, #0]
 8009908:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	1c5a      	adds	r2, r3, #1
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	601a      	str	r2, [r3, #0]
}
 800991a:	bf00      	nop
 800991c:	3714      	adds	r7, #20
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr

08009926 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009926:	b480      	push	{r7}
 8009928:	b085      	sub	sp, #20
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800993c:	d103      	bne.n	8009946 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	60fb      	str	r3, [r7, #12]
 8009944:	e00c      	b.n	8009960 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	3308      	adds	r3, #8
 800994a:	60fb      	str	r3, [r7, #12]
 800994c:	e002      	b.n	8009954 <vListInsert+0x2e>
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	60fb      	str	r3, [r7, #12]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	429a      	cmp	r2, r3
 800995e:	d2f6      	bcs.n	800994e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	685a      	ldr	r2, [r3, #4]
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	683a      	ldr	r2, [r7, #0]
 800996e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	68fa      	ldr	r2, [r7, #12]
 8009974:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	683a      	ldr	r2, [r7, #0]
 800997a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	1c5a      	adds	r2, r3, #1
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	601a      	str	r2, [r3, #0]
}
 800998c:	bf00      	nop
 800998e:	3714      	adds	r7, #20
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	6892      	ldr	r2, [r2, #8]
 80099ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	6852      	ldr	r2, [r2, #4]
 80099b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d103      	bne.n	80099cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	689a      	ldr	r2, [r3, #8]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	1e5a      	subs	r2, r3, #1
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3714      	adds	r7, #20
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d10b      	bne.n	8009a18 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009a12:	bf00      	nop
 8009a14:	bf00      	nop
 8009a16:	e7fd      	b.n	8009a14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009a18:	f002 f876 	bl	800bb08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a24:	68f9      	ldr	r1, [r7, #12]
 8009a26:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009a28:	fb01 f303 	mul.w	r3, r1, r3
 8009a2c:	441a      	add	r2, r3
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2200      	movs	r2, #0
 8009a36:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	68f9      	ldr	r1, [r7, #12]
 8009a4c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009a4e:	fb01 f303 	mul.w	r3, r1, r3
 8009a52:	441a      	add	r2, r3
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	22ff      	movs	r2, #255	@ 0xff
 8009a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	22ff      	movs	r2, #255	@ 0xff
 8009a64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d114      	bne.n	8009a98 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	691b      	ldr	r3, [r3, #16]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d01a      	beq.n	8009aac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	3310      	adds	r3, #16
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f001 f91a 	bl	800acb4 <xTaskRemoveFromEventList>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d012      	beq.n	8009aac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009a86:	4b0d      	ldr	r3, [pc, #52]	@ (8009abc <xQueueGenericReset+0xd0>)
 8009a88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a8c:	601a      	str	r2, [r3, #0]
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	f3bf 8f6f 	isb	sy
 8009a96:	e009      	b.n	8009aac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	3310      	adds	r3, #16
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7ff fef1 	bl	8009884 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	3324      	adds	r3, #36	@ 0x24
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7ff feec 	bl	8009884 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009aac:	f002 f85e 	bl	800bb6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009ab0:	2301      	movs	r3, #1
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	e000ed04 	.word	0xe000ed04

08009ac0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b08e      	sub	sp, #56	@ 0x38
 8009ac4:	af02      	add	r7, sp, #8
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]
 8009acc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d10b      	bne.n	8009aec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad8:	f383 8811 	msr	BASEPRI, r3
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009ae6:	bf00      	nop
 8009ae8:	bf00      	nop
 8009aea:	e7fd      	b.n	8009ae8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10b      	bne.n	8009b0a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af6:	f383 8811 	msr	BASEPRI, r3
 8009afa:	f3bf 8f6f 	isb	sy
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009b04:	bf00      	nop
 8009b06:	bf00      	nop
 8009b08:	e7fd      	b.n	8009b06 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d002      	beq.n	8009b16 <xQueueGenericCreateStatic+0x56>
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d001      	beq.n	8009b1a <xQueueGenericCreateStatic+0x5a>
 8009b16:	2301      	movs	r3, #1
 8009b18:	e000      	b.n	8009b1c <xQueueGenericCreateStatic+0x5c>
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d10b      	bne.n	8009b38 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b24:	f383 8811 	msr	BASEPRI, r3
 8009b28:	f3bf 8f6f 	isb	sy
 8009b2c:	f3bf 8f4f 	dsb	sy
 8009b30:	623b      	str	r3, [r7, #32]
}
 8009b32:	bf00      	nop
 8009b34:	bf00      	nop
 8009b36:	e7fd      	b.n	8009b34 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d102      	bne.n	8009b44 <xQueueGenericCreateStatic+0x84>
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d101      	bne.n	8009b48 <xQueueGenericCreateStatic+0x88>
 8009b44:	2301      	movs	r3, #1
 8009b46:	e000      	b.n	8009b4a <xQueueGenericCreateStatic+0x8a>
 8009b48:	2300      	movs	r3, #0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d10b      	bne.n	8009b66 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	61fb      	str	r3, [r7, #28]
}
 8009b60:	bf00      	nop
 8009b62:	bf00      	nop
 8009b64:	e7fd      	b.n	8009b62 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009b66:	2350      	movs	r3, #80	@ 0x50
 8009b68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	2b50      	cmp	r3, #80	@ 0x50
 8009b6e:	d00b      	beq.n	8009b88 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	61bb      	str	r3, [r7, #24]
}
 8009b82:	bf00      	nop
 8009b84:	bf00      	nop
 8009b86:	e7fd      	b.n	8009b84 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009b88:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00d      	beq.n	8009bb0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b9c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	68b9      	ldr	r1, [r7, #8]
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f000 f805 	bl	8009bba <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3730      	adds	r7, #48	@ 0x30
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b084      	sub	sp, #16
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	60f8      	str	r0, [r7, #12]
 8009bc2:	60b9      	str	r1, [r7, #8]
 8009bc4:	607a      	str	r2, [r7, #4]
 8009bc6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d103      	bne.n	8009bd6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	69ba      	ldr	r2, [r7, #24]
 8009bd2:	601a      	str	r2, [r3, #0]
 8009bd4:	e002      	b.n	8009bdc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009bdc:	69bb      	ldr	r3, [r7, #24]
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009be8:	2101      	movs	r1, #1
 8009bea:	69b8      	ldr	r0, [r7, #24]
 8009bec:	f7ff fefe 	bl	80099ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	78fa      	ldrb	r2, [r7, #3]
 8009bf4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009bf8:	bf00      	nop
 8009bfa:	3710      	adds	r7, #16
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b08e      	sub	sp, #56	@ 0x38
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	607a      	str	r2, [r7, #4]
 8009c0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10b      	bne.n	8009c34 <xQueueGenericSend+0x34>
	__asm volatile
 8009c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c20:	f383 8811 	msr	BASEPRI, r3
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009c2e:	bf00      	nop
 8009c30:	bf00      	nop
 8009c32:	e7fd      	b.n	8009c30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d103      	bne.n	8009c42 <xQueueGenericSend+0x42>
 8009c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d101      	bne.n	8009c46 <xQueueGenericSend+0x46>
 8009c42:	2301      	movs	r3, #1
 8009c44:	e000      	b.n	8009c48 <xQueueGenericSend+0x48>
 8009c46:	2300      	movs	r3, #0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d10b      	bne.n	8009c64 <xQueueGenericSend+0x64>
	__asm volatile
 8009c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c50:	f383 8811 	msr	BASEPRI, r3
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	f3bf 8f4f 	dsb	sy
 8009c5c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009c5e:	bf00      	nop
 8009c60:	bf00      	nop
 8009c62:	e7fd      	b.n	8009c60 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d103      	bne.n	8009c72 <xQueueGenericSend+0x72>
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d101      	bne.n	8009c76 <xQueueGenericSend+0x76>
 8009c72:	2301      	movs	r3, #1
 8009c74:	e000      	b.n	8009c78 <xQueueGenericSend+0x78>
 8009c76:	2300      	movs	r3, #0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10b      	bne.n	8009c94 <xQueueGenericSend+0x94>
	__asm volatile
 8009c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c80:	f383 8811 	msr	BASEPRI, r3
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	623b      	str	r3, [r7, #32]
}
 8009c8e:	bf00      	nop
 8009c90:	bf00      	nop
 8009c92:	e7fd      	b.n	8009c90 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c94:	f001 f9ce 	bl	800b034 <xTaskGetSchedulerState>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d102      	bne.n	8009ca4 <xQueueGenericSend+0xa4>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d101      	bne.n	8009ca8 <xQueueGenericSend+0xa8>
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e000      	b.n	8009caa <xQueueGenericSend+0xaa>
 8009ca8:	2300      	movs	r3, #0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d10b      	bne.n	8009cc6 <xQueueGenericSend+0xc6>
	__asm volatile
 8009cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb2:	f383 8811 	msr	BASEPRI, r3
 8009cb6:	f3bf 8f6f 	isb	sy
 8009cba:	f3bf 8f4f 	dsb	sy
 8009cbe:	61fb      	str	r3, [r7, #28]
}
 8009cc0:	bf00      	nop
 8009cc2:	bf00      	nop
 8009cc4:	e7fd      	b.n	8009cc2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009cc6:	f001 ff1f 	bl	800bb08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ccc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d302      	bcc.n	8009cdc <xQueueGenericSend+0xdc>
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	2b02      	cmp	r3, #2
 8009cda:	d129      	bne.n	8009d30 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009cdc:	683a      	ldr	r2, [r7, #0]
 8009cde:	68b9      	ldr	r1, [r7, #8]
 8009ce0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ce2:	f000 fa0f 	bl	800a104 <prvCopyDataToQueue>
 8009ce6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d010      	beq.n	8009d12 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf2:	3324      	adds	r3, #36	@ 0x24
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f000 ffdd 	bl	800acb4 <xTaskRemoveFromEventList>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d013      	beq.n	8009d28 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009d00:	4b3f      	ldr	r3, [pc, #252]	@ (8009e00 <xQueueGenericSend+0x200>)
 8009d02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d06:	601a      	str	r2, [r3, #0]
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	f3bf 8f6f 	isb	sy
 8009d10:	e00a      	b.n	8009d28 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d007      	beq.n	8009d28 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009d18:	4b39      	ldr	r3, [pc, #228]	@ (8009e00 <xQueueGenericSend+0x200>)
 8009d1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d1e:	601a      	str	r2, [r3, #0]
 8009d20:	f3bf 8f4f 	dsb	sy
 8009d24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009d28:	f001 ff20 	bl	800bb6c <vPortExitCritical>
				return pdPASS;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e063      	b.n	8009df8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d103      	bne.n	8009d3e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d36:	f001 ff19 	bl	800bb6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	e05c      	b.n	8009df8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d106      	bne.n	8009d52 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d44:	f107 0314 	add.w	r3, r7, #20
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f001 f817 	bl	800ad7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d52:	f001 ff0b 	bl	800bb6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d56:	f000 fd87 	bl	800a868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d5a:	f001 fed5 	bl	800bb08 <vPortEnterCritical>
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009d64:	b25b      	sxtb	r3, r3
 8009d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d6a:	d103      	bne.n	8009d74 <xQueueGenericSend+0x174>
 8009d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009d7a:	b25b      	sxtb	r3, r3
 8009d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d80:	d103      	bne.n	8009d8a <xQueueGenericSend+0x18a>
 8009d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d8a:	f001 feef 	bl	800bb6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d8e:	1d3a      	adds	r2, r7, #4
 8009d90:	f107 0314 	add.w	r3, r7, #20
 8009d94:	4611      	mov	r1, r2
 8009d96:	4618      	mov	r0, r3
 8009d98:	f001 f806 	bl	800ada8 <xTaskCheckForTimeOut>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d124      	bne.n	8009dec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009da2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009da4:	f000 faa6 	bl	800a2f4 <prvIsQueueFull>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d018      	beq.n	8009de0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db0:	3310      	adds	r3, #16
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	4611      	mov	r1, r2
 8009db6:	4618      	mov	r0, r3
 8009db8:	f000 ff2a 	bl	800ac10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009dbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009dbe:	f000 fa31 	bl	800a224 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009dc2:	f000 fd5f 	bl	800a884 <xTaskResumeAll>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f47f af7c 	bne.w	8009cc6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009dce:	4b0c      	ldr	r3, [pc, #48]	@ (8009e00 <xQueueGenericSend+0x200>)
 8009dd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009dd4:	601a      	str	r2, [r3, #0]
 8009dd6:	f3bf 8f4f 	dsb	sy
 8009dda:	f3bf 8f6f 	isb	sy
 8009dde:	e772      	b.n	8009cc6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009de0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009de2:	f000 fa1f 	bl	800a224 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009de6:	f000 fd4d 	bl	800a884 <xTaskResumeAll>
 8009dea:	e76c      	b.n	8009cc6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009dec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009dee:	f000 fa19 	bl	800a224 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009df2:	f000 fd47 	bl	800a884 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009df6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3738      	adds	r7, #56	@ 0x38
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	e000ed04 	.word	0xe000ed04

08009e04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b090      	sub	sp, #64	@ 0x40
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	607a      	str	r2, [r7, #4]
 8009e10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d10b      	bne.n	8009e34 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e20:	f383 8811 	msr	BASEPRI, r3
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009e2e:	bf00      	nop
 8009e30:	bf00      	nop
 8009e32:	e7fd      	b.n	8009e30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d103      	bne.n	8009e42 <xQueueGenericSendFromISR+0x3e>
 8009e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d101      	bne.n	8009e46 <xQueueGenericSendFromISR+0x42>
 8009e42:	2301      	movs	r3, #1
 8009e44:	e000      	b.n	8009e48 <xQueueGenericSendFromISR+0x44>
 8009e46:	2300      	movs	r3, #0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d10b      	bne.n	8009e64 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e50:	f383 8811 	msr	BASEPRI, r3
 8009e54:	f3bf 8f6f 	isb	sy
 8009e58:	f3bf 8f4f 	dsb	sy
 8009e5c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009e5e:	bf00      	nop
 8009e60:	bf00      	nop
 8009e62:	e7fd      	b.n	8009e60 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	d103      	bne.n	8009e72 <xQueueGenericSendFromISR+0x6e>
 8009e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d101      	bne.n	8009e76 <xQueueGenericSendFromISR+0x72>
 8009e72:	2301      	movs	r3, #1
 8009e74:	e000      	b.n	8009e78 <xQueueGenericSendFromISR+0x74>
 8009e76:	2300      	movs	r3, #0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d10b      	bne.n	8009e94 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e80:	f383 8811 	msr	BASEPRI, r3
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	f3bf 8f4f 	dsb	sy
 8009e8c:	623b      	str	r3, [r7, #32]
}
 8009e8e:	bf00      	nop
 8009e90:	bf00      	nop
 8009e92:	e7fd      	b.n	8009e90 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e94:	f001 ff18 	bl	800bcc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009e98:	f3ef 8211 	mrs	r2, BASEPRI
 8009e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea0:	f383 8811 	msr	BASEPRI, r3
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	61fa      	str	r2, [r7, #28]
 8009eae:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009eb0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009eb2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d302      	bcc.n	8009ec6 <xQueueGenericSendFromISR+0xc2>
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	2b02      	cmp	r3, #2
 8009ec4:	d12f      	bne.n	8009f26 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ecc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ed6:	683a      	ldr	r2, [r7, #0]
 8009ed8:	68b9      	ldr	r1, [r7, #8]
 8009eda:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009edc:	f000 f912 	bl	800a104 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009ee0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ee8:	d112      	bne.n	8009f10 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d016      	beq.n	8009f20 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef4:	3324      	adds	r3, #36	@ 0x24
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f000 fedc 	bl	800acb4 <xTaskRemoveFromEventList>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00e      	beq.n	8009f20 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d00b      	beq.n	8009f20 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	601a      	str	r2, [r3, #0]
 8009f0e:	e007      	b.n	8009f20 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009f14:	3301      	adds	r3, #1
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	b25a      	sxtb	r2, r3
 8009f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009f20:	2301      	movs	r3, #1
 8009f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009f24:	e001      	b.n	8009f2a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009f26:	2300      	movs	r3, #0
 8009f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f2c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009f34:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3740      	adds	r7, #64	@ 0x40
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b08c      	sub	sp, #48	@ 0x30
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d10b      	bne.n	8009f72 <xQueueReceive+0x32>
	__asm volatile
 8009f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f5e:	f383 8811 	msr	BASEPRI, r3
 8009f62:	f3bf 8f6f 	isb	sy
 8009f66:	f3bf 8f4f 	dsb	sy
 8009f6a:	623b      	str	r3, [r7, #32]
}
 8009f6c:	bf00      	nop
 8009f6e:	bf00      	nop
 8009f70:	e7fd      	b.n	8009f6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d103      	bne.n	8009f80 <xQueueReceive+0x40>
 8009f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d101      	bne.n	8009f84 <xQueueReceive+0x44>
 8009f80:	2301      	movs	r3, #1
 8009f82:	e000      	b.n	8009f86 <xQueueReceive+0x46>
 8009f84:	2300      	movs	r3, #0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d10b      	bne.n	8009fa2 <xQueueReceive+0x62>
	__asm volatile
 8009f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f8e:	f383 8811 	msr	BASEPRI, r3
 8009f92:	f3bf 8f6f 	isb	sy
 8009f96:	f3bf 8f4f 	dsb	sy
 8009f9a:	61fb      	str	r3, [r7, #28]
}
 8009f9c:	bf00      	nop
 8009f9e:	bf00      	nop
 8009fa0:	e7fd      	b.n	8009f9e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009fa2:	f001 f847 	bl	800b034 <xTaskGetSchedulerState>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d102      	bne.n	8009fb2 <xQueueReceive+0x72>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d101      	bne.n	8009fb6 <xQueueReceive+0x76>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e000      	b.n	8009fb8 <xQueueReceive+0x78>
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d10b      	bne.n	8009fd4 <xQueueReceive+0x94>
	__asm volatile
 8009fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc0:	f383 8811 	msr	BASEPRI, r3
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	f3bf 8f4f 	dsb	sy
 8009fcc:	61bb      	str	r3, [r7, #24]
}
 8009fce:	bf00      	nop
 8009fd0:	bf00      	nop
 8009fd2:	e7fd      	b.n	8009fd0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009fd4:	f001 fd98 	bl	800bb08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fdc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d01f      	beq.n	800a024 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009fe4:	68b9      	ldr	r1, [r7, #8]
 8009fe6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fe8:	f000 f8f6 	bl	800a1d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fee:	1e5a      	subs	r2, r3, #1
 8009ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d00f      	beq.n	800a01c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ffe:	3310      	adds	r3, #16
 800a000:	4618      	mov	r0, r3
 800a002:	f000 fe57 	bl	800acb4 <xTaskRemoveFromEventList>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d007      	beq.n	800a01c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a00c:	4b3c      	ldr	r3, [pc, #240]	@ (800a100 <xQueueReceive+0x1c0>)
 800a00e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a012:	601a      	str	r2, [r3, #0]
 800a014:	f3bf 8f4f 	dsb	sy
 800a018:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a01c:	f001 fda6 	bl	800bb6c <vPortExitCritical>
				return pdPASS;
 800a020:	2301      	movs	r3, #1
 800a022:	e069      	b.n	800a0f8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d103      	bne.n	800a032 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a02a:	f001 fd9f 	bl	800bb6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a02e:	2300      	movs	r3, #0
 800a030:	e062      	b.n	800a0f8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a034:	2b00      	cmp	r3, #0
 800a036:	d106      	bne.n	800a046 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a038:	f107 0310 	add.w	r3, r7, #16
 800a03c:	4618      	mov	r0, r3
 800a03e:	f000 fe9d 	bl	800ad7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a042:	2301      	movs	r3, #1
 800a044:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a046:	f001 fd91 	bl	800bb6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a04a:	f000 fc0d 	bl	800a868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a04e:	f001 fd5b 	bl	800bb08 <vPortEnterCritical>
 800a052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a054:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a058:	b25b      	sxtb	r3, r3
 800a05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a05e:	d103      	bne.n	800a068 <xQueueReceive+0x128>
 800a060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a062:	2200      	movs	r2, #0
 800a064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a06a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a06e:	b25b      	sxtb	r3, r3
 800a070:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a074:	d103      	bne.n	800a07e <xQueueReceive+0x13e>
 800a076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a078:	2200      	movs	r2, #0
 800a07a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a07e:	f001 fd75 	bl	800bb6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a082:	1d3a      	adds	r2, r7, #4
 800a084:	f107 0310 	add.w	r3, r7, #16
 800a088:	4611      	mov	r1, r2
 800a08a:	4618      	mov	r0, r3
 800a08c:	f000 fe8c 	bl	800ada8 <xTaskCheckForTimeOut>
 800a090:	4603      	mov	r3, r0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d123      	bne.n	800a0de <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a096:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a098:	f000 f916 	bl	800a2c8 <prvIsQueueEmpty>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d017      	beq.n	800a0d2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a0a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a4:	3324      	adds	r3, #36	@ 0x24
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	4611      	mov	r1, r2
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f000 fdb0 	bl	800ac10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a0b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0b2:	f000 f8b7 	bl	800a224 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a0b6:	f000 fbe5 	bl	800a884 <xTaskResumeAll>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d189      	bne.n	8009fd4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a0c0:	4b0f      	ldr	r3, [pc, #60]	@ (800a100 <xQueueReceive+0x1c0>)
 800a0c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0c6:	601a      	str	r2, [r3, #0]
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	f3bf 8f6f 	isb	sy
 800a0d0:	e780      	b.n	8009fd4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a0d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0d4:	f000 f8a6 	bl	800a224 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a0d8:	f000 fbd4 	bl	800a884 <xTaskResumeAll>
 800a0dc:	e77a      	b.n	8009fd4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a0de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0e0:	f000 f8a0 	bl	800a224 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a0e4:	f000 fbce 	bl	800a884 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0ea:	f000 f8ed 	bl	800a2c8 <prvIsQueueEmpty>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f43f af6f 	beq.w	8009fd4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a0f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3730      	adds	r7, #48	@ 0x30
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	e000ed04 	.word	0xe000ed04

0800a104 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b086      	sub	sp, #24
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a110:	2300      	movs	r3, #0
 800a112:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a118:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d10d      	bne.n	800a13e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d14d      	bne.n	800a1c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	4618      	mov	r0, r3
 800a130:	f000 ff9e 	bl	800b070 <xTaskPriorityDisinherit>
 800a134:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	609a      	str	r2, [r3, #8]
 800a13c:	e043      	b.n	800a1c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d119      	bne.n	800a178 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	6858      	ldr	r0, [r3, #4]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a14c:	461a      	mov	r2, r3
 800a14e:	68b9      	ldr	r1, [r7, #8]
 800a150:	f003 f8ff 	bl	800d352 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	685a      	ldr	r2, [r3, #4]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a15c:	441a      	add	r2, r3
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	685a      	ldr	r2, [r3, #4]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d32b      	bcc.n	800a1c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	605a      	str	r2, [r3, #4]
 800a176:	e026      	b.n	800a1c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	68d8      	ldr	r0, [r3, #12]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a180:	461a      	mov	r2, r3
 800a182:	68b9      	ldr	r1, [r7, #8]
 800a184:	f003 f8e5 	bl	800d352 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	68da      	ldr	r2, [r3, #12]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a190:	425b      	negs	r3, r3
 800a192:	441a      	add	r2, r3
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	68da      	ldr	r2, [r3, #12]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d207      	bcs.n	800a1b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	689a      	ldr	r2, [r3, #8]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1ac:	425b      	negs	r3, r3
 800a1ae:	441a      	add	r2, r3
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2b02      	cmp	r3, #2
 800a1b8:	d105      	bne.n	800a1c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d002      	beq.n	800a1c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	3b01      	subs	r3, #1
 800a1c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	1c5a      	adds	r2, r3, #1
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a1ce:	697b      	ldr	r3, [r7, #20]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3718      	adds	r7, #24
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d018      	beq.n	800a21c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	68da      	ldr	r2, [r3, #12]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1f2:	441a      	add	r2, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	68da      	ldr	r2, [r3, #12]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	429a      	cmp	r2, r3
 800a202:	d303      	bcc.n	800a20c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	68d9      	ldr	r1, [r3, #12]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a214:	461a      	mov	r2, r3
 800a216:	6838      	ldr	r0, [r7, #0]
 800a218:	f003 f89b 	bl	800d352 <memcpy>
	}
}
 800a21c:	bf00      	nop
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a22c:	f001 fc6c 	bl	800bb08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a236:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a238:	e011      	b.n	800a25e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d012      	beq.n	800a268 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	3324      	adds	r3, #36	@ 0x24
 800a246:	4618      	mov	r0, r3
 800a248:	f000 fd34 	bl	800acb4 <xTaskRemoveFromEventList>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d001      	beq.n	800a256 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a252:	f000 fe0d 	bl	800ae70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a256:	7bfb      	ldrb	r3, [r7, #15]
 800a258:	3b01      	subs	r3, #1
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a25e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a262:	2b00      	cmp	r3, #0
 800a264:	dce9      	bgt.n	800a23a <prvUnlockQueue+0x16>
 800a266:	e000      	b.n	800a26a <prvUnlockQueue+0x46>
					break;
 800a268:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	22ff      	movs	r2, #255	@ 0xff
 800a26e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a272:	f001 fc7b 	bl	800bb6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a276:	f001 fc47 	bl	800bb08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a280:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a282:	e011      	b.n	800a2a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d012      	beq.n	800a2b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	3310      	adds	r3, #16
 800a290:	4618      	mov	r0, r3
 800a292:	f000 fd0f 	bl	800acb4 <xTaskRemoveFromEventList>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d001      	beq.n	800a2a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a29c:	f000 fde8 	bl	800ae70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a2a0:	7bbb      	ldrb	r3, [r7, #14]
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	dce9      	bgt.n	800a284 <prvUnlockQueue+0x60>
 800a2b0:	e000      	b.n	800a2b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a2b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	22ff      	movs	r2, #255	@ 0xff
 800a2b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a2bc:	f001 fc56 	bl	800bb6c <vPortExitCritical>
}
 800a2c0:	bf00      	nop
 800a2c2:	3710      	adds	r7, #16
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2d0:	f001 fc1a 	bl	800bb08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d102      	bne.n	800a2e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	60fb      	str	r3, [r7, #12]
 800a2e0:	e001      	b.n	800a2e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a2e6:	f001 fc41 	bl	800bb6c <vPortExitCritical>

	return xReturn;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2fc:	f001 fc04 	bl	800bb08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a308:	429a      	cmp	r2, r3
 800a30a:	d102      	bne.n	800a312 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a30c:	2301      	movs	r3, #1
 800a30e:	60fb      	str	r3, [r7, #12]
 800a310:	e001      	b.n	800a316 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a312:	2300      	movs	r3, #0
 800a314:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a316:	f001 fc29 	bl	800bb6c <vPortExitCritical>

	return xReturn;
 800a31a:	68fb      	ldr	r3, [r7, #12]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a32e:	2300      	movs	r3, #0
 800a330:	60fb      	str	r3, [r7, #12]
 800a332:	e014      	b.n	800a35e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a334:	4a0f      	ldr	r2, [pc, #60]	@ (800a374 <vQueueAddToRegistry+0x50>)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d10b      	bne.n	800a358 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a340:	490c      	ldr	r1, [pc, #48]	@ (800a374 <vQueueAddToRegistry+0x50>)
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	683a      	ldr	r2, [r7, #0]
 800a346:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a34a:	4a0a      	ldr	r2, [pc, #40]	@ (800a374 <vQueueAddToRegistry+0x50>)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	00db      	lsls	r3, r3, #3
 800a350:	4413      	add	r3, r2
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a356:	e006      	b.n	800a366 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	3301      	adds	r3, #1
 800a35c:	60fb      	str	r3, [r7, #12]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2b07      	cmp	r3, #7
 800a362:	d9e7      	bls.n	800a334 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a364:	bf00      	nop
 800a366:	bf00      	nop
 800a368:	3714      	adds	r7, #20
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop
 800a374:	200025cc 	.word	0x200025cc

0800a378 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b086      	sub	sp, #24
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a388:	f001 fbbe 	bl	800bb08 <vPortEnterCritical>
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a392:	b25b      	sxtb	r3, r3
 800a394:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a398:	d103      	bne.n	800a3a2 <vQueueWaitForMessageRestricted+0x2a>
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3a8:	b25b      	sxtb	r3, r3
 800a3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ae:	d103      	bne.n	800a3b8 <vQueueWaitForMessageRestricted+0x40>
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a3b8:	f001 fbd8 	bl	800bb6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d106      	bne.n	800a3d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	3324      	adds	r3, #36	@ 0x24
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	68b9      	ldr	r1, [r7, #8]
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f000 fc45 	bl	800ac5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a3d2:	6978      	ldr	r0, [r7, #20]
 800a3d4:	f7ff ff26 	bl	800a224 <prvUnlockQueue>
	}
 800a3d8:	bf00      	nop
 800a3da:	3718      	adds	r7, #24
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b08e      	sub	sp, #56	@ 0x38
 800a3e4:	af04      	add	r7, sp, #16
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]
 800a3ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a3ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d10b      	bne.n	800a40c <xTaskCreateStatic+0x2c>
	__asm volatile
 800a3f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f8:	f383 8811 	msr	BASEPRI, r3
 800a3fc:	f3bf 8f6f 	isb	sy
 800a400:	f3bf 8f4f 	dsb	sy
 800a404:	623b      	str	r3, [r7, #32]
}
 800a406:	bf00      	nop
 800a408:	bf00      	nop
 800a40a:	e7fd      	b.n	800a408 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a40c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d10b      	bne.n	800a42a <xTaskCreateStatic+0x4a>
	__asm volatile
 800a412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a416:	f383 8811 	msr	BASEPRI, r3
 800a41a:	f3bf 8f6f 	isb	sy
 800a41e:	f3bf 8f4f 	dsb	sy
 800a422:	61fb      	str	r3, [r7, #28]
}
 800a424:	bf00      	nop
 800a426:	bf00      	nop
 800a428:	e7fd      	b.n	800a426 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a42a:	235c      	movs	r3, #92	@ 0x5c
 800a42c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	2b5c      	cmp	r3, #92	@ 0x5c
 800a432:	d00b      	beq.n	800a44c <xTaskCreateStatic+0x6c>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	61bb      	str	r3, [r7, #24]
}
 800a446:	bf00      	nop
 800a448:	bf00      	nop
 800a44a:	e7fd      	b.n	800a448 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a44c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a450:	2b00      	cmp	r3, #0
 800a452:	d01e      	beq.n	800a492 <xTaskCreateStatic+0xb2>
 800a454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a456:	2b00      	cmp	r3, #0
 800a458:	d01b      	beq.n	800a492 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a45c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a460:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a462:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a466:	2202      	movs	r2, #2
 800a468:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a46c:	2300      	movs	r3, #0
 800a46e:	9303      	str	r3, [sp, #12]
 800a470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a472:	9302      	str	r3, [sp, #8]
 800a474:	f107 0314 	add.w	r3, r7, #20
 800a478:	9301      	str	r3, [sp, #4]
 800a47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a47c:	9300      	str	r3, [sp, #0]
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	68b9      	ldr	r1, [r7, #8]
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f000 f850 	bl	800a52a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a48a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a48c:	f000 f8de 	bl	800a64c <prvAddNewTaskToReadyList>
 800a490:	e001      	b.n	800a496 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a492:	2300      	movs	r3, #0
 800a494:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a496:	697b      	ldr	r3, [r7, #20]
	}
 800a498:	4618      	mov	r0, r3
 800a49a:	3728      	adds	r7, #40	@ 0x28
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b08c      	sub	sp, #48	@ 0x30
 800a4a4:	af04      	add	r7, sp, #16
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	603b      	str	r3, [r7, #0]
 800a4ac:	4613      	mov	r3, r2
 800a4ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a4b0:	88fb      	ldrh	r3, [r7, #6]
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f001 fc49 	bl	800bd4c <pvPortMalloc>
 800a4ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00e      	beq.n	800a4e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a4c2:	205c      	movs	r0, #92	@ 0x5c
 800a4c4:	f001 fc42 	bl	800bd4c <pvPortMalloc>
 800a4c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d003      	beq.n	800a4d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	697a      	ldr	r2, [r7, #20]
 800a4d4:	631a      	str	r2, [r3, #48]	@ 0x30
 800a4d6:	e005      	b.n	800a4e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a4d8:	6978      	ldr	r0, [r7, #20]
 800a4da:	f001 fd05 	bl	800bee8 <vPortFree>
 800a4de:	e001      	b.n	800a4e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d017      	beq.n	800a51a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a4ea:	69fb      	ldr	r3, [r7, #28]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a4f2:	88fa      	ldrh	r2, [r7, #6]
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	9303      	str	r3, [sp, #12]
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	9302      	str	r3, [sp, #8]
 800a4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4fe:	9301      	str	r3, [sp, #4]
 800a500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a502:	9300      	str	r3, [sp, #0]
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	68b9      	ldr	r1, [r7, #8]
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f000 f80e 	bl	800a52a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a50e:	69f8      	ldr	r0, [r7, #28]
 800a510:	f000 f89c 	bl	800a64c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a514:	2301      	movs	r3, #1
 800a516:	61bb      	str	r3, [r7, #24]
 800a518:	e002      	b.n	800a520 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a51a:	f04f 33ff 	mov.w	r3, #4294967295
 800a51e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a520:	69bb      	ldr	r3, [r7, #24]
	}
 800a522:	4618      	mov	r0, r3
 800a524:	3720      	adds	r7, #32
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}

0800a52a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b088      	sub	sp, #32
 800a52e:	af00      	add	r7, sp, #0
 800a530:	60f8      	str	r0, [r7, #12]
 800a532:	60b9      	str	r1, [r7, #8]
 800a534:	607a      	str	r2, [r7, #4]
 800a536:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a53a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	009b      	lsls	r3, r3, #2
 800a540:	461a      	mov	r2, r3
 800a542:	21a5      	movs	r1, #165	@ 0xa5
 800a544:	f002 fe86 	bl	800d254 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a54a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a552:	3b01      	subs	r3, #1
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	4413      	add	r3, r2
 800a558:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	f023 0307 	bic.w	r3, r3, #7
 800a560:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	f003 0307 	and.w	r3, r3, #7
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00b      	beq.n	800a584 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a56c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a570:	f383 8811 	msr	BASEPRI, r3
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	617b      	str	r3, [r7, #20]
}
 800a57e:	bf00      	nop
 800a580:	bf00      	nop
 800a582:	e7fd      	b.n	800a580 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d01f      	beq.n	800a5ca <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a58a:	2300      	movs	r3, #0
 800a58c:	61fb      	str	r3, [r7, #28]
 800a58e:	e012      	b.n	800a5b6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	4413      	add	r3, r2
 800a596:	7819      	ldrb	r1, [r3, #0]
 800a598:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	4413      	add	r3, r2
 800a59e:	3334      	adds	r3, #52	@ 0x34
 800a5a0:	460a      	mov	r2, r1
 800a5a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a5a4:	68ba      	ldr	r2, [r7, #8]
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d006      	beq.n	800a5be <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5b0:	69fb      	ldr	r3, [r7, #28]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	61fb      	str	r3, [r7, #28]
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	2b0f      	cmp	r3, #15
 800a5ba:	d9e9      	bls.n	800a590 <prvInitialiseNewTask+0x66>
 800a5bc:	e000      	b.n	800a5c0 <prvInitialiseNewTask+0x96>
			{
				break;
 800a5be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a5c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a5c8:	e003      	b.n	800a5d2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a5d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d4:	2b37      	cmp	r3, #55	@ 0x37
 800a5d6:	d901      	bls.n	800a5dc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a5d8:	2337      	movs	r3, #55	@ 0x37
 800a5da:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a5dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a5e0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a5e6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a5e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f0:	3304      	adds	r3, #4
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7ff f966 	bl	80098c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5fa:	3318      	adds	r3, #24
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7ff f961 	bl	80098c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a604:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a606:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a60a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a610:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a614:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a616:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a61a:	2200      	movs	r2, #0
 800a61c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a620:	2200      	movs	r2, #0
 800a622:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	68f9      	ldr	r1, [r7, #12]
 800a62a:	69b8      	ldr	r0, [r7, #24]
 800a62c:	f001 f93e 	bl	800b8ac <pxPortInitialiseStack>
 800a630:	4602      	mov	r2, r0
 800a632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a634:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d002      	beq.n	800a642 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a63c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a63e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a640:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a642:	bf00      	nop
 800a644:	3720      	adds	r7, #32
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
	...

0800a64c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a654:	f001 fa58 	bl	800bb08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a658:	4b2d      	ldr	r3, [pc, #180]	@ (800a710 <prvAddNewTaskToReadyList+0xc4>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	3301      	adds	r3, #1
 800a65e:	4a2c      	ldr	r2, [pc, #176]	@ (800a710 <prvAddNewTaskToReadyList+0xc4>)
 800a660:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a662:	4b2c      	ldr	r3, [pc, #176]	@ (800a714 <prvAddNewTaskToReadyList+0xc8>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d109      	bne.n	800a67e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a66a:	4a2a      	ldr	r2, [pc, #168]	@ (800a714 <prvAddNewTaskToReadyList+0xc8>)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a670:	4b27      	ldr	r3, [pc, #156]	@ (800a710 <prvAddNewTaskToReadyList+0xc4>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2b01      	cmp	r3, #1
 800a676:	d110      	bne.n	800a69a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a678:	f000 fc1e 	bl	800aeb8 <prvInitialiseTaskLists>
 800a67c:	e00d      	b.n	800a69a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a67e:	4b26      	ldr	r3, [pc, #152]	@ (800a718 <prvAddNewTaskToReadyList+0xcc>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d109      	bne.n	800a69a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a686:	4b23      	ldr	r3, [pc, #140]	@ (800a714 <prvAddNewTaskToReadyList+0xc8>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a690:	429a      	cmp	r2, r3
 800a692:	d802      	bhi.n	800a69a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a694:	4a1f      	ldr	r2, [pc, #124]	@ (800a714 <prvAddNewTaskToReadyList+0xc8>)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a69a:	4b20      	ldr	r3, [pc, #128]	@ (800a71c <prvAddNewTaskToReadyList+0xd0>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	3301      	adds	r3, #1
 800a6a0:	4a1e      	ldr	r2, [pc, #120]	@ (800a71c <prvAddNewTaskToReadyList+0xd0>)
 800a6a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a6a4:	4b1d      	ldr	r3, [pc, #116]	@ (800a71c <prvAddNewTaskToReadyList+0xd0>)
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6b0:	4b1b      	ldr	r3, [pc, #108]	@ (800a720 <prvAddNewTaskToReadyList+0xd4>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d903      	bls.n	800a6c0 <prvAddNewTaskToReadyList+0x74>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6bc:	4a18      	ldr	r2, [pc, #96]	@ (800a720 <prvAddNewTaskToReadyList+0xd4>)
 800a6be:	6013      	str	r3, [r2, #0]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	4413      	add	r3, r2
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	4a15      	ldr	r2, [pc, #84]	@ (800a724 <prvAddNewTaskToReadyList+0xd8>)
 800a6ce:	441a      	add	r2, r3
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	3304      	adds	r3, #4
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	4610      	mov	r0, r2
 800a6d8:	f7ff f901 	bl	80098de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a6dc:	f001 fa46 	bl	800bb6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a6e0:	4b0d      	ldr	r3, [pc, #52]	@ (800a718 <prvAddNewTaskToReadyList+0xcc>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00e      	beq.n	800a706 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a6e8:	4b0a      	ldr	r3, [pc, #40]	@ (800a714 <prvAddNewTaskToReadyList+0xc8>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d207      	bcs.n	800a706 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a6f6:	4b0c      	ldr	r3, [pc, #48]	@ (800a728 <prvAddNewTaskToReadyList+0xdc>)
 800a6f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6fc:	601a      	str	r2, [r3, #0]
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a706:	bf00      	nop
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	20002ae0 	.word	0x20002ae0
 800a714:	2000260c 	.word	0x2000260c
 800a718:	20002aec 	.word	0x20002aec
 800a71c:	20002afc 	.word	0x20002afc
 800a720:	20002ae8 	.word	0x20002ae8
 800a724:	20002610 	.word	0x20002610
 800a728:	e000ed04 	.word	0xe000ed04

0800a72c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a734:	2300      	movs	r3, #0
 800a736:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d018      	beq.n	800a770 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a73e:	4b14      	ldr	r3, [pc, #80]	@ (800a790 <vTaskDelay+0x64>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00b      	beq.n	800a75e <vTaskDelay+0x32>
	__asm volatile
 800a746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a74a:	f383 8811 	msr	BASEPRI, r3
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f3bf 8f4f 	dsb	sy
 800a756:	60bb      	str	r3, [r7, #8]
}
 800a758:	bf00      	nop
 800a75a:	bf00      	nop
 800a75c:	e7fd      	b.n	800a75a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a75e:	f000 f883 	bl	800a868 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a762:	2100      	movs	r1, #0
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f000 fcf3 	bl	800b150 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a76a:	f000 f88b 	bl	800a884 <xTaskResumeAll>
 800a76e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d107      	bne.n	800a786 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a776:	4b07      	ldr	r3, [pc, #28]	@ (800a794 <vTaskDelay+0x68>)
 800a778:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a77c:	601a      	str	r2, [r3, #0]
 800a77e:	f3bf 8f4f 	dsb	sy
 800a782:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a786:	bf00      	nop
 800a788:	3710      	adds	r7, #16
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
 800a78e:	bf00      	nop
 800a790:	20002b08 	.word	0x20002b08
 800a794:	e000ed04 	.word	0xe000ed04

0800a798 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b08a      	sub	sp, #40	@ 0x28
 800a79c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a7a6:	463a      	mov	r2, r7
 800a7a8:	1d39      	adds	r1, r7, #4
 800a7aa:	f107 0308 	add.w	r3, r7, #8
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7ff f834 	bl	800981c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a7b4:	6839      	ldr	r1, [r7, #0]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	68ba      	ldr	r2, [r7, #8]
 800a7ba:	9202      	str	r2, [sp, #8]
 800a7bc:	9301      	str	r3, [sp, #4]
 800a7be:	2300      	movs	r3, #0
 800a7c0:	9300      	str	r3, [sp, #0]
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	460a      	mov	r2, r1
 800a7c6:	4922      	ldr	r1, [pc, #136]	@ (800a850 <vTaskStartScheduler+0xb8>)
 800a7c8:	4822      	ldr	r0, [pc, #136]	@ (800a854 <vTaskStartScheduler+0xbc>)
 800a7ca:	f7ff fe09 	bl	800a3e0 <xTaskCreateStatic>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	4a21      	ldr	r2, [pc, #132]	@ (800a858 <vTaskStartScheduler+0xc0>)
 800a7d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a7d4:	4b20      	ldr	r3, [pc, #128]	@ (800a858 <vTaskStartScheduler+0xc0>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d002      	beq.n	800a7e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	617b      	str	r3, [r7, #20]
 800a7e0:	e001      	b.n	800a7e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d102      	bne.n	800a7f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a7ec:	f000 fd04 	bl	800b1f8 <xTimerCreateTimerTask>
 800a7f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d116      	bne.n	800a826 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7fc:	f383 8811 	msr	BASEPRI, r3
 800a800:	f3bf 8f6f 	isb	sy
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	613b      	str	r3, [r7, #16]
}
 800a80a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a80c:	4b13      	ldr	r3, [pc, #76]	@ (800a85c <vTaskStartScheduler+0xc4>)
 800a80e:	f04f 32ff 	mov.w	r2, #4294967295
 800a812:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a814:	4b12      	ldr	r3, [pc, #72]	@ (800a860 <vTaskStartScheduler+0xc8>)
 800a816:	2201      	movs	r2, #1
 800a818:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a81a:	4b12      	ldr	r3, [pc, #72]	@ (800a864 <vTaskStartScheduler+0xcc>)
 800a81c:	2200      	movs	r2, #0
 800a81e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a820:	f001 f8ce 	bl	800b9c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a824:	e00f      	b.n	800a846 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a82c:	d10b      	bne.n	800a846 <vTaskStartScheduler+0xae>
	__asm volatile
 800a82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a832:	f383 8811 	msr	BASEPRI, r3
 800a836:	f3bf 8f6f 	isb	sy
 800a83a:	f3bf 8f4f 	dsb	sy
 800a83e:	60fb      	str	r3, [r7, #12]
}
 800a840:	bf00      	nop
 800a842:	bf00      	nop
 800a844:	e7fd      	b.n	800a842 <vTaskStartScheduler+0xaa>
}
 800a846:	bf00      	nop
 800a848:	3718      	adds	r7, #24
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	08010d38 	.word	0x08010d38
 800a854:	0800ae89 	.word	0x0800ae89
 800a858:	20002b04 	.word	0x20002b04
 800a85c:	20002b00 	.word	0x20002b00
 800a860:	20002aec 	.word	0x20002aec
 800a864:	20002ae4 	.word	0x20002ae4

0800a868 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a868:	b480      	push	{r7}
 800a86a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a86c:	4b04      	ldr	r3, [pc, #16]	@ (800a880 <vTaskSuspendAll+0x18>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	3301      	adds	r3, #1
 800a872:	4a03      	ldr	r2, [pc, #12]	@ (800a880 <vTaskSuspendAll+0x18>)
 800a874:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a876:	bf00      	nop
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	20002b08 	.word	0x20002b08

0800a884 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a88a:	2300      	movs	r3, #0
 800a88c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a88e:	2300      	movs	r3, #0
 800a890:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a892:	4b42      	ldr	r3, [pc, #264]	@ (800a99c <xTaskResumeAll+0x118>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d10b      	bne.n	800a8b2 <xTaskResumeAll+0x2e>
	__asm volatile
 800a89a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a89e:	f383 8811 	msr	BASEPRI, r3
 800a8a2:	f3bf 8f6f 	isb	sy
 800a8a6:	f3bf 8f4f 	dsb	sy
 800a8aa:	603b      	str	r3, [r7, #0]
}
 800a8ac:	bf00      	nop
 800a8ae:	bf00      	nop
 800a8b0:	e7fd      	b.n	800a8ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a8b2:	f001 f929 	bl	800bb08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a8b6:	4b39      	ldr	r3, [pc, #228]	@ (800a99c <xTaskResumeAll+0x118>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	4a37      	ldr	r2, [pc, #220]	@ (800a99c <xTaskResumeAll+0x118>)
 800a8be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8c0:	4b36      	ldr	r3, [pc, #216]	@ (800a99c <xTaskResumeAll+0x118>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d162      	bne.n	800a98e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a8c8:	4b35      	ldr	r3, [pc, #212]	@ (800a9a0 <xTaskResumeAll+0x11c>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d05e      	beq.n	800a98e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a8d0:	e02f      	b.n	800a932 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8d2:	4b34      	ldr	r3, [pc, #208]	@ (800a9a4 <xTaskResumeAll+0x120>)
 800a8d4:	68db      	ldr	r3, [r3, #12]
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	3318      	adds	r3, #24
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7ff f85a 	bl	8009998 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	3304      	adds	r3, #4
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7ff f855 	bl	8009998 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8f2:	4b2d      	ldr	r3, [pc, #180]	@ (800a9a8 <xTaskResumeAll+0x124>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d903      	bls.n	800a902 <xTaskResumeAll+0x7e>
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8fe:	4a2a      	ldr	r2, [pc, #168]	@ (800a9a8 <xTaskResumeAll+0x124>)
 800a900:	6013      	str	r3, [r2, #0]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a906:	4613      	mov	r3, r2
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	4413      	add	r3, r2
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	4a27      	ldr	r2, [pc, #156]	@ (800a9ac <xTaskResumeAll+0x128>)
 800a910:	441a      	add	r2, r3
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	3304      	adds	r3, #4
 800a916:	4619      	mov	r1, r3
 800a918:	4610      	mov	r0, r2
 800a91a:	f7fe ffe0 	bl	80098de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a922:	4b23      	ldr	r3, [pc, #140]	@ (800a9b0 <xTaskResumeAll+0x12c>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a928:	429a      	cmp	r2, r3
 800a92a:	d302      	bcc.n	800a932 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a92c:	4b21      	ldr	r3, [pc, #132]	@ (800a9b4 <xTaskResumeAll+0x130>)
 800a92e:	2201      	movs	r2, #1
 800a930:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a932:	4b1c      	ldr	r3, [pc, #112]	@ (800a9a4 <xTaskResumeAll+0x120>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d1cb      	bne.n	800a8d2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d001      	beq.n	800a944 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a940:	f000 fb58 	bl	800aff4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a944:	4b1c      	ldr	r3, [pc, #112]	@ (800a9b8 <xTaskResumeAll+0x134>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d010      	beq.n	800a972 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a950:	f000 f846 	bl	800a9e0 <xTaskIncrementTick>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d002      	beq.n	800a960 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a95a:	4b16      	ldr	r3, [pc, #88]	@ (800a9b4 <xTaskResumeAll+0x130>)
 800a95c:	2201      	movs	r2, #1
 800a95e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	3b01      	subs	r3, #1
 800a964:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d1f1      	bne.n	800a950 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a96c:	4b12      	ldr	r3, [pc, #72]	@ (800a9b8 <xTaskResumeAll+0x134>)
 800a96e:	2200      	movs	r2, #0
 800a970:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a972:	4b10      	ldr	r3, [pc, #64]	@ (800a9b4 <xTaskResumeAll+0x130>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d009      	beq.n	800a98e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a97a:	2301      	movs	r3, #1
 800a97c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a97e:	4b0f      	ldr	r3, [pc, #60]	@ (800a9bc <xTaskResumeAll+0x138>)
 800a980:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a984:	601a      	str	r2, [r3, #0]
 800a986:	f3bf 8f4f 	dsb	sy
 800a98a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a98e:	f001 f8ed 	bl	800bb6c <vPortExitCritical>

	return xAlreadyYielded;
 800a992:	68bb      	ldr	r3, [r7, #8]
}
 800a994:	4618      	mov	r0, r3
 800a996:	3710      	adds	r7, #16
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	20002b08 	.word	0x20002b08
 800a9a0:	20002ae0 	.word	0x20002ae0
 800a9a4:	20002aa0 	.word	0x20002aa0
 800a9a8:	20002ae8 	.word	0x20002ae8
 800a9ac:	20002610 	.word	0x20002610
 800a9b0:	2000260c 	.word	0x2000260c
 800a9b4:	20002af4 	.word	0x20002af4
 800a9b8:	20002af0 	.word	0x20002af0
 800a9bc:	e000ed04 	.word	0xe000ed04

0800a9c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a9c6:	4b05      	ldr	r3, [pc, #20]	@ (800a9dc <xTaskGetTickCount+0x1c>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a9cc:	687b      	ldr	r3, [r7, #4]
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	370c      	adds	r7, #12
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr
 800a9da:	bf00      	nop
 800a9dc:	20002ae4 	.word	0x20002ae4

0800a9e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b086      	sub	sp, #24
 800a9e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9ea:	4b4f      	ldr	r3, [pc, #316]	@ (800ab28 <xTaskIncrementTick+0x148>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f040 8090 	bne.w	800ab14 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a9f4:	4b4d      	ldr	r3, [pc, #308]	@ (800ab2c <xTaskIncrementTick+0x14c>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a9fc:	4a4b      	ldr	r2, [pc, #300]	@ (800ab2c <xTaskIncrementTick+0x14c>)
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d121      	bne.n	800aa4c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800aa08:	4b49      	ldr	r3, [pc, #292]	@ (800ab30 <xTaskIncrementTick+0x150>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00b      	beq.n	800aa2a <xTaskIncrementTick+0x4a>
	__asm volatile
 800aa12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa16:	f383 8811 	msr	BASEPRI, r3
 800aa1a:	f3bf 8f6f 	isb	sy
 800aa1e:	f3bf 8f4f 	dsb	sy
 800aa22:	603b      	str	r3, [r7, #0]
}
 800aa24:	bf00      	nop
 800aa26:	bf00      	nop
 800aa28:	e7fd      	b.n	800aa26 <xTaskIncrementTick+0x46>
 800aa2a:	4b41      	ldr	r3, [pc, #260]	@ (800ab30 <xTaskIncrementTick+0x150>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	60fb      	str	r3, [r7, #12]
 800aa30:	4b40      	ldr	r3, [pc, #256]	@ (800ab34 <xTaskIncrementTick+0x154>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a3e      	ldr	r2, [pc, #248]	@ (800ab30 <xTaskIncrementTick+0x150>)
 800aa36:	6013      	str	r3, [r2, #0]
 800aa38:	4a3e      	ldr	r2, [pc, #248]	@ (800ab34 <xTaskIncrementTick+0x154>)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	6013      	str	r3, [r2, #0]
 800aa3e:	4b3e      	ldr	r3, [pc, #248]	@ (800ab38 <xTaskIncrementTick+0x158>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	3301      	adds	r3, #1
 800aa44:	4a3c      	ldr	r2, [pc, #240]	@ (800ab38 <xTaskIncrementTick+0x158>)
 800aa46:	6013      	str	r3, [r2, #0]
 800aa48:	f000 fad4 	bl	800aff4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aa4c:	4b3b      	ldr	r3, [pc, #236]	@ (800ab3c <xTaskIncrementTick+0x15c>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	693a      	ldr	r2, [r7, #16]
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d349      	bcc.n	800aaea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa56:	4b36      	ldr	r3, [pc, #216]	@ (800ab30 <xTaskIncrementTick+0x150>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d104      	bne.n	800aa6a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa60:	4b36      	ldr	r3, [pc, #216]	@ (800ab3c <xTaskIncrementTick+0x15c>)
 800aa62:	f04f 32ff 	mov.w	r2, #4294967295
 800aa66:	601a      	str	r2, [r3, #0]
					break;
 800aa68:	e03f      	b.n	800aaea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa6a:	4b31      	ldr	r3, [pc, #196]	@ (800ab30 <xTaskIncrementTick+0x150>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aa7a:	693a      	ldr	r2, [r7, #16]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d203      	bcs.n	800aa8a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aa82:	4a2e      	ldr	r2, [pc, #184]	@ (800ab3c <xTaskIncrementTick+0x15c>)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aa88:	e02f      	b.n	800aaea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	3304      	adds	r3, #4
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7fe ff82 	bl	8009998 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d004      	beq.n	800aaa6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	3318      	adds	r3, #24
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7fe ff79 	bl	8009998 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaaa:	4b25      	ldr	r3, [pc, #148]	@ (800ab40 <xTaskIncrementTick+0x160>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d903      	bls.n	800aaba <xTaskIncrementTick+0xda>
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aab6:	4a22      	ldr	r2, [pc, #136]	@ (800ab40 <xTaskIncrementTick+0x160>)
 800aab8:	6013      	str	r3, [r2, #0]
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aabe:	4613      	mov	r3, r2
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	4413      	add	r3, r2
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	4a1f      	ldr	r2, [pc, #124]	@ (800ab44 <xTaskIncrementTick+0x164>)
 800aac8:	441a      	add	r2, r3
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	3304      	adds	r3, #4
 800aace:	4619      	mov	r1, r3
 800aad0:	4610      	mov	r0, r2
 800aad2:	f7fe ff04 	bl	80098de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aada:	4b1b      	ldr	r3, [pc, #108]	@ (800ab48 <xTaskIncrementTick+0x168>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d3b8      	bcc.n	800aa56 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800aae4:	2301      	movs	r3, #1
 800aae6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aae8:	e7b5      	b.n	800aa56 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aaea:	4b17      	ldr	r3, [pc, #92]	@ (800ab48 <xTaskIncrementTick+0x168>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaf0:	4914      	ldr	r1, [pc, #80]	@ (800ab44 <xTaskIncrementTick+0x164>)
 800aaf2:	4613      	mov	r3, r2
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	4413      	add	r3, r2
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	440b      	add	r3, r1
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d901      	bls.n	800ab06 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800ab02:	2301      	movs	r3, #1
 800ab04:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ab06:	4b11      	ldr	r3, [pc, #68]	@ (800ab4c <xTaskIncrementTick+0x16c>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d007      	beq.n	800ab1e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	617b      	str	r3, [r7, #20]
 800ab12:	e004      	b.n	800ab1e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ab14:	4b0e      	ldr	r3, [pc, #56]	@ (800ab50 <xTaskIncrementTick+0x170>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	4a0d      	ldr	r2, [pc, #52]	@ (800ab50 <xTaskIncrementTick+0x170>)
 800ab1c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ab1e:	697b      	ldr	r3, [r7, #20]
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3718      	adds	r7, #24
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	20002b08 	.word	0x20002b08
 800ab2c:	20002ae4 	.word	0x20002ae4
 800ab30:	20002a98 	.word	0x20002a98
 800ab34:	20002a9c 	.word	0x20002a9c
 800ab38:	20002af8 	.word	0x20002af8
 800ab3c:	20002b00 	.word	0x20002b00
 800ab40:	20002ae8 	.word	0x20002ae8
 800ab44:	20002610 	.word	0x20002610
 800ab48:	2000260c 	.word	0x2000260c
 800ab4c:	20002af4 	.word	0x20002af4
 800ab50:	20002af0 	.word	0x20002af0

0800ab54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ab54:	b480      	push	{r7}
 800ab56:	b085      	sub	sp, #20
 800ab58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ab5a:	4b28      	ldr	r3, [pc, #160]	@ (800abfc <vTaskSwitchContext+0xa8>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d003      	beq.n	800ab6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ab62:	4b27      	ldr	r3, [pc, #156]	@ (800ac00 <vTaskSwitchContext+0xac>)
 800ab64:	2201      	movs	r2, #1
 800ab66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ab68:	e042      	b.n	800abf0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800ab6a:	4b25      	ldr	r3, [pc, #148]	@ (800ac00 <vTaskSwitchContext+0xac>)
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab70:	4b24      	ldr	r3, [pc, #144]	@ (800ac04 <vTaskSwitchContext+0xb0>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	60fb      	str	r3, [r7, #12]
 800ab76:	e011      	b.n	800ab9c <vTaskSwitchContext+0x48>
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d10b      	bne.n	800ab96 <vTaskSwitchContext+0x42>
	__asm volatile
 800ab7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab82:	f383 8811 	msr	BASEPRI, r3
 800ab86:	f3bf 8f6f 	isb	sy
 800ab8a:	f3bf 8f4f 	dsb	sy
 800ab8e:	607b      	str	r3, [r7, #4]
}
 800ab90:	bf00      	nop
 800ab92:	bf00      	nop
 800ab94:	e7fd      	b.n	800ab92 <vTaskSwitchContext+0x3e>
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	60fb      	str	r3, [r7, #12]
 800ab9c:	491a      	ldr	r1, [pc, #104]	@ (800ac08 <vTaskSwitchContext+0xb4>)
 800ab9e:	68fa      	ldr	r2, [r7, #12]
 800aba0:	4613      	mov	r3, r2
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	4413      	add	r3, r2
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	440b      	add	r3, r1
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d0e3      	beq.n	800ab78 <vTaskSwitchContext+0x24>
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	4613      	mov	r3, r2
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	4413      	add	r3, r2
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	4a13      	ldr	r2, [pc, #76]	@ (800ac08 <vTaskSwitchContext+0xb4>)
 800abbc:	4413      	add	r3, r2
 800abbe:	60bb      	str	r3, [r7, #8]
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	685a      	ldr	r2, [r3, #4]
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	605a      	str	r2, [r3, #4]
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	685a      	ldr	r2, [r3, #4]
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	3308      	adds	r3, #8
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d104      	bne.n	800abe0 <vTaskSwitchContext+0x8c>
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	685a      	ldr	r2, [r3, #4]
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	605a      	str	r2, [r3, #4]
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	4a09      	ldr	r2, [pc, #36]	@ (800ac0c <vTaskSwitchContext+0xb8>)
 800abe8:	6013      	str	r3, [r2, #0]
 800abea:	4a06      	ldr	r2, [pc, #24]	@ (800ac04 <vTaskSwitchContext+0xb0>)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	6013      	str	r3, [r2, #0]
}
 800abf0:	bf00      	nop
 800abf2:	3714      	adds	r7, #20
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr
 800abfc:	20002b08 	.word	0x20002b08
 800ac00:	20002af4 	.word	0x20002af4
 800ac04:	20002ae8 	.word	0x20002ae8
 800ac08:	20002610 	.word	0x20002610
 800ac0c:	2000260c 	.word	0x2000260c

0800ac10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d10b      	bne.n	800ac38 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ac20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac24:	f383 8811 	msr	BASEPRI, r3
 800ac28:	f3bf 8f6f 	isb	sy
 800ac2c:	f3bf 8f4f 	dsb	sy
 800ac30:	60fb      	str	r3, [r7, #12]
}
 800ac32:	bf00      	nop
 800ac34:	bf00      	nop
 800ac36:	e7fd      	b.n	800ac34 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac38:	4b07      	ldr	r3, [pc, #28]	@ (800ac58 <vTaskPlaceOnEventList+0x48>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	3318      	adds	r3, #24
 800ac3e:	4619      	mov	r1, r3
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f7fe fe70 	bl	8009926 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ac46:	2101      	movs	r1, #1
 800ac48:	6838      	ldr	r0, [r7, #0]
 800ac4a:	f000 fa81 	bl	800b150 <prvAddCurrentTaskToDelayedList>
}
 800ac4e:	bf00      	nop
 800ac50:	3710      	adds	r7, #16
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	2000260c 	.word	0x2000260c

0800ac5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b086      	sub	sp, #24
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	60b9      	str	r1, [r7, #8]
 800ac66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d10b      	bne.n	800ac86 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ac6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	617b      	str	r3, [r7, #20]
}
 800ac80:	bf00      	nop
 800ac82:	bf00      	nop
 800ac84:	e7fd      	b.n	800ac82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac86:	4b0a      	ldr	r3, [pc, #40]	@ (800acb0 <vTaskPlaceOnEventListRestricted+0x54>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	3318      	adds	r3, #24
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	68f8      	ldr	r0, [r7, #12]
 800ac90:	f7fe fe25 	bl	80098de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d002      	beq.n	800aca0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ac9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac9e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aca0:	6879      	ldr	r1, [r7, #4]
 800aca2:	68b8      	ldr	r0, [r7, #8]
 800aca4:	f000 fa54 	bl	800b150 <prvAddCurrentTaskToDelayedList>
	}
 800aca8:	bf00      	nop
 800acaa:	3718      	adds	r7, #24
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}
 800acb0:	2000260c 	.word	0x2000260c

0800acb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b086      	sub	sp, #24
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	68db      	ldr	r3, [r3, #12]
 800acc0:	68db      	ldr	r3, [r3, #12]
 800acc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d10b      	bne.n	800ace2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800acca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acce:	f383 8811 	msr	BASEPRI, r3
 800acd2:	f3bf 8f6f 	isb	sy
 800acd6:	f3bf 8f4f 	dsb	sy
 800acda:	60fb      	str	r3, [r7, #12]
}
 800acdc:	bf00      	nop
 800acde:	bf00      	nop
 800ace0:	e7fd      	b.n	800acde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	3318      	adds	r3, #24
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7fe fe56 	bl	8009998 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800acec:	4b1d      	ldr	r3, [pc, #116]	@ (800ad64 <xTaskRemoveFromEventList+0xb0>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d11d      	bne.n	800ad30 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	3304      	adds	r3, #4
 800acf8:	4618      	mov	r0, r3
 800acfa:	f7fe fe4d 	bl	8009998 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad02:	4b19      	ldr	r3, [pc, #100]	@ (800ad68 <xTaskRemoveFromEventList+0xb4>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d903      	bls.n	800ad12 <xTaskRemoveFromEventList+0x5e>
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad0e:	4a16      	ldr	r2, [pc, #88]	@ (800ad68 <xTaskRemoveFromEventList+0xb4>)
 800ad10:	6013      	str	r3, [r2, #0]
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad16:	4613      	mov	r3, r2
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	4413      	add	r3, r2
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	4a13      	ldr	r2, [pc, #76]	@ (800ad6c <xTaskRemoveFromEventList+0xb8>)
 800ad20:	441a      	add	r2, r3
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	3304      	adds	r3, #4
 800ad26:	4619      	mov	r1, r3
 800ad28:	4610      	mov	r0, r2
 800ad2a:	f7fe fdd8 	bl	80098de <vListInsertEnd>
 800ad2e:	e005      	b.n	800ad3c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	3318      	adds	r3, #24
 800ad34:	4619      	mov	r1, r3
 800ad36:	480e      	ldr	r0, [pc, #56]	@ (800ad70 <xTaskRemoveFromEventList+0xbc>)
 800ad38:	f7fe fdd1 	bl	80098de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad40:	4b0c      	ldr	r3, [pc, #48]	@ (800ad74 <xTaskRemoveFromEventList+0xc0>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d905      	bls.n	800ad56 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ad4e:	4b0a      	ldr	r3, [pc, #40]	@ (800ad78 <xTaskRemoveFromEventList+0xc4>)
 800ad50:	2201      	movs	r2, #1
 800ad52:	601a      	str	r2, [r3, #0]
 800ad54:	e001      	b.n	800ad5a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ad56:	2300      	movs	r3, #0
 800ad58:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ad5a:	697b      	ldr	r3, [r7, #20]
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3718      	adds	r7, #24
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	20002b08 	.word	0x20002b08
 800ad68:	20002ae8 	.word	0x20002ae8
 800ad6c:	20002610 	.word	0x20002610
 800ad70:	20002aa0 	.word	0x20002aa0
 800ad74:	2000260c 	.word	0x2000260c
 800ad78:	20002af4 	.word	0x20002af4

0800ad7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ad84:	4b06      	ldr	r3, [pc, #24]	@ (800ada0 <vTaskInternalSetTimeOutState+0x24>)
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ad8c:	4b05      	ldr	r3, [pc, #20]	@ (800ada4 <vTaskInternalSetTimeOutState+0x28>)
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	605a      	str	r2, [r3, #4]
}
 800ad94:	bf00      	nop
 800ad96:	370c      	adds	r7, #12
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr
 800ada0:	20002af8 	.word	0x20002af8
 800ada4:	20002ae4 	.word	0x20002ae4

0800ada8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b088      	sub	sp, #32
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d10b      	bne.n	800add0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800adb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adbc:	f383 8811 	msr	BASEPRI, r3
 800adc0:	f3bf 8f6f 	isb	sy
 800adc4:	f3bf 8f4f 	dsb	sy
 800adc8:	613b      	str	r3, [r7, #16]
}
 800adca:	bf00      	nop
 800adcc:	bf00      	nop
 800adce:	e7fd      	b.n	800adcc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d10b      	bne.n	800adee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800add6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adda:	f383 8811 	msr	BASEPRI, r3
 800adde:	f3bf 8f6f 	isb	sy
 800ade2:	f3bf 8f4f 	dsb	sy
 800ade6:	60fb      	str	r3, [r7, #12]
}
 800ade8:	bf00      	nop
 800adea:	bf00      	nop
 800adec:	e7fd      	b.n	800adea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800adee:	f000 fe8b 	bl	800bb08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800adf2:	4b1d      	ldr	r3, [pc, #116]	@ (800ae68 <xTaskCheckForTimeOut+0xc0>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	69ba      	ldr	r2, [r7, #24]
 800adfe:	1ad3      	subs	r3, r2, r3
 800ae00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae0a:	d102      	bne.n	800ae12 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	61fb      	str	r3, [r7, #28]
 800ae10:	e023      	b.n	800ae5a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681a      	ldr	r2, [r3, #0]
 800ae16:	4b15      	ldr	r3, [pc, #84]	@ (800ae6c <xTaskCheckForTimeOut+0xc4>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d007      	beq.n	800ae2e <xTaskCheckForTimeOut+0x86>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	69ba      	ldr	r2, [r7, #24]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d302      	bcc.n	800ae2e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	61fb      	str	r3, [r7, #28]
 800ae2c:	e015      	b.n	800ae5a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	697a      	ldr	r2, [r7, #20]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d20b      	bcs.n	800ae50 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	1ad2      	subs	r2, r2, r3
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f7ff ff99 	bl	800ad7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	61fb      	str	r3, [r7, #28]
 800ae4e:	e004      	b.n	800ae5a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	2200      	movs	r2, #0
 800ae54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ae56:	2301      	movs	r3, #1
 800ae58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ae5a:	f000 fe87 	bl	800bb6c <vPortExitCritical>

	return xReturn;
 800ae5e:	69fb      	ldr	r3, [r7, #28]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3720      	adds	r7, #32
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	20002ae4 	.word	0x20002ae4
 800ae6c:	20002af8 	.word	0x20002af8

0800ae70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ae70:	b480      	push	{r7}
 800ae72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ae74:	4b03      	ldr	r3, [pc, #12]	@ (800ae84 <vTaskMissedYield+0x14>)
 800ae76:	2201      	movs	r2, #1
 800ae78:	601a      	str	r2, [r3, #0]
}
 800ae7a:	bf00      	nop
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr
 800ae84:	20002af4 	.word	0x20002af4

0800ae88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ae90:	f000 f852 	bl	800af38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ae94:	4b06      	ldr	r3, [pc, #24]	@ (800aeb0 <prvIdleTask+0x28>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d9f9      	bls.n	800ae90 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ae9c:	4b05      	ldr	r3, [pc, #20]	@ (800aeb4 <prvIdleTask+0x2c>)
 800ae9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aea2:	601a      	str	r2, [r3, #0]
 800aea4:	f3bf 8f4f 	dsb	sy
 800aea8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aeac:	e7f0      	b.n	800ae90 <prvIdleTask+0x8>
 800aeae:	bf00      	nop
 800aeb0:	20002610 	.word	0x20002610
 800aeb4:	e000ed04 	.word	0xe000ed04

0800aeb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aebe:	2300      	movs	r3, #0
 800aec0:	607b      	str	r3, [r7, #4]
 800aec2:	e00c      	b.n	800aede <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	4613      	mov	r3, r2
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	4413      	add	r3, r2
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	4a12      	ldr	r2, [pc, #72]	@ (800af18 <prvInitialiseTaskLists+0x60>)
 800aed0:	4413      	add	r3, r2
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7fe fcd6 	bl	8009884 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	3301      	adds	r3, #1
 800aedc:	607b      	str	r3, [r7, #4]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2b37      	cmp	r3, #55	@ 0x37
 800aee2:	d9ef      	bls.n	800aec4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aee4:	480d      	ldr	r0, [pc, #52]	@ (800af1c <prvInitialiseTaskLists+0x64>)
 800aee6:	f7fe fccd 	bl	8009884 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aeea:	480d      	ldr	r0, [pc, #52]	@ (800af20 <prvInitialiseTaskLists+0x68>)
 800aeec:	f7fe fcca 	bl	8009884 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aef0:	480c      	ldr	r0, [pc, #48]	@ (800af24 <prvInitialiseTaskLists+0x6c>)
 800aef2:	f7fe fcc7 	bl	8009884 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aef6:	480c      	ldr	r0, [pc, #48]	@ (800af28 <prvInitialiseTaskLists+0x70>)
 800aef8:	f7fe fcc4 	bl	8009884 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aefc:	480b      	ldr	r0, [pc, #44]	@ (800af2c <prvInitialiseTaskLists+0x74>)
 800aefe:	f7fe fcc1 	bl	8009884 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800af02:	4b0b      	ldr	r3, [pc, #44]	@ (800af30 <prvInitialiseTaskLists+0x78>)
 800af04:	4a05      	ldr	r2, [pc, #20]	@ (800af1c <prvInitialiseTaskLists+0x64>)
 800af06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800af08:	4b0a      	ldr	r3, [pc, #40]	@ (800af34 <prvInitialiseTaskLists+0x7c>)
 800af0a:	4a05      	ldr	r2, [pc, #20]	@ (800af20 <prvInitialiseTaskLists+0x68>)
 800af0c:	601a      	str	r2, [r3, #0]
}
 800af0e:	bf00      	nop
 800af10:	3708      	adds	r7, #8
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	20002610 	.word	0x20002610
 800af1c:	20002a70 	.word	0x20002a70
 800af20:	20002a84 	.word	0x20002a84
 800af24:	20002aa0 	.word	0x20002aa0
 800af28:	20002ab4 	.word	0x20002ab4
 800af2c:	20002acc 	.word	0x20002acc
 800af30:	20002a98 	.word	0x20002a98
 800af34:	20002a9c 	.word	0x20002a9c

0800af38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af3e:	e019      	b.n	800af74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800af40:	f000 fde2 	bl	800bb08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af44:	4b10      	ldr	r3, [pc, #64]	@ (800af88 <prvCheckTasksWaitingTermination+0x50>)
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	68db      	ldr	r3, [r3, #12]
 800af4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	3304      	adds	r3, #4
 800af50:	4618      	mov	r0, r3
 800af52:	f7fe fd21 	bl	8009998 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800af56:	4b0d      	ldr	r3, [pc, #52]	@ (800af8c <prvCheckTasksWaitingTermination+0x54>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	3b01      	subs	r3, #1
 800af5c:	4a0b      	ldr	r2, [pc, #44]	@ (800af8c <prvCheckTasksWaitingTermination+0x54>)
 800af5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800af60:	4b0b      	ldr	r3, [pc, #44]	@ (800af90 <prvCheckTasksWaitingTermination+0x58>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	3b01      	subs	r3, #1
 800af66:	4a0a      	ldr	r2, [pc, #40]	@ (800af90 <prvCheckTasksWaitingTermination+0x58>)
 800af68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800af6a:	f000 fdff 	bl	800bb6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f810 	bl	800af94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af74:	4b06      	ldr	r3, [pc, #24]	@ (800af90 <prvCheckTasksWaitingTermination+0x58>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d1e1      	bne.n	800af40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800af7c:	bf00      	nop
 800af7e:	bf00      	nop
 800af80:	3708      	adds	r7, #8
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	20002ab4 	.word	0x20002ab4
 800af8c:	20002ae0 	.word	0x20002ae0
 800af90:	20002ac8 	.word	0x20002ac8

0800af94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d108      	bne.n	800afb8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afaa:	4618      	mov	r0, r3
 800afac:	f000 ff9c 	bl	800bee8 <vPortFree>
				vPortFree( pxTCB );
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 ff99 	bl	800bee8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800afb6:	e019      	b.n	800afec <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d103      	bne.n	800afca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 ff90 	bl	800bee8 <vPortFree>
	}
 800afc8:	e010      	b.n	800afec <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800afd0:	2b02      	cmp	r3, #2
 800afd2:	d00b      	beq.n	800afec <prvDeleteTCB+0x58>
	__asm volatile
 800afd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd8:	f383 8811 	msr	BASEPRI, r3
 800afdc:	f3bf 8f6f 	isb	sy
 800afe0:	f3bf 8f4f 	dsb	sy
 800afe4:	60fb      	str	r3, [r7, #12]
}
 800afe6:	bf00      	nop
 800afe8:	bf00      	nop
 800afea:	e7fd      	b.n	800afe8 <prvDeleteTCB+0x54>
	}
 800afec:	bf00      	nop
 800afee:	3710      	adds	r7, #16
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aff4:	b480      	push	{r7}
 800aff6:	b083      	sub	sp, #12
 800aff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800affa:	4b0c      	ldr	r3, [pc, #48]	@ (800b02c <prvResetNextTaskUnblockTime+0x38>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d104      	bne.n	800b00e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b004:	4b0a      	ldr	r3, [pc, #40]	@ (800b030 <prvResetNextTaskUnblockTime+0x3c>)
 800b006:	f04f 32ff 	mov.w	r2, #4294967295
 800b00a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b00c:	e008      	b.n	800b020 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b00e:	4b07      	ldr	r3, [pc, #28]	@ (800b02c <prvResetNextTaskUnblockTime+0x38>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	68db      	ldr	r3, [r3, #12]
 800b016:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	4a04      	ldr	r2, [pc, #16]	@ (800b030 <prvResetNextTaskUnblockTime+0x3c>)
 800b01e:	6013      	str	r3, [r2, #0]
}
 800b020:	bf00      	nop
 800b022:	370c      	adds	r7, #12
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr
 800b02c:	20002a98 	.word	0x20002a98
 800b030:	20002b00 	.word	0x20002b00

0800b034 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b03a:	4b0b      	ldr	r3, [pc, #44]	@ (800b068 <xTaskGetSchedulerState+0x34>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d102      	bne.n	800b048 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b042:	2301      	movs	r3, #1
 800b044:	607b      	str	r3, [r7, #4]
 800b046:	e008      	b.n	800b05a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b048:	4b08      	ldr	r3, [pc, #32]	@ (800b06c <xTaskGetSchedulerState+0x38>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d102      	bne.n	800b056 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b050:	2302      	movs	r3, #2
 800b052:	607b      	str	r3, [r7, #4]
 800b054:	e001      	b.n	800b05a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b056:	2300      	movs	r3, #0
 800b058:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b05a:	687b      	ldr	r3, [r7, #4]
	}
 800b05c:	4618      	mov	r0, r3
 800b05e:	370c      	adds	r7, #12
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr
 800b068:	20002aec 	.word	0x20002aec
 800b06c:	20002b08 	.word	0x20002b08

0800b070 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b070:	b580      	push	{r7, lr}
 800b072:	b086      	sub	sp, #24
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b07c:	2300      	movs	r3, #0
 800b07e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d058      	beq.n	800b138 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b086:	4b2f      	ldr	r3, [pc, #188]	@ (800b144 <xTaskPriorityDisinherit+0xd4>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	693a      	ldr	r2, [r7, #16]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d00b      	beq.n	800b0a8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b094:	f383 8811 	msr	BASEPRI, r3
 800b098:	f3bf 8f6f 	isb	sy
 800b09c:	f3bf 8f4f 	dsb	sy
 800b0a0:	60fb      	str	r3, [r7, #12]
}
 800b0a2:	bf00      	nop
 800b0a4:	bf00      	nop
 800b0a6:	e7fd      	b.n	800b0a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d10b      	bne.n	800b0c8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b0b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0b4:	f383 8811 	msr	BASEPRI, r3
 800b0b8:	f3bf 8f6f 	isb	sy
 800b0bc:	f3bf 8f4f 	dsb	sy
 800b0c0:	60bb      	str	r3, [r7, #8]
}
 800b0c2:	bf00      	nop
 800b0c4:	bf00      	nop
 800b0c6:	e7fd      	b.n	800b0c4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0cc:	1e5a      	subs	r2, r3, #1
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d02c      	beq.n	800b138 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d128      	bne.n	800b138 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	3304      	adds	r3, #4
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7fe fc54 	bl	8009998 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b108:	4b0f      	ldr	r3, [pc, #60]	@ (800b148 <xTaskPriorityDisinherit+0xd8>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d903      	bls.n	800b118 <xTaskPriorityDisinherit+0xa8>
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b114:	4a0c      	ldr	r2, [pc, #48]	@ (800b148 <xTaskPriorityDisinherit+0xd8>)
 800b116:	6013      	str	r3, [r2, #0]
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b11c:	4613      	mov	r3, r2
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	4413      	add	r3, r2
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	4a09      	ldr	r2, [pc, #36]	@ (800b14c <xTaskPriorityDisinherit+0xdc>)
 800b126:	441a      	add	r2, r3
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	3304      	adds	r3, #4
 800b12c:	4619      	mov	r1, r3
 800b12e:	4610      	mov	r0, r2
 800b130:	f7fe fbd5 	bl	80098de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b134:	2301      	movs	r3, #1
 800b136:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b138:	697b      	ldr	r3, [r7, #20]
	}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3718      	adds	r7, #24
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	2000260c 	.word	0x2000260c
 800b148:	20002ae8 	.word	0x20002ae8
 800b14c:	20002610 	.word	0x20002610

0800b150 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b15a:	4b21      	ldr	r3, [pc, #132]	@ (800b1e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b160:	4b20      	ldr	r3, [pc, #128]	@ (800b1e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	3304      	adds	r3, #4
 800b166:	4618      	mov	r0, r3
 800b168:	f7fe fc16 	bl	8009998 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b172:	d10a      	bne.n	800b18a <prvAddCurrentTaskToDelayedList+0x3a>
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d007      	beq.n	800b18a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b17a:	4b1a      	ldr	r3, [pc, #104]	@ (800b1e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	3304      	adds	r3, #4
 800b180:	4619      	mov	r1, r3
 800b182:	4819      	ldr	r0, [pc, #100]	@ (800b1e8 <prvAddCurrentTaskToDelayedList+0x98>)
 800b184:	f7fe fbab 	bl	80098de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b188:	e026      	b.n	800b1d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b18a:	68fa      	ldr	r2, [r7, #12]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	4413      	add	r3, r2
 800b190:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b192:	4b14      	ldr	r3, [pc, #80]	@ (800b1e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	68ba      	ldr	r2, [r7, #8]
 800b198:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b19a:	68ba      	ldr	r2, [r7, #8]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d209      	bcs.n	800b1b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1a2:	4b12      	ldr	r3, [pc, #72]	@ (800b1ec <prvAddCurrentTaskToDelayedList+0x9c>)
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b1e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	3304      	adds	r3, #4
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	4610      	mov	r0, r2
 800b1b0:	f7fe fbb9 	bl	8009926 <vListInsert>
}
 800b1b4:	e010      	b.n	800b1d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1b6:	4b0e      	ldr	r3, [pc, #56]	@ (800b1f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	4b0a      	ldr	r3, [pc, #40]	@ (800b1e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	3304      	adds	r3, #4
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	4610      	mov	r0, r2
 800b1c4:	f7fe fbaf 	bl	8009926 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b1c8:	4b0a      	ldr	r3, [pc, #40]	@ (800b1f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	68ba      	ldr	r2, [r7, #8]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d202      	bcs.n	800b1d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b1d2:	4a08      	ldr	r2, [pc, #32]	@ (800b1f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	6013      	str	r3, [r2, #0]
}
 800b1d8:	bf00      	nop
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}
 800b1e0:	20002ae4 	.word	0x20002ae4
 800b1e4:	2000260c 	.word	0x2000260c
 800b1e8:	20002acc 	.word	0x20002acc
 800b1ec:	20002a9c 	.word	0x20002a9c
 800b1f0:	20002a98 	.word	0x20002a98
 800b1f4:	20002b00 	.word	0x20002b00

0800b1f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b08a      	sub	sp, #40	@ 0x28
 800b1fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b1fe:	2300      	movs	r3, #0
 800b200:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b202:	f000 fb13 	bl	800b82c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b206:	4b1d      	ldr	r3, [pc, #116]	@ (800b27c <xTimerCreateTimerTask+0x84>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d021      	beq.n	800b252 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b20e:	2300      	movs	r3, #0
 800b210:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b212:	2300      	movs	r3, #0
 800b214:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b216:	1d3a      	adds	r2, r7, #4
 800b218:	f107 0108 	add.w	r1, r7, #8
 800b21c:	f107 030c 	add.w	r3, r7, #12
 800b220:	4618      	mov	r0, r3
 800b222:	f7fe fb15 	bl	8009850 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b226:	6879      	ldr	r1, [r7, #4]
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	68fa      	ldr	r2, [r7, #12]
 800b22c:	9202      	str	r2, [sp, #8]
 800b22e:	9301      	str	r3, [sp, #4]
 800b230:	2302      	movs	r3, #2
 800b232:	9300      	str	r3, [sp, #0]
 800b234:	2300      	movs	r3, #0
 800b236:	460a      	mov	r2, r1
 800b238:	4911      	ldr	r1, [pc, #68]	@ (800b280 <xTimerCreateTimerTask+0x88>)
 800b23a:	4812      	ldr	r0, [pc, #72]	@ (800b284 <xTimerCreateTimerTask+0x8c>)
 800b23c:	f7ff f8d0 	bl	800a3e0 <xTaskCreateStatic>
 800b240:	4603      	mov	r3, r0
 800b242:	4a11      	ldr	r2, [pc, #68]	@ (800b288 <xTimerCreateTimerTask+0x90>)
 800b244:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b246:	4b10      	ldr	r3, [pc, #64]	@ (800b288 <xTimerCreateTimerTask+0x90>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d001      	beq.n	800b252 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b24e:	2301      	movs	r3, #1
 800b250:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d10b      	bne.n	800b270 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b25c:	f383 8811 	msr	BASEPRI, r3
 800b260:	f3bf 8f6f 	isb	sy
 800b264:	f3bf 8f4f 	dsb	sy
 800b268:	613b      	str	r3, [r7, #16]
}
 800b26a:	bf00      	nop
 800b26c:	bf00      	nop
 800b26e:	e7fd      	b.n	800b26c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b270:	697b      	ldr	r3, [r7, #20]
}
 800b272:	4618      	mov	r0, r3
 800b274:	3718      	adds	r7, #24
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	20002b3c 	.word	0x20002b3c
 800b280:	08010d40 	.word	0x08010d40
 800b284:	0800b3c5 	.word	0x0800b3c5
 800b288:	20002b40 	.word	0x20002b40

0800b28c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b08a      	sub	sp, #40	@ 0x28
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
 800b298:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b29a:	2300      	movs	r3, #0
 800b29c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d10b      	bne.n	800b2bc <xTimerGenericCommand+0x30>
	__asm volatile
 800b2a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a8:	f383 8811 	msr	BASEPRI, r3
 800b2ac:	f3bf 8f6f 	isb	sy
 800b2b0:	f3bf 8f4f 	dsb	sy
 800b2b4:	623b      	str	r3, [r7, #32]
}
 800b2b6:	bf00      	nop
 800b2b8:	bf00      	nop
 800b2ba:	e7fd      	b.n	800b2b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b2bc:	4b19      	ldr	r3, [pc, #100]	@ (800b324 <xTimerGenericCommand+0x98>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d02a      	beq.n	800b31a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	2b05      	cmp	r3, #5
 800b2d4:	dc18      	bgt.n	800b308 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b2d6:	f7ff fead 	bl	800b034 <xTaskGetSchedulerState>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	d109      	bne.n	800b2f4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b2e0:	4b10      	ldr	r3, [pc, #64]	@ (800b324 <xTimerGenericCommand+0x98>)
 800b2e2:	6818      	ldr	r0, [r3, #0]
 800b2e4:	f107 0110 	add.w	r1, r7, #16
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2ec:	f7fe fc88 	bl	8009c00 <xQueueGenericSend>
 800b2f0:	6278      	str	r0, [r7, #36]	@ 0x24
 800b2f2:	e012      	b.n	800b31a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b2f4:	4b0b      	ldr	r3, [pc, #44]	@ (800b324 <xTimerGenericCommand+0x98>)
 800b2f6:	6818      	ldr	r0, [r3, #0]
 800b2f8:	f107 0110 	add.w	r1, r7, #16
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	2200      	movs	r2, #0
 800b300:	f7fe fc7e 	bl	8009c00 <xQueueGenericSend>
 800b304:	6278      	str	r0, [r7, #36]	@ 0x24
 800b306:	e008      	b.n	800b31a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b308:	4b06      	ldr	r3, [pc, #24]	@ (800b324 <xTimerGenericCommand+0x98>)
 800b30a:	6818      	ldr	r0, [r3, #0]
 800b30c:	f107 0110 	add.w	r1, r7, #16
 800b310:	2300      	movs	r3, #0
 800b312:	683a      	ldr	r2, [r7, #0]
 800b314:	f7fe fd76 	bl	8009e04 <xQueueGenericSendFromISR>
 800b318:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3728      	adds	r7, #40	@ 0x28
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}
 800b324:	20002b3c 	.word	0x20002b3c

0800b328 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b088      	sub	sp, #32
 800b32c:	af02      	add	r7, sp, #8
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b332:	4b23      	ldr	r3, [pc, #140]	@ (800b3c0 <prvProcessExpiredTimer+0x98>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	3304      	adds	r3, #4
 800b340:	4618      	mov	r0, r3
 800b342:	f7fe fb29 	bl	8009998 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b34c:	f003 0304 	and.w	r3, r3, #4
 800b350:	2b00      	cmp	r3, #0
 800b352:	d023      	beq.n	800b39c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	699a      	ldr	r2, [r3, #24]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	18d1      	adds	r1, r2, r3
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	683a      	ldr	r2, [r7, #0]
 800b360:	6978      	ldr	r0, [r7, #20]
 800b362:	f000 f8d5 	bl	800b510 <prvInsertTimerInActiveList>
 800b366:	4603      	mov	r3, r0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d020      	beq.n	800b3ae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b36c:	2300      	movs	r3, #0
 800b36e:	9300      	str	r3, [sp, #0]
 800b370:	2300      	movs	r3, #0
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	2100      	movs	r1, #0
 800b376:	6978      	ldr	r0, [r7, #20]
 800b378:	f7ff ff88 	bl	800b28c <xTimerGenericCommand>
 800b37c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d114      	bne.n	800b3ae <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b388:	f383 8811 	msr	BASEPRI, r3
 800b38c:	f3bf 8f6f 	isb	sy
 800b390:	f3bf 8f4f 	dsb	sy
 800b394:	60fb      	str	r3, [r7, #12]
}
 800b396:	bf00      	nop
 800b398:	bf00      	nop
 800b39a:	e7fd      	b.n	800b398 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3a2:	f023 0301 	bic.w	r3, r3, #1
 800b3a6:	b2da      	uxtb	r2, r3
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	6a1b      	ldr	r3, [r3, #32]
 800b3b2:	6978      	ldr	r0, [r7, #20]
 800b3b4:	4798      	blx	r3
}
 800b3b6:	bf00      	nop
 800b3b8:	3718      	adds	r7, #24
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	20002b34 	.word	0x20002b34

0800b3c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b084      	sub	sp, #16
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b3cc:	f107 0308 	add.w	r3, r7, #8
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f000 f859 	bl	800b488 <prvGetNextExpireTime>
 800b3d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	4619      	mov	r1, r3
 800b3dc:	68f8      	ldr	r0, [r7, #12]
 800b3de:	f000 f805 	bl	800b3ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b3e2:	f000 f8d7 	bl	800b594 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b3e6:	bf00      	nop
 800b3e8:	e7f0      	b.n	800b3cc <prvTimerTask+0x8>
	...

0800b3ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b3f6:	f7ff fa37 	bl	800a868 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b3fa:	f107 0308 	add.w	r3, r7, #8
 800b3fe:	4618      	mov	r0, r3
 800b400:	f000 f866 	bl	800b4d0 <prvSampleTimeNow>
 800b404:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d130      	bne.n	800b46e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d10a      	bne.n	800b428 <prvProcessTimerOrBlockTask+0x3c>
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	429a      	cmp	r2, r3
 800b418:	d806      	bhi.n	800b428 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b41a:	f7ff fa33 	bl	800a884 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b41e:	68f9      	ldr	r1, [r7, #12]
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f7ff ff81 	bl	800b328 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b426:	e024      	b.n	800b472 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d008      	beq.n	800b440 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b42e:	4b13      	ldr	r3, [pc, #76]	@ (800b47c <prvProcessTimerOrBlockTask+0x90>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d101      	bne.n	800b43c <prvProcessTimerOrBlockTask+0x50>
 800b438:	2301      	movs	r3, #1
 800b43a:	e000      	b.n	800b43e <prvProcessTimerOrBlockTask+0x52>
 800b43c:	2300      	movs	r3, #0
 800b43e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b440:	4b0f      	ldr	r3, [pc, #60]	@ (800b480 <prvProcessTimerOrBlockTask+0x94>)
 800b442:	6818      	ldr	r0, [r3, #0]
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	1ad3      	subs	r3, r2, r3
 800b44a:	683a      	ldr	r2, [r7, #0]
 800b44c:	4619      	mov	r1, r3
 800b44e:	f7fe ff93 	bl	800a378 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b452:	f7ff fa17 	bl	800a884 <xTaskResumeAll>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d10a      	bne.n	800b472 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b45c:	4b09      	ldr	r3, [pc, #36]	@ (800b484 <prvProcessTimerOrBlockTask+0x98>)
 800b45e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b462:	601a      	str	r2, [r3, #0]
 800b464:	f3bf 8f4f 	dsb	sy
 800b468:	f3bf 8f6f 	isb	sy
}
 800b46c:	e001      	b.n	800b472 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b46e:	f7ff fa09 	bl	800a884 <xTaskResumeAll>
}
 800b472:	bf00      	nop
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	20002b38 	.word	0x20002b38
 800b480:	20002b3c 	.word	0x20002b3c
 800b484:	e000ed04 	.word	0xe000ed04

0800b488 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b488:	b480      	push	{r7}
 800b48a:	b085      	sub	sp, #20
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b490:	4b0e      	ldr	r3, [pc, #56]	@ (800b4cc <prvGetNextExpireTime+0x44>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d101      	bne.n	800b49e <prvGetNextExpireTime+0x16>
 800b49a:	2201      	movs	r2, #1
 800b49c:	e000      	b.n	800b4a0 <prvGetNextExpireTime+0x18>
 800b49e:	2200      	movs	r2, #0
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d105      	bne.n	800b4b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b4ac:	4b07      	ldr	r3, [pc, #28]	@ (800b4cc <prvGetNextExpireTime+0x44>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	60fb      	str	r3, [r7, #12]
 800b4b6:	e001      	b.n	800b4bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3714      	adds	r7, #20
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop
 800b4cc:	20002b34 	.word	0x20002b34

0800b4d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b4d8:	f7ff fa72 	bl	800a9c0 <xTaskGetTickCount>
 800b4dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b4de:	4b0b      	ldr	r3, [pc, #44]	@ (800b50c <prvSampleTimeNow+0x3c>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	68fa      	ldr	r2, [r7, #12]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d205      	bcs.n	800b4f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b4e8:	f000 f93a 	bl	800b760 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	601a      	str	r2, [r3, #0]
 800b4f2:	e002      	b.n	800b4fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b4fa:	4a04      	ldr	r2, [pc, #16]	@ (800b50c <prvSampleTimeNow+0x3c>)
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b500:	68fb      	ldr	r3, [r7, #12]
}
 800b502:	4618      	mov	r0, r3
 800b504:	3710      	adds	r7, #16
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	20002b44 	.word	0x20002b44

0800b510 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b086      	sub	sp, #24
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	607a      	str	r2, [r7, #4]
 800b51c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b51e:	2300      	movs	r3, #0
 800b520:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	68ba      	ldr	r2, [r7, #8]
 800b526:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	68fa      	ldr	r2, [r7, #12]
 800b52c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b52e:	68ba      	ldr	r2, [r7, #8]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	429a      	cmp	r2, r3
 800b534:	d812      	bhi.n	800b55c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b536:	687a      	ldr	r2, [r7, #4]
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	1ad2      	subs	r2, r2, r3
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	699b      	ldr	r3, [r3, #24]
 800b540:	429a      	cmp	r2, r3
 800b542:	d302      	bcc.n	800b54a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b544:	2301      	movs	r3, #1
 800b546:	617b      	str	r3, [r7, #20]
 800b548:	e01b      	b.n	800b582 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b54a:	4b10      	ldr	r3, [pc, #64]	@ (800b58c <prvInsertTimerInActiveList+0x7c>)
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	3304      	adds	r3, #4
 800b552:	4619      	mov	r1, r3
 800b554:	4610      	mov	r0, r2
 800b556:	f7fe f9e6 	bl	8009926 <vListInsert>
 800b55a:	e012      	b.n	800b582 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	429a      	cmp	r2, r3
 800b562:	d206      	bcs.n	800b572 <prvInsertTimerInActiveList+0x62>
 800b564:	68ba      	ldr	r2, [r7, #8]
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	429a      	cmp	r2, r3
 800b56a:	d302      	bcc.n	800b572 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b56c:	2301      	movs	r3, #1
 800b56e:	617b      	str	r3, [r7, #20]
 800b570:	e007      	b.n	800b582 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b572:	4b07      	ldr	r3, [pc, #28]	@ (800b590 <prvInsertTimerInActiveList+0x80>)
 800b574:	681a      	ldr	r2, [r3, #0]
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	3304      	adds	r3, #4
 800b57a:	4619      	mov	r1, r3
 800b57c:	4610      	mov	r0, r2
 800b57e:	f7fe f9d2 	bl	8009926 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b582:	697b      	ldr	r3, [r7, #20]
}
 800b584:	4618      	mov	r0, r3
 800b586:	3718      	adds	r7, #24
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}
 800b58c:	20002b38 	.word	0x20002b38
 800b590:	20002b34 	.word	0x20002b34

0800b594 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b08e      	sub	sp, #56	@ 0x38
 800b598:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b59a:	e0ce      	b.n	800b73a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	da19      	bge.n	800b5d6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b5a2:	1d3b      	adds	r3, r7, #4
 800b5a4:	3304      	adds	r3, #4
 800b5a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b5a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d10b      	bne.n	800b5c6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5b2:	f383 8811 	msr	BASEPRI, r3
 800b5b6:	f3bf 8f6f 	isb	sy
 800b5ba:	f3bf 8f4f 	dsb	sy
 800b5be:	61fb      	str	r3, [r7, #28]
}
 800b5c0:	bf00      	nop
 800b5c2:	bf00      	nop
 800b5c4:	e7fd      	b.n	800b5c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5cc:	6850      	ldr	r0, [r2, #4]
 800b5ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5d0:	6892      	ldr	r2, [r2, #8]
 800b5d2:	4611      	mov	r1, r2
 800b5d4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	f2c0 80ae 	blt.w	800b73a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b5e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5e4:	695b      	ldr	r3, [r3, #20]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d004      	beq.n	800b5f4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b5ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ec:	3304      	adds	r3, #4
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7fe f9d2 	bl	8009998 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b5f4:	463b      	mov	r3, r7
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7ff ff6a 	bl	800b4d0 <prvSampleTimeNow>
 800b5fc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2b09      	cmp	r3, #9
 800b602:	f200 8097 	bhi.w	800b734 <prvProcessReceivedCommands+0x1a0>
 800b606:	a201      	add	r2, pc, #4	@ (adr r2, 800b60c <prvProcessReceivedCommands+0x78>)
 800b608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b60c:	0800b635 	.word	0x0800b635
 800b610:	0800b635 	.word	0x0800b635
 800b614:	0800b635 	.word	0x0800b635
 800b618:	0800b6ab 	.word	0x0800b6ab
 800b61c:	0800b6bf 	.word	0x0800b6bf
 800b620:	0800b70b 	.word	0x0800b70b
 800b624:	0800b635 	.word	0x0800b635
 800b628:	0800b635 	.word	0x0800b635
 800b62c:	0800b6ab 	.word	0x0800b6ab
 800b630:	0800b6bf 	.word	0x0800b6bf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b636:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b63a:	f043 0301 	orr.w	r3, r3, #1
 800b63e:	b2da      	uxtb	r2, r3
 800b640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b642:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b646:	68ba      	ldr	r2, [r7, #8]
 800b648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b64a:	699b      	ldr	r3, [r3, #24]
 800b64c:	18d1      	adds	r1, r2, r3
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b652:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b654:	f7ff ff5c 	bl	800b510 <prvInsertTimerInActiveList>
 800b658:	4603      	mov	r3, r0
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d06c      	beq.n	800b738 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b65e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b660:	6a1b      	ldr	r3, [r3, #32]
 800b662:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b664:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b668:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b66c:	f003 0304 	and.w	r3, r3, #4
 800b670:	2b00      	cmp	r3, #0
 800b672:	d061      	beq.n	800b738 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b674:	68ba      	ldr	r2, [r7, #8]
 800b676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b678:	699b      	ldr	r3, [r3, #24]
 800b67a:	441a      	add	r2, r3
 800b67c:	2300      	movs	r3, #0
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	2300      	movs	r3, #0
 800b682:	2100      	movs	r1, #0
 800b684:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b686:	f7ff fe01 	bl	800b28c <xTimerGenericCommand>
 800b68a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b68c:	6a3b      	ldr	r3, [r7, #32]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d152      	bne.n	800b738 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b696:	f383 8811 	msr	BASEPRI, r3
 800b69a:	f3bf 8f6f 	isb	sy
 800b69e:	f3bf 8f4f 	dsb	sy
 800b6a2:	61bb      	str	r3, [r7, #24]
}
 800b6a4:	bf00      	nop
 800b6a6:	bf00      	nop
 800b6a8:	e7fd      	b.n	800b6a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b6b0:	f023 0301 	bic.w	r3, r3, #1
 800b6b4:	b2da      	uxtb	r2, r3
 800b6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b6bc:	e03d      	b.n	800b73a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b6be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b6c4:	f043 0301 	orr.w	r3, r3, #1
 800b6c8:	b2da      	uxtb	r2, r3
 800b6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b6d0:	68ba      	ldr	r2, [r7, #8]
 800b6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6d8:	699b      	ldr	r3, [r3, #24]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d10b      	bne.n	800b6f6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b6de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e2:	f383 8811 	msr	BASEPRI, r3
 800b6e6:	f3bf 8f6f 	isb	sy
 800b6ea:	f3bf 8f4f 	dsb	sy
 800b6ee:	617b      	str	r3, [r7, #20]
}
 800b6f0:	bf00      	nop
 800b6f2:	bf00      	nop
 800b6f4:	e7fd      	b.n	800b6f2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6f8:	699a      	ldr	r2, [r3, #24]
 800b6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6fc:	18d1      	adds	r1, r2, r3
 800b6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b702:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b704:	f7ff ff04 	bl	800b510 <prvInsertTimerInActiveList>
					break;
 800b708:	e017      	b.n	800b73a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b70a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b70c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b710:	f003 0302 	and.w	r3, r3, #2
 800b714:	2b00      	cmp	r3, #0
 800b716:	d103      	bne.n	800b720 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b718:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b71a:	f000 fbe5 	bl	800bee8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b71e:	e00c      	b.n	800b73a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b722:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b726:	f023 0301 	bic.w	r3, r3, #1
 800b72a:	b2da      	uxtb	r2, r3
 800b72c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b72e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b732:	e002      	b.n	800b73a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b734:	bf00      	nop
 800b736:	e000      	b.n	800b73a <prvProcessReceivedCommands+0x1a6>
					break;
 800b738:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b73a:	4b08      	ldr	r3, [pc, #32]	@ (800b75c <prvProcessReceivedCommands+0x1c8>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	1d39      	adds	r1, r7, #4
 800b740:	2200      	movs	r2, #0
 800b742:	4618      	mov	r0, r3
 800b744:	f7fe fbfc 	bl	8009f40 <xQueueReceive>
 800b748:	4603      	mov	r3, r0
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	f47f af26 	bne.w	800b59c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b750:	bf00      	nop
 800b752:	bf00      	nop
 800b754:	3730      	adds	r7, #48	@ 0x30
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	20002b3c 	.word	0x20002b3c

0800b760 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b088      	sub	sp, #32
 800b764:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b766:	e049      	b.n	800b7fc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b768:	4b2e      	ldr	r3, [pc, #184]	@ (800b824 <prvSwitchTimerLists+0xc4>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b772:	4b2c      	ldr	r3, [pc, #176]	@ (800b824 <prvSwitchTimerLists+0xc4>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	68db      	ldr	r3, [r3, #12]
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	3304      	adds	r3, #4
 800b780:	4618      	mov	r0, r3
 800b782:	f7fe f909 	bl	8009998 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	6a1b      	ldr	r3, [r3, #32]
 800b78a:	68f8      	ldr	r0, [r7, #12]
 800b78c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b794:	f003 0304 	and.w	r3, r3, #4
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d02f      	beq.n	800b7fc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	699b      	ldr	r3, [r3, #24]
 800b7a0:	693a      	ldr	r2, [r7, #16]
 800b7a2:	4413      	add	r3, r2
 800b7a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b7a6:	68ba      	ldr	r2, [r7, #8]
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d90e      	bls.n	800b7cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	68ba      	ldr	r2, [r7, #8]
 800b7b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b7ba:	4b1a      	ldr	r3, [pc, #104]	@ (800b824 <prvSwitchTimerLists+0xc4>)
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	3304      	adds	r3, #4
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	4610      	mov	r0, r2
 800b7c6:	f7fe f8ae 	bl	8009926 <vListInsert>
 800b7ca:	e017      	b.n	800b7fc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	9300      	str	r3, [sp, #0]
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	693a      	ldr	r2, [r7, #16]
 800b7d4:	2100      	movs	r1, #0
 800b7d6:	68f8      	ldr	r0, [r7, #12]
 800b7d8:	f7ff fd58 	bl	800b28c <xTimerGenericCommand>
 800b7dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d10b      	bne.n	800b7fc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b7e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	603b      	str	r3, [r7, #0]
}
 800b7f6:	bf00      	nop
 800b7f8:	bf00      	nop
 800b7fa:	e7fd      	b.n	800b7f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b7fc:	4b09      	ldr	r3, [pc, #36]	@ (800b824 <prvSwitchTimerLists+0xc4>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d1b0      	bne.n	800b768 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b806:	4b07      	ldr	r3, [pc, #28]	@ (800b824 <prvSwitchTimerLists+0xc4>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b80c:	4b06      	ldr	r3, [pc, #24]	@ (800b828 <prvSwitchTimerLists+0xc8>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4a04      	ldr	r2, [pc, #16]	@ (800b824 <prvSwitchTimerLists+0xc4>)
 800b812:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b814:	4a04      	ldr	r2, [pc, #16]	@ (800b828 <prvSwitchTimerLists+0xc8>)
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	6013      	str	r3, [r2, #0]
}
 800b81a:	bf00      	nop
 800b81c:	3718      	adds	r7, #24
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	20002b34 	.word	0x20002b34
 800b828:	20002b38 	.word	0x20002b38

0800b82c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b832:	f000 f969 	bl	800bb08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b836:	4b15      	ldr	r3, [pc, #84]	@ (800b88c <prvCheckForValidListAndQueue+0x60>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d120      	bne.n	800b880 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b83e:	4814      	ldr	r0, [pc, #80]	@ (800b890 <prvCheckForValidListAndQueue+0x64>)
 800b840:	f7fe f820 	bl	8009884 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b844:	4813      	ldr	r0, [pc, #76]	@ (800b894 <prvCheckForValidListAndQueue+0x68>)
 800b846:	f7fe f81d 	bl	8009884 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b84a:	4b13      	ldr	r3, [pc, #76]	@ (800b898 <prvCheckForValidListAndQueue+0x6c>)
 800b84c:	4a10      	ldr	r2, [pc, #64]	@ (800b890 <prvCheckForValidListAndQueue+0x64>)
 800b84e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b850:	4b12      	ldr	r3, [pc, #72]	@ (800b89c <prvCheckForValidListAndQueue+0x70>)
 800b852:	4a10      	ldr	r2, [pc, #64]	@ (800b894 <prvCheckForValidListAndQueue+0x68>)
 800b854:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b856:	2300      	movs	r3, #0
 800b858:	9300      	str	r3, [sp, #0]
 800b85a:	4b11      	ldr	r3, [pc, #68]	@ (800b8a0 <prvCheckForValidListAndQueue+0x74>)
 800b85c:	4a11      	ldr	r2, [pc, #68]	@ (800b8a4 <prvCheckForValidListAndQueue+0x78>)
 800b85e:	2110      	movs	r1, #16
 800b860:	200a      	movs	r0, #10
 800b862:	f7fe f92d 	bl	8009ac0 <xQueueGenericCreateStatic>
 800b866:	4603      	mov	r3, r0
 800b868:	4a08      	ldr	r2, [pc, #32]	@ (800b88c <prvCheckForValidListAndQueue+0x60>)
 800b86a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b86c:	4b07      	ldr	r3, [pc, #28]	@ (800b88c <prvCheckForValidListAndQueue+0x60>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d005      	beq.n	800b880 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b874:	4b05      	ldr	r3, [pc, #20]	@ (800b88c <prvCheckForValidListAndQueue+0x60>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	490b      	ldr	r1, [pc, #44]	@ (800b8a8 <prvCheckForValidListAndQueue+0x7c>)
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7fe fd52 	bl	800a324 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b880:	f000 f974 	bl	800bb6c <vPortExitCritical>
}
 800b884:	bf00      	nop
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	20002b3c 	.word	0x20002b3c
 800b890:	20002b0c 	.word	0x20002b0c
 800b894:	20002b20 	.word	0x20002b20
 800b898:	20002b34 	.word	0x20002b34
 800b89c:	20002b38 	.word	0x20002b38
 800b8a0:	20002be8 	.word	0x20002be8
 800b8a4:	20002b48 	.word	0x20002b48
 800b8a8:	08010d48 	.word	0x08010d48

0800b8ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b085      	sub	sp, #20
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	3b04      	subs	r3, #4
 800b8bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b8c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	3b04      	subs	r3, #4
 800b8ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	f023 0201 	bic.w	r2, r3, #1
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	3b04      	subs	r3, #4
 800b8da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b8dc:	4a0c      	ldr	r2, [pc, #48]	@ (800b910 <pxPortInitialiseStack+0x64>)
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	3b14      	subs	r3, #20
 800b8e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	3b04      	subs	r3, #4
 800b8f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f06f 0202 	mvn.w	r2, #2
 800b8fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	3b20      	subs	r3, #32
 800b900:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b902:	68fb      	ldr	r3, [r7, #12]
}
 800b904:	4618      	mov	r0, r3
 800b906:	3714      	adds	r7, #20
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr
 800b910:	0800b915 	.word	0x0800b915

0800b914 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b914:	b480      	push	{r7}
 800b916:	b085      	sub	sp, #20
 800b918:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b91a:	2300      	movs	r3, #0
 800b91c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b91e:	4b13      	ldr	r3, [pc, #76]	@ (800b96c <prvTaskExitError+0x58>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b926:	d00b      	beq.n	800b940 <prvTaskExitError+0x2c>
	__asm volatile
 800b928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b92c:	f383 8811 	msr	BASEPRI, r3
 800b930:	f3bf 8f6f 	isb	sy
 800b934:	f3bf 8f4f 	dsb	sy
 800b938:	60fb      	str	r3, [r7, #12]
}
 800b93a:	bf00      	nop
 800b93c:	bf00      	nop
 800b93e:	e7fd      	b.n	800b93c <prvTaskExitError+0x28>
	__asm volatile
 800b940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b944:	f383 8811 	msr	BASEPRI, r3
 800b948:	f3bf 8f6f 	isb	sy
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	60bb      	str	r3, [r7, #8]
}
 800b952:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b954:	bf00      	nop
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d0fc      	beq.n	800b956 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b95c:	bf00      	nop
 800b95e:	bf00      	nop
 800b960:	3714      	adds	r7, #20
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr
 800b96a:	bf00      	nop
 800b96c:	20000058 	.word	0x20000058

0800b970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b970:	4b07      	ldr	r3, [pc, #28]	@ (800b990 <pxCurrentTCBConst2>)
 800b972:	6819      	ldr	r1, [r3, #0]
 800b974:	6808      	ldr	r0, [r1, #0]
 800b976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b97a:	f380 8809 	msr	PSP, r0
 800b97e:	f3bf 8f6f 	isb	sy
 800b982:	f04f 0000 	mov.w	r0, #0
 800b986:	f380 8811 	msr	BASEPRI, r0
 800b98a:	4770      	bx	lr
 800b98c:	f3af 8000 	nop.w

0800b990 <pxCurrentTCBConst2>:
 800b990:	2000260c 	.word	0x2000260c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b994:	bf00      	nop
 800b996:	bf00      	nop

0800b998 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b998:	4808      	ldr	r0, [pc, #32]	@ (800b9bc <prvPortStartFirstTask+0x24>)
 800b99a:	6800      	ldr	r0, [r0, #0]
 800b99c:	6800      	ldr	r0, [r0, #0]
 800b99e:	f380 8808 	msr	MSP, r0
 800b9a2:	f04f 0000 	mov.w	r0, #0
 800b9a6:	f380 8814 	msr	CONTROL, r0
 800b9aa:	b662      	cpsie	i
 800b9ac:	b661      	cpsie	f
 800b9ae:	f3bf 8f4f 	dsb	sy
 800b9b2:	f3bf 8f6f 	isb	sy
 800b9b6:	df00      	svc	0
 800b9b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b9ba:	bf00      	nop
 800b9bc:	e000ed08 	.word	0xe000ed08

0800b9c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b086      	sub	sp, #24
 800b9c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b9c6:	4b47      	ldr	r3, [pc, #284]	@ (800bae4 <xPortStartScheduler+0x124>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	4a47      	ldr	r2, [pc, #284]	@ (800bae8 <xPortStartScheduler+0x128>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d10b      	bne.n	800b9e8 <xPortStartScheduler+0x28>
	__asm volatile
 800b9d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9d4:	f383 8811 	msr	BASEPRI, r3
 800b9d8:	f3bf 8f6f 	isb	sy
 800b9dc:	f3bf 8f4f 	dsb	sy
 800b9e0:	613b      	str	r3, [r7, #16]
}
 800b9e2:	bf00      	nop
 800b9e4:	bf00      	nop
 800b9e6:	e7fd      	b.n	800b9e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b9e8:	4b3e      	ldr	r3, [pc, #248]	@ (800bae4 <xPortStartScheduler+0x124>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a3f      	ldr	r2, [pc, #252]	@ (800baec <xPortStartScheduler+0x12c>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d10b      	bne.n	800ba0a <xPortStartScheduler+0x4a>
	__asm volatile
 800b9f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9f6:	f383 8811 	msr	BASEPRI, r3
 800b9fa:	f3bf 8f6f 	isb	sy
 800b9fe:	f3bf 8f4f 	dsb	sy
 800ba02:	60fb      	str	r3, [r7, #12]
}
 800ba04:	bf00      	nop
 800ba06:	bf00      	nop
 800ba08:	e7fd      	b.n	800ba06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ba0a:	4b39      	ldr	r3, [pc, #228]	@ (800baf0 <xPortStartScheduler+0x130>)
 800ba0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	22ff      	movs	r2, #255	@ 0xff
 800ba1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba24:	78fb      	ldrb	r3, [r7, #3]
 800ba26:	b2db      	uxtb	r3, r3
 800ba28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ba2c:	b2da      	uxtb	r2, r3
 800ba2e:	4b31      	ldr	r3, [pc, #196]	@ (800baf4 <xPortStartScheduler+0x134>)
 800ba30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ba32:	4b31      	ldr	r3, [pc, #196]	@ (800baf8 <xPortStartScheduler+0x138>)
 800ba34:	2207      	movs	r2, #7
 800ba36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba38:	e009      	b.n	800ba4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ba3a:	4b2f      	ldr	r3, [pc, #188]	@ (800baf8 <xPortStartScheduler+0x138>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	3b01      	subs	r3, #1
 800ba40:	4a2d      	ldr	r2, [pc, #180]	@ (800baf8 <xPortStartScheduler+0x138>)
 800ba42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ba44:	78fb      	ldrb	r3, [r7, #3]
 800ba46:	b2db      	uxtb	r3, r3
 800ba48:	005b      	lsls	r3, r3, #1
 800ba4a:	b2db      	uxtb	r3, r3
 800ba4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba4e:	78fb      	ldrb	r3, [r7, #3]
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba56:	2b80      	cmp	r3, #128	@ 0x80
 800ba58:	d0ef      	beq.n	800ba3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ba5a:	4b27      	ldr	r3, [pc, #156]	@ (800baf8 <xPortStartScheduler+0x138>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f1c3 0307 	rsb	r3, r3, #7
 800ba62:	2b04      	cmp	r3, #4
 800ba64:	d00b      	beq.n	800ba7e <xPortStartScheduler+0xbe>
	__asm volatile
 800ba66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba6a:	f383 8811 	msr	BASEPRI, r3
 800ba6e:	f3bf 8f6f 	isb	sy
 800ba72:	f3bf 8f4f 	dsb	sy
 800ba76:	60bb      	str	r3, [r7, #8]
}
 800ba78:	bf00      	nop
 800ba7a:	bf00      	nop
 800ba7c:	e7fd      	b.n	800ba7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ba7e:	4b1e      	ldr	r3, [pc, #120]	@ (800baf8 <xPortStartScheduler+0x138>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	021b      	lsls	r3, r3, #8
 800ba84:	4a1c      	ldr	r2, [pc, #112]	@ (800baf8 <xPortStartScheduler+0x138>)
 800ba86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ba88:	4b1b      	ldr	r3, [pc, #108]	@ (800baf8 <xPortStartScheduler+0x138>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ba90:	4a19      	ldr	r2, [pc, #100]	@ (800baf8 <xPortStartScheduler+0x138>)
 800ba92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	b2da      	uxtb	r2, r3
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ba9c:	4b17      	ldr	r3, [pc, #92]	@ (800bafc <xPortStartScheduler+0x13c>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4a16      	ldr	r2, [pc, #88]	@ (800bafc <xPortStartScheduler+0x13c>)
 800baa2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800baa6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800baa8:	4b14      	ldr	r3, [pc, #80]	@ (800bafc <xPortStartScheduler+0x13c>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4a13      	ldr	r2, [pc, #76]	@ (800bafc <xPortStartScheduler+0x13c>)
 800baae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bab2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bab4:	f000 f8da 	bl	800bc6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bab8:	4b11      	ldr	r3, [pc, #68]	@ (800bb00 <xPortStartScheduler+0x140>)
 800baba:	2200      	movs	r2, #0
 800babc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800babe:	f000 f8f9 	bl	800bcb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bac2:	4b10      	ldr	r3, [pc, #64]	@ (800bb04 <xPortStartScheduler+0x144>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4a0f      	ldr	r2, [pc, #60]	@ (800bb04 <xPortStartScheduler+0x144>)
 800bac8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bacc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bace:	f7ff ff63 	bl	800b998 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bad2:	f7ff f83f 	bl	800ab54 <vTaskSwitchContext>
	prvTaskExitError();
 800bad6:	f7ff ff1d 	bl	800b914 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bada:	2300      	movs	r3, #0
}
 800badc:	4618      	mov	r0, r3
 800bade:	3718      	adds	r7, #24
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	e000ed00 	.word	0xe000ed00
 800bae8:	410fc271 	.word	0x410fc271
 800baec:	410fc270 	.word	0x410fc270
 800baf0:	e000e400 	.word	0xe000e400
 800baf4:	20002c38 	.word	0x20002c38
 800baf8:	20002c3c 	.word	0x20002c3c
 800bafc:	e000ed20 	.word	0xe000ed20
 800bb00:	20000058 	.word	0x20000058
 800bb04:	e000ef34 	.word	0xe000ef34

0800bb08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b083      	sub	sp, #12
 800bb0c:	af00      	add	r7, sp, #0
	__asm volatile
 800bb0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb12:	f383 8811 	msr	BASEPRI, r3
 800bb16:	f3bf 8f6f 	isb	sy
 800bb1a:	f3bf 8f4f 	dsb	sy
 800bb1e:	607b      	str	r3, [r7, #4]
}
 800bb20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bb22:	4b10      	ldr	r3, [pc, #64]	@ (800bb64 <vPortEnterCritical+0x5c>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	3301      	adds	r3, #1
 800bb28:	4a0e      	ldr	r2, [pc, #56]	@ (800bb64 <vPortEnterCritical+0x5c>)
 800bb2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bb2c:	4b0d      	ldr	r3, [pc, #52]	@ (800bb64 <vPortEnterCritical+0x5c>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d110      	bne.n	800bb56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bb34:	4b0c      	ldr	r3, [pc, #48]	@ (800bb68 <vPortEnterCritical+0x60>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00b      	beq.n	800bb56 <vPortEnterCritical+0x4e>
	__asm volatile
 800bb3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb42:	f383 8811 	msr	BASEPRI, r3
 800bb46:	f3bf 8f6f 	isb	sy
 800bb4a:	f3bf 8f4f 	dsb	sy
 800bb4e:	603b      	str	r3, [r7, #0]
}
 800bb50:	bf00      	nop
 800bb52:	bf00      	nop
 800bb54:	e7fd      	b.n	800bb52 <vPortEnterCritical+0x4a>
	}
}
 800bb56:	bf00      	nop
 800bb58:	370c      	adds	r7, #12
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr
 800bb62:	bf00      	nop
 800bb64:	20000058 	.word	0x20000058
 800bb68:	e000ed04 	.word	0xe000ed04

0800bb6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bb72:	4b12      	ldr	r3, [pc, #72]	@ (800bbbc <vPortExitCritical+0x50>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d10b      	bne.n	800bb92 <vPortExitCritical+0x26>
	__asm volatile
 800bb7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb7e:	f383 8811 	msr	BASEPRI, r3
 800bb82:	f3bf 8f6f 	isb	sy
 800bb86:	f3bf 8f4f 	dsb	sy
 800bb8a:	607b      	str	r3, [r7, #4]
}
 800bb8c:	bf00      	nop
 800bb8e:	bf00      	nop
 800bb90:	e7fd      	b.n	800bb8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bb92:	4b0a      	ldr	r3, [pc, #40]	@ (800bbbc <vPortExitCritical+0x50>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	3b01      	subs	r3, #1
 800bb98:	4a08      	ldr	r2, [pc, #32]	@ (800bbbc <vPortExitCritical+0x50>)
 800bb9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bb9c:	4b07      	ldr	r3, [pc, #28]	@ (800bbbc <vPortExitCritical+0x50>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d105      	bne.n	800bbb0 <vPortExitCritical+0x44>
 800bba4:	2300      	movs	r3, #0
 800bba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	f383 8811 	msr	BASEPRI, r3
}
 800bbae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bbb0:	bf00      	nop
 800bbb2:	370c      	adds	r7, #12
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr
 800bbbc:	20000058 	.word	0x20000058

0800bbc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bbc0:	f3ef 8009 	mrs	r0, PSP
 800bbc4:	f3bf 8f6f 	isb	sy
 800bbc8:	4b15      	ldr	r3, [pc, #84]	@ (800bc20 <pxCurrentTCBConst>)
 800bbca:	681a      	ldr	r2, [r3, #0]
 800bbcc:	f01e 0f10 	tst.w	lr, #16
 800bbd0:	bf08      	it	eq
 800bbd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bbd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbda:	6010      	str	r0, [r2, #0]
 800bbdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bbe0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bbe4:	f380 8811 	msr	BASEPRI, r0
 800bbe8:	f3bf 8f4f 	dsb	sy
 800bbec:	f3bf 8f6f 	isb	sy
 800bbf0:	f7fe ffb0 	bl	800ab54 <vTaskSwitchContext>
 800bbf4:	f04f 0000 	mov.w	r0, #0
 800bbf8:	f380 8811 	msr	BASEPRI, r0
 800bbfc:	bc09      	pop	{r0, r3}
 800bbfe:	6819      	ldr	r1, [r3, #0]
 800bc00:	6808      	ldr	r0, [r1, #0]
 800bc02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc06:	f01e 0f10 	tst.w	lr, #16
 800bc0a:	bf08      	it	eq
 800bc0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bc10:	f380 8809 	msr	PSP, r0
 800bc14:	f3bf 8f6f 	isb	sy
 800bc18:	4770      	bx	lr
 800bc1a:	bf00      	nop
 800bc1c:	f3af 8000 	nop.w

0800bc20 <pxCurrentTCBConst>:
 800bc20:	2000260c 	.word	0x2000260c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bc24:	bf00      	nop
 800bc26:	bf00      	nop

0800bc28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
	__asm volatile
 800bc2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc32:	f383 8811 	msr	BASEPRI, r3
 800bc36:	f3bf 8f6f 	isb	sy
 800bc3a:	f3bf 8f4f 	dsb	sy
 800bc3e:	607b      	str	r3, [r7, #4]
}
 800bc40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bc42:	f7fe fecd 	bl	800a9e0 <xTaskIncrementTick>
 800bc46:	4603      	mov	r3, r0
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d003      	beq.n	800bc54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bc4c:	4b06      	ldr	r3, [pc, #24]	@ (800bc68 <xPortSysTickHandler+0x40>)
 800bc4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc52:	601a      	str	r2, [r3, #0]
 800bc54:	2300      	movs	r3, #0
 800bc56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	f383 8811 	msr	BASEPRI, r3
}
 800bc5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bc60:	bf00      	nop
 800bc62:	3708      	adds	r7, #8
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	e000ed04 	.word	0xe000ed04

0800bc6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bc70:	4b0b      	ldr	r3, [pc, #44]	@ (800bca0 <vPortSetupTimerInterrupt+0x34>)
 800bc72:	2200      	movs	r2, #0
 800bc74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bc76:	4b0b      	ldr	r3, [pc, #44]	@ (800bca4 <vPortSetupTimerInterrupt+0x38>)
 800bc78:	2200      	movs	r2, #0
 800bc7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bc7c:	4b0a      	ldr	r3, [pc, #40]	@ (800bca8 <vPortSetupTimerInterrupt+0x3c>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a0a      	ldr	r2, [pc, #40]	@ (800bcac <vPortSetupTimerInterrupt+0x40>)
 800bc82:	fba2 2303 	umull	r2, r3, r2, r3
 800bc86:	099b      	lsrs	r3, r3, #6
 800bc88:	4a09      	ldr	r2, [pc, #36]	@ (800bcb0 <vPortSetupTimerInterrupt+0x44>)
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bc8e:	4b04      	ldr	r3, [pc, #16]	@ (800bca0 <vPortSetupTimerInterrupt+0x34>)
 800bc90:	2207      	movs	r2, #7
 800bc92:	601a      	str	r2, [r3, #0]
}
 800bc94:	bf00      	nop
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr
 800bc9e:	bf00      	nop
 800bca0:	e000e010 	.word	0xe000e010
 800bca4:	e000e018 	.word	0xe000e018
 800bca8:	20000008 	.word	0x20000008
 800bcac:	10624dd3 	.word	0x10624dd3
 800bcb0:	e000e014 	.word	0xe000e014

0800bcb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bcb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bcc4 <vPortEnableVFP+0x10>
 800bcb8:	6801      	ldr	r1, [r0, #0]
 800bcba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bcbe:	6001      	str	r1, [r0, #0]
 800bcc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bcc2:	bf00      	nop
 800bcc4:	e000ed88 	.word	0xe000ed88

0800bcc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bcc8:	b480      	push	{r7}
 800bcca:	b085      	sub	sp, #20
 800bccc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bcce:	f3ef 8305 	mrs	r3, IPSR
 800bcd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2b0f      	cmp	r3, #15
 800bcd8:	d915      	bls.n	800bd06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bcda:	4a18      	ldr	r2, [pc, #96]	@ (800bd3c <vPortValidateInterruptPriority+0x74>)
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	4413      	add	r3, r2
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bce4:	4b16      	ldr	r3, [pc, #88]	@ (800bd40 <vPortValidateInterruptPriority+0x78>)
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	7afa      	ldrb	r2, [r7, #11]
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d20b      	bcs.n	800bd06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bcee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf2:	f383 8811 	msr	BASEPRI, r3
 800bcf6:	f3bf 8f6f 	isb	sy
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	607b      	str	r3, [r7, #4]
}
 800bd00:	bf00      	nop
 800bd02:	bf00      	nop
 800bd04:	e7fd      	b.n	800bd02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bd06:	4b0f      	ldr	r3, [pc, #60]	@ (800bd44 <vPortValidateInterruptPriority+0x7c>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bd0e:	4b0e      	ldr	r3, [pc, #56]	@ (800bd48 <vPortValidateInterruptPriority+0x80>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d90b      	bls.n	800bd2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bd16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd1a:	f383 8811 	msr	BASEPRI, r3
 800bd1e:	f3bf 8f6f 	isb	sy
 800bd22:	f3bf 8f4f 	dsb	sy
 800bd26:	603b      	str	r3, [r7, #0]
}
 800bd28:	bf00      	nop
 800bd2a:	bf00      	nop
 800bd2c:	e7fd      	b.n	800bd2a <vPortValidateInterruptPriority+0x62>
	}
 800bd2e:	bf00      	nop
 800bd30:	3714      	adds	r7, #20
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr
 800bd3a:	bf00      	nop
 800bd3c:	e000e3f0 	.word	0xe000e3f0
 800bd40:	20002c38 	.word	0x20002c38
 800bd44:	e000ed0c 	.word	0xe000ed0c
 800bd48:	20002c3c 	.word	0x20002c3c

0800bd4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b08a      	sub	sp, #40	@ 0x28
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bd54:	2300      	movs	r3, #0
 800bd56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bd58:	f7fe fd86 	bl	800a868 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bd5c:	4b5c      	ldr	r3, [pc, #368]	@ (800bed0 <pvPortMalloc+0x184>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d101      	bne.n	800bd68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bd64:	f000 f924 	bl	800bfb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bd68:	4b5a      	ldr	r3, [pc, #360]	@ (800bed4 <pvPortMalloc+0x188>)
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	4013      	ands	r3, r2
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f040 8095 	bne.w	800bea0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d01e      	beq.n	800bdba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bd7c:	2208      	movs	r2, #8
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4413      	add	r3, r2
 800bd82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f003 0307 	and.w	r3, r3, #7
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d015      	beq.n	800bdba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f023 0307 	bic.w	r3, r3, #7
 800bd94:	3308      	adds	r3, #8
 800bd96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f003 0307 	and.w	r3, r3, #7
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d00b      	beq.n	800bdba <pvPortMalloc+0x6e>
	__asm volatile
 800bda2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bda6:	f383 8811 	msr	BASEPRI, r3
 800bdaa:	f3bf 8f6f 	isb	sy
 800bdae:	f3bf 8f4f 	dsb	sy
 800bdb2:	617b      	str	r3, [r7, #20]
}
 800bdb4:	bf00      	nop
 800bdb6:	bf00      	nop
 800bdb8:	e7fd      	b.n	800bdb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d06f      	beq.n	800bea0 <pvPortMalloc+0x154>
 800bdc0:	4b45      	ldr	r3, [pc, #276]	@ (800bed8 <pvPortMalloc+0x18c>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d86a      	bhi.n	800bea0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bdca:	4b44      	ldr	r3, [pc, #272]	@ (800bedc <pvPortMalloc+0x190>)
 800bdcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bdce:	4b43      	ldr	r3, [pc, #268]	@ (800bedc <pvPortMalloc+0x190>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bdd4:	e004      	b.n	800bde0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bdd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bdda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bde0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d903      	bls.n	800bdf2 <pvPortMalloc+0xa6>
 800bdea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d1f1      	bne.n	800bdd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bdf2:	4b37      	ldr	r3, [pc, #220]	@ (800bed0 <pvPortMalloc+0x184>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d051      	beq.n	800bea0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bdfc:	6a3b      	ldr	r3, [r7, #32]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	2208      	movs	r2, #8
 800be02:	4413      	add	r3, r2
 800be04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800be06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	6a3b      	ldr	r3, [r7, #32]
 800be0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800be0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be10:	685a      	ldr	r2, [r3, #4]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	1ad2      	subs	r2, r2, r3
 800be16:	2308      	movs	r3, #8
 800be18:	005b      	lsls	r3, r3, #1
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d920      	bls.n	800be60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800be1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	4413      	add	r3, r2
 800be24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be26:	69bb      	ldr	r3, [r7, #24]
 800be28:	f003 0307 	and.w	r3, r3, #7
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d00b      	beq.n	800be48 <pvPortMalloc+0xfc>
	__asm volatile
 800be30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be34:	f383 8811 	msr	BASEPRI, r3
 800be38:	f3bf 8f6f 	isb	sy
 800be3c:	f3bf 8f4f 	dsb	sy
 800be40:	613b      	str	r3, [r7, #16]
}
 800be42:	bf00      	nop
 800be44:	bf00      	nop
 800be46:	e7fd      	b.n	800be44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800be48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be4a:	685a      	ldr	r2, [r3, #4]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	1ad2      	subs	r2, r2, r3
 800be50:	69bb      	ldr	r3, [r7, #24]
 800be52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800be54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be56:	687a      	ldr	r2, [r7, #4]
 800be58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800be5a:	69b8      	ldr	r0, [r7, #24]
 800be5c:	f000 f90a 	bl	800c074 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800be60:	4b1d      	ldr	r3, [pc, #116]	@ (800bed8 <pvPortMalloc+0x18c>)
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	1ad3      	subs	r3, r2, r3
 800be6a:	4a1b      	ldr	r2, [pc, #108]	@ (800bed8 <pvPortMalloc+0x18c>)
 800be6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800be6e:	4b1a      	ldr	r3, [pc, #104]	@ (800bed8 <pvPortMalloc+0x18c>)
 800be70:	681a      	ldr	r2, [r3, #0]
 800be72:	4b1b      	ldr	r3, [pc, #108]	@ (800bee0 <pvPortMalloc+0x194>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	429a      	cmp	r2, r3
 800be78:	d203      	bcs.n	800be82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800be7a:	4b17      	ldr	r3, [pc, #92]	@ (800bed8 <pvPortMalloc+0x18c>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	4a18      	ldr	r2, [pc, #96]	@ (800bee0 <pvPortMalloc+0x194>)
 800be80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800be82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be84:	685a      	ldr	r2, [r3, #4]
 800be86:	4b13      	ldr	r3, [pc, #76]	@ (800bed4 <pvPortMalloc+0x188>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	431a      	orrs	r2, r3
 800be8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800be90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be92:	2200      	movs	r2, #0
 800be94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800be96:	4b13      	ldr	r3, [pc, #76]	@ (800bee4 <pvPortMalloc+0x198>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	3301      	adds	r3, #1
 800be9c:	4a11      	ldr	r2, [pc, #68]	@ (800bee4 <pvPortMalloc+0x198>)
 800be9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bea0:	f7fe fcf0 	bl	800a884 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	f003 0307 	and.w	r3, r3, #7
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00b      	beq.n	800bec6 <pvPortMalloc+0x17a>
	__asm volatile
 800beae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb2:	f383 8811 	msr	BASEPRI, r3
 800beb6:	f3bf 8f6f 	isb	sy
 800beba:	f3bf 8f4f 	dsb	sy
 800bebe:	60fb      	str	r3, [r7, #12]
}
 800bec0:	bf00      	nop
 800bec2:	bf00      	nop
 800bec4:	e7fd      	b.n	800bec2 <pvPortMalloc+0x176>
	return pvReturn;
 800bec6:	69fb      	ldr	r3, [r7, #28]
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3728      	adds	r7, #40	@ 0x28
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}
 800bed0:	20003800 	.word	0x20003800
 800bed4:	20003814 	.word	0x20003814
 800bed8:	20003804 	.word	0x20003804
 800bedc:	200037f8 	.word	0x200037f8
 800bee0:	20003808 	.word	0x20003808
 800bee4:	2000380c 	.word	0x2000380c

0800bee8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b086      	sub	sp, #24
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d04f      	beq.n	800bf9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800befa:	2308      	movs	r3, #8
 800befc:	425b      	negs	r3, r3
 800befe:	697a      	ldr	r2, [r7, #20]
 800bf00:	4413      	add	r3, r2
 800bf02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	685a      	ldr	r2, [r3, #4]
 800bf0c:	4b25      	ldr	r3, [pc, #148]	@ (800bfa4 <vPortFree+0xbc>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4013      	ands	r3, r2
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d10b      	bne.n	800bf2e <vPortFree+0x46>
	__asm volatile
 800bf16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf1a:	f383 8811 	msr	BASEPRI, r3
 800bf1e:	f3bf 8f6f 	isb	sy
 800bf22:	f3bf 8f4f 	dsb	sy
 800bf26:	60fb      	str	r3, [r7, #12]
}
 800bf28:	bf00      	nop
 800bf2a:	bf00      	nop
 800bf2c:	e7fd      	b.n	800bf2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d00b      	beq.n	800bf4e <vPortFree+0x66>
	__asm volatile
 800bf36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf3a:	f383 8811 	msr	BASEPRI, r3
 800bf3e:	f3bf 8f6f 	isb	sy
 800bf42:	f3bf 8f4f 	dsb	sy
 800bf46:	60bb      	str	r3, [r7, #8]
}
 800bf48:	bf00      	nop
 800bf4a:	bf00      	nop
 800bf4c:	e7fd      	b.n	800bf4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	685a      	ldr	r2, [r3, #4]
 800bf52:	4b14      	ldr	r3, [pc, #80]	@ (800bfa4 <vPortFree+0xbc>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4013      	ands	r3, r2
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d01e      	beq.n	800bf9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d11a      	bne.n	800bf9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	685a      	ldr	r2, [r3, #4]
 800bf68:	4b0e      	ldr	r3, [pc, #56]	@ (800bfa4 <vPortFree+0xbc>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	43db      	mvns	r3, r3
 800bf6e:	401a      	ands	r2, r3
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bf74:	f7fe fc78 	bl	800a868 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	685a      	ldr	r2, [r3, #4]
 800bf7c:	4b0a      	ldr	r3, [pc, #40]	@ (800bfa8 <vPortFree+0xc0>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4413      	add	r3, r2
 800bf82:	4a09      	ldr	r2, [pc, #36]	@ (800bfa8 <vPortFree+0xc0>)
 800bf84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bf86:	6938      	ldr	r0, [r7, #16]
 800bf88:	f000 f874 	bl	800c074 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bf8c:	4b07      	ldr	r3, [pc, #28]	@ (800bfac <vPortFree+0xc4>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	3301      	adds	r3, #1
 800bf92:	4a06      	ldr	r2, [pc, #24]	@ (800bfac <vPortFree+0xc4>)
 800bf94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bf96:	f7fe fc75 	bl	800a884 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bf9a:	bf00      	nop
 800bf9c:	3718      	adds	r7, #24
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	20003814 	.word	0x20003814
 800bfa8:	20003804 	.word	0x20003804
 800bfac:	20003810 	.word	0x20003810

0800bfb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b085      	sub	sp, #20
 800bfb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bfb6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800bfba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bfbc:	4b27      	ldr	r3, [pc, #156]	@ (800c05c <prvHeapInit+0xac>)
 800bfbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f003 0307 	and.w	r3, r3, #7
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d00c      	beq.n	800bfe4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	3307      	adds	r3, #7
 800bfce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	f023 0307 	bic.w	r3, r3, #7
 800bfd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bfd8:	68ba      	ldr	r2, [r7, #8]
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	1ad3      	subs	r3, r2, r3
 800bfde:	4a1f      	ldr	r2, [pc, #124]	@ (800c05c <prvHeapInit+0xac>)
 800bfe0:	4413      	add	r3, r2
 800bfe2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bfe8:	4a1d      	ldr	r2, [pc, #116]	@ (800c060 <prvHeapInit+0xb0>)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bfee:	4b1c      	ldr	r3, [pc, #112]	@ (800c060 <prvHeapInit+0xb0>)
 800bff0:	2200      	movs	r2, #0
 800bff2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	68ba      	ldr	r2, [r7, #8]
 800bff8:	4413      	add	r3, r2
 800bffa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bffc:	2208      	movs	r2, #8
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	1a9b      	subs	r3, r3, r2
 800c002:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f023 0307 	bic.w	r3, r3, #7
 800c00a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	4a15      	ldr	r2, [pc, #84]	@ (800c064 <prvHeapInit+0xb4>)
 800c010:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c012:	4b14      	ldr	r3, [pc, #80]	@ (800c064 <prvHeapInit+0xb4>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	2200      	movs	r2, #0
 800c018:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c01a:	4b12      	ldr	r3, [pc, #72]	@ (800c064 <prvHeapInit+0xb4>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	2200      	movs	r2, #0
 800c020:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	1ad2      	subs	r2, r2, r3
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c030:	4b0c      	ldr	r3, [pc, #48]	@ (800c064 <prvHeapInit+0xb4>)
 800c032:	681a      	ldr	r2, [r3, #0]
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	4a0a      	ldr	r2, [pc, #40]	@ (800c068 <prvHeapInit+0xb8>)
 800c03e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	685b      	ldr	r3, [r3, #4]
 800c044:	4a09      	ldr	r2, [pc, #36]	@ (800c06c <prvHeapInit+0xbc>)
 800c046:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c048:	4b09      	ldr	r3, [pc, #36]	@ (800c070 <prvHeapInit+0xc0>)
 800c04a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c04e:	601a      	str	r2, [r3, #0]
}
 800c050:	bf00      	nop
 800c052:	3714      	adds	r7, #20
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr
 800c05c:	20002c40 	.word	0x20002c40
 800c060:	200037f8 	.word	0x200037f8
 800c064:	20003800 	.word	0x20003800
 800c068:	20003808 	.word	0x20003808
 800c06c:	20003804 	.word	0x20003804
 800c070:	20003814 	.word	0x20003814

0800c074 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c074:	b480      	push	{r7}
 800c076:	b085      	sub	sp, #20
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c07c:	4b28      	ldr	r3, [pc, #160]	@ (800c120 <prvInsertBlockIntoFreeList+0xac>)
 800c07e:	60fb      	str	r3, [r7, #12]
 800c080:	e002      	b.n	800c088 <prvInsertBlockIntoFreeList+0x14>
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	60fb      	str	r3, [r7, #12]
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	687a      	ldr	r2, [r7, #4]
 800c08e:	429a      	cmp	r2, r3
 800c090:	d8f7      	bhi.n	800c082 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	685b      	ldr	r3, [r3, #4]
 800c09a:	68ba      	ldr	r2, [r7, #8]
 800c09c:	4413      	add	r3, r2
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d108      	bne.n	800c0b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	685a      	ldr	r2, [r3, #4]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	441a      	add	r2, r3
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	68ba      	ldr	r2, [r7, #8]
 800c0c0:	441a      	add	r2, r3
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d118      	bne.n	800c0fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	4b15      	ldr	r3, [pc, #84]	@ (800c124 <prvInsertBlockIntoFreeList+0xb0>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d00d      	beq.n	800c0f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	685a      	ldr	r2, [r3, #4]
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	441a      	add	r2, r3
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	681a      	ldr	r2, [r3, #0]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	601a      	str	r2, [r3, #0]
 800c0f0:	e008      	b.n	800c104 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c0f2:	4b0c      	ldr	r3, [pc, #48]	@ (800c124 <prvInsertBlockIntoFreeList+0xb0>)
 800c0f4:	681a      	ldr	r2, [r3, #0]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	601a      	str	r2, [r3, #0]
 800c0fa:	e003      	b.n	800c104 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c104:	68fa      	ldr	r2, [r7, #12]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	429a      	cmp	r2, r3
 800c10a:	d002      	beq.n	800c112 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c112:	bf00      	nop
 800c114:	3714      	adds	r7, #20
 800c116:	46bd      	mov	sp, r7
 800c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11c:	4770      	bx	lr
 800c11e:	bf00      	nop
 800c120:	200037f8 	.word	0x200037f8
 800c124:	20003800 	.word	0x20003800

0800c128 <__cvt>:
 800c128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c12c:	ec57 6b10 	vmov	r6, r7, d0
 800c130:	2f00      	cmp	r7, #0
 800c132:	460c      	mov	r4, r1
 800c134:	4619      	mov	r1, r3
 800c136:	463b      	mov	r3, r7
 800c138:	bfbb      	ittet	lt
 800c13a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c13e:	461f      	movlt	r7, r3
 800c140:	2300      	movge	r3, #0
 800c142:	232d      	movlt	r3, #45	@ 0x2d
 800c144:	700b      	strb	r3, [r1, #0]
 800c146:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c148:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c14c:	4691      	mov	r9, r2
 800c14e:	f023 0820 	bic.w	r8, r3, #32
 800c152:	bfbc      	itt	lt
 800c154:	4632      	movlt	r2, r6
 800c156:	4616      	movlt	r6, r2
 800c158:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c15c:	d005      	beq.n	800c16a <__cvt+0x42>
 800c15e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c162:	d100      	bne.n	800c166 <__cvt+0x3e>
 800c164:	3401      	adds	r4, #1
 800c166:	2102      	movs	r1, #2
 800c168:	e000      	b.n	800c16c <__cvt+0x44>
 800c16a:	2103      	movs	r1, #3
 800c16c:	ab03      	add	r3, sp, #12
 800c16e:	9301      	str	r3, [sp, #4]
 800c170:	ab02      	add	r3, sp, #8
 800c172:	9300      	str	r3, [sp, #0]
 800c174:	ec47 6b10 	vmov	d0, r6, r7
 800c178:	4653      	mov	r3, sl
 800c17a:	4622      	mov	r2, r4
 800c17c:	f001 f9a4 	bl	800d4c8 <_dtoa_r>
 800c180:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c184:	4605      	mov	r5, r0
 800c186:	d119      	bne.n	800c1bc <__cvt+0x94>
 800c188:	f019 0f01 	tst.w	r9, #1
 800c18c:	d00e      	beq.n	800c1ac <__cvt+0x84>
 800c18e:	eb00 0904 	add.w	r9, r0, r4
 800c192:	2200      	movs	r2, #0
 800c194:	2300      	movs	r3, #0
 800c196:	4630      	mov	r0, r6
 800c198:	4639      	mov	r1, r7
 800c19a:	f7f4 fc95 	bl	8000ac8 <__aeabi_dcmpeq>
 800c19e:	b108      	cbz	r0, 800c1a4 <__cvt+0x7c>
 800c1a0:	f8cd 900c 	str.w	r9, [sp, #12]
 800c1a4:	2230      	movs	r2, #48	@ 0x30
 800c1a6:	9b03      	ldr	r3, [sp, #12]
 800c1a8:	454b      	cmp	r3, r9
 800c1aa:	d31e      	bcc.n	800c1ea <__cvt+0xc2>
 800c1ac:	9b03      	ldr	r3, [sp, #12]
 800c1ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1b0:	1b5b      	subs	r3, r3, r5
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	6013      	str	r3, [r2, #0]
 800c1b6:	b004      	add	sp, #16
 800c1b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c1c0:	eb00 0904 	add.w	r9, r0, r4
 800c1c4:	d1e5      	bne.n	800c192 <__cvt+0x6a>
 800c1c6:	7803      	ldrb	r3, [r0, #0]
 800c1c8:	2b30      	cmp	r3, #48	@ 0x30
 800c1ca:	d10a      	bne.n	800c1e2 <__cvt+0xba>
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	4630      	mov	r0, r6
 800c1d2:	4639      	mov	r1, r7
 800c1d4:	f7f4 fc78 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1d8:	b918      	cbnz	r0, 800c1e2 <__cvt+0xba>
 800c1da:	f1c4 0401 	rsb	r4, r4, #1
 800c1de:	f8ca 4000 	str.w	r4, [sl]
 800c1e2:	f8da 3000 	ldr.w	r3, [sl]
 800c1e6:	4499      	add	r9, r3
 800c1e8:	e7d3      	b.n	800c192 <__cvt+0x6a>
 800c1ea:	1c59      	adds	r1, r3, #1
 800c1ec:	9103      	str	r1, [sp, #12]
 800c1ee:	701a      	strb	r2, [r3, #0]
 800c1f0:	e7d9      	b.n	800c1a6 <__cvt+0x7e>

0800c1f2 <__exponent>:
 800c1f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1f4:	2900      	cmp	r1, #0
 800c1f6:	bfba      	itte	lt
 800c1f8:	4249      	neglt	r1, r1
 800c1fa:	232d      	movlt	r3, #45	@ 0x2d
 800c1fc:	232b      	movge	r3, #43	@ 0x2b
 800c1fe:	2909      	cmp	r1, #9
 800c200:	7002      	strb	r2, [r0, #0]
 800c202:	7043      	strb	r3, [r0, #1]
 800c204:	dd29      	ble.n	800c25a <__exponent+0x68>
 800c206:	f10d 0307 	add.w	r3, sp, #7
 800c20a:	461d      	mov	r5, r3
 800c20c:	270a      	movs	r7, #10
 800c20e:	461a      	mov	r2, r3
 800c210:	fbb1 f6f7 	udiv	r6, r1, r7
 800c214:	fb07 1416 	mls	r4, r7, r6, r1
 800c218:	3430      	adds	r4, #48	@ 0x30
 800c21a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c21e:	460c      	mov	r4, r1
 800c220:	2c63      	cmp	r4, #99	@ 0x63
 800c222:	f103 33ff 	add.w	r3, r3, #4294967295
 800c226:	4631      	mov	r1, r6
 800c228:	dcf1      	bgt.n	800c20e <__exponent+0x1c>
 800c22a:	3130      	adds	r1, #48	@ 0x30
 800c22c:	1e94      	subs	r4, r2, #2
 800c22e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c232:	1c41      	adds	r1, r0, #1
 800c234:	4623      	mov	r3, r4
 800c236:	42ab      	cmp	r3, r5
 800c238:	d30a      	bcc.n	800c250 <__exponent+0x5e>
 800c23a:	f10d 0309 	add.w	r3, sp, #9
 800c23e:	1a9b      	subs	r3, r3, r2
 800c240:	42ac      	cmp	r4, r5
 800c242:	bf88      	it	hi
 800c244:	2300      	movhi	r3, #0
 800c246:	3302      	adds	r3, #2
 800c248:	4403      	add	r3, r0
 800c24a:	1a18      	subs	r0, r3, r0
 800c24c:	b003      	add	sp, #12
 800c24e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c250:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c254:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c258:	e7ed      	b.n	800c236 <__exponent+0x44>
 800c25a:	2330      	movs	r3, #48	@ 0x30
 800c25c:	3130      	adds	r1, #48	@ 0x30
 800c25e:	7083      	strb	r3, [r0, #2]
 800c260:	70c1      	strb	r1, [r0, #3]
 800c262:	1d03      	adds	r3, r0, #4
 800c264:	e7f1      	b.n	800c24a <__exponent+0x58>
	...

0800c268 <_printf_float>:
 800c268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c26c:	b08d      	sub	sp, #52	@ 0x34
 800c26e:	460c      	mov	r4, r1
 800c270:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c274:	4616      	mov	r6, r2
 800c276:	461f      	mov	r7, r3
 800c278:	4605      	mov	r5, r0
 800c27a:	f000 fff3 	bl	800d264 <_localeconv_r>
 800c27e:	6803      	ldr	r3, [r0, #0]
 800c280:	9304      	str	r3, [sp, #16]
 800c282:	4618      	mov	r0, r3
 800c284:	f7f3 fff4 	bl	8000270 <strlen>
 800c288:	2300      	movs	r3, #0
 800c28a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c28c:	f8d8 3000 	ldr.w	r3, [r8]
 800c290:	9005      	str	r0, [sp, #20]
 800c292:	3307      	adds	r3, #7
 800c294:	f023 0307 	bic.w	r3, r3, #7
 800c298:	f103 0208 	add.w	r2, r3, #8
 800c29c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c2a0:	f8d4 b000 	ldr.w	fp, [r4]
 800c2a4:	f8c8 2000 	str.w	r2, [r8]
 800c2a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c2ac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c2b0:	9307      	str	r3, [sp, #28]
 800c2b2:	f8cd 8018 	str.w	r8, [sp, #24]
 800c2b6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c2ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2be:	4b9c      	ldr	r3, [pc, #624]	@ (800c530 <_printf_float+0x2c8>)
 800c2c0:	f04f 32ff 	mov.w	r2, #4294967295
 800c2c4:	f7f4 fc32 	bl	8000b2c <__aeabi_dcmpun>
 800c2c8:	bb70      	cbnz	r0, 800c328 <_printf_float+0xc0>
 800c2ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2ce:	4b98      	ldr	r3, [pc, #608]	@ (800c530 <_printf_float+0x2c8>)
 800c2d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c2d4:	f7f4 fc0c 	bl	8000af0 <__aeabi_dcmple>
 800c2d8:	bb30      	cbnz	r0, 800c328 <_printf_float+0xc0>
 800c2da:	2200      	movs	r2, #0
 800c2dc:	2300      	movs	r3, #0
 800c2de:	4640      	mov	r0, r8
 800c2e0:	4649      	mov	r1, r9
 800c2e2:	f7f4 fbfb 	bl	8000adc <__aeabi_dcmplt>
 800c2e6:	b110      	cbz	r0, 800c2ee <_printf_float+0x86>
 800c2e8:	232d      	movs	r3, #45	@ 0x2d
 800c2ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c2ee:	4a91      	ldr	r2, [pc, #580]	@ (800c534 <_printf_float+0x2cc>)
 800c2f0:	4b91      	ldr	r3, [pc, #580]	@ (800c538 <_printf_float+0x2d0>)
 800c2f2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c2f6:	bf94      	ite	ls
 800c2f8:	4690      	movls	r8, r2
 800c2fa:	4698      	movhi	r8, r3
 800c2fc:	2303      	movs	r3, #3
 800c2fe:	6123      	str	r3, [r4, #16]
 800c300:	f02b 0304 	bic.w	r3, fp, #4
 800c304:	6023      	str	r3, [r4, #0]
 800c306:	f04f 0900 	mov.w	r9, #0
 800c30a:	9700      	str	r7, [sp, #0]
 800c30c:	4633      	mov	r3, r6
 800c30e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c310:	4621      	mov	r1, r4
 800c312:	4628      	mov	r0, r5
 800c314:	f000 f9d2 	bl	800c6bc <_printf_common>
 800c318:	3001      	adds	r0, #1
 800c31a:	f040 808d 	bne.w	800c438 <_printf_float+0x1d0>
 800c31e:	f04f 30ff 	mov.w	r0, #4294967295
 800c322:	b00d      	add	sp, #52	@ 0x34
 800c324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c328:	4642      	mov	r2, r8
 800c32a:	464b      	mov	r3, r9
 800c32c:	4640      	mov	r0, r8
 800c32e:	4649      	mov	r1, r9
 800c330:	f7f4 fbfc 	bl	8000b2c <__aeabi_dcmpun>
 800c334:	b140      	cbz	r0, 800c348 <_printf_float+0xe0>
 800c336:	464b      	mov	r3, r9
 800c338:	2b00      	cmp	r3, #0
 800c33a:	bfbc      	itt	lt
 800c33c:	232d      	movlt	r3, #45	@ 0x2d
 800c33e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c342:	4a7e      	ldr	r2, [pc, #504]	@ (800c53c <_printf_float+0x2d4>)
 800c344:	4b7e      	ldr	r3, [pc, #504]	@ (800c540 <_printf_float+0x2d8>)
 800c346:	e7d4      	b.n	800c2f2 <_printf_float+0x8a>
 800c348:	6863      	ldr	r3, [r4, #4]
 800c34a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c34e:	9206      	str	r2, [sp, #24]
 800c350:	1c5a      	adds	r2, r3, #1
 800c352:	d13b      	bne.n	800c3cc <_printf_float+0x164>
 800c354:	2306      	movs	r3, #6
 800c356:	6063      	str	r3, [r4, #4]
 800c358:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c35c:	2300      	movs	r3, #0
 800c35e:	6022      	str	r2, [r4, #0]
 800c360:	9303      	str	r3, [sp, #12]
 800c362:	ab0a      	add	r3, sp, #40	@ 0x28
 800c364:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c368:	ab09      	add	r3, sp, #36	@ 0x24
 800c36a:	9300      	str	r3, [sp, #0]
 800c36c:	6861      	ldr	r1, [r4, #4]
 800c36e:	ec49 8b10 	vmov	d0, r8, r9
 800c372:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c376:	4628      	mov	r0, r5
 800c378:	f7ff fed6 	bl	800c128 <__cvt>
 800c37c:	9b06      	ldr	r3, [sp, #24]
 800c37e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c380:	2b47      	cmp	r3, #71	@ 0x47
 800c382:	4680      	mov	r8, r0
 800c384:	d129      	bne.n	800c3da <_printf_float+0x172>
 800c386:	1cc8      	adds	r0, r1, #3
 800c388:	db02      	blt.n	800c390 <_printf_float+0x128>
 800c38a:	6863      	ldr	r3, [r4, #4]
 800c38c:	4299      	cmp	r1, r3
 800c38e:	dd41      	ble.n	800c414 <_printf_float+0x1ac>
 800c390:	f1aa 0a02 	sub.w	sl, sl, #2
 800c394:	fa5f fa8a 	uxtb.w	sl, sl
 800c398:	3901      	subs	r1, #1
 800c39a:	4652      	mov	r2, sl
 800c39c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c3a0:	9109      	str	r1, [sp, #36]	@ 0x24
 800c3a2:	f7ff ff26 	bl	800c1f2 <__exponent>
 800c3a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c3a8:	1813      	adds	r3, r2, r0
 800c3aa:	2a01      	cmp	r2, #1
 800c3ac:	4681      	mov	r9, r0
 800c3ae:	6123      	str	r3, [r4, #16]
 800c3b0:	dc02      	bgt.n	800c3b8 <_printf_float+0x150>
 800c3b2:	6822      	ldr	r2, [r4, #0]
 800c3b4:	07d2      	lsls	r2, r2, #31
 800c3b6:	d501      	bpl.n	800c3bc <_printf_float+0x154>
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	6123      	str	r3, [r4, #16]
 800c3bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d0a2      	beq.n	800c30a <_printf_float+0xa2>
 800c3c4:	232d      	movs	r3, #45	@ 0x2d
 800c3c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c3ca:	e79e      	b.n	800c30a <_printf_float+0xa2>
 800c3cc:	9a06      	ldr	r2, [sp, #24]
 800c3ce:	2a47      	cmp	r2, #71	@ 0x47
 800c3d0:	d1c2      	bne.n	800c358 <_printf_float+0xf0>
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d1c0      	bne.n	800c358 <_printf_float+0xf0>
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	e7bd      	b.n	800c356 <_printf_float+0xee>
 800c3da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c3de:	d9db      	bls.n	800c398 <_printf_float+0x130>
 800c3e0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c3e4:	d118      	bne.n	800c418 <_printf_float+0x1b0>
 800c3e6:	2900      	cmp	r1, #0
 800c3e8:	6863      	ldr	r3, [r4, #4]
 800c3ea:	dd0b      	ble.n	800c404 <_printf_float+0x19c>
 800c3ec:	6121      	str	r1, [r4, #16]
 800c3ee:	b913      	cbnz	r3, 800c3f6 <_printf_float+0x18e>
 800c3f0:	6822      	ldr	r2, [r4, #0]
 800c3f2:	07d0      	lsls	r0, r2, #31
 800c3f4:	d502      	bpl.n	800c3fc <_printf_float+0x194>
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	440b      	add	r3, r1
 800c3fa:	6123      	str	r3, [r4, #16]
 800c3fc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c3fe:	f04f 0900 	mov.w	r9, #0
 800c402:	e7db      	b.n	800c3bc <_printf_float+0x154>
 800c404:	b913      	cbnz	r3, 800c40c <_printf_float+0x1a4>
 800c406:	6822      	ldr	r2, [r4, #0]
 800c408:	07d2      	lsls	r2, r2, #31
 800c40a:	d501      	bpl.n	800c410 <_printf_float+0x1a8>
 800c40c:	3302      	adds	r3, #2
 800c40e:	e7f4      	b.n	800c3fa <_printf_float+0x192>
 800c410:	2301      	movs	r3, #1
 800c412:	e7f2      	b.n	800c3fa <_printf_float+0x192>
 800c414:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c418:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c41a:	4299      	cmp	r1, r3
 800c41c:	db05      	blt.n	800c42a <_printf_float+0x1c2>
 800c41e:	6823      	ldr	r3, [r4, #0]
 800c420:	6121      	str	r1, [r4, #16]
 800c422:	07d8      	lsls	r0, r3, #31
 800c424:	d5ea      	bpl.n	800c3fc <_printf_float+0x194>
 800c426:	1c4b      	adds	r3, r1, #1
 800c428:	e7e7      	b.n	800c3fa <_printf_float+0x192>
 800c42a:	2900      	cmp	r1, #0
 800c42c:	bfd4      	ite	le
 800c42e:	f1c1 0202 	rsble	r2, r1, #2
 800c432:	2201      	movgt	r2, #1
 800c434:	4413      	add	r3, r2
 800c436:	e7e0      	b.n	800c3fa <_printf_float+0x192>
 800c438:	6823      	ldr	r3, [r4, #0]
 800c43a:	055a      	lsls	r2, r3, #21
 800c43c:	d407      	bmi.n	800c44e <_printf_float+0x1e6>
 800c43e:	6923      	ldr	r3, [r4, #16]
 800c440:	4642      	mov	r2, r8
 800c442:	4631      	mov	r1, r6
 800c444:	4628      	mov	r0, r5
 800c446:	47b8      	blx	r7
 800c448:	3001      	adds	r0, #1
 800c44a:	d12b      	bne.n	800c4a4 <_printf_float+0x23c>
 800c44c:	e767      	b.n	800c31e <_printf_float+0xb6>
 800c44e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c452:	f240 80dd 	bls.w	800c610 <_printf_float+0x3a8>
 800c456:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c45a:	2200      	movs	r2, #0
 800c45c:	2300      	movs	r3, #0
 800c45e:	f7f4 fb33 	bl	8000ac8 <__aeabi_dcmpeq>
 800c462:	2800      	cmp	r0, #0
 800c464:	d033      	beq.n	800c4ce <_printf_float+0x266>
 800c466:	4a37      	ldr	r2, [pc, #220]	@ (800c544 <_printf_float+0x2dc>)
 800c468:	2301      	movs	r3, #1
 800c46a:	4631      	mov	r1, r6
 800c46c:	4628      	mov	r0, r5
 800c46e:	47b8      	blx	r7
 800c470:	3001      	adds	r0, #1
 800c472:	f43f af54 	beq.w	800c31e <_printf_float+0xb6>
 800c476:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c47a:	4543      	cmp	r3, r8
 800c47c:	db02      	blt.n	800c484 <_printf_float+0x21c>
 800c47e:	6823      	ldr	r3, [r4, #0]
 800c480:	07d8      	lsls	r0, r3, #31
 800c482:	d50f      	bpl.n	800c4a4 <_printf_float+0x23c>
 800c484:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c488:	4631      	mov	r1, r6
 800c48a:	4628      	mov	r0, r5
 800c48c:	47b8      	blx	r7
 800c48e:	3001      	adds	r0, #1
 800c490:	f43f af45 	beq.w	800c31e <_printf_float+0xb6>
 800c494:	f04f 0900 	mov.w	r9, #0
 800c498:	f108 38ff 	add.w	r8, r8, #4294967295
 800c49c:	f104 0a1a 	add.w	sl, r4, #26
 800c4a0:	45c8      	cmp	r8, r9
 800c4a2:	dc09      	bgt.n	800c4b8 <_printf_float+0x250>
 800c4a4:	6823      	ldr	r3, [r4, #0]
 800c4a6:	079b      	lsls	r3, r3, #30
 800c4a8:	f100 8103 	bmi.w	800c6b2 <_printf_float+0x44a>
 800c4ac:	68e0      	ldr	r0, [r4, #12]
 800c4ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4b0:	4298      	cmp	r0, r3
 800c4b2:	bfb8      	it	lt
 800c4b4:	4618      	movlt	r0, r3
 800c4b6:	e734      	b.n	800c322 <_printf_float+0xba>
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	4652      	mov	r2, sl
 800c4bc:	4631      	mov	r1, r6
 800c4be:	4628      	mov	r0, r5
 800c4c0:	47b8      	blx	r7
 800c4c2:	3001      	adds	r0, #1
 800c4c4:	f43f af2b 	beq.w	800c31e <_printf_float+0xb6>
 800c4c8:	f109 0901 	add.w	r9, r9, #1
 800c4cc:	e7e8      	b.n	800c4a0 <_printf_float+0x238>
 800c4ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	dc39      	bgt.n	800c548 <_printf_float+0x2e0>
 800c4d4:	4a1b      	ldr	r2, [pc, #108]	@ (800c544 <_printf_float+0x2dc>)
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	4631      	mov	r1, r6
 800c4da:	4628      	mov	r0, r5
 800c4dc:	47b8      	blx	r7
 800c4de:	3001      	adds	r0, #1
 800c4e0:	f43f af1d 	beq.w	800c31e <_printf_float+0xb6>
 800c4e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c4e8:	ea59 0303 	orrs.w	r3, r9, r3
 800c4ec:	d102      	bne.n	800c4f4 <_printf_float+0x28c>
 800c4ee:	6823      	ldr	r3, [r4, #0]
 800c4f0:	07d9      	lsls	r1, r3, #31
 800c4f2:	d5d7      	bpl.n	800c4a4 <_printf_float+0x23c>
 800c4f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4f8:	4631      	mov	r1, r6
 800c4fa:	4628      	mov	r0, r5
 800c4fc:	47b8      	blx	r7
 800c4fe:	3001      	adds	r0, #1
 800c500:	f43f af0d 	beq.w	800c31e <_printf_float+0xb6>
 800c504:	f04f 0a00 	mov.w	sl, #0
 800c508:	f104 0b1a 	add.w	fp, r4, #26
 800c50c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c50e:	425b      	negs	r3, r3
 800c510:	4553      	cmp	r3, sl
 800c512:	dc01      	bgt.n	800c518 <_printf_float+0x2b0>
 800c514:	464b      	mov	r3, r9
 800c516:	e793      	b.n	800c440 <_printf_float+0x1d8>
 800c518:	2301      	movs	r3, #1
 800c51a:	465a      	mov	r2, fp
 800c51c:	4631      	mov	r1, r6
 800c51e:	4628      	mov	r0, r5
 800c520:	47b8      	blx	r7
 800c522:	3001      	adds	r0, #1
 800c524:	f43f aefb 	beq.w	800c31e <_printf_float+0xb6>
 800c528:	f10a 0a01 	add.w	sl, sl, #1
 800c52c:	e7ee      	b.n	800c50c <_printf_float+0x2a4>
 800c52e:	bf00      	nop
 800c530:	7fefffff 	.word	0x7fefffff
 800c534:	08010df4 	.word	0x08010df4
 800c538:	08010df8 	.word	0x08010df8
 800c53c:	08010dfc 	.word	0x08010dfc
 800c540:	08010e00 	.word	0x08010e00
 800c544:	08010e04 	.word	0x08010e04
 800c548:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c54a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c54e:	4553      	cmp	r3, sl
 800c550:	bfa8      	it	ge
 800c552:	4653      	movge	r3, sl
 800c554:	2b00      	cmp	r3, #0
 800c556:	4699      	mov	r9, r3
 800c558:	dc36      	bgt.n	800c5c8 <_printf_float+0x360>
 800c55a:	f04f 0b00 	mov.w	fp, #0
 800c55e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c562:	f104 021a 	add.w	r2, r4, #26
 800c566:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c568:	9306      	str	r3, [sp, #24]
 800c56a:	eba3 0309 	sub.w	r3, r3, r9
 800c56e:	455b      	cmp	r3, fp
 800c570:	dc31      	bgt.n	800c5d6 <_printf_float+0x36e>
 800c572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c574:	459a      	cmp	sl, r3
 800c576:	dc3a      	bgt.n	800c5ee <_printf_float+0x386>
 800c578:	6823      	ldr	r3, [r4, #0]
 800c57a:	07da      	lsls	r2, r3, #31
 800c57c:	d437      	bmi.n	800c5ee <_printf_float+0x386>
 800c57e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c580:	ebaa 0903 	sub.w	r9, sl, r3
 800c584:	9b06      	ldr	r3, [sp, #24]
 800c586:	ebaa 0303 	sub.w	r3, sl, r3
 800c58a:	4599      	cmp	r9, r3
 800c58c:	bfa8      	it	ge
 800c58e:	4699      	movge	r9, r3
 800c590:	f1b9 0f00 	cmp.w	r9, #0
 800c594:	dc33      	bgt.n	800c5fe <_printf_float+0x396>
 800c596:	f04f 0800 	mov.w	r8, #0
 800c59a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c59e:	f104 0b1a 	add.w	fp, r4, #26
 800c5a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5a4:	ebaa 0303 	sub.w	r3, sl, r3
 800c5a8:	eba3 0309 	sub.w	r3, r3, r9
 800c5ac:	4543      	cmp	r3, r8
 800c5ae:	f77f af79 	ble.w	800c4a4 <_printf_float+0x23c>
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	465a      	mov	r2, fp
 800c5b6:	4631      	mov	r1, r6
 800c5b8:	4628      	mov	r0, r5
 800c5ba:	47b8      	blx	r7
 800c5bc:	3001      	adds	r0, #1
 800c5be:	f43f aeae 	beq.w	800c31e <_printf_float+0xb6>
 800c5c2:	f108 0801 	add.w	r8, r8, #1
 800c5c6:	e7ec      	b.n	800c5a2 <_printf_float+0x33a>
 800c5c8:	4642      	mov	r2, r8
 800c5ca:	4631      	mov	r1, r6
 800c5cc:	4628      	mov	r0, r5
 800c5ce:	47b8      	blx	r7
 800c5d0:	3001      	adds	r0, #1
 800c5d2:	d1c2      	bne.n	800c55a <_printf_float+0x2f2>
 800c5d4:	e6a3      	b.n	800c31e <_printf_float+0xb6>
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	4631      	mov	r1, r6
 800c5da:	4628      	mov	r0, r5
 800c5dc:	9206      	str	r2, [sp, #24]
 800c5de:	47b8      	blx	r7
 800c5e0:	3001      	adds	r0, #1
 800c5e2:	f43f ae9c 	beq.w	800c31e <_printf_float+0xb6>
 800c5e6:	9a06      	ldr	r2, [sp, #24]
 800c5e8:	f10b 0b01 	add.w	fp, fp, #1
 800c5ec:	e7bb      	b.n	800c566 <_printf_float+0x2fe>
 800c5ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5f2:	4631      	mov	r1, r6
 800c5f4:	4628      	mov	r0, r5
 800c5f6:	47b8      	blx	r7
 800c5f8:	3001      	adds	r0, #1
 800c5fa:	d1c0      	bne.n	800c57e <_printf_float+0x316>
 800c5fc:	e68f      	b.n	800c31e <_printf_float+0xb6>
 800c5fe:	9a06      	ldr	r2, [sp, #24]
 800c600:	464b      	mov	r3, r9
 800c602:	4442      	add	r2, r8
 800c604:	4631      	mov	r1, r6
 800c606:	4628      	mov	r0, r5
 800c608:	47b8      	blx	r7
 800c60a:	3001      	adds	r0, #1
 800c60c:	d1c3      	bne.n	800c596 <_printf_float+0x32e>
 800c60e:	e686      	b.n	800c31e <_printf_float+0xb6>
 800c610:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c614:	f1ba 0f01 	cmp.w	sl, #1
 800c618:	dc01      	bgt.n	800c61e <_printf_float+0x3b6>
 800c61a:	07db      	lsls	r3, r3, #31
 800c61c:	d536      	bpl.n	800c68c <_printf_float+0x424>
 800c61e:	2301      	movs	r3, #1
 800c620:	4642      	mov	r2, r8
 800c622:	4631      	mov	r1, r6
 800c624:	4628      	mov	r0, r5
 800c626:	47b8      	blx	r7
 800c628:	3001      	adds	r0, #1
 800c62a:	f43f ae78 	beq.w	800c31e <_printf_float+0xb6>
 800c62e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c632:	4631      	mov	r1, r6
 800c634:	4628      	mov	r0, r5
 800c636:	47b8      	blx	r7
 800c638:	3001      	adds	r0, #1
 800c63a:	f43f ae70 	beq.w	800c31e <_printf_float+0xb6>
 800c63e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c642:	2200      	movs	r2, #0
 800c644:	2300      	movs	r3, #0
 800c646:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c64a:	f7f4 fa3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c64e:	b9c0      	cbnz	r0, 800c682 <_printf_float+0x41a>
 800c650:	4653      	mov	r3, sl
 800c652:	f108 0201 	add.w	r2, r8, #1
 800c656:	4631      	mov	r1, r6
 800c658:	4628      	mov	r0, r5
 800c65a:	47b8      	blx	r7
 800c65c:	3001      	adds	r0, #1
 800c65e:	d10c      	bne.n	800c67a <_printf_float+0x412>
 800c660:	e65d      	b.n	800c31e <_printf_float+0xb6>
 800c662:	2301      	movs	r3, #1
 800c664:	465a      	mov	r2, fp
 800c666:	4631      	mov	r1, r6
 800c668:	4628      	mov	r0, r5
 800c66a:	47b8      	blx	r7
 800c66c:	3001      	adds	r0, #1
 800c66e:	f43f ae56 	beq.w	800c31e <_printf_float+0xb6>
 800c672:	f108 0801 	add.w	r8, r8, #1
 800c676:	45d0      	cmp	r8, sl
 800c678:	dbf3      	blt.n	800c662 <_printf_float+0x3fa>
 800c67a:	464b      	mov	r3, r9
 800c67c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c680:	e6df      	b.n	800c442 <_printf_float+0x1da>
 800c682:	f04f 0800 	mov.w	r8, #0
 800c686:	f104 0b1a 	add.w	fp, r4, #26
 800c68a:	e7f4      	b.n	800c676 <_printf_float+0x40e>
 800c68c:	2301      	movs	r3, #1
 800c68e:	4642      	mov	r2, r8
 800c690:	e7e1      	b.n	800c656 <_printf_float+0x3ee>
 800c692:	2301      	movs	r3, #1
 800c694:	464a      	mov	r2, r9
 800c696:	4631      	mov	r1, r6
 800c698:	4628      	mov	r0, r5
 800c69a:	47b8      	blx	r7
 800c69c:	3001      	adds	r0, #1
 800c69e:	f43f ae3e 	beq.w	800c31e <_printf_float+0xb6>
 800c6a2:	f108 0801 	add.w	r8, r8, #1
 800c6a6:	68e3      	ldr	r3, [r4, #12]
 800c6a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c6aa:	1a5b      	subs	r3, r3, r1
 800c6ac:	4543      	cmp	r3, r8
 800c6ae:	dcf0      	bgt.n	800c692 <_printf_float+0x42a>
 800c6b0:	e6fc      	b.n	800c4ac <_printf_float+0x244>
 800c6b2:	f04f 0800 	mov.w	r8, #0
 800c6b6:	f104 0919 	add.w	r9, r4, #25
 800c6ba:	e7f4      	b.n	800c6a6 <_printf_float+0x43e>

0800c6bc <_printf_common>:
 800c6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6c0:	4616      	mov	r6, r2
 800c6c2:	4698      	mov	r8, r3
 800c6c4:	688a      	ldr	r2, [r1, #8]
 800c6c6:	690b      	ldr	r3, [r1, #16]
 800c6c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	bfb8      	it	lt
 800c6d0:	4613      	movlt	r3, r2
 800c6d2:	6033      	str	r3, [r6, #0]
 800c6d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c6d8:	4607      	mov	r7, r0
 800c6da:	460c      	mov	r4, r1
 800c6dc:	b10a      	cbz	r2, 800c6e2 <_printf_common+0x26>
 800c6de:	3301      	adds	r3, #1
 800c6e0:	6033      	str	r3, [r6, #0]
 800c6e2:	6823      	ldr	r3, [r4, #0]
 800c6e4:	0699      	lsls	r1, r3, #26
 800c6e6:	bf42      	ittt	mi
 800c6e8:	6833      	ldrmi	r3, [r6, #0]
 800c6ea:	3302      	addmi	r3, #2
 800c6ec:	6033      	strmi	r3, [r6, #0]
 800c6ee:	6825      	ldr	r5, [r4, #0]
 800c6f0:	f015 0506 	ands.w	r5, r5, #6
 800c6f4:	d106      	bne.n	800c704 <_printf_common+0x48>
 800c6f6:	f104 0a19 	add.w	sl, r4, #25
 800c6fa:	68e3      	ldr	r3, [r4, #12]
 800c6fc:	6832      	ldr	r2, [r6, #0]
 800c6fe:	1a9b      	subs	r3, r3, r2
 800c700:	42ab      	cmp	r3, r5
 800c702:	dc26      	bgt.n	800c752 <_printf_common+0x96>
 800c704:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c708:	6822      	ldr	r2, [r4, #0]
 800c70a:	3b00      	subs	r3, #0
 800c70c:	bf18      	it	ne
 800c70e:	2301      	movne	r3, #1
 800c710:	0692      	lsls	r2, r2, #26
 800c712:	d42b      	bmi.n	800c76c <_printf_common+0xb0>
 800c714:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c718:	4641      	mov	r1, r8
 800c71a:	4638      	mov	r0, r7
 800c71c:	47c8      	blx	r9
 800c71e:	3001      	adds	r0, #1
 800c720:	d01e      	beq.n	800c760 <_printf_common+0xa4>
 800c722:	6823      	ldr	r3, [r4, #0]
 800c724:	6922      	ldr	r2, [r4, #16]
 800c726:	f003 0306 	and.w	r3, r3, #6
 800c72a:	2b04      	cmp	r3, #4
 800c72c:	bf02      	ittt	eq
 800c72e:	68e5      	ldreq	r5, [r4, #12]
 800c730:	6833      	ldreq	r3, [r6, #0]
 800c732:	1aed      	subeq	r5, r5, r3
 800c734:	68a3      	ldr	r3, [r4, #8]
 800c736:	bf0c      	ite	eq
 800c738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c73c:	2500      	movne	r5, #0
 800c73e:	4293      	cmp	r3, r2
 800c740:	bfc4      	itt	gt
 800c742:	1a9b      	subgt	r3, r3, r2
 800c744:	18ed      	addgt	r5, r5, r3
 800c746:	2600      	movs	r6, #0
 800c748:	341a      	adds	r4, #26
 800c74a:	42b5      	cmp	r5, r6
 800c74c:	d11a      	bne.n	800c784 <_printf_common+0xc8>
 800c74e:	2000      	movs	r0, #0
 800c750:	e008      	b.n	800c764 <_printf_common+0xa8>
 800c752:	2301      	movs	r3, #1
 800c754:	4652      	mov	r2, sl
 800c756:	4641      	mov	r1, r8
 800c758:	4638      	mov	r0, r7
 800c75a:	47c8      	blx	r9
 800c75c:	3001      	adds	r0, #1
 800c75e:	d103      	bne.n	800c768 <_printf_common+0xac>
 800c760:	f04f 30ff 	mov.w	r0, #4294967295
 800c764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c768:	3501      	adds	r5, #1
 800c76a:	e7c6      	b.n	800c6fa <_printf_common+0x3e>
 800c76c:	18e1      	adds	r1, r4, r3
 800c76e:	1c5a      	adds	r2, r3, #1
 800c770:	2030      	movs	r0, #48	@ 0x30
 800c772:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c776:	4422      	add	r2, r4
 800c778:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c77c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c780:	3302      	adds	r3, #2
 800c782:	e7c7      	b.n	800c714 <_printf_common+0x58>
 800c784:	2301      	movs	r3, #1
 800c786:	4622      	mov	r2, r4
 800c788:	4641      	mov	r1, r8
 800c78a:	4638      	mov	r0, r7
 800c78c:	47c8      	blx	r9
 800c78e:	3001      	adds	r0, #1
 800c790:	d0e6      	beq.n	800c760 <_printf_common+0xa4>
 800c792:	3601      	adds	r6, #1
 800c794:	e7d9      	b.n	800c74a <_printf_common+0x8e>
	...

0800c798 <_printf_i>:
 800c798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c79c:	7e0f      	ldrb	r7, [r1, #24]
 800c79e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c7a0:	2f78      	cmp	r7, #120	@ 0x78
 800c7a2:	4691      	mov	r9, r2
 800c7a4:	4680      	mov	r8, r0
 800c7a6:	460c      	mov	r4, r1
 800c7a8:	469a      	mov	sl, r3
 800c7aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c7ae:	d807      	bhi.n	800c7c0 <_printf_i+0x28>
 800c7b0:	2f62      	cmp	r7, #98	@ 0x62
 800c7b2:	d80a      	bhi.n	800c7ca <_printf_i+0x32>
 800c7b4:	2f00      	cmp	r7, #0
 800c7b6:	f000 80d2 	beq.w	800c95e <_printf_i+0x1c6>
 800c7ba:	2f58      	cmp	r7, #88	@ 0x58
 800c7bc:	f000 80b9 	beq.w	800c932 <_printf_i+0x19a>
 800c7c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c7c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c7c8:	e03a      	b.n	800c840 <_printf_i+0xa8>
 800c7ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c7ce:	2b15      	cmp	r3, #21
 800c7d0:	d8f6      	bhi.n	800c7c0 <_printf_i+0x28>
 800c7d2:	a101      	add	r1, pc, #4	@ (adr r1, 800c7d8 <_printf_i+0x40>)
 800c7d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c7d8:	0800c831 	.word	0x0800c831
 800c7dc:	0800c845 	.word	0x0800c845
 800c7e0:	0800c7c1 	.word	0x0800c7c1
 800c7e4:	0800c7c1 	.word	0x0800c7c1
 800c7e8:	0800c7c1 	.word	0x0800c7c1
 800c7ec:	0800c7c1 	.word	0x0800c7c1
 800c7f0:	0800c845 	.word	0x0800c845
 800c7f4:	0800c7c1 	.word	0x0800c7c1
 800c7f8:	0800c7c1 	.word	0x0800c7c1
 800c7fc:	0800c7c1 	.word	0x0800c7c1
 800c800:	0800c7c1 	.word	0x0800c7c1
 800c804:	0800c945 	.word	0x0800c945
 800c808:	0800c86f 	.word	0x0800c86f
 800c80c:	0800c8ff 	.word	0x0800c8ff
 800c810:	0800c7c1 	.word	0x0800c7c1
 800c814:	0800c7c1 	.word	0x0800c7c1
 800c818:	0800c967 	.word	0x0800c967
 800c81c:	0800c7c1 	.word	0x0800c7c1
 800c820:	0800c86f 	.word	0x0800c86f
 800c824:	0800c7c1 	.word	0x0800c7c1
 800c828:	0800c7c1 	.word	0x0800c7c1
 800c82c:	0800c907 	.word	0x0800c907
 800c830:	6833      	ldr	r3, [r6, #0]
 800c832:	1d1a      	adds	r2, r3, #4
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	6032      	str	r2, [r6, #0]
 800c838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c83c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c840:	2301      	movs	r3, #1
 800c842:	e09d      	b.n	800c980 <_printf_i+0x1e8>
 800c844:	6833      	ldr	r3, [r6, #0]
 800c846:	6820      	ldr	r0, [r4, #0]
 800c848:	1d19      	adds	r1, r3, #4
 800c84a:	6031      	str	r1, [r6, #0]
 800c84c:	0606      	lsls	r6, r0, #24
 800c84e:	d501      	bpl.n	800c854 <_printf_i+0xbc>
 800c850:	681d      	ldr	r5, [r3, #0]
 800c852:	e003      	b.n	800c85c <_printf_i+0xc4>
 800c854:	0645      	lsls	r5, r0, #25
 800c856:	d5fb      	bpl.n	800c850 <_printf_i+0xb8>
 800c858:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c85c:	2d00      	cmp	r5, #0
 800c85e:	da03      	bge.n	800c868 <_printf_i+0xd0>
 800c860:	232d      	movs	r3, #45	@ 0x2d
 800c862:	426d      	negs	r5, r5
 800c864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c868:	4859      	ldr	r0, [pc, #356]	@ (800c9d0 <_printf_i+0x238>)
 800c86a:	230a      	movs	r3, #10
 800c86c:	e011      	b.n	800c892 <_printf_i+0xfa>
 800c86e:	6821      	ldr	r1, [r4, #0]
 800c870:	6833      	ldr	r3, [r6, #0]
 800c872:	0608      	lsls	r0, r1, #24
 800c874:	f853 5b04 	ldr.w	r5, [r3], #4
 800c878:	d402      	bmi.n	800c880 <_printf_i+0xe8>
 800c87a:	0649      	lsls	r1, r1, #25
 800c87c:	bf48      	it	mi
 800c87e:	b2ad      	uxthmi	r5, r5
 800c880:	2f6f      	cmp	r7, #111	@ 0x6f
 800c882:	4853      	ldr	r0, [pc, #332]	@ (800c9d0 <_printf_i+0x238>)
 800c884:	6033      	str	r3, [r6, #0]
 800c886:	bf14      	ite	ne
 800c888:	230a      	movne	r3, #10
 800c88a:	2308      	moveq	r3, #8
 800c88c:	2100      	movs	r1, #0
 800c88e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c892:	6866      	ldr	r6, [r4, #4]
 800c894:	60a6      	str	r6, [r4, #8]
 800c896:	2e00      	cmp	r6, #0
 800c898:	bfa2      	ittt	ge
 800c89a:	6821      	ldrge	r1, [r4, #0]
 800c89c:	f021 0104 	bicge.w	r1, r1, #4
 800c8a0:	6021      	strge	r1, [r4, #0]
 800c8a2:	b90d      	cbnz	r5, 800c8a8 <_printf_i+0x110>
 800c8a4:	2e00      	cmp	r6, #0
 800c8a6:	d04b      	beq.n	800c940 <_printf_i+0x1a8>
 800c8a8:	4616      	mov	r6, r2
 800c8aa:	fbb5 f1f3 	udiv	r1, r5, r3
 800c8ae:	fb03 5711 	mls	r7, r3, r1, r5
 800c8b2:	5dc7      	ldrb	r7, [r0, r7]
 800c8b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c8b8:	462f      	mov	r7, r5
 800c8ba:	42bb      	cmp	r3, r7
 800c8bc:	460d      	mov	r5, r1
 800c8be:	d9f4      	bls.n	800c8aa <_printf_i+0x112>
 800c8c0:	2b08      	cmp	r3, #8
 800c8c2:	d10b      	bne.n	800c8dc <_printf_i+0x144>
 800c8c4:	6823      	ldr	r3, [r4, #0]
 800c8c6:	07df      	lsls	r7, r3, #31
 800c8c8:	d508      	bpl.n	800c8dc <_printf_i+0x144>
 800c8ca:	6923      	ldr	r3, [r4, #16]
 800c8cc:	6861      	ldr	r1, [r4, #4]
 800c8ce:	4299      	cmp	r1, r3
 800c8d0:	bfde      	ittt	le
 800c8d2:	2330      	movle	r3, #48	@ 0x30
 800c8d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c8d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c8dc:	1b92      	subs	r2, r2, r6
 800c8de:	6122      	str	r2, [r4, #16]
 800c8e0:	f8cd a000 	str.w	sl, [sp]
 800c8e4:	464b      	mov	r3, r9
 800c8e6:	aa03      	add	r2, sp, #12
 800c8e8:	4621      	mov	r1, r4
 800c8ea:	4640      	mov	r0, r8
 800c8ec:	f7ff fee6 	bl	800c6bc <_printf_common>
 800c8f0:	3001      	adds	r0, #1
 800c8f2:	d14a      	bne.n	800c98a <_printf_i+0x1f2>
 800c8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8f8:	b004      	add	sp, #16
 800c8fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8fe:	6823      	ldr	r3, [r4, #0]
 800c900:	f043 0320 	orr.w	r3, r3, #32
 800c904:	6023      	str	r3, [r4, #0]
 800c906:	4833      	ldr	r0, [pc, #204]	@ (800c9d4 <_printf_i+0x23c>)
 800c908:	2778      	movs	r7, #120	@ 0x78
 800c90a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c90e:	6823      	ldr	r3, [r4, #0]
 800c910:	6831      	ldr	r1, [r6, #0]
 800c912:	061f      	lsls	r7, r3, #24
 800c914:	f851 5b04 	ldr.w	r5, [r1], #4
 800c918:	d402      	bmi.n	800c920 <_printf_i+0x188>
 800c91a:	065f      	lsls	r7, r3, #25
 800c91c:	bf48      	it	mi
 800c91e:	b2ad      	uxthmi	r5, r5
 800c920:	6031      	str	r1, [r6, #0]
 800c922:	07d9      	lsls	r1, r3, #31
 800c924:	bf44      	itt	mi
 800c926:	f043 0320 	orrmi.w	r3, r3, #32
 800c92a:	6023      	strmi	r3, [r4, #0]
 800c92c:	b11d      	cbz	r5, 800c936 <_printf_i+0x19e>
 800c92e:	2310      	movs	r3, #16
 800c930:	e7ac      	b.n	800c88c <_printf_i+0xf4>
 800c932:	4827      	ldr	r0, [pc, #156]	@ (800c9d0 <_printf_i+0x238>)
 800c934:	e7e9      	b.n	800c90a <_printf_i+0x172>
 800c936:	6823      	ldr	r3, [r4, #0]
 800c938:	f023 0320 	bic.w	r3, r3, #32
 800c93c:	6023      	str	r3, [r4, #0]
 800c93e:	e7f6      	b.n	800c92e <_printf_i+0x196>
 800c940:	4616      	mov	r6, r2
 800c942:	e7bd      	b.n	800c8c0 <_printf_i+0x128>
 800c944:	6833      	ldr	r3, [r6, #0]
 800c946:	6825      	ldr	r5, [r4, #0]
 800c948:	6961      	ldr	r1, [r4, #20]
 800c94a:	1d18      	adds	r0, r3, #4
 800c94c:	6030      	str	r0, [r6, #0]
 800c94e:	062e      	lsls	r6, r5, #24
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	d501      	bpl.n	800c958 <_printf_i+0x1c0>
 800c954:	6019      	str	r1, [r3, #0]
 800c956:	e002      	b.n	800c95e <_printf_i+0x1c6>
 800c958:	0668      	lsls	r0, r5, #25
 800c95a:	d5fb      	bpl.n	800c954 <_printf_i+0x1bc>
 800c95c:	8019      	strh	r1, [r3, #0]
 800c95e:	2300      	movs	r3, #0
 800c960:	6123      	str	r3, [r4, #16]
 800c962:	4616      	mov	r6, r2
 800c964:	e7bc      	b.n	800c8e0 <_printf_i+0x148>
 800c966:	6833      	ldr	r3, [r6, #0]
 800c968:	1d1a      	adds	r2, r3, #4
 800c96a:	6032      	str	r2, [r6, #0]
 800c96c:	681e      	ldr	r6, [r3, #0]
 800c96e:	6862      	ldr	r2, [r4, #4]
 800c970:	2100      	movs	r1, #0
 800c972:	4630      	mov	r0, r6
 800c974:	f7f3 fc2c 	bl	80001d0 <memchr>
 800c978:	b108      	cbz	r0, 800c97e <_printf_i+0x1e6>
 800c97a:	1b80      	subs	r0, r0, r6
 800c97c:	6060      	str	r0, [r4, #4]
 800c97e:	6863      	ldr	r3, [r4, #4]
 800c980:	6123      	str	r3, [r4, #16]
 800c982:	2300      	movs	r3, #0
 800c984:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c988:	e7aa      	b.n	800c8e0 <_printf_i+0x148>
 800c98a:	6923      	ldr	r3, [r4, #16]
 800c98c:	4632      	mov	r2, r6
 800c98e:	4649      	mov	r1, r9
 800c990:	4640      	mov	r0, r8
 800c992:	47d0      	blx	sl
 800c994:	3001      	adds	r0, #1
 800c996:	d0ad      	beq.n	800c8f4 <_printf_i+0x15c>
 800c998:	6823      	ldr	r3, [r4, #0]
 800c99a:	079b      	lsls	r3, r3, #30
 800c99c:	d413      	bmi.n	800c9c6 <_printf_i+0x22e>
 800c99e:	68e0      	ldr	r0, [r4, #12]
 800c9a0:	9b03      	ldr	r3, [sp, #12]
 800c9a2:	4298      	cmp	r0, r3
 800c9a4:	bfb8      	it	lt
 800c9a6:	4618      	movlt	r0, r3
 800c9a8:	e7a6      	b.n	800c8f8 <_printf_i+0x160>
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	4632      	mov	r2, r6
 800c9ae:	4649      	mov	r1, r9
 800c9b0:	4640      	mov	r0, r8
 800c9b2:	47d0      	blx	sl
 800c9b4:	3001      	adds	r0, #1
 800c9b6:	d09d      	beq.n	800c8f4 <_printf_i+0x15c>
 800c9b8:	3501      	adds	r5, #1
 800c9ba:	68e3      	ldr	r3, [r4, #12]
 800c9bc:	9903      	ldr	r1, [sp, #12]
 800c9be:	1a5b      	subs	r3, r3, r1
 800c9c0:	42ab      	cmp	r3, r5
 800c9c2:	dcf2      	bgt.n	800c9aa <_printf_i+0x212>
 800c9c4:	e7eb      	b.n	800c99e <_printf_i+0x206>
 800c9c6:	2500      	movs	r5, #0
 800c9c8:	f104 0619 	add.w	r6, r4, #25
 800c9cc:	e7f5      	b.n	800c9ba <_printf_i+0x222>
 800c9ce:	bf00      	nop
 800c9d0:	08010e06 	.word	0x08010e06
 800c9d4:	08010e17 	.word	0x08010e17

0800c9d8 <_scanf_float>:
 800c9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9dc:	b087      	sub	sp, #28
 800c9de:	4617      	mov	r7, r2
 800c9e0:	9303      	str	r3, [sp, #12]
 800c9e2:	688b      	ldr	r3, [r1, #8]
 800c9e4:	1e5a      	subs	r2, r3, #1
 800c9e6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c9ea:	bf81      	itttt	hi
 800c9ec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c9f0:	eb03 0b05 	addhi.w	fp, r3, r5
 800c9f4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c9f8:	608b      	strhi	r3, [r1, #8]
 800c9fa:	680b      	ldr	r3, [r1, #0]
 800c9fc:	460a      	mov	r2, r1
 800c9fe:	f04f 0500 	mov.w	r5, #0
 800ca02:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ca06:	f842 3b1c 	str.w	r3, [r2], #28
 800ca0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ca0e:	4680      	mov	r8, r0
 800ca10:	460c      	mov	r4, r1
 800ca12:	bf98      	it	ls
 800ca14:	f04f 0b00 	movls.w	fp, #0
 800ca18:	9201      	str	r2, [sp, #4]
 800ca1a:	4616      	mov	r6, r2
 800ca1c:	46aa      	mov	sl, r5
 800ca1e:	46a9      	mov	r9, r5
 800ca20:	9502      	str	r5, [sp, #8]
 800ca22:	68a2      	ldr	r2, [r4, #8]
 800ca24:	b152      	cbz	r2, 800ca3c <_scanf_float+0x64>
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	2b4e      	cmp	r3, #78	@ 0x4e
 800ca2c:	d864      	bhi.n	800caf8 <_scanf_float+0x120>
 800ca2e:	2b40      	cmp	r3, #64	@ 0x40
 800ca30:	d83c      	bhi.n	800caac <_scanf_float+0xd4>
 800ca32:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ca36:	b2c8      	uxtb	r0, r1
 800ca38:	280e      	cmp	r0, #14
 800ca3a:	d93a      	bls.n	800cab2 <_scanf_float+0xda>
 800ca3c:	f1b9 0f00 	cmp.w	r9, #0
 800ca40:	d003      	beq.n	800ca4a <_scanf_float+0x72>
 800ca42:	6823      	ldr	r3, [r4, #0]
 800ca44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ca48:	6023      	str	r3, [r4, #0]
 800ca4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ca4e:	f1ba 0f01 	cmp.w	sl, #1
 800ca52:	f200 8117 	bhi.w	800cc84 <_scanf_float+0x2ac>
 800ca56:	9b01      	ldr	r3, [sp, #4]
 800ca58:	429e      	cmp	r6, r3
 800ca5a:	f200 8108 	bhi.w	800cc6e <_scanf_float+0x296>
 800ca5e:	2001      	movs	r0, #1
 800ca60:	b007      	add	sp, #28
 800ca62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca66:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ca6a:	2a0d      	cmp	r2, #13
 800ca6c:	d8e6      	bhi.n	800ca3c <_scanf_float+0x64>
 800ca6e:	a101      	add	r1, pc, #4	@ (adr r1, 800ca74 <_scanf_float+0x9c>)
 800ca70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ca74:	0800cbbb 	.word	0x0800cbbb
 800ca78:	0800ca3d 	.word	0x0800ca3d
 800ca7c:	0800ca3d 	.word	0x0800ca3d
 800ca80:	0800ca3d 	.word	0x0800ca3d
 800ca84:	0800cc1b 	.word	0x0800cc1b
 800ca88:	0800cbf3 	.word	0x0800cbf3
 800ca8c:	0800ca3d 	.word	0x0800ca3d
 800ca90:	0800ca3d 	.word	0x0800ca3d
 800ca94:	0800cbc9 	.word	0x0800cbc9
 800ca98:	0800ca3d 	.word	0x0800ca3d
 800ca9c:	0800ca3d 	.word	0x0800ca3d
 800caa0:	0800ca3d 	.word	0x0800ca3d
 800caa4:	0800ca3d 	.word	0x0800ca3d
 800caa8:	0800cb81 	.word	0x0800cb81
 800caac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800cab0:	e7db      	b.n	800ca6a <_scanf_float+0x92>
 800cab2:	290e      	cmp	r1, #14
 800cab4:	d8c2      	bhi.n	800ca3c <_scanf_float+0x64>
 800cab6:	a001      	add	r0, pc, #4	@ (adr r0, 800cabc <_scanf_float+0xe4>)
 800cab8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cabc:	0800cb71 	.word	0x0800cb71
 800cac0:	0800ca3d 	.word	0x0800ca3d
 800cac4:	0800cb71 	.word	0x0800cb71
 800cac8:	0800cc07 	.word	0x0800cc07
 800cacc:	0800ca3d 	.word	0x0800ca3d
 800cad0:	0800cb19 	.word	0x0800cb19
 800cad4:	0800cb57 	.word	0x0800cb57
 800cad8:	0800cb57 	.word	0x0800cb57
 800cadc:	0800cb57 	.word	0x0800cb57
 800cae0:	0800cb57 	.word	0x0800cb57
 800cae4:	0800cb57 	.word	0x0800cb57
 800cae8:	0800cb57 	.word	0x0800cb57
 800caec:	0800cb57 	.word	0x0800cb57
 800caf0:	0800cb57 	.word	0x0800cb57
 800caf4:	0800cb57 	.word	0x0800cb57
 800caf8:	2b6e      	cmp	r3, #110	@ 0x6e
 800cafa:	d809      	bhi.n	800cb10 <_scanf_float+0x138>
 800cafc:	2b60      	cmp	r3, #96	@ 0x60
 800cafe:	d8b2      	bhi.n	800ca66 <_scanf_float+0x8e>
 800cb00:	2b54      	cmp	r3, #84	@ 0x54
 800cb02:	d07b      	beq.n	800cbfc <_scanf_float+0x224>
 800cb04:	2b59      	cmp	r3, #89	@ 0x59
 800cb06:	d199      	bne.n	800ca3c <_scanf_float+0x64>
 800cb08:	2d07      	cmp	r5, #7
 800cb0a:	d197      	bne.n	800ca3c <_scanf_float+0x64>
 800cb0c:	2508      	movs	r5, #8
 800cb0e:	e02c      	b.n	800cb6a <_scanf_float+0x192>
 800cb10:	2b74      	cmp	r3, #116	@ 0x74
 800cb12:	d073      	beq.n	800cbfc <_scanf_float+0x224>
 800cb14:	2b79      	cmp	r3, #121	@ 0x79
 800cb16:	e7f6      	b.n	800cb06 <_scanf_float+0x12e>
 800cb18:	6821      	ldr	r1, [r4, #0]
 800cb1a:	05c8      	lsls	r0, r1, #23
 800cb1c:	d51b      	bpl.n	800cb56 <_scanf_float+0x17e>
 800cb1e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800cb22:	6021      	str	r1, [r4, #0]
 800cb24:	f109 0901 	add.w	r9, r9, #1
 800cb28:	f1bb 0f00 	cmp.w	fp, #0
 800cb2c:	d003      	beq.n	800cb36 <_scanf_float+0x15e>
 800cb2e:	3201      	adds	r2, #1
 800cb30:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cb34:	60a2      	str	r2, [r4, #8]
 800cb36:	68a3      	ldr	r3, [r4, #8]
 800cb38:	3b01      	subs	r3, #1
 800cb3a:	60a3      	str	r3, [r4, #8]
 800cb3c:	6923      	ldr	r3, [r4, #16]
 800cb3e:	3301      	adds	r3, #1
 800cb40:	6123      	str	r3, [r4, #16]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	3b01      	subs	r3, #1
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	607b      	str	r3, [r7, #4]
 800cb4a:	f340 8087 	ble.w	800cc5c <_scanf_float+0x284>
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	3301      	adds	r3, #1
 800cb52:	603b      	str	r3, [r7, #0]
 800cb54:	e765      	b.n	800ca22 <_scanf_float+0x4a>
 800cb56:	eb1a 0105 	adds.w	r1, sl, r5
 800cb5a:	f47f af6f 	bne.w	800ca3c <_scanf_float+0x64>
 800cb5e:	6822      	ldr	r2, [r4, #0]
 800cb60:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800cb64:	6022      	str	r2, [r4, #0]
 800cb66:	460d      	mov	r5, r1
 800cb68:	468a      	mov	sl, r1
 800cb6a:	f806 3b01 	strb.w	r3, [r6], #1
 800cb6e:	e7e2      	b.n	800cb36 <_scanf_float+0x15e>
 800cb70:	6822      	ldr	r2, [r4, #0]
 800cb72:	0610      	lsls	r0, r2, #24
 800cb74:	f57f af62 	bpl.w	800ca3c <_scanf_float+0x64>
 800cb78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cb7c:	6022      	str	r2, [r4, #0]
 800cb7e:	e7f4      	b.n	800cb6a <_scanf_float+0x192>
 800cb80:	f1ba 0f00 	cmp.w	sl, #0
 800cb84:	d10e      	bne.n	800cba4 <_scanf_float+0x1cc>
 800cb86:	f1b9 0f00 	cmp.w	r9, #0
 800cb8a:	d10e      	bne.n	800cbaa <_scanf_float+0x1d2>
 800cb8c:	6822      	ldr	r2, [r4, #0]
 800cb8e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cb92:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cb96:	d108      	bne.n	800cbaa <_scanf_float+0x1d2>
 800cb98:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cb9c:	6022      	str	r2, [r4, #0]
 800cb9e:	f04f 0a01 	mov.w	sl, #1
 800cba2:	e7e2      	b.n	800cb6a <_scanf_float+0x192>
 800cba4:	f1ba 0f02 	cmp.w	sl, #2
 800cba8:	d055      	beq.n	800cc56 <_scanf_float+0x27e>
 800cbaa:	2d01      	cmp	r5, #1
 800cbac:	d002      	beq.n	800cbb4 <_scanf_float+0x1dc>
 800cbae:	2d04      	cmp	r5, #4
 800cbb0:	f47f af44 	bne.w	800ca3c <_scanf_float+0x64>
 800cbb4:	3501      	adds	r5, #1
 800cbb6:	b2ed      	uxtb	r5, r5
 800cbb8:	e7d7      	b.n	800cb6a <_scanf_float+0x192>
 800cbba:	f1ba 0f01 	cmp.w	sl, #1
 800cbbe:	f47f af3d 	bne.w	800ca3c <_scanf_float+0x64>
 800cbc2:	f04f 0a02 	mov.w	sl, #2
 800cbc6:	e7d0      	b.n	800cb6a <_scanf_float+0x192>
 800cbc8:	b97d      	cbnz	r5, 800cbea <_scanf_float+0x212>
 800cbca:	f1b9 0f00 	cmp.w	r9, #0
 800cbce:	f47f af38 	bne.w	800ca42 <_scanf_float+0x6a>
 800cbd2:	6822      	ldr	r2, [r4, #0]
 800cbd4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cbd8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cbdc:	f040 8108 	bne.w	800cdf0 <_scanf_float+0x418>
 800cbe0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cbe4:	6022      	str	r2, [r4, #0]
 800cbe6:	2501      	movs	r5, #1
 800cbe8:	e7bf      	b.n	800cb6a <_scanf_float+0x192>
 800cbea:	2d03      	cmp	r5, #3
 800cbec:	d0e2      	beq.n	800cbb4 <_scanf_float+0x1dc>
 800cbee:	2d05      	cmp	r5, #5
 800cbf0:	e7de      	b.n	800cbb0 <_scanf_float+0x1d8>
 800cbf2:	2d02      	cmp	r5, #2
 800cbf4:	f47f af22 	bne.w	800ca3c <_scanf_float+0x64>
 800cbf8:	2503      	movs	r5, #3
 800cbfa:	e7b6      	b.n	800cb6a <_scanf_float+0x192>
 800cbfc:	2d06      	cmp	r5, #6
 800cbfe:	f47f af1d 	bne.w	800ca3c <_scanf_float+0x64>
 800cc02:	2507      	movs	r5, #7
 800cc04:	e7b1      	b.n	800cb6a <_scanf_float+0x192>
 800cc06:	6822      	ldr	r2, [r4, #0]
 800cc08:	0591      	lsls	r1, r2, #22
 800cc0a:	f57f af17 	bpl.w	800ca3c <_scanf_float+0x64>
 800cc0e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800cc12:	6022      	str	r2, [r4, #0]
 800cc14:	f8cd 9008 	str.w	r9, [sp, #8]
 800cc18:	e7a7      	b.n	800cb6a <_scanf_float+0x192>
 800cc1a:	6822      	ldr	r2, [r4, #0]
 800cc1c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cc20:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cc24:	d006      	beq.n	800cc34 <_scanf_float+0x25c>
 800cc26:	0550      	lsls	r0, r2, #21
 800cc28:	f57f af08 	bpl.w	800ca3c <_scanf_float+0x64>
 800cc2c:	f1b9 0f00 	cmp.w	r9, #0
 800cc30:	f000 80de 	beq.w	800cdf0 <_scanf_float+0x418>
 800cc34:	0591      	lsls	r1, r2, #22
 800cc36:	bf58      	it	pl
 800cc38:	9902      	ldrpl	r1, [sp, #8]
 800cc3a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cc3e:	bf58      	it	pl
 800cc40:	eba9 0101 	subpl.w	r1, r9, r1
 800cc44:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800cc48:	bf58      	it	pl
 800cc4a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cc4e:	6022      	str	r2, [r4, #0]
 800cc50:	f04f 0900 	mov.w	r9, #0
 800cc54:	e789      	b.n	800cb6a <_scanf_float+0x192>
 800cc56:	f04f 0a03 	mov.w	sl, #3
 800cc5a:	e786      	b.n	800cb6a <_scanf_float+0x192>
 800cc5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cc60:	4639      	mov	r1, r7
 800cc62:	4640      	mov	r0, r8
 800cc64:	4798      	blx	r3
 800cc66:	2800      	cmp	r0, #0
 800cc68:	f43f aedb 	beq.w	800ca22 <_scanf_float+0x4a>
 800cc6c:	e6e6      	b.n	800ca3c <_scanf_float+0x64>
 800cc6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cc72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cc76:	463a      	mov	r2, r7
 800cc78:	4640      	mov	r0, r8
 800cc7a:	4798      	blx	r3
 800cc7c:	6923      	ldr	r3, [r4, #16]
 800cc7e:	3b01      	subs	r3, #1
 800cc80:	6123      	str	r3, [r4, #16]
 800cc82:	e6e8      	b.n	800ca56 <_scanf_float+0x7e>
 800cc84:	1e6b      	subs	r3, r5, #1
 800cc86:	2b06      	cmp	r3, #6
 800cc88:	d824      	bhi.n	800ccd4 <_scanf_float+0x2fc>
 800cc8a:	2d02      	cmp	r5, #2
 800cc8c:	d836      	bhi.n	800ccfc <_scanf_float+0x324>
 800cc8e:	9b01      	ldr	r3, [sp, #4]
 800cc90:	429e      	cmp	r6, r3
 800cc92:	f67f aee4 	bls.w	800ca5e <_scanf_float+0x86>
 800cc96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cc9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cc9e:	463a      	mov	r2, r7
 800cca0:	4640      	mov	r0, r8
 800cca2:	4798      	blx	r3
 800cca4:	6923      	ldr	r3, [r4, #16]
 800cca6:	3b01      	subs	r3, #1
 800cca8:	6123      	str	r3, [r4, #16]
 800ccaa:	e7f0      	b.n	800cc8e <_scanf_float+0x2b6>
 800ccac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ccb0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ccb4:	463a      	mov	r2, r7
 800ccb6:	4640      	mov	r0, r8
 800ccb8:	4798      	blx	r3
 800ccba:	6923      	ldr	r3, [r4, #16]
 800ccbc:	3b01      	subs	r3, #1
 800ccbe:	6123      	str	r3, [r4, #16]
 800ccc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ccc4:	fa5f fa8a 	uxtb.w	sl, sl
 800ccc8:	f1ba 0f02 	cmp.w	sl, #2
 800cccc:	d1ee      	bne.n	800ccac <_scanf_float+0x2d4>
 800ccce:	3d03      	subs	r5, #3
 800ccd0:	b2ed      	uxtb	r5, r5
 800ccd2:	1b76      	subs	r6, r6, r5
 800ccd4:	6823      	ldr	r3, [r4, #0]
 800ccd6:	05da      	lsls	r2, r3, #23
 800ccd8:	d530      	bpl.n	800cd3c <_scanf_float+0x364>
 800ccda:	055b      	lsls	r3, r3, #21
 800ccdc:	d511      	bpl.n	800cd02 <_scanf_float+0x32a>
 800ccde:	9b01      	ldr	r3, [sp, #4]
 800cce0:	429e      	cmp	r6, r3
 800cce2:	f67f aebc 	bls.w	800ca5e <_scanf_float+0x86>
 800cce6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ccea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ccee:	463a      	mov	r2, r7
 800ccf0:	4640      	mov	r0, r8
 800ccf2:	4798      	blx	r3
 800ccf4:	6923      	ldr	r3, [r4, #16]
 800ccf6:	3b01      	subs	r3, #1
 800ccf8:	6123      	str	r3, [r4, #16]
 800ccfa:	e7f0      	b.n	800ccde <_scanf_float+0x306>
 800ccfc:	46aa      	mov	sl, r5
 800ccfe:	46b3      	mov	fp, r6
 800cd00:	e7de      	b.n	800ccc0 <_scanf_float+0x2e8>
 800cd02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cd06:	6923      	ldr	r3, [r4, #16]
 800cd08:	2965      	cmp	r1, #101	@ 0x65
 800cd0a:	f103 33ff 	add.w	r3, r3, #4294967295
 800cd0e:	f106 35ff 	add.w	r5, r6, #4294967295
 800cd12:	6123      	str	r3, [r4, #16]
 800cd14:	d00c      	beq.n	800cd30 <_scanf_float+0x358>
 800cd16:	2945      	cmp	r1, #69	@ 0x45
 800cd18:	d00a      	beq.n	800cd30 <_scanf_float+0x358>
 800cd1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd1e:	463a      	mov	r2, r7
 800cd20:	4640      	mov	r0, r8
 800cd22:	4798      	blx	r3
 800cd24:	6923      	ldr	r3, [r4, #16]
 800cd26:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cd2a:	3b01      	subs	r3, #1
 800cd2c:	1eb5      	subs	r5, r6, #2
 800cd2e:	6123      	str	r3, [r4, #16]
 800cd30:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd34:	463a      	mov	r2, r7
 800cd36:	4640      	mov	r0, r8
 800cd38:	4798      	blx	r3
 800cd3a:	462e      	mov	r6, r5
 800cd3c:	6822      	ldr	r2, [r4, #0]
 800cd3e:	f012 0210 	ands.w	r2, r2, #16
 800cd42:	d001      	beq.n	800cd48 <_scanf_float+0x370>
 800cd44:	2000      	movs	r0, #0
 800cd46:	e68b      	b.n	800ca60 <_scanf_float+0x88>
 800cd48:	7032      	strb	r2, [r6, #0]
 800cd4a:	6823      	ldr	r3, [r4, #0]
 800cd4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cd50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd54:	d11c      	bne.n	800cd90 <_scanf_float+0x3b8>
 800cd56:	9b02      	ldr	r3, [sp, #8]
 800cd58:	454b      	cmp	r3, r9
 800cd5a:	eba3 0209 	sub.w	r2, r3, r9
 800cd5e:	d123      	bne.n	800cda8 <_scanf_float+0x3d0>
 800cd60:	9901      	ldr	r1, [sp, #4]
 800cd62:	2200      	movs	r2, #0
 800cd64:	4640      	mov	r0, r8
 800cd66:	f002 fd27 	bl	800f7b8 <_strtod_r>
 800cd6a:	9b03      	ldr	r3, [sp, #12]
 800cd6c:	6821      	ldr	r1, [r4, #0]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f011 0f02 	tst.w	r1, #2
 800cd74:	ec57 6b10 	vmov	r6, r7, d0
 800cd78:	f103 0204 	add.w	r2, r3, #4
 800cd7c:	d01f      	beq.n	800cdbe <_scanf_float+0x3e6>
 800cd7e:	9903      	ldr	r1, [sp, #12]
 800cd80:	600a      	str	r2, [r1, #0]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	e9c3 6700 	strd	r6, r7, [r3]
 800cd88:	68e3      	ldr	r3, [r4, #12]
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	60e3      	str	r3, [r4, #12]
 800cd8e:	e7d9      	b.n	800cd44 <_scanf_float+0x36c>
 800cd90:	9b04      	ldr	r3, [sp, #16]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d0e4      	beq.n	800cd60 <_scanf_float+0x388>
 800cd96:	9905      	ldr	r1, [sp, #20]
 800cd98:	230a      	movs	r3, #10
 800cd9a:	3101      	adds	r1, #1
 800cd9c:	4640      	mov	r0, r8
 800cd9e:	f002 fd8b 	bl	800f8b8 <_strtol_r>
 800cda2:	9b04      	ldr	r3, [sp, #16]
 800cda4:	9e05      	ldr	r6, [sp, #20]
 800cda6:	1ac2      	subs	r2, r0, r3
 800cda8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cdac:	429e      	cmp	r6, r3
 800cdae:	bf28      	it	cs
 800cdb0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cdb4:	4910      	ldr	r1, [pc, #64]	@ (800cdf8 <_scanf_float+0x420>)
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	f000 f954 	bl	800d064 <siprintf>
 800cdbc:	e7d0      	b.n	800cd60 <_scanf_float+0x388>
 800cdbe:	f011 0f04 	tst.w	r1, #4
 800cdc2:	9903      	ldr	r1, [sp, #12]
 800cdc4:	600a      	str	r2, [r1, #0]
 800cdc6:	d1dc      	bne.n	800cd82 <_scanf_float+0x3aa>
 800cdc8:	681d      	ldr	r5, [r3, #0]
 800cdca:	4632      	mov	r2, r6
 800cdcc:	463b      	mov	r3, r7
 800cdce:	4630      	mov	r0, r6
 800cdd0:	4639      	mov	r1, r7
 800cdd2:	f7f3 feab 	bl	8000b2c <__aeabi_dcmpun>
 800cdd6:	b128      	cbz	r0, 800cde4 <_scanf_float+0x40c>
 800cdd8:	4808      	ldr	r0, [pc, #32]	@ (800cdfc <_scanf_float+0x424>)
 800cdda:	f000 fac9 	bl	800d370 <nanf>
 800cdde:	ed85 0a00 	vstr	s0, [r5]
 800cde2:	e7d1      	b.n	800cd88 <_scanf_float+0x3b0>
 800cde4:	4630      	mov	r0, r6
 800cde6:	4639      	mov	r1, r7
 800cde8:	f7f3 fefe 	bl	8000be8 <__aeabi_d2f>
 800cdec:	6028      	str	r0, [r5, #0]
 800cdee:	e7cb      	b.n	800cd88 <_scanf_float+0x3b0>
 800cdf0:	f04f 0900 	mov.w	r9, #0
 800cdf4:	e629      	b.n	800ca4a <_scanf_float+0x72>
 800cdf6:	bf00      	nop
 800cdf8:	08010e28 	.word	0x08010e28
 800cdfc:	08010e68 	.word	0x08010e68

0800ce00 <std>:
 800ce00:	2300      	movs	r3, #0
 800ce02:	b510      	push	{r4, lr}
 800ce04:	4604      	mov	r4, r0
 800ce06:	e9c0 3300 	strd	r3, r3, [r0]
 800ce0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce0e:	6083      	str	r3, [r0, #8]
 800ce10:	8181      	strh	r1, [r0, #12]
 800ce12:	6643      	str	r3, [r0, #100]	@ 0x64
 800ce14:	81c2      	strh	r2, [r0, #14]
 800ce16:	6183      	str	r3, [r0, #24]
 800ce18:	4619      	mov	r1, r3
 800ce1a:	2208      	movs	r2, #8
 800ce1c:	305c      	adds	r0, #92	@ 0x5c
 800ce1e:	f000 fa19 	bl	800d254 <memset>
 800ce22:	4b0d      	ldr	r3, [pc, #52]	@ (800ce58 <std+0x58>)
 800ce24:	6263      	str	r3, [r4, #36]	@ 0x24
 800ce26:	4b0d      	ldr	r3, [pc, #52]	@ (800ce5c <std+0x5c>)
 800ce28:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ce2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ce60 <std+0x60>)
 800ce2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ce2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ce64 <std+0x64>)
 800ce30:	6323      	str	r3, [r4, #48]	@ 0x30
 800ce32:	4b0d      	ldr	r3, [pc, #52]	@ (800ce68 <std+0x68>)
 800ce34:	6224      	str	r4, [r4, #32]
 800ce36:	429c      	cmp	r4, r3
 800ce38:	d006      	beq.n	800ce48 <std+0x48>
 800ce3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ce3e:	4294      	cmp	r4, r2
 800ce40:	d002      	beq.n	800ce48 <std+0x48>
 800ce42:	33d0      	adds	r3, #208	@ 0xd0
 800ce44:	429c      	cmp	r4, r3
 800ce46:	d105      	bne.n	800ce54 <std+0x54>
 800ce48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ce4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce50:	f000 ba7c 	b.w	800d34c <__retarget_lock_init_recursive>
 800ce54:	bd10      	pop	{r4, pc}
 800ce56:	bf00      	nop
 800ce58:	0800d0a5 	.word	0x0800d0a5
 800ce5c:	0800d0c7 	.word	0x0800d0c7
 800ce60:	0800d0ff 	.word	0x0800d0ff
 800ce64:	0800d123 	.word	0x0800d123
 800ce68:	20003818 	.word	0x20003818

0800ce6c <stdio_exit_handler>:
 800ce6c:	4a02      	ldr	r2, [pc, #8]	@ (800ce78 <stdio_exit_handler+0xc>)
 800ce6e:	4903      	ldr	r1, [pc, #12]	@ (800ce7c <stdio_exit_handler+0x10>)
 800ce70:	4803      	ldr	r0, [pc, #12]	@ (800ce80 <stdio_exit_handler+0x14>)
 800ce72:	f000 b869 	b.w	800cf48 <_fwalk_sglue>
 800ce76:	bf00      	nop
 800ce78:	2000005c 	.word	0x2000005c
 800ce7c:	0800fef9 	.word	0x0800fef9
 800ce80:	2000006c 	.word	0x2000006c

0800ce84 <cleanup_stdio>:
 800ce84:	6841      	ldr	r1, [r0, #4]
 800ce86:	4b0c      	ldr	r3, [pc, #48]	@ (800ceb8 <cleanup_stdio+0x34>)
 800ce88:	4299      	cmp	r1, r3
 800ce8a:	b510      	push	{r4, lr}
 800ce8c:	4604      	mov	r4, r0
 800ce8e:	d001      	beq.n	800ce94 <cleanup_stdio+0x10>
 800ce90:	f003 f832 	bl	800fef8 <_fflush_r>
 800ce94:	68a1      	ldr	r1, [r4, #8]
 800ce96:	4b09      	ldr	r3, [pc, #36]	@ (800cebc <cleanup_stdio+0x38>)
 800ce98:	4299      	cmp	r1, r3
 800ce9a:	d002      	beq.n	800cea2 <cleanup_stdio+0x1e>
 800ce9c:	4620      	mov	r0, r4
 800ce9e:	f003 f82b 	bl	800fef8 <_fflush_r>
 800cea2:	68e1      	ldr	r1, [r4, #12]
 800cea4:	4b06      	ldr	r3, [pc, #24]	@ (800cec0 <cleanup_stdio+0x3c>)
 800cea6:	4299      	cmp	r1, r3
 800cea8:	d004      	beq.n	800ceb4 <cleanup_stdio+0x30>
 800ceaa:	4620      	mov	r0, r4
 800ceac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ceb0:	f003 b822 	b.w	800fef8 <_fflush_r>
 800ceb4:	bd10      	pop	{r4, pc}
 800ceb6:	bf00      	nop
 800ceb8:	20003818 	.word	0x20003818
 800cebc:	20003880 	.word	0x20003880
 800cec0:	200038e8 	.word	0x200038e8

0800cec4 <global_stdio_init.part.0>:
 800cec4:	b510      	push	{r4, lr}
 800cec6:	4b0b      	ldr	r3, [pc, #44]	@ (800cef4 <global_stdio_init.part.0+0x30>)
 800cec8:	4c0b      	ldr	r4, [pc, #44]	@ (800cef8 <global_stdio_init.part.0+0x34>)
 800ceca:	4a0c      	ldr	r2, [pc, #48]	@ (800cefc <global_stdio_init.part.0+0x38>)
 800cecc:	601a      	str	r2, [r3, #0]
 800cece:	4620      	mov	r0, r4
 800ced0:	2200      	movs	r2, #0
 800ced2:	2104      	movs	r1, #4
 800ced4:	f7ff ff94 	bl	800ce00 <std>
 800ced8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cedc:	2201      	movs	r2, #1
 800cede:	2109      	movs	r1, #9
 800cee0:	f7ff ff8e 	bl	800ce00 <std>
 800cee4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cee8:	2202      	movs	r2, #2
 800ceea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ceee:	2112      	movs	r1, #18
 800cef0:	f7ff bf86 	b.w	800ce00 <std>
 800cef4:	20003950 	.word	0x20003950
 800cef8:	20003818 	.word	0x20003818
 800cefc:	0800ce6d 	.word	0x0800ce6d

0800cf00 <__sfp_lock_acquire>:
 800cf00:	4801      	ldr	r0, [pc, #4]	@ (800cf08 <__sfp_lock_acquire+0x8>)
 800cf02:	f000 ba24 	b.w	800d34e <__retarget_lock_acquire_recursive>
 800cf06:	bf00      	nop
 800cf08:	20003959 	.word	0x20003959

0800cf0c <__sfp_lock_release>:
 800cf0c:	4801      	ldr	r0, [pc, #4]	@ (800cf14 <__sfp_lock_release+0x8>)
 800cf0e:	f000 ba1f 	b.w	800d350 <__retarget_lock_release_recursive>
 800cf12:	bf00      	nop
 800cf14:	20003959 	.word	0x20003959

0800cf18 <__sinit>:
 800cf18:	b510      	push	{r4, lr}
 800cf1a:	4604      	mov	r4, r0
 800cf1c:	f7ff fff0 	bl	800cf00 <__sfp_lock_acquire>
 800cf20:	6a23      	ldr	r3, [r4, #32]
 800cf22:	b11b      	cbz	r3, 800cf2c <__sinit+0x14>
 800cf24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf28:	f7ff bff0 	b.w	800cf0c <__sfp_lock_release>
 800cf2c:	4b04      	ldr	r3, [pc, #16]	@ (800cf40 <__sinit+0x28>)
 800cf2e:	6223      	str	r3, [r4, #32]
 800cf30:	4b04      	ldr	r3, [pc, #16]	@ (800cf44 <__sinit+0x2c>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d1f5      	bne.n	800cf24 <__sinit+0xc>
 800cf38:	f7ff ffc4 	bl	800cec4 <global_stdio_init.part.0>
 800cf3c:	e7f2      	b.n	800cf24 <__sinit+0xc>
 800cf3e:	bf00      	nop
 800cf40:	0800ce85 	.word	0x0800ce85
 800cf44:	20003950 	.word	0x20003950

0800cf48 <_fwalk_sglue>:
 800cf48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf4c:	4607      	mov	r7, r0
 800cf4e:	4688      	mov	r8, r1
 800cf50:	4614      	mov	r4, r2
 800cf52:	2600      	movs	r6, #0
 800cf54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf58:	f1b9 0901 	subs.w	r9, r9, #1
 800cf5c:	d505      	bpl.n	800cf6a <_fwalk_sglue+0x22>
 800cf5e:	6824      	ldr	r4, [r4, #0]
 800cf60:	2c00      	cmp	r4, #0
 800cf62:	d1f7      	bne.n	800cf54 <_fwalk_sglue+0xc>
 800cf64:	4630      	mov	r0, r6
 800cf66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf6a:	89ab      	ldrh	r3, [r5, #12]
 800cf6c:	2b01      	cmp	r3, #1
 800cf6e:	d907      	bls.n	800cf80 <_fwalk_sglue+0x38>
 800cf70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf74:	3301      	adds	r3, #1
 800cf76:	d003      	beq.n	800cf80 <_fwalk_sglue+0x38>
 800cf78:	4629      	mov	r1, r5
 800cf7a:	4638      	mov	r0, r7
 800cf7c:	47c0      	blx	r8
 800cf7e:	4306      	orrs	r6, r0
 800cf80:	3568      	adds	r5, #104	@ 0x68
 800cf82:	e7e9      	b.n	800cf58 <_fwalk_sglue+0x10>

0800cf84 <iprintf>:
 800cf84:	b40f      	push	{r0, r1, r2, r3}
 800cf86:	b507      	push	{r0, r1, r2, lr}
 800cf88:	4906      	ldr	r1, [pc, #24]	@ (800cfa4 <iprintf+0x20>)
 800cf8a:	ab04      	add	r3, sp, #16
 800cf8c:	6808      	ldr	r0, [r1, #0]
 800cf8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf92:	6881      	ldr	r1, [r0, #8]
 800cf94:	9301      	str	r3, [sp, #4]
 800cf96:	f002 fe13 	bl	800fbc0 <_vfiprintf_r>
 800cf9a:	b003      	add	sp, #12
 800cf9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfa0:	b004      	add	sp, #16
 800cfa2:	4770      	bx	lr
 800cfa4:	20000068 	.word	0x20000068

0800cfa8 <_puts_r>:
 800cfa8:	6a03      	ldr	r3, [r0, #32]
 800cfaa:	b570      	push	{r4, r5, r6, lr}
 800cfac:	6884      	ldr	r4, [r0, #8]
 800cfae:	4605      	mov	r5, r0
 800cfb0:	460e      	mov	r6, r1
 800cfb2:	b90b      	cbnz	r3, 800cfb8 <_puts_r+0x10>
 800cfb4:	f7ff ffb0 	bl	800cf18 <__sinit>
 800cfb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cfba:	07db      	lsls	r3, r3, #31
 800cfbc:	d405      	bmi.n	800cfca <_puts_r+0x22>
 800cfbe:	89a3      	ldrh	r3, [r4, #12]
 800cfc0:	0598      	lsls	r0, r3, #22
 800cfc2:	d402      	bmi.n	800cfca <_puts_r+0x22>
 800cfc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cfc6:	f000 f9c2 	bl	800d34e <__retarget_lock_acquire_recursive>
 800cfca:	89a3      	ldrh	r3, [r4, #12]
 800cfcc:	0719      	lsls	r1, r3, #28
 800cfce:	d502      	bpl.n	800cfd6 <_puts_r+0x2e>
 800cfd0:	6923      	ldr	r3, [r4, #16]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d135      	bne.n	800d042 <_puts_r+0x9a>
 800cfd6:	4621      	mov	r1, r4
 800cfd8:	4628      	mov	r0, r5
 800cfda:	f000 f8e5 	bl	800d1a8 <__swsetup_r>
 800cfde:	b380      	cbz	r0, 800d042 <_puts_r+0x9a>
 800cfe0:	f04f 35ff 	mov.w	r5, #4294967295
 800cfe4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cfe6:	07da      	lsls	r2, r3, #31
 800cfe8:	d405      	bmi.n	800cff6 <_puts_r+0x4e>
 800cfea:	89a3      	ldrh	r3, [r4, #12]
 800cfec:	059b      	lsls	r3, r3, #22
 800cfee:	d402      	bmi.n	800cff6 <_puts_r+0x4e>
 800cff0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cff2:	f000 f9ad 	bl	800d350 <__retarget_lock_release_recursive>
 800cff6:	4628      	mov	r0, r5
 800cff8:	bd70      	pop	{r4, r5, r6, pc}
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	da04      	bge.n	800d008 <_puts_r+0x60>
 800cffe:	69a2      	ldr	r2, [r4, #24]
 800d000:	429a      	cmp	r2, r3
 800d002:	dc17      	bgt.n	800d034 <_puts_r+0x8c>
 800d004:	290a      	cmp	r1, #10
 800d006:	d015      	beq.n	800d034 <_puts_r+0x8c>
 800d008:	6823      	ldr	r3, [r4, #0]
 800d00a:	1c5a      	adds	r2, r3, #1
 800d00c:	6022      	str	r2, [r4, #0]
 800d00e:	7019      	strb	r1, [r3, #0]
 800d010:	68a3      	ldr	r3, [r4, #8]
 800d012:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d016:	3b01      	subs	r3, #1
 800d018:	60a3      	str	r3, [r4, #8]
 800d01a:	2900      	cmp	r1, #0
 800d01c:	d1ed      	bne.n	800cffa <_puts_r+0x52>
 800d01e:	2b00      	cmp	r3, #0
 800d020:	da11      	bge.n	800d046 <_puts_r+0x9e>
 800d022:	4622      	mov	r2, r4
 800d024:	210a      	movs	r1, #10
 800d026:	4628      	mov	r0, r5
 800d028:	f000 f87f 	bl	800d12a <__swbuf_r>
 800d02c:	3001      	adds	r0, #1
 800d02e:	d0d7      	beq.n	800cfe0 <_puts_r+0x38>
 800d030:	250a      	movs	r5, #10
 800d032:	e7d7      	b.n	800cfe4 <_puts_r+0x3c>
 800d034:	4622      	mov	r2, r4
 800d036:	4628      	mov	r0, r5
 800d038:	f000 f877 	bl	800d12a <__swbuf_r>
 800d03c:	3001      	adds	r0, #1
 800d03e:	d1e7      	bne.n	800d010 <_puts_r+0x68>
 800d040:	e7ce      	b.n	800cfe0 <_puts_r+0x38>
 800d042:	3e01      	subs	r6, #1
 800d044:	e7e4      	b.n	800d010 <_puts_r+0x68>
 800d046:	6823      	ldr	r3, [r4, #0]
 800d048:	1c5a      	adds	r2, r3, #1
 800d04a:	6022      	str	r2, [r4, #0]
 800d04c:	220a      	movs	r2, #10
 800d04e:	701a      	strb	r2, [r3, #0]
 800d050:	e7ee      	b.n	800d030 <_puts_r+0x88>
	...

0800d054 <puts>:
 800d054:	4b02      	ldr	r3, [pc, #8]	@ (800d060 <puts+0xc>)
 800d056:	4601      	mov	r1, r0
 800d058:	6818      	ldr	r0, [r3, #0]
 800d05a:	f7ff bfa5 	b.w	800cfa8 <_puts_r>
 800d05e:	bf00      	nop
 800d060:	20000068 	.word	0x20000068

0800d064 <siprintf>:
 800d064:	b40e      	push	{r1, r2, r3}
 800d066:	b500      	push	{lr}
 800d068:	b09c      	sub	sp, #112	@ 0x70
 800d06a:	ab1d      	add	r3, sp, #116	@ 0x74
 800d06c:	9002      	str	r0, [sp, #8]
 800d06e:	9006      	str	r0, [sp, #24]
 800d070:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d074:	4809      	ldr	r0, [pc, #36]	@ (800d09c <siprintf+0x38>)
 800d076:	9107      	str	r1, [sp, #28]
 800d078:	9104      	str	r1, [sp, #16]
 800d07a:	4909      	ldr	r1, [pc, #36]	@ (800d0a0 <siprintf+0x3c>)
 800d07c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d080:	9105      	str	r1, [sp, #20]
 800d082:	6800      	ldr	r0, [r0, #0]
 800d084:	9301      	str	r3, [sp, #4]
 800d086:	a902      	add	r1, sp, #8
 800d088:	f002 fc74 	bl	800f974 <_svfiprintf_r>
 800d08c:	9b02      	ldr	r3, [sp, #8]
 800d08e:	2200      	movs	r2, #0
 800d090:	701a      	strb	r2, [r3, #0]
 800d092:	b01c      	add	sp, #112	@ 0x70
 800d094:	f85d eb04 	ldr.w	lr, [sp], #4
 800d098:	b003      	add	sp, #12
 800d09a:	4770      	bx	lr
 800d09c:	20000068 	.word	0x20000068
 800d0a0:	ffff0208 	.word	0xffff0208

0800d0a4 <__sread>:
 800d0a4:	b510      	push	{r4, lr}
 800d0a6:	460c      	mov	r4, r1
 800d0a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0ac:	f000 f900 	bl	800d2b0 <_read_r>
 800d0b0:	2800      	cmp	r0, #0
 800d0b2:	bfab      	itete	ge
 800d0b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d0b6:	89a3      	ldrhlt	r3, [r4, #12]
 800d0b8:	181b      	addge	r3, r3, r0
 800d0ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d0be:	bfac      	ite	ge
 800d0c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d0c2:	81a3      	strhlt	r3, [r4, #12]
 800d0c4:	bd10      	pop	{r4, pc}

0800d0c6 <__swrite>:
 800d0c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ca:	461f      	mov	r7, r3
 800d0cc:	898b      	ldrh	r3, [r1, #12]
 800d0ce:	05db      	lsls	r3, r3, #23
 800d0d0:	4605      	mov	r5, r0
 800d0d2:	460c      	mov	r4, r1
 800d0d4:	4616      	mov	r6, r2
 800d0d6:	d505      	bpl.n	800d0e4 <__swrite+0x1e>
 800d0d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0dc:	2302      	movs	r3, #2
 800d0de:	2200      	movs	r2, #0
 800d0e0:	f000 f8d4 	bl	800d28c <_lseek_r>
 800d0e4:	89a3      	ldrh	r3, [r4, #12]
 800d0e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d0ee:	81a3      	strh	r3, [r4, #12]
 800d0f0:	4632      	mov	r2, r6
 800d0f2:	463b      	mov	r3, r7
 800d0f4:	4628      	mov	r0, r5
 800d0f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0fa:	f000 b8eb 	b.w	800d2d4 <_write_r>

0800d0fe <__sseek>:
 800d0fe:	b510      	push	{r4, lr}
 800d100:	460c      	mov	r4, r1
 800d102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d106:	f000 f8c1 	bl	800d28c <_lseek_r>
 800d10a:	1c43      	adds	r3, r0, #1
 800d10c:	89a3      	ldrh	r3, [r4, #12]
 800d10e:	bf15      	itete	ne
 800d110:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d112:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d116:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d11a:	81a3      	strheq	r3, [r4, #12]
 800d11c:	bf18      	it	ne
 800d11e:	81a3      	strhne	r3, [r4, #12]
 800d120:	bd10      	pop	{r4, pc}

0800d122 <__sclose>:
 800d122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d126:	f000 b8a1 	b.w	800d26c <_close_r>

0800d12a <__swbuf_r>:
 800d12a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d12c:	460e      	mov	r6, r1
 800d12e:	4614      	mov	r4, r2
 800d130:	4605      	mov	r5, r0
 800d132:	b118      	cbz	r0, 800d13c <__swbuf_r+0x12>
 800d134:	6a03      	ldr	r3, [r0, #32]
 800d136:	b90b      	cbnz	r3, 800d13c <__swbuf_r+0x12>
 800d138:	f7ff feee 	bl	800cf18 <__sinit>
 800d13c:	69a3      	ldr	r3, [r4, #24]
 800d13e:	60a3      	str	r3, [r4, #8]
 800d140:	89a3      	ldrh	r3, [r4, #12]
 800d142:	071a      	lsls	r2, r3, #28
 800d144:	d501      	bpl.n	800d14a <__swbuf_r+0x20>
 800d146:	6923      	ldr	r3, [r4, #16]
 800d148:	b943      	cbnz	r3, 800d15c <__swbuf_r+0x32>
 800d14a:	4621      	mov	r1, r4
 800d14c:	4628      	mov	r0, r5
 800d14e:	f000 f82b 	bl	800d1a8 <__swsetup_r>
 800d152:	b118      	cbz	r0, 800d15c <__swbuf_r+0x32>
 800d154:	f04f 37ff 	mov.w	r7, #4294967295
 800d158:	4638      	mov	r0, r7
 800d15a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d15c:	6823      	ldr	r3, [r4, #0]
 800d15e:	6922      	ldr	r2, [r4, #16]
 800d160:	1a98      	subs	r0, r3, r2
 800d162:	6963      	ldr	r3, [r4, #20]
 800d164:	b2f6      	uxtb	r6, r6
 800d166:	4283      	cmp	r3, r0
 800d168:	4637      	mov	r7, r6
 800d16a:	dc05      	bgt.n	800d178 <__swbuf_r+0x4e>
 800d16c:	4621      	mov	r1, r4
 800d16e:	4628      	mov	r0, r5
 800d170:	f002 fec2 	bl	800fef8 <_fflush_r>
 800d174:	2800      	cmp	r0, #0
 800d176:	d1ed      	bne.n	800d154 <__swbuf_r+0x2a>
 800d178:	68a3      	ldr	r3, [r4, #8]
 800d17a:	3b01      	subs	r3, #1
 800d17c:	60a3      	str	r3, [r4, #8]
 800d17e:	6823      	ldr	r3, [r4, #0]
 800d180:	1c5a      	adds	r2, r3, #1
 800d182:	6022      	str	r2, [r4, #0]
 800d184:	701e      	strb	r6, [r3, #0]
 800d186:	6962      	ldr	r2, [r4, #20]
 800d188:	1c43      	adds	r3, r0, #1
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d004      	beq.n	800d198 <__swbuf_r+0x6e>
 800d18e:	89a3      	ldrh	r3, [r4, #12]
 800d190:	07db      	lsls	r3, r3, #31
 800d192:	d5e1      	bpl.n	800d158 <__swbuf_r+0x2e>
 800d194:	2e0a      	cmp	r6, #10
 800d196:	d1df      	bne.n	800d158 <__swbuf_r+0x2e>
 800d198:	4621      	mov	r1, r4
 800d19a:	4628      	mov	r0, r5
 800d19c:	f002 feac 	bl	800fef8 <_fflush_r>
 800d1a0:	2800      	cmp	r0, #0
 800d1a2:	d0d9      	beq.n	800d158 <__swbuf_r+0x2e>
 800d1a4:	e7d6      	b.n	800d154 <__swbuf_r+0x2a>
	...

0800d1a8 <__swsetup_r>:
 800d1a8:	b538      	push	{r3, r4, r5, lr}
 800d1aa:	4b29      	ldr	r3, [pc, #164]	@ (800d250 <__swsetup_r+0xa8>)
 800d1ac:	4605      	mov	r5, r0
 800d1ae:	6818      	ldr	r0, [r3, #0]
 800d1b0:	460c      	mov	r4, r1
 800d1b2:	b118      	cbz	r0, 800d1bc <__swsetup_r+0x14>
 800d1b4:	6a03      	ldr	r3, [r0, #32]
 800d1b6:	b90b      	cbnz	r3, 800d1bc <__swsetup_r+0x14>
 800d1b8:	f7ff feae 	bl	800cf18 <__sinit>
 800d1bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1c0:	0719      	lsls	r1, r3, #28
 800d1c2:	d422      	bmi.n	800d20a <__swsetup_r+0x62>
 800d1c4:	06da      	lsls	r2, r3, #27
 800d1c6:	d407      	bmi.n	800d1d8 <__swsetup_r+0x30>
 800d1c8:	2209      	movs	r2, #9
 800d1ca:	602a      	str	r2, [r5, #0]
 800d1cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1d0:	81a3      	strh	r3, [r4, #12]
 800d1d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d1d6:	e033      	b.n	800d240 <__swsetup_r+0x98>
 800d1d8:	0758      	lsls	r0, r3, #29
 800d1da:	d512      	bpl.n	800d202 <__swsetup_r+0x5a>
 800d1dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1de:	b141      	cbz	r1, 800d1f2 <__swsetup_r+0x4a>
 800d1e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1e4:	4299      	cmp	r1, r3
 800d1e6:	d002      	beq.n	800d1ee <__swsetup_r+0x46>
 800d1e8:	4628      	mov	r0, r5
 800d1ea:	f000 ff31 	bl	800e050 <_free_r>
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1f2:	89a3      	ldrh	r3, [r4, #12]
 800d1f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d1f8:	81a3      	strh	r3, [r4, #12]
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	6063      	str	r3, [r4, #4]
 800d1fe:	6923      	ldr	r3, [r4, #16]
 800d200:	6023      	str	r3, [r4, #0]
 800d202:	89a3      	ldrh	r3, [r4, #12]
 800d204:	f043 0308 	orr.w	r3, r3, #8
 800d208:	81a3      	strh	r3, [r4, #12]
 800d20a:	6923      	ldr	r3, [r4, #16]
 800d20c:	b94b      	cbnz	r3, 800d222 <__swsetup_r+0x7a>
 800d20e:	89a3      	ldrh	r3, [r4, #12]
 800d210:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d218:	d003      	beq.n	800d222 <__swsetup_r+0x7a>
 800d21a:	4621      	mov	r1, r4
 800d21c:	4628      	mov	r0, r5
 800d21e:	f002 fecb 	bl	800ffb8 <__smakebuf_r>
 800d222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d226:	f013 0201 	ands.w	r2, r3, #1
 800d22a:	d00a      	beq.n	800d242 <__swsetup_r+0x9a>
 800d22c:	2200      	movs	r2, #0
 800d22e:	60a2      	str	r2, [r4, #8]
 800d230:	6962      	ldr	r2, [r4, #20]
 800d232:	4252      	negs	r2, r2
 800d234:	61a2      	str	r2, [r4, #24]
 800d236:	6922      	ldr	r2, [r4, #16]
 800d238:	b942      	cbnz	r2, 800d24c <__swsetup_r+0xa4>
 800d23a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d23e:	d1c5      	bne.n	800d1cc <__swsetup_r+0x24>
 800d240:	bd38      	pop	{r3, r4, r5, pc}
 800d242:	0799      	lsls	r1, r3, #30
 800d244:	bf58      	it	pl
 800d246:	6962      	ldrpl	r2, [r4, #20]
 800d248:	60a2      	str	r2, [r4, #8]
 800d24a:	e7f4      	b.n	800d236 <__swsetup_r+0x8e>
 800d24c:	2000      	movs	r0, #0
 800d24e:	e7f7      	b.n	800d240 <__swsetup_r+0x98>
 800d250:	20000068 	.word	0x20000068

0800d254 <memset>:
 800d254:	4402      	add	r2, r0
 800d256:	4603      	mov	r3, r0
 800d258:	4293      	cmp	r3, r2
 800d25a:	d100      	bne.n	800d25e <memset+0xa>
 800d25c:	4770      	bx	lr
 800d25e:	f803 1b01 	strb.w	r1, [r3], #1
 800d262:	e7f9      	b.n	800d258 <memset+0x4>

0800d264 <_localeconv_r>:
 800d264:	4800      	ldr	r0, [pc, #0]	@ (800d268 <_localeconv_r+0x4>)
 800d266:	4770      	bx	lr
 800d268:	200001a8 	.word	0x200001a8

0800d26c <_close_r>:
 800d26c:	b538      	push	{r3, r4, r5, lr}
 800d26e:	4d06      	ldr	r5, [pc, #24]	@ (800d288 <_close_r+0x1c>)
 800d270:	2300      	movs	r3, #0
 800d272:	4604      	mov	r4, r0
 800d274:	4608      	mov	r0, r1
 800d276:	602b      	str	r3, [r5, #0]
 800d278:	f7f5 fbba 	bl	80029f0 <_close>
 800d27c:	1c43      	adds	r3, r0, #1
 800d27e:	d102      	bne.n	800d286 <_close_r+0x1a>
 800d280:	682b      	ldr	r3, [r5, #0]
 800d282:	b103      	cbz	r3, 800d286 <_close_r+0x1a>
 800d284:	6023      	str	r3, [r4, #0]
 800d286:	bd38      	pop	{r3, r4, r5, pc}
 800d288:	20003954 	.word	0x20003954

0800d28c <_lseek_r>:
 800d28c:	b538      	push	{r3, r4, r5, lr}
 800d28e:	4d07      	ldr	r5, [pc, #28]	@ (800d2ac <_lseek_r+0x20>)
 800d290:	4604      	mov	r4, r0
 800d292:	4608      	mov	r0, r1
 800d294:	4611      	mov	r1, r2
 800d296:	2200      	movs	r2, #0
 800d298:	602a      	str	r2, [r5, #0]
 800d29a:	461a      	mov	r2, r3
 800d29c:	f7f5 fbcf 	bl	8002a3e <_lseek>
 800d2a0:	1c43      	adds	r3, r0, #1
 800d2a2:	d102      	bne.n	800d2aa <_lseek_r+0x1e>
 800d2a4:	682b      	ldr	r3, [r5, #0]
 800d2a6:	b103      	cbz	r3, 800d2aa <_lseek_r+0x1e>
 800d2a8:	6023      	str	r3, [r4, #0]
 800d2aa:	bd38      	pop	{r3, r4, r5, pc}
 800d2ac:	20003954 	.word	0x20003954

0800d2b0 <_read_r>:
 800d2b0:	b538      	push	{r3, r4, r5, lr}
 800d2b2:	4d07      	ldr	r5, [pc, #28]	@ (800d2d0 <_read_r+0x20>)
 800d2b4:	4604      	mov	r4, r0
 800d2b6:	4608      	mov	r0, r1
 800d2b8:	4611      	mov	r1, r2
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	602a      	str	r2, [r5, #0]
 800d2be:	461a      	mov	r2, r3
 800d2c0:	f7f5 fb5d 	bl	800297e <_read>
 800d2c4:	1c43      	adds	r3, r0, #1
 800d2c6:	d102      	bne.n	800d2ce <_read_r+0x1e>
 800d2c8:	682b      	ldr	r3, [r5, #0]
 800d2ca:	b103      	cbz	r3, 800d2ce <_read_r+0x1e>
 800d2cc:	6023      	str	r3, [r4, #0]
 800d2ce:	bd38      	pop	{r3, r4, r5, pc}
 800d2d0:	20003954 	.word	0x20003954

0800d2d4 <_write_r>:
 800d2d4:	b538      	push	{r3, r4, r5, lr}
 800d2d6:	4d07      	ldr	r5, [pc, #28]	@ (800d2f4 <_write_r+0x20>)
 800d2d8:	4604      	mov	r4, r0
 800d2da:	4608      	mov	r0, r1
 800d2dc:	4611      	mov	r1, r2
 800d2de:	2200      	movs	r2, #0
 800d2e0:	602a      	str	r2, [r5, #0]
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	f7f5 fb68 	bl	80029b8 <_write>
 800d2e8:	1c43      	adds	r3, r0, #1
 800d2ea:	d102      	bne.n	800d2f2 <_write_r+0x1e>
 800d2ec:	682b      	ldr	r3, [r5, #0]
 800d2ee:	b103      	cbz	r3, 800d2f2 <_write_r+0x1e>
 800d2f0:	6023      	str	r3, [r4, #0]
 800d2f2:	bd38      	pop	{r3, r4, r5, pc}
 800d2f4:	20003954 	.word	0x20003954

0800d2f8 <__errno>:
 800d2f8:	4b01      	ldr	r3, [pc, #4]	@ (800d300 <__errno+0x8>)
 800d2fa:	6818      	ldr	r0, [r3, #0]
 800d2fc:	4770      	bx	lr
 800d2fe:	bf00      	nop
 800d300:	20000068 	.word	0x20000068

0800d304 <__libc_init_array>:
 800d304:	b570      	push	{r4, r5, r6, lr}
 800d306:	4d0d      	ldr	r5, [pc, #52]	@ (800d33c <__libc_init_array+0x38>)
 800d308:	4c0d      	ldr	r4, [pc, #52]	@ (800d340 <__libc_init_array+0x3c>)
 800d30a:	1b64      	subs	r4, r4, r5
 800d30c:	10a4      	asrs	r4, r4, #2
 800d30e:	2600      	movs	r6, #0
 800d310:	42a6      	cmp	r6, r4
 800d312:	d109      	bne.n	800d328 <__libc_init_array+0x24>
 800d314:	4d0b      	ldr	r5, [pc, #44]	@ (800d344 <__libc_init_array+0x40>)
 800d316:	4c0c      	ldr	r4, [pc, #48]	@ (800d348 <__libc_init_array+0x44>)
 800d318:	f003 fade 	bl	80108d8 <_init>
 800d31c:	1b64      	subs	r4, r4, r5
 800d31e:	10a4      	asrs	r4, r4, #2
 800d320:	2600      	movs	r6, #0
 800d322:	42a6      	cmp	r6, r4
 800d324:	d105      	bne.n	800d332 <__libc_init_array+0x2e>
 800d326:	bd70      	pop	{r4, r5, r6, pc}
 800d328:	f855 3b04 	ldr.w	r3, [r5], #4
 800d32c:	4798      	blx	r3
 800d32e:	3601      	adds	r6, #1
 800d330:	e7ee      	b.n	800d310 <__libc_init_array+0xc>
 800d332:	f855 3b04 	ldr.w	r3, [r5], #4
 800d336:	4798      	blx	r3
 800d338:	3601      	adds	r6, #1
 800d33a:	e7f2      	b.n	800d322 <__libc_init_array+0x1e>
 800d33c:	0801122c 	.word	0x0801122c
 800d340:	0801122c 	.word	0x0801122c
 800d344:	0801122c 	.word	0x0801122c
 800d348:	08011230 	.word	0x08011230

0800d34c <__retarget_lock_init_recursive>:
 800d34c:	4770      	bx	lr

0800d34e <__retarget_lock_acquire_recursive>:
 800d34e:	4770      	bx	lr

0800d350 <__retarget_lock_release_recursive>:
 800d350:	4770      	bx	lr

0800d352 <memcpy>:
 800d352:	440a      	add	r2, r1
 800d354:	4291      	cmp	r1, r2
 800d356:	f100 33ff 	add.w	r3, r0, #4294967295
 800d35a:	d100      	bne.n	800d35e <memcpy+0xc>
 800d35c:	4770      	bx	lr
 800d35e:	b510      	push	{r4, lr}
 800d360:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d364:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d368:	4291      	cmp	r1, r2
 800d36a:	d1f9      	bne.n	800d360 <memcpy+0xe>
 800d36c:	bd10      	pop	{r4, pc}
	...

0800d370 <nanf>:
 800d370:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d378 <nanf+0x8>
 800d374:	4770      	bx	lr
 800d376:	bf00      	nop
 800d378:	7fc00000 	.word	0x7fc00000

0800d37c <__assert_func>:
 800d37c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d37e:	4614      	mov	r4, r2
 800d380:	461a      	mov	r2, r3
 800d382:	4b09      	ldr	r3, [pc, #36]	@ (800d3a8 <__assert_func+0x2c>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	4605      	mov	r5, r0
 800d388:	68d8      	ldr	r0, [r3, #12]
 800d38a:	b954      	cbnz	r4, 800d3a2 <__assert_func+0x26>
 800d38c:	4b07      	ldr	r3, [pc, #28]	@ (800d3ac <__assert_func+0x30>)
 800d38e:	461c      	mov	r4, r3
 800d390:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d394:	9100      	str	r1, [sp, #0]
 800d396:	462b      	mov	r3, r5
 800d398:	4905      	ldr	r1, [pc, #20]	@ (800d3b0 <__assert_func+0x34>)
 800d39a:	f002 fdd5 	bl	800ff48 <fiprintf>
 800d39e:	f002 feaf 	bl	8010100 <abort>
 800d3a2:	4b04      	ldr	r3, [pc, #16]	@ (800d3b4 <__assert_func+0x38>)
 800d3a4:	e7f4      	b.n	800d390 <__assert_func+0x14>
 800d3a6:	bf00      	nop
 800d3a8:	20000068 	.word	0x20000068
 800d3ac:	08010e68 	.word	0x08010e68
 800d3b0:	08010e3a 	.word	0x08010e3a
 800d3b4:	08010e2d 	.word	0x08010e2d

0800d3b8 <quorem>:
 800d3b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3bc:	6903      	ldr	r3, [r0, #16]
 800d3be:	690c      	ldr	r4, [r1, #16]
 800d3c0:	42a3      	cmp	r3, r4
 800d3c2:	4607      	mov	r7, r0
 800d3c4:	db7e      	blt.n	800d4c4 <quorem+0x10c>
 800d3c6:	3c01      	subs	r4, #1
 800d3c8:	f101 0814 	add.w	r8, r1, #20
 800d3cc:	00a3      	lsls	r3, r4, #2
 800d3ce:	f100 0514 	add.w	r5, r0, #20
 800d3d2:	9300      	str	r3, [sp, #0]
 800d3d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3d8:	9301      	str	r3, [sp, #4]
 800d3da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d3de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d3ea:	fbb2 f6f3 	udiv	r6, r2, r3
 800d3ee:	d32e      	bcc.n	800d44e <quorem+0x96>
 800d3f0:	f04f 0a00 	mov.w	sl, #0
 800d3f4:	46c4      	mov	ip, r8
 800d3f6:	46ae      	mov	lr, r5
 800d3f8:	46d3      	mov	fp, sl
 800d3fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d3fe:	b298      	uxth	r0, r3
 800d400:	fb06 a000 	mla	r0, r6, r0, sl
 800d404:	0c02      	lsrs	r2, r0, #16
 800d406:	0c1b      	lsrs	r3, r3, #16
 800d408:	fb06 2303 	mla	r3, r6, r3, r2
 800d40c:	f8de 2000 	ldr.w	r2, [lr]
 800d410:	b280      	uxth	r0, r0
 800d412:	b292      	uxth	r2, r2
 800d414:	1a12      	subs	r2, r2, r0
 800d416:	445a      	add	r2, fp
 800d418:	f8de 0000 	ldr.w	r0, [lr]
 800d41c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d420:	b29b      	uxth	r3, r3
 800d422:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d426:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d42a:	b292      	uxth	r2, r2
 800d42c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d430:	45e1      	cmp	r9, ip
 800d432:	f84e 2b04 	str.w	r2, [lr], #4
 800d436:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d43a:	d2de      	bcs.n	800d3fa <quorem+0x42>
 800d43c:	9b00      	ldr	r3, [sp, #0]
 800d43e:	58eb      	ldr	r3, [r5, r3]
 800d440:	b92b      	cbnz	r3, 800d44e <quorem+0x96>
 800d442:	9b01      	ldr	r3, [sp, #4]
 800d444:	3b04      	subs	r3, #4
 800d446:	429d      	cmp	r5, r3
 800d448:	461a      	mov	r2, r3
 800d44a:	d32f      	bcc.n	800d4ac <quorem+0xf4>
 800d44c:	613c      	str	r4, [r7, #16]
 800d44e:	4638      	mov	r0, r7
 800d450:	f001 f9c2 	bl	800e7d8 <__mcmp>
 800d454:	2800      	cmp	r0, #0
 800d456:	db25      	blt.n	800d4a4 <quorem+0xec>
 800d458:	4629      	mov	r1, r5
 800d45a:	2000      	movs	r0, #0
 800d45c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d460:	f8d1 c000 	ldr.w	ip, [r1]
 800d464:	fa1f fe82 	uxth.w	lr, r2
 800d468:	fa1f f38c 	uxth.w	r3, ip
 800d46c:	eba3 030e 	sub.w	r3, r3, lr
 800d470:	4403      	add	r3, r0
 800d472:	0c12      	lsrs	r2, r2, #16
 800d474:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d478:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d47c:	b29b      	uxth	r3, r3
 800d47e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d482:	45c1      	cmp	r9, r8
 800d484:	f841 3b04 	str.w	r3, [r1], #4
 800d488:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d48c:	d2e6      	bcs.n	800d45c <quorem+0xa4>
 800d48e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d492:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d496:	b922      	cbnz	r2, 800d4a2 <quorem+0xea>
 800d498:	3b04      	subs	r3, #4
 800d49a:	429d      	cmp	r5, r3
 800d49c:	461a      	mov	r2, r3
 800d49e:	d30b      	bcc.n	800d4b8 <quorem+0x100>
 800d4a0:	613c      	str	r4, [r7, #16]
 800d4a2:	3601      	adds	r6, #1
 800d4a4:	4630      	mov	r0, r6
 800d4a6:	b003      	add	sp, #12
 800d4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ac:	6812      	ldr	r2, [r2, #0]
 800d4ae:	3b04      	subs	r3, #4
 800d4b0:	2a00      	cmp	r2, #0
 800d4b2:	d1cb      	bne.n	800d44c <quorem+0x94>
 800d4b4:	3c01      	subs	r4, #1
 800d4b6:	e7c6      	b.n	800d446 <quorem+0x8e>
 800d4b8:	6812      	ldr	r2, [r2, #0]
 800d4ba:	3b04      	subs	r3, #4
 800d4bc:	2a00      	cmp	r2, #0
 800d4be:	d1ef      	bne.n	800d4a0 <quorem+0xe8>
 800d4c0:	3c01      	subs	r4, #1
 800d4c2:	e7ea      	b.n	800d49a <quorem+0xe2>
 800d4c4:	2000      	movs	r0, #0
 800d4c6:	e7ee      	b.n	800d4a6 <quorem+0xee>

0800d4c8 <_dtoa_r>:
 800d4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4cc:	69c7      	ldr	r7, [r0, #28]
 800d4ce:	b099      	sub	sp, #100	@ 0x64
 800d4d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d4d4:	ec55 4b10 	vmov	r4, r5, d0
 800d4d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d4da:	9109      	str	r1, [sp, #36]	@ 0x24
 800d4dc:	4683      	mov	fp, r0
 800d4de:	920e      	str	r2, [sp, #56]	@ 0x38
 800d4e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d4e2:	b97f      	cbnz	r7, 800d504 <_dtoa_r+0x3c>
 800d4e4:	2010      	movs	r0, #16
 800d4e6:	f000 fdfd 	bl	800e0e4 <malloc>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	f8cb 001c 	str.w	r0, [fp, #28]
 800d4f0:	b920      	cbnz	r0, 800d4fc <_dtoa_r+0x34>
 800d4f2:	4ba7      	ldr	r3, [pc, #668]	@ (800d790 <_dtoa_r+0x2c8>)
 800d4f4:	21ef      	movs	r1, #239	@ 0xef
 800d4f6:	48a7      	ldr	r0, [pc, #668]	@ (800d794 <_dtoa_r+0x2cc>)
 800d4f8:	f7ff ff40 	bl	800d37c <__assert_func>
 800d4fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d500:	6007      	str	r7, [r0, #0]
 800d502:	60c7      	str	r7, [r0, #12]
 800d504:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d508:	6819      	ldr	r1, [r3, #0]
 800d50a:	b159      	cbz	r1, 800d524 <_dtoa_r+0x5c>
 800d50c:	685a      	ldr	r2, [r3, #4]
 800d50e:	604a      	str	r2, [r1, #4]
 800d510:	2301      	movs	r3, #1
 800d512:	4093      	lsls	r3, r2
 800d514:	608b      	str	r3, [r1, #8]
 800d516:	4658      	mov	r0, fp
 800d518:	f000 feda 	bl	800e2d0 <_Bfree>
 800d51c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d520:	2200      	movs	r2, #0
 800d522:	601a      	str	r2, [r3, #0]
 800d524:	1e2b      	subs	r3, r5, #0
 800d526:	bfb9      	ittee	lt
 800d528:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d52c:	9303      	strlt	r3, [sp, #12]
 800d52e:	2300      	movge	r3, #0
 800d530:	6033      	strge	r3, [r6, #0]
 800d532:	9f03      	ldr	r7, [sp, #12]
 800d534:	4b98      	ldr	r3, [pc, #608]	@ (800d798 <_dtoa_r+0x2d0>)
 800d536:	bfbc      	itt	lt
 800d538:	2201      	movlt	r2, #1
 800d53a:	6032      	strlt	r2, [r6, #0]
 800d53c:	43bb      	bics	r3, r7
 800d53e:	d112      	bne.n	800d566 <_dtoa_r+0x9e>
 800d540:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d542:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d546:	6013      	str	r3, [r2, #0]
 800d548:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d54c:	4323      	orrs	r3, r4
 800d54e:	f000 854d 	beq.w	800dfec <_dtoa_r+0xb24>
 800d552:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d554:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d7ac <_dtoa_r+0x2e4>
 800d558:	2b00      	cmp	r3, #0
 800d55a:	f000 854f 	beq.w	800dffc <_dtoa_r+0xb34>
 800d55e:	f10a 0303 	add.w	r3, sl, #3
 800d562:	f000 bd49 	b.w	800dff8 <_dtoa_r+0xb30>
 800d566:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d56a:	2200      	movs	r2, #0
 800d56c:	ec51 0b17 	vmov	r0, r1, d7
 800d570:	2300      	movs	r3, #0
 800d572:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d576:	f7f3 faa7 	bl	8000ac8 <__aeabi_dcmpeq>
 800d57a:	4680      	mov	r8, r0
 800d57c:	b158      	cbz	r0, 800d596 <_dtoa_r+0xce>
 800d57e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d580:	2301      	movs	r3, #1
 800d582:	6013      	str	r3, [r2, #0]
 800d584:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d586:	b113      	cbz	r3, 800d58e <_dtoa_r+0xc6>
 800d588:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d58a:	4b84      	ldr	r3, [pc, #528]	@ (800d79c <_dtoa_r+0x2d4>)
 800d58c:	6013      	str	r3, [r2, #0]
 800d58e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d7b0 <_dtoa_r+0x2e8>
 800d592:	f000 bd33 	b.w	800dffc <_dtoa_r+0xb34>
 800d596:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d59a:	aa16      	add	r2, sp, #88	@ 0x58
 800d59c:	a917      	add	r1, sp, #92	@ 0x5c
 800d59e:	4658      	mov	r0, fp
 800d5a0:	f001 fa3a 	bl	800ea18 <__d2b>
 800d5a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d5a8:	4681      	mov	r9, r0
 800d5aa:	2e00      	cmp	r6, #0
 800d5ac:	d077      	beq.n	800d69e <_dtoa_r+0x1d6>
 800d5ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d5b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d5b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d5c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d5c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	4b74      	ldr	r3, [pc, #464]	@ (800d7a0 <_dtoa_r+0x2d8>)
 800d5ce:	f7f2 fe5b 	bl	8000288 <__aeabi_dsub>
 800d5d2:	a369      	add	r3, pc, #420	@ (adr r3, 800d778 <_dtoa_r+0x2b0>)
 800d5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d8:	f7f3 f80e 	bl	80005f8 <__aeabi_dmul>
 800d5dc:	a368      	add	r3, pc, #416	@ (adr r3, 800d780 <_dtoa_r+0x2b8>)
 800d5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e2:	f7f2 fe53 	bl	800028c <__adddf3>
 800d5e6:	4604      	mov	r4, r0
 800d5e8:	4630      	mov	r0, r6
 800d5ea:	460d      	mov	r5, r1
 800d5ec:	f7f2 ff9a 	bl	8000524 <__aeabi_i2d>
 800d5f0:	a365      	add	r3, pc, #404	@ (adr r3, 800d788 <_dtoa_r+0x2c0>)
 800d5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f6:	f7f2 ffff 	bl	80005f8 <__aeabi_dmul>
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	4620      	mov	r0, r4
 800d600:	4629      	mov	r1, r5
 800d602:	f7f2 fe43 	bl	800028c <__adddf3>
 800d606:	4604      	mov	r4, r0
 800d608:	460d      	mov	r5, r1
 800d60a:	f7f3 faa5 	bl	8000b58 <__aeabi_d2iz>
 800d60e:	2200      	movs	r2, #0
 800d610:	4607      	mov	r7, r0
 800d612:	2300      	movs	r3, #0
 800d614:	4620      	mov	r0, r4
 800d616:	4629      	mov	r1, r5
 800d618:	f7f3 fa60 	bl	8000adc <__aeabi_dcmplt>
 800d61c:	b140      	cbz	r0, 800d630 <_dtoa_r+0x168>
 800d61e:	4638      	mov	r0, r7
 800d620:	f7f2 ff80 	bl	8000524 <__aeabi_i2d>
 800d624:	4622      	mov	r2, r4
 800d626:	462b      	mov	r3, r5
 800d628:	f7f3 fa4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d62c:	b900      	cbnz	r0, 800d630 <_dtoa_r+0x168>
 800d62e:	3f01      	subs	r7, #1
 800d630:	2f16      	cmp	r7, #22
 800d632:	d851      	bhi.n	800d6d8 <_dtoa_r+0x210>
 800d634:	4b5b      	ldr	r3, [pc, #364]	@ (800d7a4 <_dtoa_r+0x2dc>)
 800d636:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d63e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d642:	f7f3 fa4b 	bl	8000adc <__aeabi_dcmplt>
 800d646:	2800      	cmp	r0, #0
 800d648:	d048      	beq.n	800d6dc <_dtoa_r+0x214>
 800d64a:	3f01      	subs	r7, #1
 800d64c:	2300      	movs	r3, #0
 800d64e:	9312      	str	r3, [sp, #72]	@ 0x48
 800d650:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d652:	1b9b      	subs	r3, r3, r6
 800d654:	1e5a      	subs	r2, r3, #1
 800d656:	bf44      	itt	mi
 800d658:	f1c3 0801 	rsbmi	r8, r3, #1
 800d65c:	2300      	movmi	r3, #0
 800d65e:	9208      	str	r2, [sp, #32]
 800d660:	bf54      	ite	pl
 800d662:	f04f 0800 	movpl.w	r8, #0
 800d666:	9308      	strmi	r3, [sp, #32]
 800d668:	2f00      	cmp	r7, #0
 800d66a:	db39      	blt.n	800d6e0 <_dtoa_r+0x218>
 800d66c:	9b08      	ldr	r3, [sp, #32]
 800d66e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d670:	443b      	add	r3, r7
 800d672:	9308      	str	r3, [sp, #32]
 800d674:	2300      	movs	r3, #0
 800d676:	930a      	str	r3, [sp, #40]	@ 0x28
 800d678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d67a:	2b09      	cmp	r3, #9
 800d67c:	d864      	bhi.n	800d748 <_dtoa_r+0x280>
 800d67e:	2b05      	cmp	r3, #5
 800d680:	bfc4      	itt	gt
 800d682:	3b04      	subgt	r3, #4
 800d684:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d688:	f1a3 0302 	sub.w	r3, r3, #2
 800d68c:	bfcc      	ite	gt
 800d68e:	2400      	movgt	r4, #0
 800d690:	2401      	movle	r4, #1
 800d692:	2b03      	cmp	r3, #3
 800d694:	d863      	bhi.n	800d75e <_dtoa_r+0x296>
 800d696:	e8df f003 	tbb	[pc, r3]
 800d69a:	372a      	.short	0x372a
 800d69c:	5535      	.short	0x5535
 800d69e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d6a2:	441e      	add	r6, r3
 800d6a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d6a8:	2b20      	cmp	r3, #32
 800d6aa:	bfc1      	itttt	gt
 800d6ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d6b0:	409f      	lslgt	r7, r3
 800d6b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d6b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d6ba:	bfd6      	itet	le
 800d6bc:	f1c3 0320 	rsble	r3, r3, #32
 800d6c0:	ea47 0003 	orrgt.w	r0, r7, r3
 800d6c4:	fa04 f003 	lslle.w	r0, r4, r3
 800d6c8:	f7f2 ff1c 	bl	8000504 <__aeabi_ui2d>
 800d6cc:	2201      	movs	r2, #1
 800d6ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d6d2:	3e01      	subs	r6, #1
 800d6d4:	9214      	str	r2, [sp, #80]	@ 0x50
 800d6d6:	e777      	b.n	800d5c8 <_dtoa_r+0x100>
 800d6d8:	2301      	movs	r3, #1
 800d6da:	e7b8      	b.n	800d64e <_dtoa_r+0x186>
 800d6dc:	9012      	str	r0, [sp, #72]	@ 0x48
 800d6de:	e7b7      	b.n	800d650 <_dtoa_r+0x188>
 800d6e0:	427b      	negs	r3, r7
 800d6e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	eba8 0807 	sub.w	r8, r8, r7
 800d6ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d6ec:	e7c4      	b.n	800d678 <_dtoa_r+0x1b0>
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	dc35      	bgt.n	800d764 <_dtoa_r+0x29c>
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	9300      	str	r3, [sp, #0]
 800d6fc:	9307      	str	r3, [sp, #28]
 800d6fe:	461a      	mov	r2, r3
 800d700:	920e      	str	r2, [sp, #56]	@ 0x38
 800d702:	e00b      	b.n	800d71c <_dtoa_r+0x254>
 800d704:	2301      	movs	r3, #1
 800d706:	e7f3      	b.n	800d6f0 <_dtoa_r+0x228>
 800d708:	2300      	movs	r3, #0
 800d70a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d70c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d70e:	18fb      	adds	r3, r7, r3
 800d710:	9300      	str	r3, [sp, #0]
 800d712:	3301      	adds	r3, #1
 800d714:	2b01      	cmp	r3, #1
 800d716:	9307      	str	r3, [sp, #28]
 800d718:	bfb8      	it	lt
 800d71a:	2301      	movlt	r3, #1
 800d71c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d720:	2100      	movs	r1, #0
 800d722:	2204      	movs	r2, #4
 800d724:	f102 0514 	add.w	r5, r2, #20
 800d728:	429d      	cmp	r5, r3
 800d72a:	d91f      	bls.n	800d76c <_dtoa_r+0x2a4>
 800d72c:	6041      	str	r1, [r0, #4]
 800d72e:	4658      	mov	r0, fp
 800d730:	f000 fd8e 	bl	800e250 <_Balloc>
 800d734:	4682      	mov	sl, r0
 800d736:	2800      	cmp	r0, #0
 800d738:	d13c      	bne.n	800d7b4 <_dtoa_r+0x2ec>
 800d73a:	4b1b      	ldr	r3, [pc, #108]	@ (800d7a8 <_dtoa_r+0x2e0>)
 800d73c:	4602      	mov	r2, r0
 800d73e:	f240 11af 	movw	r1, #431	@ 0x1af
 800d742:	e6d8      	b.n	800d4f6 <_dtoa_r+0x2e>
 800d744:	2301      	movs	r3, #1
 800d746:	e7e0      	b.n	800d70a <_dtoa_r+0x242>
 800d748:	2401      	movs	r4, #1
 800d74a:	2300      	movs	r3, #0
 800d74c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d74e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d750:	f04f 33ff 	mov.w	r3, #4294967295
 800d754:	9300      	str	r3, [sp, #0]
 800d756:	9307      	str	r3, [sp, #28]
 800d758:	2200      	movs	r2, #0
 800d75a:	2312      	movs	r3, #18
 800d75c:	e7d0      	b.n	800d700 <_dtoa_r+0x238>
 800d75e:	2301      	movs	r3, #1
 800d760:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d762:	e7f5      	b.n	800d750 <_dtoa_r+0x288>
 800d764:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d766:	9300      	str	r3, [sp, #0]
 800d768:	9307      	str	r3, [sp, #28]
 800d76a:	e7d7      	b.n	800d71c <_dtoa_r+0x254>
 800d76c:	3101      	adds	r1, #1
 800d76e:	0052      	lsls	r2, r2, #1
 800d770:	e7d8      	b.n	800d724 <_dtoa_r+0x25c>
 800d772:	bf00      	nop
 800d774:	f3af 8000 	nop.w
 800d778:	636f4361 	.word	0x636f4361
 800d77c:	3fd287a7 	.word	0x3fd287a7
 800d780:	8b60c8b3 	.word	0x8b60c8b3
 800d784:	3fc68a28 	.word	0x3fc68a28
 800d788:	509f79fb 	.word	0x509f79fb
 800d78c:	3fd34413 	.word	0x3fd34413
 800d790:	08010e76 	.word	0x08010e76
 800d794:	08010e8d 	.word	0x08010e8d
 800d798:	7ff00000 	.word	0x7ff00000
 800d79c:	08010e05 	.word	0x08010e05
 800d7a0:	3ff80000 	.word	0x3ff80000
 800d7a4:	08010f88 	.word	0x08010f88
 800d7a8:	08010ee5 	.word	0x08010ee5
 800d7ac:	08010e72 	.word	0x08010e72
 800d7b0:	08010e04 	.word	0x08010e04
 800d7b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d7b8:	6018      	str	r0, [r3, #0]
 800d7ba:	9b07      	ldr	r3, [sp, #28]
 800d7bc:	2b0e      	cmp	r3, #14
 800d7be:	f200 80a4 	bhi.w	800d90a <_dtoa_r+0x442>
 800d7c2:	2c00      	cmp	r4, #0
 800d7c4:	f000 80a1 	beq.w	800d90a <_dtoa_r+0x442>
 800d7c8:	2f00      	cmp	r7, #0
 800d7ca:	dd33      	ble.n	800d834 <_dtoa_r+0x36c>
 800d7cc:	4bad      	ldr	r3, [pc, #692]	@ (800da84 <_dtoa_r+0x5bc>)
 800d7ce:	f007 020f 	and.w	r2, r7, #15
 800d7d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7d6:	ed93 7b00 	vldr	d7, [r3]
 800d7da:	05f8      	lsls	r0, r7, #23
 800d7dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d7e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d7e4:	d516      	bpl.n	800d814 <_dtoa_r+0x34c>
 800d7e6:	4ba8      	ldr	r3, [pc, #672]	@ (800da88 <_dtoa_r+0x5c0>)
 800d7e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d7ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d7f0:	f7f3 f82c 	bl	800084c <__aeabi_ddiv>
 800d7f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7f8:	f004 040f 	and.w	r4, r4, #15
 800d7fc:	2603      	movs	r6, #3
 800d7fe:	4da2      	ldr	r5, [pc, #648]	@ (800da88 <_dtoa_r+0x5c0>)
 800d800:	b954      	cbnz	r4, 800d818 <_dtoa_r+0x350>
 800d802:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d80a:	f7f3 f81f 	bl	800084c <__aeabi_ddiv>
 800d80e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d812:	e028      	b.n	800d866 <_dtoa_r+0x39e>
 800d814:	2602      	movs	r6, #2
 800d816:	e7f2      	b.n	800d7fe <_dtoa_r+0x336>
 800d818:	07e1      	lsls	r1, r4, #31
 800d81a:	d508      	bpl.n	800d82e <_dtoa_r+0x366>
 800d81c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d820:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d824:	f7f2 fee8 	bl	80005f8 <__aeabi_dmul>
 800d828:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d82c:	3601      	adds	r6, #1
 800d82e:	1064      	asrs	r4, r4, #1
 800d830:	3508      	adds	r5, #8
 800d832:	e7e5      	b.n	800d800 <_dtoa_r+0x338>
 800d834:	f000 80d2 	beq.w	800d9dc <_dtoa_r+0x514>
 800d838:	427c      	negs	r4, r7
 800d83a:	4b92      	ldr	r3, [pc, #584]	@ (800da84 <_dtoa_r+0x5bc>)
 800d83c:	4d92      	ldr	r5, [pc, #584]	@ (800da88 <_dtoa_r+0x5c0>)
 800d83e:	f004 020f 	and.w	r2, r4, #15
 800d842:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d84a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d84e:	f7f2 fed3 	bl	80005f8 <__aeabi_dmul>
 800d852:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d856:	1124      	asrs	r4, r4, #4
 800d858:	2300      	movs	r3, #0
 800d85a:	2602      	movs	r6, #2
 800d85c:	2c00      	cmp	r4, #0
 800d85e:	f040 80b2 	bne.w	800d9c6 <_dtoa_r+0x4fe>
 800d862:	2b00      	cmp	r3, #0
 800d864:	d1d3      	bne.n	800d80e <_dtoa_r+0x346>
 800d866:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d868:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	f000 80b7 	beq.w	800d9e0 <_dtoa_r+0x518>
 800d872:	4b86      	ldr	r3, [pc, #536]	@ (800da8c <_dtoa_r+0x5c4>)
 800d874:	2200      	movs	r2, #0
 800d876:	4620      	mov	r0, r4
 800d878:	4629      	mov	r1, r5
 800d87a:	f7f3 f92f 	bl	8000adc <__aeabi_dcmplt>
 800d87e:	2800      	cmp	r0, #0
 800d880:	f000 80ae 	beq.w	800d9e0 <_dtoa_r+0x518>
 800d884:	9b07      	ldr	r3, [sp, #28]
 800d886:	2b00      	cmp	r3, #0
 800d888:	f000 80aa 	beq.w	800d9e0 <_dtoa_r+0x518>
 800d88c:	9b00      	ldr	r3, [sp, #0]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	dd37      	ble.n	800d902 <_dtoa_r+0x43a>
 800d892:	1e7b      	subs	r3, r7, #1
 800d894:	9304      	str	r3, [sp, #16]
 800d896:	4620      	mov	r0, r4
 800d898:	4b7d      	ldr	r3, [pc, #500]	@ (800da90 <_dtoa_r+0x5c8>)
 800d89a:	2200      	movs	r2, #0
 800d89c:	4629      	mov	r1, r5
 800d89e:	f7f2 feab 	bl	80005f8 <__aeabi_dmul>
 800d8a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8a6:	9c00      	ldr	r4, [sp, #0]
 800d8a8:	3601      	adds	r6, #1
 800d8aa:	4630      	mov	r0, r6
 800d8ac:	f7f2 fe3a 	bl	8000524 <__aeabi_i2d>
 800d8b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d8b4:	f7f2 fea0 	bl	80005f8 <__aeabi_dmul>
 800d8b8:	4b76      	ldr	r3, [pc, #472]	@ (800da94 <_dtoa_r+0x5cc>)
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	f7f2 fce6 	bl	800028c <__adddf3>
 800d8c0:	4605      	mov	r5, r0
 800d8c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d8c6:	2c00      	cmp	r4, #0
 800d8c8:	f040 808d 	bne.w	800d9e6 <_dtoa_r+0x51e>
 800d8cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8d0:	4b71      	ldr	r3, [pc, #452]	@ (800da98 <_dtoa_r+0x5d0>)
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	f7f2 fcd8 	bl	8000288 <__aeabi_dsub>
 800d8d8:	4602      	mov	r2, r0
 800d8da:	460b      	mov	r3, r1
 800d8dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d8e0:	462a      	mov	r2, r5
 800d8e2:	4633      	mov	r3, r6
 800d8e4:	f7f3 f918 	bl	8000b18 <__aeabi_dcmpgt>
 800d8e8:	2800      	cmp	r0, #0
 800d8ea:	f040 828b 	bne.w	800de04 <_dtoa_r+0x93c>
 800d8ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8f2:	462a      	mov	r2, r5
 800d8f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d8f8:	f7f3 f8f0 	bl	8000adc <__aeabi_dcmplt>
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	f040 8128 	bne.w	800db52 <_dtoa_r+0x68a>
 800d902:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d906:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d90a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	f2c0 815a 	blt.w	800dbc6 <_dtoa_r+0x6fe>
 800d912:	2f0e      	cmp	r7, #14
 800d914:	f300 8157 	bgt.w	800dbc6 <_dtoa_r+0x6fe>
 800d918:	4b5a      	ldr	r3, [pc, #360]	@ (800da84 <_dtoa_r+0x5bc>)
 800d91a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d91e:	ed93 7b00 	vldr	d7, [r3]
 800d922:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d924:	2b00      	cmp	r3, #0
 800d926:	ed8d 7b00 	vstr	d7, [sp]
 800d92a:	da03      	bge.n	800d934 <_dtoa_r+0x46c>
 800d92c:	9b07      	ldr	r3, [sp, #28]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	f340 8101 	ble.w	800db36 <_dtoa_r+0x66e>
 800d934:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d938:	4656      	mov	r6, sl
 800d93a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d93e:	4620      	mov	r0, r4
 800d940:	4629      	mov	r1, r5
 800d942:	f7f2 ff83 	bl	800084c <__aeabi_ddiv>
 800d946:	f7f3 f907 	bl	8000b58 <__aeabi_d2iz>
 800d94a:	4680      	mov	r8, r0
 800d94c:	f7f2 fdea 	bl	8000524 <__aeabi_i2d>
 800d950:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d954:	f7f2 fe50 	bl	80005f8 <__aeabi_dmul>
 800d958:	4602      	mov	r2, r0
 800d95a:	460b      	mov	r3, r1
 800d95c:	4620      	mov	r0, r4
 800d95e:	4629      	mov	r1, r5
 800d960:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d964:	f7f2 fc90 	bl	8000288 <__aeabi_dsub>
 800d968:	f806 4b01 	strb.w	r4, [r6], #1
 800d96c:	9d07      	ldr	r5, [sp, #28]
 800d96e:	eba6 040a 	sub.w	r4, r6, sl
 800d972:	42a5      	cmp	r5, r4
 800d974:	4602      	mov	r2, r0
 800d976:	460b      	mov	r3, r1
 800d978:	f040 8117 	bne.w	800dbaa <_dtoa_r+0x6e2>
 800d97c:	f7f2 fc86 	bl	800028c <__adddf3>
 800d980:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d984:	4604      	mov	r4, r0
 800d986:	460d      	mov	r5, r1
 800d988:	f7f3 f8c6 	bl	8000b18 <__aeabi_dcmpgt>
 800d98c:	2800      	cmp	r0, #0
 800d98e:	f040 80f9 	bne.w	800db84 <_dtoa_r+0x6bc>
 800d992:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d996:	4620      	mov	r0, r4
 800d998:	4629      	mov	r1, r5
 800d99a:	f7f3 f895 	bl	8000ac8 <__aeabi_dcmpeq>
 800d99e:	b118      	cbz	r0, 800d9a8 <_dtoa_r+0x4e0>
 800d9a0:	f018 0f01 	tst.w	r8, #1
 800d9a4:	f040 80ee 	bne.w	800db84 <_dtoa_r+0x6bc>
 800d9a8:	4649      	mov	r1, r9
 800d9aa:	4658      	mov	r0, fp
 800d9ac:	f000 fc90 	bl	800e2d0 <_Bfree>
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	7033      	strb	r3, [r6, #0]
 800d9b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d9b6:	3701      	adds	r7, #1
 800d9b8:	601f      	str	r7, [r3, #0]
 800d9ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	f000 831d 	beq.w	800dffc <_dtoa_r+0xb34>
 800d9c2:	601e      	str	r6, [r3, #0]
 800d9c4:	e31a      	b.n	800dffc <_dtoa_r+0xb34>
 800d9c6:	07e2      	lsls	r2, r4, #31
 800d9c8:	d505      	bpl.n	800d9d6 <_dtoa_r+0x50e>
 800d9ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d9ce:	f7f2 fe13 	bl	80005f8 <__aeabi_dmul>
 800d9d2:	3601      	adds	r6, #1
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	1064      	asrs	r4, r4, #1
 800d9d8:	3508      	adds	r5, #8
 800d9da:	e73f      	b.n	800d85c <_dtoa_r+0x394>
 800d9dc:	2602      	movs	r6, #2
 800d9de:	e742      	b.n	800d866 <_dtoa_r+0x39e>
 800d9e0:	9c07      	ldr	r4, [sp, #28]
 800d9e2:	9704      	str	r7, [sp, #16]
 800d9e4:	e761      	b.n	800d8aa <_dtoa_r+0x3e2>
 800d9e6:	4b27      	ldr	r3, [pc, #156]	@ (800da84 <_dtoa_r+0x5bc>)
 800d9e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d9ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d9ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d9f2:	4454      	add	r4, sl
 800d9f4:	2900      	cmp	r1, #0
 800d9f6:	d053      	beq.n	800daa0 <_dtoa_r+0x5d8>
 800d9f8:	4928      	ldr	r1, [pc, #160]	@ (800da9c <_dtoa_r+0x5d4>)
 800d9fa:	2000      	movs	r0, #0
 800d9fc:	f7f2 ff26 	bl	800084c <__aeabi_ddiv>
 800da00:	4633      	mov	r3, r6
 800da02:	462a      	mov	r2, r5
 800da04:	f7f2 fc40 	bl	8000288 <__aeabi_dsub>
 800da08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da0c:	4656      	mov	r6, sl
 800da0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da12:	f7f3 f8a1 	bl	8000b58 <__aeabi_d2iz>
 800da16:	4605      	mov	r5, r0
 800da18:	f7f2 fd84 	bl	8000524 <__aeabi_i2d>
 800da1c:	4602      	mov	r2, r0
 800da1e:	460b      	mov	r3, r1
 800da20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da24:	f7f2 fc30 	bl	8000288 <__aeabi_dsub>
 800da28:	3530      	adds	r5, #48	@ 0x30
 800da2a:	4602      	mov	r2, r0
 800da2c:	460b      	mov	r3, r1
 800da2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da32:	f806 5b01 	strb.w	r5, [r6], #1
 800da36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800da3a:	f7f3 f84f 	bl	8000adc <__aeabi_dcmplt>
 800da3e:	2800      	cmp	r0, #0
 800da40:	d171      	bne.n	800db26 <_dtoa_r+0x65e>
 800da42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da46:	4911      	ldr	r1, [pc, #68]	@ (800da8c <_dtoa_r+0x5c4>)
 800da48:	2000      	movs	r0, #0
 800da4a:	f7f2 fc1d 	bl	8000288 <__aeabi_dsub>
 800da4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800da52:	f7f3 f843 	bl	8000adc <__aeabi_dcmplt>
 800da56:	2800      	cmp	r0, #0
 800da58:	f040 8095 	bne.w	800db86 <_dtoa_r+0x6be>
 800da5c:	42a6      	cmp	r6, r4
 800da5e:	f43f af50 	beq.w	800d902 <_dtoa_r+0x43a>
 800da62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800da66:	4b0a      	ldr	r3, [pc, #40]	@ (800da90 <_dtoa_r+0x5c8>)
 800da68:	2200      	movs	r2, #0
 800da6a:	f7f2 fdc5 	bl	80005f8 <__aeabi_dmul>
 800da6e:	4b08      	ldr	r3, [pc, #32]	@ (800da90 <_dtoa_r+0x5c8>)
 800da70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da74:	2200      	movs	r2, #0
 800da76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da7a:	f7f2 fdbd 	bl	80005f8 <__aeabi_dmul>
 800da7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da82:	e7c4      	b.n	800da0e <_dtoa_r+0x546>
 800da84:	08010f88 	.word	0x08010f88
 800da88:	08010f60 	.word	0x08010f60
 800da8c:	3ff00000 	.word	0x3ff00000
 800da90:	40240000 	.word	0x40240000
 800da94:	401c0000 	.word	0x401c0000
 800da98:	40140000 	.word	0x40140000
 800da9c:	3fe00000 	.word	0x3fe00000
 800daa0:	4631      	mov	r1, r6
 800daa2:	4628      	mov	r0, r5
 800daa4:	f7f2 fda8 	bl	80005f8 <__aeabi_dmul>
 800daa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800daac:	9415      	str	r4, [sp, #84]	@ 0x54
 800daae:	4656      	mov	r6, sl
 800dab0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dab4:	f7f3 f850 	bl	8000b58 <__aeabi_d2iz>
 800dab8:	4605      	mov	r5, r0
 800daba:	f7f2 fd33 	bl	8000524 <__aeabi_i2d>
 800dabe:	4602      	mov	r2, r0
 800dac0:	460b      	mov	r3, r1
 800dac2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dac6:	f7f2 fbdf 	bl	8000288 <__aeabi_dsub>
 800daca:	3530      	adds	r5, #48	@ 0x30
 800dacc:	f806 5b01 	strb.w	r5, [r6], #1
 800dad0:	4602      	mov	r2, r0
 800dad2:	460b      	mov	r3, r1
 800dad4:	42a6      	cmp	r6, r4
 800dad6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dada:	f04f 0200 	mov.w	r2, #0
 800dade:	d124      	bne.n	800db2a <_dtoa_r+0x662>
 800dae0:	4bac      	ldr	r3, [pc, #688]	@ (800dd94 <_dtoa_r+0x8cc>)
 800dae2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800dae6:	f7f2 fbd1 	bl	800028c <__adddf3>
 800daea:	4602      	mov	r2, r0
 800daec:	460b      	mov	r3, r1
 800daee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800daf2:	f7f3 f811 	bl	8000b18 <__aeabi_dcmpgt>
 800daf6:	2800      	cmp	r0, #0
 800daf8:	d145      	bne.n	800db86 <_dtoa_r+0x6be>
 800dafa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dafe:	49a5      	ldr	r1, [pc, #660]	@ (800dd94 <_dtoa_r+0x8cc>)
 800db00:	2000      	movs	r0, #0
 800db02:	f7f2 fbc1 	bl	8000288 <__aeabi_dsub>
 800db06:	4602      	mov	r2, r0
 800db08:	460b      	mov	r3, r1
 800db0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db0e:	f7f2 ffe5 	bl	8000adc <__aeabi_dcmplt>
 800db12:	2800      	cmp	r0, #0
 800db14:	f43f aef5 	beq.w	800d902 <_dtoa_r+0x43a>
 800db18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800db1a:	1e73      	subs	r3, r6, #1
 800db1c:	9315      	str	r3, [sp, #84]	@ 0x54
 800db1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800db22:	2b30      	cmp	r3, #48	@ 0x30
 800db24:	d0f8      	beq.n	800db18 <_dtoa_r+0x650>
 800db26:	9f04      	ldr	r7, [sp, #16]
 800db28:	e73e      	b.n	800d9a8 <_dtoa_r+0x4e0>
 800db2a:	4b9b      	ldr	r3, [pc, #620]	@ (800dd98 <_dtoa_r+0x8d0>)
 800db2c:	f7f2 fd64 	bl	80005f8 <__aeabi_dmul>
 800db30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db34:	e7bc      	b.n	800dab0 <_dtoa_r+0x5e8>
 800db36:	d10c      	bne.n	800db52 <_dtoa_r+0x68a>
 800db38:	4b98      	ldr	r3, [pc, #608]	@ (800dd9c <_dtoa_r+0x8d4>)
 800db3a:	2200      	movs	r2, #0
 800db3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db40:	f7f2 fd5a 	bl	80005f8 <__aeabi_dmul>
 800db44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800db48:	f7f2 ffdc 	bl	8000b04 <__aeabi_dcmpge>
 800db4c:	2800      	cmp	r0, #0
 800db4e:	f000 8157 	beq.w	800de00 <_dtoa_r+0x938>
 800db52:	2400      	movs	r4, #0
 800db54:	4625      	mov	r5, r4
 800db56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db58:	43db      	mvns	r3, r3
 800db5a:	9304      	str	r3, [sp, #16]
 800db5c:	4656      	mov	r6, sl
 800db5e:	2700      	movs	r7, #0
 800db60:	4621      	mov	r1, r4
 800db62:	4658      	mov	r0, fp
 800db64:	f000 fbb4 	bl	800e2d0 <_Bfree>
 800db68:	2d00      	cmp	r5, #0
 800db6a:	d0dc      	beq.n	800db26 <_dtoa_r+0x65e>
 800db6c:	b12f      	cbz	r7, 800db7a <_dtoa_r+0x6b2>
 800db6e:	42af      	cmp	r7, r5
 800db70:	d003      	beq.n	800db7a <_dtoa_r+0x6b2>
 800db72:	4639      	mov	r1, r7
 800db74:	4658      	mov	r0, fp
 800db76:	f000 fbab 	bl	800e2d0 <_Bfree>
 800db7a:	4629      	mov	r1, r5
 800db7c:	4658      	mov	r0, fp
 800db7e:	f000 fba7 	bl	800e2d0 <_Bfree>
 800db82:	e7d0      	b.n	800db26 <_dtoa_r+0x65e>
 800db84:	9704      	str	r7, [sp, #16]
 800db86:	4633      	mov	r3, r6
 800db88:	461e      	mov	r6, r3
 800db8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db8e:	2a39      	cmp	r2, #57	@ 0x39
 800db90:	d107      	bne.n	800dba2 <_dtoa_r+0x6da>
 800db92:	459a      	cmp	sl, r3
 800db94:	d1f8      	bne.n	800db88 <_dtoa_r+0x6c0>
 800db96:	9a04      	ldr	r2, [sp, #16]
 800db98:	3201      	adds	r2, #1
 800db9a:	9204      	str	r2, [sp, #16]
 800db9c:	2230      	movs	r2, #48	@ 0x30
 800db9e:	f88a 2000 	strb.w	r2, [sl]
 800dba2:	781a      	ldrb	r2, [r3, #0]
 800dba4:	3201      	adds	r2, #1
 800dba6:	701a      	strb	r2, [r3, #0]
 800dba8:	e7bd      	b.n	800db26 <_dtoa_r+0x65e>
 800dbaa:	4b7b      	ldr	r3, [pc, #492]	@ (800dd98 <_dtoa_r+0x8d0>)
 800dbac:	2200      	movs	r2, #0
 800dbae:	f7f2 fd23 	bl	80005f8 <__aeabi_dmul>
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	4604      	mov	r4, r0
 800dbb8:	460d      	mov	r5, r1
 800dbba:	f7f2 ff85 	bl	8000ac8 <__aeabi_dcmpeq>
 800dbbe:	2800      	cmp	r0, #0
 800dbc0:	f43f aebb 	beq.w	800d93a <_dtoa_r+0x472>
 800dbc4:	e6f0      	b.n	800d9a8 <_dtoa_r+0x4e0>
 800dbc6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dbc8:	2a00      	cmp	r2, #0
 800dbca:	f000 80db 	beq.w	800dd84 <_dtoa_r+0x8bc>
 800dbce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dbd0:	2a01      	cmp	r2, #1
 800dbd2:	f300 80bf 	bgt.w	800dd54 <_dtoa_r+0x88c>
 800dbd6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800dbd8:	2a00      	cmp	r2, #0
 800dbda:	f000 80b7 	beq.w	800dd4c <_dtoa_r+0x884>
 800dbde:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800dbe2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dbe4:	4646      	mov	r6, r8
 800dbe6:	9a08      	ldr	r2, [sp, #32]
 800dbe8:	2101      	movs	r1, #1
 800dbea:	441a      	add	r2, r3
 800dbec:	4658      	mov	r0, fp
 800dbee:	4498      	add	r8, r3
 800dbf0:	9208      	str	r2, [sp, #32]
 800dbf2:	f000 fc6b 	bl	800e4cc <__i2b>
 800dbf6:	4605      	mov	r5, r0
 800dbf8:	b15e      	cbz	r6, 800dc12 <_dtoa_r+0x74a>
 800dbfa:	9b08      	ldr	r3, [sp, #32]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	dd08      	ble.n	800dc12 <_dtoa_r+0x74a>
 800dc00:	42b3      	cmp	r3, r6
 800dc02:	9a08      	ldr	r2, [sp, #32]
 800dc04:	bfa8      	it	ge
 800dc06:	4633      	movge	r3, r6
 800dc08:	eba8 0803 	sub.w	r8, r8, r3
 800dc0c:	1af6      	subs	r6, r6, r3
 800dc0e:	1ad3      	subs	r3, r2, r3
 800dc10:	9308      	str	r3, [sp, #32]
 800dc12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc14:	b1f3      	cbz	r3, 800dc54 <_dtoa_r+0x78c>
 800dc16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	f000 80b7 	beq.w	800dd8c <_dtoa_r+0x8c4>
 800dc1e:	b18c      	cbz	r4, 800dc44 <_dtoa_r+0x77c>
 800dc20:	4629      	mov	r1, r5
 800dc22:	4622      	mov	r2, r4
 800dc24:	4658      	mov	r0, fp
 800dc26:	f000 fd11 	bl	800e64c <__pow5mult>
 800dc2a:	464a      	mov	r2, r9
 800dc2c:	4601      	mov	r1, r0
 800dc2e:	4605      	mov	r5, r0
 800dc30:	4658      	mov	r0, fp
 800dc32:	f000 fc61 	bl	800e4f8 <__multiply>
 800dc36:	4649      	mov	r1, r9
 800dc38:	9004      	str	r0, [sp, #16]
 800dc3a:	4658      	mov	r0, fp
 800dc3c:	f000 fb48 	bl	800e2d0 <_Bfree>
 800dc40:	9b04      	ldr	r3, [sp, #16]
 800dc42:	4699      	mov	r9, r3
 800dc44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc46:	1b1a      	subs	r2, r3, r4
 800dc48:	d004      	beq.n	800dc54 <_dtoa_r+0x78c>
 800dc4a:	4649      	mov	r1, r9
 800dc4c:	4658      	mov	r0, fp
 800dc4e:	f000 fcfd 	bl	800e64c <__pow5mult>
 800dc52:	4681      	mov	r9, r0
 800dc54:	2101      	movs	r1, #1
 800dc56:	4658      	mov	r0, fp
 800dc58:	f000 fc38 	bl	800e4cc <__i2b>
 800dc5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc5e:	4604      	mov	r4, r0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	f000 81cf 	beq.w	800e004 <_dtoa_r+0xb3c>
 800dc66:	461a      	mov	r2, r3
 800dc68:	4601      	mov	r1, r0
 800dc6a:	4658      	mov	r0, fp
 800dc6c:	f000 fcee 	bl	800e64c <__pow5mult>
 800dc70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc72:	2b01      	cmp	r3, #1
 800dc74:	4604      	mov	r4, r0
 800dc76:	f300 8095 	bgt.w	800dda4 <_dtoa_r+0x8dc>
 800dc7a:	9b02      	ldr	r3, [sp, #8]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	f040 8087 	bne.w	800dd90 <_dtoa_r+0x8c8>
 800dc82:	9b03      	ldr	r3, [sp, #12]
 800dc84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	f040 8089 	bne.w	800dda0 <_dtoa_r+0x8d8>
 800dc8e:	9b03      	ldr	r3, [sp, #12]
 800dc90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dc94:	0d1b      	lsrs	r3, r3, #20
 800dc96:	051b      	lsls	r3, r3, #20
 800dc98:	b12b      	cbz	r3, 800dca6 <_dtoa_r+0x7de>
 800dc9a:	9b08      	ldr	r3, [sp, #32]
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	9308      	str	r3, [sp, #32]
 800dca0:	f108 0801 	add.w	r8, r8, #1
 800dca4:	2301      	movs	r3, #1
 800dca6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dca8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	f000 81b0 	beq.w	800e010 <_dtoa_r+0xb48>
 800dcb0:	6923      	ldr	r3, [r4, #16]
 800dcb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dcb6:	6918      	ldr	r0, [r3, #16]
 800dcb8:	f000 fbbc 	bl	800e434 <__hi0bits>
 800dcbc:	f1c0 0020 	rsb	r0, r0, #32
 800dcc0:	9b08      	ldr	r3, [sp, #32]
 800dcc2:	4418      	add	r0, r3
 800dcc4:	f010 001f 	ands.w	r0, r0, #31
 800dcc8:	d077      	beq.n	800ddba <_dtoa_r+0x8f2>
 800dcca:	f1c0 0320 	rsb	r3, r0, #32
 800dcce:	2b04      	cmp	r3, #4
 800dcd0:	dd6b      	ble.n	800ddaa <_dtoa_r+0x8e2>
 800dcd2:	9b08      	ldr	r3, [sp, #32]
 800dcd4:	f1c0 001c 	rsb	r0, r0, #28
 800dcd8:	4403      	add	r3, r0
 800dcda:	4480      	add	r8, r0
 800dcdc:	4406      	add	r6, r0
 800dcde:	9308      	str	r3, [sp, #32]
 800dce0:	f1b8 0f00 	cmp.w	r8, #0
 800dce4:	dd05      	ble.n	800dcf2 <_dtoa_r+0x82a>
 800dce6:	4649      	mov	r1, r9
 800dce8:	4642      	mov	r2, r8
 800dcea:	4658      	mov	r0, fp
 800dcec:	f000 fd08 	bl	800e700 <__lshift>
 800dcf0:	4681      	mov	r9, r0
 800dcf2:	9b08      	ldr	r3, [sp, #32]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	dd05      	ble.n	800dd04 <_dtoa_r+0x83c>
 800dcf8:	4621      	mov	r1, r4
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	4658      	mov	r0, fp
 800dcfe:	f000 fcff 	bl	800e700 <__lshift>
 800dd02:	4604      	mov	r4, r0
 800dd04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d059      	beq.n	800ddbe <_dtoa_r+0x8f6>
 800dd0a:	4621      	mov	r1, r4
 800dd0c:	4648      	mov	r0, r9
 800dd0e:	f000 fd63 	bl	800e7d8 <__mcmp>
 800dd12:	2800      	cmp	r0, #0
 800dd14:	da53      	bge.n	800ddbe <_dtoa_r+0x8f6>
 800dd16:	1e7b      	subs	r3, r7, #1
 800dd18:	9304      	str	r3, [sp, #16]
 800dd1a:	4649      	mov	r1, r9
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	220a      	movs	r2, #10
 800dd20:	4658      	mov	r0, fp
 800dd22:	f000 faf7 	bl	800e314 <__multadd>
 800dd26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd28:	4681      	mov	r9, r0
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	f000 8172 	beq.w	800e014 <_dtoa_r+0xb4c>
 800dd30:	2300      	movs	r3, #0
 800dd32:	4629      	mov	r1, r5
 800dd34:	220a      	movs	r2, #10
 800dd36:	4658      	mov	r0, fp
 800dd38:	f000 faec 	bl	800e314 <__multadd>
 800dd3c:	9b00      	ldr	r3, [sp, #0]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	4605      	mov	r5, r0
 800dd42:	dc67      	bgt.n	800de14 <_dtoa_r+0x94c>
 800dd44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd46:	2b02      	cmp	r3, #2
 800dd48:	dc41      	bgt.n	800ddce <_dtoa_r+0x906>
 800dd4a:	e063      	b.n	800de14 <_dtoa_r+0x94c>
 800dd4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dd4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dd52:	e746      	b.n	800dbe2 <_dtoa_r+0x71a>
 800dd54:	9b07      	ldr	r3, [sp, #28]
 800dd56:	1e5c      	subs	r4, r3, #1
 800dd58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd5a:	42a3      	cmp	r3, r4
 800dd5c:	bfbf      	itttt	lt
 800dd5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dd60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dd62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dd64:	1ae3      	sublt	r3, r4, r3
 800dd66:	bfb4      	ite	lt
 800dd68:	18d2      	addlt	r2, r2, r3
 800dd6a:	1b1c      	subge	r4, r3, r4
 800dd6c:	9b07      	ldr	r3, [sp, #28]
 800dd6e:	bfbc      	itt	lt
 800dd70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800dd72:	2400      	movlt	r4, #0
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	bfb5      	itete	lt
 800dd78:	eba8 0603 	sublt.w	r6, r8, r3
 800dd7c:	9b07      	ldrge	r3, [sp, #28]
 800dd7e:	2300      	movlt	r3, #0
 800dd80:	4646      	movge	r6, r8
 800dd82:	e730      	b.n	800dbe6 <_dtoa_r+0x71e>
 800dd84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dd86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800dd88:	4646      	mov	r6, r8
 800dd8a:	e735      	b.n	800dbf8 <_dtoa_r+0x730>
 800dd8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dd8e:	e75c      	b.n	800dc4a <_dtoa_r+0x782>
 800dd90:	2300      	movs	r3, #0
 800dd92:	e788      	b.n	800dca6 <_dtoa_r+0x7de>
 800dd94:	3fe00000 	.word	0x3fe00000
 800dd98:	40240000 	.word	0x40240000
 800dd9c:	40140000 	.word	0x40140000
 800dda0:	9b02      	ldr	r3, [sp, #8]
 800dda2:	e780      	b.n	800dca6 <_dtoa_r+0x7de>
 800dda4:	2300      	movs	r3, #0
 800dda6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dda8:	e782      	b.n	800dcb0 <_dtoa_r+0x7e8>
 800ddaa:	d099      	beq.n	800dce0 <_dtoa_r+0x818>
 800ddac:	9a08      	ldr	r2, [sp, #32]
 800ddae:	331c      	adds	r3, #28
 800ddb0:	441a      	add	r2, r3
 800ddb2:	4498      	add	r8, r3
 800ddb4:	441e      	add	r6, r3
 800ddb6:	9208      	str	r2, [sp, #32]
 800ddb8:	e792      	b.n	800dce0 <_dtoa_r+0x818>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	e7f6      	b.n	800ddac <_dtoa_r+0x8e4>
 800ddbe:	9b07      	ldr	r3, [sp, #28]
 800ddc0:	9704      	str	r7, [sp, #16]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	dc20      	bgt.n	800de08 <_dtoa_r+0x940>
 800ddc6:	9300      	str	r3, [sp, #0]
 800ddc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddca:	2b02      	cmp	r3, #2
 800ddcc:	dd1e      	ble.n	800de0c <_dtoa_r+0x944>
 800ddce:	9b00      	ldr	r3, [sp, #0]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	f47f aec0 	bne.w	800db56 <_dtoa_r+0x68e>
 800ddd6:	4621      	mov	r1, r4
 800ddd8:	2205      	movs	r2, #5
 800ddda:	4658      	mov	r0, fp
 800dddc:	f000 fa9a 	bl	800e314 <__multadd>
 800dde0:	4601      	mov	r1, r0
 800dde2:	4604      	mov	r4, r0
 800dde4:	4648      	mov	r0, r9
 800dde6:	f000 fcf7 	bl	800e7d8 <__mcmp>
 800ddea:	2800      	cmp	r0, #0
 800ddec:	f77f aeb3 	ble.w	800db56 <_dtoa_r+0x68e>
 800ddf0:	4656      	mov	r6, sl
 800ddf2:	2331      	movs	r3, #49	@ 0x31
 800ddf4:	f806 3b01 	strb.w	r3, [r6], #1
 800ddf8:	9b04      	ldr	r3, [sp, #16]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	9304      	str	r3, [sp, #16]
 800ddfe:	e6ae      	b.n	800db5e <_dtoa_r+0x696>
 800de00:	9c07      	ldr	r4, [sp, #28]
 800de02:	9704      	str	r7, [sp, #16]
 800de04:	4625      	mov	r5, r4
 800de06:	e7f3      	b.n	800ddf0 <_dtoa_r+0x928>
 800de08:	9b07      	ldr	r3, [sp, #28]
 800de0a:	9300      	str	r3, [sp, #0]
 800de0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de0e:	2b00      	cmp	r3, #0
 800de10:	f000 8104 	beq.w	800e01c <_dtoa_r+0xb54>
 800de14:	2e00      	cmp	r6, #0
 800de16:	dd05      	ble.n	800de24 <_dtoa_r+0x95c>
 800de18:	4629      	mov	r1, r5
 800de1a:	4632      	mov	r2, r6
 800de1c:	4658      	mov	r0, fp
 800de1e:	f000 fc6f 	bl	800e700 <__lshift>
 800de22:	4605      	mov	r5, r0
 800de24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de26:	2b00      	cmp	r3, #0
 800de28:	d05a      	beq.n	800dee0 <_dtoa_r+0xa18>
 800de2a:	6869      	ldr	r1, [r5, #4]
 800de2c:	4658      	mov	r0, fp
 800de2e:	f000 fa0f 	bl	800e250 <_Balloc>
 800de32:	4606      	mov	r6, r0
 800de34:	b928      	cbnz	r0, 800de42 <_dtoa_r+0x97a>
 800de36:	4b84      	ldr	r3, [pc, #528]	@ (800e048 <_dtoa_r+0xb80>)
 800de38:	4602      	mov	r2, r0
 800de3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800de3e:	f7ff bb5a 	b.w	800d4f6 <_dtoa_r+0x2e>
 800de42:	692a      	ldr	r2, [r5, #16]
 800de44:	3202      	adds	r2, #2
 800de46:	0092      	lsls	r2, r2, #2
 800de48:	f105 010c 	add.w	r1, r5, #12
 800de4c:	300c      	adds	r0, #12
 800de4e:	f7ff fa80 	bl	800d352 <memcpy>
 800de52:	2201      	movs	r2, #1
 800de54:	4631      	mov	r1, r6
 800de56:	4658      	mov	r0, fp
 800de58:	f000 fc52 	bl	800e700 <__lshift>
 800de5c:	f10a 0301 	add.w	r3, sl, #1
 800de60:	9307      	str	r3, [sp, #28]
 800de62:	9b00      	ldr	r3, [sp, #0]
 800de64:	4453      	add	r3, sl
 800de66:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de68:	9b02      	ldr	r3, [sp, #8]
 800de6a:	f003 0301 	and.w	r3, r3, #1
 800de6e:	462f      	mov	r7, r5
 800de70:	930a      	str	r3, [sp, #40]	@ 0x28
 800de72:	4605      	mov	r5, r0
 800de74:	9b07      	ldr	r3, [sp, #28]
 800de76:	4621      	mov	r1, r4
 800de78:	3b01      	subs	r3, #1
 800de7a:	4648      	mov	r0, r9
 800de7c:	9300      	str	r3, [sp, #0]
 800de7e:	f7ff fa9b 	bl	800d3b8 <quorem>
 800de82:	4639      	mov	r1, r7
 800de84:	9002      	str	r0, [sp, #8]
 800de86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800de8a:	4648      	mov	r0, r9
 800de8c:	f000 fca4 	bl	800e7d8 <__mcmp>
 800de90:	462a      	mov	r2, r5
 800de92:	9008      	str	r0, [sp, #32]
 800de94:	4621      	mov	r1, r4
 800de96:	4658      	mov	r0, fp
 800de98:	f000 fcba 	bl	800e810 <__mdiff>
 800de9c:	68c2      	ldr	r2, [r0, #12]
 800de9e:	4606      	mov	r6, r0
 800dea0:	bb02      	cbnz	r2, 800dee4 <_dtoa_r+0xa1c>
 800dea2:	4601      	mov	r1, r0
 800dea4:	4648      	mov	r0, r9
 800dea6:	f000 fc97 	bl	800e7d8 <__mcmp>
 800deaa:	4602      	mov	r2, r0
 800deac:	4631      	mov	r1, r6
 800deae:	4658      	mov	r0, fp
 800deb0:	920e      	str	r2, [sp, #56]	@ 0x38
 800deb2:	f000 fa0d 	bl	800e2d0 <_Bfree>
 800deb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800deb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800deba:	9e07      	ldr	r6, [sp, #28]
 800debc:	ea43 0102 	orr.w	r1, r3, r2
 800dec0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dec2:	4319      	orrs	r1, r3
 800dec4:	d110      	bne.n	800dee8 <_dtoa_r+0xa20>
 800dec6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800deca:	d029      	beq.n	800df20 <_dtoa_r+0xa58>
 800decc:	9b08      	ldr	r3, [sp, #32]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	dd02      	ble.n	800ded8 <_dtoa_r+0xa10>
 800ded2:	9b02      	ldr	r3, [sp, #8]
 800ded4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ded8:	9b00      	ldr	r3, [sp, #0]
 800deda:	f883 8000 	strb.w	r8, [r3]
 800dede:	e63f      	b.n	800db60 <_dtoa_r+0x698>
 800dee0:	4628      	mov	r0, r5
 800dee2:	e7bb      	b.n	800de5c <_dtoa_r+0x994>
 800dee4:	2201      	movs	r2, #1
 800dee6:	e7e1      	b.n	800deac <_dtoa_r+0x9e4>
 800dee8:	9b08      	ldr	r3, [sp, #32]
 800deea:	2b00      	cmp	r3, #0
 800deec:	db04      	blt.n	800def8 <_dtoa_r+0xa30>
 800deee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800def0:	430b      	orrs	r3, r1
 800def2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800def4:	430b      	orrs	r3, r1
 800def6:	d120      	bne.n	800df3a <_dtoa_r+0xa72>
 800def8:	2a00      	cmp	r2, #0
 800defa:	dded      	ble.n	800ded8 <_dtoa_r+0xa10>
 800defc:	4649      	mov	r1, r9
 800defe:	2201      	movs	r2, #1
 800df00:	4658      	mov	r0, fp
 800df02:	f000 fbfd 	bl	800e700 <__lshift>
 800df06:	4621      	mov	r1, r4
 800df08:	4681      	mov	r9, r0
 800df0a:	f000 fc65 	bl	800e7d8 <__mcmp>
 800df0e:	2800      	cmp	r0, #0
 800df10:	dc03      	bgt.n	800df1a <_dtoa_r+0xa52>
 800df12:	d1e1      	bne.n	800ded8 <_dtoa_r+0xa10>
 800df14:	f018 0f01 	tst.w	r8, #1
 800df18:	d0de      	beq.n	800ded8 <_dtoa_r+0xa10>
 800df1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800df1e:	d1d8      	bne.n	800ded2 <_dtoa_r+0xa0a>
 800df20:	9a00      	ldr	r2, [sp, #0]
 800df22:	2339      	movs	r3, #57	@ 0x39
 800df24:	7013      	strb	r3, [r2, #0]
 800df26:	4633      	mov	r3, r6
 800df28:	461e      	mov	r6, r3
 800df2a:	3b01      	subs	r3, #1
 800df2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800df30:	2a39      	cmp	r2, #57	@ 0x39
 800df32:	d052      	beq.n	800dfda <_dtoa_r+0xb12>
 800df34:	3201      	adds	r2, #1
 800df36:	701a      	strb	r2, [r3, #0]
 800df38:	e612      	b.n	800db60 <_dtoa_r+0x698>
 800df3a:	2a00      	cmp	r2, #0
 800df3c:	dd07      	ble.n	800df4e <_dtoa_r+0xa86>
 800df3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800df42:	d0ed      	beq.n	800df20 <_dtoa_r+0xa58>
 800df44:	9a00      	ldr	r2, [sp, #0]
 800df46:	f108 0301 	add.w	r3, r8, #1
 800df4a:	7013      	strb	r3, [r2, #0]
 800df4c:	e608      	b.n	800db60 <_dtoa_r+0x698>
 800df4e:	9b07      	ldr	r3, [sp, #28]
 800df50:	9a07      	ldr	r2, [sp, #28]
 800df52:	f803 8c01 	strb.w	r8, [r3, #-1]
 800df56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df58:	4293      	cmp	r3, r2
 800df5a:	d028      	beq.n	800dfae <_dtoa_r+0xae6>
 800df5c:	4649      	mov	r1, r9
 800df5e:	2300      	movs	r3, #0
 800df60:	220a      	movs	r2, #10
 800df62:	4658      	mov	r0, fp
 800df64:	f000 f9d6 	bl	800e314 <__multadd>
 800df68:	42af      	cmp	r7, r5
 800df6a:	4681      	mov	r9, r0
 800df6c:	f04f 0300 	mov.w	r3, #0
 800df70:	f04f 020a 	mov.w	r2, #10
 800df74:	4639      	mov	r1, r7
 800df76:	4658      	mov	r0, fp
 800df78:	d107      	bne.n	800df8a <_dtoa_r+0xac2>
 800df7a:	f000 f9cb 	bl	800e314 <__multadd>
 800df7e:	4607      	mov	r7, r0
 800df80:	4605      	mov	r5, r0
 800df82:	9b07      	ldr	r3, [sp, #28]
 800df84:	3301      	adds	r3, #1
 800df86:	9307      	str	r3, [sp, #28]
 800df88:	e774      	b.n	800de74 <_dtoa_r+0x9ac>
 800df8a:	f000 f9c3 	bl	800e314 <__multadd>
 800df8e:	4629      	mov	r1, r5
 800df90:	4607      	mov	r7, r0
 800df92:	2300      	movs	r3, #0
 800df94:	220a      	movs	r2, #10
 800df96:	4658      	mov	r0, fp
 800df98:	f000 f9bc 	bl	800e314 <__multadd>
 800df9c:	4605      	mov	r5, r0
 800df9e:	e7f0      	b.n	800df82 <_dtoa_r+0xaba>
 800dfa0:	9b00      	ldr	r3, [sp, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	bfcc      	ite	gt
 800dfa6:	461e      	movgt	r6, r3
 800dfa8:	2601      	movle	r6, #1
 800dfaa:	4456      	add	r6, sl
 800dfac:	2700      	movs	r7, #0
 800dfae:	4649      	mov	r1, r9
 800dfb0:	2201      	movs	r2, #1
 800dfb2:	4658      	mov	r0, fp
 800dfb4:	f000 fba4 	bl	800e700 <__lshift>
 800dfb8:	4621      	mov	r1, r4
 800dfba:	4681      	mov	r9, r0
 800dfbc:	f000 fc0c 	bl	800e7d8 <__mcmp>
 800dfc0:	2800      	cmp	r0, #0
 800dfc2:	dcb0      	bgt.n	800df26 <_dtoa_r+0xa5e>
 800dfc4:	d102      	bne.n	800dfcc <_dtoa_r+0xb04>
 800dfc6:	f018 0f01 	tst.w	r8, #1
 800dfca:	d1ac      	bne.n	800df26 <_dtoa_r+0xa5e>
 800dfcc:	4633      	mov	r3, r6
 800dfce:	461e      	mov	r6, r3
 800dfd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dfd4:	2a30      	cmp	r2, #48	@ 0x30
 800dfd6:	d0fa      	beq.n	800dfce <_dtoa_r+0xb06>
 800dfd8:	e5c2      	b.n	800db60 <_dtoa_r+0x698>
 800dfda:	459a      	cmp	sl, r3
 800dfdc:	d1a4      	bne.n	800df28 <_dtoa_r+0xa60>
 800dfde:	9b04      	ldr	r3, [sp, #16]
 800dfe0:	3301      	adds	r3, #1
 800dfe2:	9304      	str	r3, [sp, #16]
 800dfe4:	2331      	movs	r3, #49	@ 0x31
 800dfe6:	f88a 3000 	strb.w	r3, [sl]
 800dfea:	e5b9      	b.n	800db60 <_dtoa_r+0x698>
 800dfec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dfee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e04c <_dtoa_r+0xb84>
 800dff2:	b11b      	cbz	r3, 800dffc <_dtoa_r+0xb34>
 800dff4:	f10a 0308 	add.w	r3, sl, #8
 800dff8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dffa:	6013      	str	r3, [r2, #0]
 800dffc:	4650      	mov	r0, sl
 800dffe:	b019      	add	sp, #100	@ 0x64
 800e000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e006:	2b01      	cmp	r3, #1
 800e008:	f77f ae37 	ble.w	800dc7a <_dtoa_r+0x7b2>
 800e00c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e00e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e010:	2001      	movs	r0, #1
 800e012:	e655      	b.n	800dcc0 <_dtoa_r+0x7f8>
 800e014:	9b00      	ldr	r3, [sp, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	f77f aed6 	ble.w	800ddc8 <_dtoa_r+0x900>
 800e01c:	4656      	mov	r6, sl
 800e01e:	4621      	mov	r1, r4
 800e020:	4648      	mov	r0, r9
 800e022:	f7ff f9c9 	bl	800d3b8 <quorem>
 800e026:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e02a:	f806 8b01 	strb.w	r8, [r6], #1
 800e02e:	9b00      	ldr	r3, [sp, #0]
 800e030:	eba6 020a 	sub.w	r2, r6, sl
 800e034:	4293      	cmp	r3, r2
 800e036:	ddb3      	ble.n	800dfa0 <_dtoa_r+0xad8>
 800e038:	4649      	mov	r1, r9
 800e03a:	2300      	movs	r3, #0
 800e03c:	220a      	movs	r2, #10
 800e03e:	4658      	mov	r0, fp
 800e040:	f000 f968 	bl	800e314 <__multadd>
 800e044:	4681      	mov	r9, r0
 800e046:	e7ea      	b.n	800e01e <_dtoa_r+0xb56>
 800e048:	08010ee5 	.word	0x08010ee5
 800e04c:	08010e69 	.word	0x08010e69

0800e050 <_free_r>:
 800e050:	b538      	push	{r3, r4, r5, lr}
 800e052:	4605      	mov	r5, r0
 800e054:	2900      	cmp	r1, #0
 800e056:	d041      	beq.n	800e0dc <_free_r+0x8c>
 800e058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e05c:	1f0c      	subs	r4, r1, #4
 800e05e:	2b00      	cmp	r3, #0
 800e060:	bfb8      	it	lt
 800e062:	18e4      	addlt	r4, r4, r3
 800e064:	f000 f8e8 	bl	800e238 <__malloc_lock>
 800e068:	4a1d      	ldr	r2, [pc, #116]	@ (800e0e0 <_free_r+0x90>)
 800e06a:	6813      	ldr	r3, [r2, #0]
 800e06c:	b933      	cbnz	r3, 800e07c <_free_r+0x2c>
 800e06e:	6063      	str	r3, [r4, #4]
 800e070:	6014      	str	r4, [r2, #0]
 800e072:	4628      	mov	r0, r5
 800e074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e078:	f000 b8e4 	b.w	800e244 <__malloc_unlock>
 800e07c:	42a3      	cmp	r3, r4
 800e07e:	d908      	bls.n	800e092 <_free_r+0x42>
 800e080:	6820      	ldr	r0, [r4, #0]
 800e082:	1821      	adds	r1, r4, r0
 800e084:	428b      	cmp	r3, r1
 800e086:	bf01      	itttt	eq
 800e088:	6819      	ldreq	r1, [r3, #0]
 800e08a:	685b      	ldreq	r3, [r3, #4]
 800e08c:	1809      	addeq	r1, r1, r0
 800e08e:	6021      	streq	r1, [r4, #0]
 800e090:	e7ed      	b.n	800e06e <_free_r+0x1e>
 800e092:	461a      	mov	r2, r3
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	b10b      	cbz	r3, 800e09c <_free_r+0x4c>
 800e098:	42a3      	cmp	r3, r4
 800e09a:	d9fa      	bls.n	800e092 <_free_r+0x42>
 800e09c:	6811      	ldr	r1, [r2, #0]
 800e09e:	1850      	adds	r0, r2, r1
 800e0a0:	42a0      	cmp	r0, r4
 800e0a2:	d10b      	bne.n	800e0bc <_free_r+0x6c>
 800e0a4:	6820      	ldr	r0, [r4, #0]
 800e0a6:	4401      	add	r1, r0
 800e0a8:	1850      	adds	r0, r2, r1
 800e0aa:	4283      	cmp	r3, r0
 800e0ac:	6011      	str	r1, [r2, #0]
 800e0ae:	d1e0      	bne.n	800e072 <_free_r+0x22>
 800e0b0:	6818      	ldr	r0, [r3, #0]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	6053      	str	r3, [r2, #4]
 800e0b6:	4408      	add	r0, r1
 800e0b8:	6010      	str	r0, [r2, #0]
 800e0ba:	e7da      	b.n	800e072 <_free_r+0x22>
 800e0bc:	d902      	bls.n	800e0c4 <_free_r+0x74>
 800e0be:	230c      	movs	r3, #12
 800e0c0:	602b      	str	r3, [r5, #0]
 800e0c2:	e7d6      	b.n	800e072 <_free_r+0x22>
 800e0c4:	6820      	ldr	r0, [r4, #0]
 800e0c6:	1821      	adds	r1, r4, r0
 800e0c8:	428b      	cmp	r3, r1
 800e0ca:	bf04      	itt	eq
 800e0cc:	6819      	ldreq	r1, [r3, #0]
 800e0ce:	685b      	ldreq	r3, [r3, #4]
 800e0d0:	6063      	str	r3, [r4, #4]
 800e0d2:	bf04      	itt	eq
 800e0d4:	1809      	addeq	r1, r1, r0
 800e0d6:	6021      	streq	r1, [r4, #0]
 800e0d8:	6054      	str	r4, [r2, #4]
 800e0da:	e7ca      	b.n	800e072 <_free_r+0x22>
 800e0dc:	bd38      	pop	{r3, r4, r5, pc}
 800e0de:	bf00      	nop
 800e0e0:	20003960 	.word	0x20003960

0800e0e4 <malloc>:
 800e0e4:	4b02      	ldr	r3, [pc, #8]	@ (800e0f0 <malloc+0xc>)
 800e0e6:	4601      	mov	r1, r0
 800e0e8:	6818      	ldr	r0, [r3, #0]
 800e0ea:	f000 b825 	b.w	800e138 <_malloc_r>
 800e0ee:	bf00      	nop
 800e0f0:	20000068 	.word	0x20000068

0800e0f4 <sbrk_aligned>:
 800e0f4:	b570      	push	{r4, r5, r6, lr}
 800e0f6:	4e0f      	ldr	r6, [pc, #60]	@ (800e134 <sbrk_aligned+0x40>)
 800e0f8:	460c      	mov	r4, r1
 800e0fa:	6831      	ldr	r1, [r6, #0]
 800e0fc:	4605      	mov	r5, r0
 800e0fe:	b911      	cbnz	r1, 800e106 <sbrk_aligned+0x12>
 800e100:	f001 ffe4 	bl	80100cc <_sbrk_r>
 800e104:	6030      	str	r0, [r6, #0]
 800e106:	4621      	mov	r1, r4
 800e108:	4628      	mov	r0, r5
 800e10a:	f001 ffdf 	bl	80100cc <_sbrk_r>
 800e10e:	1c43      	adds	r3, r0, #1
 800e110:	d103      	bne.n	800e11a <sbrk_aligned+0x26>
 800e112:	f04f 34ff 	mov.w	r4, #4294967295
 800e116:	4620      	mov	r0, r4
 800e118:	bd70      	pop	{r4, r5, r6, pc}
 800e11a:	1cc4      	adds	r4, r0, #3
 800e11c:	f024 0403 	bic.w	r4, r4, #3
 800e120:	42a0      	cmp	r0, r4
 800e122:	d0f8      	beq.n	800e116 <sbrk_aligned+0x22>
 800e124:	1a21      	subs	r1, r4, r0
 800e126:	4628      	mov	r0, r5
 800e128:	f001 ffd0 	bl	80100cc <_sbrk_r>
 800e12c:	3001      	adds	r0, #1
 800e12e:	d1f2      	bne.n	800e116 <sbrk_aligned+0x22>
 800e130:	e7ef      	b.n	800e112 <sbrk_aligned+0x1e>
 800e132:	bf00      	nop
 800e134:	2000395c 	.word	0x2000395c

0800e138 <_malloc_r>:
 800e138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e13c:	1ccd      	adds	r5, r1, #3
 800e13e:	f025 0503 	bic.w	r5, r5, #3
 800e142:	3508      	adds	r5, #8
 800e144:	2d0c      	cmp	r5, #12
 800e146:	bf38      	it	cc
 800e148:	250c      	movcc	r5, #12
 800e14a:	2d00      	cmp	r5, #0
 800e14c:	4606      	mov	r6, r0
 800e14e:	db01      	blt.n	800e154 <_malloc_r+0x1c>
 800e150:	42a9      	cmp	r1, r5
 800e152:	d904      	bls.n	800e15e <_malloc_r+0x26>
 800e154:	230c      	movs	r3, #12
 800e156:	6033      	str	r3, [r6, #0]
 800e158:	2000      	movs	r0, #0
 800e15a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e15e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e234 <_malloc_r+0xfc>
 800e162:	f000 f869 	bl	800e238 <__malloc_lock>
 800e166:	f8d8 3000 	ldr.w	r3, [r8]
 800e16a:	461c      	mov	r4, r3
 800e16c:	bb44      	cbnz	r4, 800e1c0 <_malloc_r+0x88>
 800e16e:	4629      	mov	r1, r5
 800e170:	4630      	mov	r0, r6
 800e172:	f7ff ffbf 	bl	800e0f4 <sbrk_aligned>
 800e176:	1c43      	adds	r3, r0, #1
 800e178:	4604      	mov	r4, r0
 800e17a:	d158      	bne.n	800e22e <_malloc_r+0xf6>
 800e17c:	f8d8 4000 	ldr.w	r4, [r8]
 800e180:	4627      	mov	r7, r4
 800e182:	2f00      	cmp	r7, #0
 800e184:	d143      	bne.n	800e20e <_malloc_r+0xd6>
 800e186:	2c00      	cmp	r4, #0
 800e188:	d04b      	beq.n	800e222 <_malloc_r+0xea>
 800e18a:	6823      	ldr	r3, [r4, #0]
 800e18c:	4639      	mov	r1, r7
 800e18e:	4630      	mov	r0, r6
 800e190:	eb04 0903 	add.w	r9, r4, r3
 800e194:	f001 ff9a 	bl	80100cc <_sbrk_r>
 800e198:	4581      	cmp	r9, r0
 800e19a:	d142      	bne.n	800e222 <_malloc_r+0xea>
 800e19c:	6821      	ldr	r1, [r4, #0]
 800e19e:	1a6d      	subs	r5, r5, r1
 800e1a0:	4629      	mov	r1, r5
 800e1a2:	4630      	mov	r0, r6
 800e1a4:	f7ff ffa6 	bl	800e0f4 <sbrk_aligned>
 800e1a8:	3001      	adds	r0, #1
 800e1aa:	d03a      	beq.n	800e222 <_malloc_r+0xea>
 800e1ac:	6823      	ldr	r3, [r4, #0]
 800e1ae:	442b      	add	r3, r5
 800e1b0:	6023      	str	r3, [r4, #0]
 800e1b2:	f8d8 3000 	ldr.w	r3, [r8]
 800e1b6:	685a      	ldr	r2, [r3, #4]
 800e1b8:	bb62      	cbnz	r2, 800e214 <_malloc_r+0xdc>
 800e1ba:	f8c8 7000 	str.w	r7, [r8]
 800e1be:	e00f      	b.n	800e1e0 <_malloc_r+0xa8>
 800e1c0:	6822      	ldr	r2, [r4, #0]
 800e1c2:	1b52      	subs	r2, r2, r5
 800e1c4:	d420      	bmi.n	800e208 <_malloc_r+0xd0>
 800e1c6:	2a0b      	cmp	r2, #11
 800e1c8:	d917      	bls.n	800e1fa <_malloc_r+0xc2>
 800e1ca:	1961      	adds	r1, r4, r5
 800e1cc:	42a3      	cmp	r3, r4
 800e1ce:	6025      	str	r5, [r4, #0]
 800e1d0:	bf18      	it	ne
 800e1d2:	6059      	strne	r1, [r3, #4]
 800e1d4:	6863      	ldr	r3, [r4, #4]
 800e1d6:	bf08      	it	eq
 800e1d8:	f8c8 1000 	streq.w	r1, [r8]
 800e1dc:	5162      	str	r2, [r4, r5]
 800e1de:	604b      	str	r3, [r1, #4]
 800e1e0:	4630      	mov	r0, r6
 800e1e2:	f000 f82f 	bl	800e244 <__malloc_unlock>
 800e1e6:	f104 000b 	add.w	r0, r4, #11
 800e1ea:	1d23      	adds	r3, r4, #4
 800e1ec:	f020 0007 	bic.w	r0, r0, #7
 800e1f0:	1ac2      	subs	r2, r0, r3
 800e1f2:	bf1c      	itt	ne
 800e1f4:	1a1b      	subne	r3, r3, r0
 800e1f6:	50a3      	strne	r3, [r4, r2]
 800e1f8:	e7af      	b.n	800e15a <_malloc_r+0x22>
 800e1fa:	6862      	ldr	r2, [r4, #4]
 800e1fc:	42a3      	cmp	r3, r4
 800e1fe:	bf0c      	ite	eq
 800e200:	f8c8 2000 	streq.w	r2, [r8]
 800e204:	605a      	strne	r2, [r3, #4]
 800e206:	e7eb      	b.n	800e1e0 <_malloc_r+0xa8>
 800e208:	4623      	mov	r3, r4
 800e20a:	6864      	ldr	r4, [r4, #4]
 800e20c:	e7ae      	b.n	800e16c <_malloc_r+0x34>
 800e20e:	463c      	mov	r4, r7
 800e210:	687f      	ldr	r7, [r7, #4]
 800e212:	e7b6      	b.n	800e182 <_malloc_r+0x4a>
 800e214:	461a      	mov	r2, r3
 800e216:	685b      	ldr	r3, [r3, #4]
 800e218:	42a3      	cmp	r3, r4
 800e21a:	d1fb      	bne.n	800e214 <_malloc_r+0xdc>
 800e21c:	2300      	movs	r3, #0
 800e21e:	6053      	str	r3, [r2, #4]
 800e220:	e7de      	b.n	800e1e0 <_malloc_r+0xa8>
 800e222:	230c      	movs	r3, #12
 800e224:	6033      	str	r3, [r6, #0]
 800e226:	4630      	mov	r0, r6
 800e228:	f000 f80c 	bl	800e244 <__malloc_unlock>
 800e22c:	e794      	b.n	800e158 <_malloc_r+0x20>
 800e22e:	6005      	str	r5, [r0, #0]
 800e230:	e7d6      	b.n	800e1e0 <_malloc_r+0xa8>
 800e232:	bf00      	nop
 800e234:	20003960 	.word	0x20003960

0800e238 <__malloc_lock>:
 800e238:	4801      	ldr	r0, [pc, #4]	@ (800e240 <__malloc_lock+0x8>)
 800e23a:	f7ff b888 	b.w	800d34e <__retarget_lock_acquire_recursive>
 800e23e:	bf00      	nop
 800e240:	20003958 	.word	0x20003958

0800e244 <__malloc_unlock>:
 800e244:	4801      	ldr	r0, [pc, #4]	@ (800e24c <__malloc_unlock+0x8>)
 800e246:	f7ff b883 	b.w	800d350 <__retarget_lock_release_recursive>
 800e24a:	bf00      	nop
 800e24c:	20003958 	.word	0x20003958

0800e250 <_Balloc>:
 800e250:	b570      	push	{r4, r5, r6, lr}
 800e252:	69c6      	ldr	r6, [r0, #28]
 800e254:	4604      	mov	r4, r0
 800e256:	460d      	mov	r5, r1
 800e258:	b976      	cbnz	r6, 800e278 <_Balloc+0x28>
 800e25a:	2010      	movs	r0, #16
 800e25c:	f7ff ff42 	bl	800e0e4 <malloc>
 800e260:	4602      	mov	r2, r0
 800e262:	61e0      	str	r0, [r4, #28]
 800e264:	b920      	cbnz	r0, 800e270 <_Balloc+0x20>
 800e266:	4b18      	ldr	r3, [pc, #96]	@ (800e2c8 <_Balloc+0x78>)
 800e268:	4818      	ldr	r0, [pc, #96]	@ (800e2cc <_Balloc+0x7c>)
 800e26a:	216b      	movs	r1, #107	@ 0x6b
 800e26c:	f7ff f886 	bl	800d37c <__assert_func>
 800e270:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e274:	6006      	str	r6, [r0, #0]
 800e276:	60c6      	str	r6, [r0, #12]
 800e278:	69e6      	ldr	r6, [r4, #28]
 800e27a:	68f3      	ldr	r3, [r6, #12]
 800e27c:	b183      	cbz	r3, 800e2a0 <_Balloc+0x50>
 800e27e:	69e3      	ldr	r3, [r4, #28]
 800e280:	68db      	ldr	r3, [r3, #12]
 800e282:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e286:	b9b8      	cbnz	r0, 800e2b8 <_Balloc+0x68>
 800e288:	2101      	movs	r1, #1
 800e28a:	fa01 f605 	lsl.w	r6, r1, r5
 800e28e:	1d72      	adds	r2, r6, #5
 800e290:	0092      	lsls	r2, r2, #2
 800e292:	4620      	mov	r0, r4
 800e294:	f001 ff3b 	bl	801010e <_calloc_r>
 800e298:	b160      	cbz	r0, 800e2b4 <_Balloc+0x64>
 800e29a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e29e:	e00e      	b.n	800e2be <_Balloc+0x6e>
 800e2a0:	2221      	movs	r2, #33	@ 0x21
 800e2a2:	2104      	movs	r1, #4
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	f001 ff32 	bl	801010e <_calloc_r>
 800e2aa:	69e3      	ldr	r3, [r4, #28]
 800e2ac:	60f0      	str	r0, [r6, #12]
 800e2ae:	68db      	ldr	r3, [r3, #12]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d1e4      	bne.n	800e27e <_Balloc+0x2e>
 800e2b4:	2000      	movs	r0, #0
 800e2b6:	bd70      	pop	{r4, r5, r6, pc}
 800e2b8:	6802      	ldr	r2, [r0, #0]
 800e2ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e2be:	2300      	movs	r3, #0
 800e2c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e2c4:	e7f7      	b.n	800e2b6 <_Balloc+0x66>
 800e2c6:	bf00      	nop
 800e2c8:	08010e76 	.word	0x08010e76
 800e2cc:	08010ef6 	.word	0x08010ef6

0800e2d0 <_Bfree>:
 800e2d0:	b570      	push	{r4, r5, r6, lr}
 800e2d2:	69c6      	ldr	r6, [r0, #28]
 800e2d4:	4605      	mov	r5, r0
 800e2d6:	460c      	mov	r4, r1
 800e2d8:	b976      	cbnz	r6, 800e2f8 <_Bfree+0x28>
 800e2da:	2010      	movs	r0, #16
 800e2dc:	f7ff ff02 	bl	800e0e4 <malloc>
 800e2e0:	4602      	mov	r2, r0
 800e2e2:	61e8      	str	r0, [r5, #28]
 800e2e4:	b920      	cbnz	r0, 800e2f0 <_Bfree+0x20>
 800e2e6:	4b09      	ldr	r3, [pc, #36]	@ (800e30c <_Bfree+0x3c>)
 800e2e8:	4809      	ldr	r0, [pc, #36]	@ (800e310 <_Bfree+0x40>)
 800e2ea:	218f      	movs	r1, #143	@ 0x8f
 800e2ec:	f7ff f846 	bl	800d37c <__assert_func>
 800e2f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e2f4:	6006      	str	r6, [r0, #0]
 800e2f6:	60c6      	str	r6, [r0, #12]
 800e2f8:	b13c      	cbz	r4, 800e30a <_Bfree+0x3a>
 800e2fa:	69eb      	ldr	r3, [r5, #28]
 800e2fc:	6862      	ldr	r2, [r4, #4]
 800e2fe:	68db      	ldr	r3, [r3, #12]
 800e300:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e304:	6021      	str	r1, [r4, #0]
 800e306:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e30a:	bd70      	pop	{r4, r5, r6, pc}
 800e30c:	08010e76 	.word	0x08010e76
 800e310:	08010ef6 	.word	0x08010ef6

0800e314 <__multadd>:
 800e314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e318:	690d      	ldr	r5, [r1, #16]
 800e31a:	4607      	mov	r7, r0
 800e31c:	460c      	mov	r4, r1
 800e31e:	461e      	mov	r6, r3
 800e320:	f101 0c14 	add.w	ip, r1, #20
 800e324:	2000      	movs	r0, #0
 800e326:	f8dc 3000 	ldr.w	r3, [ip]
 800e32a:	b299      	uxth	r1, r3
 800e32c:	fb02 6101 	mla	r1, r2, r1, r6
 800e330:	0c1e      	lsrs	r6, r3, #16
 800e332:	0c0b      	lsrs	r3, r1, #16
 800e334:	fb02 3306 	mla	r3, r2, r6, r3
 800e338:	b289      	uxth	r1, r1
 800e33a:	3001      	adds	r0, #1
 800e33c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e340:	4285      	cmp	r5, r0
 800e342:	f84c 1b04 	str.w	r1, [ip], #4
 800e346:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e34a:	dcec      	bgt.n	800e326 <__multadd+0x12>
 800e34c:	b30e      	cbz	r6, 800e392 <__multadd+0x7e>
 800e34e:	68a3      	ldr	r3, [r4, #8]
 800e350:	42ab      	cmp	r3, r5
 800e352:	dc19      	bgt.n	800e388 <__multadd+0x74>
 800e354:	6861      	ldr	r1, [r4, #4]
 800e356:	4638      	mov	r0, r7
 800e358:	3101      	adds	r1, #1
 800e35a:	f7ff ff79 	bl	800e250 <_Balloc>
 800e35e:	4680      	mov	r8, r0
 800e360:	b928      	cbnz	r0, 800e36e <__multadd+0x5a>
 800e362:	4602      	mov	r2, r0
 800e364:	4b0c      	ldr	r3, [pc, #48]	@ (800e398 <__multadd+0x84>)
 800e366:	480d      	ldr	r0, [pc, #52]	@ (800e39c <__multadd+0x88>)
 800e368:	21ba      	movs	r1, #186	@ 0xba
 800e36a:	f7ff f807 	bl	800d37c <__assert_func>
 800e36e:	6922      	ldr	r2, [r4, #16]
 800e370:	3202      	adds	r2, #2
 800e372:	f104 010c 	add.w	r1, r4, #12
 800e376:	0092      	lsls	r2, r2, #2
 800e378:	300c      	adds	r0, #12
 800e37a:	f7fe ffea 	bl	800d352 <memcpy>
 800e37e:	4621      	mov	r1, r4
 800e380:	4638      	mov	r0, r7
 800e382:	f7ff ffa5 	bl	800e2d0 <_Bfree>
 800e386:	4644      	mov	r4, r8
 800e388:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e38c:	3501      	adds	r5, #1
 800e38e:	615e      	str	r6, [r3, #20]
 800e390:	6125      	str	r5, [r4, #16]
 800e392:	4620      	mov	r0, r4
 800e394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e398:	08010ee5 	.word	0x08010ee5
 800e39c:	08010ef6 	.word	0x08010ef6

0800e3a0 <__s2b>:
 800e3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3a4:	460c      	mov	r4, r1
 800e3a6:	4615      	mov	r5, r2
 800e3a8:	461f      	mov	r7, r3
 800e3aa:	2209      	movs	r2, #9
 800e3ac:	3308      	adds	r3, #8
 800e3ae:	4606      	mov	r6, r0
 800e3b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e3b4:	2100      	movs	r1, #0
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	db09      	blt.n	800e3d0 <__s2b+0x30>
 800e3bc:	4630      	mov	r0, r6
 800e3be:	f7ff ff47 	bl	800e250 <_Balloc>
 800e3c2:	b940      	cbnz	r0, 800e3d6 <__s2b+0x36>
 800e3c4:	4602      	mov	r2, r0
 800e3c6:	4b19      	ldr	r3, [pc, #100]	@ (800e42c <__s2b+0x8c>)
 800e3c8:	4819      	ldr	r0, [pc, #100]	@ (800e430 <__s2b+0x90>)
 800e3ca:	21d3      	movs	r1, #211	@ 0xd3
 800e3cc:	f7fe ffd6 	bl	800d37c <__assert_func>
 800e3d0:	0052      	lsls	r2, r2, #1
 800e3d2:	3101      	adds	r1, #1
 800e3d4:	e7f0      	b.n	800e3b8 <__s2b+0x18>
 800e3d6:	9b08      	ldr	r3, [sp, #32]
 800e3d8:	6143      	str	r3, [r0, #20]
 800e3da:	2d09      	cmp	r5, #9
 800e3dc:	f04f 0301 	mov.w	r3, #1
 800e3e0:	6103      	str	r3, [r0, #16]
 800e3e2:	dd16      	ble.n	800e412 <__s2b+0x72>
 800e3e4:	f104 0909 	add.w	r9, r4, #9
 800e3e8:	46c8      	mov	r8, r9
 800e3ea:	442c      	add	r4, r5
 800e3ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e3f0:	4601      	mov	r1, r0
 800e3f2:	3b30      	subs	r3, #48	@ 0x30
 800e3f4:	220a      	movs	r2, #10
 800e3f6:	4630      	mov	r0, r6
 800e3f8:	f7ff ff8c 	bl	800e314 <__multadd>
 800e3fc:	45a0      	cmp	r8, r4
 800e3fe:	d1f5      	bne.n	800e3ec <__s2b+0x4c>
 800e400:	f1a5 0408 	sub.w	r4, r5, #8
 800e404:	444c      	add	r4, r9
 800e406:	1b2d      	subs	r5, r5, r4
 800e408:	1963      	adds	r3, r4, r5
 800e40a:	42bb      	cmp	r3, r7
 800e40c:	db04      	blt.n	800e418 <__s2b+0x78>
 800e40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e412:	340a      	adds	r4, #10
 800e414:	2509      	movs	r5, #9
 800e416:	e7f6      	b.n	800e406 <__s2b+0x66>
 800e418:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e41c:	4601      	mov	r1, r0
 800e41e:	3b30      	subs	r3, #48	@ 0x30
 800e420:	220a      	movs	r2, #10
 800e422:	4630      	mov	r0, r6
 800e424:	f7ff ff76 	bl	800e314 <__multadd>
 800e428:	e7ee      	b.n	800e408 <__s2b+0x68>
 800e42a:	bf00      	nop
 800e42c:	08010ee5 	.word	0x08010ee5
 800e430:	08010ef6 	.word	0x08010ef6

0800e434 <__hi0bits>:
 800e434:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e438:	4603      	mov	r3, r0
 800e43a:	bf36      	itet	cc
 800e43c:	0403      	lslcc	r3, r0, #16
 800e43e:	2000      	movcs	r0, #0
 800e440:	2010      	movcc	r0, #16
 800e442:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e446:	bf3c      	itt	cc
 800e448:	021b      	lslcc	r3, r3, #8
 800e44a:	3008      	addcc	r0, #8
 800e44c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e450:	bf3c      	itt	cc
 800e452:	011b      	lslcc	r3, r3, #4
 800e454:	3004      	addcc	r0, #4
 800e456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e45a:	bf3c      	itt	cc
 800e45c:	009b      	lslcc	r3, r3, #2
 800e45e:	3002      	addcc	r0, #2
 800e460:	2b00      	cmp	r3, #0
 800e462:	db05      	blt.n	800e470 <__hi0bits+0x3c>
 800e464:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e468:	f100 0001 	add.w	r0, r0, #1
 800e46c:	bf08      	it	eq
 800e46e:	2020      	moveq	r0, #32
 800e470:	4770      	bx	lr

0800e472 <__lo0bits>:
 800e472:	6803      	ldr	r3, [r0, #0]
 800e474:	4602      	mov	r2, r0
 800e476:	f013 0007 	ands.w	r0, r3, #7
 800e47a:	d00b      	beq.n	800e494 <__lo0bits+0x22>
 800e47c:	07d9      	lsls	r1, r3, #31
 800e47e:	d421      	bmi.n	800e4c4 <__lo0bits+0x52>
 800e480:	0798      	lsls	r0, r3, #30
 800e482:	bf49      	itett	mi
 800e484:	085b      	lsrmi	r3, r3, #1
 800e486:	089b      	lsrpl	r3, r3, #2
 800e488:	2001      	movmi	r0, #1
 800e48a:	6013      	strmi	r3, [r2, #0]
 800e48c:	bf5c      	itt	pl
 800e48e:	6013      	strpl	r3, [r2, #0]
 800e490:	2002      	movpl	r0, #2
 800e492:	4770      	bx	lr
 800e494:	b299      	uxth	r1, r3
 800e496:	b909      	cbnz	r1, 800e49c <__lo0bits+0x2a>
 800e498:	0c1b      	lsrs	r3, r3, #16
 800e49a:	2010      	movs	r0, #16
 800e49c:	b2d9      	uxtb	r1, r3
 800e49e:	b909      	cbnz	r1, 800e4a4 <__lo0bits+0x32>
 800e4a0:	3008      	adds	r0, #8
 800e4a2:	0a1b      	lsrs	r3, r3, #8
 800e4a4:	0719      	lsls	r1, r3, #28
 800e4a6:	bf04      	itt	eq
 800e4a8:	091b      	lsreq	r3, r3, #4
 800e4aa:	3004      	addeq	r0, #4
 800e4ac:	0799      	lsls	r1, r3, #30
 800e4ae:	bf04      	itt	eq
 800e4b0:	089b      	lsreq	r3, r3, #2
 800e4b2:	3002      	addeq	r0, #2
 800e4b4:	07d9      	lsls	r1, r3, #31
 800e4b6:	d403      	bmi.n	800e4c0 <__lo0bits+0x4e>
 800e4b8:	085b      	lsrs	r3, r3, #1
 800e4ba:	f100 0001 	add.w	r0, r0, #1
 800e4be:	d003      	beq.n	800e4c8 <__lo0bits+0x56>
 800e4c0:	6013      	str	r3, [r2, #0]
 800e4c2:	4770      	bx	lr
 800e4c4:	2000      	movs	r0, #0
 800e4c6:	4770      	bx	lr
 800e4c8:	2020      	movs	r0, #32
 800e4ca:	4770      	bx	lr

0800e4cc <__i2b>:
 800e4cc:	b510      	push	{r4, lr}
 800e4ce:	460c      	mov	r4, r1
 800e4d0:	2101      	movs	r1, #1
 800e4d2:	f7ff febd 	bl	800e250 <_Balloc>
 800e4d6:	4602      	mov	r2, r0
 800e4d8:	b928      	cbnz	r0, 800e4e6 <__i2b+0x1a>
 800e4da:	4b05      	ldr	r3, [pc, #20]	@ (800e4f0 <__i2b+0x24>)
 800e4dc:	4805      	ldr	r0, [pc, #20]	@ (800e4f4 <__i2b+0x28>)
 800e4de:	f240 1145 	movw	r1, #325	@ 0x145
 800e4e2:	f7fe ff4b 	bl	800d37c <__assert_func>
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	6144      	str	r4, [r0, #20]
 800e4ea:	6103      	str	r3, [r0, #16]
 800e4ec:	bd10      	pop	{r4, pc}
 800e4ee:	bf00      	nop
 800e4f0:	08010ee5 	.word	0x08010ee5
 800e4f4:	08010ef6 	.word	0x08010ef6

0800e4f8 <__multiply>:
 800e4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4fc:	4614      	mov	r4, r2
 800e4fe:	690a      	ldr	r2, [r1, #16]
 800e500:	6923      	ldr	r3, [r4, #16]
 800e502:	429a      	cmp	r2, r3
 800e504:	bfa8      	it	ge
 800e506:	4623      	movge	r3, r4
 800e508:	460f      	mov	r7, r1
 800e50a:	bfa4      	itt	ge
 800e50c:	460c      	movge	r4, r1
 800e50e:	461f      	movge	r7, r3
 800e510:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e514:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e518:	68a3      	ldr	r3, [r4, #8]
 800e51a:	6861      	ldr	r1, [r4, #4]
 800e51c:	eb0a 0609 	add.w	r6, sl, r9
 800e520:	42b3      	cmp	r3, r6
 800e522:	b085      	sub	sp, #20
 800e524:	bfb8      	it	lt
 800e526:	3101      	addlt	r1, #1
 800e528:	f7ff fe92 	bl	800e250 <_Balloc>
 800e52c:	b930      	cbnz	r0, 800e53c <__multiply+0x44>
 800e52e:	4602      	mov	r2, r0
 800e530:	4b44      	ldr	r3, [pc, #272]	@ (800e644 <__multiply+0x14c>)
 800e532:	4845      	ldr	r0, [pc, #276]	@ (800e648 <__multiply+0x150>)
 800e534:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e538:	f7fe ff20 	bl	800d37c <__assert_func>
 800e53c:	f100 0514 	add.w	r5, r0, #20
 800e540:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e544:	462b      	mov	r3, r5
 800e546:	2200      	movs	r2, #0
 800e548:	4543      	cmp	r3, r8
 800e54a:	d321      	bcc.n	800e590 <__multiply+0x98>
 800e54c:	f107 0114 	add.w	r1, r7, #20
 800e550:	f104 0214 	add.w	r2, r4, #20
 800e554:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e558:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e55c:	9302      	str	r3, [sp, #8]
 800e55e:	1b13      	subs	r3, r2, r4
 800e560:	3b15      	subs	r3, #21
 800e562:	f023 0303 	bic.w	r3, r3, #3
 800e566:	3304      	adds	r3, #4
 800e568:	f104 0715 	add.w	r7, r4, #21
 800e56c:	42ba      	cmp	r2, r7
 800e56e:	bf38      	it	cc
 800e570:	2304      	movcc	r3, #4
 800e572:	9301      	str	r3, [sp, #4]
 800e574:	9b02      	ldr	r3, [sp, #8]
 800e576:	9103      	str	r1, [sp, #12]
 800e578:	428b      	cmp	r3, r1
 800e57a:	d80c      	bhi.n	800e596 <__multiply+0x9e>
 800e57c:	2e00      	cmp	r6, #0
 800e57e:	dd03      	ble.n	800e588 <__multiply+0x90>
 800e580:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e584:	2b00      	cmp	r3, #0
 800e586:	d05b      	beq.n	800e640 <__multiply+0x148>
 800e588:	6106      	str	r6, [r0, #16]
 800e58a:	b005      	add	sp, #20
 800e58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e590:	f843 2b04 	str.w	r2, [r3], #4
 800e594:	e7d8      	b.n	800e548 <__multiply+0x50>
 800e596:	f8b1 a000 	ldrh.w	sl, [r1]
 800e59a:	f1ba 0f00 	cmp.w	sl, #0
 800e59e:	d024      	beq.n	800e5ea <__multiply+0xf2>
 800e5a0:	f104 0e14 	add.w	lr, r4, #20
 800e5a4:	46a9      	mov	r9, r5
 800e5a6:	f04f 0c00 	mov.w	ip, #0
 800e5aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e5ae:	f8d9 3000 	ldr.w	r3, [r9]
 800e5b2:	fa1f fb87 	uxth.w	fp, r7
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	fb0a 330b 	mla	r3, sl, fp, r3
 800e5bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e5c0:	f8d9 7000 	ldr.w	r7, [r9]
 800e5c4:	4463      	add	r3, ip
 800e5c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e5ca:	fb0a c70b 	mla	r7, sl, fp, ip
 800e5ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e5d8:	4572      	cmp	r2, lr
 800e5da:	f849 3b04 	str.w	r3, [r9], #4
 800e5de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e5e2:	d8e2      	bhi.n	800e5aa <__multiply+0xb2>
 800e5e4:	9b01      	ldr	r3, [sp, #4]
 800e5e6:	f845 c003 	str.w	ip, [r5, r3]
 800e5ea:	9b03      	ldr	r3, [sp, #12]
 800e5ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e5f0:	3104      	adds	r1, #4
 800e5f2:	f1b9 0f00 	cmp.w	r9, #0
 800e5f6:	d021      	beq.n	800e63c <__multiply+0x144>
 800e5f8:	682b      	ldr	r3, [r5, #0]
 800e5fa:	f104 0c14 	add.w	ip, r4, #20
 800e5fe:	46ae      	mov	lr, r5
 800e600:	f04f 0a00 	mov.w	sl, #0
 800e604:	f8bc b000 	ldrh.w	fp, [ip]
 800e608:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e60c:	fb09 770b 	mla	r7, r9, fp, r7
 800e610:	4457      	add	r7, sl
 800e612:	b29b      	uxth	r3, r3
 800e614:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e618:	f84e 3b04 	str.w	r3, [lr], #4
 800e61c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e620:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e624:	f8be 3000 	ldrh.w	r3, [lr]
 800e628:	fb09 330a 	mla	r3, r9, sl, r3
 800e62c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e630:	4562      	cmp	r2, ip
 800e632:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e636:	d8e5      	bhi.n	800e604 <__multiply+0x10c>
 800e638:	9f01      	ldr	r7, [sp, #4]
 800e63a:	51eb      	str	r3, [r5, r7]
 800e63c:	3504      	adds	r5, #4
 800e63e:	e799      	b.n	800e574 <__multiply+0x7c>
 800e640:	3e01      	subs	r6, #1
 800e642:	e79b      	b.n	800e57c <__multiply+0x84>
 800e644:	08010ee5 	.word	0x08010ee5
 800e648:	08010ef6 	.word	0x08010ef6

0800e64c <__pow5mult>:
 800e64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e650:	4615      	mov	r5, r2
 800e652:	f012 0203 	ands.w	r2, r2, #3
 800e656:	4607      	mov	r7, r0
 800e658:	460e      	mov	r6, r1
 800e65a:	d007      	beq.n	800e66c <__pow5mult+0x20>
 800e65c:	4c25      	ldr	r4, [pc, #148]	@ (800e6f4 <__pow5mult+0xa8>)
 800e65e:	3a01      	subs	r2, #1
 800e660:	2300      	movs	r3, #0
 800e662:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e666:	f7ff fe55 	bl	800e314 <__multadd>
 800e66a:	4606      	mov	r6, r0
 800e66c:	10ad      	asrs	r5, r5, #2
 800e66e:	d03d      	beq.n	800e6ec <__pow5mult+0xa0>
 800e670:	69fc      	ldr	r4, [r7, #28]
 800e672:	b97c      	cbnz	r4, 800e694 <__pow5mult+0x48>
 800e674:	2010      	movs	r0, #16
 800e676:	f7ff fd35 	bl	800e0e4 <malloc>
 800e67a:	4602      	mov	r2, r0
 800e67c:	61f8      	str	r0, [r7, #28]
 800e67e:	b928      	cbnz	r0, 800e68c <__pow5mult+0x40>
 800e680:	4b1d      	ldr	r3, [pc, #116]	@ (800e6f8 <__pow5mult+0xac>)
 800e682:	481e      	ldr	r0, [pc, #120]	@ (800e6fc <__pow5mult+0xb0>)
 800e684:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e688:	f7fe fe78 	bl	800d37c <__assert_func>
 800e68c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e690:	6004      	str	r4, [r0, #0]
 800e692:	60c4      	str	r4, [r0, #12]
 800e694:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e698:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e69c:	b94c      	cbnz	r4, 800e6b2 <__pow5mult+0x66>
 800e69e:	f240 2171 	movw	r1, #625	@ 0x271
 800e6a2:	4638      	mov	r0, r7
 800e6a4:	f7ff ff12 	bl	800e4cc <__i2b>
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800e6ae:	4604      	mov	r4, r0
 800e6b0:	6003      	str	r3, [r0, #0]
 800e6b2:	f04f 0900 	mov.w	r9, #0
 800e6b6:	07eb      	lsls	r3, r5, #31
 800e6b8:	d50a      	bpl.n	800e6d0 <__pow5mult+0x84>
 800e6ba:	4631      	mov	r1, r6
 800e6bc:	4622      	mov	r2, r4
 800e6be:	4638      	mov	r0, r7
 800e6c0:	f7ff ff1a 	bl	800e4f8 <__multiply>
 800e6c4:	4631      	mov	r1, r6
 800e6c6:	4680      	mov	r8, r0
 800e6c8:	4638      	mov	r0, r7
 800e6ca:	f7ff fe01 	bl	800e2d0 <_Bfree>
 800e6ce:	4646      	mov	r6, r8
 800e6d0:	106d      	asrs	r5, r5, #1
 800e6d2:	d00b      	beq.n	800e6ec <__pow5mult+0xa0>
 800e6d4:	6820      	ldr	r0, [r4, #0]
 800e6d6:	b938      	cbnz	r0, 800e6e8 <__pow5mult+0x9c>
 800e6d8:	4622      	mov	r2, r4
 800e6da:	4621      	mov	r1, r4
 800e6dc:	4638      	mov	r0, r7
 800e6de:	f7ff ff0b 	bl	800e4f8 <__multiply>
 800e6e2:	6020      	str	r0, [r4, #0]
 800e6e4:	f8c0 9000 	str.w	r9, [r0]
 800e6e8:	4604      	mov	r4, r0
 800e6ea:	e7e4      	b.n	800e6b6 <__pow5mult+0x6a>
 800e6ec:	4630      	mov	r0, r6
 800e6ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6f2:	bf00      	nop
 800e6f4:	08010f50 	.word	0x08010f50
 800e6f8:	08010e76 	.word	0x08010e76
 800e6fc:	08010ef6 	.word	0x08010ef6

0800e700 <__lshift>:
 800e700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e704:	460c      	mov	r4, r1
 800e706:	6849      	ldr	r1, [r1, #4]
 800e708:	6923      	ldr	r3, [r4, #16]
 800e70a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e70e:	68a3      	ldr	r3, [r4, #8]
 800e710:	4607      	mov	r7, r0
 800e712:	4691      	mov	r9, r2
 800e714:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e718:	f108 0601 	add.w	r6, r8, #1
 800e71c:	42b3      	cmp	r3, r6
 800e71e:	db0b      	blt.n	800e738 <__lshift+0x38>
 800e720:	4638      	mov	r0, r7
 800e722:	f7ff fd95 	bl	800e250 <_Balloc>
 800e726:	4605      	mov	r5, r0
 800e728:	b948      	cbnz	r0, 800e73e <__lshift+0x3e>
 800e72a:	4602      	mov	r2, r0
 800e72c:	4b28      	ldr	r3, [pc, #160]	@ (800e7d0 <__lshift+0xd0>)
 800e72e:	4829      	ldr	r0, [pc, #164]	@ (800e7d4 <__lshift+0xd4>)
 800e730:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e734:	f7fe fe22 	bl	800d37c <__assert_func>
 800e738:	3101      	adds	r1, #1
 800e73a:	005b      	lsls	r3, r3, #1
 800e73c:	e7ee      	b.n	800e71c <__lshift+0x1c>
 800e73e:	2300      	movs	r3, #0
 800e740:	f100 0114 	add.w	r1, r0, #20
 800e744:	f100 0210 	add.w	r2, r0, #16
 800e748:	4618      	mov	r0, r3
 800e74a:	4553      	cmp	r3, sl
 800e74c:	db33      	blt.n	800e7b6 <__lshift+0xb6>
 800e74e:	6920      	ldr	r0, [r4, #16]
 800e750:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e754:	f104 0314 	add.w	r3, r4, #20
 800e758:	f019 091f 	ands.w	r9, r9, #31
 800e75c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e760:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e764:	d02b      	beq.n	800e7be <__lshift+0xbe>
 800e766:	f1c9 0e20 	rsb	lr, r9, #32
 800e76a:	468a      	mov	sl, r1
 800e76c:	2200      	movs	r2, #0
 800e76e:	6818      	ldr	r0, [r3, #0]
 800e770:	fa00 f009 	lsl.w	r0, r0, r9
 800e774:	4310      	orrs	r0, r2
 800e776:	f84a 0b04 	str.w	r0, [sl], #4
 800e77a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e77e:	459c      	cmp	ip, r3
 800e780:	fa22 f20e 	lsr.w	r2, r2, lr
 800e784:	d8f3      	bhi.n	800e76e <__lshift+0x6e>
 800e786:	ebac 0304 	sub.w	r3, ip, r4
 800e78a:	3b15      	subs	r3, #21
 800e78c:	f023 0303 	bic.w	r3, r3, #3
 800e790:	3304      	adds	r3, #4
 800e792:	f104 0015 	add.w	r0, r4, #21
 800e796:	4584      	cmp	ip, r0
 800e798:	bf38      	it	cc
 800e79a:	2304      	movcc	r3, #4
 800e79c:	50ca      	str	r2, [r1, r3]
 800e79e:	b10a      	cbz	r2, 800e7a4 <__lshift+0xa4>
 800e7a0:	f108 0602 	add.w	r6, r8, #2
 800e7a4:	3e01      	subs	r6, #1
 800e7a6:	4638      	mov	r0, r7
 800e7a8:	612e      	str	r6, [r5, #16]
 800e7aa:	4621      	mov	r1, r4
 800e7ac:	f7ff fd90 	bl	800e2d0 <_Bfree>
 800e7b0:	4628      	mov	r0, r5
 800e7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e7ba:	3301      	adds	r3, #1
 800e7bc:	e7c5      	b.n	800e74a <__lshift+0x4a>
 800e7be:	3904      	subs	r1, #4
 800e7c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e7c8:	459c      	cmp	ip, r3
 800e7ca:	d8f9      	bhi.n	800e7c0 <__lshift+0xc0>
 800e7cc:	e7ea      	b.n	800e7a4 <__lshift+0xa4>
 800e7ce:	bf00      	nop
 800e7d0:	08010ee5 	.word	0x08010ee5
 800e7d4:	08010ef6 	.word	0x08010ef6

0800e7d8 <__mcmp>:
 800e7d8:	690a      	ldr	r2, [r1, #16]
 800e7da:	4603      	mov	r3, r0
 800e7dc:	6900      	ldr	r0, [r0, #16]
 800e7de:	1a80      	subs	r0, r0, r2
 800e7e0:	b530      	push	{r4, r5, lr}
 800e7e2:	d10e      	bne.n	800e802 <__mcmp+0x2a>
 800e7e4:	3314      	adds	r3, #20
 800e7e6:	3114      	adds	r1, #20
 800e7e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e7ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e7f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e7f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e7f8:	4295      	cmp	r5, r2
 800e7fa:	d003      	beq.n	800e804 <__mcmp+0x2c>
 800e7fc:	d205      	bcs.n	800e80a <__mcmp+0x32>
 800e7fe:	f04f 30ff 	mov.w	r0, #4294967295
 800e802:	bd30      	pop	{r4, r5, pc}
 800e804:	42a3      	cmp	r3, r4
 800e806:	d3f3      	bcc.n	800e7f0 <__mcmp+0x18>
 800e808:	e7fb      	b.n	800e802 <__mcmp+0x2a>
 800e80a:	2001      	movs	r0, #1
 800e80c:	e7f9      	b.n	800e802 <__mcmp+0x2a>
	...

0800e810 <__mdiff>:
 800e810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e814:	4689      	mov	r9, r1
 800e816:	4606      	mov	r6, r0
 800e818:	4611      	mov	r1, r2
 800e81a:	4648      	mov	r0, r9
 800e81c:	4614      	mov	r4, r2
 800e81e:	f7ff ffdb 	bl	800e7d8 <__mcmp>
 800e822:	1e05      	subs	r5, r0, #0
 800e824:	d112      	bne.n	800e84c <__mdiff+0x3c>
 800e826:	4629      	mov	r1, r5
 800e828:	4630      	mov	r0, r6
 800e82a:	f7ff fd11 	bl	800e250 <_Balloc>
 800e82e:	4602      	mov	r2, r0
 800e830:	b928      	cbnz	r0, 800e83e <__mdiff+0x2e>
 800e832:	4b3f      	ldr	r3, [pc, #252]	@ (800e930 <__mdiff+0x120>)
 800e834:	f240 2137 	movw	r1, #567	@ 0x237
 800e838:	483e      	ldr	r0, [pc, #248]	@ (800e934 <__mdiff+0x124>)
 800e83a:	f7fe fd9f 	bl	800d37c <__assert_func>
 800e83e:	2301      	movs	r3, #1
 800e840:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e844:	4610      	mov	r0, r2
 800e846:	b003      	add	sp, #12
 800e848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e84c:	bfbc      	itt	lt
 800e84e:	464b      	movlt	r3, r9
 800e850:	46a1      	movlt	r9, r4
 800e852:	4630      	mov	r0, r6
 800e854:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e858:	bfba      	itte	lt
 800e85a:	461c      	movlt	r4, r3
 800e85c:	2501      	movlt	r5, #1
 800e85e:	2500      	movge	r5, #0
 800e860:	f7ff fcf6 	bl	800e250 <_Balloc>
 800e864:	4602      	mov	r2, r0
 800e866:	b918      	cbnz	r0, 800e870 <__mdiff+0x60>
 800e868:	4b31      	ldr	r3, [pc, #196]	@ (800e930 <__mdiff+0x120>)
 800e86a:	f240 2145 	movw	r1, #581	@ 0x245
 800e86e:	e7e3      	b.n	800e838 <__mdiff+0x28>
 800e870:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e874:	6926      	ldr	r6, [r4, #16]
 800e876:	60c5      	str	r5, [r0, #12]
 800e878:	f109 0310 	add.w	r3, r9, #16
 800e87c:	f109 0514 	add.w	r5, r9, #20
 800e880:	f104 0e14 	add.w	lr, r4, #20
 800e884:	f100 0b14 	add.w	fp, r0, #20
 800e888:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e88c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e890:	9301      	str	r3, [sp, #4]
 800e892:	46d9      	mov	r9, fp
 800e894:	f04f 0c00 	mov.w	ip, #0
 800e898:	9b01      	ldr	r3, [sp, #4]
 800e89a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e89e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e8a2:	9301      	str	r3, [sp, #4]
 800e8a4:	fa1f f38a 	uxth.w	r3, sl
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	b283      	uxth	r3, r0
 800e8ac:	1acb      	subs	r3, r1, r3
 800e8ae:	0c00      	lsrs	r0, r0, #16
 800e8b0:	4463      	add	r3, ip
 800e8b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e8b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e8ba:	b29b      	uxth	r3, r3
 800e8bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e8c0:	4576      	cmp	r6, lr
 800e8c2:	f849 3b04 	str.w	r3, [r9], #4
 800e8c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e8ca:	d8e5      	bhi.n	800e898 <__mdiff+0x88>
 800e8cc:	1b33      	subs	r3, r6, r4
 800e8ce:	3b15      	subs	r3, #21
 800e8d0:	f023 0303 	bic.w	r3, r3, #3
 800e8d4:	3415      	adds	r4, #21
 800e8d6:	3304      	adds	r3, #4
 800e8d8:	42a6      	cmp	r6, r4
 800e8da:	bf38      	it	cc
 800e8dc:	2304      	movcc	r3, #4
 800e8de:	441d      	add	r5, r3
 800e8e0:	445b      	add	r3, fp
 800e8e2:	461e      	mov	r6, r3
 800e8e4:	462c      	mov	r4, r5
 800e8e6:	4544      	cmp	r4, r8
 800e8e8:	d30e      	bcc.n	800e908 <__mdiff+0xf8>
 800e8ea:	f108 0103 	add.w	r1, r8, #3
 800e8ee:	1b49      	subs	r1, r1, r5
 800e8f0:	f021 0103 	bic.w	r1, r1, #3
 800e8f4:	3d03      	subs	r5, #3
 800e8f6:	45a8      	cmp	r8, r5
 800e8f8:	bf38      	it	cc
 800e8fa:	2100      	movcc	r1, #0
 800e8fc:	440b      	add	r3, r1
 800e8fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e902:	b191      	cbz	r1, 800e92a <__mdiff+0x11a>
 800e904:	6117      	str	r7, [r2, #16]
 800e906:	e79d      	b.n	800e844 <__mdiff+0x34>
 800e908:	f854 1b04 	ldr.w	r1, [r4], #4
 800e90c:	46e6      	mov	lr, ip
 800e90e:	0c08      	lsrs	r0, r1, #16
 800e910:	fa1c fc81 	uxtah	ip, ip, r1
 800e914:	4471      	add	r1, lr
 800e916:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e91a:	b289      	uxth	r1, r1
 800e91c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e920:	f846 1b04 	str.w	r1, [r6], #4
 800e924:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e928:	e7dd      	b.n	800e8e6 <__mdiff+0xd6>
 800e92a:	3f01      	subs	r7, #1
 800e92c:	e7e7      	b.n	800e8fe <__mdiff+0xee>
 800e92e:	bf00      	nop
 800e930:	08010ee5 	.word	0x08010ee5
 800e934:	08010ef6 	.word	0x08010ef6

0800e938 <__ulp>:
 800e938:	b082      	sub	sp, #8
 800e93a:	ed8d 0b00 	vstr	d0, [sp]
 800e93e:	9a01      	ldr	r2, [sp, #4]
 800e940:	4b0f      	ldr	r3, [pc, #60]	@ (800e980 <__ulp+0x48>)
 800e942:	4013      	ands	r3, r2
 800e944:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e948:	2b00      	cmp	r3, #0
 800e94a:	dc08      	bgt.n	800e95e <__ulp+0x26>
 800e94c:	425b      	negs	r3, r3
 800e94e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e952:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e956:	da04      	bge.n	800e962 <__ulp+0x2a>
 800e958:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e95c:	4113      	asrs	r3, r2
 800e95e:	2200      	movs	r2, #0
 800e960:	e008      	b.n	800e974 <__ulp+0x3c>
 800e962:	f1a2 0314 	sub.w	r3, r2, #20
 800e966:	2b1e      	cmp	r3, #30
 800e968:	bfda      	itte	le
 800e96a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e96e:	40da      	lsrle	r2, r3
 800e970:	2201      	movgt	r2, #1
 800e972:	2300      	movs	r3, #0
 800e974:	4619      	mov	r1, r3
 800e976:	4610      	mov	r0, r2
 800e978:	ec41 0b10 	vmov	d0, r0, r1
 800e97c:	b002      	add	sp, #8
 800e97e:	4770      	bx	lr
 800e980:	7ff00000 	.word	0x7ff00000

0800e984 <__b2d>:
 800e984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e988:	6906      	ldr	r6, [r0, #16]
 800e98a:	f100 0814 	add.w	r8, r0, #20
 800e98e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e992:	1f37      	subs	r7, r6, #4
 800e994:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e998:	4610      	mov	r0, r2
 800e99a:	f7ff fd4b 	bl	800e434 <__hi0bits>
 800e99e:	f1c0 0320 	rsb	r3, r0, #32
 800e9a2:	280a      	cmp	r0, #10
 800e9a4:	600b      	str	r3, [r1, #0]
 800e9a6:	491b      	ldr	r1, [pc, #108]	@ (800ea14 <__b2d+0x90>)
 800e9a8:	dc15      	bgt.n	800e9d6 <__b2d+0x52>
 800e9aa:	f1c0 0c0b 	rsb	ip, r0, #11
 800e9ae:	fa22 f30c 	lsr.w	r3, r2, ip
 800e9b2:	45b8      	cmp	r8, r7
 800e9b4:	ea43 0501 	orr.w	r5, r3, r1
 800e9b8:	bf34      	ite	cc
 800e9ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e9be:	2300      	movcs	r3, #0
 800e9c0:	3015      	adds	r0, #21
 800e9c2:	fa02 f000 	lsl.w	r0, r2, r0
 800e9c6:	fa23 f30c 	lsr.w	r3, r3, ip
 800e9ca:	4303      	orrs	r3, r0
 800e9cc:	461c      	mov	r4, r3
 800e9ce:	ec45 4b10 	vmov	d0, r4, r5
 800e9d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9d6:	45b8      	cmp	r8, r7
 800e9d8:	bf3a      	itte	cc
 800e9da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e9de:	f1a6 0708 	subcc.w	r7, r6, #8
 800e9e2:	2300      	movcs	r3, #0
 800e9e4:	380b      	subs	r0, #11
 800e9e6:	d012      	beq.n	800ea0e <__b2d+0x8a>
 800e9e8:	f1c0 0120 	rsb	r1, r0, #32
 800e9ec:	fa23 f401 	lsr.w	r4, r3, r1
 800e9f0:	4082      	lsls	r2, r0
 800e9f2:	4322      	orrs	r2, r4
 800e9f4:	4547      	cmp	r7, r8
 800e9f6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e9fa:	bf8c      	ite	hi
 800e9fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ea00:	2200      	movls	r2, #0
 800ea02:	4083      	lsls	r3, r0
 800ea04:	40ca      	lsrs	r2, r1
 800ea06:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ea0a:	4313      	orrs	r3, r2
 800ea0c:	e7de      	b.n	800e9cc <__b2d+0x48>
 800ea0e:	ea42 0501 	orr.w	r5, r2, r1
 800ea12:	e7db      	b.n	800e9cc <__b2d+0x48>
 800ea14:	3ff00000 	.word	0x3ff00000

0800ea18 <__d2b>:
 800ea18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ea1c:	460f      	mov	r7, r1
 800ea1e:	2101      	movs	r1, #1
 800ea20:	ec59 8b10 	vmov	r8, r9, d0
 800ea24:	4616      	mov	r6, r2
 800ea26:	f7ff fc13 	bl	800e250 <_Balloc>
 800ea2a:	4604      	mov	r4, r0
 800ea2c:	b930      	cbnz	r0, 800ea3c <__d2b+0x24>
 800ea2e:	4602      	mov	r2, r0
 800ea30:	4b23      	ldr	r3, [pc, #140]	@ (800eac0 <__d2b+0xa8>)
 800ea32:	4824      	ldr	r0, [pc, #144]	@ (800eac4 <__d2b+0xac>)
 800ea34:	f240 310f 	movw	r1, #783	@ 0x30f
 800ea38:	f7fe fca0 	bl	800d37c <__assert_func>
 800ea3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ea40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea44:	b10d      	cbz	r5, 800ea4a <__d2b+0x32>
 800ea46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ea4a:	9301      	str	r3, [sp, #4]
 800ea4c:	f1b8 0300 	subs.w	r3, r8, #0
 800ea50:	d023      	beq.n	800ea9a <__d2b+0x82>
 800ea52:	4668      	mov	r0, sp
 800ea54:	9300      	str	r3, [sp, #0]
 800ea56:	f7ff fd0c 	bl	800e472 <__lo0bits>
 800ea5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ea5e:	b1d0      	cbz	r0, 800ea96 <__d2b+0x7e>
 800ea60:	f1c0 0320 	rsb	r3, r0, #32
 800ea64:	fa02 f303 	lsl.w	r3, r2, r3
 800ea68:	430b      	orrs	r3, r1
 800ea6a:	40c2      	lsrs	r2, r0
 800ea6c:	6163      	str	r3, [r4, #20]
 800ea6e:	9201      	str	r2, [sp, #4]
 800ea70:	9b01      	ldr	r3, [sp, #4]
 800ea72:	61a3      	str	r3, [r4, #24]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	bf0c      	ite	eq
 800ea78:	2201      	moveq	r2, #1
 800ea7a:	2202      	movne	r2, #2
 800ea7c:	6122      	str	r2, [r4, #16]
 800ea7e:	b1a5      	cbz	r5, 800eaaa <__d2b+0x92>
 800ea80:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ea84:	4405      	add	r5, r0
 800ea86:	603d      	str	r5, [r7, #0]
 800ea88:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ea8c:	6030      	str	r0, [r6, #0]
 800ea8e:	4620      	mov	r0, r4
 800ea90:	b003      	add	sp, #12
 800ea92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea96:	6161      	str	r1, [r4, #20]
 800ea98:	e7ea      	b.n	800ea70 <__d2b+0x58>
 800ea9a:	a801      	add	r0, sp, #4
 800ea9c:	f7ff fce9 	bl	800e472 <__lo0bits>
 800eaa0:	9b01      	ldr	r3, [sp, #4]
 800eaa2:	6163      	str	r3, [r4, #20]
 800eaa4:	3020      	adds	r0, #32
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	e7e8      	b.n	800ea7c <__d2b+0x64>
 800eaaa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eaae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800eab2:	6038      	str	r0, [r7, #0]
 800eab4:	6918      	ldr	r0, [r3, #16]
 800eab6:	f7ff fcbd 	bl	800e434 <__hi0bits>
 800eaba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eabe:	e7e5      	b.n	800ea8c <__d2b+0x74>
 800eac0:	08010ee5 	.word	0x08010ee5
 800eac4:	08010ef6 	.word	0x08010ef6

0800eac8 <__ratio>:
 800eac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eacc:	b085      	sub	sp, #20
 800eace:	e9cd 1000 	strd	r1, r0, [sp]
 800ead2:	a902      	add	r1, sp, #8
 800ead4:	f7ff ff56 	bl	800e984 <__b2d>
 800ead8:	9800      	ldr	r0, [sp, #0]
 800eada:	a903      	add	r1, sp, #12
 800eadc:	ec55 4b10 	vmov	r4, r5, d0
 800eae0:	f7ff ff50 	bl	800e984 <__b2d>
 800eae4:	9b01      	ldr	r3, [sp, #4]
 800eae6:	6919      	ldr	r1, [r3, #16]
 800eae8:	9b00      	ldr	r3, [sp, #0]
 800eaea:	691b      	ldr	r3, [r3, #16]
 800eaec:	1ac9      	subs	r1, r1, r3
 800eaee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800eaf2:	1a9b      	subs	r3, r3, r2
 800eaf4:	ec5b ab10 	vmov	sl, fp, d0
 800eaf8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	bfce      	itee	gt
 800eb00:	462a      	movgt	r2, r5
 800eb02:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800eb06:	465a      	movle	r2, fp
 800eb08:	462f      	mov	r7, r5
 800eb0a:	46d9      	mov	r9, fp
 800eb0c:	bfcc      	ite	gt
 800eb0e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800eb12:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800eb16:	464b      	mov	r3, r9
 800eb18:	4652      	mov	r2, sl
 800eb1a:	4620      	mov	r0, r4
 800eb1c:	4639      	mov	r1, r7
 800eb1e:	f7f1 fe95 	bl	800084c <__aeabi_ddiv>
 800eb22:	ec41 0b10 	vmov	d0, r0, r1
 800eb26:	b005      	add	sp, #20
 800eb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eb2c <__copybits>:
 800eb2c:	3901      	subs	r1, #1
 800eb2e:	b570      	push	{r4, r5, r6, lr}
 800eb30:	1149      	asrs	r1, r1, #5
 800eb32:	6914      	ldr	r4, [r2, #16]
 800eb34:	3101      	adds	r1, #1
 800eb36:	f102 0314 	add.w	r3, r2, #20
 800eb3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800eb3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eb42:	1f05      	subs	r5, r0, #4
 800eb44:	42a3      	cmp	r3, r4
 800eb46:	d30c      	bcc.n	800eb62 <__copybits+0x36>
 800eb48:	1aa3      	subs	r3, r4, r2
 800eb4a:	3b11      	subs	r3, #17
 800eb4c:	f023 0303 	bic.w	r3, r3, #3
 800eb50:	3211      	adds	r2, #17
 800eb52:	42a2      	cmp	r2, r4
 800eb54:	bf88      	it	hi
 800eb56:	2300      	movhi	r3, #0
 800eb58:	4418      	add	r0, r3
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	4288      	cmp	r0, r1
 800eb5e:	d305      	bcc.n	800eb6c <__copybits+0x40>
 800eb60:	bd70      	pop	{r4, r5, r6, pc}
 800eb62:	f853 6b04 	ldr.w	r6, [r3], #4
 800eb66:	f845 6f04 	str.w	r6, [r5, #4]!
 800eb6a:	e7eb      	b.n	800eb44 <__copybits+0x18>
 800eb6c:	f840 3b04 	str.w	r3, [r0], #4
 800eb70:	e7f4      	b.n	800eb5c <__copybits+0x30>

0800eb72 <__any_on>:
 800eb72:	f100 0214 	add.w	r2, r0, #20
 800eb76:	6900      	ldr	r0, [r0, #16]
 800eb78:	114b      	asrs	r3, r1, #5
 800eb7a:	4298      	cmp	r0, r3
 800eb7c:	b510      	push	{r4, lr}
 800eb7e:	db11      	blt.n	800eba4 <__any_on+0x32>
 800eb80:	dd0a      	ble.n	800eb98 <__any_on+0x26>
 800eb82:	f011 011f 	ands.w	r1, r1, #31
 800eb86:	d007      	beq.n	800eb98 <__any_on+0x26>
 800eb88:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800eb8c:	fa24 f001 	lsr.w	r0, r4, r1
 800eb90:	fa00 f101 	lsl.w	r1, r0, r1
 800eb94:	428c      	cmp	r4, r1
 800eb96:	d10b      	bne.n	800ebb0 <__any_on+0x3e>
 800eb98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	d803      	bhi.n	800eba8 <__any_on+0x36>
 800eba0:	2000      	movs	r0, #0
 800eba2:	bd10      	pop	{r4, pc}
 800eba4:	4603      	mov	r3, r0
 800eba6:	e7f7      	b.n	800eb98 <__any_on+0x26>
 800eba8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ebac:	2900      	cmp	r1, #0
 800ebae:	d0f5      	beq.n	800eb9c <__any_on+0x2a>
 800ebb0:	2001      	movs	r0, #1
 800ebb2:	e7f6      	b.n	800eba2 <__any_on+0x30>

0800ebb4 <sulp>:
 800ebb4:	b570      	push	{r4, r5, r6, lr}
 800ebb6:	4604      	mov	r4, r0
 800ebb8:	460d      	mov	r5, r1
 800ebba:	ec45 4b10 	vmov	d0, r4, r5
 800ebbe:	4616      	mov	r6, r2
 800ebc0:	f7ff feba 	bl	800e938 <__ulp>
 800ebc4:	ec51 0b10 	vmov	r0, r1, d0
 800ebc8:	b17e      	cbz	r6, 800ebea <sulp+0x36>
 800ebca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ebce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	dd09      	ble.n	800ebea <sulp+0x36>
 800ebd6:	051b      	lsls	r3, r3, #20
 800ebd8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ebdc:	2400      	movs	r4, #0
 800ebde:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ebe2:	4622      	mov	r2, r4
 800ebe4:	462b      	mov	r3, r5
 800ebe6:	f7f1 fd07 	bl	80005f8 <__aeabi_dmul>
 800ebea:	ec41 0b10 	vmov	d0, r0, r1
 800ebee:	bd70      	pop	{r4, r5, r6, pc}

0800ebf0 <_strtod_l>:
 800ebf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebf4:	b09f      	sub	sp, #124	@ 0x7c
 800ebf6:	460c      	mov	r4, r1
 800ebf8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	921a      	str	r2, [sp, #104]	@ 0x68
 800ebfe:	9005      	str	r0, [sp, #20]
 800ec00:	f04f 0a00 	mov.w	sl, #0
 800ec04:	f04f 0b00 	mov.w	fp, #0
 800ec08:	460a      	mov	r2, r1
 800ec0a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ec0c:	7811      	ldrb	r1, [r2, #0]
 800ec0e:	292b      	cmp	r1, #43	@ 0x2b
 800ec10:	d04a      	beq.n	800eca8 <_strtod_l+0xb8>
 800ec12:	d838      	bhi.n	800ec86 <_strtod_l+0x96>
 800ec14:	290d      	cmp	r1, #13
 800ec16:	d832      	bhi.n	800ec7e <_strtod_l+0x8e>
 800ec18:	2908      	cmp	r1, #8
 800ec1a:	d832      	bhi.n	800ec82 <_strtod_l+0x92>
 800ec1c:	2900      	cmp	r1, #0
 800ec1e:	d03b      	beq.n	800ec98 <_strtod_l+0xa8>
 800ec20:	2200      	movs	r2, #0
 800ec22:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ec24:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ec26:	782a      	ldrb	r2, [r5, #0]
 800ec28:	2a30      	cmp	r2, #48	@ 0x30
 800ec2a:	f040 80b3 	bne.w	800ed94 <_strtod_l+0x1a4>
 800ec2e:	786a      	ldrb	r2, [r5, #1]
 800ec30:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ec34:	2a58      	cmp	r2, #88	@ 0x58
 800ec36:	d16e      	bne.n	800ed16 <_strtod_l+0x126>
 800ec38:	9302      	str	r3, [sp, #8]
 800ec3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec3c:	9301      	str	r3, [sp, #4]
 800ec3e:	ab1a      	add	r3, sp, #104	@ 0x68
 800ec40:	9300      	str	r3, [sp, #0]
 800ec42:	4a8e      	ldr	r2, [pc, #568]	@ (800ee7c <_strtod_l+0x28c>)
 800ec44:	9805      	ldr	r0, [sp, #20]
 800ec46:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ec48:	a919      	add	r1, sp, #100	@ 0x64
 800ec4a:	f001 fadb 	bl	8010204 <__gethex>
 800ec4e:	f010 060f 	ands.w	r6, r0, #15
 800ec52:	4604      	mov	r4, r0
 800ec54:	d005      	beq.n	800ec62 <_strtod_l+0x72>
 800ec56:	2e06      	cmp	r6, #6
 800ec58:	d128      	bne.n	800ecac <_strtod_l+0xbc>
 800ec5a:	3501      	adds	r5, #1
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	9519      	str	r5, [sp, #100]	@ 0x64
 800ec60:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ec62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	f040 858e 	bne.w	800f786 <_strtod_l+0xb96>
 800ec6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec6c:	b1cb      	cbz	r3, 800eca2 <_strtod_l+0xb2>
 800ec6e:	4652      	mov	r2, sl
 800ec70:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ec74:	ec43 2b10 	vmov	d0, r2, r3
 800ec78:	b01f      	add	sp, #124	@ 0x7c
 800ec7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec7e:	2920      	cmp	r1, #32
 800ec80:	d1ce      	bne.n	800ec20 <_strtod_l+0x30>
 800ec82:	3201      	adds	r2, #1
 800ec84:	e7c1      	b.n	800ec0a <_strtod_l+0x1a>
 800ec86:	292d      	cmp	r1, #45	@ 0x2d
 800ec88:	d1ca      	bne.n	800ec20 <_strtod_l+0x30>
 800ec8a:	2101      	movs	r1, #1
 800ec8c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ec8e:	1c51      	adds	r1, r2, #1
 800ec90:	9119      	str	r1, [sp, #100]	@ 0x64
 800ec92:	7852      	ldrb	r2, [r2, #1]
 800ec94:	2a00      	cmp	r2, #0
 800ec96:	d1c5      	bne.n	800ec24 <_strtod_l+0x34>
 800ec98:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ec9a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	f040 8570 	bne.w	800f782 <_strtod_l+0xb92>
 800eca2:	4652      	mov	r2, sl
 800eca4:	465b      	mov	r3, fp
 800eca6:	e7e5      	b.n	800ec74 <_strtod_l+0x84>
 800eca8:	2100      	movs	r1, #0
 800ecaa:	e7ef      	b.n	800ec8c <_strtod_l+0x9c>
 800ecac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ecae:	b13a      	cbz	r2, 800ecc0 <_strtod_l+0xd0>
 800ecb0:	2135      	movs	r1, #53	@ 0x35
 800ecb2:	a81c      	add	r0, sp, #112	@ 0x70
 800ecb4:	f7ff ff3a 	bl	800eb2c <__copybits>
 800ecb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ecba:	9805      	ldr	r0, [sp, #20]
 800ecbc:	f7ff fb08 	bl	800e2d0 <_Bfree>
 800ecc0:	3e01      	subs	r6, #1
 800ecc2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ecc4:	2e04      	cmp	r6, #4
 800ecc6:	d806      	bhi.n	800ecd6 <_strtod_l+0xe6>
 800ecc8:	e8df f006 	tbb	[pc, r6]
 800eccc:	201d0314 	.word	0x201d0314
 800ecd0:	14          	.byte	0x14
 800ecd1:	00          	.byte	0x00
 800ecd2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ecd6:	05e1      	lsls	r1, r4, #23
 800ecd8:	bf48      	it	mi
 800ecda:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ecde:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ece2:	0d1b      	lsrs	r3, r3, #20
 800ece4:	051b      	lsls	r3, r3, #20
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d1bb      	bne.n	800ec62 <_strtod_l+0x72>
 800ecea:	f7fe fb05 	bl	800d2f8 <__errno>
 800ecee:	2322      	movs	r3, #34	@ 0x22
 800ecf0:	6003      	str	r3, [r0, #0]
 800ecf2:	e7b6      	b.n	800ec62 <_strtod_l+0x72>
 800ecf4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ecf8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ecfc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ed00:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ed04:	e7e7      	b.n	800ecd6 <_strtod_l+0xe6>
 800ed06:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ee84 <_strtod_l+0x294>
 800ed0a:	e7e4      	b.n	800ecd6 <_strtod_l+0xe6>
 800ed0c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ed10:	f04f 3aff 	mov.w	sl, #4294967295
 800ed14:	e7df      	b.n	800ecd6 <_strtod_l+0xe6>
 800ed16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed18:	1c5a      	adds	r2, r3, #1
 800ed1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ed1c:	785b      	ldrb	r3, [r3, #1]
 800ed1e:	2b30      	cmp	r3, #48	@ 0x30
 800ed20:	d0f9      	beq.n	800ed16 <_strtod_l+0x126>
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d09d      	beq.n	800ec62 <_strtod_l+0x72>
 800ed26:	2301      	movs	r3, #1
 800ed28:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed2c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ed2e:	2300      	movs	r3, #0
 800ed30:	9308      	str	r3, [sp, #32]
 800ed32:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed34:	461f      	mov	r7, r3
 800ed36:	220a      	movs	r2, #10
 800ed38:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ed3a:	7805      	ldrb	r5, [r0, #0]
 800ed3c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ed40:	b2d9      	uxtb	r1, r3
 800ed42:	2909      	cmp	r1, #9
 800ed44:	d928      	bls.n	800ed98 <_strtod_l+0x1a8>
 800ed46:	494e      	ldr	r1, [pc, #312]	@ (800ee80 <_strtod_l+0x290>)
 800ed48:	2201      	movs	r2, #1
 800ed4a:	f001 f98b 	bl	8010064 <strncmp>
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	d032      	beq.n	800edb8 <_strtod_l+0x1c8>
 800ed52:	2000      	movs	r0, #0
 800ed54:	462a      	mov	r2, r5
 800ed56:	4681      	mov	r9, r0
 800ed58:	463d      	mov	r5, r7
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	2a65      	cmp	r2, #101	@ 0x65
 800ed5e:	d001      	beq.n	800ed64 <_strtod_l+0x174>
 800ed60:	2a45      	cmp	r2, #69	@ 0x45
 800ed62:	d114      	bne.n	800ed8e <_strtod_l+0x19e>
 800ed64:	b91d      	cbnz	r5, 800ed6e <_strtod_l+0x17e>
 800ed66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed68:	4302      	orrs	r2, r0
 800ed6a:	d095      	beq.n	800ec98 <_strtod_l+0xa8>
 800ed6c:	2500      	movs	r5, #0
 800ed6e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ed70:	1c62      	adds	r2, r4, #1
 800ed72:	9219      	str	r2, [sp, #100]	@ 0x64
 800ed74:	7862      	ldrb	r2, [r4, #1]
 800ed76:	2a2b      	cmp	r2, #43	@ 0x2b
 800ed78:	d077      	beq.n	800ee6a <_strtod_l+0x27a>
 800ed7a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ed7c:	d07b      	beq.n	800ee76 <_strtod_l+0x286>
 800ed7e:	f04f 0c00 	mov.w	ip, #0
 800ed82:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ed86:	2909      	cmp	r1, #9
 800ed88:	f240 8082 	bls.w	800ee90 <_strtod_l+0x2a0>
 800ed8c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ed8e:	f04f 0800 	mov.w	r8, #0
 800ed92:	e0a2      	b.n	800eeda <_strtod_l+0x2ea>
 800ed94:	2300      	movs	r3, #0
 800ed96:	e7c7      	b.n	800ed28 <_strtod_l+0x138>
 800ed98:	2f08      	cmp	r7, #8
 800ed9a:	bfd5      	itete	le
 800ed9c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ed9e:	9908      	ldrgt	r1, [sp, #32]
 800eda0:	fb02 3301 	mlale	r3, r2, r1, r3
 800eda4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800eda8:	f100 0001 	add.w	r0, r0, #1
 800edac:	bfd4      	ite	le
 800edae:	930a      	strle	r3, [sp, #40]	@ 0x28
 800edb0:	9308      	strgt	r3, [sp, #32]
 800edb2:	3701      	adds	r7, #1
 800edb4:	9019      	str	r0, [sp, #100]	@ 0x64
 800edb6:	e7bf      	b.n	800ed38 <_strtod_l+0x148>
 800edb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800edba:	1c5a      	adds	r2, r3, #1
 800edbc:	9219      	str	r2, [sp, #100]	@ 0x64
 800edbe:	785a      	ldrb	r2, [r3, #1]
 800edc0:	b37f      	cbz	r7, 800ee22 <_strtod_l+0x232>
 800edc2:	4681      	mov	r9, r0
 800edc4:	463d      	mov	r5, r7
 800edc6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800edca:	2b09      	cmp	r3, #9
 800edcc:	d912      	bls.n	800edf4 <_strtod_l+0x204>
 800edce:	2301      	movs	r3, #1
 800edd0:	e7c4      	b.n	800ed5c <_strtod_l+0x16c>
 800edd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800edd4:	1c5a      	adds	r2, r3, #1
 800edd6:	9219      	str	r2, [sp, #100]	@ 0x64
 800edd8:	785a      	ldrb	r2, [r3, #1]
 800edda:	3001      	adds	r0, #1
 800eddc:	2a30      	cmp	r2, #48	@ 0x30
 800edde:	d0f8      	beq.n	800edd2 <_strtod_l+0x1e2>
 800ede0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ede4:	2b08      	cmp	r3, #8
 800ede6:	f200 84d3 	bhi.w	800f790 <_strtod_l+0xba0>
 800edea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800edec:	930c      	str	r3, [sp, #48]	@ 0x30
 800edee:	4681      	mov	r9, r0
 800edf0:	2000      	movs	r0, #0
 800edf2:	4605      	mov	r5, r0
 800edf4:	3a30      	subs	r2, #48	@ 0x30
 800edf6:	f100 0301 	add.w	r3, r0, #1
 800edfa:	d02a      	beq.n	800ee52 <_strtod_l+0x262>
 800edfc:	4499      	add	r9, r3
 800edfe:	eb00 0c05 	add.w	ip, r0, r5
 800ee02:	462b      	mov	r3, r5
 800ee04:	210a      	movs	r1, #10
 800ee06:	4563      	cmp	r3, ip
 800ee08:	d10d      	bne.n	800ee26 <_strtod_l+0x236>
 800ee0a:	1c69      	adds	r1, r5, #1
 800ee0c:	4401      	add	r1, r0
 800ee0e:	4428      	add	r0, r5
 800ee10:	2808      	cmp	r0, #8
 800ee12:	dc16      	bgt.n	800ee42 <_strtod_l+0x252>
 800ee14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ee16:	230a      	movs	r3, #10
 800ee18:	fb03 2300 	mla	r3, r3, r0, r2
 800ee1c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee1e:	2300      	movs	r3, #0
 800ee20:	e018      	b.n	800ee54 <_strtod_l+0x264>
 800ee22:	4638      	mov	r0, r7
 800ee24:	e7da      	b.n	800eddc <_strtod_l+0x1ec>
 800ee26:	2b08      	cmp	r3, #8
 800ee28:	f103 0301 	add.w	r3, r3, #1
 800ee2c:	dc03      	bgt.n	800ee36 <_strtod_l+0x246>
 800ee2e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ee30:	434e      	muls	r6, r1
 800ee32:	960a      	str	r6, [sp, #40]	@ 0x28
 800ee34:	e7e7      	b.n	800ee06 <_strtod_l+0x216>
 800ee36:	2b10      	cmp	r3, #16
 800ee38:	bfde      	ittt	le
 800ee3a:	9e08      	ldrle	r6, [sp, #32]
 800ee3c:	434e      	mulle	r6, r1
 800ee3e:	9608      	strle	r6, [sp, #32]
 800ee40:	e7e1      	b.n	800ee06 <_strtod_l+0x216>
 800ee42:	280f      	cmp	r0, #15
 800ee44:	dceb      	bgt.n	800ee1e <_strtod_l+0x22e>
 800ee46:	9808      	ldr	r0, [sp, #32]
 800ee48:	230a      	movs	r3, #10
 800ee4a:	fb03 2300 	mla	r3, r3, r0, r2
 800ee4e:	9308      	str	r3, [sp, #32]
 800ee50:	e7e5      	b.n	800ee1e <_strtod_l+0x22e>
 800ee52:	4629      	mov	r1, r5
 800ee54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ee56:	1c50      	adds	r0, r2, #1
 800ee58:	9019      	str	r0, [sp, #100]	@ 0x64
 800ee5a:	7852      	ldrb	r2, [r2, #1]
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	460d      	mov	r5, r1
 800ee60:	e7b1      	b.n	800edc6 <_strtod_l+0x1d6>
 800ee62:	f04f 0900 	mov.w	r9, #0
 800ee66:	2301      	movs	r3, #1
 800ee68:	e77d      	b.n	800ed66 <_strtod_l+0x176>
 800ee6a:	f04f 0c00 	mov.w	ip, #0
 800ee6e:	1ca2      	adds	r2, r4, #2
 800ee70:	9219      	str	r2, [sp, #100]	@ 0x64
 800ee72:	78a2      	ldrb	r2, [r4, #2]
 800ee74:	e785      	b.n	800ed82 <_strtod_l+0x192>
 800ee76:	f04f 0c01 	mov.w	ip, #1
 800ee7a:	e7f8      	b.n	800ee6e <_strtod_l+0x27e>
 800ee7c:	08011068 	.word	0x08011068
 800ee80:	08011050 	.word	0x08011050
 800ee84:	7ff00000 	.word	0x7ff00000
 800ee88:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ee8a:	1c51      	adds	r1, r2, #1
 800ee8c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ee8e:	7852      	ldrb	r2, [r2, #1]
 800ee90:	2a30      	cmp	r2, #48	@ 0x30
 800ee92:	d0f9      	beq.n	800ee88 <_strtod_l+0x298>
 800ee94:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ee98:	2908      	cmp	r1, #8
 800ee9a:	f63f af78 	bhi.w	800ed8e <_strtod_l+0x19e>
 800ee9e:	3a30      	subs	r2, #48	@ 0x30
 800eea0:	920e      	str	r2, [sp, #56]	@ 0x38
 800eea2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eea4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800eea6:	f04f 080a 	mov.w	r8, #10
 800eeaa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eeac:	1c56      	adds	r6, r2, #1
 800eeae:	9619      	str	r6, [sp, #100]	@ 0x64
 800eeb0:	7852      	ldrb	r2, [r2, #1]
 800eeb2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800eeb6:	f1be 0f09 	cmp.w	lr, #9
 800eeba:	d939      	bls.n	800ef30 <_strtod_l+0x340>
 800eebc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800eebe:	1a76      	subs	r6, r6, r1
 800eec0:	2e08      	cmp	r6, #8
 800eec2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800eec6:	dc03      	bgt.n	800eed0 <_strtod_l+0x2e0>
 800eec8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800eeca:	4588      	cmp	r8, r1
 800eecc:	bfa8      	it	ge
 800eece:	4688      	movge	r8, r1
 800eed0:	f1bc 0f00 	cmp.w	ip, #0
 800eed4:	d001      	beq.n	800eeda <_strtod_l+0x2ea>
 800eed6:	f1c8 0800 	rsb	r8, r8, #0
 800eeda:	2d00      	cmp	r5, #0
 800eedc:	d14e      	bne.n	800ef7c <_strtod_l+0x38c>
 800eede:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eee0:	4308      	orrs	r0, r1
 800eee2:	f47f aebe 	bne.w	800ec62 <_strtod_l+0x72>
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	f47f aed6 	bne.w	800ec98 <_strtod_l+0xa8>
 800eeec:	2a69      	cmp	r2, #105	@ 0x69
 800eeee:	d028      	beq.n	800ef42 <_strtod_l+0x352>
 800eef0:	dc25      	bgt.n	800ef3e <_strtod_l+0x34e>
 800eef2:	2a49      	cmp	r2, #73	@ 0x49
 800eef4:	d025      	beq.n	800ef42 <_strtod_l+0x352>
 800eef6:	2a4e      	cmp	r2, #78	@ 0x4e
 800eef8:	f47f aece 	bne.w	800ec98 <_strtod_l+0xa8>
 800eefc:	499b      	ldr	r1, [pc, #620]	@ (800f16c <_strtod_l+0x57c>)
 800eefe:	a819      	add	r0, sp, #100	@ 0x64
 800ef00:	f001 fba2 	bl	8010648 <__match>
 800ef04:	2800      	cmp	r0, #0
 800ef06:	f43f aec7 	beq.w	800ec98 <_strtod_l+0xa8>
 800ef0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	2b28      	cmp	r3, #40	@ 0x28
 800ef10:	d12e      	bne.n	800ef70 <_strtod_l+0x380>
 800ef12:	4997      	ldr	r1, [pc, #604]	@ (800f170 <_strtod_l+0x580>)
 800ef14:	aa1c      	add	r2, sp, #112	@ 0x70
 800ef16:	a819      	add	r0, sp, #100	@ 0x64
 800ef18:	f001 fbaa 	bl	8010670 <__hexnan>
 800ef1c:	2805      	cmp	r0, #5
 800ef1e:	d127      	bne.n	800ef70 <_strtod_l+0x380>
 800ef20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ef22:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ef26:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ef2a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ef2e:	e698      	b.n	800ec62 <_strtod_l+0x72>
 800ef30:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ef32:	fb08 2101 	mla	r1, r8, r1, r2
 800ef36:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ef3a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ef3c:	e7b5      	b.n	800eeaa <_strtod_l+0x2ba>
 800ef3e:	2a6e      	cmp	r2, #110	@ 0x6e
 800ef40:	e7da      	b.n	800eef8 <_strtod_l+0x308>
 800ef42:	498c      	ldr	r1, [pc, #560]	@ (800f174 <_strtod_l+0x584>)
 800ef44:	a819      	add	r0, sp, #100	@ 0x64
 800ef46:	f001 fb7f 	bl	8010648 <__match>
 800ef4a:	2800      	cmp	r0, #0
 800ef4c:	f43f aea4 	beq.w	800ec98 <_strtod_l+0xa8>
 800ef50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ef52:	4989      	ldr	r1, [pc, #548]	@ (800f178 <_strtod_l+0x588>)
 800ef54:	3b01      	subs	r3, #1
 800ef56:	a819      	add	r0, sp, #100	@ 0x64
 800ef58:	9319      	str	r3, [sp, #100]	@ 0x64
 800ef5a:	f001 fb75 	bl	8010648 <__match>
 800ef5e:	b910      	cbnz	r0, 800ef66 <_strtod_l+0x376>
 800ef60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ef62:	3301      	adds	r3, #1
 800ef64:	9319      	str	r3, [sp, #100]	@ 0x64
 800ef66:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800f188 <_strtod_l+0x598>
 800ef6a:	f04f 0a00 	mov.w	sl, #0
 800ef6e:	e678      	b.n	800ec62 <_strtod_l+0x72>
 800ef70:	4882      	ldr	r0, [pc, #520]	@ (800f17c <_strtod_l+0x58c>)
 800ef72:	f001 f8bd 	bl	80100f0 <nan>
 800ef76:	ec5b ab10 	vmov	sl, fp, d0
 800ef7a:	e672      	b.n	800ec62 <_strtod_l+0x72>
 800ef7c:	eba8 0309 	sub.w	r3, r8, r9
 800ef80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ef82:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef84:	2f00      	cmp	r7, #0
 800ef86:	bf08      	it	eq
 800ef88:	462f      	moveq	r7, r5
 800ef8a:	2d10      	cmp	r5, #16
 800ef8c:	462c      	mov	r4, r5
 800ef8e:	bfa8      	it	ge
 800ef90:	2410      	movge	r4, #16
 800ef92:	f7f1 fab7 	bl	8000504 <__aeabi_ui2d>
 800ef96:	2d09      	cmp	r5, #9
 800ef98:	4682      	mov	sl, r0
 800ef9a:	468b      	mov	fp, r1
 800ef9c:	dc13      	bgt.n	800efc6 <_strtod_l+0x3d6>
 800ef9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	f43f ae5e 	beq.w	800ec62 <_strtod_l+0x72>
 800efa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efa8:	dd78      	ble.n	800f09c <_strtod_l+0x4ac>
 800efaa:	2b16      	cmp	r3, #22
 800efac:	dc5f      	bgt.n	800f06e <_strtod_l+0x47e>
 800efae:	4974      	ldr	r1, [pc, #464]	@ (800f180 <_strtod_l+0x590>)
 800efb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800efb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efb8:	4652      	mov	r2, sl
 800efba:	465b      	mov	r3, fp
 800efbc:	f7f1 fb1c 	bl	80005f8 <__aeabi_dmul>
 800efc0:	4682      	mov	sl, r0
 800efc2:	468b      	mov	fp, r1
 800efc4:	e64d      	b.n	800ec62 <_strtod_l+0x72>
 800efc6:	4b6e      	ldr	r3, [pc, #440]	@ (800f180 <_strtod_l+0x590>)
 800efc8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800efcc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800efd0:	f7f1 fb12 	bl	80005f8 <__aeabi_dmul>
 800efd4:	4682      	mov	sl, r0
 800efd6:	9808      	ldr	r0, [sp, #32]
 800efd8:	468b      	mov	fp, r1
 800efda:	f7f1 fa93 	bl	8000504 <__aeabi_ui2d>
 800efde:	4602      	mov	r2, r0
 800efe0:	460b      	mov	r3, r1
 800efe2:	4650      	mov	r0, sl
 800efe4:	4659      	mov	r1, fp
 800efe6:	f7f1 f951 	bl	800028c <__adddf3>
 800efea:	2d0f      	cmp	r5, #15
 800efec:	4682      	mov	sl, r0
 800efee:	468b      	mov	fp, r1
 800eff0:	ddd5      	ble.n	800ef9e <_strtod_l+0x3ae>
 800eff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eff4:	1b2c      	subs	r4, r5, r4
 800eff6:	441c      	add	r4, r3
 800eff8:	2c00      	cmp	r4, #0
 800effa:	f340 8096 	ble.w	800f12a <_strtod_l+0x53a>
 800effe:	f014 030f 	ands.w	r3, r4, #15
 800f002:	d00a      	beq.n	800f01a <_strtod_l+0x42a>
 800f004:	495e      	ldr	r1, [pc, #376]	@ (800f180 <_strtod_l+0x590>)
 800f006:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f00a:	4652      	mov	r2, sl
 800f00c:	465b      	mov	r3, fp
 800f00e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f012:	f7f1 faf1 	bl	80005f8 <__aeabi_dmul>
 800f016:	4682      	mov	sl, r0
 800f018:	468b      	mov	fp, r1
 800f01a:	f034 040f 	bics.w	r4, r4, #15
 800f01e:	d073      	beq.n	800f108 <_strtod_l+0x518>
 800f020:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f024:	dd48      	ble.n	800f0b8 <_strtod_l+0x4c8>
 800f026:	2400      	movs	r4, #0
 800f028:	46a0      	mov	r8, r4
 800f02a:	940a      	str	r4, [sp, #40]	@ 0x28
 800f02c:	46a1      	mov	r9, r4
 800f02e:	9a05      	ldr	r2, [sp, #20]
 800f030:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800f188 <_strtod_l+0x598>
 800f034:	2322      	movs	r3, #34	@ 0x22
 800f036:	6013      	str	r3, [r2, #0]
 800f038:	f04f 0a00 	mov.w	sl, #0
 800f03c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f03e:	2b00      	cmp	r3, #0
 800f040:	f43f ae0f 	beq.w	800ec62 <_strtod_l+0x72>
 800f044:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f046:	9805      	ldr	r0, [sp, #20]
 800f048:	f7ff f942 	bl	800e2d0 <_Bfree>
 800f04c:	9805      	ldr	r0, [sp, #20]
 800f04e:	4649      	mov	r1, r9
 800f050:	f7ff f93e 	bl	800e2d0 <_Bfree>
 800f054:	9805      	ldr	r0, [sp, #20]
 800f056:	4641      	mov	r1, r8
 800f058:	f7ff f93a 	bl	800e2d0 <_Bfree>
 800f05c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f05e:	9805      	ldr	r0, [sp, #20]
 800f060:	f7ff f936 	bl	800e2d0 <_Bfree>
 800f064:	9805      	ldr	r0, [sp, #20]
 800f066:	4621      	mov	r1, r4
 800f068:	f7ff f932 	bl	800e2d0 <_Bfree>
 800f06c:	e5f9      	b.n	800ec62 <_strtod_l+0x72>
 800f06e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f070:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f074:	4293      	cmp	r3, r2
 800f076:	dbbc      	blt.n	800eff2 <_strtod_l+0x402>
 800f078:	4c41      	ldr	r4, [pc, #260]	@ (800f180 <_strtod_l+0x590>)
 800f07a:	f1c5 050f 	rsb	r5, r5, #15
 800f07e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f082:	4652      	mov	r2, sl
 800f084:	465b      	mov	r3, fp
 800f086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f08a:	f7f1 fab5 	bl	80005f8 <__aeabi_dmul>
 800f08e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f090:	1b5d      	subs	r5, r3, r5
 800f092:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f096:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f09a:	e78f      	b.n	800efbc <_strtod_l+0x3cc>
 800f09c:	3316      	adds	r3, #22
 800f09e:	dba8      	blt.n	800eff2 <_strtod_l+0x402>
 800f0a0:	4b37      	ldr	r3, [pc, #220]	@ (800f180 <_strtod_l+0x590>)
 800f0a2:	eba9 0808 	sub.w	r8, r9, r8
 800f0a6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f0aa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f0ae:	4650      	mov	r0, sl
 800f0b0:	4659      	mov	r1, fp
 800f0b2:	f7f1 fbcb 	bl	800084c <__aeabi_ddiv>
 800f0b6:	e783      	b.n	800efc0 <_strtod_l+0x3d0>
 800f0b8:	4b32      	ldr	r3, [pc, #200]	@ (800f184 <_strtod_l+0x594>)
 800f0ba:	9308      	str	r3, [sp, #32]
 800f0bc:	2300      	movs	r3, #0
 800f0be:	1124      	asrs	r4, r4, #4
 800f0c0:	4650      	mov	r0, sl
 800f0c2:	4659      	mov	r1, fp
 800f0c4:	461e      	mov	r6, r3
 800f0c6:	2c01      	cmp	r4, #1
 800f0c8:	dc21      	bgt.n	800f10e <_strtod_l+0x51e>
 800f0ca:	b10b      	cbz	r3, 800f0d0 <_strtod_l+0x4e0>
 800f0cc:	4682      	mov	sl, r0
 800f0ce:	468b      	mov	fp, r1
 800f0d0:	492c      	ldr	r1, [pc, #176]	@ (800f184 <_strtod_l+0x594>)
 800f0d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f0d6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f0da:	4652      	mov	r2, sl
 800f0dc:	465b      	mov	r3, fp
 800f0de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0e2:	f7f1 fa89 	bl	80005f8 <__aeabi_dmul>
 800f0e6:	4b28      	ldr	r3, [pc, #160]	@ (800f188 <_strtod_l+0x598>)
 800f0e8:	460a      	mov	r2, r1
 800f0ea:	400b      	ands	r3, r1
 800f0ec:	4927      	ldr	r1, [pc, #156]	@ (800f18c <_strtod_l+0x59c>)
 800f0ee:	428b      	cmp	r3, r1
 800f0f0:	4682      	mov	sl, r0
 800f0f2:	d898      	bhi.n	800f026 <_strtod_l+0x436>
 800f0f4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f0f8:	428b      	cmp	r3, r1
 800f0fa:	bf86      	itte	hi
 800f0fc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800f190 <_strtod_l+0x5a0>
 800f100:	f04f 3aff 	movhi.w	sl, #4294967295
 800f104:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f108:	2300      	movs	r3, #0
 800f10a:	9308      	str	r3, [sp, #32]
 800f10c:	e07a      	b.n	800f204 <_strtod_l+0x614>
 800f10e:	07e2      	lsls	r2, r4, #31
 800f110:	d505      	bpl.n	800f11e <_strtod_l+0x52e>
 800f112:	9b08      	ldr	r3, [sp, #32]
 800f114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f118:	f7f1 fa6e 	bl	80005f8 <__aeabi_dmul>
 800f11c:	2301      	movs	r3, #1
 800f11e:	9a08      	ldr	r2, [sp, #32]
 800f120:	3208      	adds	r2, #8
 800f122:	3601      	adds	r6, #1
 800f124:	1064      	asrs	r4, r4, #1
 800f126:	9208      	str	r2, [sp, #32]
 800f128:	e7cd      	b.n	800f0c6 <_strtod_l+0x4d6>
 800f12a:	d0ed      	beq.n	800f108 <_strtod_l+0x518>
 800f12c:	4264      	negs	r4, r4
 800f12e:	f014 020f 	ands.w	r2, r4, #15
 800f132:	d00a      	beq.n	800f14a <_strtod_l+0x55a>
 800f134:	4b12      	ldr	r3, [pc, #72]	@ (800f180 <_strtod_l+0x590>)
 800f136:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f13a:	4650      	mov	r0, sl
 800f13c:	4659      	mov	r1, fp
 800f13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f142:	f7f1 fb83 	bl	800084c <__aeabi_ddiv>
 800f146:	4682      	mov	sl, r0
 800f148:	468b      	mov	fp, r1
 800f14a:	1124      	asrs	r4, r4, #4
 800f14c:	d0dc      	beq.n	800f108 <_strtod_l+0x518>
 800f14e:	2c1f      	cmp	r4, #31
 800f150:	dd20      	ble.n	800f194 <_strtod_l+0x5a4>
 800f152:	2400      	movs	r4, #0
 800f154:	46a0      	mov	r8, r4
 800f156:	940a      	str	r4, [sp, #40]	@ 0x28
 800f158:	46a1      	mov	r9, r4
 800f15a:	9a05      	ldr	r2, [sp, #20]
 800f15c:	2322      	movs	r3, #34	@ 0x22
 800f15e:	f04f 0a00 	mov.w	sl, #0
 800f162:	f04f 0b00 	mov.w	fp, #0
 800f166:	6013      	str	r3, [r2, #0]
 800f168:	e768      	b.n	800f03c <_strtod_l+0x44c>
 800f16a:	bf00      	nop
 800f16c:	08010e01 	.word	0x08010e01
 800f170:	08011054 	.word	0x08011054
 800f174:	08010df9 	.word	0x08010df9
 800f178:	08010e6c 	.word	0x08010e6c
 800f17c:	08010e68 	.word	0x08010e68
 800f180:	08010f88 	.word	0x08010f88
 800f184:	08010f60 	.word	0x08010f60
 800f188:	7ff00000 	.word	0x7ff00000
 800f18c:	7ca00000 	.word	0x7ca00000
 800f190:	7fefffff 	.word	0x7fefffff
 800f194:	f014 0310 	ands.w	r3, r4, #16
 800f198:	bf18      	it	ne
 800f19a:	236a      	movne	r3, #106	@ 0x6a
 800f19c:	4ea9      	ldr	r6, [pc, #676]	@ (800f444 <_strtod_l+0x854>)
 800f19e:	9308      	str	r3, [sp, #32]
 800f1a0:	4650      	mov	r0, sl
 800f1a2:	4659      	mov	r1, fp
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	07e2      	lsls	r2, r4, #31
 800f1a8:	d504      	bpl.n	800f1b4 <_strtod_l+0x5c4>
 800f1aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f1ae:	f7f1 fa23 	bl	80005f8 <__aeabi_dmul>
 800f1b2:	2301      	movs	r3, #1
 800f1b4:	1064      	asrs	r4, r4, #1
 800f1b6:	f106 0608 	add.w	r6, r6, #8
 800f1ba:	d1f4      	bne.n	800f1a6 <_strtod_l+0x5b6>
 800f1bc:	b10b      	cbz	r3, 800f1c2 <_strtod_l+0x5d2>
 800f1be:	4682      	mov	sl, r0
 800f1c0:	468b      	mov	fp, r1
 800f1c2:	9b08      	ldr	r3, [sp, #32]
 800f1c4:	b1b3      	cbz	r3, 800f1f4 <_strtod_l+0x604>
 800f1c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f1ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	4659      	mov	r1, fp
 800f1d2:	dd0f      	ble.n	800f1f4 <_strtod_l+0x604>
 800f1d4:	2b1f      	cmp	r3, #31
 800f1d6:	dd55      	ble.n	800f284 <_strtod_l+0x694>
 800f1d8:	2b34      	cmp	r3, #52	@ 0x34
 800f1da:	bfde      	ittt	le
 800f1dc:	f04f 33ff 	movle.w	r3, #4294967295
 800f1e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f1e4:	4093      	lslle	r3, r2
 800f1e6:	f04f 0a00 	mov.w	sl, #0
 800f1ea:	bfcc      	ite	gt
 800f1ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f1f0:	ea03 0b01 	andle.w	fp, r3, r1
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	4650      	mov	r0, sl
 800f1fa:	4659      	mov	r1, fp
 800f1fc:	f7f1 fc64 	bl	8000ac8 <__aeabi_dcmpeq>
 800f200:	2800      	cmp	r0, #0
 800f202:	d1a6      	bne.n	800f152 <_strtod_l+0x562>
 800f204:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f206:	9300      	str	r3, [sp, #0]
 800f208:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f20a:	9805      	ldr	r0, [sp, #20]
 800f20c:	462b      	mov	r3, r5
 800f20e:	463a      	mov	r2, r7
 800f210:	f7ff f8c6 	bl	800e3a0 <__s2b>
 800f214:	900a      	str	r0, [sp, #40]	@ 0x28
 800f216:	2800      	cmp	r0, #0
 800f218:	f43f af05 	beq.w	800f026 <_strtod_l+0x436>
 800f21c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f21e:	2a00      	cmp	r2, #0
 800f220:	eba9 0308 	sub.w	r3, r9, r8
 800f224:	bfa8      	it	ge
 800f226:	2300      	movge	r3, #0
 800f228:	9312      	str	r3, [sp, #72]	@ 0x48
 800f22a:	2400      	movs	r4, #0
 800f22c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f230:	9316      	str	r3, [sp, #88]	@ 0x58
 800f232:	46a0      	mov	r8, r4
 800f234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f236:	9805      	ldr	r0, [sp, #20]
 800f238:	6859      	ldr	r1, [r3, #4]
 800f23a:	f7ff f809 	bl	800e250 <_Balloc>
 800f23e:	4681      	mov	r9, r0
 800f240:	2800      	cmp	r0, #0
 800f242:	f43f aef4 	beq.w	800f02e <_strtod_l+0x43e>
 800f246:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f248:	691a      	ldr	r2, [r3, #16]
 800f24a:	3202      	adds	r2, #2
 800f24c:	f103 010c 	add.w	r1, r3, #12
 800f250:	0092      	lsls	r2, r2, #2
 800f252:	300c      	adds	r0, #12
 800f254:	f7fe f87d 	bl	800d352 <memcpy>
 800f258:	ec4b ab10 	vmov	d0, sl, fp
 800f25c:	9805      	ldr	r0, [sp, #20]
 800f25e:	aa1c      	add	r2, sp, #112	@ 0x70
 800f260:	a91b      	add	r1, sp, #108	@ 0x6c
 800f262:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f266:	f7ff fbd7 	bl	800ea18 <__d2b>
 800f26a:	901a      	str	r0, [sp, #104]	@ 0x68
 800f26c:	2800      	cmp	r0, #0
 800f26e:	f43f aede 	beq.w	800f02e <_strtod_l+0x43e>
 800f272:	9805      	ldr	r0, [sp, #20]
 800f274:	2101      	movs	r1, #1
 800f276:	f7ff f929 	bl	800e4cc <__i2b>
 800f27a:	4680      	mov	r8, r0
 800f27c:	b948      	cbnz	r0, 800f292 <_strtod_l+0x6a2>
 800f27e:	f04f 0800 	mov.w	r8, #0
 800f282:	e6d4      	b.n	800f02e <_strtod_l+0x43e>
 800f284:	f04f 32ff 	mov.w	r2, #4294967295
 800f288:	fa02 f303 	lsl.w	r3, r2, r3
 800f28c:	ea03 0a0a 	and.w	sl, r3, sl
 800f290:	e7b0      	b.n	800f1f4 <_strtod_l+0x604>
 800f292:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f294:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f296:	2d00      	cmp	r5, #0
 800f298:	bfab      	itete	ge
 800f29a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f29c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f29e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f2a0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f2a2:	bfac      	ite	ge
 800f2a4:	18ef      	addge	r7, r5, r3
 800f2a6:	1b5e      	sublt	r6, r3, r5
 800f2a8:	9b08      	ldr	r3, [sp, #32]
 800f2aa:	1aed      	subs	r5, r5, r3
 800f2ac:	4415      	add	r5, r2
 800f2ae:	4b66      	ldr	r3, [pc, #408]	@ (800f448 <_strtod_l+0x858>)
 800f2b0:	3d01      	subs	r5, #1
 800f2b2:	429d      	cmp	r5, r3
 800f2b4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f2b8:	da50      	bge.n	800f35c <_strtod_l+0x76c>
 800f2ba:	1b5b      	subs	r3, r3, r5
 800f2bc:	2b1f      	cmp	r3, #31
 800f2be:	eba2 0203 	sub.w	r2, r2, r3
 800f2c2:	f04f 0101 	mov.w	r1, #1
 800f2c6:	dc3d      	bgt.n	800f344 <_strtod_l+0x754>
 800f2c8:	fa01 f303 	lsl.w	r3, r1, r3
 800f2cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	9310      	str	r3, [sp, #64]	@ 0x40
 800f2d2:	18bd      	adds	r5, r7, r2
 800f2d4:	9b08      	ldr	r3, [sp, #32]
 800f2d6:	42af      	cmp	r7, r5
 800f2d8:	4416      	add	r6, r2
 800f2da:	441e      	add	r6, r3
 800f2dc:	463b      	mov	r3, r7
 800f2de:	bfa8      	it	ge
 800f2e0:	462b      	movge	r3, r5
 800f2e2:	42b3      	cmp	r3, r6
 800f2e4:	bfa8      	it	ge
 800f2e6:	4633      	movge	r3, r6
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	bfc2      	ittt	gt
 800f2ec:	1aed      	subgt	r5, r5, r3
 800f2ee:	1af6      	subgt	r6, r6, r3
 800f2f0:	1aff      	subgt	r7, r7, r3
 800f2f2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	dd16      	ble.n	800f326 <_strtod_l+0x736>
 800f2f8:	4641      	mov	r1, r8
 800f2fa:	9805      	ldr	r0, [sp, #20]
 800f2fc:	461a      	mov	r2, r3
 800f2fe:	f7ff f9a5 	bl	800e64c <__pow5mult>
 800f302:	4680      	mov	r8, r0
 800f304:	2800      	cmp	r0, #0
 800f306:	d0ba      	beq.n	800f27e <_strtod_l+0x68e>
 800f308:	4601      	mov	r1, r0
 800f30a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f30c:	9805      	ldr	r0, [sp, #20]
 800f30e:	f7ff f8f3 	bl	800e4f8 <__multiply>
 800f312:	900e      	str	r0, [sp, #56]	@ 0x38
 800f314:	2800      	cmp	r0, #0
 800f316:	f43f ae8a 	beq.w	800f02e <_strtod_l+0x43e>
 800f31a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f31c:	9805      	ldr	r0, [sp, #20]
 800f31e:	f7fe ffd7 	bl	800e2d0 <_Bfree>
 800f322:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f324:	931a      	str	r3, [sp, #104]	@ 0x68
 800f326:	2d00      	cmp	r5, #0
 800f328:	dc1d      	bgt.n	800f366 <_strtod_l+0x776>
 800f32a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	dd23      	ble.n	800f378 <_strtod_l+0x788>
 800f330:	4649      	mov	r1, r9
 800f332:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f334:	9805      	ldr	r0, [sp, #20]
 800f336:	f7ff f989 	bl	800e64c <__pow5mult>
 800f33a:	4681      	mov	r9, r0
 800f33c:	b9e0      	cbnz	r0, 800f378 <_strtod_l+0x788>
 800f33e:	f04f 0900 	mov.w	r9, #0
 800f342:	e674      	b.n	800f02e <_strtod_l+0x43e>
 800f344:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f348:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f34c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f350:	35e2      	adds	r5, #226	@ 0xe2
 800f352:	fa01 f305 	lsl.w	r3, r1, r5
 800f356:	9310      	str	r3, [sp, #64]	@ 0x40
 800f358:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f35a:	e7ba      	b.n	800f2d2 <_strtod_l+0x6e2>
 800f35c:	2300      	movs	r3, #0
 800f35e:	9310      	str	r3, [sp, #64]	@ 0x40
 800f360:	2301      	movs	r3, #1
 800f362:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f364:	e7b5      	b.n	800f2d2 <_strtod_l+0x6e2>
 800f366:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f368:	9805      	ldr	r0, [sp, #20]
 800f36a:	462a      	mov	r2, r5
 800f36c:	f7ff f9c8 	bl	800e700 <__lshift>
 800f370:	901a      	str	r0, [sp, #104]	@ 0x68
 800f372:	2800      	cmp	r0, #0
 800f374:	d1d9      	bne.n	800f32a <_strtod_l+0x73a>
 800f376:	e65a      	b.n	800f02e <_strtod_l+0x43e>
 800f378:	2e00      	cmp	r6, #0
 800f37a:	dd07      	ble.n	800f38c <_strtod_l+0x79c>
 800f37c:	4649      	mov	r1, r9
 800f37e:	9805      	ldr	r0, [sp, #20]
 800f380:	4632      	mov	r2, r6
 800f382:	f7ff f9bd 	bl	800e700 <__lshift>
 800f386:	4681      	mov	r9, r0
 800f388:	2800      	cmp	r0, #0
 800f38a:	d0d8      	beq.n	800f33e <_strtod_l+0x74e>
 800f38c:	2f00      	cmp	r7, #0
 800f38e:	dd08      	ble.n	800f3a2 <_strtod_l+0x7b2>
 800f390:	4641      	mov	r1, r8
 800f392:	9805      	ldr	r0, [sp, #20]
 800f394:	463a      	mov	r2, r7
 800f396:	f7ff f9b3 	bl	800e700 <__lshift>
 800f39a:	4680      	mov	r8, r0
 800f39c:	2800      	cmp	r0, #0
 800f39e:	f43f ae46 	beq.w	800f02e <_strtod_l+0x43e>
 800f3a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f3a4:	9805      	ldr	r0, [sp, #20]
 800f3a6:	464a      	mov	r2, r9
 800f3a8:	f7ff fa32 	bl	800e810 <__mdiff>
 800f3ac:	4604      	mov	r4, r0
 800f3ae:	2800      	cmp	r0, #0
 800f3b0:	f43f ae3d 	beq.w	800f02e <_strtod_l+0x43e>
 800f3b4:	68c3      	ldr	r3, [r0, #12]
 800f3b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	60c3      	str	r3, [r0, #12]
 800f3bc:	4641      	mov	r1, r8
 800f3be:	f7ff fa0b 	bl	800e7d8 <__mcmp>
 800f3c2:	2800      	cmp	r0, #0
 800f3c4:	da46      	bge.n	800f454 <_strtod_l+0x864>
 800f3c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3c8:	ea53 030a 	orrs.w	r3, r3, sl
 800f3cc:	d16c      	bne.n	800f4a8 <_strtod_l+0x8b8>
 800f3ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d168      	bne.n	800f4a8 <_strtod_l+0x8b8>
 800f3d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f3da:	0d1b      	lsrs	r3, r3, #20
 800f3dc:	051b      	lsls	r3, r3, #20
 800f3de:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f3e2:	d961      	bls.n	800f4a8 <_strtod_l+0x8b8>
 800f3e4:	6963      	ldr	r3, [r4, #20]
 800f3e6:	b913      	cbnz	r3, 800f3ee <_strtod_l+0x7fe>
 800f3e8:	6923      	ldr	r3, [r4, #16]
 800f3ea:	2b01      	cmp	r3, #1
 800f3ec:	dd5c      	ble.n	800f4a8 <_strtod_l+0x8b8>
 800f3ee:	4621      	mov	r1, r4
 800f3f0:	2201      	movs	r2, #1
 800f3f2:	9805      	ldr	r0, [sp, #20]
 800f3f4:	f7ff f984 	bl	800e700 <__lshift>
 800f3f8:	4641      	mov	r1, r8
 800f3fa:	4604      	mov	r4, r0
 800f3fc:	f7ff f9ec 	bl	800e7d8 <__mcmp>
 800f400:	2800      	cmp	r0, #0
 800f402:	dd51      	ble.n	800f4a8 <_strtod_l+0x8b8>
 800f404:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f408:	9a08      	ldr	r2, [sp, #32]
 800f40a:	0d1b      	lsrs	r3, r3, #20
 800f40c:	051b      	lsls	r3, r3, #20
 800f40e:	2a00      	cmp	r2, #0
 800f410:	d06b      	beq.n	800f4ea <_strtod_l+0x8fa>
 800f412:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f416:	d868      	bhi.n	800f4ea <_strtod_l+0x8fa>
 800f418:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f41c:	f67f ae9d 	bls.w	800f15a <_strtod_l+0x56a>
 800f420:	4b0a      	ldr	r3, [pc, #40]	@ (800f44c <_strtod_l+0x85c>)
 800f422:	4650      	mov	r0, sl
 800f424:	4659      	mov	r1, fp
 800f426:	2200      	movs	r2, #0
 800f428:	f7f1 f8e6 	bl	80005f8 <__aeabi_dmul>
 800f42c:	4b08      	ldr	r3, [pc, #32]	@ (800f450 <_strtod_l+0x860>)
 800f42e:	400b      	ands	r3, r1
 800f430:	4682      	mov	sl, r0
 800f432:	468b      	mov	fp, r1
 800f434:	2b00      	cmp	r3, #0
 800f436:	f47f ae05 	bne.w	800f044 <_strtod_l+0x454>
 800f43a:	9a05      	ldr	r2, [sp, #20]
 800f43c:	2322      	movs	r3, #34	@ 0x22
 800f43e:	6013      	str	r3, [r2, #0]
 800f440:	e600      	b.n	800f044 <_strtod_l+0x454>
 800f442:	bf00      	nop
 800f444:	08011080 	.word	0x08011080
 800f448:	fffffc02 	.word	0xfffffc02
 800f44c:	39500000 	.word	0x39500000
 800f450:	7ff00000 	.word	0x7ff00000
 800f454:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f458:	d165      	bne.n	800f526 <_strtod_l+0x936>
 800f45a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f45c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f460:	b35a      	cbz	r2, 800f4ba <_strtod_l+0x8ca>
 800f462:	4a9f      	ldr	r2, [pc, #636]	@ (800f6e0 <_strtod_l+0xaf0>)
 800f464:	4293      	cmp	r3, r2
 800f466:	d12b      	bne.n	800f4c0 <_strtod_l+0x8d0>
 800f468:	9b08      	ldr	r3, [sp, #32]
 800f46a:	4651      	mov	r1, sl
 800f46c:	b303      	cbz	r3, 800f4b0 <_strtod_l+0x8c0>
 800f46e:	4b9d      	ldr	r3, [pc, #628]	@ (800f6e4 <_strtod_l+0xaf4>)
 800f470:	465a      	mov	r2, fp
 800f472:	4013      	ands	r3, r2
 800f474:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f478:	f04f 32ff 	mov.w	r2, #4294967295
 800f47c:	d81b      	bhi.n	800f4b6 <_strtod_l+0x8c6>
 800f47e:	0d1b      	lsrs	r3, r3, #20
 800f480:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f484:	fa02 f303 	lsl.w	r3, r2, r3
 800f488:	4299      	cmp	r1, r3
 800f48a:	d119      	bne.n	800f4c0 <_strtod_l+0x8d0>
 800f48c:	4b96      	ldr	r3, [pc, #600]	@ (800f6e8 <_strtod_l+0xaf8>)
 800f48e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f490:	429a      	cmp	r2, r3
 800f492:	d102      	bne.n	800f49a <_strtod_l+0x8aa>
 800f494:	3101      	adds	r1, #1
 800f496:	f43f adca 	beq.w	800f02e <_strtod_l+0x43e>
 800f49a:	4b92      	ldr	r3, [pc, #584]	@ (800f6e4 <_strtod_l+0xaf4>)
 800f49c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f49e:	401a      	ands	r2, r3
 800f4a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f4a4:	f04f 0a00 	mov.w	sl, #0
 800f4a8:	9b08      	ldr	r3, [sp, #32]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d1b8      	bne.n	800f420 <_strtod_l+0x830>
 800f4ae:	e5c9      	b.n	800f044 <_strtod_l+0x454>
 800f4b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f4b4:	e7e8      	b.n	800f488 <_strtod_l+0x898>
 800f4b6:	4613      	mov	r3, r2
 800f4b8:	e7e6      	b.n	800f488 <_strtod_l+0x898>
 800f4ba:	ea53 030a 	orrs.w	r3, r3, sl
 800f4be:	d0a1      	beq.n	800f404 <_strtod_l+0x814>
 800f4c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f4c2:	b1db      	cbz	r3, 800f4fc <_strtod_l+0x90c>
 800f4c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f4c6:	4213      	tst	r3, r2
 800f4c8:	d0ee      	beq.n	800f4a8 <_strtod_l+0x8b8>
 800f4ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4cc:	9a08      	ldr	r2, [sp, #32]
 800f4ce:	4650      	mov	r0, sl
 800f4d0:	4659      	mov	r1, fp
 800f4d2:	b1bb      	cbz	r3, 800f504 <_strtod_l+0x914>
 800f4d4:	f7ff fb6e 	bl	800ebb4 <sulp>
 800f4d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f4dc:	ec53 2b10 	vmov	r2, r3, d0
 800f4e0:	f7f0 fed4 	bl	800028c <__adddf3>
 800f4e4:	4682      	mov	sl, r0
 800f4e6:	468b      	mov	fp, r1
 800f4e8:	e7de      	b.n	800f4a8 <_strtod_l+0x8b8>
 800f4ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f4ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f4f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f4f6:	f04f 3aff 	mov.w	sl, #4294967295
 800f4fa:	e7d5      	b.n	800f4a8 <_strtod_l+0x8b8>
 800f4fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f4fe:	ea13 0f0a 	tst.w	r3, sl
 800f502:	e7e1      	b.n	800f4c8 <_strtod_l+0x8d8>
 800f504:	f7ff fb56 	bl	800ebb4 <sulp>
 800f508:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f50c:	ec53 2b10 	vmov	r2, r3, d0
 800f510:	f7f0 feba 	bl	8000288 <__aeabi_dsub>
 800f514:	2200      	movs	r2, #0
 800f516:	2300      	movs	r3, #0
 800f518:	4682      	mov	sl, r0
 800f51a:	468b      	mov	fp, r1
 800f51c:	f7f1 fad4 	bl	8000ac8 <__aeabi_dcmpeq>
 800f520:	2800      	cmp	r0, #0
 800f522:	d0c1      	beq.n	800f4a8 <_strtod_l+0x8b8>
 800f524:	e619      	b.n	800f15a <_strtod_l+0x56a>
 800f526:	4641      	mov	r1, r8
 800f528:	4620      	mov	r0, r4
 800f52a:	f7ff facd 	bl	800eac8 <__ratio>
 800f52e:	ec57 6b10 	vmov	r6, r7, d0
 800f532:	2200      	movs	r2, #0
 800f534:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f538:	4630      	mov	r0, r6
 800f53a:	4639      	mov	r1, r7
 800f53c:	f7f1 fad8 	bl	8000af0 <__aeabi_dcmple>
 800f540:	2800      	cmp	r0, #0
 800f542:	d06f      	beq.n	800f624 <_strtod_l+0xa34>
 800f544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f546:	2b00      	cmp	r3, #0
 800f548:	d17a      	bne.n	800f640 <_strtod_l+0xa50>
 800f54a:	f1ba 0f00 	cmp.w	sl, #0
 800f54e:	d158      	bne.n	800f602 <_strtod_l+0xa12>
 800f550:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f552:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f556:	2b00      	cmp	r3, #0
 800f558:	d15a      	bne.n	800f610 <_strtod_l+0xa20>
 800f55a:	4b64      	ldr	r3, [pc, #400]	@ (800f6ec <_strtod_l+0xafc>)
 800f55c:	2200      	movs	r2, #0
 800f55e:	4630      	mov	r0, r6
 800f560:	4639      	mov	r1, r7
 800f562:	f7f1 fabb 	bl	8000adc <__aeabi_dcmplt>
 800f566:	2800      	cmp	r0, #0
 800f568:	d159      	bne.n	800f61e <_strtod_l+0xa2e>
 800f56a:	4630      	mov	r0, r6
 800f56c:	4639      	mov	r1, r7
 800f56e:	4b60      	ldr	r3, [pc, #384]	@ (800f6f0 <_strtod_l+0xb00>)
 800f570:	2200      	movs	r2, #0
 800f572:	f7f1 f841 	bl	80005f8 <__aeabi_dmul>
 800f576:	4606      	mov	r6, r0
 800f578:	460f      	mov	r7, r1
 800f57a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f57e:	9606      	str	r6, [sp, #24]
 800f580:	9307      	str	r3, [sp, #28]
 800f582:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f586:	4d57      	ldr	r5, [pc, #348]	@ (800f6e4 <_strtod_l+0xaf4>)
 800f588:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f58c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f58e:	401d      	ands	r5, r3
 800f590:	4b58      	ldr	r3, [pc, #352]	@ (800f6f4 <_strtod_l+0xb04>)
 800f592:	429d      	cmp	r5, r3
 800f594:	f040 80b2 	bne.w	800f6fc <_strtod_l+0xb0c>
 800f598:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f59a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f59e:	ec4b ab10 	vmov	d0, sl, fp
 800f5a2:	f7ff f9c9 	bl	800e938 <__ulp>
 800f5a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f5aa:	ec51 0b10 	vmov	r0, r1, d0
 800f5ae:	f7f1 f823 	bl	80005f8 <__aeabi_dmul>
 800f5b2:	4652      	mov	r2, sl
 800f5b4:	465b      	mov	r3, fp
 800f5b6:	f7f0 fe69 	bl	800028c <__adddf3>
 800f5ba:	460b      	mov	r3, r1
 800f5bc:	4949      	ldr	r1, [pc, #292]	@ (800f6e4 <_strtod_l+0xaf4>)
 800f5be:	4a4e      	ldr	r2, [pc, #312]	@ (800f6f8 <_strtod_l+0xb08>)
 800f5c0:	4019      	ands	r1, r3
 800f5c2:	4291      	cmp	r1, r2
 800f5c4:	4682      	mov	sl, r0
 800f5c6:	d942      	bls.n	800f64e <_strtod_l+0xa5e>
 800f5c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f5ca:	4b47      	ldr	r3, [pc, #284]	@ (800f6e8 <_strtod_l+0xaf8>)
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	d103      	bne.n	800f5d8 <_strtod_l+0x9e8>
 800f5d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f5d2:	3301      	adds	r3, #1
 800f5d4:	f43f ad2b 	beq.w	800f02e <_strtod_l+0x43e>
 800f5d8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f6e8 <_strtod_l+0xaf8>
 800f5dc:	f04f 3aff 	mov.w	sl, #4294967295
 800f5e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f5e2:	9805      	ldr	r0, [sp, #20]
 800f5e4:	f7fe fe74 	bl	800e2d0 <_Bfree>
 800f5e8:	9805      	ldr	r0, [sp, #20]
 800f5ea:	4649      	mov	r1, r9
 800f5ec:	f7fe fe70 	bl	800e2d0 <_Bfree>
 800f5f0:	9805      	ldr	r0, [sp, #20]
 800f5f2:	4641      	mov	r1, r8
 800f5f4:	f7fe fe6c 	bl	800e2d0 <_Bfree>
 800f5f8:	9805      	ldr	r0, [sp, #20]
 800f5fa:	4621      	mov	r1, r4
 800f5fc:	f7fe fe68 	bl	800e2d0 <_Bfree>
 800f600:	e618      	b.n	800f234 <_strtod_l+0x644>
 800f602:	f1ba 0f01 	cmp.w	sl, #1
 800f606:	d103      	bne.n	800f610 <_strtod_l+0xa20>
 800f608:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	f43f ada5 	beq.w	800f15a <_strtod_l+0x56a>
 800f610:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f6c0 <_strtod_l+0xad0>
 800f614:	4f35      	ldr	r7, [pc, #212]	@ (800f6ec <_strtod_l+0xafc>)
 800f616:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f61a:	2600      	movs	r6, #0
 800f61c:	e7b1      	b.n	800f582 <_strtod_l+0x992>
 800f61e:	4f34      	ldr	r7, [pc, #208]	@ (800f6f0 <_strtod_l+0xb00>)
 800f620:	2600      	movs	r6, #0
 800f622:	e7aa      	b.n	800f57a <_strtod_l+0x98a>
 800f624:	4b32      	ldr	r3, [pc, #200]	@ (800f6f0 <_strtod_l+0xb00>)
 800f626:	4630      	mov	r0, r6
 800f628:	4639      	mov	r1, r7
 800f62a:	2200      	movs	r2, #0
 800f62c:	f7f0 ffe4 	bl	80005f8 <__aeabi_dmul>
 800f630:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f632:	4606      	mov	r6, r0
 800f634:	460f      	mov	r7, r1
 800f636:	2b00      	cmp	r3, #0
 800f638:	d09f      	beq.n	800f57a <_strtod_l+0x98a>
 800f63a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f63e:	e7a0      	b.n	800f582 <_strtod_l+0x992>
 800f640:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f6c8 <_strtod_l+0xad8>
 800f644:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f648:	ec57 6b17 	vmov	r6, r7, d7
 800f64c:	e799      	b.n	800f582 <_strtod_l+0x992>
 800f64e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f652:	9b08      	ldr	r3, [sp, #32]
 800f654:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d1c1      	bne.n	800f5e0 <_strtod_l+0x9f0>
 800f65c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f660:	0d1b      	lsrs	r3, r3, #20
 800f662:	051b      	lsls	r3, r3, #20
 800f664:	429d      	cmp	r5, r3
 800f666:	d1bb      	bne.n	800f5e0 <_strtod_l+0x9f0>
 800f668:	4630      	mov	r0, r6
 800f66a:	4639      	mov	r1, r7
 800f66c:	f7f1 fb24 	bl	8000cb8 <__aeabi_d2lz>
 800f670:	f7f0 ff94 	bl	800059c <__aeabi_l2d>
 800f674:	4602      	mov	r2, r0
 800f676:	460b      	mov	r3, r1
 800f678:	4630      	mov	r0, r6
 800f67a:	4639      	mov	r1, r7
 800f67c:	f7f0 fe04 	bl	8000288 <__aeabi_dsub>
 800f680:	460b      	mov	r3, r1
 800f682:	4602      	mov	r2, r0
 800f684:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f688:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f68c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f68e:	ea46 060a 	orr.w	r6, r6, sl
 800f692:	431e      	orrs	r6, r3
 800f694:	d06f      	beq.n	800f776 <_strtod_l+0xb86>
 800f696:	a30e      	add	r3, pc, #56	@ (adr r3, 800f6d0 <_strtod_l+0xae0>)
 800f698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69c:	f7f1 fa1e 	bl	8000adc <__aeabi_dcmplt>
 800f6a0:	2800      	cmp	r0, #0
 800f6a2:	f47f accf 	bne.w	800f044 <_strtod_l+0x454>
 800f6a6:	a30c      	add	r3, pc, #48	@ (adr r3, 800f6d8 <_strtod_l+0xae8>)
 800f6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f6b0:	f7f1 fa32 	bl	8000b18 <__aeabi_dcmpgt>
 800f6b4:	2800      	cmp	r0, #0
 800f6b6:	d093      	beq.n	800f5e0 <_strtod_l+0x9f0>
 800f6b8:	e4c4      	b.n	800f044 <_strtod_l+0x454>
 800f6ba:	bf00      	nop
 800f6bc:	f3af 8000 	nop.w
 800f6c0:	00000000 	.word	0x00000000
 800f6c4:	bff00000 	.word	0xbff00000
 800f6c8:	00000000 	.word	0x00000000
 800f6cc:	3ff00000 	.word	0x3ff00000
 800f6d0:	94a03595 	.word	0x94a03595
 800f6d4:	3fdfffff 	.word	0x3fdfffff
 800f6d8:	35afe535 	.word	0x35afe535
 800f6dc:	3fe00000 	.word	0x3fe00000
 800f6e0:	000fffff 	.word	0x000fffff
 800f6e4:	7ff00000 	.word	0x7ff00000
 800f6e8:	7fefffff 	.word	0x7fefffff
 800f6ec:	3ff00000 	.word	0x3ff00000
 800f6f0:	3fe00000 	.word	0x3fe00000
 800f6f4:	7fe00000 	.word	0x7fe00000
 800f6f8:	7c9fffff 	.word	0x7c9fffff
 800f6fc:	9b08      	ldr	r3, [sp, #32]
 800f6fe:	b323      	cbz	r3, 800f74a <_strtod_l+0xb5a>
 800f700:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f704:	d821      	bhi.n	800f74a <_strtod_l+0xb5a>
 800f706:	a328      	add	r3, pc, #160	@ (adr r3, 800f7a8 <_strtod_l+0xbb8>)
 800f708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f70c:	4630      	mov	r0, r6
 800f70e:	4639      	mov	r1, r7
 800f710:	f7f1 f9ee 	bl	8000af0 <__aeabi_dcmple>
 800f714:	b1a0      	cbz	r0, 800f740 <_strtod_l+0xb50>
 800f716:	4639      	mov	r1, r7
 800f718:	4630      	mov	r0, r6
 800f71a:	f7f1 fa45 	bl	8000ba8 <__aeabi_d2uiz>
 800f71e:	2801      	cmp	r0, #1
 800f720:	bf38      	it	cc
 800f722:	2001      	movcc	r0, #1
 800f724:	f7f0 feee 	bl	8000504 <__aeabi_ui2d>
 800f728:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f72a:	4606      	mov	r6, r0
 800f72c:	460f      	mov	r7, r1
 800f72e:	b9fb      	cbnz	r3, 800f770 <_strtod_l+0xb80>
 800f730:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f734:	9014      	str	r0, [sp, #80]	@ 0x50
 800f736:	9315      	str	r3, [sp, #84]	@ 0x54
 800f738:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f73c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f740:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f742:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f746:	1b5b      	subs	r3, r3, r5
 800f748:	9311      	str	r3, [sp, #68]	@ 0x44
 800f74a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f74e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f752:	f7ff f8f1 	bl	800e938 <__ulp>
 800f756:	4650      	mov	r0, sl
 800f758:	ec53 2b10 	vmov	r2, r3, d0
 800f75c:	4659      	mov	r1, fp
 800f75e:	f7f0 ff4b 	bl	80005f8 <__aeabi_dmul>
 800f762:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f766:	f7f0 fd91 	bl	800028c <__adddf3>
 800f76a:	4682      	mov	sl, r0
 800f76c:	468b      	mov	fp, r1
 800f76e:	e770      	b.n	800f652 <_strtod_l+0xa62>
 800f770:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f774:	e7e0      	b.n	800f738 <_strtod_l+0xb48>
 800f776:	a30e      	add	r3, pc, #56	@ (adr r3, 800f7b0 <_strtod_l+0xbc0>)
 800f778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f77c:	f7f1 f9ae 	bl	8000adc <__aeabi_dcmplt>
 800f780:	e798      	b.n	800f6b4 <_strtod_l+0xac4>
 800f782:	2300      	movs	r3, #0
 800f784:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f786:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f788:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f78a:	6013      	str	r3, [r2, #0]
 800f78c:	f7ff ba6d 	b.w	800ec6a <_strtod_l+0x7a>
 800f790:	2a65      	cmp	r2, #101	@ 0x65
 800f792:	f43f ab66 	beq.w	800ee62 <_strtod_l+0x272>
 800f796:	2a45      	cmp	r2, #69	@ 0x45
 800f798:	f43f ab63 	beq.w	800ee62 <_strtod_l+0x272>
 800f79c:	2301      	movs	r3, #1
 800f79e:	f7ff bb9e 	b.w	800eede <_strtod_l+0x2ee>
 800f7a2:	bf00      	nop
 800f7a4:	f3af 8000 	nop.w
 800f7a8:	ffc00000 	.word	0xffc00000
 800f7ac:	41dfffff 	.word	0x41dfffff
 800f7b0:	94a03595 	.word	0x94a03595
 800f7b4:	3fcfffff 	.word	0x3fcfffff

0800f7b8 <_strtod_r>:
 800f7b8:	4b01      	ldr	r3, [pc, #4]	@ (800f7c0 <_strtod_r+0x8>)
 800f7ba:	f7ff ba19 	b.w	800ebf0 <_strtod_l>
 800f7be:	bf00      	nop
 800f7c0:	200000b8 	.word	0x200000b8

0800f7c4 <_strtol_l.constprop.0>:
 800f7c4:	2b24      	cmp	r3, #36	@ 0x24
 800f7c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7ca:	4686      	mov	lr, r0
 800f7cc:	4690      	mov	r8, r2
 800f7ce:	d801      	bhi.n	800f7d4 <_strtol_l.constprop.0+0x10>
 800f7d0:	2b01      	cmp	r3, #1
 800f7d2:	d106      	bne.n	800f7e2 <_strtol_l.constprop.0+0x1e>
 800f7d4:	f7fd fd90 	bl	800d2f8 <__errno>
 800f7d8:	2316      	movs	r3, #22
 800f7da:	6003      	str	r3, [r0, #0]
 800f7dc:	2000      	movs	r0, #0
 800f7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7e2:	4834      	ldr	r0, [pc, #208]	@ (800f8b4 <_strtol_l.constprop.0+0xf0>)
 800f7e4:	460d      	mov	r5, r1
 800f7e6:	462a      	mov	r2, r5
 800f7e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f7ec:	5d06      	ldrb	r6, [r0, r4]
 800f7ee:	f016 0608 	ands.w	r6, r6, #8
 800f7f2:	d1f8      	bne.n	800f7e6 <_strtol_l.constprop.0+0x22>
 800f7f4:	2c2d      	cmp	r4, #45	@ 0x2d
 800f7f6:	d12d      	bne.n	800f854 <_strtol_l.constprop.0+0x90>
 800f7f8:	782c      	ldrb	r4, [r5, #0]
 800f7fa:	2601      	movs	r6, #1
 800f7fc:	1c95      	adds	r5, r2, #2
 800f7fe:	f033 0210 	bics.w	r2, r3, #16
 800f802:	d109      	bne.n	800f818 <_strtol_l.constprop.0+0x54>
 800f804:	2c30      	cmp	r4, #48	@ 0x30
 800f806:	d12a      	bne.n	800f85e <_strtol_l.constprop.0+0x9a>
 800f808:	782a      	ldrb	r2, [r5, #0]
 800f80a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f80e:	2a58      	cmp	r2, #88	@ 0x58
 800f810:	d125      	bne.n	800f85e <_strtol_l.constprop.0+0x9a>
 800f812:	786c      	ldrb	r4, [r5, #1]
 800f814:	2310      	movs	r3, #16
 800f816:	3502      	adds	r5, #2
 800f818:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f81c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f820:	2200      	movs	r2, #0
 800f822:	fbbc f9f3 	udiv	r9, ip, r3
 800f826:	4610      	mov	r0, r2
 800f828:	fb03 ca19 	mls	sl, r3, r9, ip
 800f82c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f830:	2f09      	cmp	r7, #9
 800f832:	d81b      	bhi.n	800f86c <_strtol_l.constprop.0+0xa8>
 800f834:	463c      	mov	r4, r7
 800f836:	42a3      	cmp	r3, r4
 800f838:	dd27      	ble.n	800f88a <_strtol_l.constprop.0+0xc6>
 800f83a:	1c57      	adds	r7, r2, #1
 800f83c:	d007      	beq.n	800f84e <_strtol_l.constprop.0+0x8a>
 800f83e:	4581      	cmp	r9, r0
 800f840:	d320      	bcc.n	800f884 <_strtol_l.constprop.0+0xc0>
 800f842:	d101      	bne.n	800f848 <_strtol_l.constprop.0+0x84>
 800f844:	45a2      	cmp	sl, r4
 800f846:	db1d      	blt.n	800f884 <_strtol_l.constprop.0+0xc0>
 800f848:	fb00 4003 	mla	r0, r0, r3, r4
 800f84c:	2201      	movs	r2, #1
 800f84e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f852:	e7eb      	b.n	800f82c <_strtol_l.constprop.0+0x68>
 800f854:	2c2b      	cmp	r4, #43	@ 0x2b
 800f856:	bf04      	itt	eq
 800f858:	782c      	ldrbeq	r4, [r5, #0]
 800f85a:	1c95      	addeq	r5, r2, #2
 800f85c:	e7cf      	b.n	800f7fe <_strtol_l.constprop.0+0x3a>
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d1da      	bne.n	800f818 <_strtol_l.constprop.0+0x54>
 800f862:	2c30      	cmp	r4, #48	@ 0x30
 800f864:	bf0c      	ite	eq
 800f866:	2308      	moveq	r3, #8
 800f868:	230a      	movne	r3, #10
 800f86a:	e7d5      	b.n	800f818 <_strtol_l.constprop.0+0x54>
 800f86c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f870:	2f19      	cmp	r7, #25
 800f872:	d801      	bhi.n	800f878 <_strtol_l.constprop.0+0xb4>
 800f874:	3c37      	subs	r4, #55	@ 0x37
 800f876:	e7de      	b.n	800f836 <_strtol_l.constprop.0+0x72>
 800f878:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f87c:	2f19      	cmp	r7, #25
 800f87e:	d804      	bhi.n	800f88a <_strtol_l.constprop.0+0xc6>
 800f880:	3c57      	subs	r4, #87	@ 0x57
 800f882:	e7d8      	b.n	800f836 <_strtol_l.constprop.0+0x72>
 800f884:	f04f 32ff 	mov.w	r2, #4294967295
 800f888:	e7e1      	b.n	800f84e <_strtol_l.constprop.0+0x8a>
 800f88a:	1c53      	adds	r3, r2, #1
 800f88c:	d108      	bne.n	800f8a0 <_strtol_l.constprop.0+0xdc>
 800f88e:	2322      	movs	r3, #34	@ 0x22
 800f890:	f8ce 3000 	str.w	r3, [lr]
 800f894:	4660      	mov	r0, ip
 800f896:	f1b8 0f00 	cmp.w	r8, #0
 800f89a:	d0a0      	beq.n	800f7de <_strtol_l.constprop.0+0x1a>
 800f89c:	1e69      	subs	r1, r5, #1
 800f89e:	e006      	b.n	800f8ae <_strtol_l.constprop.0+0xea>
 800f8a0:	b106      	cbz	r6, 800f8a4 <_strtol_l.constprop.0+0xe0>
 800f8a2:	4240      	negs	r0, r0
 800f8a4:	f1b8 0f00 	cmp.w	r8, #0
 800f8a8:	d099      	beq.n	800f7de <_strtol_l.constprop.0+0x1a>
 800f8aa:	2a00      	cmp	r2, #0
 800f8ac:	d1f6      	bne.n	800f89c <_strtol_l.constprop.0+0xd8>
 800f8ae:	f8c8 1000 	str.w	r1, [r8]
 800f8b2:	e794      	b.n	800f7de <_strtol_l.constprop.0+0x1a>
 800f8b4:	080110a9 	.word	0x080110a9

0800f8b8 <_strtol_r>:
 800f8b8:	f7ff bf84 	b.w	800f7c4 <_strtol_l.constprop.0>

0800f8bc <__ssputs_r>:
 800f8bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8c0:	688e      	ldr	r6, [r1, #8]
 800f8c2:	461f      	mov	r7, r3
 800f8c4:	42be      	cmp	r6, r7
 800f8c6:	680b      	ldr	r3, [r1, #0]
 800f8c8:	4682      	mov	sl, r0
 800f8ca:	460c      	mov	r4, r1
 800f8cc:	4690      	mov	r8, r2
 800f8ce:	d82d      	bhi.n	800f92c <__ssputs_r+0x70>
 800f8d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f8d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f8d8:	d026      	beq.n	800f928 <__ssputs_r+0x6c>
 800f8da:	6965      	ldr	r5, [r4, #20]
 800f8dc:	6909      	ldr	r1, [r1, #16]
 800f8de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f8e2:	eba3 0901 	sub.w	r9, r3, r1
 800f8e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f8ea:	1c7b      	adds	r3, r7, #1
 800f8ec:	444b      	add	r3, r9
 800f8ee:	106d      	asrs	r5, r5, #1
 800f8f0:	429d      	cmp	r5, r3
 800f8f2:	bf38      	it	cc
 800f8f4:	461d      	movcc	r5, r3
 800f8f6:	0553      	lsls	r3, r2, #21
 800f8f8:	d527      	bpl.n	800f94a <__ssputs_r+0x8e>
 800f8fa:	4629      	mov	r1, r5
 800f8fc:	f7fe fc1c 	bl	800e138 <_malloc_r>
 800f900:	4606      	mov	r6, r0
 800f902:	b360      	cbz	r0, 800f95e <__ssputs_r+0xa2>
 800f904:	6921      	ldr	r1, [r4, #16]
 800f906:	464a      	mov	r2, r9
 800f908:	f7fd fd23 	bl	800d352 <memcpy>
 800f90c:	89a3      	ldrh	r3, [r4, #12]
 800f90e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f916:	81a3      	strh	r3, [r4, #12]
 800f918:	6126      	str	r6, [r4, #16]
 800f91a:	6165      	str	r5, [r4, #20]
 800f91c:	444e      	add	r6, r9
 800f91e:	eba5 0509 	sub.w	r5, r5, r9
 800f922:	6026      	str	r6, [r4, #0]
 800f924:	60a5      	str	r5, [r4, #8]
 800f926:	463e      	mov	r6, r7
 800f928:	42be      	cmp	r6, r7
 800f92a:	d900      	bls.n	800f92e <__ssputs_r+0x72>
 800f92c:	463e      	mov	r6, r7
 800f92e:	6820      	ldr	r0, [r4, #0]
 800f930:	4632      	mov	r2, r6
 800f932:	4641      	mov	r1, r8
 800f934:	f000 fb7c 	bl	8010030 <memmove>
 800f938:	68a3      	ldr	r3, [r4, #8]
 800f93a:	1b9b      	subs	r3, r3, r6
 800f93c:	60a3      	str	r3, [r4, #8]
 800f93e:	6823      	ldr	r3, [r4, #0]
 800f940:	4433      	add	r3, r6
 800f942:	6023      	str	r3, [r4, #0]
 800f944:	2000      	movs	r0, #0
 800f946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f94a:	462a      	mov	r2, r5
 800f94c:	f000 ff3d 	bl	80107ca <_realloc_r>
 800f950:	4606      	mov	r6, r0
 800f952:	2800      	cmp	r0, #0
 800f954:	d1e0      	bne.n	800f918 <__ssputs_r+0x5c>
 800f956:	6921      	ldr	r1, [r4, #16]
 800f958:	4650      	mov	r0, sl
 800f95a:	f7fe fb79 	bl	800e050 <_free_r>
 800f95e:	230c      	movs	r3, #12
 800f960:	f8ca 3000 	str.w	r3, [sl]
 800f964:	89a3      	ldrh	r3, [r4, #12]
 800f966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f96a:	81a3      	strh	r3, [r4, #12]
 800f96c:	f04f 30ff 	mov.w	r0, #4294967295
 800f970:	e7e9      	b.n	800f946 <__ssputs_r+0x8a>
	...

0800f974 <_svfiprintf_r>:
 800f974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f978:	4698      	mov	r8, r3
 800f97a:	898b      	ldrh	r3, [r1, #12]
 800f97c:	061b      	lsls	r3, r3, #24
 800f97e:	b09d      	sub	sp, #116	@ 0x74
 800f980:	4607      	mov	r7, r0
 800f982:	460d      	mov	r5, r1
 800f984:	4614      	mov	r4, r2
 800f986:	d510      	bpl.n	800f9aa <_svfiprintf_r+0x36>
 800f988:	690b      	ldr	r3, [r1, #16]
 800f98a:	b973      	cbnz	r3, 800f9aa <_svfiprintf_r+0x36>
 800f98c:	2140      	movs	r1, #64	@ 0x40
 800f98e:	f7fe fbd3 	bl	800e138 <_malloc_r>
 800f992:	6028      	str	r0, [r5, #0]
 800f994:	6128      	str	r0, [r5, #16]
 800f996:	b930      	cbnz	r0, 800f9a6 <_svfiprintf_r+0x32>
 800f998:	230c      	movs	r3, #12
 800f99a:	603b      	str	r3, [r7, #0]
 800f99c:	f04f 30ff 	mov.w	r0, #4294967295
 800f9a0:	b01d      	add	sp, #116	@ 0x74
 800f9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9a6:	2340      	movs	r3, #64	@ 0x40
 800f9a8:	616b      	str	r3, [r5, #20]
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9ae:	2320      	movs	r3, #32
 800f9b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f9b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9b8:	2330      	movs	r3, #48	@ 0x30
 800f9ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fb58 <_svfiprintf_r+0x1e4>
 800f9be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f9c2:	f04f 0901 	mov.w	r9, #1
 800f9c6:	4623      	mov	r3, r4
 800f9c8:	469a      	mov	sl, r3
 800f9ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9ce:	b10a      	cbz	r2, 800f9d4 <_svfiprintf_r+0x60>
 800f9d0:	2a25      	cmp	r2, #37	@ 0x25
 800f9d2:	d1f9      	bne.n	800f9c8 <_svfiprintf_r+0x54>
 800f9d4:	ebba 0b04 	subs.w	fp, sl, r4
 800f9d8:	d00b      	beq.n	800f9f2 <_svfiprintf_r+0x7e>
 800f9da:	465b      	mov	r3, fp
 800f9dc:	4622      	mov	r2, r4
 800f9de:	4629      	mov	r1, r5
 800f9e0:	4638      	mov	r0, r7
 800f9e2:	f7ff ff6b 	bl	800f8bc <__ssputs_r>
 800f9e6:	3001      	adds	r0, #1
 800f9e8:	f000 80a7 	beq.w	800fb3a <_svfiprintf_r+0x1c6>
 800f9ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f9ee:	445a      	add	r2, fp
 800f9f0:	9209      	str	r2, [sp, #36]	@ 0x24
 800f9f2:	f89a 3000 	ldrb.w	r3, [sl]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	f000 809f 	beq.w	800fb3a <_svfiprintf_r+0x1c6>
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	f04f 32ff 	mov.w	r2, #4294967295
 800fa02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa06:	f10a 0a01 	add.w	sl, sl, #1
 800fa0a:	9304      	str	r3, [sp, #16]
 800fa0c:	9307      	str	r3, [sp, #28]
 800fa0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fa12:	931a      	str	r3, [sp, #104]	@ 0x68
 800fa14:	4654      	mov	r4, sl
 800fa16:	2205      	movs	r2, #5
 800fa18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa1c:	484e      	ldr	r0, [pc, #312]	@ (800fb58 <_svfiprintf_r+0x1e4>)
 800fa1e:	f7f0 fbd7 	bl	80001d0 <memchr>
 800fa22:	9a04      	ldr	r2, [sp, #16]
 800fa24:	b9d8      	cbnz	r0, 800fa5e <_svfiprintf_r+0xea>
 800fa26:	06d0      	lsls	r0, r2, #27
 800fa28:	bf44      	itt	mi
 800fa2a:	2320      	movmi	r3, #32
 800fa2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa30:	0711      	lsls	r1, r2, #28
 800fa32:	bf44      	itt	mi
 800fa34:	232b      	movmi	r3, #43	@ 0x2b
 800fa36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa3a:	f89a 3000 	ldrb.w	r3, [sl]
 800fa3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa40:	d015      	beq.n	800fa6e <_svfiprintf_r+0xfa>
 800fa42:	9a07      	ldr	r2, [sp, #28]
 800fa44:	4654      	mov	r4, sl
 800fa46:	2000      	movs	r0, #0
 800fa48:	f04f 0c0a 	mov.w	ip, #10
 800fa4c:	4621      	mov	r1, r4
 800fa4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa52:	3b30      	subs	r3, #48	@ 0x30
 800fa54:	2b09      	cmp	r3, #9
 800fa56:	d94b      	bls.n	800faf0 <_svfiprintf_r+0x17c>
 800fa58:	b1b0      	cbz	r0, 800fa88 <_svfiprintf_r+0x114>
 800fa5a:	9207      	str	r2, [sp, #28]
 800fa5c:	e014      	b.n	800fa88 <_svfiprintf_r+0x114>
 800fa5e:	eba0 0308 	sub.w	r3, r0, r8
 800fa62:	fa09 f303 	lsl.w	r3, r9, r3
 800fa66:	4313      	orrs	r3, r2
 800fa68:	9304      	str	r3, [sp, #16]
 800fa6a:	46a2      	mov	sl, r4
 800fa6c:	e7d2      	b.n	800fa14 <_svfiprintf_r+0xa0>
 800fa6e:	9b03      	ldr	r3, [sp, #12]
 800fa70:	1d19      	adds	r1, r3, #4
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	9103      	str	r1, [sp, #12]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	bfbb      	ittet	lt
 800fa7a:	425b      	neglt	r3, r3
 800fa7c:	f042 0202 	orrlt.w	r2, r2, #2
 800fa80:	9307      	strge	r3, [sp, #28]
 800fa82:	9307      	strlt	r3, [sp, #28]
 800fa84:	bfb8      	it	lt
 800fa86:	9204      	strlt	r2, [sp, #16]
 800fa88:	7823      	ldrb	r3, [r4, #0]
 800fa8a:	2b2e      	cmp	r3, #46	@ 0x2e
 800fa8c:	d10a      	bne.n	800faa4 <_svfiprintf_r+0x130>
 800fa8e:	7863      	ldrb	r3, [r4, #1]
 800fa90:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa92:	d132      	bne.n	800fafa <_svfiprintf_r+0x186>
 800fa94:	9b03      	ldr	r3, [sp, #12]
 800fa96:	1d1a      	adds	r2, r3, #4
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	9203      	str	r2, [sp, #12]
 800fa9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800faa0:	3402      	adds	r4, #2
 800faa2:	9305      	str	r3, [sp, #20]
 800faa4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fb68 <_svfiprintf_r+0x1f4>
 800faa8:	7821      	ldrb	r1, [r4, #0]
 800faaa:	2203      	movs	r2, #3
 800faac:	4650      	mov	r0, sl
 800faae:	f7f0 fb8f 	bl	80001d0 <memchr>
 800fab2:	b138      	cbz	r0, 800fac4 <_svfiprintf_r+0x150>
 800fab4:	9b04      	ldr	r3, [sp, #16]
 800fab6:	eba0 000a 	sub.w	r0, r0, sl
 800faba:	2240      	movs	r2, #64	@ 0x40
 800fabc:	4082      	lsls	r2, r0
 800fabe:	4313      	orrs	r3, r2
 800fac0:	3401      	adds	r4, #1
 800fac2:	9304      	str	r3, [sp, #16]
 800fac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fac8:	4824      	ldr	r0, [pc, #144]	@ (800fb5c <_svfiprintf_r+0x1e8>)
 800faca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800face:	2206      	movs	r2, #6
 800fad0:	f7f0 fb7e 	bl	80001d0 <memchr>
 800fad4:	2800      	cmp	r0, #0
 800fad6:	d036      	beq.n	800fb46 <_svfiprintf_r+0x1d2>
 800fad8:	4b21      	ldr	r3, [pc, #132]	@ (800fb60 <_svfiprintf_r+0x1ec>)
 800fada:	bb1b      	cbnz	r3, 800fb24 <_svfiprintf_r+0x1b0>
 800fadc:	9b03      	ldr	r3, [sp, #12]
 800fade:	3307      	adds	r3, #7
 800fae0:	f023 0307 	bic.w	r3, r3, #7
 800fae4:	3308      	adds	r3, #8
 800fae6:	9303      	str	r3, [sp, #12]
 800fae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800faea:	4433      	add	r3, r6
 800faec:	9309      	str	r3, [sp, #36]	@ 0x24
 800faee:	e76a      	b.n	800f9c6 <_svfiprintf_r+0x52>
 800faf0:	fb0c 3202 	mla	r2, ip, r2, r3
 800faf4:	460c      	mov	r4, r1
 800faf6:	2001      	movs	r0, #1
 800faf8:	e7a8      	b.n	800fa4c <_svfiprintf_r+0xd8>
 800fafa:	2300      	movs	r3, #0
 800fafc:	3401      	adds	r4, #1
 800fafe:	9305      	str	r3, [sp, #20]
 800fb00:	4619      	mov	r1, r3
 800fb02:	f04f 0c0a 	mov.w	ip, #10
 800fb06:	4620      	mov	r0, r4
 800fb08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb0c:	3a30      	subs	r2, #48	@ 0x30
 800fb0e:	2a09      	cmp	r2, #9
 800fb10:	d903      	bls.n	800fb1a <_svfiprintf_r+0x1a6>
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d0c6      	beq.n	800faa4 <_svfiprintf_r+0x130>
 800fb16:	9105      	str	r1, [sp, #20]
 800fb18:	e7c4      	b.n	800faa4 <_svfiprintf_r+0x130>
 800fb1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb1e:	4604      	mov	r4, r0
 800fb20:	2301      	movs	r3, #1
 800fb22:	e7f0      	b.n	800fb06 <_svfiprintf_r+0x192>
 800fb24:	ab03      	add	r3, sp, #12
 800fb26:	9300      	str	r3, [sp, #0]
 800fb28:	462a      	mov	r2, r5
 800fb2a:	4b0e      	ldr	r3, [pc, #56]	@ (800fb64 <_svfiprintf_r+0x1f0>)
 800fb2c:	a904      	add	r1, sp, #16
 800fb2e:	4638      	mov	r0, r7
 800fb30:	f7fc fb9a 	bl	800c268 <_printf_float>
 800fb34:	1c42      	adds	r2, r0, #1
 800fb36:	4606      	mov	r6, r0
 800fb38:	d1d6      	bne.n	800fae8 <_svfiprintf_r+0x174>
 800fb3a:	89ab      	ldrh	r3, [r5, #12]
 800fb3c:	065b      	lsls	r3, r3, #25
 800fb3e:	f53f af2d 	bmi.w	800f99c <_svfiprintf_r+0x28>
 800fb42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb44:	e72c      	b.n	800f9a0 <_svfiprintf_r+0x2c>
 800fb46:	ab03      	add	r3, sp, #12
 800fb48:	9300      	str	r3, [sp, #0]
 800fb4a:	462a      	mov	r2, r5
 800fb4c:	4b05      	ldr	r3, [pc, #20]	@ (800fb64 <_svfiprintf_r+0x1f0>)
 800fb4e:	a904      	add	r1, sp, #16
 800fb50:	4638      	mov	r0, r7
 800fb52:	f7fc fe21 	bl	800c798 <_printf_i>
 800fb56:	e7ed      	b.n	800fb34 <_svfiprintf_r+0x1c0>
 800fb58:	080111a9 	.word	0x080111a9
 800fb5c:	080111b3 	.word	0x080111b3
 800fb60:	0800c269 	.word	0x0800c269
 800fb64:	0800f8bd 	.word	0x0800f8bd
 800fb68:	080111af 	.word	0x080111af

0800fb6c <__sfputc_r>:
 800fb6c:	6893      	ldr	r3, [r2, #8]
 800fb6e:	3b01      	subs	r3, #1
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	b410      	push	{r4}
 800fb74:	6093      	str	r3, [r2, #8]
 800fb76:	da08      	bge.n	800fb8a <__sfputc_r+0x1e>
 800fb78:	6994      	ldr	r4, [r2, #24]
 800fb7a:	42a3      	cmp	r3, r4
 800fb7c:	db01      	blt.n	800fb82 <__sfputc_r+0x16>
 800fb7e:	290a      	cmp	r1, #10
 800fb80:	d103      	bne.n	800fb8a <__sfputc_r+0x1e>
 800fb82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb86:	f7fd bad0 	b.w	800d12a <__swbuf_r>
 800fb8a:	6813      	ldr	r3, [r2, #0]
 800fb8c:	1c58      	adds	r0, r3, #1
 800fb8e:	6010      	str	r0, [r2, #0]
 800fb90:	7019      	strb	r1, [r3, #0]
 800fb92:	4608      	mov	r0, r1
 800fb94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb98:	4770      	bx	lr

0800fb9a <__sfputs_r>:
 800fb9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb9c:	4606      	mov	r6, r0
 800fb9e:	460f      	mov	r7, r1
 800fba0:	4614      	mov	r4, r2
 800fba2:	18d5      	adds	r5, r2, r3
 800fba4:	42ac      	cmp	r4, r5
 800fba6:	d101      	bne.n	800fbac <__sfputs_r+0x12>
 800fba8:	2000      	movs	r0, #0
 800fbaa:	e007      	b.n	800fbbc <__sfputs_r+0x22>
 800fbac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbb0:	463a      	mov	r2, r7
 800fbb2:	4630      	mov	r0, r6
 800fbb4:	f7ff ffda 	bl	800fb6c <__sfputc_r>
 800fbb8:	1c43      	adds	r3, r0, #1
 800fbba:	d1f3      	bne.n	800fba4 <__sfputs_r+0xa>
 800fbbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fbc0 <_vfiprintf_r>:
 800fbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbc4:	460d      	mov	r5, r1
 800fbc6:	b09d      	sub	sp, #116	@ 0x74
 800fbc8:	4614      	mov	r4, r2
 800fbca:	4698      	mov	r8, r3
 800fbcc:	4606      	mov	r6, r0
 800fbce:	b118      	cbz	r0, 800fbd8 <_vfiprintf_r+0x18>
 800fbd0:	6a03      	ldr	r3, [r0, #32]
 800fbd2:	b90b      	cbnz	r3, 800fbd8 <_vfiprintf_r+0x18>
 800fbd4:	f7fd f9a0 	bl	800cf18 <__sinit>
 800fbd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fbda:	07d9      	lsls	r1, r3, #31
 800fbdc:	d405      	bmi.n	800fbea <_vfiprintf_r+0x2a>
 800fbde:	89ab      	ldrh	r3, [r5, #12]
 800fbe0:	059a      	lsls	r2, r3, #22
 800fbe2:	d402      	bmi.n	800fbea <_vfiprintf_r+0x2a>
 800fbe4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fbe6:	f7fd fbb2 	bl	800d34e <__retarget_lock_acquire_recursive>
 800fbea:	89ab      	ldrh	r3, [r5, #12]
 800fbec:	071b      	lsls	r3, r3, #28
 800fbee:	d501      	bpl.n	800fbf4 <_vfiprintf_r+0x34>
 800fbf0:	692b      	ldr	r3, [r5, #16]
 800fbf2:	b99b      	cbnz	r3, 800fc1c <_vfiprintf_r+0x5c>
 800fbf4:	4629      	mov	r1, r5
 800fbf6:	4630      	mov	r0, r6
 800fbf8:	f7fd fad6 	bl	800d1a8 <__swsetup_r>
 800fbfc:	b170      	cbz	r0, 800fc1c <_vfiprintf_r+0x5c>
 800fbfe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc00:	07dc      	lsls	r4, r3, #31
 800fc02:	d504      	bpl.n	800fc0e <_vfiprintf_r+0x4e>
 800fc04:	f04f 30ff 	mov.w	r0, #4294967295
 800fc08:	b01d      	add	sp, #116	@ 0x74
 800fc0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc0e:	89ab      	ldrh	r3, [r5, #12]
 800fc10:	0598      	lsls	r0, r3, #22
 800fc12:	d4f7      	bmi.n	800fc04 <_vfiprintf_r+0x44>
 800fc14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fc16:	f7fd fb9b 	bl	800d350 <__retarget_lock_release_recursive>
 800fc1a:	e7f3      	b.n	800fc04 <_vfiprintf_r+0x44>
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc20:	2320      	movs	r3, #32
 800fc22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fc26:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc2a:	2330      	movs	r3, #48	@ 0x30
 800fc2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fddc <_vfiprintf_r+0x21c>
 800fc30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fc34:	f04f 0901 	mov.w	r9, #1
 800fc38:	4623      	mov	r3, r4
 800fc3a:	469a      	mov	sl, r3
 800fc3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc40:	b10a      	cbz	r2, 800fc46 <_vfiprintf_r+0x86>
 800fc42:	2a25      	cmp	r2, #37	@ 0x25
 800fc44:	d1f9      	bne.n	800fc3a <_vfiprintf_r+0x7a>
 800fc46:	ebba 0b04 	subs.w	fp, sl, r4
 800fc4a:	d00b      	beq.n	800fc64 <_vfiprintf_r+0xa4>
 800fc4c:	465b      	mov	r3, fp
 800fc4e:	4622      	mov	r2, r4
 800fc50:	4629      	mov	r1, r5
 800fc52:	4630      	mov	r0, r6
 800fc54:	f7ff ffa1 	bl	800fb9a <__sfputs_r>
 800fc58:	3001      	adds	r0, #1
 800fc5a:	f000 80a7 	beq.w	800fdac <_vfiprintf_r+0x1ec>
 800fc5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc60:	445a      	add	r2, fp
 800fc62:	9209      	str	r2, [sp, #36]	@ 0x24
 800fc64:	f89a 3000 	ldrb.w	r3, [sl]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	f000 809f 	beq.w	800fdac <_vfiprintf_r+0x1ec>
 800fc6e:	2300      	movs	r3, #0
 800fc70:	f04f 32ff 	mov.w	r2, #4294967295
 800fc74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc78:	f10a 0a01 	add.w	sl, sl, #1
 800fc7c:	9304      	str	r3, [sp, #16]
 800fc7e:	9307      	str	r3, [sp, #28]
 800fc80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fc84:	931a      	str	r3, [sp, #104]	@ 0x68
 800fc86:	4654      	mov	r4, sl
 800fc88:	2205      	movs	r2, #5
 800fc8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc8e:	4853      	ldr	r0, [pc, #332]	@ (800fddc <_vfiprintf_r+0x21c>)
 800fc90:	f7f0 fa9e 	bl	80001d0 <memchr>
 800fc94:	9a04      	ldr	r2, [sp, #16]
 800fc96:	b9d8      	cbnz	r0, 800fcd0 <_vfiprintf_r+0x110>
 800fc98:	06d1      	lsls	r1, r2, #27
 800fc9a:	bf44      	itt	mi
 800fc9c:	2320      	movmi	r3, #32
 800fc9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fca2:	0713      	lsls	r3, r2, #28
 800fca4:	bf44      	itt	mi
 800fca6:	232b      	movmi	r3, #43	@ 0x2b
 800fca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fcac:	f89a 3000 	ldrb.w	r3, [sl]
 800fcb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800fcb2:	d015      	beq.n	800fce0 <_vfiprintf_r+0x120>
 800fcb4:	9a07      	ldr	r2, [sp, #28]
 800fcb6:	4654      	mov	r4, sl
 800fcb8:	2000      	movs	r0, #0
 800fcba:	f04f 0c0a 	mov.w	ip, #10
 800fcbe:	4621      	mov	r1, r4
 800fcc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fcc4:	3b30      	subs	r3, #48	@ 0x30
 800fcc6:	2b09      	cmp	r3, #9
 800fcc8:	d94b      	bls.n	800fd62 <_vfiprintf_r+0x1a2>
 800fcca:	b1b0      	cbz	r0, 800fcfa <_vfiprintf_r+0x13a>
 800fccc:	9207      	str	r2, [sp, #28]
 800fcce:	e014      	b.n	800fcfa <_vfiprintf_r+0x13a>
 800fcd0:	eba0 0308 	sub.w	r3, r0, r8
 800fcd4:	fa09 f303 	lsl.w	r3, r9, r3
 800fcd8:	4313      	orrs	r3, r2
 800fcda:	9304      	str	r3, [sp, #16]
 800fcdc:	46a2      	mov	sl, r4
 800fcde:	e7d2      	b.n	800fc86 <_vfiprintf_r+0xc6>
 800fce0:	9b03      	ldr	r3, [sp, #12]
 800fce2:	1d19      	adds	r1, r3, #4
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	9103      	str	r1, [sp, #12]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	bfbb      	ittet	lt
 800fcec:	425b      	neglt	r3, r3
 800fcee:	f042 0202 	orrlt.w	r2, r2, #2
 800fcf2:	9307      	strge	r3, [sp, #28]
 800fcf4:	9307      	strlt	r3, [sp, #28]
 800fcf6:	bfb8      	it	lt
 800fcf8:	9204      	strlt	r2, [sp, #16]
 800fcfa:	7823      	ldrb	r3, [r4, #0]
 800fcfc:	2b2e      	cmp	r3, #46	@ 0x2e
 800fcfe:	d10a      	bne.n	800fd16 <_vfiprintf_r+0x156>
 800fd00:	7863      	ldrb	r3, [r4, #1]
 800fd02:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd04:	d132      	bne.n	800fd6c <_vfiprintf_r+0x1ac>
 800fd06:	9b03      	ldr	r3, [sp, #12]
 800fd08:	1d1a      	adds	r2, r3, #4
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	9203      	str	r2, [sp, #12]
 800fd0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fd12:	3402      	adds	r4, #2
 800fd14:	9305      	str	r3, [sp, #20]
 800fd16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fdec <_vfiprintf_r+0x22c>
 800fd1a:	7821      	ldrb	r1, [r4, #0]
 800fd1c:	2203      	movs	r2, #3
 800fd1e:	4650      	mov	r0, sl
 800fd20:	f7f0 fa56 	bl	80001d0 <memchr>
 800fd24:	b138      	cbz	r0, 800fd36 <_vfiprintf_r+0x176>
 800fd26:	9b04      	ldr	r3, [sp, #16]
 800fd28:	eba0 000a 	sub.w	r0, r0, sl
 800fd2c:	2240      	movs	r2, #64	@ 0x40
 800fd2e:	4082      	lsls	r2, r0
 800fd30:	4313      	orrs	r3, r2
 800fd32:	3401      	adds	r4, #1
 800fd34:	9304      	str	r3, [sp, #16]
 800fd36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd3a:	4829      	ldr	r0, [pc, #164]	@ (800fde0 <_vfiprintf_r+0x220>)
 800fd3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fd40:	2206      	movs	r2, #6
 800fd42:	f7f0 fa45 	bl	80001d0 <memchr>
 800fd46:	2800      	cmp	r0, #0
 800fd48:	d03f      	beq.n	800fdca <_vfiprintf_r+0x20a>
 800fd4a:	4b26      	ldr	r3, [pc, #152]	@ (800fde4 <_vfiprintf_r+0x224>)
 800fd4c:	bb1b      	cbnz	r3, 800fd96 <_vfiprintf_r+0x1d6>
 800fd4e:	9b03      	ldr	r3, [sp, #12]
 800fd50:	3307      	adds	r3, #7
 800fd52:	f023 0307 	bic.w	r3, r3, #7
 800fd56:	3308      	adds	r3, #8
 800fd58:	9303      	str	r3, [sp, #12]
 800fd5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd5c:	443b      	add	r3, r7
 800fd5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd60:	e76a      	b.n	800fc38 <_vfiprintf_r+0x78>
 800fd62:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd66:	460c      	mov	r4, r1
 800fd68:	2001      	movs	r0, #1
 800fd6a:	e7a8      	b.n	800fcbe <_vfiprintf_r+0xfe>
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	3401      	adds	r4, #1
 800fd70:	9305      	str	r3, [sp, #20]
 800fd72:	4619      	mov	r1, r3
 800fd74:	f04f 0c0a 	mov.w	ip, #10
 800fd78:	4620      	mov	r0, r4
 800fd7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd7e:	3a30      	subs	r2, #48	@ 0x30
 800fd80:	2a09      	cmp	r2, #9
 800fd82:	d903      	bls.n	800fd8c <_vfiprintf_r+0x1cc>
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d0c6      	beq.n	800fd16 <_vfiprintf_r+0x156>
 800fd88:	9105      	str	r1, [sp, #20]
 800fd8a:	e7c4      	b.n	800fd16 <_vfiprintf_r+0x156>
 800fd8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd90:	4604      	mov	r4, r0
 800fd92:	2301      	movs	r3, #1
 800fd94:	e7f0      	b.n	800fd78 <_vfiprintf_r+0x1b8>
 800fd96:	ab03      	add	r3, sp, #12
 800fd98:	9300      	str	r3, [sp, #0]
 800fd9a:	462a      	mov	r2, r5
 800fd9c:	4b12      	ldr	r3, [pc, #72]	@ (800fde8 <_vfiprintf_r+0x228>)
 800fd9e:	a904      	add	r1, sp, #16
 800fda0:	4630      	mov	r0, r6
 800fda2:	f7fc fa61 	bl	800c268 <_printf_float>
 800fda6:	4607      	mov	r7, r0
 800fda8:	1c78      	adds	r0, r7, #1
 800fdaa:	d1d6      	bne.n	800fd5a <_vfiprintf_r+0x19a>
 800fdac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fdae:	07d9      	lsls	r1, r3, #31
 800fdb0:	d405      	bmi.n	800fdbe <_vfiprintf_r+0x1fe>
 800fdb2:	89ab      	ldrh	r3, [r5, #12]
 800fdb4:	059a      	lsls	r2, r3, #22
 800fdb6:	d402      	bmi.n	800fdbe <_vfiprintf_r+0x1fe>
 800fdb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fdba:	f7fd fac9 	bl	800d350 <__retarget_lock_release_recursive>
 800fdbe:	89ab      	ldrh	r3, [r5, #12]
 800fdc0:	065b      	lsls	r3, r3, #25
 800fdc2:	f53f af1f 	bmi.w	800fc04 <_vfiprintf_r+0x44>
 800fdc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fdc8:	e71e      	b.n	800fc08 <_vfiprintf_r+0x48>
 800fdca:	ab03      	add	r3, sp, #12
 800fdcc:	9300      	str	r3, [sp, #0]
 800fdce:	462a      	mov	r2, r5
 800fdd0:	4b05      	ldr	r3, [pc, #20]	@ (800fde8 <_vfiprintf_r+0x228>)
 800fdd2:	a904      	add	r1, sp, #16
 800fdd4:	4630      	mov	r0, r6
 800fdd6:	f7fc fcdf 	bl	800c798 <_printf_i>
 800fdda:	e7e4      	b.n	800fda6 <_vfiprintf_r+0x1e6>
 800fddc:	080111a9 	.word	0x080111a9
 800fde0:	080111b3 	.word	0x080111b3
 800fde4:	0800c269 	.word	0x0800c269
 800fde8:	0800fb9b 	.word	0x0800fb9b
 800fdec:	080111af 	.word	0x080111af

0800fdf0 <__sflush_r>:
 800fdf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fdf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdf8:	0716      	lsls	r6, r2, #28
 800fdfa:	4605      	mov	r5, r0
 800fdfc:	460c      	mov	r4, r1
 800fdfe:	d454      	bmi.n	800feaa <__sflush_r+0xba>
 800fe00:	684b      	ldr	r3, [r1, #4]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	dc02      	bgt.n	800fe0c <__sflush_r+0x1c>
 800fe06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	dd48      	ble.n	800fe9e <__sflush_r+0xae>
 800fe0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fe0e:	2e00      	cmp	r6, #0
 800fe10:	d045      	beq.n	800fe9e <__sflush_r+0xae>
 800fe12:	2300      	movs	r3, #0
 800fe14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fe18:	682f      	ldr	r7, [r5, #0]
 800fe1a:	6a21      	ldr	r1, [r4, #32]
 800fe1c:	602b      	str	r3, [r5, #0]
 800fe1e:	d030      	beq.n	800fe82 <__sflush_r+0x92>
 800fe20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fe22:	89a3      	ldrh	r3, [r4, #12]
 800fe24:	0759      	lsls	r1, r3, #29
 800fe26:	d505      	bpl.n	800fe34 <__sflush_r+0x44>
 800fe28:	6863      	ldr	r3, [r4, #4]
 800fe2a:	1ad2      	subs	r2, r2, r3
 800fe2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fe2e:	b10b      	cbz	r3, 800fe34 <__sflush_r+0x44>
 800fe30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fe32:	1ad2      	subs	r2, r2, r3
 800fe34:	2300      	movs	r3, #0
 800fe36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fe38:	6a21      	ldr	r1, [r4, #32]
 800fe3a:	4628      	mov	r0, r5
 800fe3c:	47b0      	blx	r6
 800fe3e:	1c43      	adds	r3, r0, #1
 800fe40:	89a3      	ldrh	r3, [r4, #12]
 800fe42:	d106      	bne.n	800fe52 <__sflush_r+0x62>
 800fe44:	6829      	ldr	r1, [r5, #0]
 800fe46:	291d      	cmp	r1, #29
 800fe48:	d82b      	bhi.n	800fea2 <__sflush_r+0xb2>
 800fe4a:	4a2a      	ldr	r2, [pc, #168]	@ (800fef4 <__sflush_r+0x104>)
 800fe4c:	410a      	asrs	r2, r1
 800fe4e:	07d6      	lsls	r6, r2, #31
 800fe50:	d427      	bmi.n	800fea2 <__sflush_r+0xb2>
 800fe52:	2200      	movs	r2, #0
 800fe54:	6062      	str	r2, [r4, #4]
 800fe56:	04d9      	lsls	r1, r3, #19
 800fe58:	6922      	ldr	r2, [r4, #16]
 800fe5a:	6022      	str	r2, [r4, #0]
 800fe5c:	d504      	bpl.n	800fe68 <__sflush_r+0x78>
 800fe5e:	1c42      	adds	r2, r0, #1
 800fe60:	d101      	bne.n	800fe66 <__sflush_r+0x76>
 800fe62:	682b      	ldr	r3, [r5, #0]
 800fe64:	b903      	cbnz	r3, 800fe68 <__sflush_r+0x78>
 800fe66:	6560      	str	r0, [r4, #84]	@ 0x54
 800fe68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fe6a:	602f      	str	r7, [r5, #0]
 800fe6c:	b1b9      	cbz	r1, 800fe9e <__sflush_r+0xae>
 800fe6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fe72:	4299      	cmp	r1, r3
 800fe74:	d002      	beq.n	800fe7c <__sflush_r+0x8c>
 800fe76:	4628      	mov	r0, r5
 800fe78:	f7fe f8ea 	bl	800e050 <_free_r>
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	6363      	str	r3, [r4, #52]	@ 0x34
 800fe80:	e00d      	b.n	800fe9e <__sflush_r+0xae>
 800fe82:	2301      	movs	r3, #1
 800fe84:	4628      	mov	r0, r5
 800fe86:	47b0      	blx	r6
 800fe88:	4602      	mov	r2, r0
 800fe8a:	1c50      	adds	r0, r2, #1
 800fe8c:	d1c9      	bne.n	800fe22 <__sflush_r+0x32>
 800fe8e:	682b      	ldr	r3, [r5, #0]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d0c6      	beq.n	800fe22 <__sflush_r+0x32>
 800fe94:	2b1d      	cmp	r3, #29
 800fe96:	d001      	beq.n	800fe9c <__sflush_r+0xac>
 800fe98:	2b16      	cmp	r3, #22
 800fe9a:	d11e      	bne.n	800feda <__sflush_r+0xea>
 800fe9c:	602f      	str	r7, [r5, #0]
 800fe9e:	2000      	movs	r0, #0
 800fea0:	e022      	b.n	800fee8 <__sflush_r+0xf8>
 800fea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fea6:	b21b      	sxth	r3, r3
 800fea8:	e01b      	b.n	800fee2 <__sflush_r+0xf2>
 800feaa:	690f      	ldr	r7, [r1, #16]
 800feac:	2f00      	cmp	r7, #0
 800feae:	d0f6      	beq.n	800fe9e <__sflush_r+0xae>
 800feb0:	0793      	lsls	r3, r2, #30
 800feb2:	680e      	ldr	r6, [r1, #0]
 800feb4:	bf08      	it	eq
 800feb6:	694b      	ldreq	r3, [r1, #20]
 800feb8:	600f      	str	r7, [r1, #0]
 800feba:	bf18      	it	ne
 800febc:	2300      	movne	r3, #0
 800febe:	eba6 0807 	sub.w	r8, r6, r7
 800fec2:	608b      	str	r3, [r1, #8]
 800fec4:	f1b8 0f00 	cmp.w	r8, #0
 800fec8:	dde9      	ble.n	800fe9e <__sflush_r+0xae>
 800feca:	6a21      	ldr	r1, [r4, #32]
 800fecc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fece:	4643      	mov	r3, r8
 800fed0:	463a      	mov	r2, r7
 800fed2:	4628      	mov	r0, r5
 800fed4:	47b0      	blx	r6
 800fed6:	2800      	cmp	r0, #0
 800fed8:	dc08      	bgt.n	800feec <__sflush_r+0xfc>
 800feda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fee2:	81a3      	strh	r3, [r4, #12]
 800fee4:	f04f 30ff 	mov.w	r0, #4294967295
 800fee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feec:	4407      	add	r7, r0
 800feee:	eba8 0800 	sub.w	r8, r8, r0
 800fef2:	e7e7      	b.n	800fec4 <__sflush_r+0xd4>
 800fef4:	dfbffffe 	.word	0xdfbffffe

0800fef8 <_fflush_r>:
 800fef8:	b538      	push	{r3, r4, r5, lr}
 800fefa:	690b      	ldr	r3, [r1, #16]
 800fefc:	4605      	mov	r5, r0
 800fefe:	460c      	mov	r4, r1
 800ff00:	b913      	cbnz	r3, 800ff08 <_fflush_r+0x10>
 800ff02:	2500      	movs	r5, #0
 800ff04:	4628      	mov	r0, r5
 800ff06:	bd38      	pop	{r3, r4, r5, pc}
 800ff08:	b118      	cbz	r0, 800ff12 <_fflush_r+0x1a>
 800ff0a:	6a03      	ldr	r3, [r0, #32]
 800ff0c:	b90b      	cbnz	r3, 800ff12 <_fflush_r+0x1a>
 800ff0e:	f7fd f803 	bl	800cf18 <__sinit>
 800ff12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d0f3      	beq.n	800ff02 <_fflush_r+0xa>
 800ff1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ff1c:	07d0      	lsls	r0, r2, #31
 800ff1e:	d404      	bmi.n	800ff2a <_fflush_r+0x32>
 800ff20:	0599      	lsls	r1, r3, #22
 800ff22:	d402      	bmi.n	800ff2a <_fflush_r+0x32>
 800ff24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ff26:	f7fd fa12 	bl	800d34e <__retarget_lock_acquire_recursive>
 800ff2a:	4628      	mov	r0, r5
 800ff2c:	4621      	mov	r1, r4
 800ff2e:	f7ff ff5f 	bl	800fdf0 <__sflush_r>
 800ff32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ff34:	07da      	lsls	r2, r3, #31
 800ff36:	4605      	mov	r5, r0
 800ff38:	d4e4      	bmi.n	800ff04 <_fflush_r+0xc>
 800ff3a:	89a3      	ldrh	r3, [r4, #12]
 800ff3c:	059b      	lsls	r3, r3, #22
 800ff3e:	d4e1      	bmi.n	800ff04 <_fflush_r+0xc>
 800ff40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ff42:	f7fd fa05 	bl	800d350 <__retarget_lock_release_recursive>
 800ff46:	e7dd      	b.n	800ff04 <_fflush_r+0xc>

0800ff48 <fiprintf>:
 800ff48:	b40e      	push	{r1, r2, r3}
 800ff4a:	b503      	push	{r0, r1, lr}
 800ff4c:	4601      	mov	r1, r0
 800ff4e:	ab03      	add	r3, sp, #12
 800ff50:	4805      	ldr	r0, [pc, #20]	@ (800ff68 <fiprintf+0x20>)
 800ff52:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff56:	6800      	ldr	r0, [r0, #0]
 800ff58:	9301      	str	r3, [sp, #4]
 800ff5a:	f7ff fe31 	bl	800fbc0 <_vfiprintf_r>
 800ff5e:	b002      	add	sp, #8
 800ff60:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff64:	b003      	add	sp, #12
 800ff66:	4770      	bx	lr
 800ff68:	20000068 	.word	0x20000068

0800ff6c <__swhatbuf_r>:
 800ff6c:	b570      	push	{r4, r5, r6, lr}
 800ff6e:	460c      	mov	r4, r1
 800ff70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff74:	2900      	cmp	r1, #0
 800ff76:	b096      	sub	sp, #88	@ 0x58
 800ff78:	4615      	mov	r5, r2
 800ff7a:	461e      	mov	r6, r3
 800ff7c:	da0d      	bge.n	800ff9a <__swhatbuf_r+0x2e>
 800ff7e:	89a3      	ldrh	r3, [r4, #12]
 800ff80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ff84:	f04f 0100 	mov.w	r1, #0
 800ff88:	bf14      	ite	ne
 800ff8a:	2340      	movne	r3, #64	@ 0x40
 800ff8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ff90:	2000      	movs	r0, #0
 800ff92:	6031      	str	r1, [r6, #0]
 800ff94:	602b      	str	r3, [r5, #0]
 800ff96:	b016      	add	sp, #88	@ 0x58
 800ff98:	bd70      	pop	{r4, r5, r6, pc}
 800ff9a:	466a      	mov	r2, sp
 800ff9c:	f000 f874 	bl	8010088 <_fstat_r>
 800ffa0:	2800      	cmp	r0, #0
 800ffa2:	dbec      	blt.n	800ff7e <__swhatbuf_r+0x12>
 800ffa4:	9901      	ldr	r1, [sp, #4]
 800ffa6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ffaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ffae:	4259      	negs	r1, r3
 800ffb0:	4159      	adcs	r1, r3
 800ffb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ffb6:	e7eb      	b.n	800ff90 <__swhatbuf_r+0x24>

0800ffb8 <__smakebuf_r>:
 800ffb8:	898b      	ldrh	r3, [r1, #12]
 800ffba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ffbc:	079d      	lsls	r5, r3, #30
 800ffbe:	4606      	mov	r6, r0
 800ffc0:	460c      	mov	r4, r1
 800ffc2:	d507      	bpl.n	800ffd4 <__smakebuf_r+0x1c>
 800ffc4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ffc8:	6023      	str	r3, [r4, #0]
 800ffca:	6123      	str	r3, [r4, #16]
 800ffcc:	2301      	movs	r3, #1
 800ffce:	6163      	str	r3, [r4, #20]
 800ffd0:	b003      	add	sp, #12
 800ffd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffd4:	ab01      	add	r3, sp, #4
 800ffd6:	466a      	mov	r2, sp
 800ffd8:	f7ff ffc8 	bl	800ff6c <__swhatbuf_r>
 800ffdc:	9f00      	ldr	r7, [sp, #0]
 800ffde:	4605      	mov	r5, r0
 800ffe0:	4639      	mov	r1, r7
 800ffe2:	4630      	mov	r0, r6
 800ffe4:	f7fe f8a8 	bl	800e138 <_malloc_r>
 800ffe8:	b948      	cbnz	r0, 800fffe <__smakebuf_r+0x46>
 800ffea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffee:	059a      	lsls	r2, r3, #22
 800fff0:	d4ee      	bmi.n	800ffd0 <__smakebuf_r+0x18>
 800fff2:	f023 0303 	bic.w	r3, r3, #3
 800fff6:	f043 0302 	orr.w	r3, r3, #2
 800fffa:	81a3      	strh	r3, [r4, #12]
 800fffc:	e7e2      	b.n	800ffc4 <__smakebuf_r+0xc>
 800fffe:	89a3      	ldrh	r3, [r4, #12]
 8010000:	6020      	str	r0, [r4, #0]
 8010002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010006:	81a3      	strh	r3, [r4, #12]
 8010008:	9b01      	ldr	r3, [sp, #4]
 801000a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801000e:	b15b      	cbz	r3, 8010028 <__smakebuf_r+0x70>
 8010010:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010014:	4630      	mov	r0, r6
 8010016:	f000 f849 	bl	80100ac <_isatty_r>
 801001a:	b128      	cbz	r0, 8010028 <__smakebuf_r+0x70>
 801001c:	89a3      	ldrh	r3, [r4, #12]
 801001e:	f023 0303 	bic.w	r3, r3, #3
 8010022:	f043 0301 	orr.w	r3, r3, #1
 8010026:	81a3      	strh	r3, [r4, #12]
 8010028:	89a3      	ldrh	r3, [r4, #12]
 801002a:	431d      	orrs	r5, r3
 801002c:	81a5      	strh	r5, [r4, #12]
 801002e:	e7cf      	b.n	800ffd0 <__smakebuf_r+0x18>

08010030 <memmove>:
 8010030:	4288      	cmp	r0, r1
 8010032:	b510      	push	{r4, lr}
 8010034:	eb01 0402 	add.w	r4, r1, r2
 8010038:	d902      	bls.n	8010040 <memmove+0x10>
 801003a:	4284      	cmp	r4, r0
 801003c:	4623      	mov	r3, r4
 801003e:	d807      	bhi.n	8010050 <memmove+0x20>
 8010040:	1e43      	subs	r3, r0, #1
 8010042:	42a1      	cmp	r1, r4
 8010044:	d008      	beq.n	8010058 <memmove+0x28>
 8010046:	f811 2b01 	ldrb.w	r2, [r1], #1
 801004a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801004e:	e7f8      	b.n	8010042 <memmove+0x12>
 8010050:	4402      	add	r2, r0
 8010052:	4601      	mov	r1, r0
 8010054:	428a      	cmp	r2, r1
 8010056:	d100      	bne.n	801005a <memmove+0x2a>
 8010058:	bd10      	pop	{r4, pc}
 801005a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801005e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010062:	e7f7      	b.n	8010054 <memmove+0x24>

08010064 <strncmp>:
 8010064:	b510      	push	{r4, lr}
 8010066:	b16a      	cbz	r2, 8010084 <strncmp+0x20>
 8010068:	3901      	subs	r1, #1
 801006a:	1884      	adds	r4, r0, r2
 801006c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010070:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010074:	429a      	cmp	r2, r3
 8010076:	d103      	bne.n	8010080 <strncmp+0x1c>
 8010078:	42a0      	cmp	r0, r4
 801007a:	d001      	beq.n	8010080 <strncmp+0x1c>
 801007c:	2a00      	cmp	r2, #0
 801007e:	d1f5      	bne.n	801006c <strncmp+0x8>
 8010080:	1ad0      	subs	r0, r2, r3
 8010082:	bd10      	pop	{r4, pc}
 8010084:	4610      	mov	r0, r2
 8010086:	e7fc      	b.n	8010082 <strncmp+0x1e>

08010088 <_fstat_r>:
 8010088:	b538      	push	{r3, r4, r5, lr}
 801008a:	4d07      	ldr	r5, [pc, #28]	@ (80100a8 <_fstat_r+0x20>)
 801008c:	2300      	movs	r3, #0
 801008e:	4604      	mov	r4, r0
 8010090:	4608      	mov	r0, r1
 8010092:	4611      	mov	r1, r2
 8010094:	602b      	str	r3, [r5, #0]
 8010096:	f7f2 fcb7 	bl	8002a08 <_fstat>
 801009a:	1c43      	adds	r3, r0, #1
 801009c:	d102      	bne.n	80100a4 <_fstat_r+0x1c>
 801009e:	682b      	ldr	r3, [r5, #0]
 80100a0:	b103      	cbz	r3, 80100a4 <_fstat_r+0x1c>
 80100a2:	6023      	str	r3, [r4, #0]
 80100a4:	bd38      	pop	{r3, r4, r5, pc}
 80100a6:	bf00      	nop
 80100a8:	20003954 	.word	0x20003954

080100ac <_isatty_r>:
 80100ac:	b538      	push	{r3, r4, r5, lr}
 80100ae:	4d06      	ldr	r5, [pc, #24]	@ (80100c8 <_isatty_r+0x1c>)
 80100b0:	2300      	movs	r3, #0
 80100b2:	4604      	mov	r4, r0
 80100b4:	4608      	mov	r0, r1
 80100b6:	602b      	str	r3, [r5, #0]
 80100b8:	f7f2 fcb6 	bl	8002a28 <_isatty>
 80100bc:	1c43      	adds	r3, r0, #1
 80100be:	d102      	bne.n	80100c6 <_isatty_r+0x1a>
 80100c0:	682b      	ldr	r3, [r5, #0]
 80100c2:	b103      	cbz	r3, 80100c6 <_isatty_r+0x1a>
 80100c4:	6023      	str	r3, [r4, #0]
 80100c6:	bd38      	pop	{r3, r4, r5, pc}
 80100c8:	20003954 	.word	0x20003954

080100cc <_sbrk_r>:
 80100cc:	b538      	push	{r3, r4, r5, lr}
 80100ce:	4d06      	ldr	r5, [pc, #24]	@ (80100e8 <_sbrk_r+0x1c>)
 80100d0:	2300      	movs	r3, #0
 80100d2:	4604      	mov	r4, r0
 80100d4:	4608      	mov	r0, r1
 80100d6:	602b      	str	r3, [r5, #0]
 80100d8:	f7f2 fcbe 	bl	8002a58 <_sbrk>
 80100dc:	1c43      	adds	r3, r0, #1
 80100de:	d102      	bne.n	80100e6 <_sbrk_r+0x1a>
 80100e0:	682b      	ldr	r3, [r5, #0]
 80100e2:	b103      	cbz	r3, 80100e6 <_sbrk_r+0x1a>
 80100e4:	6023      	str	r3, [r4, #0]
 80100e6:	bd38      	pop	{r3, r4, r5, pc}
 80100e8:	20003954 	.word	0x20003954
 80100ec:	00000000 	.word	0x00000000

080100f0 <nan>:
 80100f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80100f8 <nan+0x8>
 80100f4:	4770      	bx	lr
 80100f6:	bf00      	nop
 80100f8:	00000000 	.word	0x00000000
 80100fc:	7ff80000 	.word	0x7ff80000

08010100 <abort>:
 8010100:	b508      	push	{r3, lr}
 8010102:	2006      	movs	r0, #6
 8010104:	f000 fbc4 	bl	8010890 <raise>
 8010108:	2001      	movs	r0, #1
 801010a:	f7f2 fc2d 	bl	8002968 <_exit>

0801010e <_calloc_r>:
 801010e:	b570      	push	{r4, r5, r6, lr}
 8010110:	fba1 5402 	umull	r5, r4, r1, r2
 8010114:	b93c      	cbnz	r4, 8010126 <_calloc_r+0x18>
 8010116:	4629      	mov	r1, r5
 8010118:	f7fe f80e 	bl	800e138 <_malloc_r>
 801011c:	4606      	mov	r6, r0
 801011e:	b928      	cbnz	r0, 801012c <_calloc_r+0x1e>
 8010120:	2600      	movs	r6, #0
 8010122:	4630      	mov	r0, r6
 8010124:	bd70      	pop	{r4, r5, r6, pc}
 8010126:	220c      	movs	r2, #12
 8010128:	6002      	str	r2, [r0, #0]
 801012a:	e7f9      	b.n	8010120 <_calloc_r+0x12>
 801012c:	462a      	mov	r2, r5
 801012e:	4621      	mov	r1, r4
 8010130:	f7fd f890 	bl	800d254 <memset>
 8010134:	e7f5      	b.n	8010122 <_calloc_r+0x14>

08010136 <rshift>:
 8010136:	6903      	ldr	r3, [r0, #16]
 8010138:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801013c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010140:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010144:	f100 0414 	add.w	r4, r0, #20
 8010148:	dd45      	ble.n	80101d6 <rshift+0xa0>
 801014a:	f011 011f 	ands.w	r1, r1, #31
 801014e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010152:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010156:	d10c      	bne.n	8010172 <rshift+0x3c>
 8010158:	f100 0710 	add.w	r7, r0, #16
 801015c:	4629      	mov	r1, r5
 801015e:	42b1      	cmp	r1, r6
 8010160:	d334      	bcc.n	80101cc <rshift+0x96>
 8010162:	1a9b      	subs	r3, r3, r2
 8010164:	009b      	lsls	r3, r3, #2
 8010166:	1eea      	subs	r2, r5, #3
 8010168:	4296      	cmp	r6, r2
 801016a:	bf38      	it	cc
 801016c:	2300      	movcc	r3, #0
 801016e:	4423      	add	r3, r4
 8010170:	e015      	b.n	801019e <rshift+0x68>
 8010172:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010176:	f1c1 0820 	rsb	r8, r1, #32
 801017a:	40cf      	lsrs	r7, r1
 801017c:	f105 0e04 	add.w	lr, r5, #4
 8010180:	46a1      	mov	r9, r4
 8010182:	4576      	cmp	r6, lr
 8010184:	46f4      	mov	ip, lr
 8010186:	d815      	bhi.n	80101b4 <rshift+0x7e>
 8010188:	1a9a      	subs	r2, r3, r2
 801018a:	0092      	lsls	r2, r2, #2
 801018c:	3a04      	subs	r2, #4
 801018e:	3501      	adds	r5, #1
 8010190:	42ae      	cmp	r6, r5
 8010192:	bf38      	it	cc
 8010194:	2200      	movcc	r2, #0
 8010196:	18a3      	adds	r3, r4, r2
 8010198:	50a7      	str	r7, [r4, r2]
 801019a:	b107      	cbz	r7, 801019e <rshift+0x68>
 801019c:	3304      	adds	r3, #4
 801019e:	1b1a      	subs	r2, r3, r4
 80101a0:	42a3      	cmp	r3, r4
 80101a2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80101a6:	bf08      	it	eq
 80101a8:	2300      	moveq	r3, #0
 80101aa:	6102      	str	r2, [r0, #16]
 80101ac:	bf08      	it	eq
 80101ae:	6143      	streq	r3, [r0, #20]
 80101b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101b4:	f8dc c000 	ldr.w	ip, [ip]
 80101b8:	fa0c fc08 	lsl.w	ip, ip, r8
 80101bc:	ea4c 0707 	orr.w	r7, ip, r7
 80101c0:	f849 7b04 	str.w	r7, [r9], #4
 80101c4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80101c8:	40cf      	lsrs	r7, r1
 80101ca:	e7da      	b.n	8010182 <rshift+0x4c>
 80101cc:	f851 cb04 	ldr.w	ip, [r1], #4
 80101d0:	f847 cf04 	str.w	ip, [r7, #4]!
 80101d4:	e7c3      	b.n	801015e <rshift+0x28>
 80101d6:	4623      	mov	r3, r4
 80101d8:	e7e1      	b.n	801019e <rshift+0x68>

080101da <__hexdig_fun>:
 80101da:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80101de:	2b09      	cmp	r3, #9
 80101e0:	d802      	bhi.n	80101e8 <__hexdig_fun+0xe>
 80101e2:	3820      	subs	r0, #32
 80101e4:	b2c0      	uxtb	r0, r0
 80101e6:	4770      	bx	lr
 80101e8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80101ec:	2b05      	cmp	r3, #5
 80101ee:	d801      	bhi.n	80101f4 <__hexdig_fun+0x1a>
 80101f0:	3847      	subs	r0, #71	@ 0x47
 80101f2:	e7f7      	b.n	80101e4 <__hexdig_fun+0xa>
 80101f4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80101f8:	2b05      	cmp	r3, #5
 80101fa:	d801      	bhi.n	8010200 <__hexdig_fun+0x26>
 80101fc:	3827      	subs	r0, #39	@ 0x27
 80101fe:	e7f1      	b.n	80101e4 <__hexdig_fun+0xa>
 8010200:	2000      	movs	r0, #0
 8010202:	4770      	bx	lr

08010204 <__gethex>:
 8010204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010208:	b085      	sub	sp, #20
 801020a:	468a      	mov	sl, r1
 801020c:	9302      	str	r3, [sp, #8]
 801020e:	680b      	ldr	r3, [r1, #0]
 8010210:	9001      	str	r0, [sp, #4]
 8010212:	4690      	mov	r8, r2
 8010214:	1c9c      	adds	r4, r3, #2
 8010216:	46a1      	mov	r9, r4
 8010218:	f814 0b01 	ldrb.w	r0, [r4], #1
 801021c:	2830      	cmp	r0, #48	@ 0x30
 801021e:	d0fa      	beq.n	8010216 <__gethex+0x12>
 8010220:	eba9 0303 	sub.w	r3, r9, r3
 8010224:	f1a3 0b02 	sub.w	fp, r3, #2
 8010228:	f7ff ffd7 	bl	80101da <__hexdig_fun>
 801022c:	4605      	mov	r5, r0
 801022e:	2800      	cmp	r0, #0
 8010230:	d168      	bne.n	8010304 <__gethex+0x100>
 8010232:	49a0      	ldr	r1, [pc, #640]	@ (80104b4 <__gethex+0x2b0>)
 8010234:	2201      	movs	r2, #1
 8010236:	4648      	mov	r0, r9
 8010238:	f7ff ff14 	bl	8010064 <strncmp>
 801023c:	4607      	mov	r7, r0
 801023e:	2800      	cmp	r0, #0
 8010240:	d167      	bne.n	8010312 <__gethex+0x10e>
 8010242:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010246:	4626      	mov	r6, r4
 8010248:	f7ff ffc7 	bl	80101da <__hexdig_fun>
 801024c:	2800      	cmp	r0, #0
 801024e:	d062      	beq.n	8010316 <__gethex+0x112>
 8010250:	4623      	mov	r3, r4
 8010252:	7818      	ldrb	r0, [r3, #0]
 8010254:	2830      	cmp	r0, #48	@ 0x30
 8010256:	4699      	mov	r9, r3
 8010258:	f103 0301 	add.w	r3, r3, #1
 801025c:	d0f9      	beq.n	8010252 <__gethex+0x4e>
 801025e:	f7ff ffbc 	bl	80101da <__hexdig_fun>
 8010262:	fab0 f580 	clz	r5, r0
 8010266:	096d      	lsrs	r5, r5, #5
 8010268:	f04f 0b01 	mov.w	fp, #1
 801026c:	464a      	mov	r2, r9
 801026e:	4616      	mov	r6, r2
 8010270:	3201      	adds	r2, #1
 8010272:	7830      	ldrb	r0, [r6, #0]
 8010274:	f7ff ffb1 	bl	80101da <__hexdig_fun>
 8010278:	2800      	cmp	r0, #0
 801027a:	d1f8      	bne.n	801026e <__gethex+0x6a>
 801027c:	498d      	ldr	r1, [pc, #564]	@ (80104b4 <__gethex+0x2b0>)
 801027e:	2201      	movs	r2, #1
 8010280:	4630      	mov	r0, r6
 8010282:	f7ff feef 	bl	8010064 <strncmp>
 8010286:	2800      	cmp	r0, #0
 8010288:	d13f      	bne.n	801030a <__gethex+0x106>
 801028a:	b944      	cbnz	r4, 801029e <__gethex+0x9a>
 801028c:	1c74      	adds	r4, r6, #1
 801028e:	4622      	mov	r2, r4
 8010290:	4616      	mov	r6, r2
 8010292:	3201      	adds	r2, #1
 8010294:	7830      	ldrb	r0, [r6, #0]
 8010296:	f7ff ffa0 	bl	80101da <__hexdig_fun>
 801029a:	2800      	cmp	r0, #0
 801029c:	d1f8      	bne.n	8010290 <__gethex+0x8c>
 801029e:	1ba4      	subs	r4, r4, r6
 80102a0:	00a7      	lsls	r7, r4, #2
 80102a2:	7833      	ldrb	r3, [r6, #0]
 80102a4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80102a8:	2b50      	cmp	r3, #80	@ 0x50
 80102aa:	d13e      	bne.n	801032a <__gethex+0x126>
 80102ac:	7873      	ldrb	r3, [r6, #1]
 80102ae:	2b2b      	cmp	r3, #43	@ 0x2b
 80102b0:	d033      	beq.n	801031a <__gethex+0x116>
 80102b2:	2b2d      	cmp	r3, #45	@ 0x2d
 80102b4:	d034      	beq.n	8010320 <__gethex+0x11c>
 80102b6:	1c71      	adds	r1, r6, #1
 80102b8:	2400      	movs	r4, #0
 80102ba:	7808      	ldrb	r0, [r1, #0]
 80102bc:	f7ff ff8d 	bl	80101da <__hexdig_fun>
 80102c0:	1e43      	subs	r3, r0, #1
 80102c2:	b2db      	uxtb	r3, r3
 80102c4:	2b18      	cmp	r3, #24
 80102c6:	d830      	bhi.n	801032a <__gethex+0x126>
 80102c8:	f1a0 0210 	sub.w	r2, r0, #16
 80102cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80102d0:	f7ff ff83 	bl	80101da <__hexdig_fun>
 80102d4:	f100 3cff 	add.w	ip, r0, #4294967295
 80102d8:	fa5f fc8c 	uxtb.w	ip, ip
 80102dc:	f1bc 0f18 	cmp.w	ip, #24
 80102e0:	f04f 030a 	mov.w	r3, #10
 80102e4:	d91e      	bls.n	8010324 <__gethex+0x120>
 80102e6:	b104      	cbz	r4, 80102ea <__gethex+0xe6>
 80102e8:	4252      	negs	r2, r2
 80102ea:	4417      	add	r7, r2
 80102ec:	f8ca 1000 	str.w	r1, [sl]
 80102f0:	b1ed      	cbz	r5, 801032e <__gethex+0x12a>
 80102f2:	f1bb 0f00 	cmp.w	fp, #0
 80102f6:	bf0c      	ite	eq
 80102f8:	2506      	moveq	r5, #6
 80102fa:	2500      	movne	r5, #0
 80102fc:	4628      	mov	r0, r5
 80102fe:	b005      	add	sp, #20
 8010300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010304:	2500      	movs	r5, #0
 8010306:	462c      	mov	r4, r5
 8010308:	e7b0      	b.n	801026c <__gethex+0x68>
 801030a:	2c00      	cmp	r4, #0
 801030c:	d1c7      	bne.n	801029e <__gethex+0x9a>
 801030e:	4627      	mov	r7, r4
 8010310:	e7c7      	b.n	80102a2 <__gethex+0x9e>
 8010312:	464e      	mov	r6, r9
 8010314:	462f      	mov	r7, r5
 8010316:	2501      	movs	r5, #1
 8010318:	e7c3      	b.n	80102a2 <__gethex+0x9e>
 801031a:	2400      	movs	r4, #0
 801031c:	1cb1      	adds	r1, r6, #2
 801031e:	e7cc      	b.n	80102ba <__gethex+0xb6>
 8010320:	2401      	movs	r4, #1
 8010322:	e7fb      	b.n	801031c <__gethex+0x118>
 8010324:	fb03 0002 	mla	r0, r3, r2, r0
 8010328:	e7ce      	b.n	80102c8 <__gethex+0xc4>
 801032a:	4631      	mov	r1, r6
 801032c:	e7de      	b.n	80102ec <__gethex+0xe8>
 801032e:	eba6 0309 	sub.w	r3, r6, r9
 8010332:	3b01      	subs	r3, #1
 8010334:	4629      	mov	r1, r5
 8010336:	2b07      	cmp	r3, #7
 8010338:	dc0a      	bgt.n	8010350 <__gethex+0x14c>
 801033a:	9801      	ldr	r0, [sp, #4]
 801033c:	f7fd ff88 	bl	800e250 <_Balloc>
 8010340:	4604      	mov	r4, r0
 8010342:	b940      	cbnz	r0, 8010356 <__gethex+0x152>
 8010344:	4b5c      	ldr	r3, [pc, #368]	@ (80104b8 <__gethex+0x2b4>)
 8010346:	4602      	mov	r2, r0
 8010348:	21e4      	movs	r1, #228	@ 0xe4
 801034a:	485c      	ldr	r0, [pc, #368]	@ (80104bc <__gethex+0x2b8>)
 801034c:	f7fd f816 	bl	800d37c <__assert_func>
 8010350:	3101      	adds	r1, #1
 8010352:	105b      	asrs	r3, r3, #1
 8010354:	e7ef      	b.n	8010336 <__gethex+0x132>
 8010356:	f100 0a14 	add.w	sl, r0, #20
 801035a:	2300      	movs	r3, #0
 801035c:	4655      	mov	r5, sl
 801035e:	469b      	mov	fp, r3
 8010360:	45b1      	cmp	r9, r6
 8010362:	d337      	bcc.n	80103d4 <__gethex+0x1d0>
 8010364:	f845 bb04 	str.w	fp, [r5], #4
 8010368:	eba5 050a 	sub.w	r5, r5, sl
 801036c:	10ad      	asrs	r5, r5, #2
 801036e:	6125      	str	r5, [r4, #16]
 8010370:	4658      	mov	r0, fp
 8010372:	f7fe f85f 	bl	800e434 <__hi0bits>
 8010376:	016d      	lsls	r5, r5, #5
 8010378:	f8d8 6000 	ldr.w	r6, [r8]
 801037c:	1a2d      	subs	r5, r5, r0
 801037e:	42b5      	cmp	r5, r6
 8010380:	dd54      	ble.n	801042c <__gethex+0x228>
 8010382:	1bad      	subs	r5, r5, r6
 8010384:	4629      	mov	r1, r5
 8010386:	4620      	mov	r0, r4
 8010388:	f7fe fbf3 	bl	800eb72 <__any_on>
 801038c:	4681      	mov	r9, r0
 801038e:	b178      	cbz	r0, 80103b0 <__gethex+0x1ac>
 8010390:	1e6b      	subs	r3, r5, #1
 8010392:	1159      	asrs	r1, r3, #5
 8010394:	f003 021f 	and.w	r2, r3, #31
 8010398:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801039c:	f04f 0901 	mov.w	r9, #1
 80103a0:	fa09 f202 	lsl.w	r2, r9, r2
 80103a4:	420a      	tst	r2, r1
 80103a6:	d003      	beq.n	80103b0 <__gethex+0x1ac>
 80103a8:	454b      	cmp	r3, r9
 80103aa:	dc36      	bgt.n	801041a <__gethex+0x216>
 80103ac:	f04f 0902 	mov.w	r9, #2
 80103b0:	4629      	mov	r1, r5
 80103b2:	4620      	mov	r0, r4
 80103b4:	f7ff febf 	bl	8010136 <rshift>
 80103b8:	442f      	add	r7, r5
 80103ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80103be:	42bb      	cmp	r3, r7
 80103c0:	da42      	bge.n	8010448 <__gethex+0x244>
 80103c2:	9801      	ldr	r0, [sp, #4]
 80103c4:	4621      	mov	r1, r4
 80103c6:	f7fd ff83 	bl	800e2d0 <_Bfree>
 80103ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80103cc:	2300      	movs	r3, #0
 80103ce:	6013      	str	r3, [r2, #0]
 80103d0:	25a3      	movs	r5, #163	@ 0xa3
 80103d2:	e793      	b.n	80102fc <__gethex+0xf8>
 80103d4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80103d8:	2a2e      	cmp	r2, #46	@ 0x2e
 80103da:	d012      	beq.n	8010402 <__gethex+0x1fe>
 80103dc:	2b20      	cmp	r3, #32
 80103de:	d104      	bne.n	80103ea <__gethex+0x1e6>
 80103e0:	f845 bb04 	str.w	fp, [r5], #4
 80103e4:	f04f 0b00 	mov.w	fp, #0
 80103e8:	465b      	mov	r3, fp
 80103ea:	7830      	ldrb	r0, [r6, #0]
 80103ec:	9303      	str	r3, [sp, #12]
 80103ee:	f7ff fef4 	bl	80101da <__hexdig_fun>
 80103f2:	9b03      	ldr	r3, [sp, #12]
 80103f4:	f000 000f 	and.w	r0, r0, #15
 80103f8:	4098      	lsls	r0, r3
 80103fa:	ea4b 0b00 	orr.w	fp, fp, r0
 80103fe:	3304      	adds	r3, #4
 8010400:	e7ae      	b.n	8010360 <__gethex+0x15c>
 8010402:	45b1      	cmp	r9, r6
 8010404:	d8ea      	bhi.n	80103dc <__gethex+0x1d8>
 8010406:	492b      	ldr	r1, [pc, #172]	@ (80104b4 <__gethex+0x2b0>)
 8010408:	9303      	str	r3, [sp, #12]
 801040a:	2201      	movs	r2, #1
 801040c:	4630      	mov	r0, r6
 801040e:	f7ff fe29 	bl	8010064 <strncmp>
 8010412:	9b03      	ldr	r3, [sp, #12]
 8010414:	2800      	cmp	r0, #0
 8010416:	d1e1      	bne.n	80103dc <__gethex+0x1d8>
 8010418:	e7a2      	b.n	8010360 <__gethex+0x15c>
 801041a:	1ea9      	subs	r1, r5, #2
 801041c:	4620      	mov	r0, r4
 801041e:	f7fe fba8 	bl	800eb72 <__any_on>
 8010422:	2800      	cmp	r0, #0
 8010424:	d0c2      	beq.n	80103ac <__gethex+0x1a8>
 8010426:	f04f 0903 	mov.w	r9, #3
 801042a:	e7c1      	b.n	80103b0 <__gethex+0x1ac>
 801042c:	da09      	bge.n	8010442 <__gethex+0x23e>
 801042e:	1b75      	subs	r5, r6, r5
 8010430:	4621      	mov	r1, r4
 8010432:	9801      	ldr	r0, [sp, #4]
 8010434:	462a      	mov	r2, r5
 8010436:	f7fe f963 	bl	800e700 <__lshift>
 801043a:	1b7f      	subs	r7, r7, r5
 801043c:	4604      	mov	r4, r0
 801043e:	f100 0a14 	add.w	sl, r0, #20
 8010442:	f04f 0900 	mov.w	r9, #0
 8010446:	e7b8      	b.n	80103ba <__gethex+0x1b6>
 8010448:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801044c:	42bd      	cmp	r5, r7
 801044e:	dd6f      	ble.n	8010530 <__gethex+0x32c>
 8010450:	1bed      	subs	r5, r5, r7
 8010452:	42ae      	cmp	r6, r5
 8010454:	dc34      	bgt.n	80104c0 <__gethex+0x2bc>
 8010456:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801045a:	2b02      	cmp	r3, #2
 801045c:	d022      	beq.n	80104a4 <__gethex+0x2a0>
 801045e:	2b03      	cmp	r3, #3
 8010460:	d024      	beq.n	80104ac <__gethex+0x2a8>
 8010462:	2b01      	cmp	r3, #1
 8010464:	d115      	bne.n	8010492 <__gethex+0x28e>
 8010466:	42ae      	cmp	r6, r5
 8010468:	d113      	bne.n	8010492 <__gethex+0x28e>
 801046a:	2e01      	cmp	r6, #1
 801046c:	d10b      	bne.n	8010486 <__gethex+0x282>
 801046e:	9a02      	ldr	r2, [sp, #8]
 8010470:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010474:	6013      	str	r3, [r2, #0]
 8010476:	2301      	movs	r3, #1
 8010478:	6123      	str	r3, [r4, #16]
 801047a:	f8ca 3000 	str.w	r3, [sl]
 801047e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010480:	2562      	movs	r5, #98	@ 0x62
 8010482:	601c      	str	r4, [r3, #0]
 8010484:	e73a      	b.n	80102fc <__gethex+0xf8>
 8010486:	1e71      	subs	r1, r6, #1
 8010488:	4620      	mov	r0, r4
 801048a:	f7fe fb72 	bl	800eb72 <__any_on>
 801048e:	2800      	cmp	r0, #0
 8010490:	d1ed      	bne.n	801046e <__gethex+0x26a>
 8010492:	9801      	ldr	r0, [sp, #4]
 8010494:	4621      	mov	r1, r4
 8010496:	f7fd ff1b 	bl	800e2d0 <_Bfree>
 801049a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801049c:	2300      	movs	r3, #0
 801049e:	6013      	str	r3, [r2, #0]
 80104a0:	2550      	movs	r5, #80	@ 0x50
 80104a2:	e72b      	b.n	80102fc <__gethex+0xf8>
 80104a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d1f3      	bne.n	8010492 <__gethex+0x28e>
 80104aa:	e7e0      	b.n	801046e <__gethex+0x26a>
 80104ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d1dd      	bne.n	801046e <__gethex+0x26a>
 80104b2:	e7ee      	b.n	8010492 <__gethex+0x28e>
 80104b4:	08011050 	.word	0x08011050
 80104b8:	08010ee5 	.word	0x08010ee5
 80104bc:	080111c2 	.word	0x080111c2
 80104c0:	1e6f      	subs	r7, r5, #1
 80104c2:	f1b9 0f00 	cmp.w	r9, #0
 80104c6:	d130      	bne.n	801052a <__gethex+0x326>
 80104c8:	b127      	cbz	r7, 80104d4 <__gethex+0x2d0>
 80104ca:	4639      	mov	r1, r7
 80104cc:	4620      	mov	r0, r4
 80104ce:	f7fe fb50 	bl	800eb72 <__any_on>
 80104d2:	4681      	mov	r9, r0
 80104d4:	117a      	asrs	r2, r7, #5
 80104d6:	2301      	movs	r3, #1
 80104d8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80104dc:	f007 071f 	and.w	r7, r7, #31
 80104e0:	40bb      	lsls	r3, r7
 80104e2:	4213      	tst	r3, r2
 80104e4:	4629      	mov	r1, r5
 80104e6:	4620      	mov	r0, r4
 80104e8:	bf18      	it	ne
 80104ea:	f049 0902 	orrne.w	r9, r9, #2
 80104ee:	f7ff fe22 	bl	8010136 <rshift>
 80104f2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80104f6:	1b76      	subs	r6, r6, r5
 80104f8:	2502      	movs	r5, #2
 80104fa:	f1b9 0f00 	cmp.w	r9, #0
 80104fe:	d047      	beq.n	8010590 <__gethex+0x38c>
 8010500:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010504:	2b02      	cmp	r3, #2
 8010506:	d015      	beq.n	8010534 <__gethex+0x330>
 8010508:	2b03      	cmp	r3, #3
 801050a:	d017      	beq.n	801053c <__gethex+0x338>
 801050c:	2b01      	cmp	r3, #1
 801050e:	d109      	bne.n	8010524 <__gethex+0x320>
 8010510:	f019 0f02 	tst.w	r9, #2
 8010514:	d006      	beq.n	8010524 <__gethex+0x320>
 8010516:	f8da 3000 	ldr.w	r3, [sl]
 801051a:	ea49 0903 	orr.w	r9, r9, r3
 801051e:	f019 0f01 	tst.w	r9, #1
 8010522:	d10e      	bne.n	8010542 <__gethex+0x33e>
 8010524:	f045 0510 	orr.w	r5, r5, #16
 8010528:	e032      	b.n	8010590 <__gethex+0x38c>
 801052a:	f04f 0901 	mov.w	r9, #1
 801052e:	e7d1      	b.n	80104d4 <__gethex+0x2d0>
 8010530:	2501      	movs	r5, #1
 8010532:	e7e2      	b.n	80104fa <__gethex+0x2f6>
 8010534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010536:	f1c3 0301 	rsb	r3, r3, #1
 801053a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801053c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801053e:	2b00      	cmp	r3, #0
 8010540:	d0f0      	beq.n	8010524 <__gethex+0x320>
 8010542:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010546:	f104 0314 	add.w	r3, r4, #20
 801054a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801054e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010552:	f04f 0c00 	mov.w	ip, #0
 8010556:	4618      	mov	r0, r3
 8010558:	f853 2b04 	ldr.w	r2, [r3], #4
 801055c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010560:	d01b      	beq.n	801059a <__gethex+0x396>
 8010562:	3201      	adds	r2, #1
 8010564:	6002      	str	r2, [r0, #0]
 8010566:	2d02      	cmp	r5, #2
 8010568:	f104 0314 	add.w	r3, r4, #20
 801056c:	d13c      	bne.n	80105e8 <__gethex+0x3e4>
 801056e:	f8d8 2000 	ldr.w	r2, [r8]
 8010572:	3a01      	subs	r2, #1
 8010574:	42b2      	cmp	r2, r6
 8010576:	d109      	bne.n	801058c <__gethex+0x388>
 8010578:	1171      	asrs	r1, r6, #5
 801057a:	2201      	movs	r2, #1
 801057c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010580:	f006 061f 	and.w	r6, r6, #31
 8010584:	fa02 f606 	lsl.w	r6, r2, r6
 8010588:	421e      	tst	r6, r3
 801058a:	d13a      	bne.n	8010602 <__gethex+0x3fe>
 801058c:	f045 0520 	orr.w	r5, r5, #32
 8010590:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010592:	601c      	str	r4, [r3, #0]
 8010594:	9b02      	ldr	r3, [sp, #8]
 8010596:	601f      	str	r7, [r3, #0]
 8010598:	e6b0      	b.n	80102fc <__gethex+0xf8>
 801059a:	4299      	cmp	r1, r3
 801059c:	f843 cc04 	str.w	ip, [r3, #-4]
 80105a0:	d8d9      	bhi.n	8010556 <__gethex+0x352>
 80105a2:	68a3      	ldr	r3, [r4, #8]
 80105a4:	459b      	cmp	fp, r3
 80105a6:	db17      	blt.n	80105d8 <__gethex+0x3d4>
 80105a8:	6861      	ldr	r1, [r4, #4]
 80105aa:	9801      	ldr	r0, [sp, #4]
 80105ac:	3101      	adds	r1, #1
 80105ae:	f7fd fe4f 	bl	800e250 <_Balloc>
 80105b2:	4681      	mov	r9, r0
 80105b4:	b918      	cbnz	r0, 80105be <__gethex+0x3ba>
 80105b6:	4b1a      	ldr	r3, [pc, #104]	@ (8010620 <__gethex+0x41c>)
 80105b8:	4602      	mov	r2, r0
 80105ba:	2184      	movs	r1, #132	@ 0x84
 80105bc:	e6c5      	b.n	801034a <__gethex+0x146>
 80105be:	6922      	ldr	r2, [r4, #16]
 80105c0:	3202      	adds	r2, #2
 80105c2:	f104 010c 	add.w	r1, r4, #12
 80105c6:	0092      	lsls	r2, r2, #2
 80105c8:	300c      	adds	r0, #12
 80105ca:	f7fc fec2 	bl	800d352 <memcpy>
 80105ce:	4621      	mov	r1, r4
 80105d0:	9801      	ldr	r0, [sp, #4]
 80105d2:	f7fd fe7d 	bl	800e2d0 <_Bfree>
 80105d6:	464c      	mov	r4, r9
 80105d8:	6923      	ldr	r3, [r4, #16]
 80105da:	1c5a      	adds	r2, r3, #1
 80105dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80105e0:	6122      	str	r2, [r4, #16]
 80105e2:	2201      	movs	r2, #1
 80105e4:	615a      	str	r2, [r3, #20]
 80105e6:	e7be      	b.n	8010566 <__gethex+0x362>
 80105e8:	6922      	ldr	r2, [r4, #16]
 80105ea:	455a      	cmp	r2, fp
 80105ec:	dd0b      	ble.n	8010606 <__gethex+0x402>
 80105ee:	2101      	movs	r1, #1
 80105f0:	4620      	mov	r0, r4
 80105f2:	f7ff fda0 	bl	8010136 <rshift>
 80105f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80105fa:	3701      	adds	r7, #1
 80105fc:	42bb      	cmp	r3, r7
 80105fe:	f6ff aee0 	blt.w	80103c2 <__gethex+0x1be>
 8010602:	2501      	movs	r5, #1
 8010604:	e7c2      	b.n	801058c <__gethex+0x388>
 8010606:	f016 061f 	ands.w	r6, r6, #31
 801060a:	d0fa      	beq.n	8010602 <__gethex+0x3fe>
 801060c:	4453      	add	r3, sl
 801060e:	f1c6 0620 	rsb	r6, r6, #32
 8010612:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010616:	f7fd ff0d 	bl	800e434 <__hi0bits>
 801061a:	42b0      	cmp	r0, r6
 801061c:	dbe7      	blt.n	80105ee <__gethex+0x3ea>
 801061e:	e7f0      	b.n	8010602 <__gethex+0x3fe>
 8010620:	08010ee5 	.word	0x08010ee5

08010624 <L_shift>:
 8010624:	f1c2 0208 	rsb	r2, r2, #8
 8010628:	0092      	lsls	r2, r2, #2
 801062a:	b570      	push	{r4, r5, r6, lr}
 801062c:	f1c2 0620 	rsb	r6, r2, #32
 8010630:	6843      	ldr	r3, [r0, #4]
 8010632:	6804      	ldr	r4, [r0, #0]
 8010634:	fa03 f506 	lsl.w	r5, r3, r6
 8010638:	432c      	orrs	r4, r5
 801063a:	40d3      	lsrs	r3, r2
 801063c:	6004      	str	r4, [r0, #0]
 801063e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010642:	4288      	cmp	r0, r1
 8010644:	d3f4      	bcc.n	8010630 <L_shift+0xc>
 8010646:	bd70      	pop	{r4, r5, r6, pc}

08010648 <__match>:
 8010648:	b530      	push	{r4, r5, lr}
 801064a:	6803      	ldr	r3, [r0, #0]
 801064c:	3301      	adds	r3, #1
 801064e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010652:	b914      	cbnz	r4, 801065a <__match+0x12>
 8010654:	6003      	str	r3, [r0, #0]
 8010656:	2001      	movs	r0, #1
 8010658:	bd30      	pop	{r4, r5, pc}
 801065a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801065e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010662:	2d19      	cmp	r5, #25
 8010664:	bf98      	it	ls
 8010666:	3220      	addls	r2, #32
 8010668:	42a2      	cmp	r2, r4
 801066a:	d0f0      	beq.n	801064e <__match+0x6>
 801066c:	2000      	movs	r0, #0
 801066e:	e7f3      	b.n	8010658 <__match+0x10>

08010670 <__hexnan>:
 8010670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010674:	680b      	ldr	r3, [r1, #0]
 8010676:	6801      	ldr	r1, [r0, #0]
 8010678:	115e      	asrs	r6, r3, #5
 801067a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801067e:	f013 031f 	ands.w	r3, r3, #31
 8010682:	b087      	sub	sp, #28
 8010684:	bf18      	it	ne
 8010686:	3604      	addne	r6, #4
 8010688:	2500      	movs	r5, #0
 801068a:	1f37      	subs	r7, r6, #4
 801068c:	4682      	mov	sl, r0
 801068e:	4690      	mov	r8, r2
 8010690:	9301      	str	r3, [sp, #4]
 8010692:	f846 5c04 	str.w	r5, [r6, #-4]
 8010696:	46b9      	mov	r9, r7
 8010698:	463c      	mov	r4, r7
 801069a:	9502      	str	r5, [sp, #8]
 801069c:	46ab      	mov	fp, r5
 801069e:	784a      	ldrb	r2, [r1, #1]
 80106a0:	1c4b      	adds	r3, r1, #1
 80106a2:	9303      	str	r3, [sp, #12]
 80106a4:	b342      	cbz	r2, 80106f8 <__hexnan+0x88>
 80106a6:	4610      	mov	r0, r2
 80106a8:	9105      	str	r1, [sp, #20]
 80106aa:	9204      	str	r2, [sp, #16]
 80106ac:	f7ff fd95 	bl	80101da <__hexdig_fun>
 80106b0:	2800      	cmp	r0, #0
 80106b2:	d151      	bne.n	8010758 <__hexnan+0xe8>
 80106b4:	9a04      	ldr	r2, [sp, #16]
 80106b6:	9905      	ldr	r1, [sp, #20]
 80106b8:	2a20      	cmp	r2, #32
 80106ba:	d818      	bhi.n	80106ee <__hexnan+0x7e>
 80106bc:	9b02      	ldr	r3, [sp, #8]
 80106be:	459b      	cmp	fp, r3
 80106c0:	dd13      	ble.n	80106ea <__hexnan+0x7a>
 80106c2:	454c      	cmp	r4, r9
 80106c4:	d206      	bcs.n	80106d4 <__hexnan+0x64>
 80106c6:	2d07      	cmp	r5, #7
 80106c8:	dc04      	bgt.n	80106d4 <__hexnan+0x64>
 80106ca:	462a      	mov	r2, r5
 80106cc:	4649      	mov	r1, r9
 80106ce:	4620      	mov	r0, r4
 80106d0:	f7ff ffa8 	bl	8010624 <L_shift>
 80106d4:	4544      	cmp	r4, r8
 80106d6:	d952      	bls.n	801077e <__hexnan+0x10e>
 80106d8:	2300      	movs	r3, #0
 80106da:	f1a4 0904 	sub.w	r9, r4, #4
 80106de:	f844 3c04 	str.w	r3, [r4, #-4]
 80106e2:	f8cd b008 	str.w	fp, [sp, #8]
 80106e6:	464c      	mov	r4, r9
 80106e8:	461d      	mov	r5, r3
 80106ea:	9903      	ldr	r1, [sp, #12]
 80106ec:	e7d7      	b.n	801069e <__hexnan+0x2e>
 80106ee:	2a29      	cmp	r2, #41	@ 0x29
 80106f0:	d157      	bne.n	80107a2 <__hexnan+0x132>
 80106f2:	3102      	adds	r1, #2
 80106f4:	f8ca 1000 	str.w	r1, [sl]
 80106f8:	f1bb 0f00 	cmp.w	fp, #0
 80106fc:	d051      	beq.n	80107a2 <__hexnan+0x132>
 80106fe:	454c      	cmp	r4, r9
 8010700:	d206      	bcs.n	8010710 <__hexnan+0xa0>
 8010702:	2d07      	cmp	r5, #7
 8010704:	dc04      	bgt.n	8010710 <__hexnan+0xa0>
 8010706:	462a      	mov	r2, r5
 8010708:	4649      	mov	r1, r9
 801070a:	4620      	mov	r0, r4
 801070c:	f7ff ff8a 	bl	8010624 <L_shift>
 8010710:	4544      	cmp	r4, r8
 8010712:	d936      	bls.n	8010782 <__hexnan+0x112>
 8010714:	f1a8 0204 	sub.w	r2, r8, #4
 8010718:	4623      	mov	r3, r4
 801071a:	f853 1b04 	ldr.w	r1, [r3], #4
 801071e:	f842 1f04 	str.w	r1, [r2, #4]!
 8010722:	429f      	cmp	r7, r3
 8010724:	d2f9      	bcs.n	801071a <__hexnan+0xaa>
 8010726:	1b3b      	subs	r3, r7, r4
 8010728:	f023 0303 	bic.w	r3, r3, #3
 801072c:	3304      	adds	r3, #4
 801072e:	3401      	adds	r4, #1
 8010730:	3e03      	subs	r6, #3
 8010732:	42b4      	cmp	r4, r6
 8010734:	bf88      	it	hi
 8010736:	2304      	movhi	r3, #4
 8010738:	4443      	add	r3, r8
 801073a:	2200      	movs	r2, #0
 801073c:	f843 2b04 	str.w	r2, [r3], #4
 8010740:	429f      	cmp	r7, r3
 8010742:	d2fb      	bcs.n	801073c <__hexnan+0xcc>
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	b91b      	cbnz	r3, 8010750 <__hexnan+0xe0>
 8010748:	4547      	cmp	r7, r8
 801074a:	d128      	bne.n	801079e <__hexnan+0x12e>
 801074c:	2301      	movs	r3, #1
 801074e:	603b      	str	r3, [r7, #0]
 8010750:	2005      	movs	r0, #5
 8010752:	b007      	add	sp, #28
 8010754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010758:	3501      	adds	r5, #1
 801075a:	2d08      	cmp	r5, #8
 801075c:	f10b 0b01 	add.w	fp, fp, #1
 8010760:	dd06      	ble.n	8010770 <__hexnan+0x100>
 8010762:	4544      	cmp	r4, r8
 8010764:	d9c1      	bls.n	80106ea <__hexnan+0x7a>
 8010766:	2300      	movs	r3, #0
 8010768:	f844 3c04 	str.w	r3, [r4, #-4]
 801076c:	2501      	movs	r5, #1
 801076e:	3c04      	subs	r4, #4
 8010770:	6822      	ldr	r2, [r4, #0]
 8010772:	f000 000f 	and.w	r0, r0, #15
 8010776:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801077a:	6020      	str	r0, [r4, #0]
 801077c:	e7b5      	b.n	80106ea <__hexnan+0x7a>
 801077e:	2508      	movs	r5, #8
 8010780:	e7b3      	b.n	80106ea <__hexnan+0x7a>
 8010782:	9b01      	ldr	r3, [sp, #4]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d0dd      	beq.n	8010744 <__hexnan+0xd4>
 8010788:	f1c3 0320 	rsb	r3, r3, #32
 801078c:	f04f 32ff 	mov.w	r2, #4294967295
 8010790:	40da      	lsrs	r2, r3
 8010792:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010796:	4013      	ands	r3, r2
 8010798:	f846 3c04 	str.w	r3, [r6, #-4]
 801079c:	e7d2      	b.n	8010744 <__hexnan+0xd4>
 801079e:	3f04      	subs	r7, #4
 80107a0:	e7d0      	b.n	8010744 <__hexnan+0xd4>
 80107a2:	2004      	movs	r0, #4
 80107a4:	e7d5      	b.n	8010752 <__hexnan+0xe2>

080107a6 <__ascii_mbtowc>:
 80107a6:	b082      	sub	sp, #8
 80107a8:	b901      	cbnz	r1, 80107ac <__ascii_mbtowc+0x6>
 80107aa:	a901      	add	r1, sp, #4
 80107ac:	b142      	cbz	r2, 80107c0 <__ascii_mbtowc+0x1a>
 80107ae:	b14b      	cbz	r3, 80107c4 <__ascii_mbtowc+0x1e>
 80107b0:	7813      	ldrb	r3, [r2, #0]
 80107b2:	600b      	str	r3, [r1, #0]
 80107b4:	7812      	ldrb	r2, [r2, #0]
 80107b6:	1e10      	subs	r0, r2, #0
 80107b8:	bf18      	it	ne
 80107ba:	2001      	movne	r0, #1
 80107bc:	b002      	add	sp, #8
 80107be:	4770      	bx	lr
 80107c0:	4610      	mov	r0, r2
 80107c2:	e7fb      	b.n	80107bc <__ascii_mbtowc+0x16>
 80107c4:	f06f 0001 	mvn.w	r0, #1
 80107c8:	e7f8      	b.n	80107bc <__ascii_mbtowc+0x16>

080107ca <_realloc_r>:
 80107ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107ce:	4680      	mov	r8, r0
 80107d0:	4615      	mov	r5, r2
 80107d2:	460c      	mov	r4, r1
 80107d4:	b921      	cbnz	r1, 80107e0 <_realloc_r+0x16>
 80107d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107da:	4611      	mov	r1, r2
 80107dc:	f7fd bcac 	b.w	800e138 <_malloc_r>
 80107e0:	b92a      	cbnz	r2, 80107ee <_realloc_r+0x24>
 80107e2:	f7fd fc35 	bl	800e050 <_free_r>
 80107e6:	2400      	movs	r4, #0
 80107e8:	4620      	mov	r0, r4
 80107ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107ee:	f000 f86b 	bl	80108c8 <_malloc_usable_size_r>
 80107f2:	4285      	cmp	r5, r0
 80107f4:	4606      	mov	r6, r0
 80107f6:	d802      	bhi.n	80107fe <_realloc_r+0x34>
 80107f8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80107fc:	d8f4      	bhi.n	80107e8 <_realloc_r+0x1e>
 80107fe:	4629      	mov	r1, r5
 8010800:	4640      	mov	r0, r8
 8010802:	f7fd fc99 	bl	800e138 <_malloc_r>
 8010806:	4607      	mov	r7, r0
 8010808:	2800      	cmp	r0, #0
 801080a:	d0ec      	beq.n	80107e6 <_realloc_r+0x1c>
 801080c:	42b5      	cmp	r5, r6
 801080e:	462a      	mov	r2, r5
 8010810:	4621      	mov	r1, r4
 8010812:	bf28      	it	cs
 8010814:	4632      	movcs	r2, r6
 8010816:	f7fc fd9c 	bl	800d352 <memcpy>
 801081a:	4621      	mov	r1, r4
 801081c:	4640      	mov	r0, r8
 801081e:	f7fd fc17 	bl	800e050 <_free_r>
 8010822:	463c      	mov	r4, r7
 8010824:	e7e0      	b.n	80107e8 <_realloc_r+0x1e>

08010826 <__ascii_wctomb>:
 8010826:	4603      	mov	r3, r0
 8010828:	4608      	mov	r0, r1
 801082a:	b141      	cbz	r1, 801083e <__ascii_wctomb+0x18>
 801082c:	2aff      	cmp	r2, #255	@ 0xff
 801082e:	d904      	bls.n	801083a <__ascii_wctomb+0x14>
 8010830:	228a      	movs	r2, #138	@ 0x8a
 8010832:	601a      	str	r2, [r3, #0]
 8010834:	f04f 30ff 	mov.w	r0, #4294967295
 8010838:	4770      	bx	lr
 801083a:	700a      	strb	r2, [r1, #0]
 801083c:	2001      	movs	r0, #1
 801083e:	4770      	bx	lr

08010840 <_raise_r>:
 8010840:	291f      	cmp	r1, #31
 8010842:	b538      	push	{r3, r4, r5, lr}
 8010844:	4605      	mov	r5, r0
 8010846:	460c      	mov	r4, r1
 8010848:	d904      	bls.n	8010854 <_raise_r+0x14>
 801084a:	2316      	movs	r3, #22
 801084c:	6003      	str	r3, [r0, #0]
 801084e:	f04f 30ff 	mov.w	r0, #4294967295
 8010852:	bd38      	pop	{r3, r4, r5, pc}
 8010854:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010856:	b112      	cbz	r2, 801085e <_raise_r+0x1e>
 8010858:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801085c:	b94b      	cbnz	r3, 8010872 <_raise_r+0x32>
 801085e:	4628      	mov	r0, r5
 8010860:	f000 f830 	bl	80108c4 <_getpid_r>
 8010864:	4622      	mov	r2, r4
 8010866:	4601      	mov	r1, r0
 8010868:	4628      	mov	r0, r5
 801086a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801086e:	f000 b817 	b.w	80108a0 <_kill_r>
 8010872:	2b01      	cmp	r3, #1
 8010874:	d00a      	beq.n	801088c <_raise_r+0x4c>
 8010876:	1c59      	adds	r1, r3, #1
 8010878:	d103      	bne.n	8010882 <_raise_r+0x42>
 801087a:	2316      	movs	r3, #22
 801087c:	6003      	str	r3, [r0, #0]
 801087e:	2001      	movs	r0, #1
 8010880:	e7e7      	b.n	8010852 <_raise_r+0x12>
 8010882:	2100      	movs	r1, #0
 8010884:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010888:	4620      	mov	r0, r4
 801088a:	4798      	blx	r3
 801088c:	2000      	movs	r0, #0
 801088e:	e7e0      	b.n	8010852 <_raise_r+0x12>

08010890 <raise>:
 8010890:	4b02      	ldr	r3, [pc, #8]	@ (801089c <raise+0xc>)
 8010892:	4601      	mov	r1, r0
 8010894:	6818      	ldr	r0, [r3, #0]
 8010896:	f7ff bfd3 	b.w	8010840 <_raise_r>
 801089a:	bf00      	nop
 801089c:	20000068 	.word	0x20000068

080108a0 <_kill_r>:
 80108a0:	b538      	push	{r3, r4, r5, lr}
 80108a2:	4d07      	ldr	r5, [pc, #28]	@ (80108c0 <_kill_r+0x20>)
 80108a4:	2300      	movs	r3, #0
 80108a6:	4604      	mov	r4, r0
 80108a8:	4608      	mov	r0, r1
 80108aa:	4611      	mov	r1, r2
 80108ac:	602b      	str	r3, [r5, #0]
 80108ae:	f7f2 f84b 	bl	8002948 <_kill>
 80108b2:	1c43      	adds	r3, r0, #1
 80108b4:	d102      	bne.n	80108bc <_kill_r+0x1c>
 80108b6:	682b      	ldr	r3, [r5, #0]
 80108b8:	b103      	cbz	r3, 80108bc <_kill_r+0x1c>
 80108ba:	6023      	str	r3, [r4, #0]
 80108bc:	bd38      	pop	{r3, r4, r5, pc}
 80108be:	bf00      	nop
 80108c0:	20003954 	.word	0x20003954

080108c4 <_getpid_r>:
 80108c4:	f7f2 b838 	b.w	8002938 <_getpid>

080108c8 <_malloc_usable_size_r>:
 80108c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108cc:	1f18      	subs	r0, r3, #4
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	bfbc      	itt	lt
 80108d2:	580b      	ldrlt	r3, [r1, r0]
 80108d4:	18c0      	addlt	r0, r0, r3
 80108d6:	4770      	bx	lr

080108d8 <_init>:
 80108d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108da:	bf00      	nop
 80108dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108de:	bc08      	pop	{r3}
 80108e0:	469e      	mov	lr, r3
 80108e2:	4770      	bx	lr

080108e4 <_fini>:
 80108e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108e6:	bf00      	nop
 80108e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108ea:	bc08      	pop	{r3}
 80108ec:	469e      	mov	lr, r3
 80108ee:	4770      	bx	lr
