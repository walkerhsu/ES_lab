
ES_lab_HW1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009874  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08009a04  08009a04  0000aa04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ba8  08009ba8  0000b010  2**0
                  CONTENTS
  4 .ARM          00000008  08009ba8  08009ba8  0000aba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bb0  08009bb0  0000b010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bb0  08009bb0  0000abb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009bb4  08009bb4  0000abb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08009bb8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020e8  20000010  08009bc8  0000b010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020f8  08009bc8  0000b0f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026510  00000000  00000000  0000b040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004907  00000000  00000000  00031550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002310  00000000  00000000  00035e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b66  00000000  00000000  00038168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049f2  00000000  00000000  00039cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027a11  00000000  00000000  0003e6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001082f0  00000000  00000000  000660d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016e3c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009828  00000000  00000000  0016e404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00177c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080099ec 	.word	0x080099ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080099ec 	.word	0x080099ec

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f001 f8e9 	bl	800169a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f896 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 fa98 	bl	8000a00 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004d0:	f000 f8f4 	bl	80006bc <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004d4:	f000 f92a 	bl	800072c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004d8:	f000 f968 	bl	80007ac <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004dc:	f000 f98c 	bl	80007f8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004e0:	f000 fa00 	bl	80008e4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004e4:	f000 fa2e 	bl	8000944 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004e8:	f000 fa5c 	bl	80009a4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 80004ec:	f000 f9c2 	bl	8000874 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f004 ff8a 	bl	8005408 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MutexTask */
  MutexTaskHandle = osMutexNew(&MutexTask_attributes);
 80004f4:	4829      	ldr	r0, [pc, #164]	@ (800059c <main+0xdc>)
 80004f6:	f005 fa82 	bl	80059fe <osMutexNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a28      	ldr	r2, [pc, #160]	@ (80005a0 <main+0xe0>)
 80004fe:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySem01 */
  BinarySem01Handle = osSemaphoreNew(1, 0, &BinarySem01_attributes);
 8000500:	4a28      	ldr	r2, [pc, #160]	@ (80005a4 <main+0xe4>)
 8000502:	2100      	movs	r1, #0
 8000504:	2001      	movs	r0, #1
 8000506:	f005 fb88 	bl	8005c1a <osSemaphoreNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a26      	ldr	r2, [pc, #152]	@ (80005a8 <main+0xe8>)
 800050e:	6013      	str	r3, [r2, #0]

  /* creation of BinarySem02 */
  BinarySem02Handle = osSemaphoreNew(1, 1, &BinarySem02_attributes);
 8000510:	4a26      	ldr	r2, [pc, #152]	@ (80005ac <main+0xec>)
 8000512:	2101      	movs	r1, #1
 8000514:	2001      	movs	r0, #1
 8000516:	f005 fb80 	bl	8005c1a <osSemaphoreNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a24      	ldr	r2, [pc, #144]	@ (80005b0 <main+0xf0>)
 800051e:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of DefaultTimer */
  DefaultTimerHandle = osTimerNew(DefaultTimerCallback, osTimerPeriodic, NULL, &DefaultTimer_attributes);
 8000520:	4b24      	ldr	r3, [pc, #144]	@ (80005b4 <main+0xf4>)
 8000522:	2200      	movs	r2, #0
 8000524:	2101      	movs	r1, #1
 8000526:	4824      	ldr	r0, [pc, #144]	@ (80005b8 <main+0xf8>)
 8000528:	f005 f988 	bl	800583c <osTimerNew>
 800052c:	4603      	mov	r3, r0
 800052e:	4a23      	ldr	r2, [pc, #140]	@ (80005bc <main+0xfc>)
 8000530:	6013      	str	r3, [r2, #0]

  /* creation of ButtonTimer */
  ButtonTimerHandle = osTimerNew(TimerCallback, osTimerOnce, NULL, &ButtonTimer_attributes);
 8000532:	4b23      	ldr	r3, [pc, #140]	@ (80005c0 <main+0x100>)
 8000534:	2200      	movs	r2, #0
 8000536:	2100      	movs	r1, #0
 8000538:	4822      	ldr	r0, [pc, #136]	@ (80005c4 <main+0x104>)
 800053a:	f005 f97f 	bl	800583c <osTimerNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a21      	ldr	r2, [pc, #132]	@ (80005c8 <main+0x108>)
 8000542:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(DefaultTimerHandle, 10000U);
 8000544:	4b1d      	ldr	r3, [pc, #116]	@ (80005bc <main+0xfc>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f242 7110 	movw	r1, #10000	@ 0x2710
 800054c:	4618      	mov	r0, r3
 800054e:	f005 f9f1 	bl	8005934 <osTimerStart>
//  osTimerDelete(myTimer01Handle);
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of MessageQueue */
  MessageQueueHandle = osMessageQueueNew (1, sizeof(uint16_t), &MessageQueue_attributes);
 8000552:	4a1e      	ldr	r2, [pc, #120]	@ (80005cc <main+0x10c>)
 8000554:	2102      	movs	r1, #2
 8000556:	2001      	movs	r0, #1
 8000558:	f005 fc7e 	bl	8005e58 <osMessageQueueNew>
 800055c:	4603      	mov	r3, r0
 800055e:	4a1c      	ldr	r2, [pc, #112]	@ (80005d0 <main+0x110>)
 8000560:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ProcessTask1 */
  ProcessTask1Handle = osThreadNew(StartProcessTask1, NULL, &ProcessTask1_attributes);
 8000562:	4a1c      	ldr	r2, [pc, #112]	@ (80005d4 <main+0x114>)
 8000564:	2100      	movs	r1, #0
 8000566:	481c      	ldr	r0, [pc, #112]	@ (80005d8 <main+0x118>)
 8000568:	f004 ff98 	bl	800549c <osThreadNew>
 800056c:	4603      	mov	r3, r0
 800056e:	4a1b      	ldr	r2, [pc, #108]	@ (80005dc <main+0x11c>)
 8000570:	6013      	str	r3, [r2, #0]

  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000572:	4a1b      	ldr	r2, [pc, #108]	@ (80005e0 <main+0x120>)
 8000574:	2100      	movs	r1, #0
 8000576:	481b      	ldr	r0, [pc, #108]	@ (80005e4 <main+0x124>)
 8000578:	f004 ff90 	bl	800549c <osThreadNew>
 800057c:	4603      	mov	r3, r0
 800057e:	4a1a      	ldr	r2, [pc, #104]	@ (80005e8 <main+0x128>)
 8000580:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000582:	4a1a      	ldr	r2, [pc, #104]	@ (80005ec <main+0x12c>)
 8000584:	2100      	movs	r1, #0
 8000586:	481a      	ldr	r0, [pc, #104]	@ (80005f0 <main+0x130>)
 8000588:	f004 ff88 	bl	800549c <osThreadNew>
 800058c:	4603      	mov	r3, r0
 800058e:	4a19      	ldr	r2, [pc, #100]	@ (80005f4 <main+0x134>)
 8000590:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000592:	f004 ff5d 	bl	8005450 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000596:	bf00      	nop
 8000598:	e7fd      	b.n	8000596 <main+0xd6>
 800059a:	bf00      	nop
 800059c:	08009b30 	.word	0x08009b30
 80005a0:	200007b8 	.word	0x200007b8
 80005a4:	08009b40 	.word	0x08009b40
 80005a8:	200007bc 	.word	0x200007bc
 80005ac:	08009b50 	.word	0x08009b50
 80005b0:	200007c0 	.word	0x200007c0
 80005b4:	08009b10 	.word	0x08009b10
 80005b8:	08000f71 	.word	0x08000f71
 80005bc:	200007b0 	.word	0x200007b0
 80005c0:	08009b20 	.word	0x08009b20
 80005c4:	08000f91 	.word	0x08000f91
 80005c8:	200007b4 	.word	0x200007b4
 80005cc:	08009af8 	.word	0x08009af8
 80005d0:	200007ac 	.word	0x200007ac
 80005d4:	08009a8c 	.word	0x08009a8c
 80005d8:	08000db5 	.word	0x08000db5
 80005dc:	200007a0 	.word	0x200007a0
 80005e0:	08009ab0 	.word	0x08009ab0
 80005e4:	08000e31 	.word	0x08000e31
 80005e8:	200007a4 	.word	0x200007a4
 80005ec:	08009ad4 	.word	0x08009ad4
 80005f0:	08000ef9 	.word	0x08000ef9
 80005f4:	200007a8 	.word	0x200007a8

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b096      	sub	sp, #88	@ 0x58
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	2244      	movs	r2, #68	@ 0x44
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f009 f9b6 	bl	8009978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	463b      	mov	r3, r7
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800061e:	f001 ff83 	bl	8002528 <HAL_PWREx_ControlVoltageScaling>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000628:	f000 fcc2 	bl	8000fb0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800062c:	f001 ff5e 	bl	80024ec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000630:	4b21      	ldr	r3, [pc, #132]	@ (80006b8 <SystemClock_Config+0xc0>)
 8000632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000636:	4a20      	ldr	r2, [pc, #128]	@ (80006b8 <SystemClock_Config+0xc0>)
 8000638:	f023 0318 	bic.w	r3, r3, #24
 800063c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000640:	2314      	movs	r3, #20
 8000642:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000650:	2360      	movs	r3, #96	@ 0x60
 8000652:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000658:	2301      	movs	r3, #1
 800065a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800065c:	2301      	movs	r3, #1
 800065e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000660:	2328      	movs	r3, #40	@ 0x28
 8000662:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000664:	2307      	movs	r3, #7
 8000666:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4618      	mov	r0, r3
 8000676:	f002 f879 	bl	800276c <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000680:	f000 fc96 	bl	8000fb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2303      	movs	r3, #3
 800068a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000698:	463b      	mov	r3, r7
 800069a:	2104      	movs	r1, #4
 800069c:	4618      	mov	r0, r3
 800069e:	f002 fc41 	bl	8002f24 <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006a8:	f000 fc82 	bl	8000fb0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006ac:	f003 f948 	bl	8003940 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006b0:	bf00      	nop
 80006b2:	3758      	adds	r7, #88	@ 0x58
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000

080006bc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80006c0:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006c2:	4a19      	ldr	r2, [pc, #100]	@ (8000728 <MX_DFSDM1_Init+0x6c>)
 80006c4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80006c6:	4b17      	ldr	r3, [pc, #92]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006cc:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80006d2:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006d4:	2202      	movs	r2, #2
 80006d6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006de:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ea:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006f4:	2204      	movs	r2, #4
 80006f6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80006fe:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 8000700:	2201      	movs	r2, #1
 8000702:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000704:	4b07      	ldr	r3, [pc, #28]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 8000706:	2200      	movs	r2, #0
 8000708:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800070a:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 800070c:	2200      	movs	r2, #0
 800070e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 8000712:	f001 f96d 	bl	80019f0 <HAL_DFSDM_ChannelInit>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800071c:	f000 fc48 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	2000002c 	.word	0x2000002c
 8000728:	40016020 	.word	0x40016020

0800072c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000732:	4a1c      	ldr	r2, [pc, #112]	@ (80007a4 <MX_I2C2_Init+0x78>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000736:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000738:	4a1b      	ldr	r2, [pc, #108]	@ (80007a8 <MX_I2C2_Init+0x7c>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800073c:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <MX_I2C2_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000744:	2201      	movs	r2, #1
 8000746:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <MX_I2C2_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800074e:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_I2C2_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000760:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000766:	480e      	ldr	r0, [pc, #56]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000768:	f001 fc5a 	bl	8002020 <HAL_I2C_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000772:	f000 fc1d 	bl	8000fb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	4809      	ldr	r0, [pc, #36]	@ (80007a0 <MX_I2C2_Init+0x74>)
 800077a:	f001 fcec 	bl	8002156 <HAL_I2CEx_ConfigAnalogFilter>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000784:	f000 fc14 	bl	8000fb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000788:	2100      	movs	r1, #0
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_I2C2_Init+0x74>)
 800078c:	f001 fd2e 	bl	80021ec <HAL_I2CEx_ConfigDigitalFilter>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000796:	f000 fc0b 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000064 	.word	0x20000064
 80007a4:	40005800 	.word	0x40005800
 80007a8:	10d19ce4 	.word	0x10d19ce4

080007ac <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_QUADSPI_Init+0x44>)
 80007b2:	4a10      	ldr	r2, [pc, #64]	@ (80007f4 <MX_QUADSPI_Init+0x48>)
 80007b4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <MX_QUADSPI_Init+0x44>)
 80007b8:	2202      	movs	r2, #2
 80007ba:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_QUADSPI_Init+0x44>)
 80007be:	2204      	movs	r2, #4
 80007c0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <MX_QUADSPI_Init+0x44>)
 80007c4:	2210      	movs	r2, #16
 80007c6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80007c8:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_QUADSPI_Init+0x44>)
 80007ca:	2217      	movs	r2, #23
 80007cc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <MX_QUADSPI_Init+0x44>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007d4:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_QUADSPI_Init+0x44>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <MX_QUADSPI_Init+0x44>)
 80007dc:	f001 ff0a 	bl	80025f4 <HAL_QSPI_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80007e6:	f000 fbe3 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000b8 	.word	0x200000b8
 80007f4:	a0001000 	.word	0xa0001000

080007f8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <MX_SPI3_Init+0x74>)
 80007fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000870 <MX_SPI3_Init+0x78>)
 8000800:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000802:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <MX_SPI3_Init+0x74>)
 8000804:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000808:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800080a:	4b18      	ldr	r3, [pc, #96]	@ (800086c <MX_SPI3_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000810:	4b16      	ldr	r3, [pc, #88]	@ (800086c <MX_SPI3_Init+0x74>)
 8000812:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000816:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000818:	4b14      	ldr	r3, [pc, #80]	@ (800086c <MX_SPI3_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800081e:	4b13      	ldr	r3, [pc, #76]	@ (800086c <MX_SPI3_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000824:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_SPI3_Init+0x74>)
 8000826:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800082a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <MX_SPI3_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000832:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <MX_SPI3_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <MX_SPI3_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <MX_SPI3_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000844:	4b09      	ldr	r3, [pc, #36]	@ (800086c <MX_SPI3_Init+0x74>)
 8000846:	2207      	movs	r2, #7
 8000848:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800084a:	4b08      	ldr	r3, [pc, #32]	@ (800086c <MX_SPI3_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <MX_SPI3_Init+0x74>)
 8000852:	2208      	movs	r2, #8
 8000854:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_SPI3_Init+0x74>)
 8000858:	f003 fa54 	bl	8003d04 <HAL_SPI_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000862:	f000 fba5 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200000fc 	.word	0x200000fc
 8000870:	40003c00 	.word	0x40003c00

08000874 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000884:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <MX_TIM6_Init+0x68>)
 8000886:	4a16      	ldr	r2, [pc, #88]	@ (80008e0 <MX_TIM6_Init+0x6c>)
 8000888:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 20000;
 800088a:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_TIM6_Init+0x68>)
 800088c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000890:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000892:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <MX_TIM6_Init+0x68>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000;
 8000898:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <MX_TIM6_Init+0x68>)
 800089a:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800089e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008a0:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_TIM6_Init+0x68>)
 80008a2:	2280      	movs	r2, #128	@ 0x80
 80008a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008a6:	480d      	ldr	r0, [pc, #52]	@ (80008dc <MX_TIM6_Init+0x68>)
 80008a8:	f003 facf 	bl	8003e4a <HAL_TIM_Base_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80008b2:	f000 fb7d 	bl	8000fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	4619      	mov	r1, r3
 80008c2:	4806      	ldr	r0, [pc, #24]	@ (80008dc <MX_TIM6_Init+0x68>)
 80008c4:	f003 fcf8 	bl	80042b8 <HAL_TIMEx_MasterConfigSynchronization>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80008ce:	f000 fb6f 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000160 	.word	0x20000160
 80008e0:	40001000 	.word	0x40001000

080008e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008e8:	4b14      	ldr	r3, [pc, #80]	@ (800093c <MX_USART1_UART_Init+0x58>)
 80008ea:	4a15      	ldr	r2, [pc, #84]	@ (8000940 <MX_USART1_UART_Init+0x5c>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ee:	4b13      	ldr	r3, [pc, #76]	@ (800093c <MX_USART1_UART_Init+0x58>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <MX_USART1_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <MX_USART1_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <MX_USART1_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_USART1_UART_Init+0x58>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <MX_USART1_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MX_USART1_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b08      	ldr	r3, [pc, #32]	@ (800093c <MX_USART1_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <MX_USART1_UART_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	@ (800093c <MX_USART1_UART_Init+0x58>)
 8000928:	f003 fd6c 	bl	8004404 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000932:	f000 fb3d 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200001ac 	.word	0x200001ac
 8000940:	40013800 	.word	0x40013800

08000944 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000948:	4b14      	ldr	r3, [pc, #80]	@ (800099c <MX_USART3_UART_Init+0x58>)
 800094a:	4a15      	ldr	r2, [pc, #84]	@ (80009a0 <MX_USART3_UART_Init+0x5c>)
 800094c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800094e:	4b13      	ldr	r3, [pc, #76]	@ (800099c <MX_USART3_UART_Init+0x58>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <MX_USART3_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <MX_USART3_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <MX_USART3_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <MX_USART3_UART_Init+0x58>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <MX_USART3_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b09      	ldr	r3, [pc, #36]	@ (800099c <MX_USART3_UART_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	@ (800099c <MX_USART3_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <MX_USART3_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_USART3_UART_Init+0x58>)
 8000988:	f003 fd3c 	bl	8004404 <HAL_UART_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000992:	f000 fb0d 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000234 	.word	0x20000234
 80009a0:	40004800 	.word	0x40004800

080009a4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009a8:	4b14      	ldr	r3, [pc, #80]	@ (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009aa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80009ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009b0:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b2:	2206      	movs	r2, #6
 80009b4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009b6:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b8:	2202      	movs	r2, #2
 80009ba:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009be:	2202      	movs	r2, #2
 80009c0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80009d4:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009da:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	@ (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e8:	f001 fc4c 	bl	8002284 <HAL_PCD_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009f2:	f000 fadd 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200002bc 	.word	0x200002bc

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	@ 0x28
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a16:	4bbd      	ldr	r3, [pc, #756]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1a:	4abc      	ldr	r2, [pc, #752]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a1c:	f043 0310 	orr.w	r3, r3, #16
 8000a20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a22:	4bba      	ldr	r3, [pc, #744]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a26:	f003 0310 	and.w	r3, r3, #16
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	4bb7      	ldr	r3, [pc, #732]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	4ab6      	ldr	r2, [pc, #728]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a34:	f043 0304 	orr.w	r3, r3, #4
 8000a38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3a:	4bb4      	ldr	r3, [pc, #720]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	f003 0304 	and.w	r3, r3, #4
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4bb1      	ldr	r3, [pc, #708]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	4ab0      	ldr	r2, [pc, #704]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a52:	4bae      	ldr	r3, [pc, #696]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	4bab      	ldr	r3, [pc, #684]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	4aaa      	ldr	r2, [pc, #680]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a6a:	4ba8      	ldr	r3, [pc, #672]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a76:	4ba5      	ldr	r3, [pc, #660]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7a:	4aa4      	ldr	r2, [pc, #656]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a7c:	f043 0308 	orr.w	r3, r3, #8
 8000a80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a82:	4ba2      	ldr	r3, [pc, #648]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a86:	f003 0308 	and.w	r3, r3, #8
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000a94:	489e      	ldr	r0, [pc, #632]	@ (8000d10 <MX_GPIO_Init+0x310>)
 8000a96:	f001 fa79 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000aa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa4:	f001 fa72 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000aae:	4899      	ldr	r0, [pc, #612]	@ (8000d14 <MX_GPIO_Init+0x314>)
 8000ab0:	f001 fa6c 	bl	8001f8c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000aba:	4897      	ldr	r0, [pc, #604]	@ (8000d18 <MX_GPIO_Init+0x318>)
 8000abc:	f001 fa66 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ac6:	4894      	ldr	r0, [pc, #592]	@ (8000d18 <MX_GPIO_Init+0x318>)
 8000ac8:	f001 fa60 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000ad2:	4892      	ldr	r0, [pc, #584]	@ (8000d1c <MX_GPIO_Init+0x31c>)
 8000ad4:	f001 fa5a 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2120      	movs	r1, #32
 8000adc:	488d      	ldr	r0, [pc, #564]	@ (8000d14 <MX_GPIO_Init+0x314>)
 8000ade:	f001 fa55 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	488a      	ldr	r0, [pc, #552]	@ (8000d10 <MX_GPIO_Init+0x310>)
 8000ae8:	f001 fa50 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000aec:	f240 1315 	movw	r3, #277	@ 0x115
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	4882      	ldr	r0, [pc, #520]	@ (8000d10 <MX_GPIO_Init+0x310>)
 8000b06:	f001 f87f 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000b0a:	236a      	movs	r3, #106	@ 0x6a
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	487c      	ldr	r0, [pc, #496]	@ (8000d10 <MX_GPIO_Init+0x310>)
 8000b20:	f001 f872 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000b24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b2a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4878      	ldr	r0, [pc, #480]	@ (8000d1c <MX_GPIO_Init+0x31c>)
 8000b3c:	f001 f864 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000b40:	233f      	movs	r3, #63	@ 0x3f
 8000b42:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b44:	230b      	movs	r3, #11
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	4872      	ldr	r0, [pc, #456]	@ (8000d1c <MX_GPIO_Init+0x31c>)
 8000b54:	f001 f858 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b68:	2308      	movs	r3, #8
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b76:	f001 f847 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000b7a:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b96:	f001 f837 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000b9a:	2308      	movs	r3, #8
 8000b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000baa:	2301      	movs	r3, #1
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb8:	f001 f826 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000bbc:	2310      	movs	r3, #16
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bc0:	230b      	movs	r3, #11
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd2:	f001 f819 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000bd6:	23e0      	movs	r3, #224	@ 0xe0
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000be6:	2305      	movs	r3, #5
 8000be8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf4:	f001 f808 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bfc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4841      	ldr	r0, [pc, #260]	@ (8000d14 <MX_GPIO_Init+0x314>)
 8000c0e:	f000 fffb 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000c12:	2302      	movs	r3, #2
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c16:	230b      	movs	r3, #11
 8000c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	483b      	ldr	r0, [pc, #236]	@ (8000d14 <MX_GPIO_Init+0x314>)
 8000c26:	f000 ffef 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000c2a:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000c2e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	4834      	ldr	r0, [pc, #208]	@ (8000d14 <MX_GPIO_Init+0x314>)
 8000c44:	f000 ffe0 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000c48:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000c4c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c4e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	482e      	ldr	r0, [pc, #184]	@ (8000d18 <MX_GPIO_Init+0x318>)
 8000c60:	f000 ffd2 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000c64:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4826      	ldr	r0, [pc, #152]	@ (8000d18 <MX_GPIO_Init+0x318>)
 8000c7e:	f000 ffc3 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c82:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4820      	ldr	r0, [pc, #128]	@ (8000d1c <MX_GPIO_Init+0x31c>)
 8000c9c:	f000 ffb4 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000ca0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4819      	ldr	r0, [pc, #100]	@ (8000d1c <MX_GPIO_Init+0x31c>)
 8000cb8:	f000 ffa6 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ccc:	2305      	movs	r3, #5
 8000cce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4810      	ldr	r0, [pc, #64]	@ (8000d18 <MX_GPIO_Init+0x318>)
 8000cd8:	f000 ff96 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000cdc:	2378      	movs	r3, #120	@ 0x78
 8000cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cec:	2307      	movs	r3, #7
 8000cee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4808      	ldr	r0, [pc, #32]	@ (8000d18 <MX_GPIO_Init+0x318>)
 8000cf8:	f000 ff86 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000cfc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d02:	2312      	movs	r3, #18
 8000d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e00a      	b.n	8000d20 <MX_GPIO_Init+0x320>
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	48001000 	.word	0x48001000
 8000d14:	48000400 	.word	0x48000400
 8000d18:	48000c00 	.word	0x48000c00
 8000d1c:	48000800 	.word	0x48000800
 8000d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d26:	2304      	movs	r3, #4
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480b      	ldr	r0, [pc, #44]	@ (8000d60 <MX_GPIO_Init+0x360>)
 8000d32:	f000 ff69 	bl	8001c08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2105      	movs	r1, #5
 8000d3a:	2017      	movs	r0, #23
 8000d3c:	f000 fe21 	bl	8001982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d40:	2017      	movs	r0, #23
 8000d42:	f000 fe3a 	bl	80019ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2105      	movs	r1, #5
 8000d4a:	2028      	movs	r0, #40	@ 0x28
 8000d4c:	f000 fe19 	bl	8001982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d50:	2028      	movs	r0, #40	@ 0x28
 8000d52:	f000 fe32 	bl	80019ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	@ 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	48000400 	.word	0x48000400

08000d64 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d74:	d115      	bne.n	8000da2 <HAL_GPIO_EXTI_Callback+0x3e>
	{
	case BUTTON_EXTI13_Pin:
//		osSemaphoreRelease(myBinarySem01Handle);
		// falling
		if (HAL_GPIO_ReadPin(GPIOC, BUTTON_EXTI13_Pin) == GPIO_PIN_RESET)
 8000d76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d7a:	480c      	ldr	r0, [pc, #48]	@ (8000dac <HAL_GPIO_EXTI_Callback+0x48>)
 8000d7c:	f001 f8ee 	bl	8001f5c <HAL_GPIO_ReadPin>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d106      	bne.n	8000d94 <HAL_GPIO_EXTI_Callback+0x30>
		{
			osThreadFlagsSet(ProcessTask1Handle, 0x01);
 8000d86:	4b0a      	ldr	r3, [pc, #40]	@ (8000db0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f004 fc17 	bl	80055c0 <osThreadFlagsSet>
		// rising
		else
		{
			osThreadFlagsSet(ProcessTask1Handle, 0x02);
		}
		break;
 8000d92:	e007      	b.n	8000da4 <HAL_GPIO_EXTI_Callback+0x40>
			osThreadFlagsSet(ProcessTask1Handle, 0x02);
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2102      	movs	r1, #2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f004 fc10 	bl	80055c0 <osThreadFlagsSet>
		break;
 8000da0:	e000      	b.n	8000da4 <HAL_GPIO_EXTI_Callback+0x40>
	default:
		break;
 8000da2:	bf00      	nop
	}
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	48000800 	.word	0x48000800
 8000db0:	200007a0 	.word	0x200007a0

08000db4 <StartProcessTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartProcessTask1 */
void StartProcessTask1(void *argument)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  uint16_t msg;
  for(;;)
  {
	  osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f004 fc88 	bl	80056d8 <osThreadFlagsWait>
	  osTimerStart(ButtonTimerHandle, 1000U);
 8000dc8:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <StartProcessTask1+0x74>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f004 fdaf 	bl	8005934 <osTimerStart>
	  osThreadFlagsWait(0x06, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8000dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8000dda:	2102      	movs	r1, #2
 8000ddc:	2006      	movs	r0, #6
 8000dde:	f004 fc7b 	bl	80056d8 <osThreadFlagsWait>
	  uint32_t cur_flags = osThreadFlagsClear(0x06);
 8000de2:	2006      	movs	r0, #6
 8000de4:	f004 fc3a 	bl	800565c <osThreadFlagsClear>
 8000de8:	60f8      	str	r0, [r7, #12]
	  if (cur_flags == 0x02)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d10f      	bne.n	8000e10 <StartProcessTask1+0x5c>
	  {
		  // not exceed 1s
		  osTimerStop(ButtonTimerHandle);
 8000df0:	4b0d      	ldr	r3, [pc, #52]	@ (8000e28 <StartProcessTask1+0x74>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f004 fdcb 	bl	8005990 <osTimerStop>
		  msg = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	817b      	strh	r3, [r7, #10]
		  osMessageQueuePut(MessageQueueHandle, &msg, 0, 0);
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000e2c <StartProcessTask1+0x78>)
 8000e00:	6818      	ldr	r0, [r3, #0]
 8000e02:	f107 010a 	add.w	r1, r7, #10
 8000e06:	2300      	movs	r3, #0
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f005 f899 	bl	8005f40 <osMessageQueuePut>
 8000e0e:	e7d5      	b.n	8000dbc <StartProcessTask1+0x8>
	  }
	  else
	  {
		  // exceed 1s
		  msg = 1;
 8000e10:	2301      	movs	r3, #1
 8000e12:	817b      	strh	r3, [r7, #10]
		  osMessageQueuePut(MessageQueueHandle, &msg, 0, 0);
 8000e14:	4b05      	ldr	r3, [pc, #20]	@ (8000e2c <StartProcessTask1+0x78>)
 8000e16:	6818      	ldr	r0, [r3, #0]
 8000e18:	f107 010a 	add.w	r1, r7, #10
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f005 f88e 	bl	8005f40 <osMessageQueuePut>
  {
 8000e24:	e7ca      	b.n	8000dbc <StartProcessTask1+0x8>
 8000e26:	bf00      	nop
 8000e28:	200007b4 	.word	0x200007b4
 8000e2c:	200007ac 	.word	0x200007ac

08000e30 <StartTask1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask1 */
  /* Infinite loop */
  uint16_t msg;
  for(;;)
  {
	osMessageQueueGet(MessageQueueHandle, &msg, NULL, osWaitForever);
 8000e38:	4b2c      	ldr	r3, [pc, #176]	@ (8000eec <StartTask1+0xbc>)
 8000e3a:	6818      	ldr	r0, [r3, #0]
 8000e3c:	f107 010e 	add.w	r1, r7, #14
 8000e40:	f04f 33ff 	mov.w	r3, #4294967295
 8000e44:	2200      	movs	r2, #0
 8000e46:	f005 f8db 	bl	8006000 <osMessageQueueGet>
//	osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
	osMutexAcquire(MutexTaskHandle, osWaitForever);
 8000e4a:	4b29      	ldr	r3, [pc, #164]	@ (8000ef0 <StartTask1+0xc0>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f04f 31ff 	mov.w	r1, #4294967295
 8000e52:	4618      	mov	r0, r3
 8000e54:	f004 fe59 	bl	8005b0a <osMutexAcquire>
	if (msg == 0)
 8000e58:	89fb      	ldrh	r3, [r7, #14]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d11f      	bne.n	8000e9e <StartTask1+0x6e>
	{
		// not exceed 1s
		int i=0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
		for (i=0;i<5;i++)
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
 8000e66:	e016      	b.n	8000e96 <StartTask1+0x66>
		{
			int j=0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61bb      	str	r3, [r7, #24]
			for (j=0;j<2;j++)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61bb      	str	r3, [r7, #24]
 8000e70:	e00b      	b.n	8000e8a <StartTask1+0x5a>
			{
				HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000e72:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e76:	481f      	ldr	r0, [pc, #124]	@ (8000ef4 <StartTask1+0xc4>)
 8000e78:	f001 f8a0 	bl	8001fbc <HAL_GPIO_TogglePin>
				HAL_Delay(500);
 8000e7c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e80:	f000 fc80 	bl	8001784 <HAL_Delay>
			for (j=0;j<2;j++)
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	3301      	adds	r3, #1
 8000e88:	61bb      	str	r3, [r7, #24]
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	ddf0      	ble.n	8000e72 <StartTask1+0x42>
		for (i=0;i<5;i++)
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	3301      	adds	r3, #1
 8000e94:	61fb      	str	r3, [r7, #28]
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	2b04      	cmp	r3, #4
 8000e9a:	dde5      	ble.n	8000e68 <StartTask1+0x38>
 8000e9c:	e020      	b.n	8000ee0 <StartTask1+0xb0>
			}
		}
	}
	else if (msg == 1)
 8000e9e:	89fb      	ldrh	r3, [r7, #14]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d11d      	bne.n	8000ee0 <StartTask1+0xb0>
	{
		// not exceed 1s
		int i=0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
		for (i=0;i<5;i++)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	e015      	b.n	8000eda <StartTask1+0xaa>
		{
			int j=0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
			for (j=0;j<20;j++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	e00a      	b.n	8000ece <StartTask1+0x9e>
			{
				HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000eb8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ebc:	480d      	ldr	r0, [pc, #52]	@ (8000ef4 <StartTask1+0xc4>)
 8000ebe:	f001 f87d 	bl	8001fbc <HAL_GPIO_TogglePin>
				HAL_Delay(50);
 8000ec2:	2032      	movs	r0, #50	@ 0x32
 8000ec4:	f000 fc5e 	bl	8001784 <HAL_Delay>
			for (j=0;j<20;j++)
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	2b13      	cmp	r3, #19
 8000ed2:	ddf1      	ble.n	8000eb8 <StartTask1+0x88>
		for (i=0;i<5;i++)
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	2b04      	cmp	r3, #4
 8000ede:	dde6      	ble.n	8000eae <StartTask1+0x7e>
			}
		}
	}
	osMutexRelease(MutexTaskHandle);
 8000ee0:	4b03      	ldr	r3, [pc, #12]	@ (8000ef0 <StartTask1+0xc0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f004 fe5b 	bl	8005ba0 <osMutexRelease>
	osMessageQueueGet(MessageQueueHandle, &msg, NULL, osWaitForever);
 8000eea:	e7a5      	b.n	8000e38 <StartTask1+0x8>
 8000eec:	200007ac 	.word	0x200007ac
 8000ef0:	200007b8 	.word	0x200007b8
 8000ef4:	48000400 	.word	0x48000400

08000ef8 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(BinarySem02Handle, osWaitForever);
 8000f00:	4b18      	ldr	r3, [pc, #96]	@ (8000f64 <StartTask2+0x6c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f04f 31ff 	mov.w	r1, #4294967295
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f004 ff0f 	bl	8005d2c <osSemaphoreAcquire>
	osMutexAcquire(MutexTaskHandle, osWaitForever);
 8000f0e:	4b16      	ldr	r3, [pc, #88]	@ (8000f68 <StartTask2+0x70>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f04f 31ff 	mov.w	r1, #4294967295
 8000f16:	4618      	mov	r0, r3
 8000f18:	f004 fdf7 	bl	8005b0a <osMutexAcquire>
	int i=0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
	for (i=0;i<2;i++)
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	e015      	b.n	8000f52 <StartTask2+0x5a>
	{
		int j=0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
		for (j=0;j<20;j++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	e00a      	b.n	8000f46 <StartTask2+0x4e>
		{
			HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000f30:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f34:	480d      	ldr	r0, [pc, #52]	@ (8000f6c <StartTask2+0x74>)
 8000f36:	f001 f841 	bl	8001fbc <HAL_GPIO_TogglePin>
			osDelay(50);
 8000f3a:	2032      	movs	r0, #50	@ 0x32
 8000f3c:	f004 fc4d 	bl	80057da <osDelay>
		for (j=0;j<20;j++)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	3301      	adds	r3, #1
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	2b13      	cmp	r3, #19
 8000f4a:	ddf1      	ble.n	8000f30 <StartTask2+0x38>
	for (i=0;i<2;i++)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	dde6      	ble.n	8000f26 <StartTask2+0x2e>
		}
	}
	osMutexRelease(MutexTaskHandle);
 8000f58:	4b03      	ldr	r3, [pc, #12]	@ (8000f68 <StartTask2+0x70>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f004 fe1f 	bl	8005ba0 <osMutexRelease>
  {
 8000f62:	e7cd      	b.n	8000f00 <StartTask2+0x8>
 8000f64:	200007c0 	.word	0x200007c0
 8000f68:	200007b8 	.word	0x200007b8
 8000f6c:	48000400 	.word	0x48000400

08000f70 <DefaultTimerCallback>:
  /* USER CODE END StartTask2 */
}

/* DefaultTimerCallback function */
void DefaultTimerCallback(void *argument)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTimerCallback */
	osSemaphoreRelease(BinarySem02Handle);
 8000f78:	4b04      	ldr	r3, [pc, #16]	@ (8000f8c <DefaultTimerCallback+0x1c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f004 ff27 	bl	8005dd0 <osSemaphoreRelease>
  /* USER CODE END DefaultTimerCallback */
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200007c0 	.word	0x200007c0

08000f90 <TimerCallback>:

/* TimerCallback function */
void TimerCallback(void *argument)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TimerCallback */
//  HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
//  osSemaphoreRelease(myBinarySem01Handle);
	osThreadFlagsSet(ProcessTask1Handle, 0x04);
 8000f98:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <TimerCallback+0x1c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2104      	movs	r1, #4
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f004 fb0e 	bl	80055c0 <osThreadFlagsSet>
  /* USER CODE END TimerCallback */
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200007a0 	.word	0x200007a0

08000fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb4:	b672      	cpsid	i
}
 8000fb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <Error_Handler+0x8>

08000fbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	4b11      	ldr	r3, [pc, #68]	@ (8001008 <HAL_MspInit+0x4c>)
 8000fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fc6:	4a10      	ldr	r2, [pc, #64]	@ (8001008 <HAL_MspInit+0x4c>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fce:	4b0e      	ldr	r3, [pc, #56]	@ (8001008 <HAL_MspInit+0x4c>)
 8000fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	4b0b      	ldr	r3, [pc, #44]	@ (8001008 <HAL_MspInit+0x4c>)
 8000fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fde:	4a0a      	ldr	r2, [pc, #40]	@ (8001008 <HAL_MspInit+0x4c>)
 8000fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fe6:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <HAL_MspInit+0x4c>)
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	210f      	movs	r1, #15
 8000ff6:	f06f 0001 	mvn.w	r0, #1
 8000ffa:	f000 fcc2 	bl	8001982 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40021000 	.word	0x40021000

0800100c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b0ac      	sub	sp, #176	@ 0xb0
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2288      	movs	r2, #136	@ 0x88
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f008 fca3 	bl	8009978 <memset>
  if(DFSDM1_Init == 0)
 8001032:	4b25      	ldr	r3, [pc, #148]	@ (80010c8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d142      	bne.n	80010c0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800103a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800103e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001040:	2300      	movs	r3, #0
 8001042:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	4618      	mov	r0, r3
 800104c:	f002 f98e 	bl	800336c <HAL_RCCEx_PeriphCLKConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001056:	f7ff ffab 	bl	8000fb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800105a:	4b1c      	ldr	r3, [pc, #112]	@ (80010cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 800105c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800105e:	4a1b      	ldr	r2, [pc, #108]	@ (80010cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001060:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001064:	6613      	str	r3, [r2, #96]	@ 0x60
 8001066:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800106a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001072:	4b16      	ldr	r3, [pc, #88]	@ (80010cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001076:	4a15      	ldr	r2, [pc, #84]	@ (80010cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001078:	f043 0310 	orr.w	r3, r3, #16
 800107c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800107e:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001082:	f003 0310 	and.w	r3, r3, #16
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800108a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800108e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80010a4:	2306      	movs	r3, #6
 80010a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010aa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010ae:	4619      	mov	r1, r3
 80010b0:	4807      	ldr	r0, [pc, #28]	@ (80010d0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80010b2:	f000 fda9 	bl	8001c08 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80010b6:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	4a02      	ldr	r2, [pc, #8]	@ (80010c8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010be:	6013      	str	r3, [r2, #0]
  }

}
 80010c0:	bf00      	nop
 80010c2:	37b0      	adds	r7, #176	@ 0xb0
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200007c4 	.word	0x200007c4
 80010cc:	40021000 	.word	0x40021000
 80010d0:	48001000 	.word	0x48001000

080010d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0ac      	sub	sp, #176	@ 0xb0
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2288      	movs	r2, #136	@ 0x88
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f008 fc3f 	bl	8009978 <memset>
  if(hi2c->Instance==I2C2)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a21      	ldr	r2, [pc, #132]	@ (8001184 <HAL_I2C_MspInit+0xb0>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d13b      	bne.n	800117c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001104:	2380      	movs	r3, #128	@ 0x80
 8001106:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001108:	2300      	movs	r3, #0
 800110a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4618      	mov	r0, r3
 8001112:	f002 f92b 	bl	800336c <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800111c:	f7ff ff48 	bl	8000fb0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001120:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <HAL_I2C_MspInit+0xb4>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001124:	4a18      	ldr	r2, [pc, #96]	@ (8001188 <HAL_I2C_MspInit+0xb4>)
 8001126:	f043 0302 	orr.w	r3, r3, #2
 800112a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800112c:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <HAL_I2C_MspInit+0xb4>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001138:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800113c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001140:	2312      	movs	r3, #18
 8001142:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001146:	2301      	movs	r3, #1
 8001148:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001152:	2304      	movs	r3, #4
 8001154:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800115c:	4619      	mov	r1, r3
 800115e:	480b      	ldr	r0, [pc, #44]	@ (800118c <HAL_I2C_MspInit+0xb8>)
 8001160:	f000 fd52 	bl	8001c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001164:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <HAL_I2C_MspInit+0xb4>)
 8001166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001168:	4a07      	ldr	r2, [pc, #28]	@ (8001188 <HAL_I2C_MspInit+0xb4>)
 800116a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800116e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001170:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <HAL_I2C_MspInit+0xb4>)
 8001172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001174:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800117c:	bf00      	nop
 800117e:	37b0      	adds	r7, #176	@ 0xb0
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40005800 	.word	0x40005800
 8001188:	40021000 	.word	0x40021000
 800118c:	48000400 	.word	0x48000400

08001190 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	@ 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a17      	ldr	r2, [pc, #92]	@ (800120c <HAL_QSPI_MspInit+0x7c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d128      	bne.n	8001204 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80011b2:	4b17      	ldr	r3, [pc, #92]	@ (8001210 <HAL_QSPI_MspInit+0x80>)
 80011b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011b6:	4a16      	ldr	r2, [pc, #88]	@ (8001210 <HAL_QSPI_MspInit+0x80>)
 80011b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80011be:	4b14      	ldr	r3, [pc, #80]	@ (8001210 <HAL_QSPI_MspInit+0x80>)
 80011c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ca:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <HAL_QSPI_MspInit+0x80>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ce:	4a10      	ldr	r2, [pc, #64]	@ (8001210 <HAL_QSPI_MspInit+0x80>)
 80011d0:	f043 0310 	orr.w	r3, r3, #16
 80011d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <HAL_QSPI_MspInit+0x80>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011da:	f003 0310 	and.w	r3, r3, #16
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80011e2:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80011e6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80011f4:	230a      	movs	r3, #10
 80011f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4805      	ldr	r0, [pc, #20]	@ (8001214 <HAL_QSPI_MspInit+0x84>)
 8001200:	f000 fd02 	bl	8001c08 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001204:	bf00      	nop
 8001206:	3728      	adds	r7, #40	@ 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	a0001000 	.word	0xa0001000
 8001210:	40021000 	.word	0x40021000
 8001214:	48001000 	.word	0x48001000

08001218 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	@ 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a17      	ldr	r2, [pc, #92]	@ (8001294 <HAL_SPI_MspInit+0x7c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d128      	bne.n	800128c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800123a:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <HAL_SPI_MspInit+0x80>)
 800123c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123e:	4a16      	ldr	r2, [pc, #88]	@ (8001298 <HAL_SPI_MspInit+0x80>)
 8001240:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001244:	6593      	str	r3, [r2, #88]	@ 0x58
 8001246:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <HAL_SPI_MspInit+0x80>)
 8001248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800124a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <HAL_SPI_MspInit+0x80>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001256:	4a10      	ldr	r2, [pc, #64]	@ (8001298 <HAL_SPI_MspInit+0x80>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125e:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <HAL_SPI_MspInit+0x80>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800126a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800126e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800127c:	2306      	movs	r3, #6
 800127e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	4805      	ldr	r0, [pc, #20]	@ (800129c <HAL_SPI_MspInit+0x84>)
 8001288:	f000 fcbe 	bl	8001c08 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 800128c:	bf00      	nop
 800128e:	3728      	adds	r7, #40	@ 0x28
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40003c00 	.word	0x40003c00
 8001298:	40021000 	.word	0x40021000
 800129c:	48000800 	.word	0x48000800

080012a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0d      	ldr	r2, [pc, #52]	@ (80012e4 <HAL_TIM_Base_MspInit+0x44>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d113      	bne.n	80012da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012b2:	4b0d      	ldr	r3, [pc, #52]	@ (80012e8 <HAL_TIM_Base_MspInit+0x48>)
 80012b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b6:	4a0c      	ldr	r2, [pc, #48]	@ (80012e8 <HAL_TIM_Base_MspInit+0x48>)
 80012b8:	f043 0310 	orr.w	r3, r3, #16
 80012bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80012be:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <HAL_TIM_Base_MspInit+0x48>)
 80012c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c2:	f003 0310 	and.w	r3, r3, #16
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2105      	movs	r1, #5
 80012ce:	2036      	movs	r0, #54	@ 0x36
 80012d0:	f000 fb57 	bl	8001982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012d4:	2036      	movs	r0, #54	@ 0x36
 80012d6:	f000 fb70 	bl	80019ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40001000 	.word	0x40001000
 80012e8:	40021000 	.word	0x40021000

080012ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b0ae      	sub	sp, #184	@ 0xb8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	2288      	movs	r2, #136	@ 0x88
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f008 fb33 	bl	8009978 <memset>
  if(huart->Instance==USART1)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a42      	ldr	r2, [pc, #264]	@ (8001420 <HAL_UART_MspInit+0x134>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d13b      	bne.n	8001394 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800131c:	2301      	movs	r3, #1
 800131e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001320:	2300      	movs	r3, #0
 8001322:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	4618      	mov	r0, r3
 800132a:	f002 f81f 	bl	800336c <HAL_RCCEx_PeriphCLKConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001334:	f7ff fe3c 	bl	8000fb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001338:	4b3a      	ldr	r3, [pc, #232]	@ (8001424 <HAL_UART_MspInit+0x138>)
 800133a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800133c:	4a39      	ldr	r2, [pc, #228]	@ (8001424 <HAL_UART_MspInit+0x138>)
 800133e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001342:	6613      	str	r3, [r2, #96]	@ 0x60
 8001344:	4b37      	ldr	r3, [pc, #220]	@ (8001424 <HAL_UART_MspInit+0x138>)
 8001346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800134c:	61bb      	str	r3, [r7, #24]
 800134e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001350:	4b34      	ldr	r3, [pc, #208]	@ (8001424 <HAL_UART_MspInit+0x138>)
 8001352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001354:	4a33      	ldr	r2, [pc, #204]	@ (8001424 <HAL_UART_MspInit+0x138>)
 8001356:	f043 0302 	orr.w	r3, r3, #2
 800135a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135c:	4b31      	ldr	r3, [pc, #196]	@ (8001424 <HAL_UART_MspInit+0x138>)
 800135e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001368:	23c0      	movs	r3, #192	@ 0xc0
 800136a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001380:	2307      	movs	r3, #7
 8001382:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001386:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800138a:	4619      	mov	r1, r3
 800138c:	4826      	ldr	r0, [pc, #152]	@ (8001428 <HAL_UART_MspInit+0x13c>)
 800138e:	f000 fc3b 	bl	8001c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001392:	e040      	b.n	8001416 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a24      	ldr	r2, [pc, #144]	@ (800142c <HAL_UART_MspInit+0x140>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d13b      	bne.n	8001416 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800139e:	2304      	movs	r3, #4
 80013a0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013a2:	2300      	movs	r3, #0
 80013a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 ffde 	bl	800336c <HAL_RCCEx_PeriphCLKConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_UART_MspInit+0xce>
      Error_Handler();
 80013b6:	f7ff fdfb 	bl	8000fb0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001424 <HAL_UART_MspInit+0x138>)
 80013bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013be:	4a19      	ldr	r2, [pc, #100]	@ (8001424 <HAL_UART_MspInit+0x138>)
 80013c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80013c6:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <HAL_UART_MspInit+0x138>)
 80013c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d2:	4b14      	ldr	r3, [pc, #80]	@ (8001424 <HAL_UART_MspInit+0x138>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d6:	4a13      	ldr	r2, [pc, #76]	@ (8001424 <HAL_UART_MspInit+0x138>)
 80013d8:	f043 0308 	orr.w	r3, r3, #8
 80013dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013de:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <HAL_UART_MspInit+0x138>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80013ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fe:	2303      	movs	r3, #3
 8001400:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001404:	2307      	movs	r3, #7
 8001406:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800140e:	4619      	mov	r1, r3
 8001410:	4807      	ldr	r0, [pc, #28]	@ (8001430 <HAL_UART_MspInit+0x144>)
 8001412:	f000 fbf9 	bl	8001c08 <HAL_GPIO_Init>
}
 8001416:	bf00      	nop
 8001418:	37b8      	adds	r7, #184	@ 0xb8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40013800 	.word	0x40013800
 8001424:	40021000 	.word	0x40021000
 8001428:	48000400 	.word	0x48000400
 800142c:	40004800 	.word	0x40004800
 8001430:	48000c00 	.word	0x48000c00

08001434 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b0ac      	sub	sp, #176	@ 0xb0
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2288      	movs	r2, #136	@ 0x88
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f008 fa8f 	bl	8009978 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001462:	d17c      	bne.n	800155e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001464:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001468:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800146a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800146e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001472:	2301      	movs	r3, #1
 8001474:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001476:	2301      	movs	r3, #1
 8001478:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800147a:	2318      	movs	r3, #24
 800147c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800147e:	2307      	movs	r3, #7
 8001480:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001482:	2302      	movs	r3, #2
 8001484:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001486:	2302      	movs	r3, #2
 8001488:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800148a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800148e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4618      	mov	r0, r3
 8001496:	f001 ff69 	bl	800336c <HAL_RCCEx_PeriphCLKConfig>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80014a0:	f7ff fd86 	bl	8000fb0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a4:	4b30      	ldr	r3, [pc, #192]	@ (8001568 <HAL_PCD_MspInit+0x134>)
 80014a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a8:	4a2f      	ldr	r2, [pc, #188]	@ (8001568 <HAL_PCD_MspInit+0x134>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001568 <HAL_PCD_MspInit+0x134>)
 80014b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80014bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014d4:	4619      	mov	r1, r3
 80014d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014da:	f000 fb95 	bl	8001c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80014de:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80014e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014f8:	230a      	movs	r3, #10
 80014fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001502:	4619      	mov	r1, r3
 8001504:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001508:	f000 fb7e 	bl	8001c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800150c:	4b16      	ldr	r3, [pc, #88]	@ (8001568 <HAL_PCD_MspInit+0x134>)
 800150e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001510:	4a15      	ldr	r2, [pc, #84]	@ (8001568 <HAL_PCD_MspInit+0x134>)
 8001512:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001516:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001518:	4b13      	ldr	r3, [pc, #76]	@ (8001568 <HAL_PCD_MspInit+0x134>)
 800151a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001524:	4b10      	ldr	r3, [pc, #64]	@ (8001568 <HAL_PCD_MspInit+0x134>)
 8001526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d114      	bne.n	800155a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001530:	4b0d      	ldr	r3, [pc, #52]	@ (8001568 <HAL_PCD_MspInit+0x134>)
 8001532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001534:	4a0c      	ldr	r2, [pc, #48]	@ (8001568 <HAL_PCD_MspInit+0x134>)
 8001536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800153a:	6593      	str	r3, [r2, #88]	@ 0x58
 800153c:	4b0a      	ldr	r3, [pc, #40]	@ (8001568 <HAL_PCD_MspInit+0x134>)
 800153e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001548:	f001 f844 	bl	80025d4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <HAL_PCD_MspInit+0x134>)
 800154e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001550:	4a05      	ldr	r2, [pc, #20]	@ (8001568 <HAL_PCD_MspInit+0x134>)
 8001552:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001556:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001558:	e001      	b.n	800155e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800155a:	f001 f83b 	bl	80025d4 <HAL_PWREx_EnableVddUSB>
}
 800155e:	bf00      	nop
 8001560:	37b0      	adds	r7, #176	@ 0xb0
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40021000 	.word	0x40021000

0800156c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <NMI_Handler+0x4>

08001574 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <HardFault_Handler+0x4>

0800157c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <MemManage_Handler+0x4>

08001584 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <BusFault_Handler+0x4>

0800158c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <UsageFault_Handler+0x4>

08001594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a6:	f000 f8cd 	bl	8001744 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80015aa:	f006 fd8d 	bl	80080c8 <xTaskGetSchedulerState>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d001      	beq.n	80015b8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80015b4:	f007 ff60 	bl	8009478 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}

080015bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80015c0:	2020      	movs	r0, #32
 80015c2:	f000 fd15 	bl	8001ff0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80015c6:	2040      	movs	r0, #64	@ 0x40
 80015c8:	f000 fd12 	bl	8001ff0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80015cc:	2080      	movs	r0, #128	@ 0x80
 80015ce:	f000 fd0f 	bl	8001ff0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80015d2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80015d6:	f000 fd0b 	bl	8001ff0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}

080015de <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80015e2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80015e6:	f000 fd03 	bl	8001ff0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80015ea:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80015ee:	f000 fcff 	bl	8001ff0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80015f2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80015f6:	f000 fcfb 	bl	8001ff0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80015fa:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80015fe:	f000 fcf7 	bl	8001ff0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001602:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001606:	f000 fcf3 	bl	8001ff0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001614:	4802      	ldr	r0, [pc, #8]	@ (8001620 <TIM6_DAC_IRQHandler+0x10>)
 8001616:	f002 fc6f 	bl	8003ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000160 	.word	0x20000160

08001624 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <SystemInit+0x20>)
 800162a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800162e:	4a05      	ldr	r2, [pc, #20]	@ (8001644 <SystemInit+0x20>)
 8001630:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001634:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001648:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001680 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800164c:	f7ff ffea 	bl	8001624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001650:	480c      	ldr	r0, [pc, #48]	@ (8001684 <LoopForever+0x6>)
  ldr r1, =_edata
 8001652:	490d      	ldr	r1, [pc, #52]	@ (8001688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001654:	4a0d      	ldr	r2, [pc, #52]	@ (800168c <LoopForever+0xe>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001658:	e002      	b.n	8001660 <LoopCopyDataInit>

0800165a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800165c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165e:	3304      	adds	r3, #4

08001660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001664:	d3f9      	bcc.n	800165a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001666:	4a0a      	ldr	r2, [pc, #40]	@ (8001690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001668:	4c0a      	ldr	r4, [pc, #40]	@ (8001694 <LoopForever+0x16>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800166c:	e001      	b.n	8001672 <LoopFillZerobss>

0800166e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001670:	3204      	adds	r2, #4

08001672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001674:	d3fb      	bcc.n	800166e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001676:	f008 f987 	bl	8009988 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800167a:	f7fe ff21 	bl	80004c0 <main>

0800167e <LoopForever>:

LoopForever:
    b LoopForever
 800167e:	e7fe      	b.n	800167e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001680:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800168c:	08009bb8 	.word	0x08009bb8
  ldr r2, =_sbss
 8001690:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001694:	200020f8 	.word	0x200020f8

08001698 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC1_2_IRQHandler>

0800169a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a4:	2003      	movs	r0, #3
 80016a6:	f000 f961 	bl	800196c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016aa:	200f      	movs	r0, #15
 80016ac:	f000 f80e 	bl	80016cc <HAL_InitTick>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d002      	beq.n	80016bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	71fb      	strb	r3, [r7, #7]
 80016ba:	e001      	b.n	80016c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016bc:	f7ff fc7e 	bl	8000fbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016c0:	79fb      	ldrb	r3, [r7, #7]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016d8:	4b17      	ldr	r3, [pc, #92]	@ (8001738 <HAL_InitTick+0x6c>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d023      	beq.n	8001728 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016e0:	4b16      	ldr	r3, [pc, #88]	@ (800173c <HAL_InitTick+0x70>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b14      	ldr	r3, [pc, #80]	@ (8001738 <HAL_InitTick+0x6c>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
 80016ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 f96d 	bl	80019d6 <HAL_SYSTICK_Config>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10f      	bne.n	8001722 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b0f      	cmp	r3, #15
 8001706:	d809      	bhi.n	800171c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001708:	2200      	movs	r2, #0
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	f000 f937 	bl	8001982 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001714:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <HAL_InitTick+0x74>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e007      	b.n	800172c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	73fb      	strb	r3, [r7, #15]
 8001720:	e004      	b.n	800172c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	73fb      	strb	r3, [r7, #15]
 8001726:	e001      	b.n	800172c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800172c:	7bfb      	ldrb	r3, [r7, #15]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000008 	.word	0x20000008
 800173c:	20000000 	.word	0x20000000
 8001740:	20000004 	.word	0x20000004

08001744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001748:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <HAL_IncTick+0x20>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <HAL_IncTick+0x24>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4413      	add	r3, r2
 8001754:	4a04      	ldr	r2, [pc, #16]	@ (8001768 <HAL_IncTick+0x24>)
 8001756:	6013      	str	r3, [r2, #0]
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000008 	.word	0x20000008
 8001768:	200007c8 	.word	0x200007c8

0800176c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return uwTick;
 8001770:	4b03      	ldr	r3, [pc, #12]	@ (8001780 <HAL_GetTick+0x14>)
 8001772:	681b      	ldr	r3, [r3, #0]
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	200007c8 	.word	0x200007c8

08001784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800178c:	f7ff ffee 	bl	800176c <HAL_GetTick>
 8001790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179c:	d005      	beq.n	80017aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800179e:	4b0a      	ldr	r3, [pc, #40]	@ (80017c8 <HAL_Delay+0x44>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017aa:	bf00      	nop
 80017ac:	f7ff ffde 	bl	800176c <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d8f7      	bhi.n	80017ac <HAL_Delay+0x28>
  {
  }
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000008 	.word	0x20000008

080017cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017e8:	4013      	ands	r3, r2
 80017ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fe:	4a04      	ldr	r2, [pc, #16]	@ (8001810 <__NVIC_SetPriorityGrouping+0x44>)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	60d3      	str	r3, [r2, #12]
}
 8001804:	bf00      	nop
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001818:	4b04      	ldr	r3, [pc, #16]	@ (800182c <__NVIC_GetPriorityGrouping+0x18>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	f003 0307 	and.w	r3, r3, #7
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	2b00      	cmp	r3, #0
 8001840:	db0b      	blt.n	800185a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	f003 021f 	and.w	r2, r3, #31
 8001848:	4907      	ldr	r1, [pc, #28]	@ (8001868 <__NVIC_EnableIRQ+0x38>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	095b      	lsrs	r3, r3, #5
 8001850:	2001      	movs	r0, #1
 8001852:	fa00 f202 	lsl.w	r2, r0, r2
 8001856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000e100 	.word	0xe000e100

0800186c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	6039      	str	r1, [r7, #0]
 8001876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	2b00      	cmp	r3, #0
 800187e:	db0a      	blt.n	8001896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	b2da      	uxtb	r2, r3
 8001884:	490c      	ldr	r1, [pc, #48]	@ (80018b8 <__NVIC_SetPriority+0x4c>)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	0112      	lsls	r2, r2, #4
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	440b      	add	r3, r1
 8001890:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001894:	e00a      	b.n	80018ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4908      	ldr	r1, [pc, #32]	@ (80018bc <__NVIC_SetPriority+0x50>)
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	3b04      	subs	r3, #4
 80018a4:	0112      	lsls	r2, r2, #4
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	440b      	add	r3, r1
 80018aa:	761a      	strb	r2, [r3, #24]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000e100 	.word	0xe000e100
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b089      	sub	sp, #36	@ 0x24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f1c3 0307 	rsb	r3, r3, #7
 80018da:	2b04      	cmp	r3, #4
 80018dc:	bf28      	it	cs
 80018de:	2304      	movcs	r3, #4
 80018e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3304      	adds	r3, #4
 80018e6:	2b06      	cmp	r3, #6
 80018e8:	d902      	bls.n	80018f0 <NVIC_EncodePriority+0x30>
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3b03      	subs	r3, #3
 80018ee:	e000      	b.n	80018f2 <NVIC_EncodePriority+0x32>
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	f04f 32ff 	mov.w	r2, #4294967295
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43da      	mvns	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	401a      	ands	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001908:	f04f 31ff 	mov.w	r1, #4294967295
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa01 f303 	lsl.w	r3, r1, r3
 8001912:	43d9      	mvns	r1, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	4313      	orrs	r3, r2
         );
}
 800191a:	4618      	mov	r0, r3
 800191c:	3724      	adds	r7, #36	@ 0x24
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
	...

08001928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001938:	d301      	bcc.n	800193e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800193a:	2301      	movs	r3, #1
 800193c:	e00f      	b.n	800195e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193e:	4a0a      	ldr	r2, [pc, #40]	@ (8001968 <SysTick_Config+0x40>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001946:	210f      	movs	r1, #15
 8001948:	f04f 30ff 	mov.w	r0, #4294967295
 800194c:	f7ff ff8e 	bl	800186c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001950:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <SysTick_Config+0x40>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001956:	4b04      	ldr	r3, [pc, #16]	@ (8001968 <SysTick_Config+0x40>)
 8001958:	2207      	movs	r2, #7
 800195a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	e000e010 	.word	0xe000e010

0800196c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff ff29 	bl	80017cc <__NVIC_SetPriorityGrouping>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b086      	sub	sp, #24
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001994:	f7ff ff3e 	bl	8001814 <__NVIC_GetPriorityGrouping>
 8001998:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	6978      	ldr	r0, [r7, #20]
 80019a0:	f7ff ff8e 	bl	80018c0 <NVIC_EncodePriority>
 80019a4:	4602      	mov	r2, r0
 80019a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff5d 	bl	800186c <__NVIC_SetPriority>
}
 80019b2:	bf00      	nop
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	4603      	mov	r3, r0
 80019c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff31 	bl	8001830 <__NVIC_EnableIRQ>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff ffa2 	bl	8001928 <SysTick_Config>
 80019e4:	4603      	mov	r3, r0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e0ac      	b.n	8001b5c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 f8b2 	bl	8001b70 <DFSDM_GetChannelFromInstance>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4a55      	ldr	r2, [pc, #340]	@ (8001b64 <HAL_DFSDM_ChannelInit+0x174>)
 8001a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e09f      	b.n	8001b5c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff faf5 	bl	800100c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001a22:	4b51      	ldr	r3, [pc, #324]	@ (8001b68 <HAL_DFSDM_ChannelInit+0x178>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	3301      	adds	r3, #1
 8001a28:	4a4f      	ldr	r2, [pc, #316]	@ (8001b68 <HAL_DFSDM_ChannelInit+0x178>)
 8001a2a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001a2c:	4b4e      	ldr	r3, [pc, #312]	@ (8001b68 <HAL_DFSDM_ChannelInit+0x178>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d125      	bne.n	8001a80 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001a34:	4b4d      	ldr	r3, [pc, #308]	@ (8001b6c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a4c      	ldr	r2, [pc, #304]	@ (8001b6c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a3a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001a3e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001a40:	4b4a      	ldr	r3, [pc, #296]	@ (8001b6c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	4948      	ldr	r1, [pc, #288]	@ (8001b6c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001a4e:	4b47      	ldr	r3, [pc, #284]	@ (8001b6c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a46      	ldr	r2, [pc, #280]	@ (8001b6c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a54:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001a58:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	791b      	ldrb	r3, [r3, #4]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d108      	bne.n	8001a74 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001a62:	4b42      	ldr	r3, [pc, #264]	@ (8001b6c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	041b      	lsls	r3, r3, #16
 8001a6e:	493f      	ldr	r1, [pc, #252]	@ (8001b6c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001a74:	4b3d      	ldr	r3, [pc, #244]	@ (8001b6c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a3c      	ldr	r2, [pc, #240]	@ (8001b6c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001a7e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8001a8e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6819      	ldr	r1, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a9e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001aa4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 020f 	bic.w	r2, r2, #15
 8001abc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6819      	ldr	r1, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001acc:	431a      	orrs	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001ae4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6899      	ldr	r1, [r3, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af4:	3b01      	subs	r3, #1
 8001af6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001af8:	431a      	orrs	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f002 0207 	and.w	r2, r2, #7
 8001b10:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6859      	ldr	r1, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b3c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 f810 	bl	8001b70 <DFSDM_GetChannelFromInstance>
 8001b50:	4602      	mov	r2, r0
 8001b52:	4904      	ldr	r1, [pc, #16]	@ (8001b64 <HAL_DFSDM_ChannelInit+0x174>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	200007d0 	.word	0x200007d0
 8001b68:	200007cc 	.word	0x200007cc
 8001b6c:	40016000 	.word	0x40016000

08001b70 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001bec <DFSDM_GetChannelFromInstance+0x7c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d102      	bne.n	8001b86 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	e02b      	b.n	8001bde <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a19      	ldr	r2, [pc, #100]	@ (8001bf0 <DFSDM_GetChannelFromInstance+0x80>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d102      	bne.n	8001b94 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	e024      	b.n	8001bde <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a17      	ldr	r2, [pc, #92]	@ (8001bf4 <DFSDM_GetChannelFromInstance+0x84>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d102      	bne.n	8001ba2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	e01d      	b.n	8001bde <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a14      	ldr	r2, [pc, #80]	@ (8001bf8 <DFSDM_GetChannelFromInstance+0x88>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d102      	bne.n	8001bb0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001baa:	2304      	movs	r3, #4
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	e016      	b.n	8001bde <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a12      	ldr	r2, [pc, #72]	@ (8001bfc <DFSDM_GetChannelFromInstance+0x8c>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d102      	bne.n	8001bbe <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001bb8:	2305      	movs	r3, #5
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	e00f      	b.n	8001bde <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a0f      	ldr	r2, [pc, #60]	@ (8001c00 <DFSDM_GetChannelFromInstance+0x90>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d102      	bne.n	8001bcc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001bc6:	2306      	movs	r3, #6
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	e008      	b.n	8001bde <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a0d      	ldr	r2, [pc, #52]	@ (8001c04 <DFSDM_GetChannelFromInstance+0x94>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d102      	bne.n	8001bda <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001bd4:	2307      	movs	r3, #7
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	e001      	b.n	8001bde <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001bde:	68fb      	ldr	r3, [r7, #12]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	40016000 	.word	0x40016000
 8001bf0:	40016020 	.word	0x40016020
 8001bf4:	40016040 	.word	0x40016040
 8001bf8:	40016080 	.word	0x40016080
 8001bfc:	400160a0 	.word	0x400160a0
 8001c00:	400160c0 	.word	0x400160c0
 8001c04:	400160e0 	.word	0x400160e0

08001c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c16:	e17f      	b.n	8001f18 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	fa01 f303 	lsl.w	r3, r1, r3
 8001c24:	4013      	ands	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8171 	beq.w	8001f12 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d005      	beq.n	8001c48 <HAL_GPIO_Init+0x40>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d130      	bne.n	8001caa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	2203      	movs	r2, #3
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c7e:	2201      	movs	r2, #1
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	f003 0201 	and.w	r2, r3, #1
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d118      	bne.n	8001ce8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	08db      	lsrs	r3, r3, #3
 8001cd2:	f003 0201 	and.w	r2, r3, #1
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d017      	beq.n	8001d24 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	2203      	movs	r2, #3
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d123      	bne.n	8001d78 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	08da      	lsrs	r2, r3, #3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3208      	adds	r2, #8
 8001d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	220f      	movs	r2, #15
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	691a      	ldr	r2, [r3, #16]
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	08da      	lsrs	r2, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3208      	adds	r2, #8
 8001d72:	6939      	ldr	r1, [r7, #16]
 8001d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	2203      	movs	r2, #3
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0203 	and.w	r2, r3, #3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 80ac 	beq.w	8001f12 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	4b5f      	ldr	r3, [pc, #380]	@ (8001f38 <HAL_GPIO_Init+0x330>)
 8001dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dbe:	4a5e      	ldr	r2, [pc, #376]	@ (8001f38 <HAL_GPIO_Init+0x330>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dc6:	4b5c      	ldr	r3, [pc, #368]	@ (8001f38 <HAL_GPIO_Init+0x330>)
 8001dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dd2:	4a5a      	ldr	r2, [pc, #360]	@ (8001f3c <HAL_GPIO_Init+0x334>)
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	3302      	adds	r3, #2
 8001dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dde:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	220f      	movs	r2, #15
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4013      	ands	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001dfc:	d025      	beq.n	8001e4a <HAL_GPIO_Init+0x242>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a4f      	ldr	r2, [pc, #316]	@ (8001f40 <HAL_GPIO_Init+0x338>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d01f      	beq.n	8001e46 <HAL_GPIO_Init+0x23e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a4e      	ldr	r2, [pc, #312]	@ (8001f44 <HAL_GPIO_Init+0x33c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d019      	beq.n	8001e42 <HAL_GPIO_Init+0x23a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a4d      	ldr	r2, [pc, #308]	@ (8001f48 <HAL_GPIO_Init+0x340>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_GPIO_Init+0x236>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a4c      	ldr	r2, [pc, #304]	@ (8001f4c <HAL_GPIO_Init+0x344>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d00d      	beq.n	8001e3a <HAL_GPIO_Init+0x232>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a4b      	ldr	r2, [pc, #300]	@ (8001f50 <HAL_GPIO_Init+0x348>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d007      	beq.n	8001e36 <HAL_GPIO_Init+0x22e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a4a      	ldr	r2, [pc, #296]	@ (8001f54 <HAL_GPIO_Init+0x34c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d101      	bne.n	8001e32 <HAL_GPIO_Init+0x22a>
 8001e2e:	2306      	movs	r3, #6
 8001e30:	e00c      	b.n	8001e4c <HAL_GPIO_Init+0x244>
 8001e32:	2307      	movs	r3, #7
 8001e34:	e00a      	b.n	8001e4c <HAL_GPIO_Init+0x244>
 8001e36:	2305      	movs	r3, #5
 8001e38:	e008      	b.n	8001e4c <HAL_GPIO_Init+0x244>
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x244>
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e004      	b.n	8001e4c <HAL_GPIO_Init+0x244>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e002      	b.n	8001e4c <HAL_GPIO_Init+0x244>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_GPIO_Init+0x244>
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	f002 0203 	and.w	r2, r2, #3
 8001e52:	0092      	lsls	r2, r2, #2
 8001e54:	4093      	lsls	r3, r2
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e5c:	4937      	ldr	r1, [pc, #220]	@ (8001f3c <HAL_GPIO_Init+0x334>)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	3302      	adds	r3, #2
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f58 <HAL_GPIO_Init+0x350>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e8e:	4a32      	ldr	r2, [pc, #200]	@ (8001f58 <HAL_GPIO_Init+0x350>)
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e94:	4b30      	ldr	r3, [pc, #192]	@ (8001f58 <HAL_GPIO_Init+0x350>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001eb8:	4a27      	ldr	r2, [pc, #156]	@ (8001f58 <HAL_GPIO_Init+0x350>)
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ebe:	4b26      	ldr	r3, [pc, #152]	@ (8001f58 <HAL_GPIO_Init+0x350>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f58 <HAL_GPIO_Init+0x350>)
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f58 <HAL_GPIO_Init+0x350>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f0c:	4a12      	ldr	r2, [pc, #72]	@ (8001f58 <HAL_GPIO_Init+0x350>)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	3301      	adds	r3, #1
 8001f16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f47f ae78 	bne.w	8001c18 <HAL_GPIO_Init+0x10>
  }
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	371c      	adds	r7, #28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40010000 	.word	0x40010000
 8001f40:	48000400 	.word	0x48000400
 8001f44:	48000800 	.word	0x48000800
 8001f48:	48000c00 	.word	0x48000c00
 8001f4c:	48001000 	.word	0x48001000
 8001f50:	48001400 	.word	0x48001400
 8001f54:	48001800 	.word	0x48001800
 8001f58:	40010400 	.word	0x40010400

08001f5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	887b      	ldrh	r3, [r7, #2]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d002      	beq.n	8001f7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f74:	2301      	movs	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
 8001f78:	e001      	b.n	8001f7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	807b      	strh	r3, [r7, #2]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f9c:	787b      	ldrb	r3, [r7, #1]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fa2:	887a      	ldrh	r2, [r7, #2]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fa8:	e002      	b.n	8001fb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001faa:	887a      	ldrh	r2, [r7, #2]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fce:	887a      	ldrh	r2, [r7, #2]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	041a      	lsls	r2, r3, #16
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	43d9      	mvns	r1, r3
 8001fda:	887b      	ldrh	r3, [r7, #2]
 8001fdc:	400b      	ands	r3, r1
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	619a      	str	r2, [r3, #24]
}
 8001fe4:	bf00      	nop
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ffa:	4b08      	ldr	r3, [pc, #32]	@ (800201c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ffc:	695a      	ldr	r2, [r3, #20]
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	4013      	ands	r3, r2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d006      	beq.n	8002014 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002006:	4a05      	ldr	r2, [pc, #20]	@ (800201c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002008:	88fb      	ldrh	r3, [r7, #6]
 800200a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800200c:	88fb      	ldrh	r3, [r7, #6]
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fea8 	bl	8000d64 <HAL_GPIO_EXTI_Callback>
  }
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40010400 	.word	0x40010400

08002020 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e08d      	b.n	800214e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d106      	bne.n	800204c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff f844 	bl	80010d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2224      	movs	r2, #36	@ 0x24
 8002050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0201 	bic.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002070:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002080:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d107      	bne.n	800209a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	e006      	b.n	80020a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80020a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d108      	bne.n	80020c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	e007      	b.n	80020d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691a      	ldr	r2, [r3, #16]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69d9      	ldr	r1, [r3, #28]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1a      	ldr	r2, [r3, #32]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0201 	orr.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2220      	movs	r2, #32
 800213a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b20      	cmp	r3, #32
 800216a:	d138      	bne.n	80021de <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002176:	2302      	movs	r3, #2
 8002178:	e032      	b.n	80021e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2224      	movs	r2, #36	@ 0x24
 8002186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0201 	bic.w	r2, r2, #1
 8002198:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80021a8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6819      	ldr	r1, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f042 0201 	orr.w	r2, r2, #1
 80021c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2220      	movs	r2, #32
 80021ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	e000      	b.n	80021e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021de:	2302      	movs	r3, #2
  }
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b20      	cmp	r3, #32
 8002200:	d139      	bne.n	8002276 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800220c:	2302      	movs	r3, #2
 800220e:	e033      	b.n	8002278 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2224      	movs	r2, #36	@ 0x24
 800221c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0201 	bic.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800223e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f042 0201 	orr.w	r2, r2, #1
 8002260:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2220      	movs	r2, #32
 8002266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	e000      	b.n	8002278 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002276:	2302      	movs	r3, #2
  }
}
 8002278:	4618      	mov	r0, r3
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af02      	add	r7, sp, #8
 800228a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e101      	b.n	800249a <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d106      	bne.n	80022b0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff f8c2 	bl	8001434 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2203      	movs	r2, #3
 80022b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f002 fdec 	bl	8004ea0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	7c1a      	ldrb	r2, [r3, #16]
 80022d0:	f88d 2000 	strb.w	r2, [sp]
 80022d4:	3304      	adds	r3, #4
 80022d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022d8:	f002 fdb5 	bl	8004e46 <USB_CoreInit>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2202      	movs	r2, #2
 80022e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e0d5      	b.n	800249a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2100      	movs	r1, #0
 80022f4:	4618      	mov	r0, r3
 80022f6:	f002 fde4 	bl	8004ec2 <USB_SetCurrentMode>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0c6      	b.n	800249a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800230c:	2300      	movs	r3, #0
 800230e:	73fb      	strb	r3, [r7, #15]
 8002310:	e04a      	b.n	80023a8 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002312:	7bfa      	ldrb	r2, [r7, #15]
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4413      	add	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	3315      	adds	r3, #21
 8002322:	2201      	movs	r2, #1
 8002324:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002326:	7bfa      	ldrb	r2, [r7, #15]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	3314      	adds	r3, #20
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800233a:	7bfa      	ldrb	r2, [r7, #15]
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	b298      	uxth	r0, r3
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4413      	add	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	440b      	add	r3, r1
 800234c:	332e      	adds	r3, #46	@ 0x2e
 800234e:	4602      	mov	r2, r0
 8002350:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	3318      	adds	r3, #24
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002366:	7bfa      	ldrb	r2, [r7, #15]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	331c      	adds	r3, #28
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4413      	add	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	440b      	add	r3, r1
 8002388:	3320      	adds	r3, #32
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	3324      	adds	r3, #36	@ 0x24
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	3301      	adds	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	791b      	ldrb	r3, [r3, #4]
 80023ac:	7bfa      	ldrb	r2, [r7, #15]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d3af      	bcc.n	8002312 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b2:	2300      	movs	r3, #0
 80023b4:	73fb      	strb	r3, [r7, #15]
 80023b6:	e044      	b.n	8002442 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023b8:	7bfa      	ldrb	r2, [r7, #15]
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	4413      	add	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023ce:	7bfa      	ldrb	r2, [r7, #15]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023e4:	7bfa      	ldrb	r2, [r7, #15]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4413      	add	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023fa:	7bfa      	ldrb	r2, [r7, #15]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4413      	add	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4413      	add	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002426:	7bfa      	ldrb	r2, [r7, #15]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	4413      	add	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	3301      	adds	r3, #1
 8002440:	73fb      	strb	r3, [r7, #15]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	791b      	ldrb	r3, [r3, #4]
 8002446:	7bfa      	ldrb	r2, [r7, #15]
 8002448:	429a      	cmp	r2, r3
 800244a:	d3b5      	bcc.n	80023b8 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6818      	ldr	r0, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	7c1a      	ldrb	r2, [r3, #16]
 8002454:	f88d 2000 	strb.w	r2, [sp]
 8002458:	3304      	adds	r3, #4
 800245a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800245c:	f002 fd7e 	bl	8004f5c <USB_DevInit>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d005      	beq.n	8002472 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2202      	movs	r2, #2
 800246a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e013      	b.n	800249a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	7b1b      	ldrb	r3, [r3, #12]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d102      	bne.n	800248e <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 f80a 	bl	80024a2 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f002 ff23 	bl	80052de <USB_DevDisconnect>

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b085      	sub	sp, #20
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024d4:	f043 0303 	orr.w	r3, r3, #3
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024f0:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a04      	ldr	r2, [pc, #16]	@ (8002508 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024fa:	6013      	str	r3, [r2, #0]
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40007000 	.word	0x40007000

0800250c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002510:	4b04      	ldr	r3, [pc, #16]	@ (8002524 <HAL_PWREx_GetVoltageRange+0x18>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40007000 	.word	0x40007000

08002528 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002536:	d130      	bne.n	800259a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002538:	4b23      	ldr	r3, [pc, #140]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002540:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002544:	d038      	beq.n	80025b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002546:	4b20      	ldr	r3, [pc, #128]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800254e:	4a1e      	ldr	r2, [pc, #120]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002550:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002554:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002556:	4b1d      	ldr	r3, [pc, #116]	@ (80025cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2232      	movs	r2, #50	@ 0x32
 800255c:	fb02 f303 	mul.w	r3, r2, r3
 8002560:	4a1b      	ldr	r2, [pc, #108]	@ (80025d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	0c9b      	lsrs	r3, r3, #18
 8002568:	3301      	adds	r3, #1
 800256a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800256c:	e002      	b.n	8002574 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	3b01      	subs	r3, #1
 8002572:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002574:	4b14      	ldr	r3, [pc, #80]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800257c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002580:	d102      	bne.n	8002588 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1f2      	bne.n	800256e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002588:	4b0f      	ldr	r3, [pc, #60]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002594:	d110      	bne.n	80025b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e00f      	b.n	80025ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800259a:	4b0b      	ldr	r3, [pc, #44]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025a6:	d007      	beq.n	80025b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025a8:	4b07      	ldr	r3, [pc, #28]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025b0:	4a05      	ldr	r2, [pc, #20]	@ (80025c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40007000 	.word	0x40007000
 80025cc:	20000000 	.word	0x20000000
 80025d0:	431bde83 	.word	0x431bde83

080025d4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80025d8:	4b05      	ldr	r3, [pc, #20]	@ (80025f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4a04      	ldr	r2, [pc, #16]	@ (80025f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80025de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025e2:	6053      	str	r3, [r2, #4]
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40007000 	.word	0x40007000

080025f4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80025fc:	f7ff f8b6 	bl	800176c <HAL_GetTick>
 8002600:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e063      	b.n	80026d4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10b      	bne.n	8002630 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7fe fdb5 	bl	8001190 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002626:	f241 3188 	movw	r1, #5000	@ 0x1388
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f858 	bl	80026e0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	3b01      	subs	r3, #1
 8002640:	021a      	lsls	r2, r3, #8
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	2120      	movs	r1, #32
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f850 	bl	80026fc <QSPI_WaitFlagStateUntilTimeout>
 800265c:	4603      	mov	r3, r0
 800265e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002660:	7afb      	ldrb	r3, [r7, #11]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d131      	bne.n	80026ca <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002670:	f023 0310 	bic.w	r3, r3, #16
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6852      	ldr	r2, [r2, #4]
 8002678:	0611      	lsls	r1, r2, #24
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	68d2      	ldr	r2, [r2, #12]
 800267e:	4311      	orrs	r1, r2
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	430b      	orrs	r3, r1
 8002686:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	4b13      	ldr	r3, [pc, #76]	@ (80026dc <HAL_QSPI_Init+0xe8>)
 8002690:	4013      	ands	r3, r2
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6912      	ldr	r2, [r2, #16]
 8002696:	0411      	lsls	r1, r2, #16
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6952      	ldr	r2, [r2, #20]
 800269c:	4311      	orrs	r1, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6992      	ldr	r2, [r2, #24]
 80026a2:	4311      	orrs	r1, r2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	430b      	orrs	r3, r1
 80026aa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80026d2:	7afb      	ldrb	r3, [r7, #11]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	ffe0f8fe 	.word	0xffe0f8fe

080026e0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800270c:	e01a      	b.n	8002744 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002714:	d016      	beq.n	8002744 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002716:	f7ff f829 	bl	800176c <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	429a      	cmp	r2, r3
 8002724:	d302      	bcc.n	800272c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10b      	bne.n	8002744 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2204      	movs	r2, #4
 8002730:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002738:	f043 0201 	orr.w	r2, r3, #1
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e00e      	b.n	8002762 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	4013      	ands	r3, r2
 800274e:	2b00      	cmp	r3, #0
 8002750:	bf14      	ite	ne
 8002752:	2301      	movne	r3, #1
 8002754:	2300      	moveq	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	429a      	cmp	r2, r3
 800275e:	d1d6      	bne.n	800270e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e3ca      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800277e:	4b97      	ldr	r3, [pc, #604]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002788:	4b94      	ldr	r3, [pc, #592]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 80e4 	beq.w	8002968 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d007      	beq.n	80027b6 <HAL_RCC_OscConfig+0x4a>
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	2b0c      	cmp	r3, #12
 80027aa:	f040 808b 	bne.w	80028c4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	f040 8087 	bne.w	80028c4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027b6:	4b89      	ldr	r3, [pc, #548]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_RCC_OscConfig+0x62>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e3a2      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1a      	ldr	r2, [r3, #32]
 80027d2:	4b82      	ldr	r3, [pc, #520]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d004      	beq.n	80027e8 <HAL_RCC_OscConfig+0x7c>
 80027de:	4b7f      	ldr	r3, [pc, #508]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027e6:	e005      	b.n	80027f4 <HAL_RCC_OscConfig+0x88>
 80027e8:	4b7c      	ldr	r3, [pc, #496]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80027ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027ee:	091b      	lsrs	r3, r3, #4
 80027f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d223      	bcs.n	8002840 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 fd55 	bl	80032ac <RCC_SetFlashLatencyFromMSIRange>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e383      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800280c:	4b73      	ldr	r3, [pc, #460]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a72      	ldr	r2, [pc, #456]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002812:	f043 0308 	orr.w	r3, r3, #8
 8002816:	6013      	str	r3, [r2, #0]
 8002818:	4b70      	ldr	r3, [pc, #448]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	496d      	ldr	r1, [pc, #436]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800282a:	4b6c      	ldr	r3, [pc, #432]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	4968      	ldr	r1, [pc, #416]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
 800283e:	e025      	b.n	800288c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002840:	4b66      	ldr	r3, [pc, #408]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a65      	ldr	r2, [pc, #404]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002846:	f043 0308 	orr.w	r3, r3, #8
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b63      	ldr	r3, [pc, #396]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	4960      	ldr	r1, [pc, #384]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800285e:	4b5f      	ldr	r3, [pc, #380]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	021b      	lsls	r3, r3, #8
 800286c:	495b      	ldr	r1, [pc, #364]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800286e:	4313      	orrs	r3, r2
 8002870:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d109      	bne.n	800288c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fd15 	bl	80032ac <RCC_SetFlashLatencyFromMSIRange>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e343      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800288c:	f000 fc4a 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	4b52      	ldr	r3, [pc, #328]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	091b      	lsrs	r3, r3, #4
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	4950      	ldr	r1, [pc, #320]	@ (80029e0 <HAL_RCC_OscConfig+0x274>)
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
 80028a8:	4a4e      	ldr	r2, [pc, #312]	@ (80029e4 <HAL_RCC_OscConfig+0x278>)
 80028aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028ac:	4b4e      	ldr	r3, [pc, #312]	@ (80029e8 <HAL_RCC_OscConfig+0x27c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fe ff0b 	bl	80016cc <HAL_InitTick>
 80028b6:	4603      	mov	r3, r0
 80028b8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d052      	beq.n	8002966 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	e327      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d032      	beq.n	8002932 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028cc:	4b43      	ldr	r3, [pc, #268]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a42      	ldr	r2, [pc, #264]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028d8:	f7fe ff48 	bl	800176c <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028e0:	f7fe ff44 	bl	800176c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e310      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028f2:	4b3a      	ldr	r3, [pc, #232]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028fe:	4b37      	ldr	r3, [pc, #220]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a36      	ldr	r2, [pc, #216]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002904:	f043 0308 	orr.w	r3, r3, #8
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	4b34      	ldr	r3, [pc, #208]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	4931      	ldr	r1, [pc, #196]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002918:	4313      	orrs	r3, r2
 800291a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800291c:	4b2f      	ldr	r3, [pc, #188]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	492c      	ldr	r1, [pc, #176]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
 8002930:	e01a      	b.n	8002968 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002932:	4b2a      	ldr	r3, [pc, #168]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a29      	ldr	r2, [pc, #164]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800293e:	f7fe ff15 	bl	800176c <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002946:	f7fe ff11 	bl	800176c <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e2dd      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002958:	4b20      	ldr	r3, [pc, #128]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1f0      	bne.n	8002946 <HAL_RCC_OscConfig+0x1da>
 8002964:	e000      	b.n	8002968 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002966:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d074      	beq.n	8002a5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2b08      	cmp	r3, #8
 8002978:	d005      	beq.n	8002986 <HAL_RCC_OscConfig+0x21a>
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	2b0c      	cmp	r3, #12
 800297e:	d10e      	bne.n	800299e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2b03      	cmp	r3, #3
 8002984:	d10b      	bne.n	800299e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002986:	4b15      	ldr	r3, [pc, #84]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d064      	beq.n	8002a5c <HAL_RCC_OscConfig+0x2f0>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d160      	bne.n	8002a5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e2ba      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029a6:	d106      	bne.n	80029b6 <HAL_RCC_OscConfig+0x24a>
 80029a8:	4b0c      	ldr	r3, [pc, #48]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a0b      	ldr	r2, [pc, #44]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80029ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	e026      	b.n	8002a04 <HAL_RCC_OscConfig+0x298>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029be:	d115      	bne.n	80029ec <HAL_RCC_OscConfig+0x280>
 80029c0:	4b06      	ldr	r3, [pc, #24]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a05      	ldr	r2, [pc, #20]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80029c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	4b03      	ldr	r3, [pc, #12]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a02      	ldr	r2, [pc, #8]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80029d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	e014      	b.n	8002a04 <HAL_RCC_OscConfig+0x298>
 80029da:	bf00      	nop
 80029dc:	40021000 	.word	0x40021000
 80029e0:	08009b60 	.word	0x08009b60
 80029e4:	20000000 	.word	0x20000000
 80029e8:	20000004 	.word	0x20000004
 80029ec:	4ba0      	ldr	r3, [pc, #640]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a9f      	ldr	r2, [pc, #636]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 80029f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029f6:	6013      	str	r3, [r2, #0]
 80029f8:	4b9d      	ldr	r3, [pc, #628]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a9c      	ldr	r2, [pc, #624]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 80029fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d013      	beq.n	8002a34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7fe feae 	bl	800176c <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a14:	f7fe feaa 	bl	800176c <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	@ 0x64
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e276      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a26:	4b92      	ldr	r3, [pc, #584]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x2a8>
 8002a32:	e014      	b.n	8002a5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7fe fe9a 	bl	800176c <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7fe fe96 	bl	800176c <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	@ 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e262      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a4e:	4b88      	ldr	r3, [pc, #544]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x2d0>
 8002a5a:	e000      	b.n	8002a5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d060      	beq.n	8002b2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_OscConfig+0x310>
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2b0c      	cmp	r3, #12
 8002a74:	d119      	bne.n	8002aaa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d116      	bne.n	8002aaa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a7c:	4b7c      	ldr	r3, [pc, #496]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_OscConfig+0x328>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e23f      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a94:	4b76      	ldr	r3, [pc, #472]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	061b      	lsls	r3, r3, #24
 8002aa2:	4973      	ldr	r1, [pc, #460]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aa8:	e040      	b.n	8002b2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d023      	beq.n	8002afa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab2:	4b6f      	ldr	r3, [pc, #444]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a6e      	ldr	r2, [pc, #440]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7fe fe55 	bl	800176c <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac6:	f7fe fe51 	bl	800176c <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e21d      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ad8:	4b65      	ldr	r3, [pc, #404]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae4:	4b62      	ldr	r3, [pc, #392]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	061b      	lsls	r3, r3, #24
 8002af2:	495f      	ldr	r1, [pc, #380]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	604b      	str	r3, [r1, #4]
 8002af8:	e018      	b.n	8002b2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002afa:	4b5d      	ldr	r3, [pc, #372]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a5c      	ldr	r2, [pc, #368]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002b00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7fe fe31 	bl	800176c <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0e:	f7fe fe2d 	bl	800176c <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e1f9      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b20:	4b53      	ldr	r3, [pc, #332]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f0      	bne.n	8002b0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d03c      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d01c      	beq.n	8002b7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b40:	4b4b      	ldr	r3, [pc, #300]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b46:	4a4a      	ldr	r2, [pc, #296]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b50:	f7fe fe0c 	bl	800176c <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b58:	f7fe fe08 	bl	800176c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e1d4      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b6a:	4b41      	ldr	r3, [pc, #260]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0ef      	beq.n	8002b58 <HAL_RCC_OscConfig+0x3ec>
 8002b78:	e01b      	b.n	8002bb2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b7a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b80:	4a3b      	ldr	r2, [pc, #236]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002b82:	f023 0301 	bic.w	r3, r3, #1
 8002b86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8a:	f7fe fdef 	bl	800176c <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b92:	f7fe fdeb 	bl	800176c <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e1b7      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ba4:	4b32      	ldr	r3, [pc, #200]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1ef      	bne.n	8002b92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80a6 	beq.w	8002d0c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10d      	bne.n	8002bec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd0:	4b27      	ldr	r3, [pc, #156]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd4:	4a26      	ldr	r2, [pc, #152]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002bd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bda:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bdc:	4b24      	ldr	r3, [pc, #144]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be8:	2301      	movs	r3, #1
 8002bea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bec:	4b21      	ldr	r3, [pc, #132]	@ (8002c74 <HAL_RCC_OscConfig+0x508>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d118      	bne.n	8002c2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bf8:	4b1e      	ldr	r3, [pc, #120]	@ (8002c74 <HAL_RCC_OscConfig+0x508>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8002c74 <HAL_RCC_OscConfig+0x508>)
 8002bfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c04:	f7fe fdb2 	bl	800176c <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0c:	f7fe fdae 	bl	800176c <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e17a      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c1e:	4b15      	ldr	r3, [pc, #84]	@ (8002c74 <HAL_RCC_OscConfig+0x508>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d108      	bne.n	8002c44 <HAL_RCC_OscConfig+0x4d8>
 8002c32:	4b0f      	ldr	r3, [pc, #60]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c38:	4a0d      	ldr	r2, [pc, #52]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c42:	e029      	b.n	8002c98 <HAL_RCC_OscConfig+0x52c>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2b05      	cmp	r3, #5
 8002c4a:	d115      	bne.n	8002c78 <HAL_RCC_OscConfig+0x50c>
 8002c4c:	4b08      	ldr	r3, [pc, #32]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c52:	4a07      	ldr	r2, [pc, #28]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002c54:	f043 0304 	orr.w	r3, r3, #4
 8002c58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c5c:	4b04      	ldr	r3, [pc, #16]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c62:	4a03      	ldr	r2, [pc, #12]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c6c:	e014      	b.n	8002c98 <HAL_RCC_OscConfig+0x52c>
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40007000 	.word	0x40007000
 8002c78:	4b9c      	ldr	r3, [pc, #624]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7e:	4a9b      	ldr	r2, [pc, #620]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c88:	4b98      	ldr	r3, [pc, #608]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8e:	4a97      	ldr	r2, [pc, #604]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002c90:	f023 0304 	bic.w	r3, r3, #4
 8002c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d016      	beq.n	8002cce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca0:	f7fe fd64 	bl	800176c <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ca6:	e00a      	b.n	8002cbe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca8:	f7fe fd60 	bl	800176c <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e12a      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cbe:	4b8b      	ldr	r3, [pc, #556]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0ed      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x53c>
 8002ccc:	e015      	b.n	8002cfa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cce:	f7fe fd4d 	bl	800176c <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cd4:	e00a      	b.n	8002cec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd6:	f7fe fd49 	bl	800176c <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e113      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cec:	4b7f      	ldr	r3, [pc, #508]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1ed      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cfa:	7ffb      	ldrb	r3, [r7, #31]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d105      	bne.n	8002d0c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d00:	4b7a      	ldr	r3, [pc, #488]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d04:	4a79      	ldr	r2, [pc, #484]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002d06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d0a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80fe 	beq.w	8002f12 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	f040 80d0 	bne.w	8002ec0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d20:	4b72      	ldr	r3, [pc, #456]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f003 0203 	and.w	r2, r3, #3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d130      	bne.n	8002d96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d127      	bne.n	8002d96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d50:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d11f      	bne.n	8002d96 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d60:	2a07      	cmp	r2, #7
 8002d62:	bf14      	ite	ne
 8002d64:	2201      	movne	r2, #1
 8002d66:	2200      	moveq	r2, #0
 8002d68:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d113      	bne.n	8002d96 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d109      	bne.n	8002d96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8c:	085b      	lsrs	r3, r3, #1
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d06e      	beq.n	8002e74 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b0c      	cmp	r3, #12
 8002d9a:	d069      	beq.n	8002e70 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d9c:	4b53      	ldr	r3, [pc, #332]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d105      	bne.n	8002db4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002da8:	4b50      	ldr	r3, [pc, #320]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0ad      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002db8:	4b4c      	ldr	r3, [pc, #304]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a4b      	ldr	r2, [pc, #300]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002dbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dc2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dc4:	f7fe fcd2 	bl	800176c <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dcc:	f7fe fcce 	bl	800176c <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e09a      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dde:	4b43      	ldr	r3, [pc, #268]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dea:	4b40      	ldr	r3, [pc, #256]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	4b40      	ldr	r3, [pc, #256]	@ (8002ef0 <HAL_RCC_OscConfig+0x784>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002dfa:	3a01      	subs	r2, #1
 8002dfc:	0112      	lsls	r2, r2, #4
 8002dfe:	4311      	orrs	r1, r2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e04:	0212      	lsls	r2, r2, #8
 8002e06:	4311      	orrs	r1, r2
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e0c:	0852      	lsrs	r2, r2, #1
 8002e0e:	3a01      	subs	r2, #1
 8002e10:	0552      	lsls	r2, r2, #21
 8002e12:	4311      	orrs	r1, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e18:	0852      	lsrs	r2, r2, #1
 8002e1a:	3a01      	subs	r2, #1
 8002e1c:	0652      	lsls	r2, r2, #25
 8002e1e:	4311      	orrs	r1, r2
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e24:	0912      	lsrs	r2, r2, #4
 8002e26:	0452      	lsls	r2, r2, #17
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	4930      	ldr	r1, [pc, #192]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e30:	4b2e      	ldr	r3, [pc, #184]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a2d      	ldr	r2, [pc, #180]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4a2a      	ldr	r2, [pc, #168]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e48:	f7fe fc90 	bl	800176c <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e50:	f7fe fc8c 	bl	800176c <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e058      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e62:	4b22      	ldr	r3, [pc, #136]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e6e:	e050      	b.n	8002f12 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e04f      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e74:	4b1d      	ldr	r3, [pc, #116]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d148      	bne.n	8002f12 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e80:	4b1a      	ldr	r3, [pc, #104]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a19      	ldr	r2, [pc, #100]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e8c:	4b17      	ldr	r3, [pc, #92]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4a16      	ldr	r2, [pc, #88]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e98:	f7fe fc68 	bl	800176c <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea0:	f7fe fc64 	bl	800176c <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e030      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x734>
 8002ebe:	e028      	b.n	8002f12 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	2b0c      	cmp	r3, #12
 8002ec4:	d023      	beq.n	8002f0e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec6:	4b09      	ldr	r3, [pc, #36]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a08      	ldr	r2, [pc, #32]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002ecc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed2:	f7fe fc4b 	bl	800176c <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ed8:	e00c      	b.n	8002ef4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eda:	f7fe fc47 	bl	800176c <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d905      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e013      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ef4:	4b09      	ldr	r3, [pc, #36]	@ (8002f1c <HAL_RCC_OscConfig+0x7b0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1ec      	bne.n	8002eda <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f00:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <HAL_RCC_OscConfig+0x7b0>)
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	4905      	ldr	r1, [pc, #20]	@ (8002f1c <HAL_RCC_OscConfig+0x7b0>)
 8002f06:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <HAL_RCC_OscConfig+0x7b4>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60cb      	str	r3, [r1, #12]
 8002f0c:	e001      	b.n	8002f12 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3720      	adds	r7, #32
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	feeefffc 	.word	0xfeeefffc

08002f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0e7      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f38:	4b75      	ldr	r3, [pc, #468]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d910      	bls.n	8002f68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f46:	4b72      	ldr	r3, [pc, #456]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 0207 	bic.w	r2, r3, #7
 8002f4e:	4970      	ldr	r1, [pc, #448]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f56:	4b6e      	ldr	r3, [pc, #440]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d001      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0cf      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d010      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	4b66      	ldr	r3, [pc, #408]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d908      	bls.n	8002f96 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f84:	4b63      	ldr	r3, [pc, #396]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	4960      	ldr	r1, [pc, #384]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d04c      	beq.n	800303c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d107      	bne.n	8002fba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002faa:	4b5a      	ldr	r3, [pc, #360]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d121      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e0a6      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d107      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fc2:	4b54      	ldr	r3, [pc, #336]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d115      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e09a      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d107      	bne.n	8002fea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fda:	4b4e      	ldr	r3, [pc, #312]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e08e      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fea:	4b4a      	ldr	r3, [pc, #296]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e086      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ffa:	4b46      	ldr	r3, [pc, #280]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f023 0203 	bic.w	r2, r3, #3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4943      	ldr	r1, [pc, #268]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8003008:	4313      	orrs	r3, r2
 800300a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800300c:	f7fe fbae 	bl	800176c <HAL_GetTick>
 8003010:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003012:	e00a      	b.n	800302a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003014:	f7fe fbaa 	bl	800176c <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e06e      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302a:	4b3a      	ldr	r3, [pc, #232]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 020c 	and.w	r2, r3, #12
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	429a      	cmp	r2, r3
 800303a:	d1eb      	bne.n	8003014 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d010      	beq.n	800306a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	4b31      	ldr	r3, [pc, #196]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003054:	429a      	cmp	r2, r3
 8003056:	d208      	bcs.n	800306a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003058:	4b2e      	ldr	r3, [pc, #184]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	492b      	ldr	r1, [pc, #172]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8003066:	4313      	orrs	r3, r2
 8003068:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800306a:	4b29      	ldr	r3, [pc, #164]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d210      	bcs.n	800309a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003078:	4b25      	ldr	r3, [pc, #148]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f023 0207 	bic.w	r2, r3, #7
 8003080:	4923      	ldr	r1, [pc, #140]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	4313      	orrs	r3, r2
 8003086:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003088:	4b21      	ldr	r3, [pc, #132]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d001      	beq.n	800309a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e036      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d008      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	4918      	ldr	r1, [pc, #96]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d009      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030c4:	4b13      	ldr	r3, [pc, #76]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4910      	ldr	r1, [pc, #64]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030d8:	f000 f824 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b0d      	ldr	r3, [pc, #52]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	091b      	lsrs	r3, r3, #4
 80030e4:	f003 030f 	and.w	r3, r3, #15
 80030e8:	490b      	ldr	r1, [pc, #44]	@ (8003118 <HAL_RCC_ClockConfig+0x1f4>)
 80030ea:	5ccb      	ldrb	r3, [r1, r3]
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
 80030f4:	4a09      	ldr	r2, [pc, #36]	@ (800311c <HAL_RCC_ClockConfig+0x1f8>)
 80030f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030f8:	4b09      	ldr	r3, [pc, #36]	@ (8003120 <HAL_RCC_ClockConfig+0x1fc>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fe fae5 	bl	80016cc <HAL_InitTick>
 8003102:	4603      	mov	r3, r0
 8003104:	72fb      	strb	r3, [r7, #11]

  return status;
 8003106:	7afb      	ldrb	r3, [r7, #11]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40022000 	.word	0x40022000
 8003114:	40021000 	.word	0x40021000
 8003118:	08009b60 	.word	0x08009b60
 800311c:	20000000 	.word	0x20000000
 8003120:	20000004 	.word	0x20000004

08003124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003124:	b480      	push	{r7}
 8003126:	b089      	sub	sp, #36	@ 0x24
 8003128:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003132:	4b3e      	ldr	r3, [pc, #248]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800313c:	4b3b      	ldr	r3, [pc, #236]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_RCC_GetSysClockFreq+0x34>
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	2b0c      	cmp	r3, #12
 8003150:	d121      	bne.n	8003196 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d11e      	bne.n	8003196 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003158:	4b34      	ldr	r3, [pc, #208]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d107      	bne.n	8003174 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003164:	4b31      	ldr	r3, [pc, #196]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 8003166:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800316a:	0a1b      	lsrs	r3, r3, #8
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	e005      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003174:	4b2d      	ldr	r3, [pc, #180]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003180:	4a2b      	ldr	r2, [pc, #172]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003188:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10d      	bne.n	80031ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003194:	e00a      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	2b04      	cmp	r3, #4
 800319a:	d102      	bne.n	80031a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800319c:	4b25      	ldr	r3, [pc, #148]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x110>)
 800319e:	61bb      	str	r3, [r7, #24]
 80031a0:	e004      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031a8:	4b23      	ldr	r3, [pc, #140]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x114>)
 80031aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	2b0c      	cmp	r3, #12
 80031b0:	d134      	bne.n	800321c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031b2:	4b1e      	ldr	r3, [pc, #120]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d003      	beq.n	80031ca <HAL_RCC_GetSysClockFreq+0xa6>
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d003      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0xac>
 80031c8:	e005      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x110>)
 80031cc:	617b      	str	r3, [r7, #20]
      break;
 80031ce:	e005      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031d0:	4b19      	ldr	r3, [pc, #100]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x114>)
 80031d2:	617b      	str	r3, [r7, #20]
      break;
 80031d4:	e002      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	617b      	str	r3, [r7, #20]
      break;
 80031da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031dc:	4b13      	ldr	r3, [pc, #76]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	091b      	lsrs	r3, r3, #4
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	3301      	adds	r3, #1
 80031e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031ea:	4b10      	ldr	r3, [pc, #64]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	0a1b      	lsrs	r3, r3, #8
 80031f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	fb03 f202 	mul.w	r2, r3, r2
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003200:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003202:	4b0a      	ldr	r3, [pc, #40]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	0e5b      	lsrs	r3, r3, #25
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	3301      	adds	r3, #1
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	fbb2 f3f3 	udiv	r3, r2, r3
 800321a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800321c:	69bb      	ldr	r3, [r7, #24]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3724      	adds	r7, #36	@ 0x24
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40021000 	.word	0x40021000
 8003230:	08009b78 	.word	0x08009b78
 8003234:	00f42400 	.word	0x00f42400
 8003238:	007a1200 	.word	0x007a1200

0800323c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003240:	4b03      	ldr	r3, [pc, #12]	@ (8003250 <HAL_RCC_GetHCLKFreq+0x14>)
 8003242:	681b      	ldr	r3, [r3, #0]
}
 8003244:	4618      	mov	r0, r3
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	20000000 	.word	0x20000000

08003254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003258:	f7ff fff0 	bl	800323c <HAL_RCC_GetHCLKFreq>
 800325c:	4602      	mov	r2, r0
 800325e:	4b06      	ldr	r3, [pc, #24]	@ (8003278 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	0a1b      	lsrs	r3, r3, #8
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	4904      	ldr	r1, [pc, #16]	@ (800327c <HAL_RCC_GetPCLK1Freq+0x28>)
 800326a:	5ccb      	ldrb	r3, [r1, r3]
 800326c:	f003 031f 	and.w	r3, r3, #31
 8003270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003274:	4618      	mov	r0, r3
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40021000 	.word	0x40021000
 800327c:	08009b70 	.word	0x08009b70

08003280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003284:	f7ff ffda 	bl	800323c <HAL_RCC_GetHCLKFreq>
 8003288:	4602      	mov	r2, r0
 800328a:	4b06      	ldr	r3, [pc, #24]	@ (80032a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	0adb      	lsrs	r3, r3, #11
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	4904      	ldr	r1, [pc, #16]	@ (80032a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003296:	5ccb      	ldrb	r3, [r1, r3]
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40021000 	.word	0x40021000
 80032a8:	08009b70 	.word	0x08009b70

080032ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032b4:	2300      	movs	r3, #0
 80032b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032c4:	f7ff f922 	bl	800250c <HAL_PWREx_GetVoltageRange>
 80032c8:	6178      	str	r0, [r7, #20]
 80032ca:	e014      	b.n	80032f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032cc:	4b25      	ldr	r3, [pc, #148]	@ (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d0:	4a24      	ldr	r2, [pc, #144]	@ (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80032d8:	4b22      	ldr	r3, [pc, #136]	@ (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032e4:	f7ff f912 	bl	800250c <HAL_PWREx_GetVoltageRange>
 80032e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032fc:	d10b      	bne.n	8003316 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b80      	cmp	r3, #128	@ 0x80
 8003302:	d919      	bls.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2ba0      	cmp	r3, #160	@ 0xa0
 8003308:	d902      	bls.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800330a:	2302      	movs	r3, #2
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	e013      	b.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003310:	2301      	movs	r3, #1
 8003312:	613b      	str	r3, [r7, #16]
 8003314:	e010      	b.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b80      	cmp	r3, #128	@ 0x80
 800331a:	d902      	bls.n	8003322 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800331c:	2303      	movs	r3, #3
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	e00a      	b.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b80      	cmp	r3, #128	@ 0x80
 8003326:	d102      	bne.n	800332e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003328:	2302      	movs	r3, #2
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	e004      	b.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b70      	cmp	r3, #112	@ 0x70
 8003332:	d101      	bne.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003334:	2301      	movs	r3, #1
 8003336:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003338:	4b0b      	ldr	r3, [pc, #44]	@ (8003368 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f023 0207 	bic.w	r2, r3, #7
 8003340:	4909      	ldr	r1, [pc, #36]	@ (8003368 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003348:	4b07      	ldr	r3, [pc, #28]	@ (8003368 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	429a      	cmp	r2, r3
 8003354:	d001      	beq.n	800335a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40021000 	.word	0x40021000
 8003368:	40022000 	.word	0x40022000

0800336c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003374:	2300      	movs	r3, #0
 8003376:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003378:	2300      	movs	r3, #0
 800337a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003384:	2b00      	cmp	r3, #0
 8003386:	d041      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800338c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003390:	d02a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003392:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003396:	d824      	bhi.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003398:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800339c:	d008      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800339e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033a2:	d81e      	bhi.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80033a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033ac:	d010      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033ae:	e018      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033b0:	4b86      	ldr	r3, [pc, #536]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4a85      	ldr	r2, [pc, #532]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033bc:	e015      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3304      	adds	r3, #4
 80033c2:	2100      	movs	r1, #0
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 facb 	bl	8003960 <RCCEx_PLLSAI1_Config>
 80033ca:	4603      	mov	r3, r0
 80033cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033ce:	e00c      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3320      	adds	r3, #32
 80033d4:	2100      	movs	r1, #0
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fbb6 	bl	8003b48 <RCCEx_PLLSAI2_Config>
 80033dc:	4603      	mov	r3, r0
 80033de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033e0:	e003      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	74fb      	strb	r3, [r7, #19]
      break;
 80033e6:	e000      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80033e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ea:	7cfb      	ldrb	r3, [r7, #19]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10b      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033f0:	4b76      	ldr	r3, [pc, #472]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033fe:	4973      	ldr	r1, [pc, #460]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003406:	e001      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003408:	7cfb      	ldrb	r3, [r7, #19]
 800340a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d041      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800341c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003420:	d02a      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003422:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003426:	d824      	bhi.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003428:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800342c:	d008      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800342e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003432:	d81e      	bhi.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003438:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800343c:	d010      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800343e:	e018      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003440:	4b62      	ldr	r3, [pc, #392]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4a61      	ldr	r2, [pc, #388]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003446:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800344a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800344c:	e015      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3304      	adds	r3, #4
 8003452:	2100      	movs	r1, #0
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fa83 	bl	8003960 <RCCEx_PLLSAI1_Config>
 800345a:	4603      	mov	r3, r0
 800345c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800345e:	e00c      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3320      	adds	r3, #32
 8003464:	2100      	movs	r1, #0
 8003466:	4618      	mov	r0, r3
 8003468:	f000 fb6e 	bl	8003b48 <RCCEx_PLLSAI2_Config>
 800346c:	4603      	mov	r3, r0
 800346e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003470:	e003      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	74fb      	strb	r3, [r7, #19]
      break;
 8003476:	e000      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003478:	bf00      	nop
    }

    if(ret == HAL_OK)
 800347a:	7cfb      	ldrb	r3, [r7, #19]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10b      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003480:	4b52      	ldr	r3, [pc, #328]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003486:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800348e:	494f      	ldr	r1, [pc, #316]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003496:	e001      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003498:	7cfb      	ldrb	r3, [r7, #19]
 800349a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80a0 	beq.w	80035ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034aa:	2300      	movs	r3, #0
 80034ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034ae:	4b47      	ldr	r3, [pc, #284]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x152>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80034be:	2300      	movs	r3, #0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00d      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c4:	4b41      	ldr	r3, [pc, #260]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c8:	4a40      	ldr	r2, [pc, #256]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80034d0:	4b3e      	ldr	r3, [pc, #248]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034dc:	2301      	movs	r3, #1
 80034de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034e0:	4b3b      	ldr	r3, [pc, #236]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a3a      	ldr	r2, [pc, #232]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034ec:	f7fe f93e 	bl	800176c <HAL_GetTick>
 80034f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034f2:	e009      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f4:	f7fe f93a 	bl	800176c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d902      	bls.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	74fb      	strb	r3, [r7, #19]
        break;
 8003506:	e005      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003508:	4b31      	ldr	r3, [pc, #196]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0ef      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003514:	7cfb      	ldrb	r3, [r7, #19]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d15c      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800351a:	4b2c      	ldr	r3, [pc, #176]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003520:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003524:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01f      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	429a      	cmp	r2, r3
 8003536:	d019      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003538:	4b24      	ldr	r3, [pc, #144]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800353e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003542:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003544:	4b21      	ldr	r3, [pc, #132]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354a:	4a20      	ldr	r2, [pc, #128]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800354c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003550:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003554:	4b1d      	ldr	r3, [pc, #116]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800355a:	4a1c      	ldr	r2, [pc, #112]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800355c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003560:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003564:	4a19      	ldr	r2, [pc, #100]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d016      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003576:	f7fe f8f9 	bl	800176c <HAL_GetTick>
 800357a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800357c:	e00b      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800357e:	f7fe f8f5 	bl	800176c <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	f241 3288 	movw	r2, #5000	@ 0x1388
 800358c:	4293      	cmp	r3, r2
 800358e:	d902      	bls.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	74fb      	strb	r3, [r7, #19]
            break;
 8003594:	e006      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003596:	4b0d      	ldr	r3, [pc, #52]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0ec      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80035a4:	7cfb      	ldrb	r3, [r7, #19]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10c      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035aa:	4b08      	ldr	r3, [pc, #32]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035ba:	4904      	ldr	r1, [pc, #16]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80035c2:	e009      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035c4:	7cfb      	ldrb	r3, [r7, #19]
 80035c6:	74bb      	strb	r3, [r7, #18]
 80035c8:	e006      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000
 80035d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d4:	7cfb      	ldrb	r3, [r7, #19]
 80035d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035d8:	7c7b      	ldrb	r3, [r7, #17]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d105      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035de:	4b9e      	ldr	r3, [pc, #632]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e2:	4a9d      	ldr	r2, [pc, #628]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035f6:	4b98      	ldr	r3, [pc, #608]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035fc:	f023 0203 	bic.w	r2, r3, #3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003604:	4994      	ldr	r1, [pc, #592]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003618:	4b8f      	ldr	r3, [pc, #572]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800361e:	f023 020c 	bic.w	r2, r3, #12
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003626:	498c      	ldr	r1, [pc, #560]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800363a:	4b87      	ldr	r3, [pc, #540]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003640:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003648:	4983      	ldr	r1, [pc, #524]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800365c:	4b7e      	ldr	r3, [pc, #504]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003662:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366a:	497b      	ldr	r1, [pc, #492]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800367e:	4b76      	ldr	r3, [pc, #472]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003684:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800368c:	4972      	ldr	r1, [pc, #456]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036a0:	4b6d      	ldr	r3, [pc, #436]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ae:	496a      	ldr	r1, [pc, #424]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036c2:	4b65      	ldr	r3, [pc, #404]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d0:	4961      	ldr	r1, [pc, #388]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036e4:	4b5c      	ldr	r3, [pc, #368]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f2:	4959      	ldr	r1, [pc, #356]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003706:	4b54      	ldr	r3, [pc, #336]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800370c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003714:	4950      	ldr	r1, [pc, #320]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00a      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003728:	4b4b      	ldr	r3, [pc, #300]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800372e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003736:	4948      	ldr	r1, [pc, #288]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800374a:	4b43      	ldr	r3, [pc, #268]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003750:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003758:	493f      	ldr	r1, [pc, #252]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375a:	4313      	orrs	r3, r2
 800375c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d028      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800376c:	4b3a      	ldr	r3, [pc, #232]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003772:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800377a:	4937      	ldr	r1, [pc, #220]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003786:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800378a:	d106      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800378c:	4b32      	ldr	r3, [pc, #200]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4a31      	ldr	r2, [pc, #196]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003792:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003796:	60d3      	str	r3, [r2, #12]
 8003798:	e011      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800379e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037a2:	d10c      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3304      	adds	r3, #4
 80037a8:	2101      	movs	r1, #1
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 f8d8 	bl	8003960 <RCCEx_PLLSAI1_Config>
 80037b0:	4603      	mov	r3, r0
 80037b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037b4:	7cfb      	ldrb	r3, [r7, #19]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80037ba:	7cfb      	ldrb	r3, [r7, #19]
 80037bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d028      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037ca:	4b23      	ldr	r3, [pc, #140]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d8:	491f      	ldr	r1, [pc, #124]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037e8:	d106      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	4a1a      	ldr	r2, [pc, #104]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037f4:	60d3      	str	r3, [r2, #12]
 80037f6:	e011      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003800:	d10c      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3304      	adds	r3, #4
 8003806:	2101      	movs	r1, #1
 8003808:	4618      	mov	r0, r3
 800380a:	f000 f8a9 	bl	8003960 <RCCEx_PLLSAI1_Config>
 800380e:	4603      	mov	r3, r0
 8003810:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003812:	7cfb      	ldrb	r3, [r7, #19]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003818:	7cfb      	ldrb	r3, [r7, #19]
 800381a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d02b      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003828:	4b0b      	ldr	r3, [pc, #44]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003836:	4908      	ldr	r1, [pc, #32]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003842:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003846:	d109      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003848:	4b03      	ldr	r3, [pc, #12]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4a02      	ldr	r2, [pc, #8]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003852:	60d3      	str	r3, [r2, #12]
 8003854:	e014      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003856:	bf00      	nop
 8003858:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003860:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003864:	d10c      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3304      	adds	r3, #4
 800386a:	2101      	movs	r1, #1
 800386c:	4618      	mov	r0, r3
 800386e:	f000 f877 	bl	8003960 <RCCEx_PLLSAI1_Config>
 8003872:	4603      	mov	r3, r0
 8003874:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003876:	7cfb      	ldrb	r3, [r7, #19]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800387c:	7cfb      	ldrb	r3, [r7, #19]
 800387e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d02f      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800388c:	4b2b      	ldr	r3, [pc, #172]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800388e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003892:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800389a:	4928      	ldr	r1, [pc, #160]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038aa:	d10d      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3304      	adds	r3, #4
 80038b0:	2102      	movs	r1, #2
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 f854 	bl	8003960 <RCCEx_PLLSAI1_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038bc:	7cfb      	ldrb	r3, [r7, #19]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d014      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038c2:	7cfb      	ldrb	r3, [r7, #19]
 80038c4:	74bb      	strb	r3, [r7, #18]
 80038c6:	e011      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038d0:	d10c      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3320      	adds	r3, #32
 80038d6:	2102      	movs	r1, #2
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 f935 	bl	8003b48 <RCCEx_PLLSAI2_Config>
 80038de:	4603      	mov	r3, r0
 80038e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038e2:	7cfb      	ldrb	r3, [r7, #19]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038e8:	7cfb      	ldrb	r3, [r7, #19]
 80038ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038f8:	4b10      	ldr	r3, [pc, #64]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fe:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003906:	490d      	ldr	r1, [pc, #52]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00b      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800391a:	4b08      	ldr	r3, [pc, #32]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800391c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003920:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800392a:	4904      	ldr	r1, [pc, #16]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003932:	7cbb      	ldrb	r3, [r7, #18]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40021000 	.word	0x40021000

08003940 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003944:	4b05      	ldr	r3, [pc, #20]	@ (800395c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a04      	ldr	r2, [pc, #16]	@ (800395c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800394a:	f043 0304 	orr.w	r3, r3, #4
 800394e:	6013      	str	r3, [r2, #0]
}
 8003950:	bf00      	nop
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40021000 	.word	0x40021000

08003960 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800396e:	4b75      	ldr	r3, [pc, #468]	@ (8003b44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d018      	beq.n	80039ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800397a:	4b72      	ldr	r3, [pc, #456]	@ (8003b44 <RCCEx_PLLSAI1_Config+0x1e4>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f003 0203 	and.w	r2, r3, #3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d10d      	bne.n	80039a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
       ||
 800398e:	2b00      	cmp	r3, #0
 8003990:	d009      	beq.n	80039a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003992:	4b6c      	ldr	r3, [pc, #432]	@ (8003b44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	091b      	lsrs	r3, r3, #4
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
       ||
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d047      	beq.n	8003a36 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	73fb      	strb	r3, [r7, #15]
 80039aa:	e044      	b.n	8003a36 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b03      	cmp	r3, #3
 80039b2:	d018      	beq.n	80039e6 <RCCEx_PLLSAI1_Config+0x86>
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	d825      	bhi.n	8003a04 <RCCEx_PLLSAI1_Config+0xa4>
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d002      	beq.n	80039c2 <RCCEx_PLLSAI1_Config+0x62>
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d009      	beq.n	80039d4 <RCCEx_PLLSAI1_Config+0x74>
 80039c0:	e020      	b.n	8003a04 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039c2:	4b60      	ldr	r3, [pc, #384]	@ (8003b44 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d11d      	bne.n	8003a0a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039d2:	e01a      	b.n	8003a0a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039d4:	4b5b      	ldr	r3, [pc, #364]	@ (8003b44 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d116      	bne.n	8003a0e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039e4:	e013      	b.n	8003a0e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039e6:	4b57      	ldr	r3, [pc, #348]	@ (8003b44 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10f      	bne.n	8003a12 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039f2:	4b54      	ldr	r3, [pc, #336]	@ (8003b44 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d109      	bne.n	8003a12 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a02:	e006      	b.n	8003a12 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
      break;
 8003a08:	e004      	b.n	8003a14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a0a:	bf00      	nop
 8003a0c:	e002      	b.n	8003a14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a0e:	bf00      	nop
 8003a10:	e000      	b.n	8003a14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a12:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10d      	bne.n	8003a36 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a1a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6819      	ldr	r1, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	4944      	ldr	r1, [pc, #272]	@ (8003b44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d17d      	bne.n	8003b38 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a3c:	4b41      	ldr	r3, [pc, #260]	@ (8003b44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a40      	ldr	r2, [pc, #256]	@ (8003b44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a48:	f7fd fe90 	bl	800176c <HAL_GetTick>
 8003a4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a4e:	e009      	b.n	8003a64 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a50:	f7fd fe8c 	bl	800176c <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d902      	bls.n	8003a64 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	73fb      	strb	r3, [r7, #15]
        break;
 8003a62:	e005      	b.n	8003a70 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a64:	4b37      	ldr	r3, [pc, #220]	@ (8003b44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1ef      	bne.n	8003a50 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a70:	7bfb      	ldrb	r3, [r7, #15]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d160      	bne.n	8003b38 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d111      	bne.n	8003aa0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a7c:	4b31      	ldr	r3, [pc, #196]	@ (8003b44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003a84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6892      	ldr	r2, [r2, #8]
 8003a8c:	0211      	lsls	r1, r2, #8
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	68d2      	ldr	r2, [r2, #12]
 8003a92:	0912      	lsrs	r2, r2, #4
 8003a94:	0452      	lsls	r2, r2, #17
 8003a96:	430a      	orrs	r2, r1
 8003a98:	492a      	ldr	r1, [pc, #168]	@ (8003b44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	610b      	str	r3, [r1, #16]
 8003a9e:	e027      	b.n	8003af0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d112      	bne.n	8003acc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003aa6:	4b27      	ldr	r3, [pc, #156]	@ (8003b44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003aae:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6892      	ldr	r2, [r2, #8]
 8003ab6:	0211      	lsls	r1, r2, #8
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6912      	ldr	r2, [r2, #16]
 8003abc:	0852      	lsrs	r2, r2, #1
 8003abe:	3a01      	subs	r2, #1
 8003ac0:	0552      	lsls	r2, r2, #21
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	491f      	ldr	r1, [pc, #124]	@ (8003b44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	610b      	str	r3, [r1, #16]
 8003aca:	e011      	b.n	8003af0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003acc:	4b1d      	ldr	r3, [pc, #116]	@ (8003b44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003ad4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6892      	ldr	r2, [r2, #8]
 8003adc:	0211      	lsls	r1, r2, #8
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6952      	ldr	r2, [r2, #20]
 8003ae2:	0852      	lsrs	r2, r2, #1
 8003ae4:	3a01      	subs	r2, #1
 8003ae6:	0652      	lsls	r2, r2, #25
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	4916      	ldr	r1, [pc, #88]	@ (8003b44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003af0:	4b14      	ldr	r3, [pc, #80]	@ (8003b44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a13      	ldr	r2, [pc, #76]	@ (8003b44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003afa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afc:	f7fd fe36 	bl	800176c <HAL_GetTick>
 8003b00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b02:	e009      	b.n	8003b18 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b04:	f7fd fe32 	bl	800176c <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d902      	bls.n	8003b18 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	73fb      	strb	r3, [r7, #15]
          break;
 8003b16:	e005      	b.n	8003b24 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b18:	4b0a      	ldr	r3, [pc, #40]	@ (8003b44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0ef      	beq.n	8003b04 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d106      	bne.n	8003b38 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b2a:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b2c:	691a      	ldr	r2, [r3, #16]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	4904      	ldr	r1, [pc, #16]	@ (8003b44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40021000 	.word	0x40021000

08003b48 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b56:	4b6a      	ldr	r3, [pc, #424]	@ (8003d00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d018      	beq.n	8003b94 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b62:	4b67      	ldr	r3, [pc, #412]	@ (8003d00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f003 0203 	and.w	r2, r3, #3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d10d      	bne.n	8003b8e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
       ||
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b7a:	4b61      	ldr	r3, [pc, #388]	@ (8003d00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	091b      	lsrs	r3, r3, #4
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
       ||
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d047      	beq.n	8003c1e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	73fb      	strb	r3, [r7, #15]
 8003b92:	e044      	b.n	8003c1e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d018      	beq.n	8003bce <RCCEx_PLLSAI2_Config+0x86>
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d825      	bhi.n	8003bec <RCCEx_PLLSAI2_Config+0xa4>
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d002      	beq.n	8003baa <RCCEx_PLLSAI2_Config+0x62>
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d009      	beq.n	8003bbc <RCCEx_PLLSAI2_Config+0x74>
 8003ba8:	e020      	b.n	8003bec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003baa:	4b55      	ldr	r3, [pc, #340]	@ (8003d00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d11d      	bne.n	8003bf2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bba:	e01a      	b.n	8003bf2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bbc:	4b50      	ldr	r3, [pc, #320]	@ (8003d00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d116      	bne.n	8003bf6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bcc:	e013      	b.n	8003bf6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bce:	4b4c      	ldr	r3, [pc, #304]	@ (8003d00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10f      	bne.n	8003bfa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bda:	4b49      	ldr	r3, [pc, #292]	@ (8003d00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bea:	e006      	b.n	8003bfa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf0:	e004      	b.n	8003bfc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bf2:	bf00      	nop
 8003bf4:	e002      	b.n	8003bfc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bf6:	bf00      	nop
 8003bf8:	e000      	b.n	8003bfc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10d      	bne.n	8003c1e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c02:	4b3f      	ldr	r3, [pc, #252]	@ (8003d00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6819      	ldr	r1, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	430b      	orrs	r3, r1
 8003c18:	4939      	ldr	r1, [pc, #228]	@ (8003d00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d167      	bne.n	8003cf4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c24:	4b36      	ldr	r3, [pc, #216]	@ (8003d00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a35      	ldr	r2, [pc, #212]	@ (8003d00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c30:	f7fd fd9c 	bl	800176c <HAL_GetTick>
 8003c34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c36:	e009      	b.n	8003c4c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c38:	f7fd fd98 	bl	800176c <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d902      	bls.n	8003c4c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	73fb      	strb	r3, [r7, #15]
        break;
 8003c4a:	e005      	b.n	8003c58 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c4c:	4b2c      	ldr	r3, [pc, #176]	@ (8003d00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1ef      	bne.n	8003c38 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d14a      	bne.n	8003cf4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d111      	bne.n	8003c88 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c64:	4b26      	ldr	r3, [pc, #152]	@ (8003d00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003c6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6892      	ldr	r2, [r2, #8]
 8003c74:	0211      	lsls	r1, r2, #8
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	68d2      	ldr	r2, [r2, #12]
 8003c7a:	0912      	lsrs	r2, r2, #4
 8003c7c:	0452      	lsls	r2, r2, #17
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	491f      	ldr	r1, [pc, #124]	@ (8003d00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	614b      	str	r3, [r1, #20]
 8003c86:	e011      	b.n	8003cac <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c88:	4b1d      	ldr	r3, [pc, #116]	@ (8003d00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003c90:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6892      	ldr	r2, [r2, #8]
 8003c98:	0211      	lsls	r1, r2, #8
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6912      	ldr	r2, [r2, #16]
 8003c9e:	0852      	lsrs	r2, r2, #1
 8003ca0:	3a01      	subs	r2, #1
 8003ca2:	0652      	lsls	r2, r2, #25
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	4916      	ldr	r1, [pc, #88]	@ (8003d00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003cac:	4b14      	ldr	r3, [pc, #80]	@ (8003d00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a13      	ldr	r2, [pc, #76]	@ (8003d00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb8:	f7fd fd58 	bl	800176c <HAL_GetTick>
 8003cbc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cbe:	e009      	b.n	8003cd4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cc0:	f7fd fd54 	bl	800176c <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d902      	bls.n	8003cd4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	73fb      	strb	r3, [r7, #15]
          break;
 8003cd2:	e005      	b.n	8003ce0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8003d00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0ef      	beq.n	8003cc0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ce6:	4b06      	ldr	r3, [pc, #24]	@ (8003d00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce8:	695a      	ldr	r2, [r3, #20]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	4904      	ldr	r1, [pc, #16]	@ (8003d00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	40021000 	.word	0x40021000

08003d04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e095      	b.n	8003e42 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d108      	bne.n	8003d30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d26:	d009      	beq.n	8003d3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	61da      	str	r2, [r3, #28]
 8003d2e:	e005      	b.n	8003d3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fd fa5e 	bl	8001218 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d7c:	d902      	bls.n	8003d84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	e002      	b.n	8003d8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003d92:	d007      	beq.n	8003da4 <HAL_SPI_Init+0xa0>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d9c:	d002      	beq.n	8003da4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de6:	ea42 0103 	orr.w	r1, r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dee:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	0c1b      	lsrs	r3, r3, #16
 8003e00:	f003 0204 	and.w	r2, r3, #4
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	f003 0310 	and.w	r3, r3, #16
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003e20:	ea42 0103 	orr.w	r1, r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b082      	sub	sp, #8
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e049      	b.n	8003ef0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d106      	bne.n	8003e76 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7fd fa15 	bl	80012a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2202      	movs	r2, #2
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3304      	adds	r3, #4
 8003e86:	4619      	mov	r1, r3
 8003e88:	4610      	mov	r0, r2
 8003e8a:	f000 f96f 	bl	800416c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d020      	beq.n	8003f5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d01b      	beq.n	8003f5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f06f 0202 	mvn.w	r2, #2
 8003f2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f8f3 	bl	800412e <HAL_TIM_IC_CaptureCallback>
 8003f48:	e005      	b.n	8003f56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f8e5 	bl	800411a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f8f6 	bl	8004142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d020      	beq.n	8003fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d01b      	beq.n	8003fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f06f 0204 	mvn.w	r2, #4
 8003f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f8cd 	bl	800412e <HAL_TIM_IC_CaptureCallback>
 8003f94:	e005      	b.n	8003fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f8bf 	bl	800411a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f8d0 	bl	8004142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d020      	beq.n	8003ff4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d01b      	beq.n	8003ff4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0208 	mvn.w	r2, #8
 8003fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2204      	movs	r2, #4
 8003fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f8a7 	bl	800412e <HAL_TIM_IC_CaptureCallback>
 8003fe0:	e005      	b.n	8003fee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f899 	bl	800411a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f8aa 	bl	8004142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f003 0310 	and.w	r3, r3, #16
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d020      	beq.n	8004040 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f003 0310 	and.w	r3, r3, #16
 8004004:	2b00      	cmp	r3, #0
 8004006:	d01b      	beq.n	8004040 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f06f 0210 	mvn.w	r2, #16
 8004010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2208      	movs	r2, #8
 8004016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f881 	bl	800412e <HAL_TIM_IC_CaptureCallback>
 800402c:	e005      	b.n	800403a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f873 	bl	800411a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f884 	bl	8004142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00c      	beq.n	8004064 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d007      	beq.n	8004064 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f06f 0201 	mvn.w	r2, #1
 800405c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f851 	bl	8004106 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406a:	2b00      	cmp	r3, #0
 800406c:	d104      	bne.n	8004078 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00c      	beq.n	8004092 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800407e:	2b00      	cmp	r3, #0
 8004080:	d007      	beq.n	8004092 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800408a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f9a5 	bl	80043dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00c      	beq.n	80040b6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d007      	beq.n	80040b6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80040ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f99d 	bl	80043f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00c      	beq.n	80040da <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d007      	beq.n	80040da <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f83e 	bl	8004156 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00c      	beq.n	80040fe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f003 0320 	and.w	r3, r3, #32
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d007      	beq.n	80040fe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f06f 0220 	mvn.w	r2, #32
 80040f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f965 	bl	80043c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040fe:	bf00      	nop
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
	...

0800416c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a46      	ldr	r2, [pc, #280]	@ (8004298 <TIM_Base_SetConfig+0x12c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d013      	beq.n	80041ac <TIM_Base_SetConfig+0x40>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800418a:	d00f      	beq.n	80041ac <TIM_Base_SetConfig+0x40>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a43      	ldr	r2, [pc, #268]	@ (800429c <TIM_Base_SetConfig+0x130>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d00b      	beq.n	80041ac <TIM_Base_SetConfig+0x40>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a42      	ldr	r2, [pc, #264]	@ (80042a0 <TIM_Base_SetConfig+0x134>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d007      	beq.n	80041ac <TIM_Base_SetConfig+0x40>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a41      	ldr	r2, [pc, #260]	@ (80042a4 <TIM_Base_SetConfig+0x138>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d003      	beq.n	80041ac <TIM_Base_SetConfig+0x40>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a40      	ldr	r2, [pc, #256]	@ (80042a8 <TIM_Base_SetConfig+0x13c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d108      	bne.n	80041be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a35      	ldr	r2, [pc, #212]	@ (8004298 <TIM_Base_SetConfig+0x12c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d01f      	beq.n	8004206 <TIM_Base_SetConfig+0x9a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041cc:	d01b      	beq.n	8004206 <TIM_Base_SetConfig+0x9a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a32      	ldr	r2, [pc, #200]	@ (800429c <TIM_Base_SetConfig+0x130>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d017      	beq.n	8004206 <TIM_Base_SetConfig+0x9a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a31      	ldr	r2, [pc, #196]	@ (80042a0 <TIM_Base_SetConfig+0x134>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d013      	beq.n	8004206 <TIM_Base_SetConfig+0x9a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a30      	ldr	r2, [pc, #192]	@ (80042a4 <TIM_Base_SetConfig+0x138>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00f      	beq.n	8004206 <TIM_Base_SetConfig+0x9a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a2f      	ldr	r2, [pc, #188]	@ (80042a8 <TIM_Base_SetConfig+0x13c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d00b      	beq.n	8004206 <TIM_Base_SetConfig+0x9a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a2e      	ldr	r2, [pc, #184]	@ (80042ac <TIM_Base_SetConfig+0x140>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d007      	beq.n	8004206 <TIM_Base_SetConfig+0x9a>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a2d      	ldr	r2, [pc, #180]	@ (80042b0 <TIM_Base_SetConfig+0x144>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d003      	beq.n	8004206 <TIM_Base_SetConfig+0x9a>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a2c      	ldr	r2, [pc, #176]	@ (80042b4 <TIM_Base_SetConfig+0x148>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d108      	bne.n	8004218 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800420c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a16      	ldr	r2, [pc, #88]	@ (8004298 <TIM_Base_SetConfig+0x12c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d00f      	beq.n	8004264 <TIM_Base_SetConfig+0xf8>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a18      	ldr	r2, [pc, #96]	@ (80042a8 <TIM_Base_SetConfig+0x13c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d00b      	beq.n	8004264 <TIM_Base_SetConfig+0xf8>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a17      	ldr	r2, [pc, #92]	@ (80042ac <TIM_Base_SetConfig+0x140>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d007      	beq.n	8004264 <TIM_Base_SetConfig+0xf8>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a16      	ldr	r2, [pc, #88]	@ (80042b0 <TIM_Base_SetConfig+0x144>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d003      	beq.n	8004264 <TIM_Base_SetConfig+0xf8>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a15      	ldr	r2, [pc, #84]	@ (80042b4 <TIM_Base_SetConfig+0x148>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d103      	bne.n	800426c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b01      	cmp	r3, #1
 800427c:	d105      	bne.n	800428a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f023 0201 	bic.w	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	611a      	str	r2, [r3, #16]
  }
}
 800428a:	bf00      	nop
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40012c00 	.word	0x40012c00
 800429c:	40000400 	.word	0x40000400
 80042a0:	40000800 	.word	0x40000800
 80042a4:	40000c00 	.word	0x40000c00
 80042a8:	40013400 	.word	0x40013400
 80042ac:	40014000 	.word	0x40014000
 80042b0:	40014400 	.word	0x40014400
 80042b4:	40014800 	.word	0x40014800

080042b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e068      	b.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a2e      	ldr	r2, [pc, #184]	@ (80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d004      	beq.n	8004304 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a2d      	ldr	r2, [pc, #180]	@ (80043b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d108      	bne.n	8004316 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800430a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800431c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4313      	orrs	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a1e      	ldr	r2, [pc, #120]	@ (80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d01d      	beq.n	8004376 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004342:	d018      	beq.n	8004376 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a1b      	ldr	r2, [pc, #108]	@ (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d013      	beq.n	8004376 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a1a      	ldr	r2, [pc, #104]	@ (80043bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d00e      	beq.n	8004376 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a18      	ldr	r2, [pc, #96]	@ (80043c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d009      	beq.n	8004376 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a13      	ldr	r2, [pc, #76]	@ (80043b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d004      	beq.n	8004376 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a14      	ldr	r2, [pc, #80]	@ (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d10c      	bne.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800437c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	4313      	orrs	r3, r2
 8004386:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40012c00 	.word	0x40012c00
 80043b4:	40013400 	.word	0x40013400
 80043b8:	40000400 	.word	0x40000400
 80043bc:	40000800 	.word	0x40000800
 80043c0:	40000c00 	.word	0x40000c00
 80043c4:	40014000 	.word	0x40014000

080043c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e040      	b.n	8004498 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d106      	bne.n	800442c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7fc ff60 	bl	80012ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2224      	movs	r2, #36	@ 0x24
 8004430:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0201 	bic.w	r2, r2, #1
 8004440:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fae0 	bl	8004a10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f825 	bl	80044a0 <UART_SetConfig>
 8004456:	4603      	mov	r3, r0
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e01b      	b.n	8004498 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800446e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800447e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0201 	orr.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fb5f 	bl	8004b54 <UART_CheckIdleState>
 8004496:	4603      	mov	r3, r0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044a4:	b08a      	sub	sp, #40	@ 0x28
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	431a      	orrs	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	431a      	orrs	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	4ba4      	ldr	r3, [pc, #656]	@ (8004760 <UART_SetConfig+0x2c0>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	6812      	ldr	r2, [r2, #0]
 80044d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044d8:	430b      	orrs	r3, r1
 80044da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a99      	ldr	r2, [pc, #612]	@ (8004764 <UART_SetConfig+0x2c4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d004      	beq.n	800450c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004508:	4313      	orrs	r3, r2
 800450a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800451c:	430a      	orrs	r2, r1
 800451e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a90      	ldr	r2, [pc, #576]	@ (8004768 <UART_SetConfig+0x2c8>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d126      	bne.n	8004578 <UART_SetConfig+0xd8>
 800452a:	4b90      	ldr	r3, [pc, #576]	@ (800476c <UART_SetConfig+0x2cc>)
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004530:	f003 0303 	and.w	r3, r3, #3
 8004534:	2b03      	cmp	r3, #3
 8004536:	d81b      	bhi.n	8004570 <UART_SetConfig+0xd0>
 8004538:	a201      	add	r2, pc, #4	@ (adr r2, 8004540 <UART_SetConfig+0xa0>)
 800453a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453e:	bf00      	nop
 8004540:	08004551 	.word	0x08004551
 8004544:	08004561 	.word	0x08004561
 8004548:	08004559 	.word	0x08004559
 800454c:	08004569 	.word	0x08004569
 8004550:	2301      	movs	r3, #1
 8004552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004556:	e116      	b.n	8004786 <UART_SetConfig+0x2e6>
 8004558:	2302      	movs	r3, #2
 800455a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800455e:	e112      	b.n	8004786 <UART_SetConfig+0x2e6>
 8004560:	2304      	movs	r3, #4
 8004562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004566:	e10e      	b.n	8004786 <UART_SetConfig+0x2e6>
 8004568:	2308      	movs	r3, #8
 800456a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800456e:	e10a      	b.n	8004786 <UART_SetConfig+0x2e6>
 8004570:	2310      	movs	r3, #16
 8004572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004576:	e106      	b.n	8004786 <UART_SetConfig+0x2e6>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a7c      	ldr	r2, [pc, #496]	@ (8004770 <UART_SetConfig+0x2d0>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d138      	bne.n	80045f4 <UART_SetConfig+0x154>
 8004582:	4b7a      	ldr	r3, [pc, #488]	@ (800476c <UART_SetConfig+0x2cc>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004588:	f003 030c 	and.w	r3, r3, #12
 800458c:	2b0c      	cmp	r3, #12
 800458e:	d82d      	bhi.n	80045ec <UART_SetConfig+0x14c>
 8004590:	a201      	add	r2, pc, #4	@ (adr r2, 8004598 <UART_SetConfig+0xf8>)
 8004592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004596:	bf00      	nop
 8004598:	080045cd 	.word	0x080045cd
 800459c:	080045ed 	.word	0x080045ed
 80045a0:	080045ed 	.word	0x080045ed
 80045a4:	080045ed 	.word	0x080045ed
 80045a8:	080045dd 	.word	0x080045dd
 80045ac:	080045ed 	.word	0x080045ed
 80045b0:	080045ed 	.word	0x080045ed
 80045b4:	080045ed 	.word	0x080045ed
 80045b8:	080045d5 	.word	0x080045d5
 80045bc:	080045ed 	.word	0x080045ed
 80045c0:	080045ed 	.word	0x080045ed
 80045c4:	080045ed 	.word	0x080045ed
 80045c8:	080045e5 	.word	0x080045e5
 80045cc:	2300      	movs	r3, #0
 80045ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045d2:	e0d8      	b.n	8004786 <UART_SetConfig+0x2e6>
 80045d4:	2302      	movs	r3, #2
 80045d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045da:	e0d4      	b.n	8004786 <UART_SetConfig+0x2e6>
 80045dc:	2304      	movs	r3, #4
 80045de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045e2:	e0d0      	b.n	8004786 <UART_SetConfig+0x2e6>
 80045e4:	2308      	movs	r3, #8
 80045e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ea:	e0cc      	b.n	8004786 <UART_SetConfig+0x2e6>
 80045ec:	2310      	movs	r3, #16
 80045ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045f2:	e0c8      	b.n	8004786 <UART_SetConfig+0x2e6>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a5e      	ldr	r2, [pc, #376]	@ (8004774 <UART_SetConfig+0x2d4>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d125      	bne.n	800464a <UART_SetConfig+0x1aa>
 80045fe:	4b5b      	ldr	r3, [pc, #364]	@ (800476c <UART_SetConfig+0x2cc>)
 8004600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004604:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004608:	2b30      	cmp	r3, #48	@ 0x30
 800460a:	d016      	beq.n	800463a <UART_SetConfig+0x19a>
 800460c:	2b30      	cmp	r3, #48	@ 0x30
 800460e:	d818      	bhi.n	8004642 <UART_SetConfig+0x1a2>
 8004610:	2b20      	cmp	r3, #32
 8004612:	d00a      	beq.n	800462a <UART_SetConfig+0x18a>
 8004614:	2b20      	cmp	r3, #32
 8004616:	d814      	bhi.n	8004642 <UART_SetConfig+0x1a2>
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <UART_SetConfig+0x182>
 800461c:	2b10      	cmp	r3, #16
 800461e:	d008      	beq.n	8004632 <UART_SetConfig+0x192>
 8004620:	e00f      	b.n	8004642 <UART_SetConfig+0x1a2>
 8004622:	2300      	movs	r3, #0
 8004624:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004628:	e0ad      	b.n	8004786 <UART_SetConfig+0x2e6>
 800462a:	2302      	movs	r3, #2
 800462c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004630:	e0a9      	b.n	8004786 <UART_SetConfig+0x2e6>
 8004632:	2304      	movs	r3, #4
 8004634:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004638:	e0a5      	b.n	8004786 <UART_SetConfig+0x2e6>
 800463a:	2308      	movs	r3, #8
 800463c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004640:	e0a1      	b.n	8004786 <UART_SetConfig+0x2e6>
 8004642:	2310      	movs	r3, #16
 8004644:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004648:	e09d      	b.n	8004786 <UART_SetConfig+0x2e6>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a4a      	ldr	r2, [pc, #296]	@ (8004778 <UART_SetConfig+0x2d8>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d125      	bne.n	80046a0 <UART_SetConfig+0x200>
 8004654:	4b45      	ldr	r3, [pc, #276]	@ (800476c <UART_SetConfig+0x2cc>)
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800465a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800465e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004660:	d016      	beq.n	8004690 <UART_SetConfig+0x1f0>
 8004662:	2bc0      	cmp	r3, #192	@ 0xc0
 8004664:	d818      	bhi.n	8004698 <UART_SetConfig+0x1f8>
 8004666:	2b80      	cmp	r3, #128	@ 0x80
 8004668:	d00a      	beq.n	8004680 <UART_SetConfig+0x1e0>
 800466a:	2b80      	cmp	r3, #128	@ 0x80
 800466c:	d814      	bhi.n	8004698 <UART_SetConfig+0x1f8>
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <UART_SetConfig+0x1d8>
 8004672:	2b40      	cmp	r3, #64	@ 0x40
 8004674:	d008      	beq.n	8004688 <UART_SetConfig+0x1e8>
 8004676:	e00f      	b.n	8004698 <UART_SetConfig+0x1f8>
 8004678:	2300      	movs	r3, #0
 800467a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800467e:	e082      	b.n	8004786 <UART_SetConfig+0x2e6>
 8004680:	2302      	movs	r3, #2
 8004682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004686:	e07e      	b.n	8004786 <UART_SetConfig+0x2e6>
 8004688:	2304      	movs	r3, #4
 800468a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800468e:	e07a      	b.n	8004786 <UART_SetConfig+0x2e6>
 8004690:	2308      	movs	r3, #8
 8004692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004696:	e076      	b.n	8004786 <UART_SetConfig+0x2e6>
 8004698:	2310      	movs	r3, #16
 800469a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800469e:	e072      	b.n	8004786 <UART_SetConfig+0x2e6>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a35      	ldr	r2, [pc, #212]	@ (800477c <UART_SetConfig+0x2dc>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d12a      	bne.n	8004700 <UART_SetConfig+0x260>
 80046aa:	4b30      	ldr	r3, [pc, #192]	@ (800476c <UART_SetConfig+0x2cc>)
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046b8:	d01a      	beq.n	80046f0 <UART_SetConfig+0x250>
 80046ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046be:	d81b      	bhi.n	80046f8 <UART_SetConfig+0x258>
 80046c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046c4:	d00c      	beq.n	80046e0 <UART_SetConfig+0x240>
 80046c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046ca:	d815      	bhi.n	80046f8 <UART_SetConfig+0x258>
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <UART_SetConfig+0x238>
 80046d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046d4:	d008      	beq.n	80046e8 <UART_SetConfig+0x248>
 80046d6:	e00f      	b.n	80046f8 <UART_SetConfig+0x258>
 80046d8:	2300      	movs	r3, #0
 80046da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046de:	e052      	b.n	8004786 <UART_SetConfig+0x2e6>
 80046e0:	2302      	movs	r3, #2
 80046e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046e6:	e04e      	b.n	8004786 <UART_SetConfig+0x2e6>
 80046e8:	2304      	movs	r3, #4
 80046ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ee:	e04a      	b.n	8004786 <UART_SetConfig+0x2e6>
 80046f0:	2308      	movs	r3, #8
 80046f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046f6:	e046      	b.n	8004786 <UART_SetConfig+0x2e6>
 80046f8:	2310      	movs	r3, #16
 80046fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046fe:	e042      	b.n	8004786 <UART_SetConfig+0x2e6>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a17      	ldr	r2, [pc, #92]	@ (8004764 <UART_SetConfig+0x2c4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d13a      	bne.n	8004780 <UART_SetConfig+0x2e0>
 800470a:	4b18      	ldr	r3, [pc, #96]	@ (800476c <UART_SetConfig+0x2cc>)
 800470c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004710:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004714:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004718:	d01a      	beq.n	8004750 <UART_SetConfig+0x2b0>
 800471a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800471e:	d81b      	bhi.n	8004758 <UART_SetConfig+0x2b8>
 8004720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004724:	d00c      	beq.n	8004740 <UART_SetConfig+0x2a0>
 8004726:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800472a:	d815      	bhi.n	8004758 <UART_SetConfig+0x2b8>
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <UART_SetConfig+0x298>
 8004730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004734:	d008      	beq.n	8004748 <UART_SetConfig+0x2a8>
 8004736:	e00f      	b.n	8004758 <UART_SetConfig+0x2b8>
 8004738:	2300      	movs	r3, #0
 800473a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800473e:	e022      	b.n	8004786 <UART_SetConfig+0x2e6>
 8004740:	2302      	movs	r3, #2
 8004742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004746:	e01e      	b.n	8004786 <UART_SetConfig+0x2e6>
 8004748:	2304      	movs	r3, #4
 800474a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800474e:	e01a      	b.n	8004786 <UART_SetConfig+0x2e6>
 8004750:	2308      	movs	r3, #8
 8004752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004756:	e016      	b.n	8004786 <UART_SetConfig+0x2e6>
 8004758:	2310      	movs	r3, #16
 800475a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800475e:	e012      	b.n	8004786 <UART_SetConfig+0x2e6>
 8004760:	efff69f3 	.word	0xefff69f3
 8004764:	40008000 	.word	0x40008000
 8004768:	40013800 	.word	0x40013800
 800476c:	40021000 	.word	0x40021000
 8004770:	40004400 	.word	0x40004400
 8004774:	40004800 	.word	0x40004800
 8004778:	40004c00 	.word	0x40004c00
 800477c:	40005000 	.word	0x40005000
 8004780:	2310      	movs	r3, #16
 8004782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a9f      	ldr	r2, [pc, #636]	@ (8004a08 <UART_SetConfig+0x568>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d17a      	bne.n	8004886 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004790:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004794:	2b08      	cmp	r3, #8
 8004796:	d824      	bhi.n	80047e2 <UART_SetConfig+0x342>
 8004798:	a201      	add	r2, pc, #4	@ (adr r2, 80047a0 <UART_SetConfig+0x300>)
 800479a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479e:	bf00      	nop
 80047a0:	080047c5 	.word	0x080047c5
 80047a4:	080047e3 	.word	0x080047e3
 80047a8:	080047cd 	.word	0x080047cd
 80047ac:	080047e3 	.word	0x080047e3
 80047b0:	080047d3 	.word	0x080047d3
 80047b4:	080047e3 	.word	0x080047e3
 80047b8:	080047e3 	.word	0x080047e3
 80047bc:	080047e3 	.word	0x080047e3
 80047c0:	080047db 	.word	0x080047db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047c4:	f7fe fd46 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 80047c8:	61f8      	str	r0, [r7, #28]
        break;
 80047ca:	e010      	b.n	80047ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047cc:	4b8f      	ldr	r3, [pc, #572]	@ (8004a0c <UART_SetConfig+0x56c>)
 80047ce:	61fb      	str	r3, [r7, #28]
        break;
 80047d0:	e00d      	b.n	80047ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047d2:	f7fe fca7 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 80047d6:	61f8      	str	r0, [r7, #28]
        break;
 80047d8:	e009      	b.n	80047ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047de:	61fb      	str	r3, [r7, #28]
        break;
 80047e0:	e005      	b.n	80047ee <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80047ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 80fb 	beq.w	80049ec <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	4413      	add	r3, r2
 8004800:	69fa      	ldr	r2, [r7, #28]
 8004802:	429a      	cmp	r2, r3
 8004804:	d305      	bcc.n	8004812 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800480c:	69fa      	ldr	r2, [r7, #28]
 800480e:	429a      	cmp	r2, r3
 8004810:	d903      	bls.n	800481a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004818:	e0e8      	b.n	80049ec <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	2200      	movs	r2, #0
 800481e:	461c      	mov	r4, r3
 8004820:	4615      	mov	r5, r2
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	022b      	lsls	r3, r5, #8
 800482c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004830:	0222      	lsls	r2, r4, #8
 8004832:	68f9      	ldr	r1, [r7, #12]
 8004834:	6849      	ldr	r1, [r1, #4]
 8004836:	0849      	lsrs	r1, r1, #1
 8004838:	2000      	movs	r0, #0
 800483a:	4688      	mov	r8, r1
 800483c:	4681      	mov	r9, r0
 800483e:	eb12 0a08 	adds.w	sl, r2, r8
 8004842:	eb43 0b09 	adc.w	fp, r3, r9
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	603b      	str	r3, [r7, #0]
 800484e:	607a      	str	r2, [r7, #4]
 8004850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004854:	4650      	mov	r0, sl
 8004856:	4659      	mov	r1, fp
 8004858:	f7fb fcba 	bl	80001d0 <__aeabi_uldivmod>
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	4613      	mov	r3, r2
 8004862:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800486a:	d308      	bcc.n	800487e <UART_SetConfig+0x3de>
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004872:	d204      	bcs.n	800487e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	60da      	str	r2, [r3, #12]
 800487c:	e0b6      	b.n	80049ec <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004884:	e0b2      	b.n	80049ec <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800488e:	d15e      	bne.n	800494e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004890:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004894:	2b08      	cmp	r3, #8
 8004896:	d828      	bhi.n	80048ea <UART_SetConfig+0x44a>
 8004898:	a201      	add	r2, pc, #4	@ (adr r2, 80048a0 <UART_SetConfig+0x400>)
 800489a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489e:	bf00      	nop
 80048a0:	080048c5 	.word	0x080048c5
 80048a4:	080048cd 	.word	0x080048cd
 80048a8:	080048d5 	.word	0x080048d5
 80048ac:	080048eb 	.word	0x080048eb
 80048b0:	080048db 	.word	0x080048db
 80048b4:	080048eb 	.word	0x080048eb
 80048b8:	080048eb 	.word	0x080048eb
 80048bc:	080048eb 	.word	0x080048eb
 80048c0:	080048e3 	.word	0x080048e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048c4:	f7fe fcc6 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 80048c8:	61f8      	str	r0, [r7, #28]
        break;
 80048ca:	e014      	b.n	80048f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048cc:	f7fe fcd8 	bl	8003280 <HAL_RCC_GetPCLK2Freq>
 80048d0:	61f8      	str	r0, [r7, #28]
        break;
 80048d2:	e010      	b.n	80048f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048d4:	4b4d      	ldr	r3, [pc, #308]	@ (8004a0c <UART_SetConfig+0x56c>)
 80048d6:	61fb      	str	r3, [r7, #28]
        break;
 80048d8:	e00d      	b.n	80048f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048da:	f7fe fc23 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 80048de:	61f8      	str	r0, [r7, #28]
        break;
 80048e0:	e009      	b.n	80048f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048e6:	61fb      	str	r3, [r7, #28]
        break;
 80048e8:	e005      	b.n	80048f6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80048f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d077      	beq.n	80049ec <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	005a      	lsls	r2, r3, #1
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	085b      	lsrs	r3, r3, #1
 8004906:	441a      	add	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004910:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	2b0f      	cmp	r3, #15
 8004916:	d916      	bls.n	8004946 <UART_SetConfig+0x4a6>
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800491e:	d212      	bcs.n	8004946 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	b29b      	uxth	r3, r3
 8004924:	f023 030f 	bic.w	r3, r3, #15
 8004928:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	085b      	lsrs	r3, r3, #1
 800492e:	b29b      	uxth	r3, r3
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	b29a      	uxth	r2, r3
 8004936:	8afb      	ldrh	r3, [r7, #22]
 8004938:	4313      	orrs	r3, r2
 800493a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	8afa      	ldrh	r2, [r7, #22]
 8004942:	60da      	str	r2, [r3, #12]
 8004944:	e052      	b.n	80049ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800494c:	e04e      	b.n	80049ec <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800494e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004952:	2b08      	cmp	r3, #8
 8004954:	d827      	bhi.n	80049a6 <UART_SetConfig+0x506>
 8004956:	a201      	add	r2, pc, #4	@ (adr r2, 800495c <UART_SetConfig+0x4bc>)
 8004958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495c:	08004981 	.word	0x08004981
 8004960:	08004989 	.word	0x08004989
 8004964:	08004991 	.word	0x08004991
 8004968:	080049a7 	.word	0x080049a7
 800496c:	08004997 	.word	0x08004997
 8004970:	080049a7 	.word	0x080049a7
 8004974:	080049a7 	.word	0x080049a7
 8004978:	080049a7 	.word	0x080049a7
 800497c:	0800499f 	.word	0x0800499f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004980:	f7fe fc68 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 8004984:	61f8      	str	r0, [r7, #28]
        break;
 8004986:	e014      	b.n	80049b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004988:	f7fe fc7a 	bl	8003280 <HAL_RCC_GetPCLK2Freq>
 800498c:	61f8      	str	r0, [r7, #28]
        break;
 800498e:	e010      	b.n	80049b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004990:	4b1e      	ldr	r3, [pc, #120]	@ (8004a0c <UART_SetConfig+0x56c>)
 8004992:	61fb      	str	r3, [r7, #28]
        break;
 8004994:	e00d      	b.n	80049b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004996:	f7fe fbc5 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 800499a:	61f8      	str	r0, [r7, #28]
        break;
 800499c:	e009      	b.n	80049b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800499e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049a2:	61fb      	str	r3, [r7, #28]
        break;
 80049a4:	e005      	b.n	80049b2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80049b0:	bf00      	nop
    }

    if (pclk != 0U)
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d019      	beq.n	80049ec <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	085a      	lsrs	r2, r3, #1
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	441a      	add	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	2b0f      	cmp	r3, #15
 80049d0:	d909      	bls.n	80049e6 <UART_SetConfig+0x546>
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049d8:	d205      	bcs.n	80049e6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	60da      	str	r2, [r3, #12]
 80049e4:	e002      	b.n	80049ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80049f8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3728      	adds	r7, #40	@ 0x28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a06:	bf00      	nop
 8004a08:	40008000 	.word	0x40008000
 8004a0c:	00f42400 	.word	0x00f42400

08004a10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1c:	f003 0308 	and.w	r3, r3, #8
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00a      	beq.n	8004a3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00a      	beq.n	8004a7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a82:	f003 0304 	and.w	r3, r3, #4
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa4:	f003 0310 	and.w	r3, r3, #16
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00a      	beq.n	8004ac2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d01a      	beq.n	8004b26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b0e:	d10a      	bne.n	8004b26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	605a      	str	r2, [r3, #4]
  }
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b098      	sub	sp, #96	@ 0x60
 8004b58:	af02      	add	r7, sp, #8
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b64:	f7fc fe02 	bl	800176c <HAL_GetTick>
 8004b68:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d12e      	bne.n	8004bd6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b80:	2200      	movs	r2, #0
 8004b82:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f88c 	bl	8004ca4 <UART_WaitOnFlagUntilTimeout>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d021      	beq.n	8004bd6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9a:	e853 3f00 	ldrex	r3, [r3]
 8004b9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ba2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ba6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	461a      	mov	r2, r3
 8004bae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bb2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bb8:	e841 2300 	strex	r3, r2, [r1]
 8004bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1e6      	bne.n	8004b92 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e062      	b.n	8004c9c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d149      	bne.n	8004c78 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004be4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bec:	2200      	movs	r2, #0
 8004bee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f856 	bl	8004ca4 <UART_WaitOnFlagUntilTimeout>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d03c      	beq.n	8004c78 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c06:	e853 3f00 	ldrex	r3, [r3]
 8004c0a:	623b      	str	r3, [r7, #32]
   return(result);
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	461a      	mov	r2, r3
 8004c1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c24:	e841 2300 	strex	r3, r2, [r1]
 8004c28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1e6      	bne.n	8004bfe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3308      	adds	r3, #8
 8004c36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	e853 3f00 	ldrex	r3, [r3]
 8004c3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f023 0301 	bic.w	r3, r3, #1
 8004c46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	3308      	adds	r3, #8
 8004c4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c50:	61fa      	str	r2, [r7, #28]
 8004c52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c54:	69b9      	ldr	r1, [r7, #24]
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	e841 2300 	strex	r3, r2, [r1]
 8004c5c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1e5      	bne.n	8004c30 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e011      	b.n	8004c9c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3758      	adds	r7, #88	@ 0x58
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	603b      	str	r3, [r7, #0]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cb4:	e04f      	b.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbc:	d04b      	beq.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cbe:	f7fc fd55 	bl	800176c <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d302      	bcc.n	8004cd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e04e      	b.n	8004d76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0304 	and.w	r3, r3, #4
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d037      	beq.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b80      	cmp	r3, #128	@ 0x80
 8004cea:	d034      	beq.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b40      	cmp	r3, #64	@ 0x40
 8004cf0:	d031      	beq.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	f003 0308 	and.w	r3, r3, #8
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d110      	bne.n	8004d22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2208      	movs	r2, #8
 8004d06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 f838 	bl	8004d7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2208      	movs	r2, #8
 8004d12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e029      	b.n	8004d76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d30:	d111      	bne.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f81e 	bl	8004d7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e00f      	b.n	8004d76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69da      	ldr	r2, [r3, #28]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	bf0c      	ite	eq
 8004d66:	2301      	moveq	r3, #1
 8004d68:	2300      	movne	r3, #0
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	79fb      	ldrb	r3, [r7, #7]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d0a0      	beq.n	8004cb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b095      	sub	sp, #84	@ 0x54
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d8e:	e853 3f00 	ldrex	r3, [r3]
 8004d92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	461a      	mov	r2, r3
 8004da2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004da4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004da6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004daa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004dac:	e841 2300 	strex	r3, r2, [r1]
 8004db0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1e6      	bne.n	8004d86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3308      	adds	r3, #8
 8004dbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
 8004dc2:	e853 3f00 	ldrex	r3, [r3]
 8004dc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	f023 0301 	bic.w	r3, r3, #1
 8004dce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3308      	adds	r3, #8
 8004dd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ddc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004de0:	e841 2300 	strex	r3, r2, [r1]
 8004de4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1e5      	bne.n	8004db8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d118      	bne.n	8004e26 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	e853 3f00 	ldrex	r3, [r3]
 8004e00:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f023 0310 	bic.w	r3, r3, #16
 8004e08:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e12:	61bb      	str	r3, [r7, #24]
 8004e14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e16:	6979      	ldr	r1, [r7, #20]
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1e6      	bne.n	8004df4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e3a:	bf00      	nop
 8004e3c:	3754      	adds	r7, #84	@ 0x54
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e46:	b084      	sub	sp, #16
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	f107 001c 	add.w	r0, r7, #28
 8004e54:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fa69 	bl	800533c <USB_CoreReset>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004e6e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d106      	bne.n	8004e84 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e7a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e82:	e005      	b.n	8004e90 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e88:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e9c:	b004      	add	sp, #16
 8004e9e:	4770      	bx	lr

08004ea0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f023 0201 	bic.w	r2, r3, #1
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b084      	sub	sp, #16
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ede:	78fb      	ldrb	r3, [r7, #3]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d115      	bne.n	8004f10 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004ef0:	200a      	movs	r0, #10
 8004ef2:	f7fc fc47 	bl	8001784 <HAL_Delay>
      ms += 10U;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	330a      	adds	r3, #10
 8004efa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 fa0f 	bl	8005320 <USB_GetMode>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d01e      	beq.n	8004f46 <USB_SetCurrentMode+0x84>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f0c:	d9f0      	bls.n	8004ef0 <USB_SetCurrentMode+0x2e>
 8004f0e:	e01a      	b.n	8004f46 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d115      	bne.n	8004f42 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f22:	200a      	movs	r0, #10
 8004f24:	f7fc fc2e 	bl	8001784 <HAL_Delay>
      ms += 10U;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	330a      	adds	r3, #10
 8004f2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f9f6 	bl	8005320 <USB_GetMode>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d005      	beq.n	8004f46 <USB_SetCurrentMode+0x84>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f3e:	d9f0      	bls.n	8004f22 <USB_SetCurrentMode+0x60>
 8004f40:	e001      	b.n	8004f46 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e005      	b.n	8004f52 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2bc8      	cmp	r3, #200	@ 0xc8
 8004f4a:	d101      	bne.n	8004f50 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e000      	b.n	8004f52 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f5c:	b084      	sub	sp, #16
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b086      	sub	sp, #24
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004f6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f76:	2300      	movs	r3, #0
 8004f78:	613b      	str	r3, [r7, #16]
 8004f7a:	e009      	b.n	8004f90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	3340      	adds	r3, #64	@ 0x40
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	2200      	movs	r2, #0
 8004f88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	613b      	str	r3, [r7, #16]
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	2b0e      	cmp	r3, #14
 8004f94:	d9f2      	bls.n	8004f7c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f96:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d11c      	bne.n	8004fd8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fac:	f043 0302 	orr.w	r3, r3, #2
 8004fb0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	e005      	b.n	8004fe4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fdc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004fea:	461a      	mov	r2, r3
 8004fec:	2300      	movs	r3, #0
 8004fee:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ff0:	2103      	movs	r1, #3
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f95a 	bl	80052ac <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ff8:	2110      	movs	r1, #16
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f8f6 	bl	80051ec <USB_FlushTxFifo>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f920 	bl	8005250 <USB_FlushRxFifo>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005020:	461a      	mov	r2, r3
 8005022:	2300      	movs	r3, #0
 8005024:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800502c:	461a      	mov	r2, r3
 800502e:	2300      	movs	r3, #0
 8005030:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005038:	461a      	mov	r2, r3
 800503a:	2300      	movs	r3, #0
 800503c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800503e:	2300      	movs	r3, #0
 8005040:	613b      	str	r3, [r7, #16]
 8005042:	e043      	b.n	80050cc <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005056:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800505a:	d118      	bne.n	800508e <USB_DevInit+0x132>
    {
      if (i == 0U)
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10a      	bne.n	8005078 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	4413      	add	r3, r2
 800506a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800506e:	461a      	mov	r2, r3
 8005070:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	e013      	b.n	80050a0 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005084:	461a      	mov	r2, r3
 8005086:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	e008      	b.n	80050a0 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800509a:	461a      	mov	r2, r3
 800509c:	2300      	movs	r3, #0
 800509e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ac:	461a      	mov	r2, r3
 80050ae:	2300      	movs	r3, #0
 80050b0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050be:	461a      	mov	r2, r3
 80050c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80050c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	3301      	adds	r3, #1
 80050ca:	613b      	str	r3, [r7, #16]
 80050cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80050d0:	461a      	mov	r2, r3
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d3b5      	bcc.n	8005044 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050d8:	2300      	movs	r3, #0
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	e043      	b.n	8005166 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050f4:	d118      	bne.n	8005128 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10a      	bne.n	8005112 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4413      	add	r3, r2
 8005104:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005108:	461a      	mov	r2, r3
 800510a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800510e:	6013      	str	r3, [r2, #0]
 8005110:	e013      	b.n	800513a <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800511e:	461a      	mov	r2, r3
 8005120:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	e008      	b.n	800513a <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005134:	461a      	mov	r2, r3
 8005136:	2300      	movs	r3, #0
 8005138:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005146:	461a      	mov	r2, r3
 8005148:	2300      	movs	r3, #0
 800514a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005158:	461a      	mov	r2, r3
 800515a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800515e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	3301      	adds	r3, #1
 8005164:	613b      	str	r3, [r7, #16]
 8005166:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800516a:	461a      	mov	r2, r3
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	4293      	cmp	r3, r2
 8005170:	d3b5      	bcc.n	80050de <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005180:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005184:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005192:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	f043 0210 	orr.w	r2, r3, #16
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	699a      	ldr	r2, [r3, #24]
 80051a4:	4b10      	ldr	r3, [pc, #64]	@ (80051e8 <USB_DevInit+0x28c>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d005      	beq.n	80051c0 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	f043 0208 	orr.w	r2, r3, #8
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d107      	bne.n	80051d8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80051d0:	f043 0304 	orr.w	r3, r3, #4
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3718      	adds	r7, #24
 80051de:	46bd      	mov	sp, r7
 80051e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051e4:	b004      	add	sp, #16
 80051e6:	4770      	bx	lr
 80051e8:	803c3800 	.word	0x803c3800

080051ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3301      	adds	r3, #1
 80051fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005206:	d901      	bls.n	800520c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e01b      	b.n	8005244 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	2b00      	cmp	r3, #0
 8005212:	daf2      	bge.n	80051fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	019b      	lsls	r3, r3, #6
 800521c:	f043 0220 	orr.w	r2, r3, #32
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3301      	adds	r3, #1
 8005228:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005230:	d901      	bls.n	8005236 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e006      	b.n	8005244 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b20      	cmp	r3, #32
 8005240:	d0f0      	beq.n	8005224 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	3301      	adds	r3, #1
 8005260:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005268:	d901      	bls.n	800526e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e018      	b.n	80052a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	2b00      	cmp	r3, #0
 8005274:	daf2      	bge.n	800525c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2210      	movs	r2, #16
 800527e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	3301      	adds	r3, #1
 8005284:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800528c:	d901      	bls.n	8005292 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e006      	b.n	80052a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f003 0310 	and.w	r3, r3, #16
 800529a:	2b10      	cmp	r3, #16
 800529c:	d0f0      	beq.n	8005280 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	78fb      	ldrb	r3, [r7, #3]
 80052c6:	68f9      	ldr	r1, [r7, #12]
 80052c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052cc:	4313      	orrs	r3, r2
 80052ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80052de:	b480      	push	{r7}
 80052e0:	b085      	sub	sp, #20
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80052f8:	f023 0303 	bic.w	r3, r3, #3
 80052fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800530c:	f043 0302 	orr.w	r3, r3, #2
 8005310:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	f003 0301 	and.w	r3, r3, #1
}
 8005330:	4618      	mov	r0, r3
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	3301      	adds	r3, #1
 800534c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005354:	d901      	bls.n	800535a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e01b      	b.n	8005392 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	2b00      	cmp	r3, #0
 8005360:	daf2      	bge.n	8005348 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f043 0201 	orr.w	r2, r3, #1
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	3301      	adds	r3, #1
 8005376:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800537e:	d901      	bls.n	8005384 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e006      	b.n	8005392 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b01      	cmp	r3, #1
 800538e:	d0f0      	beq.n	8005372 <USB_CoreReset+0x36>

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
	...

080053a0 <__NVIC_SetPriority>:
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	4603      	mov	r3, r0
 80053a8:	6039      	str	r1, [r7, #0]
 80053aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	db0a      	blt.n	80053ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	490c      	ldr	r1, [pc, #48]	@ (80053ec <__NVIC_SetPriority+0x4c>)
 80053ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053be:	0112      	lsls	r2, r2, #4
 80053c0:	b2d2      	uxtb	r2, r2
 80053c2:	440b      	add	r3, r1
 80053c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80053c8:	e00a      	b.n	80053e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	4908      	ldr	r1, [pc, #32]	@ (80053f0 <__NVIC_SetPriority+0x50>)
 80053d0:	79fb      	ldrb	r3, [r7, #7]
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	3b04      	subs	r3, #4
 80053d8:	0112      	lsls	r2, r2, #4
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	440b      	add	r3, r1
 80053de:	761a      	strb	r2, [r3, #24]
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	e000e100 	.word	0xe000e100
 80053f0:	e000ed00 	.word	0xe000ed00

080053f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80053f4:	b580      	push	{r7, lr}
 80053f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80053f8:	2100      	movs	r1, #0
 80053fa:	f06f 0004 	mvn.w	r0, #4
 80053fe:	f7ff ffcf 	bl	80053a0 <__NVIC_SetPriority>
#endif
}
 8005402:	bf00      	nop
 8005404:	bd80      	pop	{r7, pc}
	...

08005408 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800540e:	f3ef 8305 	mrs	r3, IPSR
 8005412:	603b      	str	r3, [r7, #0]
  return(result);
 8005414:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800541a:	f06f 0305 	mvn.w	r3, #5
 800541e:	607b      	str	r3, [r7, #4]
 8005420:	e00c      	b.n	800543c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005422:	4b0a      	ldr	r3, [pc, #40]	@ (800544c <osKernelInitialize+0x44>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d105      	bne.n	8005436 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800542a:	4b08      	ldr	r3, [pc, #32]	@ (800544c <osKernelInitialize+0x44>)
 800542c:	2201      	movs	r2, #1
 800542e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005430:	2300      	movs	r3, #0
 8005432:	607b      	str	r3, [r7, #4]
 8005434:	e002      	b.n	800543c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005436:	f04f 33ff 	mov.w	r3, #4294967295
 800543a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800543c:	687b      	ldr	r3, [r7, #4]
}
 800543e:	4618      	mov	r0, r3
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	200007f0 	.word	0x200007f0

08005450 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005456:	f3ef 8305 	mrs	r3, IPSR
 800545a:	603b      	str	r3, [r7, #0]
  return(result);
 800545c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005462:	f06f 0305 	mvn.w	r3, #5
 8005466:	607b      	str	r3, [r7, #4]
 8005468:	e010      	b.n	800548c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800546a:	4b0b      	ldr	r3, [pc, #44]	@ (8005498 <osKernelStart+0x48>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d109      	bne.n	8005486 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005472:	f7ff ffbf 	bl	80053f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005476:	4b08      	ldr	r3, [pc, #32]	@ (8005498 <osKernelStart+0x48>)
 8005478:	2202      	movs	r2, #2
 800547a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800547c:	f002 f9c6 	bl	800780c <vTaskStartScheduler>
      stat = osOK;
 8005480:	2300      	movs	r3, #0
 8005482:	607b      	str	r3, [r7, #4]
 8005484:	e002      	b.n	800548c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005486:	f04f 33ff 	mov.w	r3, #4294967295
 800548a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800548c:	687b      	ldr	r3, [r7, #4]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	200007f0 	.word	0x200007f0

0800549c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800549c:	b580      	push	{r7, lr}
 800549e:	b08e      	sub	sp, #56	@ 0x38
 80054a0:	af04      	add	r7, sp, #16
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80054a8:	2300      	movs	r3, #0
 80054aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054ac:	f3ef 8305 	mrs	r3, IPSR
 80054b0:	617b      	str	r3, [r7, #20]
  return(result);
 80054b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d17e      	bne.n	80055b6 <osThreadNew+0x11a>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d07b      	beq.n	80055b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80054be:	2380      	movs	r3, #128	@ 0x80
 80054c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80054c2:	2318      	movs	r3, #24
 80054c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80054c6:	2300      	movs	r3, #0
 80054c8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80054ca:	f04f 33ff 	mov.w	r3, #4294967295
 80054ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d045      	beq.n	8005562 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <osThreadNew+0x48>
        name = attr->name;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d008      	beq.n	800550a <osThreadNew+0x6e>
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	2b38      	cmp	r3, #56	@ 0x38
 80054fc:	d805      	bhi.n	800550a <osThreadNew+0x6e>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <osThreadNew+0x72>
        return (NULL);
 800550a:	2300      	movs	r3, #0
 800550c:	e054      	b.n	80055b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	089b      	lsrs	r3, r3, #2
 800551c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00e      	beq.n	8005544 <osThreadNew+0xa8>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	2b5b      	cmp	r3, #91	@ 0x5b
 800552c:	d90a      	bls.n	8005544 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005532:	2b00      	cmp	r3, #0
 8005534:	d006      	beq.n	8005544 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <osThreadNew+0xa8>
        mem = 1;
 800553e:	2301      	movs	r3, #1
 8005540:	61bb      	str	r3, [r7, #24]
 8005542:	e010      	b.n	8005566 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10c      	bne.n	8005566 <osThreadNew+0xca>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d108      	bne.n	8005566 <osThreadNew+0xca>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d104      	bne.n	8005566 <osThreadNew+0xca>
          mem = 0;
 800555c:	2300      	movs	r3, #0
 800555e:	61bb      	str	r3, [r7, #24]
 8005560:	e001      	b.n	8005566 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005562:	2300      	movs	r3, #0
 8005564:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d110      	bne.n	800558e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005574:	9202      	str	r2, [sp, #8]
 8005576:	9301      	str	r3, [sp, #4]
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	6a3a      	ldr	r2, [r7, #32]
 8005580:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f001 ff66 	bl	8007454 <xTaskCreateStatic>
 8005588:	4603      	mov	r3, r0
 800558a:	613b      	str	r3, [r7, #16]
 800558c:	e013      	b.n	80055b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d110      	bne.n	80055b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	b29a      	uxth	r2, r3
 8005598:	f107 0310 	add.w	r3, r7, #16
 800559c:	9301      	str	r3, [sp, #4]
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f001 ffb4 	bl	8007514 <xTaskCreate>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d001      	beq.n	80055b6 <osThreadNew+0x11a>
            hTask = NULL;
 80055b2:	2300      	movs	r3, #0
 80055b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80055b6:	693b      	ldr	r3, [r7, #16]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3728      	adds	r7, #40	@ 0x28
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b088      	sub	sp, #32
 80055c4:	af02      	add	r7, sp, #8
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d002      	beq.n	80055da <osThreadFlagsSet+0x1a>
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	da03      	bge.n	80055e2 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80055da:	f06f 0303 	mvn.w	r3, #3
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	e035      	b.n	800564e <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 80055e2:	f04f 33ff 	mov.w	r3, #4294967295
 80055e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055e8:	f3ef 8305 	mrs	r3, IPSR
 80055ec:	613b      	str	r3, [r7, #16]
  return(result);
 80055ee:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d01f      	beq.n	8005634 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 80055f4:	2300      	movs	r3, #0
 80055f6:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80055f8:	f107 0308 	add.w	r3, r7, #8
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	2300      	movs	r3, #0
 8005600:	2201      	movs	r2, #1
 8005602:	6839      	ldr	r1, [r7, #0]
 8005604:	6978      	ldr	r0, [r7, #20]
 8005606:	f003 f801 	bl	800860c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800560a:	f107 030c 	add.w	r3, r7, #12
 800560e:	2200      	movs	r2, #0
 8005610:	9200      	str	r2, [sp, #0]
 8005612:	2200      	movs	r2, #0
 8005614:	2100      	movs	r1, #0
 8005616:	6978      	ldr	r0, [r7, #20]
 8005618:	f002 fff8 	bl	800860c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d015      	beq.n	800564e <osThreadFlagsSet+0x8e>
 8005622:	4b0d      	ldr	r3, [pc, #52]	@ (8005658 <osThreadFlagsSet+0x98>)
 8005624:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	e00c      	b.n	800564e <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8005634:	2300      	movs	r3, #0
 8005636:	2201      	movs	r2, #1
 8005638:	6839      	ldr	r1, [r7, #0]
 800563a:	6978      	ldr	r0, [r7, #20]
 800563c:	f002 ff2c 	bl	8008498 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8005640:	f107 030c 	add.w	r3, r7, #12
 8005644:	2200      	movs	r2, #0
 8005646:	2100      	movs	r1, #0
 8005648:	6978      	ldr	r0, [r7, #20]
 800564a:	f002 ff25 	bl	8008498 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800564e:	68fb      	ldr	r3, [r7, #12]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	e000ed04 	.word	0xe000ed04

0800565c <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005664:	f3ef 8305 	mrs	r3, IPSR
 8005668:	60fb      	str	r3, [r7, #12]
  return(result);
 800566a:	68fb      	ldr	r3, [r7, #12]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <osThreadFlagsClear+0x1c>
    rflags = (uint32_t)osErrorISR;
 8005670:	f06f 0305 	mvn.w	r3, #5
 8005674:	617b      	str	r3, [r7, #20]
 8005676:	e02a      	b.n	80056ce <osThreadFlagsClear+0x72>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	da03      	bge.n	8005686 <osThreadFlagsClear+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800567e:	f06f 0303 	mvn.w	r3, #3
 8005682:	617b      	str	r3, [r7, #20]
 8005684:	e023      	b.n	80056ce <osThreadFlagsClear+0x72>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 8005686:	f002 fd0f 	bl	80080a8 <xTaskGetCurrentTaskHandle>
 800568a:	6138      	str	r0, [r7, #16]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 800568c:	f107 0308 	add.w	r3, r7, #8
 8005690:	2200      	movs	r2, #0
 8005692:	2100      	movs	r1, #0
 8005694:	6938      	ldr	r0, [r7, #16]
 8005696:	f002 feff 	bl	8008498 <xTaskGenericNotify>
 800569a:	4603      	mov	r3, r0
 800569c:	2b01      	cmp	r3, #1
 800569e:	d113      	bne.n	80056c8 <osThreadFlagsClear+0x6c>
      rflags = cflags;
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	617b      	str	r3, [r7, #20]
      cflags &= ~flags;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	43da      	mvns	r2, r3
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	4013      	ands	r3, r2
 80056ac:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 80056ae:	68b9      	ldr	r1, [r7, #8]
 80056b0:	2300      	movs	r3, #0
 80056b2:	2203      	movs	r2, #3
 80056b4:	6938      	ldr	r0, [r7, #16]
 80056b6:	f002 feef 	bl	8008498 <xTaskGenericNotify>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d006      	beq.n	80056ce <osThreadFlagsClear+0x72>
        rflags = (uint32_t)osError;
 80056c0:	f04f 33ff 	mov.w	r3, #4294967295
 80056c4:	617b      	str	r3, [r7, #20]
 80056c6:	e002      	b.n	80056ce <osThreadFlagsClear+0x72>
      }
    }
    else {
      rflags = (uint32_t)osError;
 80056c8:	f04f 33ff 	mov.w	r3, #4294967295
 80056cc:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 80056ce:	697b      	ldr	r3, [r7, #20]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3718      	adds	r7, #24
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08c      	sub	sp, #48	@ 0x30
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056e4:	f3ef 8305 	mrs	r3, IPSR
 80056e8:	617b      	str	r3, [r7, #20]
  return(result);
 80056ea:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 80056f0:	f06f 0305 	mvn.w	r3, #5
 80056f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056f6:	e06b      	b.n	80057d0 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	da03      	bge.n	8005706 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 80056fe:	f06f 0303 	mvn.w	r3, #3
 8005702:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005704:	e064      	b.n	80057d0 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <osThreadFlagsWait+0x3e>
      clear = 0U;
 8005710:	2300      	movs	r3, #0
 8005712:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005714:	e001      	b.n	800571a <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 8005722:	f002 f987 	bl	8007a34 <xTaskGetTickCount>
 8005726:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8005728:	f107 0210 	add.w	r2, r7, #16
 800572c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005730:	2000      	movs	r0, #0
 8005732:	f002 fe57 	bl	80083e4 <xTaskNotifyWait>
 8005736:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d137      	bne.n	80057ae <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800573e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4013      	ands	r3, r2
 8005744:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800574a:	4313      	orrs	r3, r2
 800574c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00c      	beq.n	8005772 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800575c:	4013      	ands	r3, r2
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	429a      	cmp	r2, r3
 8005762:	d032      	beq.n	80057ca <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10f      	bne.n	800578a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800576a:	f06f 0302 	mvn.w	r3, #2
 800576e:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8005770:	e02e      	b.n	80057d0 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005776:	4013      	ands	r3, r2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d128      	bne.n	80057ce <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d103      	bne.n	800578a <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8005782:	f06f 0302 	mvn.w	r3, #2
 8005786:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8005788:	e022      	b.n	80057d0 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800578a:	f002 f953 	bl	8007a34 <xTaskGetTickCount>
 800578e:	4602      	mov	r2, r0
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579a:	429a      	cmp	r2, r3
 800579c:	d902      	bls.n	80057a4 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800579e:	2300      	movs	r3, #0
 80057a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80057a2:	e00e      	b.n	80057c2 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 80057a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80057ac:	e009      	b.n	80057c2 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d103      	bne.n	80057bc <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 80057b4:	f06f 0302 	mvn.w	r3, #2
 80057b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057ba:	e002      	b.n	80057c2 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80057bc:	f06f 0301 	mvn.w	r3, #1
 80057c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1af      	bne.n	8005728 <osThreadFlagsWait+0x50>
 80057c8:	e002      	b.n	80057d0 <osThreadFlagsWait+0xf8>
            break;
 80057ca:	bf00      	nop
 80057cc:	e000      	b.n	80057d0 <osThreadFlagsWait+0xf8>
            break;
 80057ce:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80057d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3730      	adds	r7, #48	@ 0x30
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80057da:	b580      	push	{r7, lr}
 80057dc:	b084      	sub	sp, #16
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057e2:	f3ef 8305 	mrs	r3, IPSR
 80057e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80057e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <osDelay+0x1c>
    stat = osErrorISR;
 80057ee:	f06f 0305 	mvn.w	r3, #5
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	e007      	b.n	8005806 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f001 ffcd 	bl	80077a0 <vTaskDelay>
    }
  }

  return (stat);
 8005806:	68fb      	ldr	r3, [r7, #12]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f003 fc4d 	bl	80090b8 <pvTimerGetTimerID>
 800581e:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d005      	beq.n	8005832 <TimerCallback+0x22>
    callb->func (callb->arg);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	6852      	ldr	r2, [r2, #4]
 800582e:	4610      	mov	r0, r2
 8005830:	4798      	blx	r3
  }
}
 8005832:	bf00      	nop
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800583c:	b580      	push	{r7, lr}
 800583e:	b08c      	sub	sp, #48	@ 0x30
 8005840:	af02      	add	r7, sp, #8
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	607a      	str	r2, [r7, #4]
 8005846:	603b      	str	r3, [r7, #0]
 8005848:	460b      	mov	r3, r1
 800584a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800584c:	2300      	movs	r3, #0
 800584e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005850:	f3ef 8305 	mrs	r3, IPSR
 8005854:	613b      	str	r3, [r7, #16]
  return(result);
 8005856:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8005858:	2b00      	cmp	r3, #0
 800585a:	d163      	bne.n	8005924 <osTimerNew+0xe8>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d060      	beq.n	8005924 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8005862:	2008      	movs	r0, #8
 8005864:	f003 fe9a 	bl	800959c <pvPortMalloc>
 8005868:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d059      	beq.n	8005924 <osTimerNew+0xe8>
      callb->func = func;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800587c:	7afb      	ldrb	r3, [r7, #11]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d102      	bne.n	8005888 <osTimerNew+0x4c>
        reload = pdFALSE;
 8005882:	2300      	movs	r3, #0
 8005884:	61fb      	str	r3, [r7, #28]
 8005886:	e001      	b.n	800588c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8005888:	2301      	movs	r3, #1
 800588a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800588c:	f04f 33ff 	mov.w	r3, #4294967295
 8005890:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8005892:	2300      	movs	r3, #0
 8005894:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01c      	beq.n	80058d6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <osTimerNew+0x6e>
          name = attr->name;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d006      	beq.n	80058c0 <osTimerNew+0x84>
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	2b2b      	cmp	r3, #43	@ 0x2b
 80058b8:	d902      	bls.n	80058c0 <osTimerNew+0x84>
          mem = 1;
 80058ba:	2301      	movs	r3, #1
 80058bc:	61bb      	str	r3, [r7, #24]
 80058be:	e00c      	b.n	80058da <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d108      	bne.n	80058da <osTimerNew+0x9e>
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d104      	bne.n	80058da <osTimerNew+0x9e>
            mem = 0;
 80058d0:	2300      	movs	r3, #0
 80058d2:	61bb      	str	r3, [r7, #24]
 80058d4:	e001      	b.n	80058da <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80058d6:	2300      	movs	r3, #0
 80058d8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d10c      	bne.n	80058fa <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	9301      	str	r3, [sp, #4]
 80058e6:	4b12      	ldr	r3, [pc, #72]	@ (8005930 <osTimerNew+0xf4>)
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	69fa      	ldr	r2, [r7, #28]
 80058ee:	2101      	movs	r1, #1
 80058f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80058f2:	f003 f82a 	bl	800894a <xTimerCreateStatic>
 80058f6:	6238      	str	r0, [r7, #32]
 80058f8:	e00b      	b.n	8005912 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d108      	bne.n	8005912 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8005900:	4b0b      	ldr	r3, [pc, #44]	@ (8005930 <osTimerNew+0xf4>)
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	69fa      	ldr	r2, [r7, #28]
 8005908:	2101      	movs	r1, #1
 800590a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800590c:	f002 fffc 	bl	8008908 <xTimerCreate>
 8005910:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d105      	bne.n	8005924 <osTimerNew+0xe8>
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d002      	beq.n	8005924 <osTimerNew+0xe8>
        vPortFree (callb);
 800591e:	6978      	ldr	r0, [r7, #20]
 8005920:	f003 ff0a 	bl	8009738 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8005924:	6a3b      	ldr	r3, [r7, #32]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3728      	adds	r7, #40	@ 0x28
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	08005811 	.word	0x08005811

08005934 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8005934:	b580      	push	{r7, lr}
 8005936:	b088      	sub	sp, #32
 8005938:	af02      	add	r7, sp, #8
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005942:	f3ef 8305 	mrs	r3, IPSR
 8005946:	60fb      	str	r3, [r7, #12]
  return(result);
 8005948:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <osTimerStart+0x22>
    stat = osErrorISR;
 800594e:	f06f 0305 	mvn.w	r3, #5
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	e017      	b.n	8005986 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d103      	bne.n	8005964 <osTimerStart+0x30>
    stat = osErrorParameter;
 800595c:	f06f 0303 	mvn.w	r3, #3
 8005960:	617b      	str	r3, [r7, #20]
 8005962:	e010      	b.n	8005986 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8005964:	2300      	movs	r3, #0
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	2300      	movs	r3, #0
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	2104      	movs	r1, #4
 800596e:	6938      	ldr	r0, [r7, #16]
 8005970:	f003 f868 	bl	8008a44 <xTimerGenericCommand>
 8005974:	4603      	mov	r3, r0
 8005976:	2b01      	cmp	r3, #1
 8005978:	d102      	bne.n	8005980 <osTimerStart+0x4c>
      stat = osOK;
 800597a:	2300      	movs	r3, #0
 800597c:	617b      	str	r3, [r7, #20]
 800597e:	e002      	b.n	8005986 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8005980:	f06f 0302 	mvn.w	r3, #2
 8005984:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005986:	697b      	ldr	r3, [r7, #20]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3718      	adds	r7, #24
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8005990:	b580      	push	{r7, lr}
 8005992:	b088      	sub	sp, #32
 8005994:	af02      	add	r7, sp, #8
 8005996:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800599c:	f3ef 8305 	mrs	r3, IPSR
 80059a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80059a2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <osTimerStop+0x20>
    stat = osErrorISR;
 80059a8:	f06f 0305 	mvn.w	r3, #5
 80059ac:	617b      	str	r3, [r7, #20]
 80059ae:	e021      	b.n	80059f4 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d103      	bne.n	80059be <osTimerStop+0x2e>
    stat = osErrorParameter;
 80059b6:	f06f 0303 	mvn.w	r3, #3
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	e01a      	b.n	80059f4 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 80059be:	6938      	ldr	r0, [r7, #16]
 80059c0:	f003 fb50 	bl	8009064 <xTimerIsTimerActive>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d103      	bne.n	80059d2 <osTimerStop+0x42>
      stat = osErrorResource;
 80059ca:	f06f 0302 	mvn.w	r3, #2
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	e010      	b.n	80059f4 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 80059d2:	2300      	movs	r3, #0
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	2300      	movs	r3, #0
 80059d8:	2200      	movs	r2, #0
 80059da:	2103      	movs	r1, #3
 80059dc:	6938      	ldr	r0, [r7, #16]
 80059de:	f003 f831 	bl	8008a44 <xTimerGenericCommand>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d102      	bne.n	80059ee <osTimerStop+0x5e>
        stat = osOK;
 80059e8:	2300      	movs	r3, #0
 80059ea:	617b      	str	r3, [r7, #20]
 80059ec:	e002      	b.n	80059f4 <osTimerStop+0x64>
      } else {
        stat = osError;
 80059ee:	f04f 33ff 	mov.w	r3, #4294967295
 80059f2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80059f4:	697b      	ldr	r3, [r7, #20]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b088      	sub	sp, #32
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005a06:	2300      	movs	r3, #0
 8005a08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a0a:	f3ef 8305 	mrs	r3, IPSR
 8005a0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a10:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d174      	bne.n	8005b00 <osMutexNew+0x102>
    if (attr != NULL) {
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	61bb      	str	r3, [r7, #24]
 8005a22:	e001      	b.n	8005a28 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d002      	beq.n	8005a38 <osMutexNew+0x3a>
      rmtx = 1U;
 8005a32:	2301      	movs	r3, #1
 8005a34:	617b      	str	r3, [r7, #20]
 8005a36:	e001      	b.n	8005a3c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	f003 0308 	and.w	r3, r3, #8
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d15c      	bne.n	8005b00 <osMutexNew+0x102>
      mem = -1;
 8005a46:	f04f 33ff 	mov.w	r3, #4294967295
 8005a4a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d015      	beq.n	8005a7e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d006      	beq.n	8005a68 <osMutexNew+0x6a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	2b4f      	cmp	r3, #79	@ 0x4f
 8005a60:	d902      	bls.n	8005a68 <osMutexNew+0x6a>
          mem = 1;
 8005a62:	2301      	movs	r3, #1
 8005a64:	613b      	str	r3, [r7, #16]
 8005a66:	e00c      	b.n	8005a82 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d108      	bne.n	8005a82 <osMutexNew+0x84>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d104      	bne.n	8005a82 <osMutexNew+0x84>
            mem = 0;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	e001      	b.n	8005a82 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d112      	bne.n	8005aae <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d007      	beq.n	8005a9e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	4619      	mov	r1, r3
 8005a94:	2004      	movs	r0, #4
 8005a96:	f000 fd70 	bl	800657a <xQueueCreateMutexStatic>
 8005a9a:	61f8      	str	r0, [r7, #28]
 8005a9c:	e016      	b.n	8005acc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	2001      	movs	r0, #1
 8005aa6:	f000 fd68 	bl	800657a <xQueueCreateMutexStatic>
 8005aaa:	61f8      	str	r0, [r7, #28]
 8005aac:	e00e      	b.n	8005acc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10b      	bne.n	8005acc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d004      	beq.n	8005ac4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005aba:	2004      	movs	r0, #4
 8005abc:	f000 fd45 	bl	800654a <xQueueCreateMutex>
 8005ac0:	61f8      	str	r0, [r7, #28]
 8005ac2:	e003      	b.n	8005acc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005ac4:	2001      	movs	r0, #1
 8005ac6:	f000 fd40 	bl	800654a <xQueueCreateMutex>
 8005aca:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00c      	beq.n	8005aec <osMutexNew+0xee>
        if (attr != NULL) {
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <osMutexNew+0xe2>
          name = attr->name;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	e001      	b.n	8005ae4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005ae4:	68f9      	ldr	r1, [r7, #12]
 8005ae6:	69f8      	ldr	r0, [r7, #28]
 8005ae8:	f001 fc2c 	bl	8007344 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d006      	beq.n	8005b00 <osMutexNew+0x102>
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	f043 0301 	orr.w	r3, r3, #1
 8005afe:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005b00:	69fb      	ldr	r3, [r7, #28]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3720      	adds	r7, #32
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b086      	sub	sp, #24
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f023 0301 	bic.w	r3, r3, #1
 8005b1a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005b24:	2300      	movs	r3, #0
 8005b26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b28:	f3ef 8305 	mrs	r3, IPSR
 8005b2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b2e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d003      	beq.n	8005b3c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005b34:	f06f 0305 	mvn.w	r3, #5
 8005b38:	617b      	str	r3, [r7, #20]
 8005b3a:	e02c      	b.n	8005b96 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d103      	bne.n	8005b4a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005b42:	f06f 0303 	mvn.w	r3, #3
 8005b46:	617b      	str	r3, [r7, #20]
 8005b48:	e025      	b.n	8005b96 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d011      	beq.n	8005b74 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005b50:	6839      	ldr	r1, [r7, #0]
 8005b52:	6938      	ldr	r0, [r7, #16]
 8005b54:	f000 fd61 	bl	800661a <xQueueTakeMutexRecursive>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d01b      	beq.n	8005b96 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005b64:	f06f 0301 	mvn.w	r3, #1
 8005b68:	617b      	str	r3, [r7, #20]
 8005b6a:	e014      	b.n	8005b96 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005b6c:	f06f 0302 	mvn.w	r3, #2
 8005b70:	617b      	str	r3, [r7, #20]
 8005b72:	e010      	b.n	8005b96 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005b74:	6839      	ldr	r1, [r7, #0]
 8005b76:	6938      	ldr	r0, [r7, #16]
 8005b78:	f001 f906 	bl	8006d88 <xQueueSemaphoreTake>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d009      	beq.n	8005b96 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d003      	beq.n	8005b90 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005b88:	f06f 0301 	mvn.w	r3, #1
 8005b8c:	617b      	str	r3, [r7, #20]
 8005b8e:	e002      	b.n	8005b96 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005b90:	f06f 0302 	mvn.w	r3, #2
 8005b94:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005b96:	697b      	ldr	r3, [r7, #20]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f023 0301 	bic.w	r3, r3, #1
 8005bae:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bbc:	f3ef 8305 	mrs	r3, IPSR
 8005bc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bc2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d003      	beq.n	8005bd0 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005bc8:	f06f 0305 	mvn.w	r3, #5
 8005bcc:	617b      	str	r3, [r7, #20]
 8005bce:	e01f      	b.n	8005c10 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d103      	bne.n	8005bde <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005bd6:	f06f 0303 	mvn.w	r3, #3
 8005bda:	617b      	str	r3, [r7, #20]
 8005bdc:	e018      	b.n	8005c10 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d009      	beq.n	8005bf8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005be4:	6938      	ldr	r0, [r7, #16]
 8005be6:	f000 fce3 	bl	80065b0 <xQueueGiveMutexRecursive>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d00f      	beq.n	8005c10 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005bf0:	f06f 0302 	mvn.w	r3, #2
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	e00b      	b.n	8005c10 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	6938      	ldr	r0, [r7, #16]
 8005c00:	f000 fdb0 	bl	8006764 <xQueueGenericSend>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d002      	beq.n	8005c10 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005c0a:	f06f 0302 	mvn.w	r3, #2
 8005c0e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005c10:	697b      	ldr	r3, [r7, #20]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3718      	adds	r7, #24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b08a      	sub	sp, #40	@ 0x28
 8005c1e:	af02      	add	r7, sp, #8
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c2a:	f3ef 8305 	mrs	r3, IPSR
 8005c2e:	613b      	str	r3, [r7, #16]
  return(result);
 8005c30:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d175      	bne.n	8005d22 <osSemaphoreNew+0x108>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d072      	beq.n	8005d22 <osSemaphoreNew+0x108>
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d86e      	bhi.n	8005d22 <osSemaphoreNew+0x108>
    mem = -1;
 8005c44:	f04f 33ff 	mov.w	r3, #4294967295
 8005c48:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d015      	beq.n	8005c7c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d006      	beq.n	8005c66 <osSemaphoreNew+0x4c>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	2b4f      	cmp	r3, #79	@ 0x4f
 8005c5e:	d902      	bls.n	8005c66 <osSemaphoreNew+0x4c>
        mem = 1;
 8005c60:	2301      	movs	r3, #1
 8005c62:	61bb      	str	r3, [r7, #24]
 8005c64:	e00c      	b.n	8005c80 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d108      	bne.n	8005c80 <osSemaphoreNew+0x66>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d104      	bne.n	8005c80 <osSemaphoreNew+0x66>
          mem = 0;
 8005c76:	2300      	movs	r3, #0
 8005c78:	61bb      	str	r3, [r7, #24]
 8005c7a:	e001      	b.n	8005c80 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c86:	d04c      	beq.n	8005d22 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d128      	bne.n	8005ce0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d10a      	bne.n	8005caa <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	2203      	movs	r2, #3
 8005c9a:	9200      	str	r2, [sp, #0]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	2001      	movs	r0, #1
 8005ca2:	f000 fb5d 	bl	8006360 <xQueueGenericCreateStatic>
 8005ca6:	61f8      	str	r0, [r7, #28]
 8005ca8:	e005      	b.n	8005cb6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005caa:	2203      	movs	r2, #3
 8005cac:	2100      	movs	r1, #0
 8005cae:	2001      	movs	r0, #1
 8005cb0:	f000 fbd3 	bl	800645a <xQueueGenericCreate>
 8005cb4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d022      	beq.n	8005d02 <osSemaphoreNew+0xe8>
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d01f      	beq.n	8005d02 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	69f8      	ldr	r0, [r7, #28]
 8005cca:	f000 fd4b 	bl	8006764 <xQueueGenericSend>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d016      	beq.n	8005d02 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005cd4:	69f8      	ldr	r0, [r7, #28]
 8005cd6:	f001 f9e9 	bl	80070ac <vQueueDelete>
            hSemaphore = NULL;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	61fb      	str	r3, [r7, #28]
 8005cde:	e010      	b.n	8005d02 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d108      	bne.n	8005cf8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	461a      	mov	r2, r3
 8005cec:	68b9      	ldr	r1, [r7, #8]
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 fcca 	bl	8006688 <xQueueCreateCountingSemaphoreStatic>
 8005cf4:	61f8      	str	r0, [r7, #28]
 8005cf6:	e004      	b.n	8005d02 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005cf8:	68b9      	ldr	r1, [r7, #8]
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 fcfd 	bl	80066fa <xQueueCreateCountingSemaphore>
 8005d00:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00c      	beq.n	8005d22 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	617b      	str	r3, [r7, #20]
 8005d14:	e001      	b.n	8005d1a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005d16:	2300      	movs	r3, #0
 8005d18:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005d1a:	6979      	ldr	r1, [r7, #20]
 8005d1c:	69f8      	ldr	r0, [r7, #28]
 8005d1e:	f001 fb11 	bl	8007344 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005d22:	69fb      	ldr	r3, [r7, #28]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3720      	adds	r7, #32
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d103      	bne.n	8005d4c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005d44:	f06f 0303 	mvn.w	r3, #3
 8005d48:	617b      	str	r3, [r7, #20]
 8005d4a:	e039      	b.n	8005dc0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d4c:	f3ef 8305 	mrs	r3, IPSR
 8005d50:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d52:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d022      	beq.n	8005d9e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005d5e:	f06f 0303 	mvn.w	r3, #3
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	e02c      	b.n	8005dc0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005d66:	2300      	movs	r3, #0
 8005d68:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005d6a:	f107 0308 	add.w	r3, r7, #8
 8005d6e:	461a      	mov	r2, r3
 8005d70:	2100      	movs	r1, #0
 8005d72:	6938      	ldr	r0, [r7, #16]
 8005d74:	f001 f918 	bl	8006fa8 <xQueueReceiveFromISR>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d003      	beq.n	8005d86 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005d7e:	f06f 0302 	mvn.w	r3, #2
 8005d82:	617b      	str	r3, [r7, #20]
 8005d84:	e01c      	b.n	8005dc0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d019      	beq.n	8005dc0 <osSemaphoreAcquire+0x94>
 8005d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8005dcc <osSemaphoreAcquire+0xa0>)
 8005d8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	e010      	b.n	8005dc0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005d9e:	6839      	ldr	r1, [r7, #0]
 8005da0:	6938      	ldr	r0, [r7, #16]
 8005da2:	f000 fff1 	bl	8006d88 <xQueueSemaphoreTake>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d009      	beq.n	8005dc0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005db2:	f06f 0301 	mvn.w	r3, #1
 8005db6:	617b      	str	r3, [r7, #20]
 8005db8:	e002      	b.n	8005dc0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005dba:	f06f 0302 	mvn.w	r3, #2
 8005dbe:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005dc0:	697b      	ldr	r3, [r7, #20]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	e000ed04 	.word	0xe000ed04

08005dd0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d103      	bne.n	8005dee <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005de6:	f06f 0303 	mvn.w	r3, #3
 8005dea:	617b      	str	r3, [r7, #20]
 8005dec:	e02c      	b.n	8005e48 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dee:	f3ef 8305 	mrs	r3, IPSR
 8005df2:	60fb      	str	r3, [r7, #12]
  return(result);
 8005df4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d01a      	beq.n	8005e30 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005dfe:	f107 0308 	add.w	r3, r7, #8
 8005e02:	4619      	mov	r1, r3
 8005e04:	6938      	ldr	r0, [r7, #16]
 8005e06:	f000 fe4d 	bl	8006aa4 <xQueueGiveFromISR>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d003      	beq.n	8005e18 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005e10:	f06f 0302 	mvn.w	r3, #2
 8005e14:	617b      	str	r3, [r7, #20]
 8005e16:	e017      	b.n	8005e48 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d014      	beq.n	8005e48 <osSemaphoreRelease+0x78>
 8005e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e54 <osSemaphoreRelease+0x84>)
 8005e20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	f3bf 8f4f 	dsb	sy
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	e00b      	b.n	8005e48 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005e30:	2300      	movs	r3, #0
 8005e32:	2200      	movs	r2, #0
 8005e34:	2100      	movs	r1, #0
 8005e36:	6938      	ldr	r0, [r7, #16]
 8005e38:	f000 fc94 	bl	8006764 <xQueueGenericSend>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d002      	beq.n	8005e48 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005e42:	f06f 0302 	mvn.w	r3, #2
 8005e46:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005e48:	697b      	ldr	r3, [r7, #20]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	e000ed04 	.word	0xe000ed04

08005e58 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08a      	sub	sp, #40	@ 0x28
 8005e5c:	af02      	add	r7, sp, #8
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005e64:	2300      	movs	r3, #0
 8005e66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e68:	f3ef 8305 	mrs	r3, IPSR
 8005e6c:	613b      	str	r3, [r7, #16]
  return(result);
 8005e6e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d15f      	bne.n	8005f34 <osMessageQueueNew+0xdc>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d05c      	beq.n	8005f34 <osMessageQueueNew+0xdc>
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d059      	beq.n	8005f34 <osMessageQueueNew+0xdc>
    mem = -1;
 8005e80:	f04f 33ff 	mov.w	r3, #4294967295
 8005e84:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d029      	beq.n	8005ee0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d012      	beq.n	8005eba <osMessageQueueNew+0x62>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	2b4f      	cmp	r3, #79	@ 0x4f
 8005e9a:	d90e      	bls.n	8005eba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00a      	beq.n	8005eba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	695a      	ldr	r2, [r3, #20]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	68b9      	ldr	r1, [r7, #8]
 8005eac:	fb01 f303 	mul.w	r3, r1, r3
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d302      	bcc.n	8005eba <osMessageQueueNew+0x62>
        mem = 1;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	61bb      	str	r3, [r7, #24]
 8005eb8:	e014      	b.n	8005ee4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d110      	bne.n	8005ee4 <osMessageQueueNew+0x8c>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10c      	bne.n	8005ee4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d108      	bne.n	8005ee4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d104      	bne.n	8005ee4 <osMessageQueueNew+0x8c>
          mem = 0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	61bb      	str	r3, [r7, #24]
 8005ede:	e001      	b.n	8005ee4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d10b      	bne.n	8005f02 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691a      	ldr	r2, [r3, #16]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	9100      	str	r1, [sp, #0]
 8005ef6:	68b9      	ldr	r1, [r7, #8]
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 fa31 	bl	8006360 <xQueueGenericCreateStatic>
 8005efe:	61f8      	str	r0, [r7, #28]
 8005f00:	e008      	b.n	8005f14 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d105      	bne.n	8005f14 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005f08:	2200      	movs	r2, #0
 8005f0a:	68b9      	ldr	r1, [r7, #8]
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f000 faa4 	bl	800645a <xQueueGenericCreate>
 8005f12:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00c      	beq.n	8005f34 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	617b      	str	r3, [r7, #20]
 8005f26:	e001      	b.n	8005f2c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005f2c:	6979      	ldr	r1, [r7, #20]
 8005f2e:	69f8      	ldr	r0, [r7, #28]
 8005f30:	f001 fa08 	bl	8007344 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005f34:	69fb      	ldr	r3, [r7, #28]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3720      	adds	r7, #32
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
	...

08005f40 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b088      	sub	sp, #32
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	603b      	str	r3, [r7, #0]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005f54:	2300      	movs	r3, #0
 8005f56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f58:	f3ef 8305 	mrs	r3, IPSR
 8005f5c:	617b      	str	r3, [r7, #20]
  return(result);
 8005f5e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d028      	beq.n	8005fb6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d005      	beq.n	8005f76 <osMessageQueuePut+0x36>
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <osMessageQueuePut+0x36>
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005f76:	f06f 0303 	mvn.w	r3, #3
 8005f7a:	61fb      	str	r3, [r7, #28]
 8005f7c:	e038      	b.n	8005ff0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005f82:	f107 0210 	add.w	r2, r7, #16
 8005f86:	2300      	movs	r3, #0
 8005f88:	68b9      	ldr	r1, [r7, #8]
 8005f8a:	69b8      	ldr	r0, [r7, #24]
 8005f8c:	f000 fcec 	bl	8006968 <xQueueGenericSendFromISR>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d003      	beq.n	8005f9e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005f96:	f06f 0302 	mvn.w	r3, #2
 8005f9a:	61fb      	str	r3, [r7, #28]
 8005f9c:	e028      	b.n	8005ff0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d025      	beq.n	8005ff0 <osMessageQueuePut+0xb0>
 8005fa4:	4b15      	ldr	r3, [pc, #84]	@ (8005ffc <osMessageQueuePut+0xbc>)
 8005fa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005faa:	601a      	str	r2, [r3, #0]
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	e01c      	b.n	8005ff0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <osMessageQueuePut+0x82>
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d103      	bne.n	8005fca <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005fc2:	f06f 0303 	mvn.w	r3, #3
 8005fc6:	61fb      	str	r3, [r7, #28]
 8005fc8:	e012      	b.n	8005ff0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005fca:	2300      	movs	r3, #0
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	68b9      	ldr	r1, [r7, #8]
 8005fd0:	69b8      	ldr	r0, [r7, #24]
 8005fd2:	f000 fbc7 	bl	8006764 <xQueueGenericSend>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d009      	beq.n	8005ff0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005fe2:	f06f 0301 	mvn.w	r3, #1
 8005fe6:	61fb      	str	r3, [r7, #28]
 8005fe8:	e002      	b.n	8005ff0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005fea:	f06f 0302 	mvn.w	r3, #2
 8005fee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005ff0:	69fb      	ldr	r3, [r7, #28]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3720      	adds	r7, #32
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	e000ed04 	.word	0xe000ed04

08006000 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006000:	b580      	push	{r7, lr}
 8006002:	b088      	sub	sp, #32
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
 800600c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006012:	2300      	movs	r3, #0
 8006014:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006016:	f3ef 8305 	mrs	r3, IPSR
 800601a:	617b      	str	r3, [r7, #20]
  return(result);
 800601c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800601e:	2b00      	cmp	r3, #0
 8006020:	d028      	beq.n	8006074 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d005      	beq.n	8006034 <osMessageQueueGet+0x34>
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d002      	beq.n	8006034 <osMessageQueueGet+0x34>
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d003      	beq.n	800603c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006034:	f06f 0303 	mvn.w	r3, #3
 8006038:	61fb      	str	r3, [r7, #28]
 800603a:	e037      	b.n	80060ac <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800603c:	2300      	movs	r3, #0
 800603e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006040:	f107 0310 	add.w	r3, r7, #16
 8006044:	461a      	mov	r2, r3
 8006046:	68b9      	ldr	r1, [r7, #8]
 8006048:	69b8      	ldr	r0, [r7, #24]
 800604a:	f000 ffad 	bl	8006fa8 <xQueueReceiveFromISR>
 800604e:	4603      	mov	r3, r0
 8006050:	2b01      	cmp	r3, #1
 8006052:	d003      	beq.n	800605c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006054:	f06f 0302 	mvn.w	r3, #2
 8006058:	61fb      	str	r3, [r7, #28]
 800605a:	e027      	b.n	80060ac <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d024      	beq.n	80060ac <osMessageQueueGet+0xac>
 8006062:	4b15      	ldr	r3, [pc, #84]	@ (80060b8 <osMessageQueueGet+0xb8>)
 8006064:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006068:	601a      	str	r2, [r3, #0]
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	e01b      	b.n	80060ac <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d002      	beq.n	8006080 <osMessageQueueGet+0x80>
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d103      	bne.n	8006088 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006080:	f06f 0303 	mvn.w	r3, #3
 8006084:	61fb      	str	r3, [r7, #28]
 8006086:	e011      	b.n	80060ac <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	69b8      	ldr	r0, [r7, #24]
 800608e:	f000 fd99 	bl	8006bc4 <xQueueReceive>
 8006092:	4603      	mov	r3, r0
 8006094:	2b01      	cmp	r3, #1
 8006096:	d009      	beq.n	80060ac <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800609e:	f06f 0301 	mvn.w	r3, #1
 80060a2:	61fb      	str	r3, [r7, #28]
 80060a4:	e002      	b.n	80060ac <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80060a6:	f06f 0302 	mvn.w	r3, #2
 80060aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80060ac:	69fb      	ldr	r3, [r7, #28]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3720      	adds	r7, #32
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	e000ed04 	.word	0xe000ed04

080060bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	4a07      	ldr	r2, [pc, #28]	@ (80060e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80060cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	4a06      	ldr	r2, [pc, #24]	@ (80060ec <vApplicationGetIdleTaskMemory+0x30>)
 80060d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2280      	movs	r2, #128	@ 0x80
 80060d8:	601a      	str	r2, [r3, #0]
}
 80060da:	bf00      	nop
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	200007f4 	.word	0x200007f4
 80060ec:	20000850 	.word	0x20000850

080060f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4a07      	ldr	r2, [pc, #28]	@ (800611c <vApplicationGetTimerTaskMemory+0x2c>)
 8006100:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	4a06      	ldr	r2, [pc, #24]	@ (8006120 <vApplicationGetTimerTaskMemory+0x30>)
 8006106:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800610e:	601a      	str	r2, [r3, #0]
}
 8006110:	bf00      	nop
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	20000a50 	.word	0x20000a50
 8006120:	20000aac 	.word	0x20000aac

08006124 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f103 0208 	add.w	r2, r3, #8
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f04f 32ff 	mov.w	r2, #4294967295
 800613c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f103 0208 	add.w	r2, r3, #8
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f103 0208 	add.w	r2, r3, #8
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006172:	bf00      	nop
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800617e:	b480      	push	{r7}
 8006180:	b085      	sub	sp, #20
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	601a      	str	r2, [r3, #0]
}
 80061ba:	bf00      	nop
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061c6:	b480      	push	{r7}
 80061c8:	b085      	sub	sp, #20
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061dc:	d103      	bne.n	80061e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	e00c      	b.n	8006200 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	3308      	adds	r3, #8
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	e002      	b.n	80061f4 <vListInsert+0x2e>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	60fb      	str	r3, [r7, #12]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d2f6      	bcs.n	80061ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	1c5a      	adds	r2, r3, #1
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	601a      	str	r2, [r3, #0]
}
 800622c:	bf00      	nop
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	6892      	ldr	r2, [r2, #8]
 800624e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	6852      	ldr	r2, [r2, #4]
 8006258:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	429a      	cmp	r2, r3
 8006262:	d103      	bne.n	800626c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689a      	ldr	r2, [r3, #8]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	1e5a      	subs	r2, r3, #1
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
}
 8006280:	4618      	mov	r0, r3
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10b      	bne.n	80062b8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80062b2:	bf00      	nop
 80062b4:	bf00      	nop
 80062b6:	e7fd      	b.n	80062b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80062b8:	f003 f84e 	bl	8009358 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062c4:	68f9      	ldr	r1, [r7, #12]
 80062c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80062c8:	fb01 f303 	mul.w	r3, r1, r3
 80062cc:	441a      	add	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e8:	3b01      	subs	r3, #1
 80062ea:	68f9      	ldr	r1, [r7, #12]
 80062ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80062ee:	fb01 f303 	mul.w	r3, r1, r3
 80062f2:	441a      	add	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	22ff      	movs	r2, #255	@ 0xff
 80062fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	22ff      	movs	r2, #255	@ 0xff
 8006304:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d114      	bne.n	8006338 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d01a      	beq.n	800634c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	3310      	adds	r3, #16
 800631a:	4618      	mov	r0, r3
 800631c:	f001 fd04 	bl	8007d28 <xTaskRemoveFromEventList>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d012      	beq.n	800634c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006326:	4b0d      	ldr	r3, [pc, #52]	@ (800635c <xQueueGenericReset+0xd0>)
 8006328:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	e009      	b.n	800634c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	3310      	adds	r3, #16
 800633c:	4618      	mov	r0, r3
 800633e:	f7ff fef1 	bl	8006124 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	3324      	adds	r3, #36	@ 0x24
 8006346:	4618      	mov	r0, r3
 8006348:	f7ff feec 	bl	8006124 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800634c:	f003 f836 	bl	80093bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006350:	2301      	movs	r3, #1
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	e000ed04 	.word	0xe000ed04

08006360 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08e      	sub	sp, #56	@ 0x38
 8006364:	af02      	add	r7, sp, #8
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10b      	bne.n	800638c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006386:	bf00      	nop
 8006388:	bf00      	nop
 800638a:	e7fd      	b.n	8006388 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10b      	bne.n	80063aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop
 80063a8:	e7fd      	b.n	80063a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <xQueueGenericCreateStatic+0x56>
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <xQueueGenericCreateStatic+0x5a>
 80063b6:	2301      	movs	r3, #1
 80063b8:	e000      	b.n	80063bc <xQueueGenericCreateStatic+0x5c>
 80063ba:	2300      	movs	r3, #0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10b      	bne.n	80063d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80063c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	623b      	str	r3, [r7, #32]
}
 80063d2:	bf00      	nop
 80063d4:	bf00      	nop
 80063d6:	e7fd      	b.n	80063d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d102      	bne.n	80063e4 <xQueueGenericCreateStatic+0x84>
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <xQueueGenericCreateStatic+0x88>
 80063e4:	2301      	movs	r3, #1
 80063e6:	e000      	b.n	80063ea <xQueueGenericCreateStatic+0x8a>
 80063e8:	2300      	movs	r3, #0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10b      	bne.n	8006406 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	61fb      	str	r3, [r7, #28]
}
 8006400:	bf00      	nop
 8006402:	bf00      	nop
 8006404:	e7fd      	b.n	8006402 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006406:	2350      	movs	r3, #80	@ 0x50
 8006408:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	2b50      	cmp	r3, #80	@ 0x50
 800640e:	d00b      	beq.n	8006428 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006414:	f383 8811 	msr	BASEPRI, r3
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	61bb      	str	r3, [r7, #24]
}
 8006422:	bf00      	nop
 8006424:	bf00      	nop
 8006426:	e7fd      	b.n	8006424 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006428:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800642e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00d      	beq.n	8006450 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800643c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	4613      	mov	r3, r2
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	68b9      	ldr	r1, [r7, #8]
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 f840 	bl	80064d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006452:	4618      	mov	r0, r3
 8006454:	3730      	adds	r7, #48	@ 0x30
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800645a:	b580      	push	{r7, lr}
 800645c:	b08a      	sub	sp, #40	@ 0x28
 800645e:	af02      	add	r7, sp, #8
 8006460:	60f8      	str	r0, [r7, #12]
 8006462:	60b9      	str	r1, [r7, #8]
 8006464:	4613      	mov	r3, r2
 8006466:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10b      	bne.n	8006486 <xQueueGenericCreate+0x2c>
	__asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	613b      	str	r3, [r7, #16]
}
 8006480:	bf00      	nop
 8006482:	bf00      	nop
 8006484:	e7fd      	b.n	8006482 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	fb02 f303 	mul.w	r3, r2, r3
 800648e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	3350      	adds	r3, #80	@ 0x50
 8006494:	4618      	mov	r0, r3
 8006496:	f003 f881 	bl	800959c <pvPortMalloc>
 800649a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d011      	beq.n	80064c6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	3350      	adds	r3, #80	@ 0x50
 80064aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064b4:	79fa      	ldrb	r2, [r7, #7]
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	4613      	mov	r3, r2
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	68b9      	ldr	r1, [r7, #8]
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 f805 	bl	80064d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80064c6:	69bb      	ldr	r3, [r7, #24]
	}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3720      	adds	r7, #32
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d103      	bne.n	80064ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	e002      	b.n	80064f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80064fe:	2101      	movs	r1, #1
 8006500:	69b8      	ldr	r0, [r7, #24]
 8006502:	f7ff fec3 	bl	800628c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	78fa      	ldrb	r2, [r7, #3]
 800650a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800650e:	bf00      	nop
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006516:	b580      	push	{r7, lr}
 8006518:	b082      	sub	sp, #8
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00e      	beq.n	8006542 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006536:	2300      	movs	r3, #0
 8006538:	2200      	movs	r2, #0
 800653a:	2100      	movs	r1, #0
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 f911 	bl	8006764 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006542:	bf00      	nop
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800654a:	b580      	push	{r7, lr}
 800654c:	b086      	sub	sp, #24
 800654e:	af00      	add	r7, sp, #0
 8006550:	4603      	mov	r3, r0
 8006552:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006554:	2301      	movs	r3, #1
 8006556:	617b      	str	r3, [r7, #20]
 8006558:	2300      	movs	r3, #0
 800655a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800655c:	79fb      	ldrb	r3, [r7, #7]
 800655e:	461a      	mov	r2, r3
 8006560:	6939      	ldr	r1, [r7, #16]
 8006562:	6978      	ldr	r0, [r7, #20]
 8006564:	f7ff ff79 	bl	800645a <xQueueGenericCreate>
 8006568:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f7ff ffd3 	bl	8006516 <prvInitialiseMutex>

		return xNewQueue;
 8006570:	68fb      	ldr	r3, [r7, #12]
	}
 8006572:	4618      	mov	r0, r3
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800657a:	b580      	push	{r7, lr}
 800657c:	b088      	sub	sp, #32
 800657e:	af02      	add	r7, sp, #8
 8006580:	4603      	mov	r3, r0
 8006582:	6039      	str	r1, [r7, #0]
 8006584:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006586:	2301      	movs	r3, #1
 8006588:	617b      	str	r3, [r7, #20]
 800658a:	2300      	movs	r3, #0
 800658c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800658e:	79fb      	ldrb	r3, [r7, #7]
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2200      	movs	r2, #0
 8006596:	6939      	ldr	r1, [r7, #16]
 8006598:	6978      	ldr	r0, [r7, #20]
 800659a:	f7ff fee1 	bl	8006360 <xQueueGenericCreateStatic>
 800659e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f7ff ffb8 	bl	8006516 <prvInitialiseMutex>

		return xNewQueue;
 80065a6:	68fb      	ldr	r3, [r7, #12]
	}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80065b0:	b590      	push	{r4, r7, lr}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10b      	bne.n	80065da <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	60fb      	str	r3, [r7, #12]
}
 80065d4:	bf00      	nop
 80065d6:	bf00      	nop
 80065d8:	e7fd      	b.n	80065d6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	689c      	ldr	r4, [r3, #8]
 80065de:	f001 fd63 	bl	80080a8 <xTaskGetCurrentTaskHandle>
 80065e2:	4603      	mov	r3, r0
 80065e4:	429c      	cmp	r4, r3
 80065e6:	d111      	bne.n	800660c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	1e5a      	subs	r2, r3, #1
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d105      	bne.n	8006606 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80065fa:	2300      	movs	r3, #0
 80065fc:	2200      	movs	r2, #0
 80065fe:	2100      	movs	r1, #0
 8006600:	6938      	ldr	r0, [r7, #16]
 8006602:	f000 f8af 	bl	8006764 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006606:	2301      	movs	r3, #1
 8006608:	617b      	str	r3, [r7, #20]
 800660a:	e001      	b.n	8006610 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800660c:	2300      	movs	r3, #0
 800660e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006610:	697b      	ldr	r3, [r7, #20]
	}
 8006612:	4618      	mov	r0, r3
 8006614:	371c      	adds	r7, #28
 8006616:	46bd      	mov	sp, r7
 8006618:	bd90      	pop	{r4, r7, pc}

0800661a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800661a:	b590      	push	{r4, r7, lr}
 800661c:	b087      	sub	sp, #28
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10b      	bne.n	8006646 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	60fb      	str	r3, [r7, #12]
}
 8006640:	bf00      	nop
 8006642:	bf00      	nop
 8006644:	e7fd      	b.n	8006642 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	689c      	ldr	r4, [r3, #8]
 800664a:	f001 fd2d 	bl	80080a8 <xTaskGetCurrentTaskHandle>
 800664e:	4603      	mov	r3, r0
 8006650:	429c      	cmp	r4, r3
 8006652:	d107      	bne.n	8006664 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800665e:	2301      	movs	r3, #1
 8006660:	617b      	str	r3, [r7, #20]
 8006662:	e00c      	b.n	800667e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006664:	6839      	ldr	r1, [r7, #0]
 8006666:	6938      	ldr	r0, [r7, #16]
 8006668:	f000 fb8e 	bl	8006d88 <xQueueSemaphoreTake>
 800666c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d004      	beq.n	800667e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800667e:	697b      	ldr	r3, [r7, #20]
	}
 8006680:	4618      	mov	r0, r3
 8006682:	371c      	adds	r7, #28
 8006684:	46bd      	mov	sp, r7
 8006686:	bd90      	pop	{r4, r7, pc}

08006688 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006688:	b580      	push	{r7, lr}
 800668a:	b08a      	sub	sp, #40	@ 0x28
 800668c:	af02      	add	r7, sp, #8
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10b      	bne.n	80066b2 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800669a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	61bb      	str	r3, [r7, #24]
}
 80066ac:	bf00      	nop
 80066ae:	bf00      	nop
 80066b0:	e7fd      	b.n	80066ae <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d90b      	bls.n	80066d2 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80066ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066be:	f383 8811 	msr	BASEPRI, r3
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	617b      	str	r3, [r7, #20]
}
 80066cc:	bf00      	nop
 80066ce:	bf00      	nop
 80066d0:	e7fd      	b.n	80066ce <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80066d2:	2302      	movs	r3, #2
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	2100      	movs	r1, #0
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f7ff fe3f 	bl	8006360 <xQueueGenericCreateStatic>
 80066e2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80066f0:	69fb      	ldr	r3, [r7, #28]
	}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3720      	adds	r7, #32
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b086      	sub	sp, #24
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10b      	bne.n	8006722 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	613b      	str	r3, [r7, #16]
}
 800671c:	bf00      	nop
 800671e:	bf00      	nop
 8006720:	e7fd      	b.n	800671e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	429a      	cmp	r2, r3
 8006728:	d90b      	bls.n	8006742 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800672a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	60fb      	str	r3, [r7, #12]
}
 800673c:	bf00      	nop
 800673e:	bf00      	nop
 8006740:	e7fd      	b.n	800673e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006742:	2202      	movs	r2, #2
 8006744:	2100      	movs	r1, #0
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7ff fe87 	bl	800645a <xQueueGenericCreate>
 800674c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d002      	beq.n	800675a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800675a:	697b      	ldr	r3, [r7, #20]
	}
 800675c:	4618      	mov	r0, r3
 800675e:	3718      	adds	r7, #24
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b08e      	sub	sp, #56	@ 0x38
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
 8006770:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006772:	2300      	movs	r3, #0
 8006774:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800677a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10b      	bne.n	8006798 <xQueueGenericSend+0x34>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006792:	bf00      	nop
 8006794:	bf00      	nop
 8006796:	e7fd      	b.n	8006794 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d103      	bne.n	80067a6 <xQueueGenericSend+0x42>
 800679e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <xQueueGenericSend+0x46>
 80067a6:	2301      	movs	r3, #1
 80067a8:	e000      	b.n	80067ac <xQueueGenericSend+0x48>
 80067aa:	2300      	movs	r3, #0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10b      	bne.n	80067c8 <xQueueGenericSend+0x64>
	__asm volatile
 80067b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80067c2:	bf00      	nop
 80067c4:	bf00      	nop
 80067c6:	e7fd      	b.n	80067c4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d103      	bne.n	80067d6 <xQueueGenericSend+0x72>
 80067ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d101      	bne.n	80067da <xQueueGenericSend+0x76>
 80067d6:	2301      	movs	r3, #1
 80067d8:	e000      	b.n	80067dc <xQueueGenericSend+0x78>
 80067da:	2300      	movs	r3, #0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10b      	bne.n	80067f8 <xQueueGenericSend+0x94>
	__asm volatile
 80067e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e4:	f383 8811 	msr	BASEPRI, r3
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	623b      	str	r3, [r7, #32]
}
 80067f2:	bf00      	nop
 80067f4:	bf00      	nop
 80067f6:	e7fd      	b.n	80067f4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067f8:	f001 fc66 	bl	80080c8 <xTaskGetSchedulerState>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d102      	bne.n	8006808 <xQueueGenericSend+0xa4>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d101      	bne.n	800680c <xQueueGenericSend+0xa8>
 8006808:	2301      	movs	r3, #1
 800680a:	e000      	b.n	800680e <xQueueGenericSend+0xaa>
 800680c:	2300      	movs	r3, #0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10b      	bne.n	800682a <xQueueGenericSend+0xc6>
	__asm volatile
 8006812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	61fb      	str	r3, [r7, #28]
}
 8006824:	bf00      	nop
 8006826:	bf00      	nop
 8006828:	e7fd      	b.n	8006826 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800682a:	f002 fd95 	bl	8009358 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800682e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006830:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006836:	429a      	cmp	r2, r3
 8006838:	d302      	bcc.n	8006840 <xQueueGenericSend+0xdc>
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b02      	cmp	r3, #2
 800683e:	d129      	bne.n	8006894 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	68b9      	ldr	r1, [r7, #8]
 8006844:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006846:	f000 fc6d 	bl	8007124 <prvCopyDataToQueue>
 800684a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800684c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006850:	2b00      	cmp	r3, #0
 8006852:	d010      	beq.n	8006876 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006856:	3324      	adds	r3, #36	@ 0x24
 8006858:	4618      	mov	r0, r3
 800685a:	f001 fa65 	bl	8007d28 <xTaskRemoveFromEventList>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d013      	beq.n	800688c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006864:	4b3f      	ldr	r3, [pc, #252]	@ (8006964 <xQueueGenericSend+0x200>)
 8006866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800686a:	601a      	str	r2, [r3, #0]
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	e00a      	b.n	800688c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006878:	2b00      	cmp	r3, #0
 800687a:	d007      	beq.n	800688c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800687c:	4b39      	ldr	r3, [pc, #228]	@ (8006964 <xQueueGenericSend+0x200>)
 800687e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800688c:	f002 fd96 	bl	80093bc <vPortExitCritical>
				return pdPASS;
 8006890:	2301      	movs	r3, #1
 8006892:	e063      	b.n	800695c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d103      	bne.n	80068a2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800689a:	f002 fd8f 	bl	80093bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800689e:	2300      	movs	r3, #0
 80068a0:	e05c      	b.n	800695c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d106      	bne.n	80068b6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068a8:	f107 0314 	add.w	r3, r7, #20
 80068ac:	4618      	mov	r0, r3
 80068ae:	f001 fa9f 	bl	8007df0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068b2:	2301      	movs	r3, #1
 80068b4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068b6:	f002 fd81 	bl	80093bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068ba:	f001 f80f 	bl	80078dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068be:	f002 fd4b 	bl	8009358 <vPortEnterCritical>
 80068c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068c8:	b25b      	sxtb	r3, r3
 80068ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ce:	d103      	bne.n	80068d8 <xQueueGenericSend+0x174>
 80068d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068de:	b25b      	sxtb	r3, r3
 80068e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e4:	d103      	bne.n	80068ee <xQueueGenericSend+0x18a>
 80068e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068ee:	f002 fd65 	bl	80093bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068f2:	1d3a      	adds	r2, r7, #4
 80068f4:	f107 0314 	add.w	r3, r7, #20
 80068f8:	4611      	mov	r1, r2
 80068fa:	4618      	mov	r0, r3
 80068fc:	f001 fa8e 	bl	8007e1c <xTaskCheckForTimeOut>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d124      	bne.n	8006950 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006906:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006908:	f000 fd04 	bl	8007314 <prvIsQueueFull>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d018      	beq.n	8006944 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006914:	3310      	adds	r3, #16
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	4611      	mov	r1, r2
 800691a:	4618      	mov	r0, r3
 800691c:	f001 f9b2 	bl	8007c84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006920:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006922:	f000 fc8f 	bl	8007244 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006926:	f000 ffe7 	bl	80078f8 <xTaskResumeAll>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	f47f af7c 	bne.w	800682a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006932:	4b0c      	ldr	r3, [pc, #48]	@ (8006964 <xQueueGenericSend+0x200>)
 8006934:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	f3bf 8f6f 	isb	sy
 8006942:	e772      	b.n	800682a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006944:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006946:	f000 fc7d 	bl	8007244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800694a:	f000 ffd5 	bl	80078f8 <xTaskResumeAll>
 800694e:	e76c      	b.n	800682a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006950:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006952:	f000 fc77 	bl	8007244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006956:	f000 ffcf 	bl	80078f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800695a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800695c:	4618      	mov	r0, r3
 800695e:	3738      	adds	r7, #56	@ 0x38
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	e000ed04 	.word	0xe000ed04

08006968 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b090      	sub	sp, #64	@ 0x40
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800697a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10b      	bne.n	8006998 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006992:	bf00      	nop
 8006994:	bf00      	nop
 8006996:	e7fd      	b.n	8006994 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d103      	bne.n	80069a6 <xQueueGenericSendFromISR+0x3e>
 800699e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <xQueueGenericSendFromISR+0x42>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e000      	b.n	80069ac <xQueueGenericSendFromISR+0x44>
 80069aa:	2300      	movs	r3, #0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10b      	bne.n	80069c8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80069b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80069c2:	bf00      	nop
 80069c4:	bf00      	nop
 80069c6:	e7fd      	b.n	80069c4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d103      	bne.n	80069d6 <xQueueGenericSendFromISR+0x6e>
 80069ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d101      	bne.n	80069da <xQueueGenericSendFromISR+0x72>
 80069d6:	2301      	movs	r3, #1
 80069d8:	e000      	b.n	80069dc <xQueueGenericSendFromISR+0x74>
 80069da:	2300      	movs	r3, #0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10b      	bne.n	80069f8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80069e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e4:	f383 8811 	msr	BASEPRI, r3
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	623b      	str	r3, [r7, #32]
}
 80069f2:	bf00      	nop
 80069f4:	bf00      	nop
 80069f6:	e7fd      	b.n	80069f4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069f8:	f002 fd8e 	bl	8009518 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80069fc:	f3ef 8211 	mrs	r2, BASEPRI
 8006a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a04:	f383 8811 	msr	BASEPRI, r3
 8006a08:	f3bf 8f6f 	isb	sy
 8006a0c:	f3bf 8f4f 	dsb	sy
 8006a10:	61fa      	str	r2, [r7, #28]
 8006a12:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006a14:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a16:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d302      	bcc.n	8006a2a <xQueueGenericSendFromISR+0xc2>
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d12f      	bne.n	8006a8a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a3a:	683a      	ldr	r2, [r7, #0]
 8006a3c:	68b9      	ldr	r1, [r7, #8]
 8006a3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006a40:	f000 fb70 	bl	8007124 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a44:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4c:	d112      	bne.n	8006a74 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d016      	beq.n	8006a84 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a58:	3324      	adds	r3, #36	@ 0x24
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f001 f964 	bl	8007d28 <xTaskRemoveFromEventList>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00e      	beq.n	8006a84 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00b      	beq.n	8006a84 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	601a      	str	r2, [r3, #0]
 8006a72:	e007      	b.n	8006a84 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006a78:	3301      	adds	r3, #1
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	b25a      	sxtb	r2, r3
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006a84:	2301      	movs	r3, #1
 8006a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006a88:	e001      	b.n	8006a8e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a90:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006a98:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3740      	adds	r7, #64	@ 0x40
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b08e      	sub	sp, #56	@ 0x38
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10b      	bne.n	8006ad0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006abc:	f383 8811 	msr	BASEPRI, r3
 8006ac0:	f3bf 8f6f 	isb	sy
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	623b      	str	r3, [r7, #32]
}
 8006aca:	bf00      	nop
 8006acc:	bf00      	nop
 8006ace:	e7fd      	b.n	8006acc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00b      	beq.n	8006af0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006adc:	f383 8811 	msr	BASEPRI, r3
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	61fb      	str	r3, [r7, #28]
}
 8006aea:	bf00      	nop
 8006aec:	bf00      	nop
 8006aee:	e7fd      	b.n	8006aec <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d103      	bne.n	8006b00 <xQueueGiveFromISR+0x5c>
 8006af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <xQueueGiveFromISR+0x60>
 8006b00:	2301      	movs	r3, #1
 8006b02:	e000      	b.n	8006b06 <xQueueGiveFromISR+0x62>
 8006b04:	2300      	movs	r3, #0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10b      	bne.n	8006b22 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	61bb      	str	r3, [r7, #24]
}
 8006b1c:	bf00      	nop
 8006b1e:	bf00      	nop
 8006b20:	e7fd      	b.n	8006b1e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b22:	f002 fcf9 	bl	8009518 <vPortValidateInterruptPriority>
	__asm volatile
 8006b26:	f3ef 8211 	mrs	r2, BASEPRI
 8006b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	617a      	str	r2, [r7, #20]
 8006b3c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006b3e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b46:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d22b      	bcs.n	8006baa <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b62:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b64:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6c:	d112      	bne.n	8006b94 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d016      	beq.n	8006ba4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b78:	3324      	adds	r3, #36	@ 0x24
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f001 f8d4 	bl	8007d28 <xTaskRemoveFromEventList>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00e      	beq.n	8006ba4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00b      	beq.n	8006ba4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	601a      	str	r2, [r3, #0]
 8006b92:	e007      	b.n	8006ba4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b98:	3301      	adds	r3, #1
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	b25a      	sxtb	r2, r3
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ba8:	e001      	b.n	8006bae <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006baa:	2300      	movs	r3, #0
 8006bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f383 8811 	msr	BASEPRI, r3
}
 8006bb8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3738      	adds	r7, #56	@ 0x38
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08c      	sub	sp, #48	@ 0x30
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10b      	bne.n	8006bf6 <xQueueReceive+0x32>
	__asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	623b      	str	r3, [r7, #32]
}
 8006bf0:	bf00      	nop
 8006bf2:	bf00      	nop
 8006bf4:	e7fd      	b.n	8006bf2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d103      	bne.n	8006c04 <xQueueReceive+0x40>
 8006bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <xQueueReceive+0x44>
 8006c04:	2301      	movs	r3, #1
 8006c06:	e000      	b.n	8006c0a <xQueueReceive+0x46>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10b      	bne.n	8006c26 <xQueueReceive+0x62>
	__asm volatile
 8006c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	61fb      	str	r3, [r7, #28]
}
 8006c20:	bf00      	nop
 8006c22:	bf00      	nop
 8006c24:	e7fd      	b.n	8006c22 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c26:	f001 fa4f 	bl	80080c8 <xTaskGetSchedulerState>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d102      	bne.n	8006c36 <xQueueReceive+0x72>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <xQueueReceive+0x76>
 8006c36:	2301      	movs	r3, #1
 8006c38:	e000      	b.n	8006c3c <xQueueReceive+0x78>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10b      	bne.n	8006c58 <xQueueReceive+0x94>
	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	61bb      	str	r3, [r7, #24]
}
 8006c52:	bf00      	nop
 8006c54:	bf00      	nop
 8006c56:	e7fd      	b.n	8006c54 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c58:	f002 fb7e 	bl	8009358 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c60:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d01f      	beq.n	8006ca8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c68:	68b9      	ldr	r1, [r7, #8]
 8006c6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c6c:	f000 fac4 	bl	80071f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c72:	1e5a      	subs	r2, r3, #1
 8006c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c76:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00f      	beq.n	8006ca0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c82:	3310      	adds	r3, #16
 8006c84:	4618      	mov	r0, r3
 8006c86:	f001 f84f 	bl	8007d28 <xTaskRemoveFromEventList>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d007      	beq.n	8006ca0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c90:	4b3c      	ldr	r3, [pc, #240]	@ (8006d84 <xQueueReceive+0x1c0>)
 8006c92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c96:	601a      	str	r2, [r3, #0]
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ca0:	f002 fb8c 	bl	80093bc <vPortExitCritical>
				return pdPASS;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e069      	b.n	8006d7c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d103      	bne.n	8006cb6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cae:	f002 fb85 	bl	80093bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	e062      	b.n	8006d7c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d106      	bne.n	8006cca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cbc:	f107 0310 	add.w	r3, r7, #16
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f001 f895 	bl	8007df0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cca:	f002 fb77 	bl	80093bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cce:	f000 fe05 	bl	80078dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cd2:	f002 fb41 	bl	8009358 <vPortEnterCritical>
 8006cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006cdc:	b25b      	sxtb	r3, r3
 8006cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce2:	d103      	bne.n	8006cec <xQueueReceive+0x128>
 8006ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006cf2:	b25b      	sxtb	r3, r3
 8006cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf8:	d103      	bne.n	8006d02 <xQueueReceive+0x13e>
 8006cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d02:	f002 fb5b 	bl	80093bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d06:	1d3a      	adds	r2, r7, #4
 8006d08:	f107 0310 	add.w	r3, r7, #16
 8006d0c:	4611      	mov	r1, r2
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f001 f884 	bl	8007e1c <xTaskCheckForTimeOut>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d123      	bne.n	8006d62 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d1c:	f000 fae4 	bl	80072e8 <prvIsQueueEmpty>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d017      	beq.n	8006d56 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d28:	3324      	adds	r3, #36	@ 0x24
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 ffa8 	bl	8007c84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d36:	f000 fa85 	bl	8007244 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d3a:	f000 fddd 	bl	80078f8 <xTaskResumeAll>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d189      	bne.n	8006c58 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006d44:	4b0f      	ldr	r3, [pc, #60]	@ (8006d84 <xQueueReceive+0x1c0>)
 8006d46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	f3bf 8f6f 	isb	sy
 8006d54:	e780      	b.n	8006c58 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006d56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d58:	f000 fa74 	bl	8007244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d5c:	f000 fdcc 	bl	80078f8 <xTaskResumeAll>
 8006d60:	e77a      	b.n	8006c58 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d64:	f000 fa6e 	bl	8007244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d68:	f000 fdc6 	bl	80078f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d6e:	f000 fabb 	bl	80072e8 <prvIsQueueEmpty>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f43f af6f 	beq.w	8006c58 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d7a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3730      	adds	r7, #48	@ 0x30
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	e000ed04 	.word	0xe000ed04

08006d88 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b08e      	sub	sp, #56	@ 0x38
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d92:	2300      	movs	r3, #0
 8006d94:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10b      	bne.n	8006dbc <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	623b      	str	r3, [r7, #32]
}
 8006db6:	bf00      	nop
 8006db8:	bf00      	nop
 8006dba:	e7fd      	b.n	8006db8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00b      	beq.n	8006ddc <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	61fb      	str	r3, [r7, #28]
}
 8006dd6:	bf00      	nop
 8006dd8:	bf00      	nop
 8006dda:	e7fd      	b.n	8006dd8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ddc:	f001 f974 	bl	80080c8 <xTaskGetSchedulerState>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d102      	bne.n	8006dec <xQueueSemaphoreTake+0x64>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <xQueueSemaphoreTake+0x68>
 8006dec:	2301      	movs	r3, #1
 8006dee:	e000      	b.n	8006df2 <xQueueSemaphoreTake+0x6a>
 8006df0:	2300      	movs	r3, #0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10b      	bne.n	8006e0e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	61bb      	str	r3, [r7, #24]
}
 8006e08:	bf00      	nop
 8006e0a:	bf00      	nop
 8006e0c:	e7fd      	b.n	8006e0a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e0e:	f002 faa3 	bl	8009358 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e16:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d024      	beq.n	8006e68 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e20:	1e5a      	subs	r2, r3, #1
 8006e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e24:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d104      	bne.n	8006e38 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006e2e:	f001 fac5 	bl	80083bc <pvTaskIncrementMutexHeldCount>
 8006e32:	4602      	mov	r2, r0
 8006e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e36:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00f      	beq.n	8006e60 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e42:	3310      	adds	r3, #16
 8006e44:	4618      	mov	r0, r3
 8006e46:	f000 ff6f 	bl	8007d28 <xTaskRemoveFromEventList>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d007      	beq.n	8006e60 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e50:	4b54      	ldr	r3, [pc, #336]	@ (8006fa4 <xQueueSemaphoreTake+0x21c>)
 8006e52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e56:	601a      	str	r2, [r3, #0]
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e60:	f002 faac 	bl	80093bc <vPortExitCritical>
				return pdPASS;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e098      	b.n	8006f9a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d112      	bne.n	8006e94 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00b      	beq.n	8006e8c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	617b      	str	r3, [r7, #20]
}
 8006e86:	bf00      	nop
 8006e88:	bf00      	nop
 8006e8a:	e7fd      	b.n	8006e88 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006e8c:	f002 fa96 	bl	80093bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e90:	2300      	movs	r3, #0
 8006e92:	e082      	b.n	8006f9a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d106      	bne.n	8006ea8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e9a:	f107 030c 	add.w	r3, r7, #12
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 ffa6 	bl	8007df0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ea8:	f002 fa88 	bl	80093bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006eac:	f000 fd16 	bl	80078dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006eb0:	f002 fa52 	bl	8009358 <vPortEnterCritical>
 8006eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006eba:	b25b      	sxtb	r3, r3
 8006ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec0:	d103      	bne.n	8006eca <xQueueSemaphoreTake+0x142>
 8006ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ecc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ed0:	b25b      	sxtb	r3, r3
 8006ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed6:	d103      	bne.n	8006ee0 <xQueueSemaphoreTake+0x158>
 8006ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ee0:	f002 fa6c 	bl	80093bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ee4:	463a      	mov	r2, r7
 8006ee6:	f107 030c 	add.w	r3, r7, #12
 8006eea:	4611      	mov	r1, r2
 8006eec:	4618      	mov	r0, r3
 8006eee:	f000 ff95 	bl	8007e1c <xTaskCheckForTimeOut>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d132      	bne.n	8006f5e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ef8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006efa:	f000 f9f5 	bl	80072e8 <prvIsQueueEmpty>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d026      	beq.n	8006f52 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d109      	bne.n	8006f20 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006f0c:	f002 fa24 	bl	8009358 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	4618      	mov	r0, r3
 8006f16:	f001 f8f5 	bl	8008104 <xTaskPriorityInherit>
 8006f1a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006f1c:	f002 fa4e 	bl	80093bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f22:	3324      	adds	r3, #36	@ 0x24
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	4611      	mov	r1, r2
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 feab 	bl	8007c84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f30:	f000 f988 	bl	8007244 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f34:	f000 fce0 	bl	80078f8 <xTaskResumeAll>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f47f af67 	bne.w	8006e0e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006f40:	4b18      	ldr	r3, [pc, #96]	@ (8006fa4 <xQueueSemaphoreTake+0x21c>)
 8006f42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	e75d      	b.n	8006e0e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006f52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f54:	f000 f976 	bl	8007244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f58:	f000 fcce 	bl	80078f8 <xTaskResumeAll>
 8006f5c:	e757      	b.n	8006e0e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006f5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f60:	f000 f970 	bl	8007244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f64:	f000 fcc8 	bl	80078f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f6a:	f000 f9bd 	bl	80072e8 <prvIsQueueEmpty>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f43f af4c 	beq.w	8006e0e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00d      	beq.n	8006f98 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006f7c:	f002 f9ec 	bl	8009358 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006f80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f82:	f000 f8b7 	bl	80070f4 <prvGetDisinheritPriorityAfterTimeout>
 8006f86:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f001 f990 	bl	80082b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006f94:	f002 fa12 	bl	80093bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3738      	adds	r7, #56	@ 0x38
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	e000ed04 	.word	0xe000ed04

08006fa8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b08e      	sub	sp, #56	@ 0x38
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10b      	bne.n	8006fd6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	623b      	str	r3, [r7, #32]
}
 8006fd0:	bf00      	nop
 8006fd2:	bf00      	nop
 8006fd4:	e7fd      	b.n	8006fd2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d103      	bne.n	8006fe4 <xQueueReceiveFromISR+0x3c>
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <xQueueReceiveFromISR+0x40>
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e000      	b.n	8006fea <xQueueReceiveFromISR+0x42>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10b      	bne.n	8007006 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	61fb      	str	r3, [r7, #28]
}
 8007000:	bf00      	nop
 8007002:	bf00      	nop
 8007004:	e7fd      	b.n	8007002 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007006:	f002 fa87 	bl	8009518 <vPortValidateInterruptPriority>
	__asm volatile
 800700a:	f3ef 8211 	mrs	r2, BASEPRI
 800700e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	61ba      	str	r2, [r7, #24]
 8007020:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007022:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007024:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800702a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800702c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800702e:	2b00      	cmp	r3, #0
 8007030:	d02f      	beq.n	8007092 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007034:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007038:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800703c:	68b9      	ldr	r1, [r7, #8]
 800703e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007040:	f000 f8da 	bl	80071f8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007046:	1e5a      	subs	r2, r3, #1
 8007048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800704c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007054:	d112      	bne.n	800707c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d016      	beq.n	800708c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800705e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007060:	3310      	adds	r3, #16
 8007062:	4618      	mov	r0, r3
 8007064:	f000 fe60 	bl	8007d28 <xTaskRemoveFromEventList>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00e      	beq.n	800708c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00b      	beq.n	800708c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	e007      	b.n	800708c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800707c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007080:	3301      	adds	r3, #1
 8007082:	b2db      	uxtb	r3, r3
 8007084:	b25a      	sxtb	r2, r3
 8007086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800708c:	2301      	movs	r3, #1
 800708e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007090:	e001      	b.n	8007096 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007092:	2300      	movs	r3, #0
 8007094:	637b      	str	r3, [r7, #52]	@ 0x34
 8007096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007098:	613b      	str	r3, [r7, #16]
	__asm volatile
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	f383 8811 	msr	BASEPRI, r3
}
 80070a0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3738      	adds	r7, #56	@ 0x38
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10b      	bne.n	80070d6 <vQueueDelete+0x2a>
	__asm volatile
 80070be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	60bb      	str	r3, [r7, #8]
}
 80070d0:	bf00      	nop
 80070d2:	bf00      	nop
 80070d4:	e7fd      	b.n	80070d2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 f95e 	bl	8007398 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d102      	bne.n	80070ec <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f002 fb26 	bl	8009738 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80070ec:	bf00      	nop
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007100:	2b00      	cmp	r3, #0
 8007102:	d006      	beq.n	8007112 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	e001      	b.n	8007116 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007112:	2300      	movs	r3, #0
 8007114:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007116:	68fb      	ldr	r3, [r7, #12]
	}
 8007118:	4618      	mov	r0, r3
 800711a:	3714      	adds	r7, #20
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007130:	2300      	movs	r3, #0
 8007132:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007138:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10d      	bne.n	800715e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d14d      	bne.n	80071e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	4618      	mov	r0, r3
 8007150:	f001 f840 	bl	80081d4 <xTaskPriorityDisinherit>
 8007154:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	609a      	str	r2, [r3, #8]
 800715c:	e043      	b.n	80071e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d119      	bne.n	8007198 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6858      	ldr	r0, [r3, #4]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716c:	461a      	mov	r2, r3
 800716e:	68b9      	ldr	r1, [r7, #8]
 8007170:	f002 fc2e 	bl	80099d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717c:	441a      	add	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	429a      	cmp	r2, r3
 800718c:	d32b      	bcc.n	80071e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	605a      	str	r2, [r3, #4]
 8007196:	e026      	b.n	80071e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	68d8      	ldr	r0, [r3, #12]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a0:	461a      	mov	r2, r3
 80071a2:	68b9      	ldr	r1, [r7, #8]
 80071a4:	f002 fc14 	bl	80099d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	68da      	ldr	r2, [r3, #12]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b0:	425b      	negs	r3, r3
 80071b2:	441a      	add	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	68da      	ldr	r2, [r3, #12]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d207      	bcs.n	80071d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	689a      	ldr	r2, [r3, #8]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071cc:	425b      	negs	r3, r3
 80071ce:	441a      	add	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d105      	bne.n	80071e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	1c5a      	adds	r2, r3, #1
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80071ee:	697b      	ldr	r3, [r7, #20]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3718      	adds	r7, #24
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007206:	2b00      	cmp	r3, #0
 8007208:	d018      	beq.n	800723c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007212:	441a      	add	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68da      	ldr	r2, [r3, #12]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	429a      	cmp	r2, r3
 8007222:	d303      	bcc.n	800722c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68d9      	ldr	r1, [r3, #12]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007234:	461a      	mov	r2, r3
 8007236:	6838      	ldr	r0, [r7, #0]
 8007238:	f002 fbca 	bl	80099d0 <memcpy>
	}
}
 800723c:	bf00      	nop
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800724c:	f002 f884 	bl	8009358 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007256:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007258:	e011      	b.n	800727e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725e:	2b00      	cmp	r3, #0
 8007260:	d012      	beq.n	8007288 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	3324      	adds	r3, #36	@ 0x24
 8007266:	4618      	mov	r0, r3
 8007268:	f000 fd5e 	bl	8007d28 <xTaskRemoveFromEventList>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d001      	beq.n	8007276 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007272:	f000 fe37 	bl	8007ee4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007276:	7bfb      	ldrb	r3, [r7, #15]
 8007278:	3b01      	subs	r3, #1
 800727a:	b2db      	uxtb	r3, r3
 800727c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800727e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007282:	2b00      	cmp	r3, #0
 8007284:	dce9      	bgt.n	800725a <prvUnlockQueue+0x16>
 8007286:	e000      	b.n	800728a <prvUnlockQueue+0x46>
					break;
 8007288:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	22ff      	movs	r2, #255	@ 0xff
 800728e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007292:	f002 f893 	bl	80093bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007296:	f002 f85f 	bl	8009358 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072a2:	e011      	b.n	80072c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d012      	beq.n	80072d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	3310      	adds	r3, #16
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 fd39 	bl	8007d28 <xTaskRemoveFromEventList>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80072bc:	f000 fe12 	bl	8007ee4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80072c0:	7bbb      	ldrb	r3, [r7, #14]
 80072c2:	3b01      	subs	r3, #1
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	dce9      	bgt.n	80072a4 <prvUnlockQueue+0x60>
 80072d0:	e000      	b.n	80072d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80072d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	22ff      	movs	r2, #255	@ 0xff
 80072d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80072dc:	f002 f86e 	bl	80093bc <vPortExitCritical>
}
 80072e0:	bf00      	nop
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072f0:	f002 f832 	bl	8009358 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d102      	bne.n	8007302 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80072fc:	2301      	movs	r3, #1
 80072fe:	60fb      	str	r3, [r7, #12]
 8007300:	e001      	b.n	8007306 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007302:	2300      	movs	r3, #0
 8007304:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007306:	f002 f859 	bl	80093bc <vPortExitCritical>

	return xReturn;
 800730a:	68fb      	ldr	r3, [r7, #12]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800731c:	f002 f81c 	bl	8009358 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007328:	429a      	cmp	r2, r3
 800732a:	d102      	bne.n	8007332 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800732c:	2301      	movs	r3, #1
 800732e:	60fb      	str	r3, [r7, #12]
 8007330:	e001      	b.n	8007336 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007332:	2300      	movs	r3, #0
 8007334:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007336:	f002 f841 	bl	80093bc <vPortExitCritical>

	return xReturn;
 800733a:	68fb      	ldr	r3, [r7, #12]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800734e:	2300      	movs	r3, #0
 8007350:	60fb      	str	r3, [r7, #12]
 8007352:	e014      	b.n	800737e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007354:	4a0f      	ldr	r2, [pc, #60]	@ (8007394 <vQueueAddToRegistry+0x50>)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10b      	bne.n	8007378 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007360:	490c      	ldr	r1, [pc, #48]	@ (8007394 <vQueueAddToRegistry+0x50>)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	683a      	ldr	r2, [r7, #0]
 8007366:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800736a:	4a0a      	ldr	r2, [pc, #40]	@ (8007394 <vQueueAddToRegistry+0x50>)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	00db      	lsls	r3, r3, #3
 8007370:	4413      	add	r3, r2
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007376:	e006      	b.n	8007386 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	3301      	adds	r3, #1
 800737c:	60fb      	str	r3, [r7, #12]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2b07      	cmp	r3, #7
 8007382:	d9e7      	bls.n	8007354 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007384:	bf00      	nop
 8007386:	bf00      	nop
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	20000eac 	.word	0x20000eac

08007398 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073a0:	2300      	movs	r3, #0
 80073a2:	60fb      	str	r3, [r7, #12]
 80073a4:	e016      	b.n	80073d4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80073a6:	4a10      	ldr	r2, [pc, #64]	@ (80073e8 <vQueueUnregisterQueue+0x50>)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	00db      	lsls	r3, r3, #3
 80073ac:	4413      	add	r3, r2
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d10b      	bne.n	80073ce <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80073b6:	4a0c      	ldr	r2, [pc, #48]	@ (80073e8 <vQueueUnregisterQueue+0x50>)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2100      	movs	r1, #0
 80073bc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80073c0:	4a09      	ldr	r2, [pc, #36]	@ (80073e8 <vQueueUnregisterQueue+0x50>)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	00db      	lsls	r3, r3, #3
 80073c6:	4413      	add	r3, r2
 80073c8:	2200      	movs	r2, #0
 80073ca:	605a      	str	r2, [r3, #4]
				break;
 80073cc:	e006      	b.n	80073dc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	3301      	adds	r3, #1
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2b07      	cmp	r3, #7
 80073d8:	d9e5      	bls.n	80073a6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80073da:	bf00      	nop
 80073dc:	bf00      	nop
 80073de:	3714      	adds	r7, #20
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	20000eac 	.word	0x20000eac

080073ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80073fc:	f001 ffac 	bl	8009358 <vPortEnterCritical>
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007406:	b25b      	sxtb	r3, r3
 8007408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800740c:	d103      	bne.n	8007416 <vQueueWaitForMessageRestricted+0x2a>
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800741c:	b25b      	sxtb	r3, r3
 800741e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007422:	d103      	bne.n	800742c <vQueueWaitForMessageRestricted+0x40>
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800742c:	f001 ffc6 	bl	80093bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007434:	2b00      	cmp	r3, #0
 8007436:	d106      	bne.n	8007446 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	3324      	adds	r3, #36	@ 0x24
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	68b9      	ldr	r1, [r7, #8]
 8007440:	4618      	mov	r0, r3
 8007442:	f000 fc45 	bl	8007cd0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007446:	6978      	ldr	r0, [r7, #20]
 8007448:	f7ff fefc 	bl	8007244 <prvUnlockQueue>
	}
 800744c:	bf00      	nop
 800744e:	3718      	adds	r7, #24
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007454:	b580      	push	{r7, lr}
 8007456:	b08e      	sub	sp, #56	@ 0x38
 8007458:	af04      	add	r7, sp, #16
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
 8007460:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10b      	bne.n	8007480 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746c:	f383 8811 	msr	BASEPRI, r3
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	623b      	str	r3, [r7, #32]
}
 800747a:	bf00      	nop
 800747c:	bf00      	nop
 800747e:	e7fd      	b.n	800747c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10b      	bne.n	800749e <xTaskCreateStatic+0x4a>
	__asm volatile
 8007486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800748a:	f383 8811 	msr	BASEPRI, r3
 800748e:	f3bf 8f6f 	isb	sy
 8007492:	f3bf 8f4f 	dsb	sy
 8007496:	61fb      	str	r3, [r7, #28]
}
 8007498:	bf00      	nop
 800749a:	bf00      	nop
 800749c:	e7fd      	b.n	800749a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800749e:	235c      	movs	r3, #92	@ 0x5c
 80074a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	2b5c      	cmp	r3, #92	@ 0x5c
 80074a6:	d00b      	beq.n	80074c0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80074a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ac:	f383 8811 	msr	BASEPRI, r3
 80074b0:	f3bf 8f6f 	isb	sy
 80074b4:	f3bf 8f4f 	dsb	sy
 80074b8:	61bb      	str	r3, [r7, #24]
}
 80074ba:	bf00      	nop
 80074bc:	bf00      	nop
 80074be:	e7fd      	b.n	80074bc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80074c0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80074c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d01e      	beq.n	8007506 <xTaskCreateStatic+0xb2>
 80074c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d01b      	beq.n	8007506 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80074d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074d6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80074d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074da:	2202      	movs	r2, #2
 80074dc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074e0:	2300      	movs	r3, #0
 80074e2:	9303      	str	r3, [sp, #12]
 80074e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e6:	9302      	str	r3, [sp, #8]
 80074e8:	f107 0314 	add.w	r3, r7, #20
 80074ec:	9301      	str	r3, [sp, #4]
 80074ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	68b9      	ldr	r1, [r7, #8]
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f000 f850 	bl	800759e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007500:	f000 f8de 	bl	80076c0 <prvAddNewTaskToReadyList>
 8007504:	e001      	b.n	800750a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007506:	2300      	movs	r3, #0
 8007508:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800750a:	697b      	ldr	r3, [r7, #20]
	}
 800750c:	4618      	mov	r0, r3
 800750e:	3728      	adds	r7, #40	@ 0x28
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007514:	b580      	push	{r7, lr}
 8007516:	b08c      	sub	sp, #48	@ 0x30
 8007518:	af04      	add	r7, sp, #16
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	603b      	str	r3, [r7, #0]
 8007520:	4613      	mov	r3, r2
 8007522:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007524:	88fb      	ldrh	r3, [r7, #6]
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	4618      	mov	r0, r3
 800752a:	f002 f837 	bl	800959c <pvPortMalloc>
 800752e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00e      	beq.n	8007554 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007536:	205c      	movs	r0, #92	@ 0x5c
 8007538:	f002 f830 	bl	800959c <pvPortMalloc>
 800753c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d003      	beq.n	800754c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	631a      	str	r2, [r3, #48]	@ 0x30
 800754a:	e005      	b.n	8007558 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800754c:	6978      	ldr	r0, [r7, #20]
 800754e:	f002 f8f3 	bl	8009738 <vPortFree>
 8007552:	e001      	b.n	8007558 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007554:	2300      	movs	r3, #0
 8007556:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d017      	beq.n	800758e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007566:	88fa      	ldrh	r2, [r7, #6]
 8007568:	2300      	movs	r3, #0
 800756a:	9303      	str	r3, [sp, #12]
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	9302      	str	r3, [sp, #8]
 8007570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007572:	9301      	str	r3, [sp, #4]
 8007574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	68b9      	ldr	r1, [r7, #8]
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f000 f80e 	bl	800759e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007582:	69f8      	ldr	r0, [r7, #28]
 8007584:	f000 f89c 	bl	80076c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007588:	2301      	movs	r3, #1
 800758a:	61bb      	str	r3, [r7, #24]
 800758c:	e002      	b.n	8007594 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800758e:	f04f 33ff 	mov.w	r3, #4294967295
 8007592:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007594:	69bb      	ldr	r3, [r7, #24]
	}
 8007596:	4618      	mov	r0, r3
 8007598:	3720      	adds	r7, #32
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b088      	sub	sp, #32
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	60f8      	str	r0, [r7, #12]
 80075a6:	60b9      	str	r1, [r7, #8]
 80075a8:	607a      	str	r2, [r7, #4]
 80075aa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80075ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ae:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	461a      	mov	r2, r3
 80075b6:	21a5      	movs	r1, #165	@ 0xa5
 80075b8:	f002 f9de 	bl	8009978 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80075bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80075c6:	3b01      	subs	r3, #1
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4413      	add	r3, r2
 80075cc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	f023 0307 	bic.w	r3, r3, #7
 80075d4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	f003 0307 	and.w	r3, r3, #7
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00b      	beq.n	80075f8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	617b      	str	r3, [r7, #20]
}
 80075f2:	bf00      	nop
 80075f4:	bf00      	nop
 80075f6:	e7fd      	b.n	80075f4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d01f      	beq.n	800763e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075fe:	2300      	movs	r3, #0
 8007600:	61fb      	str	r3, [r7, #28]
 8007602:	e012      	b.n	800762a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	4413      	add	r3, r2
 800760a:	7819      	ldrb	r1, [r3, #0]
 800760c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	4413      	add	r3, r2
 8007612:	3334      	adds	r3, #52	@ 0x34
 8007614:	460a      	mov	r2, r1
 8007616:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	4413      	add	r3, r2
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d006      	beq.n	8007632 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	3301      	adds	r3, #1
 8007628:	61fb      	str	r3, [r7, #28]
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	2b0f      	cmp	r3, #15
 800762e:	d9e9      	bls.n	8007604 <prvInitialiseNewTask+0x66>
 8007630:	e000      	b.n	8007634 <prvInitialiseNewTask+0x96>
			{
				break;
 8007632:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007636:	2200      	movs	r2, #0
 8007638:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800763c:	e003      	b.n	8007646 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800763e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007648:	2b37      	cmp	r3, #55	@ 0x37
 800764a:	d901      	bls.n	8007650 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800764c:	2337      	movs	r3, #55	@ 0x37
 800764e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007652:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007654:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007658:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800765a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800765c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765e:	2200      	movs	r2, #0
 8007660:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007664:	3304      	adds	r3, #4
 8007666:	4618      	mov	r0, r3
 8007668:	f7fe fd7c 	bl	8006164 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800766c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766e:	3318      	adds	r3, #24
 8007670:	4618      	mov	r0, r3
 8007672:	f7fe fd77 	bl	8006164 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007678:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800767a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800767c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800767e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007684:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800768a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800768c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768e:	2200      	movs	r2, #0
 8007690:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007694:	2200      	movs	r2, #0
 8007696:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800769a:	683a      	ldr	r2, [r7, #0]
 800769c:	68f9      	ldr	r1, [r7, #12]
 800769e:	69b8      	ldr	r0, [r7, #24]
 80076a0:	f001 fd2c 	bl	80090fc <pxPortInitialiseStack>
 80076a4:	4602      	mov	r2, r0
 80076a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80076aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d002      	beq.n	80076b6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076b6:	bf00      	nop
 80076b8:	3720      	adds	r7, #32
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
	...

080076c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80076c8:	f001 fe46 	bl	8009358 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80076cc:	4b2d      	ldr	r3, [pc, #180]	@ (8007784 <prvAddNewTaskToReadyList+0xc4>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3301      	adds	r3, #1
 80076d2:	4a2c      	ldr	r2, [pc, #176]	@ (8007784 <prvAddNewTaskToReadyList+0xc4>)
 80076d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80076d6:	4b2c      	ldr	r3, [pc, #176]	@ (8007788 <prvAddNewTaskToReadyList+0xc8>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d109      	bne.n	80076f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80076de:	4a2a      	ldr	r2, [pc, #168]	@ (8007788 <prvAddNewTaskToReadyList+0xc8>)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80076e4:	4b27      	ldr	r3, [pc, #156]	@ (8007784 <prvAddNewTaskToReadyList+0xc4>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d110      	bne.n	800770e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80076ec:	f000 fc1e 	bl	8007f2c <prvInitialiseTaskLists>
 80076f0:	e00d      	b.n	800770e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80076f2:	4b26      	ldr	r3, [pc, #152]	@ (800778c <prvAddNewTaskToReadyList+0xcc>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d109      	bne.n	800770e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80076fa:	4b23      	ldr	r3, [pc, #140]	@ (8007788 <prvAddNewTaskToReadyList+0xc8>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007704:	429a      	cmp	r2, r3
 8007706:	d802      	bhi.n	800770e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007708:	4a1f      	ldr	r2, [pc, #124]	@ (8007788 <prvAddNewTaskToReadyList+0xc8>)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800770e:	4b20      	ldr	r3, [pc, #128]	@ (8007790 <prvAddNewTaskToReadyList+0xd0>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	3301      	adds	r3, #1
 8007714:	4a1e      	ldr	r2, [pc, #120]	@ (8007790 <prvAddNewTaskToReadyList+0xd0>)
 8007716:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007718:	4b1d      	ldr	r3, [pc, #116]	@ (8007790 <prvAddNewTaskToReadyList+0xd0>)
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007724:	4b1b      	ldr	r3, [pc, #108]	@ (8007794 <prvAddNewTaskToReadyList+0xd4>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	429a      	cmp	r2, r3
 800772a:	d903      	bls.n	8007734 <prvAddNewTaskToReadyList+0x74>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007730:	4a18      	ldr	r2, [pc, #96]	@ (8007794 <prvAddNewTaskToReadyList+0xd4>)
 8007732:	6013      	str	r3, [r2, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007738:	4613      	mov	r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4413      	add	r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4a15      	ldr	r2, [pc, #84]	@ (8007798 <prvAddNewTaskToReadyList+0xd8>)
 8007742:	441a      	add	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	3304      	adds	r3, #4
 8007748:	4619      	mov	r1, r3
 800774a:	4610      	mov	r0, r2
 800774c:	f7fe fd17 	bl	800617e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007750:	f001 fe34 	bl	80093bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007754:	4b0d      	ldr	r3, [pc, #52]	@ (800778c <prvAddNewTaskToReadyList+0xcc>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00e      	beq.n	800777a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800775c:	4b0a      	ldr	r3, [pc, #40]	@ (8007788 <prvAddNewTaskToReadyList+0xc8>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007766:	429a      	cmp	r2, r3
 8007768:	d207      	bcs.n	800777a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800776a:	4b0c      	ldr	r3, [pc, #48]	@ (800779c <prvAddNewTaskToReadyList+0xdc>)
 800776c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007770:	601a      	str	r2, [r3, #0]
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800777a:	bf00      	nop
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	200013c0 	.word	0x200013c0
 8007788:	20000eec 	.word	0x20000eec
 800778c:	200013cc 	.word	0x200013cc
 8007790:	200013dc 	.word	0x200013dc
 8007794:	200013c8 	.word	0x200013c8
 8007798:	20000ef0 	.word	0x20000ef0
 800779c:	e000ed04 	.word	0xe000ed04

080077a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077a8:	2300      	movs	r3, #0
 80077aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d018      	beq.n	80077e4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80077b2:	4b14      	ldr	r3, [pc, #80]	@ (8007804 <vTaskDelay+0x64>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00b      	beq.n	80077d2 <vTaskDelay+0x32>
	__asm volatile
 80077ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077be:	f383 8811 	msr	BASEPRI, r3
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	60bb      	str	r3, [r7, #8]
}
 80077cc:	bf00      	nop
 80077ce:	bf00      	nop
 80077d0:	e7fd      	b.n	80077ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80077d2:	f000 f883 	bl	80078dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077d6:	2100      	movs	r1, #0
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 fff7 	bl	80087cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80077de:	f000 f88b 	bl	80078f8 <xTaskResumeAll>
 80077e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d107      	bne.n	80077fa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80077ea:	4b07      	ldr	r3, [pc, #28]	@ (8007808 <vTaskDelay+0x68>)
 80077ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077fa:	bf00      	nop
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	200013e8 	.word	0x200013e8
 8007808:	e000ed04 	.word	0xe000ed04

0800780c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08a      	sub	sp, #40	@ 0x28
 8007810:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007812:	2300      	movs	r3, #0
 8007814:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007816:	2300      	movs	r3, #0
 8007818:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800781a:	463a      	mov	r2, r7
 800781c:	1d39      	adds	r1, r7, #4
 800781e:	f107 0308 	add.w	r3, r7, #8
 8007822:	4618      	mov	r0, r3
 8007824:	f7fe fc4a 	bl	80060bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	9202      	str	r2, [sp, #8]
 8007830:	9301      	str	r3, [sp, #4]
 8007832:	2300      	movs	r3, #0
 8007834:	9300      	str	r3, [sp, #0]
 8007836:	2300      	movs	r3, #0
 8007838:	460a      	mov	r2, r1
 800783a:	4922      	ldr	r1, [pc, #136]	@ (80078c4 <vTaskStartScheduler+0xb8>)
 800783c:	4822      	ldr	r0, [pc, #136]	@ (80078c8 <vTaskStartScheduler+0xbc>)
 800783e:	f7ff fe09 	bl	8007454 <xTaskCreateStatic>
 8007842:	4603      	mov	r3, r0
 8007844:	4a21      	ldr	r2, [pc, #132]	@ (80078cc <vTaskStartScheduler+0xc0>)
 8007846:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007848:	4b20      	ldr	r3, [pc, #128]	@ (80078cc <vTaskStartScheduler+0xc0>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d002      	beq.n	8007856 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007850:	2301      	movs	r3, #1
 8007852:	617b      	str	r3, [r7, #20]
 8007854:	e001      	b.n	800785a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007856:	2300      	movs	r3, #0
 8007858:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d102      	bne.n	8007866 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007860:	f001 f808 	bl	8008874 <xTimerCreateTimerTask>
 8007864:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d116      	bne.n	800789a <vTaskStartScheduler+0x8e>
	__asm volatile
 800786c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007870:	f383 8811 	msr	BASEPRI, r3
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	613b      	str	r3, [r7, #16]
}
 800787e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007880:	4b13      	ldr	r3, [pc, #76]	@ (80078d0 <vTaskStartScheduler+0xc4>)
 8007882:	f04f 32ff 	mov.w	r2, #4294967295
 8007886:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007888:	4b12      	ldr	r3, [pc, #72]	@ (80078d4 <vTaskStartScheduler+0xc8>)
 800788a:	2201      	movs	r2, #1
 800788c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800788e:	4b12      	ldr	r3, [pc, #72]	@ (80078d8 <vTaskStartScheduler+0xcc>)
 8007890:	2200      	movs	r2, #0
 8007892:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007894:	f001 fcbc 	bl	8009210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007898:	e00f      	b.n	80078ba <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a0:	d10b      	bne.n	80078ba <vTaskStartScheduler+0xae>
	__asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	60fb      	str	r3, [r7, #12]
}
 80078b4:	bf00      	nop
 80078b6:	bf00      	nop
 80078b8:	e7fd      	b.n	80078b6 <vTaskStartScheduler+0xaa>
}
 80078ba:	bf00      	nop
 80078bc:	3718      	adds	r7, #24
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	08009a74 	.word	0x08009a74
 80078c8:	08007efd 	.word	0x08007efd
 80078cc:	200013e4 	.word	0x200013e4
 80078d0:	200013e0 	.word	0x200013e0
 80078d4:	200013cc 	.word	0x200013cc
 80078d8:	200013c4 	.word	0x200013c4

080078dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078dc:	b480      	push	{r7}
 80078de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80078e0:	4b04      	ldr	r3, [pc, #16]	@ (80078f4 <vTaskSuspendAll+0x18>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	3301      	adds	r3, #1
 80078e6:	4a03      	ldr	r2, [pc, #12]	@ (80078f4 <vTaskSuspendAll+0x18>)
 80078e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80078ea:	bf00      	nop
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr
 80078f4:	200013e8 	.word	0x200013e8

080078f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078fe:	2300      	movs	r3, #0
 8007900:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007902:	2300      	movs	r3, #0
 8007904:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007906:	4b42      	ldr	r3, [pc, #264]	@ (8007a10 <xTaskResumeAll+0x118>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10b      	bne.n	8007926 <xTaskResumeAll+0x2e>
	__asm volatile
 800790e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007912:	f383 8811 	msr	BASEPRI, r3
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	603b      	str	r3, [r7, #0]
}
 8007920:	bf00      	nop
 8007922:	bf00      	nop
 8007924:	e7fd      	b.n	8007922 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007926:	f001 fd17 	bl	8009358 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800792a:	4b39      	ldr	r3, [pc, #228]	@ (8007a10 <xTaskResumeAll+0x118>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3b01      	subs	r3, #1
 8007930:	4a37      	ldr	r2, [pc, #220]	@ (8007a10 <xTaskResumeAll+0x118>)
 8007932:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007934:	4b36      	ldr	r3, [pc, #216]	@ (8007a10 <xTaskResumeAll+0x118>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d162      	bne.n	8007a02 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800793c:	4b35      	ldr	r3, [pc, #212]	@ (8007a14 <xTaskResumeAll+0x11c>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d05e      	beq.n	8007a02 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007944:	e02f      	b.n	80079a6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007946:	4b34      	ldr	r3, [pc, #208]	@ (8007a18 <xTaskResumeAll+0x120>)
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	3318      	adds	r3, #24
 8007952:	4618      	mov	r0, r3
 8007954:	f7fe fc70 	bl	8006238 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	3304      	adds	r3, #4
 800795c:	4618      	mov	r0, r3
 800795e:	f7fe fc6b 	bl	8006238 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007966:	4b2d      	ldr	r3, [pc, #180]	@ (8007a1c <xTaskResumeAll+0x124>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	429a      	cmp	r2, r3
 800796c:	d903      	bls.n	8007976 <xTaskResumeAll+0x7e>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007972:	4a2a      	ldr	r2, [pc, #168]	@ (8007a1c <xTaskResumeAll+0x124>)
 8007974:	6013      	str	r3, [r2, #0]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800797a:	4613      	mov	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4a27      	ldr	r2, [pc, #156]	@ (8007a20 <xTaskResumeAll+0x128>)
 8007984:	441a      	add	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	3304      	adds	r3, #4
 800798a:	4619      	mov	r1, r3
 800798c:	4610      	mov	r0, r2
 800798e:	f7fe fbf6 	bl	800617e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007996:	4b23      	ldr	r3, [pc, #140]	@ (8007a24 <xTaskResumeAll+0x12c>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800799c:	429a      	cmp	r2, r3
 800799e:	d302      	bcc.n	80079a6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80079a0:	4b21      	ldr	r3, [pc, #132]	@ (8007a28 <xTaskResumeAll+0x130>)
 80079a2:	2201      	movs	r2, #1
 80079a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079a6:	4b1c      	ldr	r3, [pc, #112]	@ (8007a18 <xTaskResumeAll+0x120>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d1cb      	bne.n	8007946 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d001      	beq.n	80079b8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079b4:	f000 fb58 	bl	8008068 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80079b8:	4b1c      	ldr	r3, [pc, #112]	@ (8007a2c <xTaskResumeAll+0x134>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d010      	beq.n	80079e6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079c4:	f000 f846 	bl	8007a54 <xTaskIncrementTick>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d002      	beq.n	80079d4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80079ce:	4b16      	ldr	r3, [pc, #88]	@ (8007a28 <xTaskResumeAll+0x130>)
 80079d0:	2201      	movs	r2, #1
 80079d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	3b01      	subs	r3, #1
 80079d8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1f1      	bne.n	80079c4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80079e0:	4b12      	ldr	r3, [pc, #72]	@ (8007a2c <xTaskResumeAll+0x134>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079e6:	4b10      	ldr	r3, [pc, #64]	@ (8007a28 <xTaskResumeAll+0x130>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d009      	beq.n	8007a02 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079ee:	2301      	movs	r3, #1
 80079f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079f2:	4b0f      	ldr	r3, [pc, #60]	@ (8007a30 <xTaskResumeAll+0x138>)
 80079f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079f8:	601a      	str	r2, [r3, #0]
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a02:	f001 fcdb 	bl	80093bc <vPortExitCritical>

	return xAlreadyYielded;
 8007a06:	68bb      	ldr	r3, [r7, #8]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	200013e8 	.word	0x200013e8
 8007a14:	200013c0 	.word	0x200013c0
 8007a18:	20001380 	.word	0x20001380
 8007a1c:	200013c8 	.word	0x200013c8
 8007a20:	20000ef0 	.word	0x20000ef0
 8007a24:	20000eec 	.word	0x20000eec
 8007a28:	200013d4 	.word	0x200013d4
 8007a2c:	200013d0 	.word	0x200013d0
 8007a30:	e000ed04 	.word	0xe000ed04

08007a34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a3a:	4b05      	ldr	r3, [pc, #20]	@ (8007a50 <xTaskGetTickCount+0x1c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a40:	687b      	ldr	r3, [r7, #4]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	370c      	adds	r7, #12
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	200013c4 	.word	0x200013c4

08007a54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a5e:	4b4f      	ldr	r3, [pc, #316]	@ (8007b9c <xTaskIncrementTick+0x148>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f040 8090 	bne.w	8007b88 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a68:	4b4d      	ldr	r3, [pc, #308]	@ (8007ba0 <xTaskIncrementTick+0x14c>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a70:	4a4b      	ldr	r2, [pc, #300]	@ (8007ba0 <xTaskIncrementTick+0x14c>)
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d121      	bne.n	8007ac0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a7c:	4b49      	ldr	r3, [pc, #292]	@ (8007ba4 <xTaskIncrementTick+0x150>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00b      	beq.n	8007a9e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	603b      	str	r3, [r7, #0]
}
 8007a98:	bf00      	nop
 8007a9a:	bf00      	nop
 8007a9c:	e7fd      	b.n	8007a9a <xTaskIncrementTick+0x46>
 8007a9e:	4b41      	ldr	r3, [pc, #260]	@ (8007ba4 <xTaskIncrementTick+0x150>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	60fb      	str	r3, [r7, #12]
 8007aa4:	4b40      	ldr	r3, [pc, #256]	@ (8007ba8 <xTaskIncrementTick+0x154>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a3e      	ldr	r2, [pc, #248]	@ (8007ba4 <xTaskIncrementTick+0x150>)
 8007aaa:	6013      	str	r3, [r2, #0]
 8007aac:	4a3e      	ldr	r2, [pc, #248]	@ (8007ba8 <xTaskIncrementTick+0x154>)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6013      	str	r3, [r2, #0]
 8007ab2:	4b3e      	ldr	r3, [pc, #248]	@ (8007bac <xTaskIncrementTick+0x158>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	4a3c      	ldr	r2, [pc, #240]	@ (8007bac <xTaskIncrementTick+0x158>)
 8007aba:	6013      	str	r3, [r2, #0]
 8007abc:	f000 fad4 	bl	8008068 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ac0:	4b3b      	ldr	r3, [pc, #236]	@ (8007bb0 <xTaskIncrementTick+0x15c>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d349      	bcc.n	8007b5e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007aca:	4b36      	ldr	r3, [pc, #216]	@ (8007ba4 <xTaskIncrementTick+0x150>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d104      	bne.n	8007ade <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ad4:	4b36      	ldr	r3, [pc, #216]	@ (8007bb0 <xTaskIncrementTick+0x15c>)
 8007ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8007ada:	601a      	str	r2, [r3, #0]
					break;
 8007adc:	e03f      	b.n	8007b5e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ade:	4b31      	ldr	r3, [pc, #196]	@ (8007ba4 <xTaskIncrementTick+0x150>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007aee:	693a      	ldr	r2, [r7, #16]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d203      	bcs.n	8007afe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007af6:	4a2e      	ldr	r2, [pc, #184]	@ (8007bb0 <xTaskIncrementTick+0x15c>)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007afc:	e02f      	b.n	8007b5e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	3304      	adds	r3, #4
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7fe fb98 	bl	8006238 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d004      	beq.n	8007b1a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	3318      	adds	r3, #24
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7fe fb8f 	bl	8006238 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b1e:	4b25      	ldr	r3, [pc, #148]	@ (8007bb4 <xTaskIncrementTick+0x160>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d903      	bls.n	8007b2e <xTaskIncrementTick+0xda>
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2a:	4a22      	ldr	r2, [pc, #136]	@ (8007bb4 <xTaskIncrementTick+0x160>)
 8007b2c:	6013      	str	r3, [r2, #0]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b32:	4613      	mov	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4413      	add	r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8007bb8 <xTaskIncrementTick+0x164>)
 8007b3c:	441a      	add	r2, r3
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	3304      	adds	r3, #4
 8007b42:	4619      	mov	r1, r3
 8007b44:	4610      	mov	r0, r2
 8007b46:	f7fe fb1a 	bl	800617e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8007bbc <xTaskIncrementTick+0x168>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d3b8      	bcc.n	8007aca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b5c:	e7b5      	b.n	8007aca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b5e:	4b17      	ldr	r3, [pc, #92]	@ (8007bbc <xTaskIncrementTick+0x168>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b64:	4914      	ldr	r1, [pc, #80]	@ (8007bb8 <xTaskIncrementTick+0x164>)
 8007b66:	4613      	mov	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	440b      	add	r3, r1
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d901      	bls.n	8007b7a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007b76:	2301      	movs	r3, #1
 8007b78:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b7a:	4b11      	ldr	r3, [pc, #68]	@ (8007bc0 <xTaskIncrementTick+0x16c>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d007      	beq.n	8007b92 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007b82:	2301      	movs	r3, #1
 8007b84:	617b      	str	r3, [r7, #20]
 8007b86:	e004      	b.n	8007b92 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b88:	4b0e      	ldr	r3, [pc, #56]	@ (8007bc4 <xTaskIncrementTick+0x170>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	4a0d      	ldr	r2, [pc, #52]	@ (8007bc4 <xTaskIncrementTick+0x170>)
 8007b90:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b92:	697b      	ldr	r3, [r7, #20]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3718      	adds	r7, #24
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	200013e8 	.word	0x200013e8
 8007ba0:	200013c4 	.word	0x200013c4
 8007ba4:	20001378 	.word	0x20001378
 8007ba8:	2000137c 	.word	0x2000137c
 8007bac:	200013d8 	.word	0x200013d8
 8007bb0:	200013e0 	.word	0x200013e0
 8007bb4:	200013c8 	.word	0x200013c8
 8007bb8:	20000ef0 	.word	0x20000ef0
 8007bbc:	20000eec 	.word	0x20000eec
 8007bc0:	200013d4 	.word	0x200013d4
 8007bc4:	200013d0 	.word	0x200013d0

08007bc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007bce:	4b28      	ldr	r3, [pc, #160]	@ (8007c70 <vTaskSwitchContext+0xa8>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d003      	beq.n	8007bde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bd6:	4b27      	ldr	r3, [pc, #156]	@ (8007c74 <vTaskSwitchContext+0xac>)
 8007bd8:	2201      	movs	r2, #1
 8007bda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bdc:	e042      	b.n	8007c64 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007bde:	4b25      	ldr	r3, [pc, #148]	@ (8007c74 <vTaskSwitchContext+0xac>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007be4:	4b24      	ldr	r3, [pc, #144]	@ (8007c78 <vTaskSwitchContext+0xb0>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	60fb      	str	r3, [r7, #12]
 8007bea:	e011      	b.n	8007c10 <vTaskSwitchContext+0x48>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10b      	bne.n	8007c0a <vTaskSwitchContext+0x42>
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	607b      	str	r3, [r7, #4]
}
 8007c04:	bf00      	nop
 8007c06:	bf00      	nop
 8007c08:	e7fd      	b.n	8007c06 <vTaskSwitchContext+0x3e>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	491a      	ldr	r1, [pc, #104]	@ (8007c7c <vTaskSwitchContext+0xb4>)
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	4613      	mov	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4413      	add	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	440b      	add	r3, r1
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d0e3      	beq.n	8007bec <vTaskSwitchContext+0x24>
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	4613      	mov	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	4413      	add	r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	4a13      	ldr	r2, [pc, #76]	@ (8007c7c <vTaskSwitchContext+0xb4>)
 8007c30:	4413      	add	r3, r2
 8007c32:	60bb      	str	r3, [r7, #8]
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	685a      	ldr	r2, [r3, #4]
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	605a      	str	r2, [r3, #4]
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	3308      	adds	r3, #8
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d104      	bne.n	8007c54 <vTaskSwitchContext+0x8c>
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	605a      	str	r2, [r3, #4]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	4a09      	ldr	r2, [pc, #36]	@ (8007c80 <vTaskSwitchContext+0xb8>)
 8007c5c:	6013      	str	r3, [r2, #0]
 8007c5e:	4a06      	ldr	r2, [pc, #24]	@ (8007c78 <vTaskSwitchContext+0xb0>)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6013      	str	r3, [r2, #0]
}
 8007c64:	bf00      	nop
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr
 8007c70:	200013e8 	.word	0x200013e8
 8007c74:	200013d4 	.word	0x200013d4
 8007c78:	200013c8 	.word	0x200013c8
 8007c7c:	20000ef0 	.word	0x20000ef0
 8007c80:	20000eec 	.word	0x20000eec

08007c84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10b      	bne.n	8007cac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	60fb      	str	r3, [r7, #12]
}
 8007ca6:	bf00      	nop
 8007ca8:	bf00      	nop
 8007caa:	e7fd      	b.n	8007ca8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cac:	4b07      	ldr	r3, [pc, #28]	@ (8007ccc <vTaskPlaceOnEventList+0x48>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	3318      	adds	r3, #24
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f7fe fa86 	bl	80061c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007cba:	2101      	movs	r1, #1
 8007cbc:	6838      	ldr	r0, [r7, #0]
 8007cbe:	f000 fd85 	bl	80087cc <prvAddCurrentTaskToDelayedList>
}
 8007cc2:	bf00      	nop
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	20000eec 	.word	0x20000eec

08007cd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10b      	bne.n	8007cfa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	617b      	str	r3, [r7, #20]
}
 8007cf4:	bf00      	nop
 8007cf6:	bf00      	nop
 8007cf8:	e7fd      	b.n	8007cf6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8007d24 <vTaskPlaceOnEventListRestricted+0x54>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	3318      	adds	r3, #24
 8007d00:	4619      	mov	r1, r3
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f7fe fa3b 	bl	800617e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d002      	beq.n	8007d14 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d12:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d14:	6879      	ldr	r1, [r7, #4]
 8007d16:	68b8      	ldr	r0, [r7, #8]
 8007d18:	f000 fd58 	bl	80087cc <prvAddCurrentTaskToDelayedList>
	}
 8007d1c:	bf00      	nop
 8007d1e:	3718      	adds	r7, #24
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	20000eec 	.word	0x20000eec

08007d28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10b      	bne.n	8007d56 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	60fb      	str	r3, [r7, #12]
}
 8007d50:	bf00      	nop
 8007d52:	bf00      	nop
 8007d54:	e7fd      	b.n	8007d52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	3318      	adds	r3, #24
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fe fa6c 	bl	8006238 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d60:	4b1d      	ldr	r3, [pc, #116]	@ (8007dd8 <xTaskRemoveFromEventList+0xb0>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d11d      	bne.n	8007da4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	3304      	adds	r3, #4
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7fe fa63 	bl	8006238 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d76:	4b19      	ldr	r3, [pc, #100]	@ (8007ddc <xTaskRemoveFromEventList+0xb4>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d903      	bls.n	8007d86 <xTaskRemoveFromEventList+0x5e>
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d82:	4a16      	ldr	r2, [pc, #88]	@ (8007ddc <xTaskRemoveFromEventList+0xb4>)
 8007d84:	6013      	str	r3, [r2, #0]
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4413      	add	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4a13      	ldr	r2, [pc, #76]	@ (8007de0 <xTaskRemoveFromEventList+0xb8>)
 8007d94:	441a      	add	r2, r3
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	3304      	adds	r3, #4
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	f7fe f9ee 	bl	800617e <vListInsertEnd>
 8007da2:	e005      	b.n	8007db0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	3318      	adds	r3, #24
 8007da8:	4619      	mov	r1, r3
 8007daa:	480e      	ldr	r0, [pc, #56]	@ (8007de4 <xTaskRemoveFromEventList+0xbc>)
 8007dac:	f7fe f9e7 	bl	800617e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007db4:	4b0c      	ldr	r3, [pc, #48]	@ (8007de8 <xTaskRemoveFromEventList+0xc0>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d905      	bls.n	8007dca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8007dec <xTaskRemoveFromEventList+0xc4>)
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	601a      	str	r2, [r3, #0]
 8007dc8:	e001      	b.n	8007dce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007dce:	697b      	ldr	r3, [r7, #20]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3718      	adds	r7, #24
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	200013e8 	.word	0x200013e8
 8007ddc:	200013c8 	.word	0x200013c8
 8007de0:	20000ef0 	.word	0x20000ef0
 8007de4:	20001380 	.word	0x20001380
 8007de8:	20000eec 	.word	0x20000eec
 8007dec:	200013d4 	.word	0x200013d4

08007df0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007df8:	4b06      	ldr	r3, [pc, #24]	@ (8007e14 <vTaskInternalSetTimeOutState+0x24>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e00:	4b05      	ldr	r3, [pc, #20]	@ (8007e18 <vTaskInternalSetTimeOutState+0x28>)
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	605a      	str	r2, [r3, #4]
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	200013d8 	.word	0x200013d8
 8007e18:	200013c4 	.word	0x200013c4

08007e1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b088      	sub	sp, #32
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10b      	bne.n	8007e44 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	613b      	str	r3, [r7, #16]
}
 8007e3e:	bf00      	nop
 8007e40:	bf00      	nop
 8007e42:	e7fd      	b.n	8007e40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10b      	bne.n	8007e62 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	60fb      	str	r3, [r7, #12]
}
 8007e5c:	bf00      	nop
 8007e5e:	bf00      	nop
 8007e60:	e7fd      	b.n	8007e5e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007e62:	f001 fa79 	bl	8009358 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e66:	4b1d      	ldr	r3, [pc, #116]	@ (8007edc <xTaskCheckForTimeOut+0xc0>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	69ba      	ldr	r2, [r7, #24]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e7e:	d102      	bne.n	8007e86 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e80:	2300      	movs	r3, #0
 8007e82:	61fb      	str	r3, [r7, #28]
 8007e84:	e023      	b.n	8007ece <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	4b15      	ldr	r3, [pc, #84]	@ (8007ee0 <xTaskCheckForTimeOut+0xc4>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d007      	beq.n	8007ea2 <xTaskCheckForTimeOut+0x86>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	69ba      	ldr	r2, [r7, #24]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d302      	bcc.n	8007ea2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	61fb      	str	r3, [r7, #28]
 8007ea0:	e015      	b.n	8007ece <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d20b      	bcs.n	8007ec4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	1ad2      	subs	r2, r2, r3
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f7ff ff99 	bl	8007df0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	61fb      	str	r3, [r7, #28]
 8007ec2:	e004      	b.n	8007ece <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007ece:	f001 fa75 	bl	80093bc <vPortExitCritical>

	return xReturn;
 8007ed2:	69fb      	ldr	r3, [r7, #28]
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3720      	adds	r7, #32
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	200013c4 	.word	0x200013c4
 8007ee0:	200013d8 	.word	0x200013d8

08007ee4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ee8:	4b03      	ldr	r3, [pc, #12]	@ (8007ef8 <vTaskMissedYield+0x14>)
 8007eea:	2201      	movs	r2, #1
 8007eec:	601a      	str	r2, [r3, #0]
}
 8007eee:	bf00      	nop
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr
 8007ef8:	200013d4 	.word	0x200013d4

08007efc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f04:	f000 f852 	bl	8007fac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f08:	4b06      	ldr	r3, [pc, #24]	@ (8007f24 <prvIdleTask+0x28>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d9f9      	bls.n	8007f04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f10:	4b05      	ldr	r3, [pc, #20]	@ (8007f28 <prvIdleTask+0x2c>)
 8007f12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f16:	601a      	str	r2, [r3, #0]
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f20:	e7f0      	b.n	8007f04 <prvIdleTask+0x8>
 8007f22:	bf00      	nop
 8007f24:	20000ef0 	.word	0x20000ef0
 8007f28:	e000ed04 	.word	0xe000ed04

08007f2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f32:	2300      	movs	r3, #0
 8007f34:	607b      	str	r3, [r7, #4]
 8007f36:	e00c      	b.n	8007f52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	4a12      	ldr	r2, [pc, #72]	@ (8007f8c <prvInitialiseTaskLists+0x60>)
 8007f44:	4413      	add	r3, r2
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fe f8ec 	bl	8006124 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	607b      	str	r3, [r7, #4]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2b37      	cmp	r3, #55	@ 0x37
 8007f56:	d9ef      	bls.n	8007f38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f58:	480d      	ldr	r0, [pc, #52]	@ (8007f90 <prvInitialiseTaskLists+0x64>)
 8007f5a:	f7fe f8e3 	bl	8006124 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f5e:	480d      	ldr	r0, [pc, #52]	@ (8007f94 <prvInitialiseTaskLists+0x68>)
 8007f60:	f7fe f8e0 	bl	8006124 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f64:	480c      	ldr	r0, [pc, #48]	@ (8007f98 <prvInitialiseTaskLists+0x6c>)
 8007f66:	f7fe f8dd 	bl	8006124 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f6a:	480c      	ldr	r0, [pc, #48]	@ (8007f9c <prvInitialiseTaskLists+0x70>)
 8007f6c:	f7fe f8da 	bl	8006124 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f70:	480b      	ldr	r0, [pc, #44]	@ (8007fa0 <prvInitialiseTaskLists+0x74>)
 8007f72:	f7fe f8d7 	bl	8006124 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f76:	4b0b      	ldr	r3, [pc, #44]	@ (8007fa4 <prvInitialiseTaskLists+0x78>)
 8007f78:	4a05      	ldr	r2, [pc, #20]	@ (8007f90 <prvInitialiseTaskLists+0x64>)
 8007f7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8007fa8 <prvInitialiseTaskLists+0x7c>)
 8007f7e:	4a05      	ldr	r2, [pc, #20]	@ (8007f94 <prvInitialiseTaskLists+0x68>)
 8007f80:	601a      	str	r2, [r3, #0]
}
 8007f82:	bf00      	nop
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	20000ef0 	.word	0x20000ef0
 8007f90:	20001350 	.word	0x20001350
 8007f94:	20001364 	.word	0x20001364
 8007f98:	20001380 	.word	0x20001380
 8007f9c:	20001394 	.word	0x20001394
 8007fa0:	200013ac 	.word	0x200013ac
 8007fa4:	20001378 	.word	0x20001378
 8007fa8:	2000137c 	.word	0x2000137c

08007fac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fb2:	e019      	b.n	8007fe8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007fb4:	f001 f9d0 	bl	8009358 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fb8:	4b10      	ldr	r3, [pc, #64]	@ (8007ffc <prvCheckTasksWaitingTermination+0x50>)
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	3304      	adds	r3, #4
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7fe f937 	bl	8006238 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fca:	4b0d      	ldr	r3, [pc, #52]	@ (8008000 <prvCheckTasksWaitingTermination+0x54>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8008000 <prvCheckTasksWaitingTermination+0x54>)
 8007fd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8008004 <prvCheckTasksWaitingTermination+0x58>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	4a0a      	ldr	r2, [pc, #40]	@ (8008004 <prvCheckTasksWaitingTermination+0x58>)
 8007fdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007fde:	f001 f9ed 	bl	80093bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f810 	bl	8008008 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fe8:	4b06      	ldr	r3, [pc, #24]	@ (8008004 <prvCheckTasksWaitingTermination+0x58>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1e1      	bne.n	8007fb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ff0:	bf00      	nop
 8007ff2:	bf00      	nop
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	20001394 	.word	0x20001394
 8008000:	200013c0 	.word	0x200013c0
 8008004:	200013a8 	.word	0x200013a8

08008008 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008016:	2b00      	cmp	r3, #0
 8008018:	d108      	bne.n	800802c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800801e:	4618      	mov	r0, r3
 8008020:	f001 fb8a 	bl	8009738 <vPortFree>
				vPortFree( pxTCB );
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f001 fb87 	bl	8009738 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800802a:	e019      	b.n	8008060 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008032:	2b01      	cmp	r3, #1
 8008034:	d103      	bne.n	800803e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f001 fb7e 	bl	8009738 <vPortFree>
	}
 800803c:	e010      	b.n	8008060 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008044:	2b02      	cmp	r3, #2
 8008046:	d00b      	beq.n	8008060 <prvDeleteTCB+0x58>
	__asm volatile
 8008048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800804c:	f383 8811 	msr	BASEPRI, r3
 8008050:	f3bf 8f6f 	isb	sy
 8008054:	f3bf 8f4f 	dsb	sy
 8008058:	60fb      	str	r3, [r7, #12]
}
 800805a:	bf00      	nop
 800805c:	bf00      	nop
 800805e:	e7fd      	b.n	800805c <prvDeleteTCB+0x54>
	}
 8008060:	bf00      	nop
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800806e:	4b0c      	ldr	r3, [pc, #48]	@ (80080a0 <prvResetNextTaskUnblockTime+0x38>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d104      	bne.n	8008082 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008078:	4b0a      	ldr	r3, [pc, #40]	@ (80080a4 <prvResetNextTaskUnblockTime+0x3c>)
 800807a:	f04f 32ff 	mov.w	r2, #4294967295
 800807e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008080:	e008      	b.n	8008094 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008082:	4b07      	ldr	r3, [pc, #28]	@ (80080a0 <prvResetNextTaskUnblockTime+0x38>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	4a04      	ldr	r2, [pc, #16]	@ (80080a4 <prvResetNextTaskUnblockTime+0x3c>)
 8008092:	6013      	str	r3, [r2, #0]
}
 8008094:	bf00      	nop
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	20001378 	.word	0x20001378
 80080a4:	200013e0 	.word	0x200013e0

080080a8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80080ae:	4b05      	ldr	r3, [pc, #20]	@ (80080c4 <xTaskGetCurrentTaskHandle+0x1c>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80080b4:	687b      	ldr	r3, [r7, #4]
	}
 80080b6:	4618      	mov	r0, r3
 80080b8:	370c      	adds	r7, #12
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	20000eec 	.word	0x20000eec

080080c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080ce:	4b0b      	ldr	r3, [pc, #44]	@ (80080fc <xTaskGetSchedulerState+0x34>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d102      	bne.n	80080dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080d6:	2301      	movs	r3, #1
 80080d8:	607b      	str	r3, [r7, #4]
 80080da:	e008      	b.n	80080ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080dc:	4b08      	ldr	r3, [pc, #32]	@ (8008100 <xTaskGetSchedulerState+0x38>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d102      	bne.n	80080ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80080e4:	2302      	movs	r3, #2
 80080e6:	607b      	str	r3, [r7, #4]
 80080e8:	e001      	b.n	80080ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80080ea:	2300      	movs	r3, #0
 80080ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80080ee:	687b      	ldr	r3, [r7, #4]
	}
 80080f0:	4618      	mov	r0, r3
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr
 80080fc:	200013cc 	.word	0x200013cc
 8008100:	200013e8 	.word	0x200013e8

08008104 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008110:	2300      	movs	r3, #0
 8008112:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d051      	beq.n	80081be <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800811e:	4b2a      	ldr	r3, [pc, #168]	@ (80081c8 <xTaskPriorityInherit+0xc4>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008124:	429a      	cmp	r2, r3
 8008126:	d241      	bcs.n	80081ac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	2b00      	cmp	r3, #0
 800812e:	db06      	blt.n	800813e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008130:	4b25      	ldr	r3, [pc, #148]	@ (80081c8 <xTaskPriorityInherit+0xc4>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008136:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	6959      	ldr	r1, [r3, #20]
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008146:	4613      	mov	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4a1f      	ldr	r2, [pc, #124]	@ (80081cc <xTaskPriorityInherit+0xc8>)
 8008150:	4413      	add	r3, r2
 8008152:	4299      	cmp	r1, r3
 8008154:	d122      	bne.n	800819c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	3304      	adds	r3, #4
 800815a:	4618      	mov	r0, r3
 800815c:	f7fe f86c 	bl	8006238 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008160:	4b19      	ldr	r3, [pc, #100]	@ (80081c8 <xTaskPriorityInherit+0xc4>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800816e:	4b18      	ldr	r3, [pc, #96]	@ (80081d0 <xTaskPriorityInherit+0xcc>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	429a      	cmp	r2, r3
 8008174:	d903      	bls.n	800817e <xTaskPriorityInherit+0x7a>
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800817a:	4a15      	ldr	r2, [pc, #84]	@ (80081d0 <xTaskPriorityInherit+0xcc>)
 800817c:	6013      	str	r3, [r2, #0]
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008182:	4613      	mov	r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	4413      	add	r3, r2
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	4a10      	ldr	r2, [pc, #64]	@ (80081cc <xTaskPriorityInherit+0xc8>)
 800818c:	441a      	add	r2, r3
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	3304      	adds	r3, #4
 8008192:	4619      	mov	r1, r3
 8008194:	4610      	mov	r0, r2
 8008196:	f7fd fff2 	bl	800617e <vListInsertEnd>
 800819a:	e004      	b.n	80081a6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800819c:	4b0a      	ldr	r3, [pc, #40]	@ (80081c8 <xTaskPriorityInherit+0xc4>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80081a6:	2301      	movs	r3, #1
 80081a8:	60fb      	str	r3, [r7, #12]
 80081aa:	e008      	b.n	80081be <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80081b0:	4b05      	ldr	r3, [pc, #20]	@ (80081c8 <xTaskPriorityInherit+0xc4>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d201      	bcs.n	80081be <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80081ba:	2301      	movs	r3, #1
 80081bc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081be:	68fb      	ldr	r3, [r7, #12]
	}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	20000eec 	.word	0x20000eec
 80081cc:	20000ef0 	.word	0x20000ef0
 80081d0:	200013c8 	.word	0x200013c8

080081d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081e0:	2300      	movs	r3, #0
 80081e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d058      	beq.n	800829c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80081ea:	4b2f      	ldr	r3, [pc, #188]	@ (80082a8 <xTaskPriorityDisinherit+0xd4>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	693a      	ldr	r2, [r7, #16]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d00b      	beq.n	800820c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80081f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	60fb      	str	r3, [r7, #12]
}
 8008206:	bf00      	nop
 8008208:	bf00      	nop
 800820a:	e7fd      	b.n	8008208 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008210:	2b00      	cmp	r3, #0
 8008212:	d10b      	bne.n	800822c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008218:	f383 8811 	msr	BASEPRI, r3
 800821c:	f3bf 8f6f 	isb	sy
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	60bb      	str	r3, [r7, #8]
}
 8008226:	bf00      	nop
 8008228:	bf00      	nop
 800822a:	e7fd      	b.n	8008228 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008230:	1e5a      	subs	r2, r3, #1
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800823e:	429a      	cmp	r2, r3
 8008240:	d02c      	beq.n	800829c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008246:	2b00      	cmp	r3, #0
 8008248:	d128      	bne.n	800829c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	3304      	adds	r3, #4
 800824e:	4618      	mov	r0, r3
 8008250:	f7fd fff2 	bl	8006238 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008260:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800826c:	4b0f      	ldr	r3, [pc, #60]	@ (80082ac <xTaskPriorityDisinherit+0xd8>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	429a      	cmp	r2, r3
 8008272:	d903      	bls.n	800827c <xTaskPriorityDisinherit+0xa8>
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008278:	4a0c      	ldr	r2, [pc, #48]	@ (80082ac <xTaskPriorityDisinherit+0xd8>)
 800827a:	6013      	str	r3, [r2, #0]
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008280:	4613      	mov	r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	4413      	add	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4a09      	ldr	r2, [pc, #36]	@ (80082b0 <xTaskPriorityDisinherit+0xdc>)
 800828a:	441a      	add	r2, r3
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	3304      	adds	r3, #4
 8008290:	4619      	mov	r1, r3
 8008292:	4610      	mov	r0, r2
 8008294:	f7fd ff73 	bl	800617e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008298:	2301      	movs	r3, #1
 800829a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800829c:	697b      	ldr	r3, [r7, #20]
	}
 800829e:	4618      	mov	r0, r3
 80082a0:	3718      	adds	r7, #24
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	20000eec 	.word	0x20000eec
 80082ac:	200013c8 	.word	0x200013c8
 80082b0:	20000ef0 	.word	0x20000ef0

080082b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b088      	sub	sp, #32
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80082c2:	2301      	movs	r3, #1
 80082c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d06c      	beq.n	80083a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10b      	bne.n	80082ec <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80082d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	60fb      	str	r3, [r7, #12]
}
 80082e6:	bf00      	nop
 80082e8:	bf00      	nop
 80082ea:	e7fd      	b.n	80082e8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082f0:	683a      	ldr	r2, [r7, #0]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d902      	bls.n	80082fc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	61fb      	str	r3, [r7, #28]
 80082fa:	e002      	b.n	8008302 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008300:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008306:	69fa      	ldr	r2, [r7, #28]
 8008308:	429a      	cmp	r2, r3
 800830a:	d04c      	beq.n	80083a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008310:	697a      	ldr	r2, [r7, #20]
 8008312:	429a      	cmp	r2, r3
 8008314:	d147      	bne.n	80083a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008316:	4b26      	ldr	r3, [pc, #152]	@ (80083b0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	69ba      	ldr	r2, [r7, #24]
 800831c:	429a      	cmp	r2, r3
 800831e:	d10b      	bne.n	8008338 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	60bb      	str	r3, [r7, #8]
}
 8008332:	bf00      	nop
 8008334:	bf00      	nop
 8008336:	e7fd      	b.n	8008334 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800833c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	69fa      	ldr	r2, [r7, #28]
 8008342:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	2b00      	cmp	r3, #0
 800834a:	db04      	blt.n	8008356 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	6959      	ldr	r1, [r3, #20]
 800835a:	693a      	ldr	r2, [r7, #16]
 800835c:	4613      	mov	r3, r2
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4413      	add	r3, r2
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	4a13      	ldr	r2, [pc, #76]	@ (80083b4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008366:	4413      	add	r3, r2
 8008368:	4299      	cmp	r1, r3
 800836a:	d11c      	bne.n	80083a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	3304      	adds	r3, #4
 8008370:	4618      	mov	r0, r3
 8008372:	f7fd ff61 	bl	8006238 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800837a:	4b0f      	ldr	r3, [pc, #60]	@ (80083b8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	429a      	cmp	r2, r3
 8008380:	d903      	bls.n	800838a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008386:	4a0c      	ldr	r2, [pc, #48]	@ (80083b8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008388:	6013      	str	r3, [r2, #0]
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800838e:	4613      	mov	r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4413      	add	r3, r2
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4a07      	ldr	r2, [pc, #28]	@ (80083b4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008398:	441a      	add	r2, r3
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	3304      	adds	r3, #4
 800839e:	4619      	mov	r1, r3
 80083a0:	4610      	mov	r0, r2
 80083a2:	f7fd feec 	bl	800617e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083a6:	bf00      	nop
 80083a8:	3720      	adds	r7, #32
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	20000eec 	.word	0x20000eec
 80083b4:	20000ef0 	.word	0x20000ef0
 80083b8:	200013c8 	.word	0x200013c8

080083bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80083bc:	b480      	push	{r7}
 80083be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80083c0:	4b07      	ldr	r3, [pc, #28]	@ (80083e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d004      	beq.n	80083d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80083c8:	4b05      	ldr	r3, [pc, #20]	@ (80083e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083ce:	3201      	adds	r2, #1
 80083d0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80083d2:	4b03      	ldr	r3, [pc, #12]	@ (80083e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80083d4:	681b      	ldr	r3, [r3, #0]
	}
 80083d6:	4618      	mov	r0, r3
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr
 80083e0:	20000eec 	.word	0x20000eec

080083e4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
 80083f0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80083f2:	f000 ffb1 	bl	8009358 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80083f6:	4b26      	ldr	r3, [pc, #152]	@ (8008490 <xTaskNotifyWait+0xac>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b02      	cmp	r3, #2
 8008402:	d01a      	beq.n	800843a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008404:	4b22      	ldr	r3, [pc, #136]	@ (8008490 <xTaskNotifyWait+0xac>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	43d2      	mvns	r2, r2
 800840e:	400a      	ands	r2, r1
 8008410:	655a      	str	r2, [r3, #84]	@ 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008412:	4b1f      	ldr	r3, [pc, #124]	@ (8008490 <xTaskNotifyWait+0xac>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00b      	beq.n	800843a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008422:	2101      	movs	r1, #1
 8008424:	6838      	ldr	r0, [r7, #0]
 8008426:	f000 f9d1 	bl	80087cc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800842a:	4b1a      	ldr	r3, [pc, #104]	@ (8008494 <xTaskNotifyWait+0xb0>)
 800842c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008430:	601a      	str	r2, [r3, #0]
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800843a:	f000 ffbf 	bl	80093bc <vPortExitCritical>

		taskENTER_CRITICAL();
 800843e:	f000 ff8b 	bl	8009358 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d004      	beq.n	8008452 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008448:	4b11      	ldr	r3, [pc, #68]	@ (8008490 <xTaskNotifyWait+0xac>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008452:	4b0f      	ldr	r3, [pc, #60]	@ (8008490 <xTaskNotifyWait+0xac>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800845a:	b2db      	uxtb	r3, r3
 800845c:	2b02      	cmp	r3, #2
 800845e:	d002      	beq.n	8008466 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8008460:	2300      	movs	r3, #0
 8008462:	617b      	str	r3, [r7, #20]
 8008464:	e008      	b.n	8008478 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008466:	4b0a      	ldr	r3, [pc, #40]	@ (8008490 <xTaskNotifyWait+0xac>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	43d2      	mvns	r2, r2
 8008470:	400a      	ands	r2, r1
 8008472:	655a      	str	r2, [r3, #84]	@ 0x54
				xReturn = pdTRUE;
 8008474:	2301      	movs	r3, #1
 8008476:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008478:	4b05      	ldr	r3, [pc, #20]	@ (8008490 <xTaskNotifyWait+0xac>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 8008482:	f000 ff9b 	bl	80093bc <vPortExitCritical>

		return xReturn;
 8008486:	697b      	ldr	r3, [r7, #20]
	}
 8008488:	4618      	mov	r0, r3
 800848a:	3718      	adds	r7, #24
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	20000eec 	.word	0x20000eec
 8008494:	e000ed04 	.word	0xe000ed04

08008498 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008498:	b580      	push	{r7, lr}
 800849a:	b08a      	sub	sp, #40	@ 0x28
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	603b      	str	r3, [r7, #0]
 80084a4:	4613      	mov	r3, r2
 80084a6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80084a8:	2301      	movs	r3, #1
 80084aa:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10b      	bne.n	80084ca <xTaskGenericNotify+0x32>
	__asm volatile
 80084b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b6:	f383 8811 	msr	BASEPRI, r3
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	61bb      	str	r3, [r7, #24]
}
 80084c4:	bf00      	nop
 80084c6:	bf00      	nop
 80084c8:	e7fd      	b.n	80084c6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80084ce:	f000 ff43 	bl	8009358 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d003      	beq.n	80084e0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80084d8:	6a3b      	ldr	r3, [r7, #32]
 80084da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80084e0:	6a3b      	ldr	r3, [r7, #32]
 80084e2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80084e6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80084e8:	6a3b      	ldr	r3, [r7, #32]
 80084ea:	2202      	movs	r2, #2
 80084ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 80084f0:	79fb      	ldrb	r3, [r7, #7]
 80084f2:	2b04      	cmp	r3, #4
 80084f4:	d827      	bhi.n	8008546 <xTaskGenericNotify+0xae>
 80084f6:	a201      	add	r2, pc, #4	@ (adr r2, 80084fc <xTaskGenericNotify+0x64>)
 80084f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fc:	08008569 	.word	0x08008569
 8008500:	08008511 	.word	0x08008511
 8008504:	0800851f 	.word	0x0800851f
 8008508:	0800852b 	.word	0x0800852b
 800850c:	08008533 	.word	0x08008533
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008510:	6a3b      	ldr	r3, [r7, #32]
 8008512:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	431a      	orrs	r2, r3
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800851c:	e027      	b.n	800856e <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800851e:	6a3b      	ldr	r3, [r7, #32]
 8008520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008522:	1c5a      	adds	r2, r3, #1
 8008524:	6a3b      	ldr	r3, [r7, #32]
 8008526:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8008528:	e021      	b.n	800856e <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800852a:	6a3b      	ldr	r3, [r7, #32]
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8008530:	e01d      	b.n	800856e <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008532:	7ffb      	ldrb	r3, [r7, #31]
 8008534:	2b02      	cmp	r3, #2
 8008536:	d003      	beq.n	8008540 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008538:	6a3b      	ldr	r3, [r7, #32]
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800853e:	e016      	b.n	800856e <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8008540:	2300      	movs	r3, #0
 8008542:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8008544:	e013      	b.n	800856e <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008546:	6a3b      	ldr	r3, [r7, #32]
 8008548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800854a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854e:	d00d      	beq.n	800856c <xTaskGenericNotify+0xd4>
	__asm volatile
 8008550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	617b      	str	r3, [r7, #20]
}
 8008562:	bf00      	nop
 8008564:	bf00      	nop
 8008566:	e7fd      	b.n	8008564 <xTaskGenericNotify+0xcc>
					break;
 8008568:	bf00      	nop
 800856a:	e000      	b.n	800856e <xTaskGenericNotify+0xd6>

					break;
 800856c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800856e:	7ffb      	ldrb	r3, [r7, #31]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d13b      	bne.n	80085ec <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008574:	6a3b      	ldr	r3, [r7, #32]
 8008576:	3304      	adds	r3, #4
 8008578:	4618      	mov	r0, r3
 800857a:	f7fd fe5d 	bl	8006238 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800857e:	6a3b      	ldr	r3, [r7, #32]
 8008580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008582:	4b1e      	ldr	r3, [pc, #120]	@ (80085fc <xTaskGenericNotify+0x164>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	429a      	cmp	r2, r3
 8008588:	d903      	bls.n	8008592 <xTaskGenericNotify+0xfa>
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800858e:	4a1b      	ldr	r2, [pc, #108]	@ (80085fc <xTaskGenericNotify+0x164>)
 8008590:	6013      	str	r3, [r2, #0]
 8008592:	6a3b      	ldr	r3, [r7, #32]
 8008594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008596:	4613      	mov	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4a18      	ldr	r2, [pc, #96]	@ (8008600 <xTaskGenericNotify+0x168>)
 80085a0:	441a      	add	r2, r3
 80085a2:	6a3b      	ldr	r3, [r7, #32]
 80085a4:	3304      	adds	r3, #4
 80085a6:	4619      	mov	r1, r3
 80085a8:	4610      	mov	r0, r2
 80085aa:	f7fd fde8 	bl	800617e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80085ae:	6a3b      	ldr	r3, [r7, #32]
 80085b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00b      	beq.n	80085ce <xTaskGenericNotify+0x136>
	__asm volatile
 80085b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	613b      	str	r3, [r7, #16]
}
 80085c8:	bf00      	nop
 80085ca:	bf00      	nop
 80085cc:	e7fd      	b.n	80085ca <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80085ce:	6a3b      	ldr	r3, [r7, #32]
 80085d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008604 <xTaskGenericNotify+0x16c>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d8:	429a      	cmp	r2, r3
 80085da:	d907      	bls.n	80085ec <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80085dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008608 <xTaskGenericNotify+0x170>)
 80085de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085e2:	601a      	str	r2, [r3, #0]
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80085ec:	f000 fee6 	bl	80093bc <vPortExitCritical>

		return xReturn;
 80085f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3728      	adds	r7, #40	@ 0x28
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	200013c8 	.word	0x200013c8
 8008600:	20000ef0 	.word	0x20000ef0
 8008604:	20000eec 	.word	0x20000eec
 8008608:	e000ed04 	.word	0xe000ed04

0800860c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800860c:	b580      	push	{r7, lr}
 800860e:	b08e      	sub	sp, #56	@ 0x38
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	603b      	str	r3, [r7, #0]
 8008618:	4613      	mov	r3, r2
 800861a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800861c:	2301      	movs	r3, #1
 800861e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d10b      	bne.n	800863e <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8008626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008638:	bf00      	nop
 800863a:	bf00      	nop
 800863c:	e7fd      	b.n	800863a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800863e:	f000 ff6b 	bl	8009518 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8008646:	f3ef 8211 	mrs	r2, BASEPRI
 800864a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800864e:	f383 8811 	msr	BASEPRI, r3
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	f3bf 8f4f 	dsb	sy
 800865a:	623a      	str	r2, [r7, #32]
 800865c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800865e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008660:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d003      	beq.n	8008670 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008672:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800867a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867c:	2202      	movs	r2, #2
 800867e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 8008682:	79fb      	ldrb	r3, [r7, #7]
 8008684:	2b04      	cmp	r3, #4
 8008686:	d829      	bhi.n	80086dc <xTaskGenericNotifyFromISR+0xd0>
 8008688:	a201      	add	r2, pc, #4	@ (adr r2, 8008690 <xTaskGenericNotifyFromISR+0x84>)
 800868a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868e:	bf00      	nop
 8008690:	080086ff 	.word	0x080086ff
 8008694:	080086a5 	.word	0x080086a5
 8008698:	080086b3 	.word	0x080086b3
 800869c:	080086bf 	.word	0x080086bf
 80086a0:	080086c7 	.word	0x080086c7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80086a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	431a      	orrs	r2, r3
 80086ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ae:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80086b0:	e028      	b.n	8008704 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80086b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086b6:	1c5a      	adds	r2, r3, #1
 80086b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ba:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80086bc:	e022      	b.n	8008704 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80086be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80086c4:	e01e      	b.n	8008704 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80086c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d003      	beq.n	80086d6 <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80086ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d0:	68ba      	ldr	r2, [r7, #8]
 80086d2:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80086d4:	e016      	b.n	8008704 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 80086d6:	2300      	movs	r3, #0
 80086d8:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80086da:	e013      	b.n	8008704 <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80086dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e4:	d00d      	beq.n	8008702 <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 80086e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ea:	f383 8811 	msr	BASEPRI, r3
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	f3bf 8f4f 	dsb	sy
 80086f6:	61bb      	str	r3, [r7, #24]
}
 80086f8:	bf00      	nop
 80086fa:	bf00      	nop
 80086fc:	e7fd      	b.n	80086fa <xTaskGenericNotifyFromISR+0xee>
					break;
 80086fe:	bf00      	nop
 8008700:	e000      	b.n	8008704 <xTaskGenericNotifyFromISR+0xf8>
					break;
 8008702:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008704:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008708:	2b01      	cmp	r3, #1
 800870a:	d147      	bne.n	800879c <xTaskGenericNotifyFromISR+0x190>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800870c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00b      	beq.n	800872c <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 8008714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008718:	f383 8811 	msr	BASEPRI, r3
 800871c:	f3bf 8f6f 	isb	sy
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	617b      	str	r3, [r7, #20]
}
 8008726:	bf00      	nop
 8008728:	bf00      	nop
 800872a:	e7fd      	b.n	8008728 <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800872c:	4b21      	ldr	r3, [pc, #132]	@ (80087b4 <xTaskGenericNotifyFromISR+0x1a8>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d11d      	bne.n	8008770 <xTaskGenericNotifyFromISR+0x164>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008736:	3304      	adds	r3, #4
 8008738:	4618      	mov	r0, r3
 800873a:	f7fd fd7d 	bl	8006238 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800873e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008742:	4b1d      	ldr	r3, [pc, #116]	@ (80087b8 <xTaskGenericNotifyFromISR+0x1ac>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	429a      	cmp	r2, r3
 8008748:	d903      	bls.n	8008752 <xTaskGenericNotifyFromISR+0x146>
 800874a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800874e:	4a1a      	ldr	r2, [pc, #104]	@ (80087b8 <xTaskGenericNotifyFromISR+0x1ac>)
 8008750:	6013      	str	r3, [r2, #0]
 8008752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008756:	4613      	mov	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4413      	add	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4a17      	ldr	r2, [pc, #92]	@ (80087bc <xTaskGenericNotifyFromISR+0x1b0>)
 8008760:	441a      	add	r2, r3
 8008762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008764:	3304      	adds	r3, #4
 8008766:	4619      	mov	r1, r3
 8008768:	4610      	mov	r0, r2
 800876a:	f7fd fd08 	bl	800617e <vListInsertEnd>
 800876e:	e005      	b.n	800877c <xTaskGenericNotifyFromISR+0x170>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008772:	3318      	adds	r3, #24
 8008774:	4619      	mov	r1, r3
 8008776:	4812      	ldr	r0, [pc, #72]	@ (80087c0 <xTaskGenericNotifyFromISR+0x1b4>)
 8008778:	f7fd fd01 	bl	800617e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800877c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800877e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008780:	4b10      	ldr	r3, [pc, #64]	@ (80087c4 <xTaskGenericNotifyFromISR+0x1b8>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008786:	429a      	cmp	r2, r3
 8008788:	d908      	bls.n	800879c <xTaskGenericNotifyFromISR+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800878a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800878c:	2b00      	cmp	r3, #0
 800878e:	d002      	beq.n	8008796 <xTaskGenericNotifyFromISR+0x18a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008790:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008792:	2201      	movs	r2, #1
 8008794:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8008796:	4b0c      	ldr	r3, [pc, #48]	@ (80087c8 <xTaskGenericNotifyFromISR+0x1bc>)
 8008798:	2201      	movs	r2, #1
 800879a:	601a      	str	r2, [r3, #0]
 800879c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800879e:	613b      	str	r3, [r7, #16]
	__asm volatile
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	f383 8811 	msr	BASEPRI, r3
}
 80087a6:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80087a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3738      	adds	r7, #56	@ 0x38
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	200013e8 	.word	0x200013e8
 80087b8:	200013c8 	.word	0x200013c8
 80087bc:	20000ef0 	.word	0x20000ef0
 80087c0:	20001380 	.word	0x20001380
 80087c4:	20000eec 	.word	0x20000eec
 80087c8:	200013d4 	.word	0x200013d4

080087cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80087d6:	4b21      	ldr	r3, [pc, #132]	@ (800885c <prvAddCurrentTaskToDelayedList+0x90>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087dc:	4b20      	ldr	r3, [pc, #128]	@ (8008860 <prvAddCurrentTaskToDelayedList+0x94>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	3304      	adds	r3, #4
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7fd fd28 	bl	8006238 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ee:	d10a      	bne.n	8008806 <prvAddCurrentTaskToDelayedList+0x3a>
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d007      	beq.n	8008806 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087f6:	4b1a      	ldr	r3, [pc, #104]	@ (8008860 <prvAddCurrentTaskToDelayedList+0x94>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	3304      	adds	r3, #4
 80087fc:	4619      	mov	r1, r3
 80087fe:	4819      	ldr	r0, [pc, #100]	@ (8008864 <prvAddCurrentTaskToDelayedList+0x98>)
 8008800:	f7fd fcbd 	bl	800617e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008804:	e026      	b.n	8008854 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4413      	add	r3, r2
 800880c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800880e:	4b14      	ldr	r3, [pc, #80]	@ (8008860 <prvAddCurrentTaskToDelayedList+0x94>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	429a      	cmp	r2, r3
 800881c:	d209      	bcs.n	8008832 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800881e:	4b12      	ldr	r3, [pc, #72]	@ (8008868 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	4b0f      	ldr	r3, [pc, #60]	@ (8008860 <prvAddCurrentTaskToDelayedList+0x94>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3304      	adds	r3, #4
 8008828:	4619      	mov	r1, r3
 800882a:	4610      	mov	r0, r2
 800882c:	f7fd fccb 	bl	80061c6 <vListInsert>
}
 8008830:	e010      	b.n	8008854 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008832:	4b0e      	ldr	r3, [pc, #56]	@ (800886c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	4b0a      	ldr	r3, [pc, #40]	@ (8008860 <prvAddCurrentTaskToDelayedList+0x94>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	3304      	adds	r3, #4
 800883c:	4619      	mov	r1, r3
 800883e:	4610      	mov	r0, r2
 8008840:	f7fd fcc1 	bl	80061c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008844:	4b0a      	ldr	r3, [pc, #40]	@ (8008870 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	429a      	cmp	r2, r3
 800884c:	d202      	bcs.n	8008854 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800884e:	4a08      	ldr	r2, [pc, #32]	@ (8008870 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	6013      	str	r3, [r2, #0]
}
 8008854:	bf00      	nop
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	200013c4 	.word	0x200013c4
 8008860:	20000eec 	.word	0x20000eec
 8008864:	200013ac 	.word	0x200013ac
 8008868:	2000137c 	.word	0x2000137c
 800886c:	20001378 	.word	0x20001378
 8008870:	200013e0 	.word	0x200013e0

08008874 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b08a      	sub	sp, #40	@ 0x28
 8008878:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800887a:	2300      	movs	r3, #0
 800887c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800887e:	f000 fbb1 	bl	8008fe4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008882:	4b1d      	ldr	r3, [pc, #116]	@ (80088f8 <xTimerCreateTimerTask+0x84>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d021      	beq.n	80088ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800888a:	2300      	movs	r3, #0
 800888c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800888e:	2300      	movs	r3, #0
 8008890:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008892:	1d3a      	adds	r2, r7, #4
 8008894:	f107 0108 	add.w	r1, r7, #8
 8008898:	f107 030c 	add.w	r3, r7, #12
 800889c:	4618      	mov	r0, r3
 800889e:	f7fd fc27 	bl	80060f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80088a2:	6879      	ldr	r1, [r7, #4]
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	9202      	str	r2, [sp, #8]
 80088aa:	9301      	str	r3, [sp, #4]
 80088ac:	2302      	movs	r3, #2
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	2300      	movs	r3, #0
 80088b2:	460a      	mov	r2, r1
 80088b4:	4911      	ldr	r1, [pc, #68]	@ (80088fc <xTimerCreateTimerTask+0x88>)
 80088b6:	4812      	ldr	r0, [pc, #72]	@ (8008900 <xTimerCreateTimerTask+0x8c>)
 80088b8:	f7fe fdcc 	bl	8007454 <xTaskCreateStatic>
 80088bc:	4603      	mov	r3, r0
 80088be:	4a11      	ldr	r2, [pc, #68]	@ (8008904 <xTimerCreateTimerTask+0x90>)
 80088c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80088c2:	4b10      	ldr	r3, [pc, #64]	@ (8008904 <xTimerCreateTimerTask+0x90>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d001      	beq.n	80088ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80088ca:	2301      	movs	r3, #1
 80088cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10b      	bne.n	80088ec <xTimerCreateTimerTask+0x78>
	__asm volatile
 80088d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d8:	f383 8811 	msr	BASEPRI, r3
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	613b      	str	r3, [r7, #16]
}
 80088e6:	bf00      	nop
 80088e8:	bf00      	nop
 80088ea:	e7fd      	b.n	80088e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80088ec:	697b      	ldr	r3, [r7, #20]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3718      	adds	r7, #24
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	2000141c 	.word	0x2000141c
 80088fc:	08009a7c 	.word	0x08009a7c
 8008900:	08008b7d 	.word	0x08008b7d
 8008904:	20001420 	.word	0x20001420

08008908 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008908:	b580      	push	{r7, lr}
 800890a:	b088      	sub	sp, #32
 800890c:	af02      	add	r7, sp, #8
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
 8008914:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008916:	202c      	movs	r0, #44	@ 0x2c
 8008918:	f000 fe40 	bl	800959c <pvPortMalloc>
 800891c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00d      	beq.n	8008940 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	2200      	movs	r2, #0
 8008928:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	9301      	str	r3, [sp, #4]
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	68b9      	ldr	r1, [r7, #8]
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f000 f845 	bl	80089ca <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008940:	697b      	ldr	r3, [r7, #20]
	}
 8008942:	4618      	mov	r0, r3
 8008944:	3718      	adds	r7, #24
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800894a:	b580      	push	{r7, lr}
 800894c:	b08a      	sub	sp, #40	@ 0x28
 800894e:	af02      	add	r7, sp, #8
 8008950:	60f8      	str	r0, [r7, #12]
 8008952:	60b9      	str	r1, [r7, #8]
 8008954:	607a      	str	r2, [r7, #4]
 8008956:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008958:	232c      	movs	r3, #44	@ 0x2c
 800895a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	2b2c      	cmp	r3, #44	@ 0x2c
 8008960:	d00b      	beq.n	800897a <xTimerCreateStatic+0x30>
	__asm volatile
 8008962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008966:	f383 8811 	msr	BASEPRI, r3
 800896a:	f3bf 8f6f 	isb	sy
 800896e:	f3bf 8f4f 	dsb	sy
 8008972:	61bb      	str	r3, [r7, #24]
}
 8008974:	bf00      	nop
 8008976:	bf00      	nop
 8008978:	e7fd      	b.n	8008976 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800897a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800897c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10b      	bne.n	800899a <xTimerCreateStatic+0x50>
	__asm volatile
 8008982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008986:	f383 8811 	msr	BASEPRI, r3
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	617b      	str	r3, [r7, #20]
}
 8008994:	bf00      	nop
 8008996:	bf00      	nop
 8008998:	e7fd      	b.n	8008996 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800899a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800899c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00d      	beq.n	80089c0 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	2202      	movs	r2, #2
 80089a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	9301      	str	r3, [sp, #4]
 80089b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	68b9      	ldr	r1, [r7, #8]
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f000 f805 	bl	80089ca <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80089c0:	69fb      	ldr	r3, [r7, #28]
	}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3720      	adds	r7, #32
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b086      	sub	sp, #24
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	60f8      	str	r0, [r7, #12]
 80089d2:	60b9      	str	r1, [r7, #8]
 80089d4:	607a      	str	r2, [r7, #4]
 80089d6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10b      	bne.n	80089f6 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 80089de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e2:	f383 8811 	msr	BASEPRI, r3
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	f3bf 8f4f 	dsb	sy
 80089ee:	617b      	str	r3, [r7, #20]
}
 80089f0:	bf00      	nop
 80089f2:	bf00      	nop
 80089f4:	e7fd      	b.n	80089f2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80089f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d01e      	beq.n	8008a3a <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80089fc:	f000 faf2 	bl	8008fe4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a02:	68fa      	ldr	r2, [r7, #12]
 8008a04:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a08:	68ba      	ldr	r2, [r7, #8]
 8008a0a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a14:	6a3a      	ldr	r2, [r7, #32]
 8008a16:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1a:	3304      	adds	r3, #4
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7fd fba1 	bl	8006164 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d008      	beq.n	8008a3a <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a2e:	f043 0304 	orr.w	r3, r3, #4
 8008a32:	b2da      	uxtb	r2, r3
 8008a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008a3a:	bf00      	nop
 8008a3c:	3718      	adds	r7, #24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
	...

08008a44 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b08a      	sub	sp, #40	@ 0x28
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
 8008a50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008a52:	2300      	movs	r3, #0
 8008a54:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10b      	bne.n	8008a74 <xTimerGenericCommand+0x30>
	__asm volatile
 8008a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a60:	f383 8811 	msr	BASEPRI, r3
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	623b      	str	r3, [r7, #32]
}
 8008a6e:	bf00      	nop
 8008a70:	bf00      	nop
 8008a72:	e7fd      	b.n	8008a70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008a74:	4b19      	ldr	r3, [pc, #100]	@ (8008adc <xTimerGenericCommand+0x98>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d02a      	beq.n	8008ad2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	2b05      	cmp	r3, #5
 8008a8c:	dc18      	bgt.n	8008ac0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008a8e:	f7ff fb1b 	bl	80080c8 <xTaskGetSchedulerState>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d109      	bne.n	8008aac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008a98:	4b10      	ldr	r3, [pc, #64]	@ (8008adc <xTimerGenericCommand+0x98>)
 8008a9a:	6818      	ldr	r0, [r3, #0]
 8008a9c:	f107 0110 	add.w	r1, r7, #16
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008aa4:	f7fd fe5e 	bl	8006764 <xQueueGenericSend>
 8008aa8:	6278      	str	r0, [r7, #36]	@ 0x24
 8008aaa:	e012      	b.n	8008ad2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008aac:	4b0b      	ldr	r3, [pc, #44]	@ (8008adc <xTimerGenericCommand+0x98>)
 8008aae:	6818      	ldr	r0, [r3, #0]
 8008ab0:	f107 0110 	add.w	r1, r7, #16
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f7fd fe54 	bl	8006764 <xQueueGenericSend>
 8008abc:	6278      	str	r0, [r7, #36]	@ 0x24
 8008abe:	e008      	b.n	8008ad2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008ac0:	4b06      	ldr	r3, [pc, #24]	@ (8008adc <xTimerGenericCommand+0x98>)
 8008ac2:	6818      	ldr	r0, [r3, #0]
 8008ac4:	f107 0110 	add.w	r1, r7, #16
 8008ac8:	2300      	movs	r3, #0
 8008aca:	683a      	ldr	r2, [r7, #0]
 8008acc:	f7fd ff4c 	bl	8006968 <xQueueGenericSendFromISR>
 8008ad0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3728      	adds	r7, #40	@ 0x28
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	2000141c 	.word	0x2000141c

08008ae0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b088      	sub	sp, #32
 8008ae4:	af02      	add	r7, sp, #8
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aea:	4b23      	ldr	r3, [pc, #140]	@ (8008b78 <prvProcessExpiredTimer+0x98>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	3304      	adds	r3, #4
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7fd fb9d 	bl	8006238 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b04:	f003 0304 	and.w	r3, r3, #4
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d023      	beq.n	8008b54 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	699a      	ldr	r2, [r3, #24]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	18d1      	adds	r1, r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	683a      	ldr	r2, [r7, #0]
 8008b18:	6978      	ldr	r0, [r7, #20]
 8008b1a:	f000 f8d5 	bl	8008cc8 <prvInsertTimerInActiveList>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d020      	beq.n	8008b66 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b24:	2300      	movs	r3, #0
 8008b26:	9300      	str	r3, [sp, #0]
 8008b28:	2300      	movs	r3, #0
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	6978      	ldr	r0, [r7, #20]
 8008b30:	f7ff ff88 	bl	8008a44 <xTimerGenericCommand>
 8008b34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d114      	bne.n	8008b66 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b40:	f383 8811 	msr	BASEPRI, r3
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	60fb      	str	r3, [r7, #12]
}
 8008b4e:	bf00      	nop
 8008b50:	bf00      	nop
 8008b52:	e7fd      	b.n	8008b50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b5a:	f023 0301 	bic.w	r3, r3, #1
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	6a1b      	ldr	r3, [r3, #32]
 8008b6a:	6978      	ldr	r0, [r7, #20]
 8008b6c:	4798      	blx	r3
}
 8008b6e:	bf00      	nop
 8008b70:	3718      	adds	r7, #24
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	20001414 	.word	0x20001414

08008b7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b84:	f107 0308 	add.w	r3, r7, #8
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f000 f859 	bl	8008c40 <prvGetNextExpireTime>
 8008b8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	4619      	mov	r1, r3
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	f000 f805 	bl	8008ba4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008b9a:	f000 f8d7 	bl	8008d4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b9e:	bf00      	nop
 8008ba0:	e7f0      	b.n	8008b84 <prvTimerTask+0x8>
	...

08008ba4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008bae:	f7fe fe95 	bl	80078dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008bb2:	f107 0308 	add.w	r3, r7, #8
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f000 f866 	bl	8008c88 <prvSampleTimeNow>
 8008bbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d130      	bne.n	8008c26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10a      	bne.n	8008be0 <prvProcessTimerOrBlockTask+0x3c>
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d806      	bhi.n	8008be0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008bd2:	f7fe fe91 	bl	80078f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008bd6:	68f9      	ldr	r1, [r7, #12]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f7ff ff81 	bl	8008ae0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008bde:	e024      	b.n	8008c2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d008      	beq.n	8008bf8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008be6:	4b13      	ldr	r3, [pc, #76]	@ (8008c34 <prvProcessTimerOrBlockTask+0x90>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d101      	bne.n	8008bf4 <prvProcessTimerOrBlockTask+0x50>
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e000      	b.n	8008bf6 <prvProcessTimerOrBlockTask+0x52>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8008c38 <prvProcessTimerOrBlockTask+0x94>)
 8008bfa:	6818      	ldr	r0, [r3, #0]
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	4619      	mov	r1, r3
 8008c06:	f7fe fbf1 	bl	80073ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008c0a:	f7fe fe75 	bl	80078f8 <xTaskResumeAll>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10a      	bne.n	8008c2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008c14:	4b09      	ldr	r3, [pc, #36]	@ (8008c3c <prvProcessTimerOrBlockTask+0x98>)
 8008c16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c1a:	601a      	str	r2, [r3, #0]
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	f3bf 8f6f 	isb	sy
}
 8008c24:	e001      	b.n	8008c2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008c26:	f7fe fe67 	bl	80078f8 <xTaskResumeAll>
}
 8008c2a:	bf00      	nop
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	20001418 	.word	0x20001418
 8008c38:	2000141c 	.word	0x2000141c
 8008c3c:	e000ed04 	.word	0xe000ed04

08008c40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c48:	4b0e      	ldr	r3, [pc, #56]	@ (8008c84 <prvGetNextExpireTime+0x44>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d101      	bne.n	8008c56 <prvGetNextExpireTime+0x16>
 8008c52:	2201      	movs	r2, #1
 8008c54:	e000      	b.n	8008c58 <prvGetNextExpireTime+0x18>
 8008c56:	2200      	movs	r2, #0
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d105      	bne.n	8008c70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c64:	4b07      	ldr	r3, [pc, #28]	@ (8008c84 <prvGetNextExpireTime+0x44>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	60fb      	str	r3, [r7, #12]
 8008c6e:	e001      	b.n	8008c74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008c70:	2300      	movs	r3, #0
 8008c72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008c74:	68fb      	ldr	r3, [r7, #12]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3714      	adds	r7, #20
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	20001414 	.word	0x20001414

08008c88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008c90:	f7fe fed0 	bl	8007a34 <xTaskGetTickCount>
 8008c94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008c96:	4b0b      	ldr	r3, [pc, #44]	@ (8008cc4 <prvSampleTimeNow+0x3c>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d205      	bcs.n	8008cac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008ca0:	f000 f93a 	bl	8008f18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	601a      	str	r2, [r3, #0]
 8008caa:	e002      	b.n	8008cb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008cb2:	4a04      	ldr	r2, [pc, #16]	@ (8008cc4 <prvSampleTimeNow+0x3c>)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	20001424 	.word	0x20001424

08008cc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
 8008cd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	68ba      	ldr	r2, [r7, #8]
 8008cde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d812      	bhi.n	8008d14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	1ad2      	subs	r2, r2, r3
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d302      	bcc.n	8008d02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	617b      	str	r3, [r7, #20]
 8008d00:	e01b      	b.n	8008d3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008d02:	4b10      	ldr	r3, [pc, #64]	@ (8008d44 <prvInsertTimerInActiveList+0x7c>)
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	3304      	adds	r3, #4
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	4610      	mov	r0, r2
 8008d0e:	f7fd fa5a 	bl	80061c6 <vListInsert>
 8008d12:	e012      	b.n	8008d3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d206      	bcs.n	8008d2a <prvInsertTimerInActiveList+0x62>
 8008d1c:	68ba      	ldr	r2, [r7, #8]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d302      	bcc.n	8008d2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008d24:	2301      	movs	r3, #1
 8008d26:	617b      	str	r3, [r7, #20]
 8008d28:	e007      	b.n	8008d3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d2a:	4b07      	ldr	r3, [pc, #28]	@ (8008d48 <prvInsertTimerInActiveList+0x80>)
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	3304      	adds	r3, #4
 8008d32:	4619      	mov	r1, r3
 8008d34:	4610      	mov	r0, r2
 8008d36:	f7fd fa46 	bl	80061c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008d3a:	697b      	ldr	r3, [r7, #20]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3718      	adds	r7, #24
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	20001418 	.word	0x20001418
 8008d48:	20001414 	.word	0x20001414

08008d4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b08e      	sub	sp, #56	@ 0x38
 8008d50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d52:	e0ce      	b.n	8008ef2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	da19      	bge.n	8008d8e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008d5a:	1d3b      	adds	r3, r7, #4
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d10b      	bne.n	8008d7e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6a:	f383 8811 	msr	BASEPRI, r3
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f3bf 8f4f 	dsb	sy
 8008d76:	61fb      	str	r3, [r7, #28]
}
 8008d78:	bf00      	nop
 8008d7a:	bf00      	nop
 8008d7c:	e7fd      	b.n	8008d7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d84:	6850      	ldr	r0, [r2, #4]
 8008d86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d88:	6892      	ldr	r2, [r2, #8]
 8008d8a:	4611      	mov	r1, r2
 8008d8c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f2c0 80ae 	blt.w	8008ef2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d9c:	695b      	ldr	r3, [r3, #20]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d004      	beq.n	8008dac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da4:	3304      	adds	r3, #4
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fd fa46 	bl	8006238 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008dac:	463b      	mov	r3, r7
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7ff ff6a 	bl	8008c88 <prvSampleTimeNow>
 8008db4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2b09      	cmp	r3, #9
 8008dba:	f200 8097 	bhi.w	8008eec <prvProcessReceivedCommands+0x1a0>
 8008dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8008dc4 <prvProcessReceivedCommands+0x78>)
 8008dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc4:	08008ded 	.word	0x08008ded
 8008dc8:	08008ded 	.word	0x08008ded
 8008dcc:	08008ded 	.word	0x08008ded
 8008dd0:	08008e63 	.word	0x08008e63
 8008dd4:	08008e77 	.word	0x08008e77
 8008dd8:	08008ec3 	.word	0x08008ec3
 8008ddc:	08008ded 	.word	0x08008ded
 8008de0:	08008ded 	.word	0x08008ded
 8008de4:	08008e63 	.word	0x08008e63
 8008de8:	08008e77 	.word	0x08008e77
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008df2:	f043 0301 	orr.w	r3, r3, #1
 8008df6:	b2da      	uxtb	r2, r3
 8008df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	18d1      	adds	r1, r2, r3
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e0c:	f7ff ff5c 	bl	8008cc8 <prvInsertTimerInActiveList>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d06c      	beq.n	8008ef0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e18:	6a1b      	ldr	r3, [r3, #32]
 8008e1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e24:	f003 0304 	and.w	r3, r3, #4
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d061      	beq.n	8008ef0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008e2c:	68ba      	ldr	r2, [r7, #8]
 8008e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	441a      	add	r2, r3
 8008e34:	2300      	movs	r3, #0
 8008e36:	9300      	str	r3, [sp, #0]
 8008e38:	2300      	movs	r3, #0
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e3e:	f7ff fe01 	bl	8008a44 <xTimerGenericCommand>
 8008e42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008e44:	6a3b      	ldr	r3, [r7, #32]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d152      	bne.n	8008ef0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e4e:	f383 8811 	msr	BASEPRI, r3
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	61bb      	str	r3, [r7, #24]
}
 8008e5c:	bf00      	nop
 8008e5e:	bf00      	nop
 8008e60:	e7fd      	b.n	8008e5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e68:	f023 0301 	bic.w	r3, r3, #1
 8008e6c:	b2da      	uxtb	r2, r3
 8008e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008e74:	e03d      	b.n	8008ef2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e7c:	f043 0301 	orr.w	r3, r3, #1
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10b      	bne.n	8008eae <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e9a:	f383 8811 	msr	BASEPRI, r3
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	617b      	str	r3, [r7, #20]
}
 8008ea8:	bf00      	nop
 8008eaa:	bf00      	nop
 8008eac:	e7fd      	b.n	8008eaa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb0:	699a      	ldr	r2, [r3, #24]
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb4:	18d1      	adds	r1, r2, r3
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008eba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ebc:	f7ff ff04 	bl	8008cc8 <prvInsertTimerInActiveList>
					break;
 8008ec0:	e017      	b.n	8008ef2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ec8:	f003 0302 	and.w	r3, r3, #2
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d103      	bne.n	8008ed8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008ed0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ed2:	f000 fc31 	bl	8009738 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008ed6:	e00c      	b.n	8008ef2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ede:	f023 0301 	bic.w	r3, r3, #1
 8008ee2:	b2da      	uxtb	r2, r3
 8008ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008eea:	e002      	b.n	8008ef2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008eec:	bf00      	nop
 8008eee:	e000      	b.n	8008ef2 <prvProcessReceivedCommands+0x1a6>
					break;
 8008ef0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ef2:	4b08      	ldr	r3, [pc, #32]	@ (8008f14 <prvProcessReceivedCommands+0x1c8>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	1d39      	adds	r1, r7, #4
 8008ef8:	2200      	movs	r2, #0
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7fd fe62 	bl	8006bc4 <xQueueReceive>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	f47f af26 	bne.w	8008d54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008f08:	bf00      	nop
 8008f0a:	bf00      	nop
 8008f0c:	3730      	adds	r7, #48	@ 0x30
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	2000141c 	.word	0x2000141c

08008f18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b088      	sub	sp, #32
 8008f1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f1e:	e049      	b.n	8008fb4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f20:	4b2e      	ldr	r3, [pc, #184]	@ (8008fdc <prvSwitchTimerLists+0xc4>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8008fdc <prvSwitchTimerLists+0xc4>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	3304      	adds	r3, #4
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7fd f97d 	bl	8006238 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f4c:	f003 0304 	and.w	r3, r3, #4
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d02f      	beq.n	8008fb4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d90e      	bls.n	8008f84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f72:	4b1a      	ldr	r3, [pc, #104]	@ (8008fdc <prvSwitchTimerLists+0xc4>)
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	3304      	adds	r3, #4
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	4610      	mov	r0, r2
 8008f7e:	f7fd f922 	bl	80061c6 <vListInsert>
 8008f82:	e017      	b.n	8008fb4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f84:	2300      	movs	r3, #0
 8008f86:	9300      	str	r3, [sp, #0]
 8008f88:	2300      	movs	r3, #0
 8008f8a:	693a      	ldr	r2, [r7, #16]
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f7ff fd58 	bl	8008a44 <xTimerGenericCommand>
 8008f94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d10b      	bne.n	8008fb4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa0:	f383 8811 	msr	BASEPRI, r3
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	603b      	str	r3, [r7, #0]
}
 8008fae:	bf00      	nop
 8008fb0:	bf00      	nop
 8008fb2:	e7fd      	b.n	8008fb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008fb4:	4b09      	ldr	r3, [pc, #36]	@ (8008fdc <prvSwitchTimerLists+0xc4>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1b0      	bne.n	8008f20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008fbe:	4b07      	ldr	r3, [pc, #28]	@ (8008fdc <prvSwitchTimerLists+0xc4>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008fc4:	4b06      	ldr	r3, [pc, #24]	@ (8008fe0 <prvSwitchTimerLists+0xc8>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a04      	ldr	r2, [pc, #16]	@ (8008fdc <prvSwitchTimerLists+0xc4>)
 8008fca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008fcc:	4a04      	ldr	r2, [pc, #16]	@ (8008fe0 <prvSwitchTimerLists+0xc8>)
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	6013      	str	r3, [r2, #0]
}
 8008fd2:	bf00      	nop
 8008fd4:	3718      	adds	r7, #24
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	20001414 	.word	0x20001414
 8008fe0:	20001418 	.word	0x20001418

08008fe4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008fea:	f000 f9b5 	bl	8009358 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008fee:	4b15      	ldr	r3, [pc, #84]	@ (8009044 <prvCheckForValidListAndQueue+0x60>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d120      	bne.n	8009038 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008ff6:	4814      	ldr	r0, [pc, #80]	@ (8009048 <prvCheckForValidListAndQueue+0x64>)
 8008ff8:	f7fd f894 	bl	8006124 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008ffc:	4813      	ldr	r0, [pc, #76]	@ (800904c <prvCheckForValidListAndQueue+0x68>)
 8008ffe:	f7fd f891 	bl	8006124 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009002:	4b13      	ldr	r3, [pc, #76]	@ (8009050 <prvCheckForValidListAndQueue+0x6c>)
 8009004:	4a10      	ldr	r2, [pc, #64]	@ (8009048 <prvCheckForValidListAndQueue+0x64>)
 8009006:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009008:	4b12      	ldr	r3, [pc, #72]	@ (8009054 <prvCheckForValidListAndQueue+0x70>)
 800900a:	4a10      	ldr	r2, [pc, #64]	@ (800904c <prvCheckForValidListAndQueue+0x68>)
 800900c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800900e:	2300      	movs	r3, #0
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	4b11      	ldr	r3, [pc, #68]	@ (8009058 <prvCheckForValidListAndQueue+0x74>)
 8009014:	4a11      	ldr	r2, [pc, #68]	@ (800905c <prvCheckForValidListAndQueue+0x78>)
 8009016:	2110      	movs	r1, #16
 8009018:	200a      	movs	r0, #10
 800901a:	f7fd f9a1 	bl	8006360 <xQueueGenericCreateStatic>
 800901e:	4603      	mov	r3, r0
 8009020:	4a08      	ldr	r2, [pc, #32]	@ (8009044 <prvCheckForValidListAndQueue+0x60>)
 8009022:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009024:	4b07      	ldr	r3, [pc, #28]	@ (8009044 <prvCheckForValidListAndQueue+0x60>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d005      	beq.n	8009038 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800902c:	4b05      	ldr	r3, [pc, #20]	@ (8009044 <prvCheckForValidListAndQueue+0x60>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	490b      	ldr	r1, [pc, #44]	@ (8009060 <prvCheckForValidListAndQueue+0x7c>)
 8009032:	4618      	mov	r0, r3
 8009034:	f7fe f986 	bl	8007344 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009038:	f000 f9c0 	bl	80093bc <vPortExitCritical>
}
 800903c:	bf00      	nop
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	2000141c 	.word	0x2000141c
 8009048:	200013ec 	.word	0x200013ec
 800904c:	20001400 	.word	0x20001400
 8009050:	20001414 	.word	0x20001414
 8009054:	20001418 	.word	0x20001418
 8009058:	200014c8 	.word	0x200014c8
 800905c:	20001428 	.word	0x20001428
 8009060:	08009a84 	.word	0x08009a84

08009064 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d10b      	bne.n	800908e <xTimerIsTimerActive+0x2a>
	__asm volatile
 8009076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800907a:	f383 8811 	msr	BASEPRI, r3
 800907e:	f3bf 8f6f 	isb	sy
 8009082:	f3bf 8f4f 	dsb	sy
 8009086:	60fb      	str	r3, [r7, #12]
}
 8009088:	bf00      	nop
 800908a:	bf00      	nop
 800908c:	e7fd      	b.n	800908a <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800908e:	f000 f963 	bl	8009358 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009098:	f003 0301 	and.w	r3, r3, #1
 800909c:	2b00      	cmp	r3, #0
 800909e:	d102      	bne.n	80090a6 <xTimerIsTimerActive+0x42>
		{
			xReturn = pdFALSE;
 80090a0:	2300      	movs	r3, #0
 80090a2:	617b      	str	r3, [r7, #20]
 80090a4:	e001      	b.n	80090aa <xTimerIsTimerActive+0x46>
		}
		else
		{
			xReturn = pdTRUE;
 80090a6:	2301      	movs	r3, #1
 80090a8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80090aa:	f000 f987 	bl	80093bc <vPortExitCritical>

	return xReturn;
 80090ae:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 80090b0:	4618      	mov	r0, r3
 80090b2:	3718      	adds	r7, #24
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b086      	sub	sp, #24
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10b      	bne.n	80090e2 <pvTimerGetTimerID+0x2a>
	__asm volatile
 80090ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	60fb      	str	r3, [r7, #12]
}
 80090dc:	bf00      	nop
 80090de:	bf00      	nop
 80090e0:	e7fd      	b.n	80090de <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80090e2:	f000 f939 	bl	8009358 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	69db      	ldr	r3, [r3, #28]
 80090ea:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80090ec:	f000 f966 	bl	80093bc <vPortExitCritical>

	return pvReturn;
 80090f0:	693b      	ldr	r3, [r7, #16]
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3718      	adds	r7, #24
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
	...

080090fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	3b04      	subs	r3, #4
 800910c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	3b04      	subs	r3, #4
 800911a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	f023 0201 	bic.w	r2, r3, #1
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	3b04      	subs	r3, #4
 800912a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800912c:	4a0c      	ldr	r2, [pc, #48]	@ (8009160 <pxPortInitialiseStack+0x64>)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	3b14      	subs	r3, #20
 8009136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	3b04      	subs	r3, #4
 8009142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f06f 0202 	mvn.w	r2, #2
 800914a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	3b20      	subs	r3, #32
 8009150:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009152:	68fb      	ldr	r3, [r7, #12]
}
 8009154:	4618      	mov	r0, r3
 8009156:	3714      	adds	r7, #20
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr
 8009160:	08009165 	.word	0x08009165

08009164 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009164:	b480      	push	{r7}
 8009166:	b085      	sub	sp, #20
 8009168:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800916a:	2300      	movs	r3, #0
 800916c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800916e:	4b13      	ldr	r3, [pc, #76]	@ (80091bc <prvTaskExitError+0x58>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009176:	d00b      	beq.n	8009190 <prvTaskExitError+0x2c>
	__asm volatile
 8009178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800917c:	f383 8811 	msr	BASEPRI, r3
 8009180:	f3bf 8f6f 	isb	sy
 8009184:	f3bf 8f4f 	dsb	sy
 8009188:	60fb      	str	r3, [r7, #12]
}
 800918a:	bf00      	nop
 800918c:	bf00      	nop
 800918e:	e7fd      	b.n	800918c <prvTaskExitError+0x28>
	__asm volatile
 8009190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009194:	f383 8811 	msr	BASEPRI, r3
 8009198:	f3bf 8f6f 	isb	sy
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	60bb      	str	r3, [r7, #8]
}
 80091a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80091a4:	bf00      	nop
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d0fc      	beq.n	80091a6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80091ac:	bf00      	nop
 80091ae:	bf00      	nop
 80091b0:	3714      	adds	r7, #20
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	2000000c 	.word	0x2000000c

080091c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80091c0:	4b07      	ldr	r3, [pc, #28]	@ (80091e0 <pxCurrentTCBConst2>)
 80091c2:	6819      	ldr	r1, [r3, #0]
 80091c4:	6808      	ldr	r0, [r1, #0]
 80091c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ca:	f380 8809 	msr	PSP, r0
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f04f 0000 	mov.w	r0, #0
 80091d6:	f380 8811 	msr	BASEPRI, r0
 80091da:	4770      	bx	lr
 80091dc:	f3af 8000 	nop.w

080091e0 <pxCurrentTCBConst2>:
 80091e0:	20000eec 	.word	0x20000eec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80091e4:	bf00      	nop
 80091e6:	bf00      	nop

080091e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80091e8:	4808      	ldr	r0, [pc, #32]	@ (800920c <prvPortStartFirstTask+0x24>)
 80091ea:	6800      	ldr	r0, [r0, #0]
 80091ec:	6800      	ldr	r0, [r0, #0]
 80091ee:	f380 8808 	msr	MSP, r0
 80091f2:	f04f 0000 	mov.w	r0, #0
 80091f6:	f380 8814 	msr	CONTROL, r0
 80091fa:	b662      	cpsie	i
 80091fc:	b661      	cpsie	f
 80091fe:	f3bf 8f4f 	dsb	sy
 8009202:	f3bf 8f6f 	isb	sy
 8009206:	df00      	svc	0
 8009208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800920a:	bf00      	nop
 800920c:	e000ed08 	.word	0xe000ed08

08009210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b086      	sub	sp, #24
 8009214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009216:	4b47      	ldr	r3, [pc, #284]	@ (8009334 <xPortStartScheduler+0x124>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a47      	ldr	r2, [pc, #284]	@ (8009338 <xPortStartScheduler+0x128>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d10b      	bne.n	8009238 <xPortStartScheduler+0x28>
	__asm volatile
 8009220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	613b      	str	r3, [r7, #16]
}
 8009232:	bf00      	nop
 8009234:	bf00      	nop
 8009236:	e7fd      	b.n	8009234 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009238:	4b3e      	ldr	r3, [pc, #248]	@ (8009334 <xPortStartScheduler+0x124>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a3f      	ldr	r2, [pc, #252]	@ (800933c <xPortStartScheduler+0x12c>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d10b      	bne.n	800925a <xPortStartScheduler+0x4a>
	__asm volatile
 8009242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009246:	f383 8811 	msr	BASEPRI, r3
 800924a:	f3bf 8f6f 	isb	sy
 800924e:	f3bf 8f4f 	dsb	sy
 8009252:	60fb      	str	r3, [r7, #12]
}
 8009254:	bf00      	nop
 8009256:	bf00      	nop
 8009258:	e7fd      	b.n	8009256 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800925a:	4b39      	ldr	r3, [pc, #228]	@ (8009340 <xPortStartScheduler+0x130>)
 800925c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	b2db      	uxtb	r3, r3
 8009264:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	22ff      	movs	r2, #255	@ 0xff
 800926a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	b2db      	uxtb	r3, r3
 8009272:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009274:	78fb      	ldrb	r3, [r7, #3]
 8009276:	b2db      	uxtb	r3, r3
 8009278:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800927c:	b2da      	uxtb	r2, r3
 800927e:	4b31      	ldr	r3, [pc, #196]	@ (8009344 <xPortStartScheduler+0x134>)
 8009280:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009282:	4b31      	ldr	r3, [pc, #196]	@ (8009348 <xPortStartScheduler+0x138>)
 8009284:	2207      	movs	r2, #7
 8009286:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009288:	e009      	b.n	800929e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800928a:	4b2f      	ldr	r3, [pc, #188]	@ (8009348 <xPortStartScheduler+0x138>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	3b01      	subs	r3, #1
 8009290:	4a2d      	ldr	r2, [pc, #180]	@ (8009348 <xPortStartScheduler+0x138>)
 8009292:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009294:	78fb      	ldrb	r3, [r7, #3]
 8009296:	b2db      	uxtb	r3, r3
 8009298:	005b      	lsls	r3, r3, #1
 800929a:	b2db      	uxtb	r3, r3
 800929c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800929e:	78fb      	ldrb	r3, [r7, #3]
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092a6:	2b80      	cmp	r3, #128	@ 0x80
 80092a8:	d0ef      	beq.n	800928a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80092aa:	4b27      	ldr	r3, [pc, #156]	@ (8009348 <xPortStartScheduler+0x138>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f1c3 0307 	rsb	r3, r3, #7
 80092b2:	2b04      	cmp	r3, #4
 80092b4:	d00b      	beq.n	80092ce <xPortStartScheduler+0xbe>
	__asm volatile
 80092b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ba:	f383 8811 	msr	BASEPRI, r3
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	60bb      	str	r3, [r7, #8]
}
 80092c8:	bf00      	nop
 80092ca:	bf00      	nop
 80092cc:	e7fd      	b.n	80092ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80092ce:	4b1e      	ldr	r3, [pc, #120]	@ (8009348 <xPortStartScheduler+0x138>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	021b      	lsls	r3, r3, #8
 80092d4:	4a1c      	ldr	r2, [pc, #112]	@ (8009348 <xPortStartScheduler+0x138>)
 80092d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80092d8:	4b1b      	ldr	r3, [pc, #108]	@ (8009348 <xPortStartScheduler+0x138>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80092e0:	4a19      	ldr	r2, [pc, #100]	@ (8009348 <xPortStartScheduler+0x138>)
 80092e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	b2da      	uxtb	r2, r3
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80092ec:	4b17      	ldr	r3, [pc, #92]	@ (800934c <xPortStartScheduler+0x13c>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a16      	ldr	r2, [pc, #88]	@ (800934c <xPortStartScheduler+0x13c>)
 80092f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80092f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80092f8:	4b14      	ldr	r3, [pc, #80]	@ (800934c <xPortStartScheduler+0x13c>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a13      	ldr	r2, [pc, #76]	@ (800934c <xPortStartScheduler+0x13c>)
 80092fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009302:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009304:	f000 f8da 	bl	80094bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009308:	4b11      	ldr	r3, [pc, #68]	@ (8009350 <xPortStartScheduler+0x140>)
 800930a:	2200      	movs	r2, #0
 800930c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800930e:	f000 f8f9 	bl	8009504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009312:	4b10      	ldr	r3, [pc, #64]	@ (8009354 <xPortStartScheduler+0x144>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a0f      	ldr	r2, [pc, #60]	@ (8009354 <xPortStartScheduler+0x144>)
 8009318:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800931c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800931e:	f7ff ff63 	bl	80091e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009322:	f7fe fc51 	bl	8007bc8 <vTaskSwitchContext>
	prvTaskExitError();
 8009326:	f7ff ff1d 	bl	8009164 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3718      	adds	r7, #24
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	e000ed00 	.word	0xe000ed00
 8009338:	410fc271 	.word	0x410fc271
 800933c:	410fc270 	.word	0x410fc270
 8009340:	e000e400 	.word	0xe000e400
 8009344:	20001518 	.word	0x20001518
 8009348:	2000151c 	.word	0x2000151c
 800934c:	e000ed20 	.word	0xe000ed20
 8009350:	2000000c 	.word	0x2000000c
 8009354:	e000ef34 	.word	0xe000ef34

08009358 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
	__asm volatile
 800935e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009362:	f383 8811 	msr	BASEPRI, r3
 8009366:	f3bf 8f6f 	isb	sy
 800936a:	f3bf 8f4f 	dsb	sy
 800936e:	607b      	str	r3, [r7, #4]
}
 8009370:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009372:	4b10      	ldr	r3, [pc, #64]	@ (80093b4 <vPortEnterCritical+0x5c>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	3301      	adds	r3, #1
 8009378:	4a0e      	ldr	r2, [pc, #56]	@ (80093b4 <vPortEnterCritical+0x5c>)
 800937a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800937c:	4b0d      	ldr	r3, [pc, #52]	@ (80093b4 <vPortEnterCritical+0x5c>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2b01      	cmp	r3, #1
 8009382:	d110      	bne.n	80093a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009384:	4b0c      	ldr	r3, [pc, #48]	@ (80093b8 <vPortEnterCritical+0x60>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	b2db      	uxtb	r3, r3
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00b      	beq.n	80093a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800938e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	603b      	str	r3, [r7, #0]
}
 80093a0:	bf00      	nop
 80093a2:	bf00      	nop
 80093a4:	e7fd      	b.n	80093a2 <vPortEnterCritical+0x4a>
	}
}
 80093a6:	bf00      	nop
 80093a8:	370c      	adds	r7, #12
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	2000000c 	.word	0x2000000c
 80093b8:	e000ed04 	.word	0xe000ed04

080093bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80093c2:	4b12      	ldr	r3, [pc, #72]	@ (800940c <vPortExitCritical+0x50>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d10b      	bne.n	80093e2 <vPortExitCritical+0x26>
	__asm volatile
 80093ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ce:	f383 8811 	msr	BASEPRI, r3
 80093d2:	f3bf 8f6f 	isb	sy
 80093d6:	f3bf 8f4f 	dsb	sy
 80093da:	607b      	str	r3, [r7, #4]
}
 80093dc:	bf00      	nop
 80093de:	bf00      	nop
 80093e0:	e7fd      	b.n	80093de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80093e2:	4b0a      	ldr	r3, [pc, #40]	@ (800940c <vPortExitCritical+0x50>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	3b01      	subs	r3, #1
 80093e8:	4a08      	ldr	r2, [pc, #32]	@ (800940c <vPortExitCritical+0x50>)
 80093ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80093ec:	4b07      	ldr	r3, [pc, #28]	@ (800940c <vPortExitCritical+0x50>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d105      	bne.n	8009400 <vPortExitCritical+0x44>
 80093f4:	2300      	movs	r3, #0
 80093f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	f383 8811 	msr	BASEPRI, r3
}
 80093fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr
 800940c:	2000000c 	.word	0x2000000c

08009410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009410:	f3ef 8009 	mrs	r0, PSP
 8009414:	f3bf 8f6f 	isb	sy
 8009418:	4b15      	ldr	r3, [pc, #84]	@ (8009470 <pxCurrentTCBConst>)
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	f01e 0f10 	tst.w	lr, #16
 8009420:	bf08      	it	eq
 8009422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942a:	6010      	str	r0, [r2, #0]
 800942c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009430:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009434:	f380 8811 	msr	BASEPRI, r0
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	f3bf 8f6f 	isb	sy
 8009440:	f7fe fbc2 	bl	8007bc8 <vTaskSwitchContext>
 8009444:	f04f 0000 	mov.w	r0, #0
 8009448:	f380 8811 	msr	BASEPRI, r0
 800944c:	bc09      	pop	{r0, r3}
 800944e:	6819      	ldr	r1, [r3, #0]
 8009450:	6808      	ldr	r0, [r1, #0]
 8009452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009456:	f01e 0f10 	tst.w	lr, #16
 800945a:	bf08      	it	eq
 800945c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009460:	f380 8809 	msr	PSP, r0
 8009464:	f3bf 8f6f 	isb	sy
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	f3af 8000 	nop.w

08009470 <pxCurrentTCBConst>:
 8009470:	20000eec 	.word	0x20000eec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009474:	bf00      	nop
 8009476:	bf00      	nop

08009478 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
	__asm volatile
 800947e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	607b      	str	r3, [r7, #4]
}
 8009490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009492:	f7fe fadf 	bl	8007a54 <xTaskIncrementTick>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d003      	beq.n	80094a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800949c:	4b06      	ldr	r3, [pc, #24]	@ (80094b8 <xPortSysTickHandler+0x40>)
 800949e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094a2:	601a      	str	r2, [r3, #0]
 80094a4:	2300      	movs	r3, #0
 80094a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	f383 8811 	msr	BASEPRI, r3
}
 80094ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80094b0:	bf00      	nop
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	e000ed04 	.word	0xe000ed04

080094bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80094bc:	b480      	push	{r7}
 80094be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80094c0:	4b0b      	ldr	r3, [pc, #44]	@ (80094f0 <vPortSetupTimerInterrupt+0x34>)
 80094c2:	2200      	movs	r2, #0
 80094c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80094c6:	4b0b      	ldr	r3, [pc, #44]	@ (80094f4 <vPortSetupTimerInterrupt+0x38>)
 80094c8:	2200      	movs	r2, #0
 80094ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80094cc:	4b0a      	ldr	r3, [pc, #40]	@ (80094f8 <vPortSetupTimerInterrupt+0x3c>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a0a      	ldr	r2, [pc, #40]	@ (80094fc <vPortSetupTimerInterrupt+0x40>)
 80094d2:	fba2 2303 	umull	r2, r3, r2, r3
 80094d6:	099b      	lsrs	r3, r3, #6
 80094d8:	4a09      	ldr	r2, [pc, #36]	@ (8009500 <vPortSetupTimerInterrupt+0x44>)
 80094da:	3b01      	subs	r3, #1
 80094dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80094de:	4b04      	ldr	r3, [pc, #16]	@ (80094f0 <vPortSetupTimerInterrupt+0x34>)
 80094e0:	2207      	movs	r2, #7
 80094e2:	601a      	str	r2, [r3, #0]
}
 80094e4:	bf00      	nop
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	e000e010 	.word	0xe000e010
 80094f4:	e000e018 	.word	0xe000e018
 80094f8:	20000000 	.word	0x20000000
 80094fc:	10624dd3 	.word	0x10624dd3
 8009500:	e000e014 	.word	0xe000e014

08009504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009504:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009514 <vPortEnableVFP+0x10>
 8009508:	6801      	ldr	r1, [r0, #0]
 800950a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800950e:	6001      	str	r1, [r0, #0]
 8009510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009512:	bf00      	nop
 8009514:	e000ed88 	.word	0xe000ed88

08009518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800951e:	f3ef 8305 	mrs	r3, IPSR
 8009522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2b0f      	cmp	r3, #15
 8009528:	d915      	bls.n	8009556 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800952a:	4a18      	ldr	r2, [pc, #96]	@ (800958c <vPortValidateInterruptPriority+0x74>)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	4413      	add	r3, r2
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009534:	4b16      	ldr	r3, [pc, #88]	@ (8009590 <vPortValidateInterruptPriority+0x78>)
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	7afa      	ldrb	r2, [r7, #11]
 800953a:	429a      	cmp	r2, r3
 800953c:	d20b      	bcs.n	8009556 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800953e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009542:	f383 8811 	msr	BASEPRI, r3
 8009546:	f3bf 8f6f 	isb	sy
 800954a:	f3bf 8f4f 	dsb	sy
 800954e:	607b      	str	r3, [r7, #4]
}
 8009550:	bf00      	nop
 8009552:	bf00      	nop
 8009554:	e7fd      	b.n	8009552 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009556:	4b0f      	ldr	r3, [pc, #60]	@ (8009594 <vPortValidateInterruptPriority+0x7c>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800955e:	4b0e      	ldr	r3, [pc, #56]	@ (8009598 <vPortValidateInterruptPriority+0x80>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	429a      	cmp	r2, r3
 8009564:	d90b      	bls.n	800957e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800956a:	f383 8811 	msr	BASEPRI, r3
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	603b      	str	r3, [r7, #0]
}
 8009578:	bf00      	nop
 800957a:	bf00      	nop
 800957c:	e7fd      	b.n	800957a <vPortValidateInterruptPriority+0x62>
	}
 800957e:	bf00      	nop
 8009580:	3714      	adds	r7, #20
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	e000e3f0 	.word	0xe000e3f0
 8009590:	20001518 	.word	0x20001518
 8009594:	e000ed0c 	.word	0xe000ed0c
 8009598:	2000151c 	.word	0x2000151c

0800959c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b08a      	sub	sp, #40	@ 0x28
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80095a4:	2300      	movs	r3, #0
 80095a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80095a8:	f7fe f998 	bl	80078dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80095ac:	4b5c      	ldr	r3, [pc, #368]	@ (8009720 <pvPortMalloc+0x184>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d101      	bne.n	80095b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80095b4:	f000 f924 	bl	8009800 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80095b8:	4b5a      	ldr	r3, [pc, #360]	@ (8009724 <pvPortMalloc+0x188>)
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4013      	ands	r3, r2
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f040 8095 	bne.w	80096f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d01e      	beq.n	800960a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80095cc:	2208      	movs	r2, #8
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4413      	add	r3, r2
 80095d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f003 0307 	and.w	r3, r3, #7
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d015      	beq.n	800960a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f023 0307 	bic.w	r3, r3, #7
 80095e4:	3308      	adds	r3, #8
 80095e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f003 0307 	and.w	r3, r3, #7
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00b      	beq.n	800960a <pvPortMalloc+0x6e>
	__asm volatile
 80095f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095f6:	f383 8811 	msr	BASEPRI, r3
 80095fa:	f3bf 8f6f 	isb	sy
 80095fe:	f3bf 8f4f 	dsb	sy
 8009602:	617b      	str	r3, [r7, #20]
}
 8009604:	bf00      	nop
 8009606:	bf00      	nop
 8009608:	e7fd      	b.n	8009606 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d06f      	beq.n	80096f0 <pvPortMalloc+0x154>
 8009610:	4b45      	ldr	r3, [pc, #276]	@ (8009728 <pvPortMalloc+0x18c>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	429a      	cmp	r2, r3
 8009618:	d86a      	bhi.n	80096f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800961a:	4b44      	ldr	r3, [pc, #272]	@ (800972c <pvPortMalloc+0x190>)
 800961c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800961e:	4b43      	ldr	r3, [pc, #268]	@ (800972c <pvPortMalloc+0x190>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009624:	e004      	b.n	8009630 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009628:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800962a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	429a      	cmp	r2, r3
 8009638:	d903      	bls.n	8009642 <pvPortMalloc+0xa6>
 800963a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1f1      	bne.n	8009626 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009642:	4b37      	ldr	r3, [pc, #220]	@ (8009720 <pvPortMalloc+0x184>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009648:	429a      	cmp	r2, r3
 800964a:	d051      	beq.n	80096f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800964c:	6a3b      	ldr	r3, [r7, #32]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2208      	movs	r2, #8
 8009652:	4413      	add	r3, r2
 8009654:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	6a3b      	ldr	r3, [r7, #32]
 800965c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800965e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009660:	685a      	ldr	r2, [r3, #4]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	1ad2      	subs	r2, r2, r3
 8009666:	2308      	movs	r3, #8
 8009668:	005b      	lsls	r3, r3, #1
 800966a:	429a      	cmp	r2, r3
 800966c:	d920      	bls.n	80096b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800966e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4413      	add	r3, r2
 8009674:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	f003 0307 	and.w	r3, r3, #7
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00b      	beq.n	8009698 <pvPortMalloc+0xfc>
	__asm volatile
 8009680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009684:	f383 8811 	msr	BASEPRI, r3
 8009688:	f3bf 8f6f 	isb	sy
 800968c:	f3bf 8f4f 	dsb	sy
 8009690:	613b      	str	r3, [r7, #16]
}
 8009692:	bf00      	nop
 8009694:	bf00      	nop
 8009696:	e7fd      	b.n	8009694 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969a:	685a      	ldr	r2, [r3, #4]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	1ad2      	subs	r2, r2, r3
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80096a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80096aa:	69b8      	ldr	r0, [r7, #24]
 80096ac:	f000 f90a 	bl	80098c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80096b0:	4b1d      	ldr	r3, [pc, #116]	@ (8009728 <pvPortMalloc+0x18c>)
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	1ad3      	subs	r3, r2, r3
 80096ba:	4a1b      	ldr	r2, [pc, #108]	@ (8009728 <pvPortMalloc+0x18c>)
 80096bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80096be:	4b1a      	ldr	r3, [pc, #104]	@ (8009728 <pvPortMalloc+0x18c>)
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	4b1b      	ldr	r3, [pc, #108]	@ (8009730 <pvPortMalloc+0x194>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d203      	bcs.n	80096d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80096ca:	4b17      	ldr	r3, [pc, #92]	@ (8009728 <pvPortMalloc+0x18c>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a18      	ldr	r2, [pc, #96]	@ (8009730 <pvPortMalloc+0x194>)
 80096d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80096d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d4:	685a      	ldr	r2, [r3, #4]
 80096d6:	4b13      	ldr	r3, [pc, #76]	@ (8009724 <pvPortMalloc+0x188>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	431a      	orrs	r2, r3
 80096dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80096e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e2:	2200      	movs	r2, #0
 80096e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80096e6:	4b13      	ldr	r3, [pc, #76]	@ (8009734 <pvPortMalloc+0x198>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	3301      	adds	r3, #1
 80096ec:	4a11      	ldr	r2, [pc, #68]	@ (8009734 <pvPortMalloc+0x198>)
 80096ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80096f0:	f7fe f902 	bl	80078f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	f003 0307 	and.w	r3, r3, #7
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00b      	beq.n	8009716 <pvPortMalloc+0x17a>
	__asm volatile
 80096fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009702:	f383 8811 	msr	BASEPRI, r3
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	60fb      	str	r3, [r7, #12]
}
 8009710:	bf00      	nop
 8009712:	bf00      	nop
 8009714:	e7fd      	b.n	8009712 <pvPortMalloc+0x176>
	return pvReturn;
 8009716:	69fb      	ldr	r3, [r7, #28]
}
 8009718:	4618      	mov	r0, r3
 800971a:	3728      	adds	r7, #40	@ 0x28
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	200020e0 	.word	0x200020e0
 8009724:	200020f4 	.word	0x200020f4
 8009728:	200020e4 	.word	0x200020e4
 800972c:	200020d8 	.word	0x200020d8
 8009730:	200020e8 	.word	0x200020e8
 8009734:	200020ec 	.word	0x200020ec

08009738 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d04f      	beq.n	80097ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800974a:	2308      	movs	r3, #8
 800974c:	425b      	negs	r3, r3
 800974e:	697a      	ldr	r2, [r7, #20]
 8009750:	4413      	add	r3, r2
 8009752:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	685a      	ldr	r2, [r3, #4]
 800975c:	4b25      	ldr	r3, [pc, #148]	@ (80097f4 <vPortFree+0xbc>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4013      	ands	r3, r2
 8009762:	2b00      	cmp	r3, #0
 8009764:	d10b      	bne.n	800977e <vPortFree+0x46>
	__asm volatile
 8009766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800976a:	f383 8811 	msr	BASEPRI, r3
 800976e:	f3bf 8f6f 	isb	sy
 8009772:	f3bf 8f4f 	dsb	sy
 8009776:	60fb      	str	r3, [r7, #12]
}
 8009778:	bf00      	nop
 800977a:	bf00      	nop
 800977c:	e7fd      	b.n	800977a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00b      	beq.n	800979e <vPortFree+0x66>
	__asm volatile
 8009786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800978a:	f383 8811 	msr	BASEPRI, r3
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	60bb      	str	r3, [r7, #8]
}
 8009798:	bf00      	nop
 800979a:	bf00      	nop
 800979c:	e7fd      	b.n	800979a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	685a      	ldr	r2, [r3, #4]
 80097a2:	4b14      	ldr	r3, [pc, #80]	@ (80097f4 <vPortFree+0xbc>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4013      	ands	r3, r2
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d01e      	beq.n	80097ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d11a      	bne.n	80097ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	685a      	ldr	r2, [r3, #4]
 80097b8:	4b0e      	ldr	r3, [pc, #56]	@ (80097f4 <vPortFree+0xbc>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	43db      	mvns	r3, r3
 80097be:	401a      	ands	r2, r3
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80097c4:	f7fe f88a 	bl	80078dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	4b0a      	ldr	r3, [pc, #40]	@ (80097f8 <vPortFree+0xc0>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4413      	add	r3, r2
 80097d2:	4a09      	ldr	r2, [pc, #36]	@ (80097f8 <vPortFree+0xc0>)
 80097d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80097d6:	6938      	ldr	r0, [r7, #16]
 80097d8:	f000 f874 	bl	80098c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80097dc:	4b07      	ldr	r3, [pc, #28]	@ (80097fc <vPortFree+0xc4>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	3301      	adds	r3, #1
 80097e2:	4a06      	ldr	r2, [pc, #24]	@ (80097fc <vPortFree+0xc4>)
 80097e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80097e6:	f7fe f887 	bl	80078f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80097ea:	bf00      	nop
 80097ec:	3718      	adds	r7, #24
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	200020f4 	.word	0x200020f4
 80097f8:	200020e4 	.word	0x200020e4
 80097fc:	200020f0 	.word	0x200020f0

08009800 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009806:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800980a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800980c:	4b27      	ldr	r3, [pc, #156]	@ (80098ac <prvHeapInit+0xac>)
 800980e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f003 0307 	and.w	r3, r3, #7
 8009816:	2b00      	cmp	r3, #0
 8009818:	d00c      	beq.n	8009834 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	3307      	adds	r3, #7
 800981e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f023 0307 	bic.w	r3, r3, #7
 8009826:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009828:	68ba      	ldr	r2, [r7, #8]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	1ad3      	subs	r3, r2, r3
 800982e:	4a1f      	ldr	r2, [pc, #124]	@ (80098ac <prvHeapInit+0xac>)
 8009830:	4413      	add	r3, r2
 8009832:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009838:	4a1d      	ldr	r2, [pc, #116]	@ (80098b0 <prvHeapInit+0xb0>)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800983e:	4b1c      	ldr	r3, [pc, #112]	@ (80098b0 <prvHeapInit+0xb0>)
 8009840:	2200      	movs	r2, #0
 8009842:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	68ba      	ldr	r2, [r7, #8]
 8009848:	4413      	add	r3, r2
 800984a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800984c:	2208      	movs	r2, #8
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	1a9b      	subs	r3, r3, r2
 8009852:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f023 0307 	bic.w	r3, r3, #7
 800985a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	4a15      	ldr	r2, [pc, #84]	@ (80098b4 <prvHeapInit+0xb4>)
 8009860:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009862:	4b14      	ldr	r3, [pc, #80]	@ (80098b4 <prvHeapInit+0xb4>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2200      	movs	r2, #0
 8009868:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800986a:	4b12      	ldr	r3, [pc, #72]	@ (80098b4 <prvHeapInit+0xb4>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2200      	movs	r2, #0
 8009870:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	1ad2      	subs	r2, r2, r3
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009880:	4b0c      	ldr	r3, [pc, #48]	@ (80098b4 <prvHeapInit+0xb4>)
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	4a0a      	ldr	r2, [pc, #40]	@ (80098b8 <prvHeapInit+0xb8>)
 800988e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	4a09      	ldr	r2, [pc, #36]	@ (80098bc <prvHeapInit+0xbc>)
 8009896:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009898:	4b09      	ldr	r3, [pc, #36]	@ (80098c0 <prvHeapInit+0xc0>)
 800989a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800989e:	601a      	str	r2, [r3, #0]
}
 80098a0:	bf00      	nop
 80098a2:	3714      	adds	r7, #20
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	20001520 	.word	0x20001520
 80098b0:	200020d8 	.word	0x200020d8
 80098b4:	200020e0 	.word	0x200020e0
 80098b8:	200020e8 	.word	0x200020e8
 80098bc:	200020e4 	.word	0x200020e4
 80098c0:	200020f4 	.word	0x200020f4

080098c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80098c4:	b480      	push	{r7}
 80098c6:	b085      	sub	sp, #20
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80098cc:	4b28      	ldr	r3, [pc, #160]	@ (8009970 <prvInsertBlockIntoFreeList+0xac>)
 80098ce:	60fb      	str	r3, [r7, #12]
 80098d0:	e002      	b.n	80098d8 <prvInsertBlockIntoFreeList+0x14>
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	60fb      	str	r3, [r7, #12]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d8f7      	bhi.n	80098d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	68ba      	ldr	r2, [r7, #8]
 80098ec:	4413      	add	r3, r2
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d108      	bne.n	8009906 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	685a      	ldr	r2, [r3, #4]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	441a      	add	r2, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	441a      	add	r2, r3
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	429a      	cmp	r2, r3
 8009918:	d118      	bne.n	800994c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	4b15      	ldr	r3, [pc, #84]	@ (8009974 <prvInsertBlockIntoFreeList+0xb0>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	429a      	cmp	r2, r3
 8009924:	d00d      	beq.n	8009942 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	685a      	ldr	r2, [r3, #4]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	441a      	add	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	601a      	str	r2, [r3, #0]
 8009940:	e008      	b.n	8009954 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009942:	4b0c      	ldr	r3, [pc, #48]	@ (8009974 <prvInsertBlockIntoFreeList+0xb0>)
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	601a      	str	r2, [r3, #0]
 800994a:	e003      	b.n	8009954 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	429a      	cmp	r2, r3
 800995a:	d002      	beq.n	8009962 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009962:	bf00      	nop
 8009964:	3714      	adds	r7, #20
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	200020d8 	.word	0x200020d8
 8009974:	200020e0 	.word	0x200020e0

08009978 <memset>:
 8009978:	4402      	add	r2, r0
 800997a:	4603      	mov	r3, r0
 800997c:	4293      	cmp	r3, r2
 800997e:	d100      	bne.n	8009982 <memset+0xa>
 8009980:	4770      	bx	lr
 8009982:	f803 1b01 	strb.w	r1, [r3], #1
 8009986:	e7f9      	b.n	800997c <memset+0x4>

08009988 <__libc_init_array>:
 8009988:	b570      	push	{r4, r5, r6, lr}
 800998a:	4d0d      	ldr	r5, [pc, #52]	@ (80099c0 <__libc_init_array+0x38>)
 800998c:	4c0d      	ldr	r4, [pc, #52]	@ (80099c4 <__libc_init_array+0x3c>)
 800998e:	1b64      	subs	r4, r4, r5
 8009990:	10a4      	asrs	r4, r4, #2
 8009992:	2600      	movs	r6, #0
 8009994:	42a6      	cmp	r6, r4
 8009996:	d109      	bne.n	80099ac <__libc_init_array+0x24>
 8009998:	4d0b      	ldr	r5, [pc, #44]	@ (80099c8 <__libc_init_array+0x40>)
 800999a:	4c0c      	ldr	r4, [pc, #48]	@ (80099cc <__libc_init_array+0x44>)
 800999c:	f000 f826 	bl	80099ec <_init>
 80099a0:	1b64      	subs	r4, r4, r5
 80099a2:	10a4      	asrs	r4, r4, #2
 80099a4:	2600      	movs	r6, #0
 80099a6:	42a6      	cmp	r6, r4
 80099a8:	d105      	bne.n	80099b6 <__libc_init_array+0x2e>
 80099aa:	bd70      	pop	{r4, r5, r6, pc}
 80099ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80099b0:	4798      	blx	r3
 80099b2:	3601      	adds	r6, #1
 80099b4:	e7ee      	b.n	8009994 <__libc_init_array+0xc>
 80099b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ba:	4798      	blx	r3
 80099bc:	3601      	adds	r6, #1
 80099be:	e7f2      	b.n	80099a6 <__libc_init_array+0x1e>
 80099c0:	08009bb0 	.word	0x08009bb0
 80099c4:	08009bb0 	.word	0x08009bb0
 80099c8:	08009bb0 	.word	0x08009bb0
 80099cc:	08009bb4 	.word	0x08009bb4

080099d0 <memcpy>:
 80099d0:	440a      	add	r2, r1
 80099d2:	4291      	cmp	r1, r2
 80099d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80099d8:	d100      	bne.n	80099dc <memcpy+0xc>
 80099da:	4770      	bx	lr
 80099dc:	b510      	push	{r4, lr}
 80099de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099e6:	4291      	cmp	r1, r2
 80099e8:	d1f9      	bne.n	80099de <memcpy+0xe>
 80099ea:	bd10      	pop	{r4, pc}

080099ec <_init>:
 80099ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ee:	bf00      	nop
 80099f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099f2:	bc08      	pop	{r3}
 80099f4:	469e      	mov	lr, r3
 80099f6:	4770      	bx	lr

080099f8 <_fini>:
 80099f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fa:	bf00      	nop
 80099fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099fe:	bc08      	pop	{r3}
 8009a00:	469e      	mov	lr, r3
 8009a02:	4770      	bx	lr
