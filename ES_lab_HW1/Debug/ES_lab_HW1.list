
ES_lab_HW1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009894  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08009a24  08009a24  0000aa24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bcc  08009bcc  0000b010  2**0
                  CONTENTS
  4 .ARM          00000008  08009bcc  08009bcc  0000abcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bd4  08009bd4  0000b010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bd4  08009bd4  0000abd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009bd8  08009bd8  0000abd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08009bdc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020e8  20000010  08009bec  0000b010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020f8  08009bec  0000b0f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026510  00000000  00000000  0000b040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004907  00000000  00000000  00031550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002310  00000000  00000000  00035e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b67  00000000  00000000  00038168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049f2  00000000  00000000  00039ccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027a13  00000000  00000000  0003e6c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108318  00000000  00000000  000660d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016e3ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009828  00000000  00000000  0016e430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00177c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a0c 	.word	0x08009a0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08009a0c 	.word	0x08009a0c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f001 f8f7 	bl	80016b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f896 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 fa98 	bl	8000a00 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004d0:	f000 f8f4 	bl	80006bc <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004d4:	f000 f92a 	bl	800072c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004d8:	f000 f968 	bl	80007ac <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004dc:	f000 f98c 	bl	80007f8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004e0:	f000 fa00 	bl	80008e4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004e4:	f000 fa2e 	bl	8000944 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004e8:	f000 fa5c 	bl	80009a4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 80004ec:	f000 f9c2 	bl	8000874 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f004 ff98 	bl	8005424 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 80004f4:	4829      	ldr	r0, [pc, #164]	@ (800059c <main+0xdc>)
 80004f6:	f005 fa90 	bl	8005a1a <osMutexNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a28      	ldr	r2, [pc, #160]	@ (80005a0 <main+0xe0>)
 80004fe:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 0, &myBinarySem01_attributes);
 8000500:	4a28      	ldr	r2, [pc, #160]	@ (80005a4 <main+0xe4>)
 8000502:	2100      	movs	r1, #0
 8000504:	2001      	movs	r0, #1
 8000506:	f005 fb96 	bl	8005c36 <osSemaphoreNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a26      	ldr	r2, [pc, #152]	@ (80005a8 <main+0xe8>)
 800050e:	6013      	str	r3, [r2, #0]

  /* creation of myBinarySem02 */
  myBinarySem02Handle = osSemaphoreNew(1, 1, &myBinarySem02_attributes);
 8000510:	4a26      	ldr	r2, [pc, #152]	@ (80005ac <main+0xec>)
 8000512:	2101      	movs	r1, #1
 8000514:	2001      	movs	r0, #1
 8000516:	f005 fb8e 	bl	8005c36 <osSemaphoreNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a24      	ldr	r2, [pc, #144]	@ (80005b0 <main+0xf0>)
 800051e:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer01 */
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 8000520:	4b24      	ldr	r3, [pc, #144]	@ (80005b4 <main+0xf4>)
 8000522:	2200      	movs	r2, #0
 8000524:	2101      	movs	r1, #1
 8000526:	4824      	ldr	r0, [pc, #144]	@ (80005b8 <main+0xf8>)
 8000528:	f005 f996 	bl	8005858 <osTimerNew>
 800052c:	4603      	mov	r3, r0
 800052e:	4a23      	ldr	r2, [pc, #140]	@ (80005bc <main+0xfc>)
 8000530:	6013      	str	r3, [r2, #0]

  /* creation of ButtonTimer */
  ButtonTimerHandle = osTimerNew(TimerCallback, osTimerOnce, NULL, &ButtonTimer_attributes);
 8000532:	4b23      	ldr	r3, [pc, #140]	@ (80005c0 <main+0x100>)
 8000534:	2200      	movs	r2, #0
 8000536:	2100      	movs	r1, #0
 8000538:	4822      	ldr	r0, [pc, #136]	@ (80005c4 <main+0x104>)
 800053a:	f005 f98d 	bl	8005858 <osTimerNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a21      	ldr	r2, [pc, #132]	@ (80005c8 <main+0x108>)
 8000542:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(myTimer01Handle, 10000U);
 8000544:	4b1d      	ldr	r3, [pc, #116]	@ (80005bc <main+0xfc>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f242 7110 	movw	r1, #10000	@ 0x2710
 800054c:	4618      	mov	r0, r3
 800054e:	f005 f9ff 	bl	8005950 <osTimerStart>
//  osTimerDelete(myTimer01Handle);
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8000552:	4a1e      	ldr	r2, [pc, #120]	@ (80005cc <main+0x10c>)
 8000554:	2102      	movs	r1, #2
 8000556:	2010      	movs	r0, #16
 8000558:	f005 fc8c 	bl	8005e74 <osMessageQueueNew>
 800055c:	4603      	mov	r3, r0
 800055e:	4a1c      	ldr	r2, [pc, #112]	@ (80005d0 <main+0x110>)
 8000560:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000562:	4a1c      	ldr	r2, [pc, #112]	@ (80005d4 <main+0x114>)
 8000564:	2100      	movs	r1, #0
 8000566:	481c      	ldr	r0, [pc, #112]	@ (80005d8 <main+0x118>)
 8000568:	f004 ffa6 	bl	80054b8 <osThreadNew>
 800056c:	4603      	mov	r3, r0
 800056e:	4a1b      	ldr	r2, [pc, #108]	@ (80005dc <main+0x11c>)
 8000570:	6013      	str	r3, [r2, #0]

  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartTask01, NULL, &myTask01_attributes);
 8000572:	4a1b      	ldr	r2, [pc, #108]	@ (80005e0 <main+0x120>)
 8000574:	2100      	movs	r1, #0
 8000576:	481b      	ldr	r0, [pc, #108]	@ (80005e4 <main+0x124>)
 8000578:	f004 ff9e 	bl	80054b8 <osThreadNew>
 800057c:	4603      	mov	r3, r0
 800057e:	4a1a      	ldr	r2, [pc, #104]	@ (80005e8 <main+0x128>)
 8000580:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000582:	4a1a      	ldr	r2, [pc, #104]	@ (80005ec <main+0x12c>)
 8000584:	2100      	movs	r1, #0
 8000586:	481a      	ldr	r0, [pc, #104]	@ (80005f0 <main+0x130>)
 8000588:	f004 ff96 	bl	80054b8 <osThreadNew>
 800058c:	4603      	mov	r3, r0
 800058e:	4a19      	ldr	r2, [pc, #100]	@ (80005f4 <main+0x134>)
 8000590:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000592:	f004 ff6b 	bl	800546c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000596:	bf00      	nop
 8000598:	e7fd      	b.n	8000596 <main+0xd6>
 800059a:	bf00      	nop
 800059c:	08009b54 	.word	0x08009b54
 80005a0:	200007b8 	.word	0x200007b8
 80005a4:	08009b64 	.word	0x08009b64
 80005a8:	200007bc 	.word	0x200007bc
 80005ac:	08009b74 	.word	0x08009b74
 80005b0:	200007c0 	.word	0x200007c0
 80005b4:	08009b34 	.word	0x08009b34
 80005b8:	08000f8d 	.word	0x08000f8d
 80005bc:	200007b0 	.word	0x200007b0
 80005c0:	08009b44 	.word	0x08009b44
 80005c4:	08000fad 	.word	0x08000fad
 80005c8:	200007b4 	.word	0x200007b4
 80005cc:	08009b1c 	.word	0x08009b1c
 80005d0:	200007ac 	.word	0x200007ac
 80005d4:	08009ab0 	.word	0x08009ab0
 80005d8:	08000db5 	.word	0x08000db5
 80005dc:	200007a0 	.word	0x200007a0
 80005e0:	08009ad4 	.word	0x08009ad4
 80005e4:	08000e4d 	.word	0x08000e4d
 80005e8:	200007a4 	.word	0x200007a4
 80005ec:	08009af8 	.word	0x08009af8
 80005f0:	08000f15 	.word	0x08000f15
 80005f4:	200007a8 	.word	0x200007a8

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b096      	sub	sp, #88	@ 0x58
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	2244      	movs	r2, #68	@ 0x44
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f009 f9c6 	bl	8009998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	463b      	mov	r3, r7
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800061e:	f001 ff91 	bl	8002544 <HAL_PWREx_ControlVoltageScaling>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000628:	f000 fcd0 	bl	8000fcc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800062c:	f001 ff6c 	bl	8002508 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000630:	4b21      	ldr	r3, [pc, #132]	@ (80006b8 <SystemClock_Config+0xc0>)
 8000632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000636:	4a20      	ldr	r2, [pc, #128]	@ (80006b8 <SystemClock_Config+0xc0>)
 8000638:	f023 0318 	bic.w	r3, r3, #24
 800063c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000640:	2314      	movs	r3, #20
 8000642:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000650:	2360      	movs	r3, #96	@ 0x60
 8000652:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000658:	2301      	movs	r3, #1
 800065a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800065c:	2301      	movs	r3, #1
 800065e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000660:	2328      	movs	r3, #40	@ 0x28
 8000662:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000664:	2307      	movs	r3, #7
 8000666:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4618      	mov	r0, r3
 8000676:	f002 f887 	bl	8002788 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000680:	f000 fca4 	bl	8000fcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2303      	movs	r3, #3
 800068a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000698:	463b      	mov	r3, r7
 800069a:	2104      	movs	r1, #4
 800069c:	4618      	mov	r0, r3
 800069e:	f002 fc4f 	bl	8002f40 <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006a8:	f000 fc90 	bl	8000fcc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006ac:	f003 f956 	bl	800395c <HAL_RCCEx_EnableMSIPLLMode>
}
 80006b0:	bf00      	nop
 80006b2:	3758      	adds	r7, #88	@ 0x58
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000

080006bc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80006c0:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006c2:	4a19      	ldr	r2, [pc, #100]	@ (8000728 <MX_DFSDM1_Init+0x6c>)
 80006c4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80006c6:	4b17      	ldr	r3, [pc, #92]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006cc:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80006d2:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006d4:	2202      	movs	r2, #2
 80006d6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006de:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ea:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006f4:	2204      	movs	r2, #4
 80006f6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80006fe:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 8000700:	2201      	movs	r2, #1
 8000702:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000704:	4b07      	ldr	r3, [pc, #28]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 8000706:	2200      	movs	r2, #0
 8000708:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800070a:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 800070c:	2200      	movs	r2, #0
 800070e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	@ (8000724 <MX_DFSDM1_Init+0x68>)
 8000712:	f001 f97b 	bl	8001a0c <HAL_DFSDM_ChannelInit>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800071c:	f000 fc56 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	2000002c 	.word	0x2000002c
 8000728:	40016020 	.word	0x40016020

0800072c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000732:	4a1c      	ldr	r2, [pc, #112]	@ (80007a4 <MX_I2C2_Init+0x78>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000736:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000738:	4a1b      	ldr	r2, [pc, #108]	@ (80007a8 <MX_I2C2_Init+0x7c>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800073c:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <MX_I2C2_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000744:	2201      	movs	r2, #1
 8000746:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <MX_I2C2_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800074e:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_I2C2_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000760:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000766:	480e      	ldr	r0, [pc, #56]	@ (80007a0 <MX_I2C2_Init+0x74>)
 8000768:	f001 fc68 	bl	800203c <HAL_I2C_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000772:	f000 fc2b 	bl	8000fcc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	4809      	ldr	r0, [pc, #36]	@ (80007a0 <MX_I2C2_Init+0x74>)
 800077a:	f001 fcfa 	bl	8002172 <HAL_I2CEx_ConfigAnalogFilter>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000784:	f000 fc22 	bl	8000fcc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000788:	2100      	movs	r1, #0
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_I2C2_Init+0x74>)
 800078c:	f001 fd3c 	bl	8002208 <HAL_I2CEx_ConfigDigitalFilter>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000796:	f000 fc19 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000064 	.word	0x20000064
 80007a4:	40005800 	.word	0x40005800
 80007a8:	10d19ce4 	.word	0x10d19ce4

080007ac <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_QUADSPI_Init+0x44>)
 80007b2:	4a10      	ldr	r2, [pc, #64]	@ (80007f4 <MX_QUADSPI_Init+0x48>)
 80007b4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <MX_QUADSPI_Init+0x44>)
 80007b8:	2202      	movs	r2, #2
 80007ba:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_QUADSPI_Init+0x44>)
 80007be:	2204      	movs	r2, #4
 80007c0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <MX_QUADSPI_Init+0x44>)
 80007c4:	2210      	movs	r2, #16
 80007c6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80007c8:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_QUADSPI_Init+0x44>)
 80007ca:	2217      	movs	r2, #23
 80007cc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <MX_QUADSPI_Init+0x44>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007d4:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_QUADSPI_Init+0x44>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <MX_QUADSPI_Init+0x44>)
 80007dc:	f001 ff18 	bl	8002610 <HAL_QSPI_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80007e6:	f000 fbf1 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000b8 	.word	0x200000b8
 80007f4:	a0001000 	.word	0xa0001000

080007f8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <MX_SPI3_Init+0x74>)
 80007fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000870 <MX_SPI3_Init+0x78>)
 8000800:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000802:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <MX_SPI3_Init+0x74>)
 8000804:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000808:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800080a:	4b18      	ldr	r3, [pc, #96]	@ (800086c <MX_SPI3_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000810:	4b16      	ldr	r3, [pc, #88]	@ (800086c <MX_SPI3_Init+0x74>)
 8000812:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000816:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000818:	4b14      	ldr	r3, [pc, #80]	@ (800086c <MX_SPI3_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800081e:	4b13      	ldr	r3, [pc, #76]	@ (800086c <MX_SPI3_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000824:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_SPI3_Init+0x74>)
 8000826:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800082a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <MX_SPI3_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000832:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <MX_SPI3_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <MX_SPI3_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <MX_SPI3_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000844:	4b09      	ldr	r3, [pc, #36]	@ (800086c <MX_SPI3_Init+0x74>)
 8000846:	2207      	movs	r2, #7
 8000848:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800084a:	4b08      	ldr	r3, [pc, #32]	@ (800086c <MX_SPI3_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <MX_SPI3_Init+0x74>)
 8000852:	2208      	movs	r2, #8
 8000854:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_SPI3_Init+0x74>)
 8000858:	f003 fa62 	bl	8003d20 <HAL_SPI_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000862:	f000 fbb3 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200000fc 	.word	0x200000fc
 8000870:	40003c00 	.word	0x40003c00

08000874 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000884:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <MX_TIM6_Init+0x68>)
 8000886:	4a16      	ldr	r2, [pc, #88]	@ (80008e0 <MX_TIM6_Init+0x6c>)
 8000888:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 20000;
 800088a:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_TIM6_Init+0x68>)
 800088c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000890:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000892:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <MX_TIM6_Init+0x68>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000;
 8000898:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <MX_TIM6_Init+0x68>)
 800089a:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800089e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008a0:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_TIM6_Init+0x68>)
 80008a2:	2280      	movs	r2, #128	@ 0x80
 80008a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008a6:	480d      	ldr	r0, [pc, #52]	@ (80008dc <MX_TIM6_Init+0x68>)
 80008a8:	f003 fadd 	bl	8003e66 <HAL_TIM_Base_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80008b2:	f000 fb8b 	bl	8000fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	4619      	mov	r1, r3
 80008c2:	4806      	ldr	r0, [pc, #24]	@ (80008dc <MX_TIM6_Init+0x68>)
 80008c4:	f003 fd06 	bl	80042d4 <HAL_TIMEx_MasterConfigSynchronization>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80008ce:	f000 fb7d 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000160 	.word	0x20000160
 80008e0:	40001000 	.word	0x40001000

080008e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008e8:	4b14      	ldr	r3, [pc, #80]	@ (800093c <MX_USART1_UART_Init+0x58>)
 80008ea:	4a15      	ldr	r2, [pc, #84]	@ (8000940 <MX_USART1_UART_Init+0x5c>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ee:	4b13      	ldr	r3, [pc, #76]	@ (800093c <MX_USART1_UART_Init+0x58>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <MX_USART1_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <MX_USART1_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <MX_USART1_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_USART1_UART_Init+0x58>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <MX_USART1_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MX_USART1_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b08      	ldr	r3, [pc, #32]	@ (800093c <MX_USART1_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <MX_USART1_UART_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	@ (800093c <MX_USART1_UART_Init+0x58>)
 8000928:	f003 fd7a 	bl	8004420 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000932:	f000 fb4b 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200001ac 	.word	0x200001ac
 8000940:	40013800 	.word	0x40013800

08000944 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000948:	4b14      	ldr	r3, [pc, #80]	@ (800099c <MX_USART3_UART_Init+0x58>)
 800094a:	4a15      	ldr	r2, [pc, #84]	@ (80009a0 <MX_USART3_UART_Init+0x5c>)
 800094c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800094e:	4b13      	ldr	r3, [pc, #76]	@ (800099c <MX_USART3_UART_Init+0x58>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <MX_USART3_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <MX_USART3_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <MX_USART3_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <MX_USART3_UART_Init+0x58>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <MX_USART3_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b09      	ldr	r3, [pc, #36]	@ (800099c <MX_USART3_UART_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	@ (800099c <MX_USART3_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <MX_USART3_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_USART3_UART_Init+0x58>)
 8000988:	f003 fd4a 	bl	8004420 <HAL_UART_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000992:	f000 fb1b 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000234 	.word	0x20000234
 80009a0:	40004800 	.word	0x40004800

080009a4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009a8:	4b14      	ldr	r3, [pc, #80]	@ (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009aa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80009ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009b0:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b2:	2206      	movs	r2, #6
 80009b4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009b6:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b8:	2202      	movs	r2, #2
 80009ba:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009be:	2202      	movs	r2, #2
 80009c0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80009d4:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009da:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	@ (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e8:	f001 fc5a 	bl	80022a0 <HAL_PCD_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009f2:	f000 faeb 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200002bc 	.word	0x200002bc

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	@ 0x28
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a16:	4bbd      	ldr	r3, [pc, #756]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1a:	4abc      	ldr	r2, [pc, #752]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a1c:	f043 0310 	orr.w	r3, r3, #16
 8000a20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a22:	4bba      	ldr	r3, [pc, #744]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a26:	f003 0310 	and.w	r3, r3, #16
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	4bb7      	ldr	r3, [pc, #732]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	4ab6      	ldr	r2, [pc, #728]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a34:	f043 0304 	orr.w	r3, r3, #4
 8000a38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3a:	4bb4      	ldr	r3, [pc, #720]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	f003 0304 	and.w	r3, r3, #4
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4bb1      	ldr	r3, [pc, #708]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	4ab0      	ldr	r2, [pc, #704]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a52:	4bae      	ldr	r3, [pc, #696]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	4bab      	ldr	r3, [pc, #684]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	4aaa      	ldr	r2, [pc, #680]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a6a:	4ba8      	ldr	r3, [pc, #672]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a76:	4ba5      	ldr	r3, [pc, #660]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7a:	4aa4      	ldr	r2, [pc, #656]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a7c:	f043 0308 	orr.w	r3, r3, #8
 8000a80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a82:	4ba2      	ldr	r3, [pc, #648]	@ (8000d0c <MX_GPIO_Init+0x30c>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a86:	f003 0308 	and.w	r3, r3, #8
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000a94:	489e      	ldr	r0, [pc, #632]	@ (8000d10 <MX_GPIO_Init+0x310>)
 8000a96:	f001 fa87 	bl	8001fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000aa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa4:	f001 fa80 	bl	8001fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000aae:	4899      	ldr	r0, [pc, #612]	@ (8000d14 <MX_GPIO_Init+0x314>)
 8000ab0:	f001 fa7a 	bl	8001fa8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000aba:	4897      	ldr	r0, [pc, #604]	@ (8000d18 <MX_GPIO_Init+0x318>)
 8000abc:	f001 fa74 	bl	8001fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ac6:	4894      	ldr	r0, [pc, #592]	@ (8000d18 <MX_GPIO_Init+0x318>)
 8000ac8:	f001 fa6e 	bl	8001fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000ad2:	4892      	ldr	r0, [pc, #584]	@ (8000d1c <MX_GPIO_Init+0x31c>)
 8000ad4:	f001 fa68 	bl	8001fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2120      	movs	r1, #32
 8000adc:	488d      	ldr	r0, [pc, #564]	@ (8000d14 <MX_GPIO_Init+0x314>)
 8000ade:	f001 fa63 	bl	8001fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	488a      	ldr	r0, [pc, #552]	@ (8000d10 <MX_GPIO_Init+0x310>)
 8000ae8:	f001 fa5e 	bl	8001fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000aec:	f240 1315 	movw	r3, #277	@ 0x115
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	4882      	ldr	r0, [pc, #520]	@ (8000d10 <MX_GPIO_Init+0x310>)
 8000b06:	f001 f88d 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000b0a:	236a      	movs	r3, #106	@ 0x6a
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	487c      	ldr	r0, [pc, #496]	@ (8000d10 <MX_GPIO_Init+0x310>)
 8000b20:	f001 f880 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000b24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b2a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4878      	ldr	r0, [pc, #480]	@ (8000d1c <MX_GPIO_Init+0x31c>)
 8000b3c:	f001 f872 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000b40:	233f      	movs	r3, #63	@ 0x3f
 8000b42:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b44:	230b      	movs	r3, #11
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	4872      	ldr	r0, [pc, #456]	@ (8000d1c <MX_GPIO_Init+0x31c>)
 8000b54:	f001 f866 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b68:	2308      	movs	r3, #8
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b76:	f001 f855 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000b7a:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b96:	f001 f845 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000b9a:	2308      	movs	r3, #8
 8000b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000baa:	2301      	movs	r3, #1
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb8:	f001 f834 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000bbc:	2310      	movs	r3, #16
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bc0:	230b      	movs	r3, #11
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd2:	f001 f827 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000bd6:	23e0      	movs	r3, #224	@ 0xe0
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000be6:	2305      	movs	r3, #5
 8000be8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf4:	f001 f816 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bfc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4841      	ldr	r0, [pc, #260]	@ (8000d14 <MX_GPIO_Init+0x314>)
 8000c0e:	f001 f809 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000c12:	2302      	movs	r3, #2
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c16:	230b      	movs	r3, #11
 8000c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	483b      	ldr	r0, [pc, #236]	@ (8000d14 <MX_GPIO_Init+0x314>)
 8000c26:	f000 fffd 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000c2a:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000c2e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	4834      	ldr	r0, [pc, #208]	@ (8000d14 <MX_GPIO_Init+0x314>)
 8000c44:	f000 ffee 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000c48:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000c4c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c4e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	482e      	ldr	r0, [pc, #184]	@ (8000d18 <MX_GPIO_Init+0x318>)
 8000c60:	f000 ffe0 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000c64:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4826      	ldr	r0, [pc, #152]	@ (8000d18 <MX_GPIO_Init+0x318>)
 8000c7e:	f000 ffd1 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c82:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4820      	ldr	r0, [pc, #128]	@ (8000d1c <MX_GPIO_Init+0x31c>)
 8000c9c:	f000 ffc2 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000ca0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4819      	ldr	r0, [pc, #100]	@ (8000d1c <MX_GPIO_Init+0x31c>)
 8000cb8:	f000 ffb4 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ccc:	2305      	movs	r3, #5
 8000cce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4810      	ldr	r0, [pc, #64]	@ (8000d18 <MX_GPIO_Init+0x318>)
 8000cd8:	f000 ffa4 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000cdc:	2378      	movs	r3, #120	@ 0x78
 8000cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cec:	2307      	movs	r3, #7
 8000cee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4808      	ldr	r0, [pc, #32]	@ (8000d18 <MX_GPIO_Init+0x318>)
 8000cf8:	f000 ff94 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000cfc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d02:	2312      	movs	r3, #18
 8000d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e00a      	b.n	8000d20 <MX_GPIO_Init+0x320>
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	48001000 	.word	0x48001000
 8000d14:	48000400 	.word	0x48000400
 8000d18:	48000c00 	.word	0x48000c00
 8000d1c:	48000800 	.word	0x48000800
 8000d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d26:	2304      	movs	r3, #4
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480b      	ldr	r0, [pc, #44]	@ (8000d60 <MX_GPIO_Init+0x360>)
 8000d32:	f000 ff77 	bl	8001c24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2105      	movs	r1, #5
 8000d3a:	2017      	movs	r0, #23
 8000d3c:	f000 fe2f 	bl	800199e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d40:	2017      	movs	r0, #23
 8000d42:	f000 fe48 	bl	80019d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2105      	movs	r1, #5
 8000d4a:	2028      	movs	r0, #40	@ 0x28
 8000d4c:	f000 fe27 	bl	800199e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d50:	2028      	movs	r0, #40	@ 0x28
 8000d52:	f000 fe40 	bl	80019d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	@ 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	48000400 	.word	0x48000400

08000d64 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d74:	d115      	bne.n	8000da2 <HAL_GPIO_EXTI_Callback+0x3e>
	{
	case BUTTON_EXTI13_Pin:
//		osSemaphoreRelease(myBinarySem01Handle);
		// falling
		if (HAL_GPIO_ReadPin(GPIOC, BUTTON_EXTI13_Pin) == GPIO_PIN_RESET)
 8000d76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d7a:	480c      	ldr	r0, [pc, #48]	@ (8000dac <HAL_GPIO_EXTI_Callback+0x48>)
 8000d7c:	f001 f8fc 	bl	8001f78 <HAL_GPIO_ReadPin>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d106      	bne.n	8000d94 <HAL_GPIO_EXTI_Callback+0x30>
		{
			osThreadFlagsSet(defaultTaskHandle, 0x01);
 8000d86:	4b0a      	ldr	r3, [pc, #40]	@ (8000db0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f004 fc25 	bl	80055dc <osThreadFlagsSet>
		// rising
		else
		{
			osThreadFlagsSet(defaultTaskHandle, 0x02);
		}
		break;
 8000d92:	e007      	b.n	8000da4 <HAL_GPIO_EXTI_Callback+0x40>
			osThreadFlagsSet(defaultTaskHandle, 0x02);
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2102      	movs	r1, #2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f004 fc1e 	bl	80055dc <osThreadFlagsSet>
		break;
 8000da0:	e000      	b.n	8000da4 <HAL_GPIO_EXTI_Callback+0x40>
	default:
		break;
 8000da2:	bf00      	nop
	}
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	48000800 	.word	0x48000800
 8000db0:	200007a0 	.word	0x200007a0

08000db4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  uint16_t msg;
  for(;;)
  {

	  osMutexAcquire(myMutex01Handle, osWaitForever);
 8000dbc:	4b20      	ldr	r3, [pc, #128]	@ (8000e40 <StartDefaultTask+0x8c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f004 feae 	bl	8005b26 <osMutexAcquire>
	  osMutexRelease(myMutex01Handle);
 8000dca:	4b1d      	ldr	r3, [pc, #116]	@ (8000e40 <StartDefaultTask+0x8c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f004 fef4 	bl	8005bbc <osMutexRelease>
	  osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f004 fc8a 	bl	80056f4 <osThreadFlagsWait>
	  osTimerStart(ButtonTimerHandle, 1000U);
 8000de0:	4b18      	ldr	r3, [pc, #96]	@ (8000e44 <StartDefaultTask+0x90>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000de8:	4618      	mov	r0, r3
 8000dea:	f004 fdb1 	bl	8005950 <osTimerStart>
	  osThreadFlagsWait(0x06, osFlagsWaitAny | osFlagsNoClear, osWaitForever);
 8000dee:	f04f 32ff 	mov.w	r2, #4294967295
 8000df2:	2102      	movs	r1, #2
 8000df4:	2006      	movs	r0, #6
 8000df6:	f004 fc7d 	bl	80056f4 <osThreadFlagsWait>
	  uint32_t cur_flags = osThreadFlagsClear(0x06);
 8000dfa:	2006      	movs	r0, #6
 8000dfc:	f004 fc3c 	bl	8005678 <osThreadFlagsClear>
 8000e00:	60f8      	str	r0, [r7, #12]
	  if (cur_flags == 0x02)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d10f      	bne.n	8000e28 <StartDefaultTask+0x74>
	  {
		  // not exceed 1s
		  osTimerStop(ButtonTimerHandle);
 8000e08:	4b0e      	ldr	r3, [pc, #56]	@ (8000e44 <StartDefaultTask+0x90>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f004 fdcd 	bl	80059ac <osTimerStop>
		  msg = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	817b      	strh	r3, [r7, #10]
		  osMessageQueuePut(myQueue01Handle, &msg, 0, 0);
 8000e16:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <StartDefaultTask+0x94>)
 8000e18:	6818      	ldr	r0, [r3, #0]
 8000e1a:	f107 010a 	add.w	r1, r7, #10
 8000e1e:	2300      	movs	r3, #0
 8000e20:	2200      	movs	r2, #0
 8000e22:	f005 f89b 	bl	8005f5c <osMessageQueuePut>
 8000e26:	e7c9      	b.n	8000dbc <StartDefaultTask+0x8>
	  }
	  else
	  {
		  // exceed 1s
		  msg = 1;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	817b      	strh	r3, [r7, #10]
		  osMessageQueuePut(myQueue01Handle, &msg, 0, 0);
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <StartDefaultTask+0x94>)
 8000e2e:	6818      	ldr	r0, [r3, #0]
 8000e30:	f107 010a 	add.w	r1, r7, #10
 8000e34:	2300      	movs	r3, #0
 8000e36:	2200      	movs	r2, #0
 8000e38:	f005 f890 	bl	8005f5c <osMessageQueuePut>
  {
 8000e3c:	e7be      	b.n	8000dbc <StartDefaultTask+0x8>
 8000e3e:	bf00      	nop
 8000e40:	200007b8 	.word	0x200007b8
 8000e44:	200007b4 	.word	0x200007b4
 8000e48:	200007ac 	.word	0x200007ac

08000e4c <StartTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  uint16_t msg;
  for(;;)
  {
	osMessageQueueGet(myQueue01Handle, &msg, NULL, osWaitForever);
 8000e54:	4b2c      	ldr	r3, [pc, #176]	@ (8000f08 <StartTask01+0xbc>)
 8000e56:	6818      	ldr	r0, [r3, #0]
 8000e58:	f107 010e 	add.w	r1, r7, #14
 8000e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e60:	2200      	movs	r2, #0
 8000e62:	f005 f8db 	bl	800601c <osMessageQueueGet>
//	osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
	osMutexAcquire(myMutex01Handle, osWaitForever);
 8000e66:	4b29      	ldr	r3, [pc, #164]	@ (8000f0c <StartTask01+0xc0>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f04f 31ff 	mov.w	r1, #4294967295
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f004 fe59 	bl	8005b26 <osMutexAcquire>
	if (msg == 0)
 8000e74:	89fb      	ldrh	r3, [r7, #14]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d11f      	bne.n	8000eba <StartTask01+0x6e>
	{
		// not exceed 1s
		int i=0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
		for (i=0;i<5;i++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
 8000e82:	e016      	b.n	8000eb2 <StartTask01+0x66>
		{
			int j=0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61bb      	str	r3, [r7, #24]
			for (j=0;j<2;j++)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61bb      	str	r3, [r7, #24]
 8000e8c:	e00b      	b.n	8000ea6 <StartTask01+0x5a>
			{
				HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000e8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e92:	481f      	ldr	r0, [pc, #124]	@ (8000f10 <StartTask01+0xc4>)
 8000e94:	f001 f8a0 	bl	8001fd8 <HAL_GPIO_TogglePin>
				HAL_Delay(500);
 8000e98:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e9c:	f000 fc80 	bl	80017a0 <HAL_Delay>
			for (j=0;j<2;j++)
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	61bb      	str	r3, [r7, #24]
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	ddf0      	ble.n	8000e8e <StartTask01+0x42>
		for (i=0;i<5;i++)
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	61fb      	str	r3, [r7, #28]
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	dde5      	ble.n	8000e84 <StartTask01+0x38>
 8000eb8:	e020      	b.n	8000efc <StartTask01+0xb0>
			}
		}
	}
	else if (msg == 1)
 8000eba:	89fb      	ldrh	r3, [r7, #14]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d11d      	bne.n	8000efc <StartTask01+0xb0>
	{
		// not exceed 1s
		int i=0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
		for (i=0;i<5;i++)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	e015      	b.n	8000ef6 <StartTask01+0xaa>
		{
			int j=0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
			for (j=0;j<20;j++)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	e00a      	b.n	8000eea <StartTask01+0x9e>
			{
				HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000ed4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ed8:	480d      	ldr	r0, [pc, #52]	@ (8000f10 <StartTask01+0xc4>)
 8000eda:	f001 f87d 	bl	8001fd8 <HAL_GPIO_TogglePin>
				HAL_Delay(50);
 8000ede:	2032      	movs	r0, #50	@ 0x32
 8000ee0:	f000 fc5e 	bl	80017a0 <HAL_Delay>
			for (j=0;j<20;j++)
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	2b13      	cmp	r3, #19
 8000eee:	ddf1      	ble.n	8000ed4 <StartTask01+0x88>
		for (i=0;i<5;i++)
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	dde6      	ble.n	8000eca <StartTask01+0x7e>
			}
		}
	}
	osMutexRelease(myMutex01Handle);
 8000efc:	4b03      	ldr	r3, [pc, #12]	@ (8000f0c <StartTask01+0xc0>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f004 fe5b 	bl	8005bbc <osMutexRelease>
	osMessageQueueGet(myQueue01Handle, &msg, NULL, osWaitForever);
 8000f06:	e7a5      	b.n	8000e54 <StartTask01+0x8>
 8000f08:	200007ac 	.word	0x200007ac
 8000f0c:	200007b8 	.word	0x200007b8
 8000f10:	48000400 	.word	0x48000400

08000f14 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

	osSemaphoreAcquire(myBinarySem02Handle, osWaitForever);
 8000f1c:	4b18      	ldr	r3, [pc, #96]	@ (8000f80 <StartTask02+0x6c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f04f 31ff 	mov.w	r1, #4294967295
 8000f24:	4618      	mov	r0, r3
 8000f26:	f004 ff0f 	bl	8005d48 <osSemaphoreAcquire>
	osMutexAcquire(myMutex01Handle, osWaitForever);
 8000f2a:	4b16      	ldr	r3, [pc, #88]	@ (8000f84 <StartTask02+0x70>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f04f 31ff 	mov.w	r1, #4294967295
 8000f32:	4618      	mov	r0, r3
 8000f34:	f004 fdf7 	bl	8005b26 <osMutexAcquire>
	int i=0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
	for (i=0;i<2;i++)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	e015      	b.n	8000f6e <StartTask02+0x5a>
	{
		int j=0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
		for (j=0;j<20;j++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	e00a      	b.n	8000f62 <StartTask02+0x4e>
		{
			HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000f4c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f50:	480d      	ldr	r0, [pc, #52]	@ (8000f88 <StartTask02+0x74>)
 8000f52:	f001 f841 	bl	8001fd8 <HAL_GPIO_TogglePin>
			osDelay(50);
 8000f56:	2032      	movs	r0, #50	@ 0x32
 8000f58:	f004 fc4d 	bl	80057f6 <osDelay>
		for (j=0;j<20;j++)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	2b13      	cmp	r3, #19
 8000f66:	ddf1      	ble.n	8000f4c <StartTask02+0x38>
	for (i=0;i<2;i++)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	dde6      	ble.n	8000f42 <StartTask02+0x2e>
		}
	}
	osMutexRelease(myMutex01Handle);
 8000f74:	4b03      	ldr	r3, [pc, #12]	@ (8000f84 <StartTask02+0x70>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f004 fe1f 	bl	8005bbc <osMutexRelease>
  {
 8000f7e:	e7cd      	b.n	8000f1c <StartTask02+0x8>
 8000f80:	200007c0 	.word	0x200007c0
 8000f84:	200007b8 	.word	0x200007b8
 8000f88:	48000400 	.word	0x48000400

08000f8c <Callback01>:
  /* USER CODE END StartTask02 */
}

/* Callback01 function */
void Callback01(void *argument)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
  osSemaphoreRelease(myBinarySem02Handle);
 8000f94:	4b04      	ldr	r3, [pc, #16]	@ (8000fa8 <Callback01+0x1c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f004 ff27 	bl	8005dec <osSemaphoreRelease>
  /* USER CODE END Callback01 */
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200007c0 	.word	0x200007c0

08000fac <TimerCallback>:

/* TimerCallback function */
void TimerCallback(void *argument)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TimerCallback */
//  HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
//  osSemaphoreRelease(myBinarySem01Handle);
	osThreadFlagsSet(defaultTaskHandle, 0x04);
 8000fb4:	4b04      	ldr	r3, [pc, #16]	@ (8000fc8 <TimerCallback+0x1c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2104      	movs	r1, #4
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f004 fb0e 	bl	80055dc <osThreadFlagsSet>
  /* USER CODE END TimerCallback */
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200007a0 	.word	0x200007a0

08000fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd0:	b672      	cpsid	i
}
 8000fd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <Error_Handler+0x8>

08000fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <HAL_MspInit+0x4c>)
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe2:	4a10      	ldr	r2, [pc, #64]	@ (8001024 <HAL_MspInit+0x4c>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fea:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <HAL_MspInit+0x4c>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8001024 <HAL_MspInit+0x4c>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8001024 <HAL_MspInit+0x4c>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001000:	6593      	str	r3, [r2, #88]	@ 0x58
 8001002:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <HAL_MspInit+0x4c>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	210f      	movs	r1, #15
 8001012:	f06f 0001 	mvn.w	r0, #1
 8001016:	f000 fcc2 	bl	800199e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000

08001028 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b0ac      	sub	sp, #176	@ 0xb0
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2288      	movs	r2, #136	@ 0x88
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f008 fca5 	bl	8009998 <memset>
  if(DFSDM1_Init == 0)
 800104e:	4b25      	ldr	r3, [pc, #148]	@ (80010e4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d142      	bne.n	80010dc <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001056:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800105a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4618      	mov	r0, r3
 8001068:	f002 f98e 	bl	8003388 <HAL_RCCEx_PeriphCLKConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001072:	f7ff ffab 	bl	8000fcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001076:	4b1c      	ldr	r3, [pc, #112]	@ (80010e8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800107a:	4a1b      	ldr	r2, [pc, #108]	@ (80010e8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800107c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001080:	6613      	str	r3, [r2, #96]	@ 0x60
 8001082:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001086:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800108e:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001092:	4a15      	ldr	r2, [pc, #84]	@ (80010e8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001094:	f043 0310 	orr.w	r3, r3, #16
 8001098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800109a:	4b13      	ldr	r3, [pc, #76]	@ (80010e8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109e:	f003 0310 	and.w	r3, r3, #16
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80010a6:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80010aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80010c0:	2306      	movs	r3, #6
 80010c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010ca:	4619      	mov	r1, r3
 80010cc:	4807      	ldr	r0, [pc, #28]	@ (80010ec <HAL_DFSDM_ChannelMspInit+0xc4>)
 80010ce:	f000 fda9 	bl	8001c24 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80010d2:	4b04      	ldr	r3, [pc, #16]	@ (80010e4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	3301      	adds	r3, #1
 80010d8:	4a02      	ldr	r2, [pc, #8]	@ (80010e4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010da:	6013      	str	r3, [r2, #0]
  }

}
 80010dc:	bf00      	nop
 80010de:	37b0      	adds	r7, #176	@ 0xb0
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200007c4 	.word	0x200007c4
 80010e8:	40021000 	.word	0x40021000
 80010ec:	48001000 	.word	0x48001000

080010f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b0ac      	sub	sp, #176	@ 0xb0
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2288      	movs	r2, #136	@ 0x88
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f008 fc41 	bl	8009998 <memset>
  if(hi2c->Instance==I2C2)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a21      	ldr	r2, [pc, #132]	@ (80011a0 <HAL_I2C_MspInit+0xb0>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d13b      	bne.n	8001198 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001120:	2380      	movs	r3, #128	@ 0x80
 8001122:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001124:	2300      	movs	r3, #0
 8001126:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4618      	mov	r0, r3
 800112e:	f002 f92b 	bl	8003388 <HAL_RCCEx_PeriphCLKConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001138:	f7ff ff48 	bl	8000fcc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113c:	4b19      	ldr	r3, [pc, #100]	@ (80011a4 <HAL_I2C_MspInit+0xb4>)
 800113e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001140:	4a18      	ldr	r2, [pc, #96]	@ (80011a4 <HAL_I2C_MspInit+0xb4>)
 8001142:	f043 0302 	orr.w	r3, r3, #2
 8001146:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001148:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <HAL_I2C_MspInit+0xb4>)
 800114a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001154:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001158:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800115c:	2312      	movs	r3, #18
 800115e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001162:	2301      	movs	r3, #1
 8001164:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800116e:	2304      	movs	r3, #4
 8001170:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001174:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001178:	4619      	mov	r1, r3
 800117a:	480b      	ldr	r0, [pc, #44]	@ (80011a8 <HAL_I2C_MspInit+0xb8>)
 800117c:	f000 fd52 	bl	8001c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001180:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <HAL_I2C_MspInit+0xb4>)
 8001182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001184:	4a07      	ldr	r2, [pc, #28]	@ (80011a4 <HAL_I2C_MspInit+0xb4>)
 8001186:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800118a:	6593      	str	r3, [r2, #88]	@ 0x58
 800118c:	4b05      	ldr	r3, [pc, #20]	@ (80011a4 <HAL_I2C_MspInit+0xb4>)
 800118e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001190:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001198:	bf00      	nop
 800119a:	37b0      	adds	r7, #176	@ 0xb0
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40005800 	.word	0x40005800
 80011a4:	40021000 	.word	0x40021000
 80011a8:	48000400 	.word	0x48000400

080011ac <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a17      	ldr	r2, [pc, #92]	@ (8001228 <HAL_QSPI_MspInit+0x7c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d128      	bne.n	8001220 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80011ce:	4b17      	ldr	r3, [pc, #92]	@ (800122c <HAL_QSPI_MspInit+0x80>)
 80011d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011d2:	4a16      	ldr	r2, [pc, #88]	@ (800122c <HAL_QSPI_MspInit+0x80>)
 80011d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011d8:	6513      	str	r3, [r2, #80]	@ 0x50
 80011da:	4b14      	ldr	r3, [pc, #80]	@ (800122c <HAL_QSPI_MspInit+0x80>)
 80011dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011e6:	4b11      	ldr	r3, [pc, #68]	@ (800122c <HAL_QSPI_MspInit+0x80>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	4a10      	ldr	r2, [pc, #64]	@ (800122c <HAL_QSPI_MspInit+0x80>)
 80011ec:	f043 0310 	orr.w	r3, r3, #16
 80011f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f2:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <HAL_QSPI_MspInit+0x80>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f6:	f003 0310 	and.w	r3, r3, #16
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80011fe:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001202:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120c:	2303      	movs	r3, #3
 800120e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001210:	230a      	movs	r3, #10
 8001212:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4619      	mov	r1, r3
 800121a:	4805      	ldr	r0, [pc, #20]	@ (8001230 <HAL_QSPI_MspInit+0x84>)
 800121c:	f000 fd02 	bl	8001c24 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001220:	bf00      	nop
 8001222:	3728      	adds	r7, #40	@ 0x28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	a0001000 	.word	0xa0001000
 800122c:	40021000 	.word	0x40021000
 8001230:	48001000 	.word	0x48001000

08001234 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	@ 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a17      	ldr	r2, [pc, #92]	@ (80012b0 <HAL_SPI_MspInit+0x7c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d128      	bne.n	80012a8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001256:	4b17      	ldr	r3, [pc, #92]	@ (80012b4 <HAL_SPI_MspInit+0x80>)
 8001258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125a:	4a16      	ldr	r2, [pc, #88]	@ (80012b4 <HAL_SPI_MspInit+0x80>)
 800125c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001260:	6593      	str	r3, [r2, #88]	@ 0x58
 8001262:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <HAL_SPI_MspInit+0x80>)
 8001264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001266:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800126e:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <HAL_SPI_MspInit+0x80>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001272:	4a10      	ldr	r2, [pc, #64]	@ (80012b4 <HAL_SPI_MspInit+0x80>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127a:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <HAL_SPI_MspInit+0x80>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001286:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800128a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001298:	2306      	movs	r3, #6
 800129a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <HAL_SPI_MspInit+0x84>)
 80012a4:	f000 fcbe 	bl	8001c24 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80012a8:	bf00      	nop
 80012aa:	3728      	adds	r7, #40	@ 0x28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40003c00 	.word	0x40003c00
 80012b4:	40021000 	.word	0x40021000
 80012b8:	48000800 	.word	0x48000800

080012bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001300 <HAL_TIM_Base_MspInit+0x44>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d113      	bne.n	80012f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <HAL_TIM_Base_MspInit+0x48>)
 80012d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001304 <HAL_TIM_Base_MspInit+0x48>)
 80012d4:	f043 0310 	orr.w	r3, r3, #16
 80012d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80012da:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <HAL_TIM_Base_MspInit+0x48>)
 80012dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012de:	f003 0310 	and.w	r3, r3, #16
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2105      	movs	r1, #5
 80012ea:	2036      	movs	r0, #54	@ 0x36
 80012ec:	f000 fb57 	bl	800199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012f0:	2036      	movs	r0, #54	@ 0x36
 80012f2:	f000 fb70 	bl	80019d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40001000 	.word	0x40001000
 8001304:	40021000 	.word	0x40021000

08001308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b0ae      	sub	sp, #184	@ 0xb8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	2288      	movs	r2, #136	@ 0x88
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f008 fb35 	bl	8009998 <memset>
  if(huart->Instance==USART1)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a42      	ldr	r2, [pc, #264]	@ (800143c <HAL_UART_MspInit+0x134>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d13b      	bne.n	80013b0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001338:	2301      	movs	r3, #1
 800133a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800133c:	2300      	movs	r3, #0
 800133e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	4618      	mov	r0, r3
 8001346:	f002 f81f 	bl	8003388 <HAL_RCCEx_PeriphCLKConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001350:	f7ff fe3c 	bl	8000fcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001354:	4b3a      	ldr	r3, [pc, #232]	@ (8001440 <HAL_UART_MspInit+0x138>)
 8001356:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001358:	4a39      	ldr	r2, [pc, #228]	@ (8001440 <HAL_UART_MspInit+0x138>)
 800135a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800135e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001360:	4b37      	ldr	r3, [pc, #220]	@ (8001440 <HAL_UART_MspInit+0x138>)
 8001362:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001364:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001368:	61bb      	str	r3, [r7, #24]
 800136a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136c:	4b34      	ldr	r3, [pc, #208]	@ (8001440 <HAL_UART_MspInit+0x138>)
 800136e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001370:	4a33      	ldr	r2, [pc, #204]	@ (8001440 <HAL_UART_MspInit+0x138>)
 8001372:	f043 0302 	orr.w	r3, r3, #2
 8001376:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001378:	4b31      	ldr	r3, [pc, #196]	@ (8001440 <HAL_UART_MspInit+0x138>)
 800137a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	617b      	str	r3, [r7, #20]
 8001382:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001384:	23c0      	movs	r3, #192	@ 0xc0
 8001386:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800139c:	2307      	movs	r3, #7
 800139e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013a6:	4619      	mov	r1, r3
 80013a8:	4826      	ldr	r0, [pc, #152]	@ (8001444 <HAL_UART_MspInit+0x13c>)
 80013aa:	f000 fc3b 	bl	8001c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013ae:	e040      	b.n	8001432 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a24      	ldr	r2, [pc, #144]	@ (8001448 <HAL_UART_MspInit+0x140>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d13b      	bne.n	8001432 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013ba:	2304      	movs	r3, #4
 80013bc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013be:	2300      	movs	r3, #0
 80013c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c2:	f107 031c 	add.w	r3, r7, #28
 80013c6:	4618      	mov	r0, r3
 80013c8:	f001 ffde 	bl	8003388 <HAL_RCCEx_PeriphCLKConfig>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_UART_MspInit+0xce>
      Error_Handler();
 80013d2:	f7ff fdfb 	bl	8000fcc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <HAL_UART_MspInit+0x138>)
 80013d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013da:	4a19      	ldr	r2, [pc, #100]	@ (8001440 <HAL_UART_MspInit+0x138>)
 80013dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80013e2:	4b17      	ldr	r3, [pc, #92]	@ (8001440 <HAL_UART_MspInit+0x138>)
 80013e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ee:	4b14      	ldr	r3, [pc, #80]	@ (8001440 <HAL_UART_MspInit+0x138>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f2:	4a13      	ldr	r2, [pc, #76]	@ (8001440 <HAL_UART_MspInit+0x138>)
 80013f4:	f043 0308 	orr.w	r3, r3, #8
 80013f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fa:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <HAL_UART_MspInit+0x138>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001406:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800140a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	2302      	movs	r3, #2
 8001410:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001420:	2307      	movs	r3, #7
 8001422:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001426:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800142a:	4619      	mov	r1, r3
 800142c:	4807      	ldr	r0, [pc, #28]	@ (800144c <HAL_UART_MspInit+0x144>)
 800142e:	f000 fbf9 	bl	8001c24 <HAL_GPIO_Init>
}
 8001432:	bf00      	nop
 8001434:	37b8      	adds	r7, #184	@ 0xb8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40013800 	.word	0x40013800
 8001440:	40021000 	.word	0x40021000
 8001444:	48000400 	.word	0x48000400
 8001448:	40004800 	.word	0x40004800
 800144c:	48000c00 	.word	0x48000c00

08001450 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b0ac      	sub	sp, #176	@ 0xb0
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2288      	movs	r2, #136	@ 0x88
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f008 fa91 	bl	8009998 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800147e:	d17c      	bne.n	800157a <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001480:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001484:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001486:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800148a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800148e:	2301      	movs	r3, #1
 8001490:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001492:	2301      	movs	r3, #1
 8001494:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001496:	2318      	movs	r3, #24
 8001498:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800149a:	2307      	movs	r3, #7
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800149e:	2302      	movs	r3, #2
 80014a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80014a2:	2302      	movs	r3, #2
 80014a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80014a6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014aa:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4618      	mov	r0, r3
 80014b2:	f001 ff69 	bl	8003388 <HAL_RCCEx_PeriphCLKConfig>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80014bc:	f7ff fd86 	bl	8000fcc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c0:	4b30      	ldr	r3, [pc, #192]	@ (8001584 <HAL_PCD_MspInit+0x134>)
 80014c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c4:	4a2f      	ldr	r2, [pc, #188]	@ (8001584 <HAL_PCD_MspInit+0x134>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001584 <HAL_PCD_MspInit+0x134>)
 80014ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80014d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014f0:	4619      	mov	r1, r3
 80014f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014f6:	f000 fb95 	bl	8001c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80014fa:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80014fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001514:	230a      	movs	r3, #10
 8001516:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800151e:	4619      	mov	r1, r3
 8001520:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001524:	f000 fb7e 	bl	8001c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001528:	4b16      	ldr	r3, [pc, #88]	@ (8001584 <HAL_PCD_MspInit+0x134>)
 800152a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152c:	4a15      	ldr	r2, [pc, #84]	@ (8001584 <HAL_PCD_MspInit+0x134>)
 800152e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001532:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001534:	4b13      	ldr	r3, [pc, #76]	@ (8001584 <HAL_PCD_MspInit+0x134>)
 8001536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001538:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001540:	4b10      	ldr	r3, [pc, #64]	@ (8001584 <HAL_PCD_MspInit+0x134>)
 8001542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001544:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d114      	bne.n	8001576 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800154c:	4b0d      	ldr	r3, [pc, #52]	@ (8001584 <HAL_PCD_MspInit+0x134>)
 800154e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001550:	4a0c      	ldr	r2, [pc, #48]	@ (8001584 <HAL_PCD_MspInit+0x134>)
 8001552:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001556:	6593      	str	r3, [r2, #88]	@ 0x58
 8001558:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <HAL_PCD_MspInit+0x134>)
 800155a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001564:	f001 f844 	bl	80025f0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001568:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <HAL_PCD_MspInit+0x134>)
 800156a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156c:	4a05      	ldr	r2, [pc, #20]	@ (8001584 <HAL_PCD_MspInit+0x134>)
 800156e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001572:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001574:	e001      	b.n	800157a <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001576:	f001 f83b 	bl	80025f0 <HAL_PWREx_EnableVddUSB>
}
 800157a:	bf00      	nop
 800157c:	37b0      	adds	r7, #176	@ 0xb0
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000

08001588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <NMI_Handler+0x4>

08001590 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <HardFault_Handler+0x4>

08001598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <MemManage_Handler+0x4>

080015a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <BusFault_Handler+0x4>

080015a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <UsageFault_Handler+0x4>

080015b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c2:	f000 f8cd 	bl	8001760 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80015c6:	f006 fd8d 	bl	80080e4 <xTaskGetSchedulerState>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d001      	beq.n	80015d4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80015d0:	f007 ff62 	bl	8009498 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80015dc:	2020      	movs	r0, #32
 80015de:	f000 fd15 	bl	800200c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80015e2:	2040      	movs	r0, #64	@ 0x40
 80015e4:	f000 fd12 	bl	800200c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80015e8:	2080      	movs	r0, #128	@ 0x80
 80015ea:	f000 fd0f 	bl	800200c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80015ee:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80015f2:	f000 fd0b 	bl	800200c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}

080015fa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80015fe:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001602:	f000 fd03 	bl	800200c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001606:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800160a:	f000 fcff 	bl	800200c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800160e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001612:	f000 fcfb 	bl	800200c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001616:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800161a:	f000 fcf7 	bl	800200c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800161e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001622:	f000 fcf3 	bl	800200c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001630:	4802      	ldr	r0, [pc, #8]	@ (800163c <TIM6_DAC_IRQHandler+0x10>)
 8001632:	f002 fc6f 	bl	8003f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000160 	.word	0x20000160

08001640 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001644:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <SystemInit+0x20>)
 8001646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800164a:	4a05      	ldr	r2, [pc, #20]	@ (8001660 <SystemInit+0x20>)
 800164c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001650:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001664:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800169c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001668:	f7ff ffea 	bl	8001640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800166c:	480c      	ldr	r0, [pc, #48]	@ (80016a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800166e:	490d      	ldr	r1, [pc, #52]	@ (80016a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001670:	4a0d      	ldr	r2, [pc, #52]	@ (80016a8 <LoopForever+0xe>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001674:	e002      	b.n	800167c <LoopCopyDataInit>

08001676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167a:	3304      	adds	r3, #4

0800167c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800167c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001680:	d3f9      	bcc.n	8001676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001682:	4a0a      	ldr	r2, [pc, #40]	@ (80016ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001684:	4c0a      	ldr	r4, [pc, #40]	@ (80016b0 <LoopForever+0x16>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001688:	e001      	b.n	800168e <LoopFillZerobss>

0800168a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800168c:	3204      	adds	r2, #4

0800168e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001690:	d3fb      	bcc.n	800168a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001692:	f008 f989 	bl	80099a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001696:	f7fe ff13 	bl	80004c0 <main>

0800169a <LoopForever>:

LoopForever:
    b LoopForever
 800169a:	e7fe      	b.n	800169a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800169c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80016a8:	08009bdc 	.word	0x08009bdc
  ldr r2, =_sbss
 80016ac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80016b0:	200020f8 	.word	0x200020f8

080016b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016b4:	e7fe      	b.n	80016b4 <ADC1_2_IRQHandler>

080016b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c0:	2003      	movs	r0, #3
 80016c2:	f000 f961 	bl	8001988 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016c6:	200f      	movs	r0, #15
 80016c8:	f000 f80e 	bl	80016e8 <HAL_InitTick>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d002      	beq.n	80016d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	71fb      	strb	r3, [r7, #7]
 80016d6:	e001      	b.n	80016dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016d8:	f7ff fc7e 	bl	8000fd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016dc:	79fb      	ldrb	r3, [r7, #7]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016f4:	4b17      	ldr	r3, [pc, #92]	@ (8001754 <HAL_InitTick+0x6c>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d023      	beq.n	8001744 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016fc:	4b16      	ldr	r3, [pc, #88]	@ (8001758 <HAL_InitTick+0x70>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <HAL_InitTick+0x6c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800170a:	fbb3 f3f1 	udiv	r3, r3, r1
 800170e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f96d 	bl	80019f2 <HAL_SYSTICK_Config>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10f      	bne.n	800173e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b0f      	cmp	r3, #15
 8001722:	d809      	bhi.n	8001738 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001724:	2200      	movs	r2, #0
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	f04f 30ff 	mov.w	r0, #4294967295
 800172c:	f000 f937 	bl	800199e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001730:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <HAL_InitTick+0x74>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e007      	b.n	8001748 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
 800173c:	e004      	b.n	8001748 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	73fb      	strb	r3, [r7, #15]
 8001742:	e001      	b.n	8001748 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001748:	7bfb      	ldrb	r3, [r7, #15]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000008 	.word	0x20000008
 8001758:	20000000 	.word	0x20000000
 800175c:	20000004 	.word	0x20000004

08001760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <HAL_IncTick+0x20>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <HAL_IncTick+0x24>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4413      	add	r3, r2
 8001770:	4a04      	ldr	r2, [pc, #16]	@ (8001784 <HAL_IncTick+0x24>)
 8001772:	6013      	str	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000008 	.word	0x20000008
 8001784:	200007c8 	.word	0x200007c8

08001788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return uwTick;
 800178c:	4b03      	ldr	r3, [pc, #12]	@ (800179c <HAL_GetTick+0x14>)
 800178e:	681b      	ldr	r3, [r3, #0]
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	200007c8 	.word	0x200007c8

080017a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a8:	f7ff ffee 	bl	8001788 <HAL_GetTick>
 80017ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b8:	d005      	beq.n	80017c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017ba:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <HAL_Delay+0x44>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	461a      	mov	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4413      	add	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017c6:	bf00      	nop
 80017c8:	f7ff ffde 	bl	8001788 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d8f7      	bhi.n	80017c8 <HAL_Delay+0x28>
  {
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000008 	.word	0x20000008

080017e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <__NVIC_SetPriorityGrouping+0x44>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001810:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181a:	4a04      	ldr	r2, [pc, #16]	@ (800182c <__NVIC_SetPriorityGrouping+0x44>)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	60d3      	str	r3, [r2, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001834:	4b04      	ldr	r3, [pc, #16]	@ (8001848 <__NVIC_GetPriorityGrouping+0x18>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 0307 	and.w	r3, r3, #7
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	2b00      	cmp	r3, #0
 800185c:	db0b      	blt.n	8001876 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f003 021f 	and.w	r2, r3, #31
 8001864:	4907      	ldr	r1, [pc, #28]	@ (8001884 <__NVIC_EnableIRQ+0x38>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	2001      	movs	r0, #1
 800186e:	fa00 f202 	lsl.w	r2, r0, r2
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000e100 	.word	0xe000e100

08001888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	6039      	str	r1, [r7, #0]
 8001892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001898:	2b00      	cmp	r3, #0
 800189a:	db0a      	blt.n	80018b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	490c      	ldr	r1, [pc, #48]	@ (80018d4 <__NVIC_SetPriority+0x4c>)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	0112      	lsls	r2, r2, #4
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	440b      	add	r3, r1
 80018ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b0:	e00a      	b.n	80018c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4908      	ldr	r1, [pc, #32]	@ (80018d8 <__NVIC_SetPriority+0x50>)
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	3b04      	subs	r3, #4
 80018c0:	0112      	lsls	r2, r2, #4
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	440b      	add	r3, r1
 80018c6:	761a      	strb	r2, [r3, #24]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000e100 	.word	0xe000e100
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	@ 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f1c3 0307 	rsb	r3, r3, #7
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	bf28      	it	cs
 80018fa:	2304      	movcs	r3, #4
 80018fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3304      	adds	r3, #4
 8001902:	2b06      	cmp	r3, #6
 8001904:	d902      	bls.n	800190c <NVIC_EncodePriority+0x30>
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3b03      	subs	r3, #3
 800190a:	e000      	b.n	800190e <NVIC_EncodePriority+0x32>
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	f04f 32ff 	mov.w	r2, #4294967295
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43da      	mvns	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	401a      	ands	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001924:	f04f 31ff 	mov.w	r1, #4294967295
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa01 f303 	lsl.w	r3, r1, r3
 800192e:	43d9      	mvns	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	4313      	orrs	r3, r2
         );
}
 8001936:	4618      	mov	r0, r3
 8001938:	3724      	adds	r7, #36	@ 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3b01      	subs	r3, #1
 8001950:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001954:	d301      	bcc.n	800195a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001956:	2301      	movs	r3, #1
 8001958:	e00f      	b.n	800197a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195a:	4a0a      	ldr	r2, [pc, #40]	@ (8001984 <SysTick_Config+0x40>)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b01      	subs	r3, #1
 8001960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001962:	210f      	movs	r1, #15
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
 8001968:	f7ff ff8e 	bl	8001888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800196c:	4b05      	ldr	r3, [pc, #20]	@ (8001984 <SysTick_Config+0x40>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001972:	4b04      	ldr	r3, [pc, #16]	@ (8001984 <SysTick_Config+0x40>)
 8001974:	2207      	movs	r2, #7
 8001976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	e000e010 	.word	0xe000e010

08001988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ff29 	bl	80017e8 <__NVIC_SetPriorityGrouping>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019b0:	f7ff ff3e 	bl	8001830 <__NVIC_GetPriorityGrouping>
 80019b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	68b9      	ldr	r1, [r7, #8]
 80019ba:	6978      	ldr	r0, [r7, #20]
 80019bc:	f7ff ff8e 	bl	80018dc <NVIC_EncodePriority>
 80019c0:	4602      	mov	r2, r0
 80019c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff5d 	bl	8001888 <__NVIC_SetPriority>
}
 80019ce:	bf00      	nop
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff31 	bl	800184c <__NVIC_EnableIRQ>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ffa2 	bl	8001944 <SysTick_Config>
 8001a00:	4603      	mov	r3, r0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e0ac      	b.n	8001b78 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 f8b2 	bl	8001b8c <DFSDM_GetChannelFromInstance>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4a55      	ldr	r2, [pc, #340]	@ (8001b80 <HAL_DFSDM_ChannelInit+0x174>)
 8001a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e09f      	b.n	8001b78 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff faf5 	bl	8001028 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001a3e:	4b51      	ldr	r3, [pc, #324]	@ (8001b84 <HAL_DFSDM_ChannelInit+0x178>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	3301      	adds	r3, #1
 8001a44:	4a4f      	ldr	r2, [pc, #316]	@ (8001b84 <HAL_DFSDM_ChannelInit+0x178>)
 8001a46:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001a48:	4b4e      	ldr	r3, [pc, #312]	@ (8001b84 <HAL_DFSDM_ChannelInit+0x178>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d125      	bne.n	8001a9c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001a50:	4b4d      	ldr	r3, [pc, #308]	@ (8001b88 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a4c      	ldr	r2, [pc, #304]	@ (8001b88 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a56:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001a5a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001a5c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b88 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	4948      	ldr	r1, [pc, #288]	@ (8001b88 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001a6a:	4b47      	ldr	r3, [pc, #284]	@ (8001b88 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a46      	ldr	r2, [pc, #280]	@ (8001b88 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a70:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001a74:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	791b      	ldrb	r3, [r3, #4]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d108      	bne.n	8001a90 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001a7e:	4b42      	ldr	r3, [pc, #264]	@ (8001b88 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	041b      	lsls	r3, r3, #16
 8001a8a:	493f      	ldr	r1, [pc, #252]	@ (8001b88 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001a90:	4b3d      	ldr	r3, [pc, #244]	@ (8001b88 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a3c      	ldr	r2, [pc, #240]	@ (8001b88 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001a9a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8001aaa:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6819      	ldr	r1, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001aba:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001ac0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 020f 	bic.w	r2, r2, #15
 8001ad8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6819      	ldr	r1, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001b00:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6899      	ldr	r1, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b10:	3b01      	subs	r3, #1
 8001b12:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001b14:	431a      	orrs	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f002 0207 	and.w	r2, r2, #7
 8001b2c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6859      	ldr	r1, [r3, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b38:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b58:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 f810 	bl	8001b8c <DFSDM_GetChannelFromInstance>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	4904      	ldr	r1, [pc, #16]	@ (8001b80 <HAL_DFSDM_ChannelInit+0x174>)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	200007d0 	.word	0x200007d0
 8001b84:	200007cc 	.word	0x200007cc
 8001b88:	40016000 	.word	0x40016000

08001b8c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a1c      	ldr	r2, [pc, #112]	@ (8001c08 <DFSDM_GetChannelFromInstance+0x7c>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d102      	bne.n	8001ba2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	e02b      	b.n	8001bfa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a19      	ldr	r2, [pc, #100]	@ (8001c0c <DFSDM_GetChannelFromInstance+0x80>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d102      	bne.n	8001bb0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001baa:	2301      	movs	r3, #1
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	e024      	b.n	8001bfa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a17      	ldr	r2, [pc, #92]	@ (8001c10 <DFSDM_GetChannelFromInstance+0x84>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d102      	bne.n	8001bbe <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	e01d      	b.n	8001bfa <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a14      	ldr	r2, [pc, #80]	@ (8001c14 <DFSDM_GetChannelFromInstance+0x88>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d102      	bne.n	8001bcc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	e016      	b.n	8001bfa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a12      	ldr	r2, [pc, #72]	@ (8001c18 <DFSDM_GetChannelFromInstance+0x8c>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d102      	bne.n	8001bda <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001bd4:	2305      	movs	r3, #5
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	e00f      	b.n	8001bfa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a0f      	ldr	r2, [pc, #60]	@ (8001c1c <DFSDM_GetChannelFromInstance+0x90>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d102      	bne.n	8001be8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001be2:	2306      	movs	r3, #6
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	e008      	b.n	8001bfa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a0d      	ldr	r2, [pc, #52]	@ (8001c20 <DFSDM_GetChannelFromInstance+0x94>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d102      	bne.n	8001bf6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001bf0:	2307      	movs	r3, #7
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	e001      	b.n	8001bfa <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	40016000 	.word	0x40016000
 8001c0c:	40016020 	.word	0x40016020
 8001c10:	40016040 	.word	0x40016040
 8001c14:	40016080 	.word	0x40016080
 8001c18:	400160a0 	.word	0x400160a0
 8001c1c:	400160c0 	.word	0x400160c0
 8001c20:	400160e0 	.word	0x400160e0

08001c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b087      	sub	sp, #28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c32:	e17f      	b.n	8001f34 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	2101      	movs	r1, #1
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c40:	4013      	ands	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 8171 	beq.w	8001f2e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d005      	beq.n	8001c64 <HAL_GPIO_Init+0x40>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d130      	bne.n	8001cc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	2203      	movs	r2, #3
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	f003 0201 	and.w	r2, r3, #1
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d118      	bne.n	8001d04 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001cd8:	2201      	movs	r2, #1
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	08db      	lsrs	r3, r3, #3
 8001cee:	f003 0201 	and.w	r2, r3, #1
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d017      	beq.n	8001d40 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d123      	bne.n	8001d94 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	08da      	lsrs	r2, r3, #3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3208      	adds	r2, #8
 8001d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	220f      	movs	r2, #15
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	08da      	lsrs	r2, r3, #3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3208      	adds	r2, #8
 8001d8e:	6939      	ldr	r1, [r7, #16]
 8001d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	2203      	movs	r2, #3
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 0203 	and.w	r2, r3, #3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 80ac 	beq.w	8001f2e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd6:	4b5f      	ldr	r3, [pc, #380]	@ (8001f54 <HAL_GPIO_Init+0x330>)
 8001dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dda:	4a5e      	ldr	r2, [pc, #376]	@ (8001f54 <HAL_GPIO_Init+0x330>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001de2:	4b5c      	ldr	r3, [pc, #368]	@ (8001f54 <HAL_GPIO_Init+0x330>)
 8001de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dee:	4a5a      	ldr	r2, [pc, #360]	@ (8001f58 <HAL_GPIO_Init+0x334>)
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	3302      	adds	r3, #2
 8001df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	220f      	movs	r2, #15
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e18:	d025      	beq.n	8001e66 <HAL_GPIO_Init+0x242>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a4f      	ldr	r2, [pc, #316]	@ (8001f5c <HAL_GPIO_Init+0x338>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d01f      	beq.n	8001e62 <HAL_GPIO_Init+0x23e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a4e      	ldr	r2, [pc, #312]	@ (8001f60 <HAL_GPIO_Init+0x33c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d019      	beq.n	8001e5e <HAL_GPIO_Init+0x23a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a4d      	ldr	r2, [pc, #308]	@ (8001f64 <HAL_GPIO_Init+0x340>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d013      	beq.n	8001e5a <HAL_GPIO_Init+0x236>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a4c      	ldr	r2, [pc, #304]	@ (8001f68 <HAL_GPIO_Init+0x344>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00d      	beq.n	8001e56 <HAL_GPIO_Init+0x232>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f6c <HAL_GPIO_Init+0x348>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d007      	beq.n	8001e52 <HAL_GPIO_Init+0x22e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4a      	ldr	r2, [pc, #296]	@ (8001f70 <HAL_GPIO_Init+0x34c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d101      	bne.n	8001e4e <HAL_GPIO_Init+0x22a>
 8001e4a:	2306      	movs	r3, #6
 8001e4c:	e00c      	b.n	8001e68 <HAL_GPIO_Init+0x244>
 8001e4e:	2307      	movs	r3, #7
 8001e50:	e00a      	b.n	8001e68 <HAL_GPIO_Init+0x244>
 8001e52:	2305      	movs	r3, #5
 8001e54:	e008      	b.n	8001e68 <HAL_GPIO_Init+0x244>
 8001e56:	2304      	movs	r3, #4
 8001e58:	e006      	b.n	8001e68 <HAL_GPIO_Init+0x244>
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e004      	b.n	8001e68 <HAL_GPIO_Init+0x244>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e002      	b.n	8001e68 <HAL_GPIO_Init+0x244>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <HAL_GPIO_Init+0x244>
 8001e66:	2300      	movs	r3, #0
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	f002 0203 	and.w	r2, r2, #3
 8001e6e:	0092      	lsls	r2, r2, #2
 8001e70:	4093      	lsls	r3, r2
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e78:	4937      	ldr	r1, [pc, #220]	@ (8001f58 <HAL_GPIO_Init+0x334>)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	089b      	lsrs	r3, r3, #2
 8001e7e:	3302      	adds	r3, #2
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e86:	4b3b      	ldr	r3, [pc, #236]	@ (8001f74 <HAL_GPIO_Init+0x350>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4013      	ands	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001eaa:	4a32      	ldr	r2, [pc, #200]	@ (8001f74 <HAL_GPIO_Init+0x350>)
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001eb0:	4b30      	ldr	r3, [pc, #192]	@ (8001f74 <HAL_GPIO_Init+0x350>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ed4:	4a27      	ldr	r2, [pc, #156]	@ (8001f74 <HAL_GPIO_Init+0x350>)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001eda:	4b26      	ldr	r3, [pc, #152]	@ (8001f74 <HAL_GPIO_Init+0x350>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001efe:	4a1d      	ldr	r2, [pc, #116]	@ (8001f74 <HAL_GPIO_Init+0x350>)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f04:	4b1b      	ldr	r3, [pc, #108]	@ (8001f74 <HAL_GPIO_Init+0x350>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f28:	4a12      	ldr	r2, [pc, #72]	@ (8001f74 <HAL_GPIO_Init+0x350>)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	3301      	adds	r3, #1
 8001f32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f47f ae78 	bne.w	8001c34 <HAL_GPIO_Init+0x10>
  }
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	371c      	adds	r7, #28
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40010000 	.word	0x40010000
 8001f5c:	48000400 	.word	0x48000400
 8001f60:	48000800 	.word	0x48000800
 8001f64:	48000c00 	.word	0x48000c00
 8001f68:	48001000 	.word	0x48001000
 8001f6c:	48001400 	.word	0x48001400
 8001f70:	48001800 	.word	0x48001800
 8001f74:	40010400 	.word	0x40010400

08001f78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691a      	ldr	r2, [r3, #16]
 8001f88:	887b      	ldrh	r3, [r7, #2]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
 8001f94:	e001      	b.n	8001f9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	807b      	strh	r3, [r7, #2]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb8:	787b      	ldrb	r3, [r7, #1]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fbe:	887a      	ldrh	r2, [r7, #2]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fc4:	e002      	b.n	8001fcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fc6:	887a      	ldrh	r2, [r7, #2]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fea:	887a      	ldrh	r2, [r7, #2]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	041a      	lsls	r2, r3, #16
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	43d9      	mvns	r1, r3
 8001ff6:	887b      	ldrh	r3, [r7, #2]
 8001ff8:	400b      	ands	r3, r1
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	619a      	str	r2, [r3, #24]
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002016:	4b08      	ldr	r3, [pc, #32]	@ (8002038 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	4013      	ands	r3, r2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d006      	beq.n	8002030 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002022:	4a05      	ldr	r2, [pc, #20]	@ (8002038 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002024:	88fb      	ldrh	r3, [r7, #6]
 8002026:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fe9a 	bl	8000d64 <HAL_GPIO_EXTI_Callback>
  }
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40010400 	.word	0x40010400

0800203c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e08d      	b.n	800216a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff f844 	bl	80010f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2224      	movs	r2, #36	@ 0x24
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0201 	bic.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800208c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800209c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d107      	bne.n	80020b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	e006      	b.n	80020c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80020c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d108      	bne.n	80020de <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	e007      	b.n	80020ee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002100:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002110:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691a      	ldr	r2, [r3, #16]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69d9      	ldr	r1, [r3, #28]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a1a      	ldr	r2, [r3, #32]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2220      	movs	r2, #32
 8002156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b20      	cmp	r3, #32
 8002186:	d138      	bne.n	80021fa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002192:	2302      	movs	r3, #2
 8002194:	e032      	b.n	80021fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2224      	movs	r2, #36	@ 0x24
 80021a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0201 	bic.w	r2, r2, #1
 80021b4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80021c4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6819      	ldr	r1, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f042 0201 	orr.w	r2, r2, #1
 80021e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2220      	movs	r2, #32
 80021ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e000      	b.n	80021fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021fa:	2302      	movs	r3, #2
  }
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b20      	cmp	r3, #32
 800221c:	d139      	bne.n	8002292 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002228:	2302      	movs	r3, #2
 800222a:	e033      	b.n	8002294 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2224      	movs	r2, #36	@ 0x24
 8002238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0201 	bic.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800225a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f042 0201 	orr.w	r2, r2, #1
 800227c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2220      	movs	r2, #32
 8002282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	e000      	b.n	8002294 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002292:	2302      	movs	r3, #2
  }
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af02      	add	r7, sp, #8
 80022a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e101      	b.n	80024b6 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d106      	bne.n	80022cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff f8c2 	bl	8001450 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2203      	movs	r2, #3
 80022d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f002 fdec 	bl	8004ebc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	7c1a      	ldrb	r2, [r3, #16]
 80022ec:	f88d 2000 	strb.w	r2, [sp]
 80022f0:	3304      	adds	r3, #4
 80022f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022f4:	f002 fdb5 	bl	8004e62 <USB_CoreInit>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2202      	movs	r2, #2
 8002302:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e0d5      	b.n	80024b6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2100      	movs	r1, #0
 8002310:	4618      	mov	r0, r3
 8002312:	f002 fde4 	bl	8004ede <USB_SetCurrentMode>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0c6      	b.n	80024b6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002328:	2300      	movs	r3, #0
 800232a:	73fb      	strb	r3, [r7, #15]
 800232c:	e04a      	b.n	80023c4 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800232e:	7bfa      	ldrb	r2, [r7, #15]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	4413      	add	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	440b      	add	r3, r1
 800233c:	3315      	adds	r3, #21
 800233e:	2201      	movs	r2, #1
 8002340:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	3314      	adds	r3, #20
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002356:	7bfa      	ldrb	r2, [r7, #15]
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	b298      	uxth	r0, r3
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4413      	add	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	332e      	adds	r3, #46	@ 0x2e
 800236a:	4602      	mov	r2, r0
 800236c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	4413      	add	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	3318      	adds	r3, #24
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002382:	7bfa      	ldrb	r2, [r7, #15]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4413      	add	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	331c      	adds	r3, #28
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002396:	7bfa      	ldrb	r2, [r7, #15]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	4413      	add	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	3320      	adds	r3, #32
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	3324      	adds	r3, #36	@ 0x24
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	3301      	adds	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	791b      	ldrb	r3, [r3, #4]
 80023c8:	7bfa      	ldrb	r2, [r7, #15]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d3af      	bcc.n	800232e <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ce:	2300      	movs	r3, #0
 80023d0:	73fb      	strb	r3, [r7, #15]
 80023d2:	e044      	b.n	800245e <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023d4:	7bfa      	ldrb	r2, [r7, #15]
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023ea:	7bfa      	ldrb	r2, [r7, #15]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4413      	add	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80023fc:	7bfa      	ldrb	r2, [r7, #15]
 80023fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002400:	7bfa      	ldrb	r2, [r7, #15]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002416:	7bfa      	ldrb	r2, [r7, #15]
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	4413      	add	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	440b      	add	r3, r1
 8002424:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800242c:	7bfa      	ldrb	r2, [r7, #15]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4413      	add	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002442:	7bfa      	ldrb	r2, [r7, #15]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	3301      	adds	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	791b      	ldrb	r3, [r3, #4]
 8002462:	7bfa      	ldrb	r2, [r7, #15]
 8002464:	429a      	cmp	r2, r3
 8002466:	d3b5      	bcc.n	80023d4 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6818      	ldr	r0, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	7c1a      	ldrb	r2, [r3, #16]
 8002470:	f88d 2000 	strb.w	r2, [sp]
 8002474:	3304      	adds	r3, #4
 8002476:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002478:	f002 fd7e 	bl	8004f78 <USB_DevInit>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d005      	beq.n	800248e <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2202      	movs	r2, #2
 8002486:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e013      	b.n	80024b6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	7b1b      	ldrb	r3, [r3, #12]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d102      	bne.n	80024aa <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f80a 	bl	80024be <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f002 ff23 	bl	80052fa <USB_DevDisconnect>

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024be:	b480      	push	{r7}
 80024c0:	b085      	sub	sp, #20
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024f0:	f043 0303 	orr.w	r3, r3, #3
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800250c:	4b05      	ldr	r3, [pc, #20]	@ (8002524 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a04      	ldr	r2, [pc, #16]	@ (8002524 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002516:	6013      	str	r3, [r2, #0]
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40007000 	.word	0x40007000

08002528 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800252c:	4b04      	ldr	r3, [pc, #16]	@ (8002540 <HAL_PWREx_GetVoltageRange+0x18>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40007000 	.word	0x40007000

08002544 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002552:	d130      	bne.n	80025b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002554:	4b23      	ldr	r3, [pc, #140]	@ (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800255c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002560:	d038      	beq.n	80025d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002562:	4b20      	ldr	r3, [pc, #128]	@ (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800256a:	4a1e      	ldr	r2, [pc, #120]	@ (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800256c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002570:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002572:	4b1d      	ldr	r3, [pc, #116]	@ (80025e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2232      	movs	r2, #50	@ 0x32
 8002578:	fb02 f303 	mul.w	r3, r2, r3
 800257c:	4a1b      	ldr	r2, [pc, #108]	@ (80025ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	0c9b      	lsrs	r3, r3, #18
 8002584:	3301      	adds	r3, #1
 8002586:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002588:	e002      	b.n	8002590 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	3b01      	subs	r3, #1
 800258e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002590:	4b14      	ldr	r3, [pc, #80]	@ (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800259c:	d102      	bne.n	80025a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f2      	bne.n	800258a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025a4:	4b0f      	ldr	r3, [pc, #60]	@ (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025b0:	d110      	bne.n	80025d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e00f      	b.n	80025d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025b6:	4b0b      	ldr	r3, [pc, #44]	@ (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025c2:	d007      	beq.n	80025d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025c4:	4b07      	ldr	r3, [pc, #28]	@ (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025cc:	4a05      	ldr	r2, [pc, #20]	@ (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40007000 	.word	0x40007000
 80025e8:	20000000 	.word	0x20000000
 80025ec:	431bde83 	.word	0x431bde83

080025f0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80025f4:	4b05      	ldr	r3, [pc, #20]	@ (800260c <HAL_PWREx_EnableVddUSB+0x1c>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	4a04      	ldr	r2, [pc, #16]	@ (800260c <HAL_PWREx_EnableVddUSB+0x1c>)
 80025fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025fe:	6053      	str	r3, [r2, #4]
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40007000 	.word	0x40007000

08002610 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af02      	add	r7, sp, #8
 8002616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002618:	f7ff f8b6 	bl	8001788 <HAL_GetTick>
 800261c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e063      	b.n	80026f0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10b      	bne.n	800264c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7fe fdb5 	bl	80011ac <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002642:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f858 	bl	80026fc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	3b01      	subs	r3, #1
 800265c:	021a      	lsls	r2, r3, #8
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	2120      	movs	r1, #32
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f850 	bl	8002718 <QSPI_WaitFlagStateUntilTimeout>
 8002678:	4603      	mov	r3, r0
 800267a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800267c:	7afb      	ldrb	r3, [r7, #11]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d131      	bne.n	80026e6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800268c:	f023 0310 	bic.w	r3, r3, #16
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6852      	ldr	r2, [r2, #4]
 8002694:	0611      	lsls	r1, r2, #24
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68d2      	ldr	r2, [r2, #12]
 800269a:	4311      	orrs	r1, r2
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	430b      	orrs	r3, r1
 80026a2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	4b13      	ldr	r3, [pc, #76]	@ (80026f8 <HAL_QSPI_Init+0xe8>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6912      	ldr	r2, [r2, #16]
 80026b2:	0411      	lsls	r1, r2, #16
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6952      	ldr	r2, [r2, #20]
 80026b8:	4311      	orrs	r1, r2
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6992      	ldr	r2, [r2, #24]
 80026be:	4311      	orrs	r1, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	430b      	orrs	r3, r1
 80026c6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80026ee:	7afb      	ldrb	r3, [r7, #11]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	ffe0f8fe 	.word	0xffe0f8fe

080026fc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	4613      	mov	r3, r2
 8002726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002728:	e01a      	b.n	8002760 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002730:	d016      	beq.n	8002760 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002732:	f7ff f829 	bl	8001788 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	429a      	cmp	r2, r3
 8002740:	d302      	bcc.n	8002748 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10b      	bne.n	8002760 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2204      	movs	r2, #4
 800274c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002754:	f043 0201 	orr.w	r2, r3, #1
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e00e      	b.n	800277e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	4013      	ands	r3, r2
 800276a:	2b00      	cmp	r3, #0
 800276c:	bf14      	ite	ne
 800276e:	2301      	movne	r3, #1
 8002770:	2300      	moveq	r3, #0
 8002772:	b2db      	uxtb	r3, r3
 8002774:	461a      	mov	r2, r3
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	429a      	cmp	r2, r3
 800277a:	d1d6      	bne.n	800272a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e3ca      	b.n	8002f30 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800279a:	4b97      	ldr	r3, [pc, #604]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027a4:	4b94      	ldr	r3, [pc, #592]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0310 	and.w	r3, r3, #16
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 80e4 	beq.w	8002984 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d007      	beq.n	80027d2 <HAL_RCC_OscConfig+0x4a>
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	2b0c      	cmp	r3, #12
 80027c6:	f040 808b 	bne.w	80028e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	f040 8087 	bne.w	80028e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027d2:	4b89      	ldr	r3, [pc, #548]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d005      	beq.n	80027ea <HAL_RCC_OscConfig+0x62>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e3a2      	b.n	8002f30 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1a      	ldr	r2, [r3, #32]
 80027ee:	4b82      	ldr	r3, [pc, #520]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d004      	beq.n	8002804 <HAL_RCC_OscConfig+0x7c>
 80027fa:	4b7f      	ldr	r3, [pc, #508]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002802:	e005      	b.n	8002810 <HAL_RCC_OscConfig+0x88>
 8002804:	4b7c      	ldr	r3, [pc, #496]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002806:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800280a:	091b      	lsrs	r3, r3, #4
 800280c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002810:	4293      	cmp	r3, r2
 8002812:	d223      	bcs.n	800285c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	4618      	mov	r0, r3
 800281a:	f000 fd55 	bl	80032c8 <RCC_SetFlashLatencyFromMSIRange>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e383      	b.n	8002f30 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002828:	4b73      	ldr	r3, [pc, #460]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a72      	ldr	r2, [pc, #456]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 800282e:	f043 0308 	orr.w	r3, r3, #8
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	4b70      	ldr	r3, [pc, #448]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	496d      	ldr	r1, [pc, #436]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002842:	4313      	orrs	r3, r2
 8002844:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002846:	4b6c      	ldr	r3, [pc, #432]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	021b      	lsls	r3, r3, #8
 8002854:	4968      	ldr	r1, [pc, #416]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002856:	4313      	orrs	r3, r2
 8002858:	604b      	str	r3, [r1, #4]
 800285a:	e025      	b.n	80028a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800285c:	4b66      	ldr	r3, [pc, #408]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a65      	ldr	r2, [pc, #404]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002862:	f043 0308 	orr.w	r3, r3, #8
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	4b63      	ldr	r3, [pc, #396]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	4960      	ldr	r1, [pc, #384]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002876:	4313      	orrs	r3, r2
 8002878:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800287a:	4b5f      	ldr	r3, [pc, #380]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	021b      	lsls	r3, r3, #8
 8002888:	495b      	ldr	r1, [pc, #364]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 800288a:	4313      	orrs	r3, r2
 800288c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d109      	bne.n	80028a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	4618      	mov	r0, r3
 800289a:	f000 fd15 	bl	80032c8 <RCC_SetFlashLatencyFromMSIRange>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e343      	b.n	8002f30 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028a8:	f000 fc4a 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 80028ac:	4602      	mov	r2, r0
 80028ae:	4b52      	ldr	r3, [pc, #328]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	091b      	lsrs	r3, r3, #4
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	4950      	ldr	r1, [pc, #320]	@ (80029fc <HAL_RCC_OscConfig+0x274>)
 80028ba:	5ccb      	ldrb	r3, [r1, r3]
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
 80028c4:	4a4e      	ldr	r2, [pc, #312]	@ (8002a00 <HAL_RCC_OscConfig+0x278>)
 80028c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028c8:	4b4e      	ldr	r3, [pc, #312]	@ (8002a04 <HAL_RCC_OscConfig+0x27c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fe ff0b 	bl	80016e8 <HAL_InitTick>
 80028d2:	4603      	mov	r3, r0
 80028d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d052      	beq.n	8002982 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	e327      	b.n	8002f30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d032      	beq.n	800294e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028e8:	4b43      	ldr	r3, [pc, #268]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a42      	ldr	r2, [pc, #264]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028f4:	f7fe ff48 	bl	8001788 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028fc:	f7fe ff44 	bl	8001788 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e310      	b.n	8002f30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800290e:	4b3a      	ldr	r3, [pc, #232]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800291a:	4b37      	ldr	r3, [pc, #220]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a36      	ldr	r2, [pc, #216]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002920:	f043 0308 	orr.w	r3, r3, #8
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	4b34      	ldr	r3, [pc, #208]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	4931      	ldr	r1, [pc, #196]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002934:	4313      	orrs	r3, r2
 8002936:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002938:	4b2f      	ldr	r3, [pc, #188]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	021b      	lsls	r3, r3, #8
 8002946:	492c      	ldr	r1, [pc, #176]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
 800294c:	e01a      	b.n	8002984 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800294e:	4b2a      	ldr	r3, [pc, #168]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a29      	ldr	r2, [pc, #164]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002954:	f023 0301 	bic.w	r3, r3, #1
 8002958:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800295a:	f7fe ff15 	bl	8001788 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002962:	f7fe ff11 	bl	8001788 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e2dd      	b.n	8002f30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002974:	4b20      	ldr	r3, [pc, #128]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f0      	bne.n	8002962 <HAL_RCC_OscConfig+0x1da>
 8002980:	e000      	b.n	8002984 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002982:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d074      	beq.n	8002a7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	2b08      	cmp	r3, #8
 8002994:	d005      	beq.n	80029a2 <HAL_RCC_OscConfig+0x21a>
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	2b0c      	cmp	r3, #12
 800299a:	d10e      	bne.n	80029ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d10b      	bne.n	80029ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a2:	4b15      	ldr	r3, [pc, #84]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d064      	beq.n	8002a78 <HAL_RCC_OscConfig+0x2f0>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d160      	bne.n	8002a78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e2ba      	b.n	8002f30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029c2:	d106      	bne.n	80029d2 <HAL_RCC_OscConfig+0x24a>
 80029c4:	4b0c      	ldr	r3, [pc, #48]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a0b      	ldr	r2, [pc, #44]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 80029ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	e026      	b.n	8002a20 <HAL_RCC_OscConfig+0x298>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029da:	d115      	bne.n	8002a08 <HAL_RCC_OscConfig+0x280>
 80029dc:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a05      	ldr	r2, [pc, #20]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 80029e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029e6:	6013      	str	r3, [r2, #0]
 80029e8:	4b03      	ldr	r3, [pc, #12]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a02      	ldr	r2, [pc, #8]	@ (80029f8 <HAL_RCC_OscConfig+0x270>)
 80029ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	e014      	b.n	8002a20 <HAL_RCC_OscConfig+0x298>
 80029f6:	bf00      	nop
 80029f8:	40021000 	.word	0x40021000
 80029fc:	08009b84 	.word	0x08009b84
 8002a00:	20000000 	.word	0x20000000
 8002a04:	20000004 	.word	0x20000004
 8002a08:	4ba0      	ldr	r3, [pc, #640]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a9f      	ldr	r2, [pc, #636]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002a0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	4b9d      	ldr	r3, [pc, #628]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a9c      	ldr	r2, [pc, #624]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002a1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d013      	beq.n	8002a50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a28:	f7fe feae 	bl	8001788 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a30:	f7fe feaa 	bl	8001788 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b64      	cmp	r3, #100	@ 0x64
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e276      	b.n	8002f30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a42:	4b92      	ldr	r3, [pc, #584]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0x2a8>
 8002a4e:	e014      	b.n	8002a7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7fe fe9a 	bl	8001788 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a58:	f7fe fe96 	bl	8001788 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b64      	cmp	r3, #100	@ 0x64
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e262      	b.n	8002f30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a6a:	4b88      	ldr	r3, [pc, #544]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x2d0>
 8002a76:	e000      	b.n	8002a7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d060      	beq.n	8002b48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d005      	beq.n	8002a98 <HAL_RCC_OscConfig+0x310>
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	2b0c      	cmp	r3, #12
 8002a90:	d119      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d116      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a98:	4b7c      	ldr	r3, [pc, #496]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x328>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e23f      	b.n	8002f30 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab0:	4b76      	ldr	r3, [pc, #472]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	061b      	lsls	r3, r3, #24
 8002abe:	4973      	ldr	r1, [pc, #460]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ac4:	e040      	b.n	8002b48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d023      	beq.n	8002b16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ace:	4b6f      	ldr	r3, [pc, #444]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a6e      	ldr	r2, [pc, #440]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ada:	f7fe fe55 	bl	8001788 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ae2:	f7fe fe51 	bl	8001788 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e21d      	b.n	8002f30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002af4:	4b65      	ldr	r3, [pc, #404]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0f0      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b00:	4b62      	ldr	r3, [pc, #392]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	061b      	lsls	r3, r3, #24
 8002b0e:	495f      	ldr	r1, [pc, #380]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	604b      	str	r3, [r1, #4]
 8002b14:	e018      	b.n	8002b48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b16:	4b5d      	ldr	r3, [pc, #372]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a5c      	ldr	r2, [pc, #368]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002b1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b22:	f7fe fe31 	bl	8001788 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b2a:	f7fe fe2d 	bl	8001788 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e1f9      	b.n	8002f30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b3c:	4b53      	ldr	r3, [pc, #332]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1f0      	bne.n	8002b2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d03c      	beq.n	8002bce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d01c      	beq.n	8002b96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b5c:	4b4b      	ldr	r3, [pc, #300]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b62:	4a4a      	ldr	r2, [pc, #296]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6c:	f7fe fe0c 	bl	8001788 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b74:	f7fe fe08 	bl	8001788 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e1d4      	b.n	8002f30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b86:	4b41      	ldr	r3, [pc, #260]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0ef      	beq.n	8002b74 <HAL_RCC_OscConfig+0x3ec>
 8002b94:	e01b      	b.n	8002bce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b96:	4b3d      	ldr	r3, [pc, #244]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b9c:	4a3b      	ldr	r2, [pc, #236]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002b9e:	f023 0301 	bic.w	r3, r3, #1
 8002ba2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba6:	f7fe fdef 	bl	8001788 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bae:	f7fe fdeb 	bl	8001788 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e1b7      	b.n	8002f30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bc0:	4b32      	ldr	r3, [pc, #200]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1ef      	bne.n	8002bae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 80a6 	beq.w	8002d28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002be0:	4b2a      	ldr	r3, [pc, #168]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10d      	bne.n	8002c08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bec:	4b27      	ldr	r3, [pc, #156]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf0:	4a26      	ldr	r2, [pc, #152]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002bf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bf8:	4b24      	ldr	r3, [pc, #144]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c04:	2301      	movs	r3, #1
 8002c06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c08:	4b21      	ldr	r3, [pc, #132]	@ (8002c90 <HAL_RCC_OscConfig+0x508>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d118      	bne.n	8002c46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c14:	4b1e      	ldr	r3, [pc, #120]	@ (8002c90 <HAL_RCC_OscConfig+0x508>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a1d      	ldr	r2, [pc, #116]	@ (8002c90 <HAL_RCC_OscConfig+0x508>)
 8002c1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c20:	f7fe fdb2 	bl	8001788 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c28:	f7fe fdae 	bl	8001788 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e17a      	b.n	8002f30 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c3a:	4b15      	ldr	r3, [pc, #84]	@ (8002c90 <HAL_RCC_OscConfig+0x508>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d108      	bne.n	8002c60 <HAL_RCC_OscConfig+0x4d8>
 8002c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c54:	4a0d      	ldr	r2, [pc, #52]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c5e:	e029      	b.n	8002cb4 <HAL_RCC_OscConfig+0x52c>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	d115      	bne.n	8002c94 <HAL_RCC_OscConfig+0x50c>
 8002c68:	4b08      	ldr	r3, [pc, #32]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c6e:	4a07      	ldr	r2, [pc, #28]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002c70:	f043 0304 	orr.w	r3, r3, #4
 8002c74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c78:	4b04      	ldr	r3, [pc, #16]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7e:	4a03      	ldr	r2, [pc, #12]	@ (8002c8c <HAL_RCC_OscConfig+0x504>)
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c88:	e014      	b.n	8002cb4 <HAL_RCC_OscConfig+0x52c>
 8002c8a:	bf00      	nop
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	40007000 	.word	0x40007000
 8002c94:	4b9c      	ldr	r3, [pc, #624]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c9a:	4a9b      	ldr	r2, [pc, #620]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002c9c:	f023 0301 	bic.w	r3, r3, #1
 8002ca0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ca4:	4b98      	ldr	r3, [pc, #608]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002caa:	4a97      	ldr	r2, [pc, #604]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002cac:	f023 0304 	bic.w	r3, r3, #4
 8002cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d016      	beq.n	8002cea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbc:	f7fe fd64 	bl	8001788 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc4:	f7fe fd60 	bl	8001788 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e12a      	b.n	8002f30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cda:	4b8b      	ldr	r3, [pc, #556]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0ed      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x53c>
 8002ce8:	e015      	b.n	8002d16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cea:	f7fe fd4d 	bl	8001788 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf2:	f7fe fd49 	bl	8001788 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e113      	b.n	8002f30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d08:	4b7f      	ldr	r3, [pc, #508]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1ed      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d16:	7ffb      	ldrb	r3, [r7, #31]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d105      	bne.n	8002d28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d1c:	4b7a      	ldr	r3, [pc, #488]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d20:	4a79      	ldr	r2, [pc, #484]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002d22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d26:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 80fe 	beq.w	8002f2e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	f040 80d0 	bne.w	8002edc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d3c:	4b72      	ldr	r3, [pc, #456]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f003 0203 	and.w	r2, r3, #3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d130      	bne.n	8002db2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d127      	bne.n	8002db2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d11f      	bne.n	8002db2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d7c:	2a07      	cmp	r2, #7
 8002d7e:	bf14      	ite	ne
 8002d80:	2201      	movne	r2, #1
 8002d82:	2200      	moveq	r2, #0
 8002d84:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d113      	bne.n	8002db2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d94:	085b      	lsrs	r3, r3, #1
 8002d96:	3b01      	subs	r3, #1
 8002d98:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d109      	bne.n	8002db2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da8:	085b      	lsrs	r3, r3, #1
 8002daa:	3b01      	subs	r3, #1
 8002dac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d06e      	beq.n	8002e90 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	2b0c      	cmp	r3, #12
 8002db6:	d069      	beq.n	8002e8c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002db8:	4b53      	ldr	r3, [pc, #332]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d105      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002dc4:	4b50      	ldr	r3, [pc, #320]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e0ad      	b.n	8002f30 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002dd4:	4b4c      	ldr	r3, [pc, #304]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a4b      	ldr	r2, [pc, #300]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002dda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dde:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002de0:	f7fe fcd2 	bl	8001788 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de8:	f7fe fcce 	bl	8001788 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e09a      	b.n	8002f30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dfa:	4b43      	ldr	r3, [pc, #268]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e06:	4b40      	ldr	r3, [pc, #256]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	4b40      	ldr	r3, [pc, #256]	@ (8002f0c <HAL_RCC_OscConfig+0x784>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002e16:	3a01      	subs	r2, #1
 8002e18:	0112      	lsls	r2, r2, #4
 8002e1a:	4311      	orrs	r1, r2
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e20:	0212      	lsls	r2, r2, #8
 8002e22:	4311      	orrs	r1, r2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e28:	0852      	lsrs	r2, r2, #1
 8002e2a:	3a01      	subs	r2, #1
 8002e2c:	0552      	lsls	r2, r2, #21
 8002e2e:	4311      	orrs	r1, r2
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e34:	0852      	lsrs	r2, r2, #1
 8002e36:	3a01      	subs	r2, #1
 8002e38:	0652      	lsls	r2, r2, #25
 8002e3a:	4311      	orrs	r1, r2
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e40:	0912      	lsrs	r2, r2, #4
 8002e42:	0452      	lsls	r2, r2, #17
 8002e44:	430a      	orrs	r2, r1
 8002e46:	4930      	ldr	r1, [pc, #192]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e4c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a2d      	ldr	r2, [pc, #180]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002e52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e58:	4b2b      	ldr	r3, [pc, #172]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4a2a      	ldr	r2, [pc, #168]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002e5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e64:	f7fe fc90 	bl	8001788 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6c:	f7fe fc8c 	bl	8001788 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e058      	b.n	8002f30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e7e:	4b22      	ldr	r3, [pc, #136]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e8a:	e050      	b.n	8002f2e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e04f      	b.n	8002f30 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e90:	4b1d      	ldr	r3, [pc, #116]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d148      	bne.n	8002f2e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a19      	ldr	r2, [pc, #100]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002ea2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ea6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ea8:	4b17      	ldr	r3, [pc, #92]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	4a16      	ldr	r2, [pc, #88]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002eae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002eb4:	f7fe fc68 	bl	8001788 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ebc:	f7fe fc64 	bl	8001788 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e030      	b.n	8002f30 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ece:	4b0e      	ldr	r3, [pc, #56]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0f0      	beq.n	8002ebc <HAL_RCC_OscConfig+0x734>
 8002eda:	e028      	b.n	8002f2e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	2b0c      	cmp	r3, #12
 8002ee0:	d023      	beq.n	8002f2a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee2:	4b09      	ldr	r3, [pc, #36]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a08      	ldr	r2, [pc, #32]	@ (8002f08 <HAL_RCC_OscConfig+0x780>)
 8002ee8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002eec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eee:	f7fe fc4b 	bl	8001788 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ef4:	e00c      	b.n	8002f10 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef6:	f7fe fc47 	bl	8001788 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d905      	bls.n	8002f10 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e013      	b.n	8002f30 <HAL_RCC_OscConfig+0x7a8>
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f10:	4b09      	ldr	r3, [pc, #36]	@ (8002f38 <HAL_RCC_OscConfig+0x7b0>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1ec      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f1c:	4b06      	ldr	r3, [pc, #24]	@ (8002f38 <HAL_RCC_OscConfig+0x7b0>)
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	4905      	ldr	r1, [pc, #20]	@ (8002f38 <HAL_RCC_OscConfig+0x7b0>)
 8002f22:	4b06      	ldr	r3, [pc, #24]	@ (8002f3c <HAL_RCC_OscConfig+0x7b4>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	60cb      	str	r3, [r1, #12]
 8002f28:	e001      	b.n	8002f2e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3720      	adds	r7, #32
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	feeefffc 	.word	0xfeeefffc

08002f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0e7      	b.n	8003124 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f54:	4b75      	ldr	r3, [pc, #468]	@ (800312c <HAL_RCC_ClockConfig+0x1ec>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d910      	bls.n	8002f84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b72      	ldr	r3, [pc, #456]	@ (800312c <HAL_RCC_ClockConfig+0x1ec>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 0207 	bic.w	r2, r3, #7
 8002f6a:	4970      	ldr	r1, [pc, #448]	@ (800312c <HAL_RCC_ClockConfig+0x1ec>)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	4b6e      	ldr	r3, [pc, #440]	@ (800312c <HAL_RCC_ClockConfig+0x1ec>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0cf      	b.n	8003124 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d010      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	4b66      	ldr	r3, [pc, #408]	@ (8003130 <HAL_RCC_ClockConfig+0x1f0>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d908      	bls.n	8002fb2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa0:	4b63      	ldr	r3, [pc, #396]	@ (8003130 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	4960      	ldr	r1, [pc, #384]	@ (8003130 <HAL_RCC_ClockConfig+0x1f0>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d04c      	beq.n	8003058 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d107      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc6:	4b5a      	ldr	r3, [pc, #360]	@ (8003130 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d121      	bne.n	8003016 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e0a6      	b.n	8003124 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d107      	bne.n	8002fee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fde:	4b54      	ldr	r3, [pc, #336]	@ (8003130 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d115      	bne.n	8003016 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e09a      	b.n	8003124 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d107      	bne.n	8003006 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ff6:	4b4e      	ldr	r3, [pc, #312]	@ (8003130 <HAL_RCC_ClockConfig+0x1f0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d109      	bne.n	8003016 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e08e      	b.n	8003124 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003006:	4b4a      	ldr	r3, [pc, #296]	@ (8003130 <HAL_RCC_ClockConfig+0x1f0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e086      	b.n	8003124 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003016:	4b46      	ldr	r3, [pc, #280]	@ (8003130 <HAL_RCC_ClockConfig+0x1f0>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f023 0203 	bic.w	r2, r3, #3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	4943      	ldr	r1, [pc, #268]	@ (8003130 <HAL_RCC_ClockConfig+0x1f0>)
 8003024:	4313      	orrs	r3, r2
 8003026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003028:	f7fe fbae 	bl	8001788 <HAL_GetTick>
 800302c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302e:	e00a      	b.n	8003046 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003030:	f7fe fbaa 	bl	8001788 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e06e      	b.n	8003124 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003046:	4b3a      	ldr	r3, [pc, #232]	@ (8003130 <HAL_RCC_ClockConfig+0x1f0>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 020c 	and.w	r2, r3, #12
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	429a      	cmp	r2, r3
 8003056:	d1eb      	bne.n	8003030 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d010      	beq.n	8003086 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	4b31      	ldr	r3, [pc, #196]	@ (8003130 <HAL_RCC_ClockConfig+0x1f0>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003070:	429a      	cmp	r2, r3
 8003072:	d208      	bcs.n	8003086 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003074:	4b2e      	ldr	r3, [pc, #184]	@ (8003130 <HAL_RCC_ClockConfig+0x1f0>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	492b      	ldr	r1, [pc, #172]	@ (8003130 <HAL_RCC_ClockConfig+0x1f0>)
 8003082:	4313      	orrs	r3, r2
 8003084:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003086:	4b29      	ldr	r3, [pc, #164]	@ (800312c <HAL_RCC_ClockConfig+0x1ec>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d210      	bcs.n	80030b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003094:	4b25      	ldr	r3, [pc, #148]	@ (800312c <HAL_RCC_ClockConfig+0x1ec>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f023 0207 	bic.w	r2, r3, #7
 800309c:	4923      	ldr	r1, [pc, #140]	@ (800312c <HAL_RCC_ClockConfig+0x1ec>)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a4:	4b21      	ldr	r3, [pc, #132]	@ (800312c <HAL_RCC_ClockConfig+0x1ec>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d001      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e036      	b.n	8003124 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d008      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003130 <HAL_RCC_ClockConfig+0x1f0>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	4918      	ldr	r1, [pc, #96]	@ (8003130 <HAL_RCC_ClockConfig+0x1f0>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d009      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030e0:	4b13      	ldr	r3, [pc, #76]	@ (8003130 <HAL_RCC_ClockConfig+0x1f0>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4910      	ldr	r1, [pc, #64]	@ (8003130 <HAL_RCC_ClockConfig+0x1f0>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030f4:	f000 f824 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 80030f8:	4602      	mov	r2, r0
 80030fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003130 <HAL_RCC_ClockConfig+0x1f0>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	091b      	lsrs	r3, r3, #4
 8003100:	f003 030f 	and.w	r3, r3, #15
 8003104:	490b      	ldr	r1, [pc, #44]	@ (8003134 <HAL_RCC_ClockConfig+0x1f4>)
 8003106:	5ccb      	ldrb	r3, [r1, r3]
 8003108:	f003 031f 	and.w	r3, r3, #31
 800310c:	fa22 f303 	lsr.w	r3, r2, r3
 8003110:	4a09      	ldr	r2, [pc, #36]	@ (8003138 <HAL_RCC_ClockConfig+0x1f8>)
 8003112:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003114:	4b09      	ldr	r3, [pc, #36]	@ (800313c <HAL_RCC_ClockConfig+0x1fc>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f7fe fae5 	bl	80016e8 <HAL_InitTick>
 800311e:	4603      	mov	r3, r0
 8003120:	72fb      	strb	r3, [r7, #11]

  return status;
 8003122:	7afb      	ldrb	r3, [r7, #11]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40022000 	.word	0x40022000
 8003130:	40021000 	.word	0x40021000
 8003134:	08009b84 	.word	0x08009b84
 8003138:	20000000 	.word	0x20000000
 800313c:	20000004 	.word	0x20000004

08003140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003140:	b480      	push	{r7}
 8003142:	b089      	sub	sp, #36	@ 0x24
 8003144:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	2300      	movs	r3, #0
 800314c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800314e:	4b3e      	ldr	r3, [pc, #248]	@ (8003248 <HAL_RCC_GetSysClockFreq+0x108>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 030c 	and.w	r3, r3, #12
 8003156:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003158:	4b3b      	ldr	r3, [pc, #236]	@ (8003248 <HAL_RCC_GetSysClockFreq+0x108>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_RCC_GetSysClockFreq+0x34>
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	2b0c      	cmp	r3, #12
 800316c:	d121      	bne.n	80031b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d11e      	bne.n	80031b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003174:	4b34      	ldr	r3, [pc, #208]	@ (8003248 <HAL_RCC_GetSysClockFreq+0x108>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	2b00      	cmp	r3, #0
 800317e:	d107      	bne.n	8003190 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003180:	4b31      	ldr	r3, [pc, #196]	@ (8003248 <HAL_RCC_GetSysClockFreq+0x108>)
 8003182:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003186:	0a1b      	lsrs	r3, r3, #8
 8003188:	f003 030f 	and.w	r3, r3, #15
 800318c:	61fb      	str	r3, [r7, #28]
 800318e:	e005      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003190:	4b2d      	ldr	r3, [pc, #180]	@ (8003248 <HAL_RCC_GetSysClockFreq+0x108>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	091b      	lsrs	r3, r3, #4
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800319c:	4a2b      	ldr	r2, [pc, #172]	@ (800324c <HAL_RCC_GetSysClockFreq+0x10c>)
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10d      	bne.n	80031c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031b0:	e00a      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d102      	bne.n	80031be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031b8:	4b25      	ldr	r3, [pc, #148]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x110>)
 80031ba:	61bb      	str	r3, [r7, #24]
 80031bc:	e004      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d101      	bne.n	80031c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031c4:	4b23      	ldr	r3, [pc, #140]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x114>)
 80031c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	2b0c      	cmp	r3, #12
 80031cc:	d134      	bne.n	8003238 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003248 <HAL_RCC_GetSysClockFreq+0x108>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d003      	beq.n	80031e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d003      	beq.n	80031ec <HAL_RCC_GetSysClockFreq+0xac>
 80031e4:	e005      	b.n	80031f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x110>)
 80031e8:	617b      	str	r3, [r7, #20]
      break;
 80031ea:	e005      	b.n	80031f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031ec:	4b19      	ldr	r3, [pc, #100]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x114>)
 80031ee:	617b      	str	r3, [r7, #20]
      break;
 80031f0:	e002      	b.n	80031f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	617b      	str	r3, [r7, #20]
      break;
 80031f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031f8:	4b13      	ldr	r3, [pc, #76]	@ (8003248 <HAL_RCC_GetSysClockFreq+0x108>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	091b      	lsrs	r3, r3, #4
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	3301      	adds	r3, #1
 8003204:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003206:	4b10      	ldr	r3, [pc, #64]	@ (8003248 <HAL_RCC_GetSysClockFreq+0x108>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	0a1b      	lsrs	r3, r3, #8
 800320c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	fb03 f202 	mul.w	r2, r3, r2
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	fbb2 f3f3 	udiv	r3, r2, r3
 800321c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800321e:	4b0a      	ldr	r3, [pc, #40]	@ (8003248 <HAL_RCC_GetSysClockFreq+0x108>)
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	0e5b      	lsrs	r3, r3, #25
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	3301      	adds	r3, #1
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	fbb2 f3f3 	udiv	r3, r2, r3
 8003236:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003238:	69bb      	ldr	r3, [r7, #24]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3724      	adds	r7, #36	@ 0x24
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40021000 	.word	0x40021000
 800324c:	08009b9c 	.word	0x08009b9c
 8003250:	00f42400 	.word	0x00f42400
 8003254:	007a1200 	.word	0x007a1200

08003258 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800325c:	4b03      	ldr	r3, [pc, #12]	@ (800326c <HAL_RCC_GetHCLKFreq+0x14>)
 800325e:	681b      	ldr	r3, [r3, #0]
}
 8003260:	4618      	mov	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20000000 	.word	0x20000000

08003270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003274:	f7ff fff0 	bl	8003258 <HAL_RCC_GetHCLKFreq>
 8003278:	4602      	mov	r2, r0
 800327a:	4b06      	ldr	r3, [pc, #24]	@ (8003294 <HAL_RCC_GetPCLK1Freq+0x24>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	0a1b      	lsrs	r3, r3, #8
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	4904      	ldr	r1, [pc, #16]	@ (8003298 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003286:	5ccb      	ldrb	r3, [r1, r3]
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003290:	4618      	mov	r0, r3
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40021000 	.word	0x40021000
 8003298:	08009b94 	.word	0x08009b94

0800329c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032a0:	f7ff ffda 	bl	8003258 <HAL_RCC_GetHCLKFreq>
 80032a4:	4602      	mov	r2, r0
 80032a6:	4b06      	ldr	r3, [pc, #24]	@ (80032c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	0adb      	lsrs	r3, r3, #11
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	4904      	ldr	r1, [pc, #16]	@ (80032c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032b2:	5ccb      	ldrb	r3, [r1, r3]
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032bc:	4618      	mov	r0, r3
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40021000 	.word	0x40021000
 80032c4:	08009b94 	.word	0x08009b94

080032c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032d0:	2300      	movs	r3, #0
 80032d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003380 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032e0:	f7ff f922 	bl	8002528 <HAL_PWREx_GetVoltageRange>
 80032e4:	6178      	str	r0, [r7, #20]
 80032e6:	e014      	b.n	8003312 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032e8:	4b25      	ldr	r3, [pc, #148]	@ (8003380 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ec:	4a24      	ldr	r2, [pc, #144]	@ (8003380 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80032f4:	4b22      	ldr	r3, [pc, #136]	@ (8003380 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003300:	f7ff f912 	bl	8002528 <HAL_PWREx_GetVoltageRange>
 8003304:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003306:	4b1e      	ldr	r3, [pc, #120]	@ (8003380 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800330a:	4a1d      	ldr	r2, [pc, #116]	@ (8003380 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800330c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003310:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003318:	d10b      	bne.n	8003332 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b80      	cmp	r3, #128	@ 0x80
 800331e:	d919      	bls.n	8003354 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2ba0      	cmp	r3, #160	@ 0xa0
 8003324:	d902      	bls.n	800332c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003326:	2302      	movs	r3, #2
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	e013      	b.n	8003354 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800332c:	2301      	movs	r3, #1
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	e010      	b.n	8003354 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b80      	cmp	r3, #128	@ 0x80
 8003336:	d902      	bls.n	800333e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003338:	2303      	movs	r3, #3
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	e00a      	b.n	8003354 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b80      	cmp	r3, #128	@ 0x80
 8003342:	d102      	bne.n	800334a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003344:	2302      	movs	r3, #2
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	e004      	b.n	8003354 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b70      	cmp	r3, #112	@ 0x70
 800334e:	d101      	bne.n	8003354 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003350:	2301      	movs	r3, #1
 8003352:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003354:	4b0b      	ldr	r3, [pc, #44]	@ (8003384 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f023 0207 	bic.w	r2, r3, #7
 800335c:	4909      	ldr	r1, [pc, #36]	@ (8003384 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003364:	4b07      	ldr	r3, [pc, #28]	@ (8003384 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	429a      	cmp	r2, r3
 8003370:	d001      	beq.n	8003376 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40021000 	.word	0x40021000
 8003384:	40022000 	.word	0x40022000

08003388 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003390:	2300      	movs	r3, #0
 8003392:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003394:	2300      	movs	r3, #0
 8003396:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d041      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033a8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80033ac:	d02a      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80033ae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80033b2:	d824      	bhi.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033b8:	d008      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80033ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033be:	d81e      	bhi.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80033c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033c8:	d010      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033ca:	e018      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033cc:	4b86      	ldr	r3, [pc, #536]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4a85      	ldr	r2, [pc, #532]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033d8:	e015      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3304      	adds	r3, #4
 80033de:	2100      	movs	r1, #0
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 facb 	bl	800397c <RCCEx_PLLSAI1_Config>
 80033e6:	4603      	mov	r3, r0
 80033e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033ea:	e00c      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3320      	adds	r3, #32
 80033f0:	2100      	movs	r1, #0
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fbb6 	bl	8003b64 <RCCEx_PLLSAI2_Config>
 80033f8:	4603      	mov	r3, r0
 80033fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033fc:	e003      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	74fb      	strb	r3, [r7, #19]
      break;
 8003402:	e000      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003404:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003406:	7cfb      	ldrb	r3, [r7, #19]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10b      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800340c:	4b76      	ldr	r3, [pc, #472]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003412:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800341a:	4973      	ldr	r1, [pc, #460]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003422:	e001      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003424:	7cfb      	ldrb	r3, [r7, #19]
 8003426:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d041      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003438:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800343c:	d02a      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800343e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003442:	d824      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003444:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003448:	d008      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800344a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800344e:	d81e      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00a      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003454:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003458:	d010      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800345a:	e018      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800345c:	4b62      	ldr	r3, [pc, #392]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	4a61      	ldr	r2, [pc, #388]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003462:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003466:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003468:	e015      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3304      	adds	r3, #4
 800346e:	2100      	movs	r1, #0
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fa83 	bl	800397c <RCCEx_PLLSAI1_Config>
 8003476:	4603      	mov	r3, r0
 8003478:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800347a:	e00c      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3320      	adds	r3, #32
 8003480:	2100      	movs	r1, #0
 8003482:	4618      	mov	r0, r3
 8003484:	f000 fb6e 	bl	8003b64 <RCCEx_PLLSAI2_Config>
 8003488:	4603      	mov	r3, r0
 800348a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800348c:	e003      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	74fb      	strb	r3, [r7, #19]
      break;
 8003492:	e000      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003494:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003496:	7cfb      	ldrb	r3, [r7, #19]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10b      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800349c:	4b52      	ldr	r3, [pc, #328]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034aa:	494f      	ldr	r1, [pc, #316]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80034b2:	e001      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b4:	7cfb      	ldrb	r3, [r7, #19]
 80034b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 80a0 	beq.w	8003606 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c6:	2300      	movs	r3, #0
 80034c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034ca:	4b47      	ldr	r3, [pc, #284]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80034da:	2300      	movs	r3, #0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00d      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e0:	4b41      	ldr	r3, [pc, #260]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e4:	4a40      	ldr	r2, [pc, #256]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80034ec:	4b3e      	ldr	r3, [pc, #248]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034f8:	2301      	movs	r3, #1
 80034fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034fc:	4b3b      	ldr	r3, [pc, #236]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a3a      	ldr	r2, [pc, #232]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003502:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003506:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003508:	f7fe f93e 	bl	8001788 <HAL_GetTick>
 800350c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800350e:	e009      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003510:	f7fe f93a 	bl	8001788 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d902      	bls.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	74fb      	strb	r3, [r7, #19]
        break;
 8003522:	e005      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003524:	4b31      	ldr	r3, [pc, #196]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0ef      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003530:	7cfb      	ldrb	r3, [r7, #19]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d15c      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003536:	4b2c      	ldr	r3, [pc, #176]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800353c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003540:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01f      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	429a      	cmp	r2, r3
 8003552:	d019      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003554:	4b24      	ldr	r3, [pc, #144]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800355a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800355e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003560:	4b21      	ldr	r3, [pc, #132]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003566:	4a20      	ldr	r2, [pc, #128]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800356c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003570:	4b1d      	ldr	r3, [pc, #116]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003576:	4a1c      	ldr	r2, [pc, #112]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003578:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800357c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003580:	4a19      	ldr	r2, [pc, #100]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d016      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003592:	f7fe f8f9 	bl	8001788 <HAL_GetTick>
 8003596:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003598:	e00b      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359a:	f7fe f8f5 	bl	8001788 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d902      	bls.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	74fb      	strb	r3, [r7, #19]
            break;
 80035b0:	e006      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035b2:	4b0d      	ldr	r3, [pc, #52]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0ec      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80035c0:	7cfb      	ldrb	r3, [r7, #19]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10c      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035c6:	4b08      	ldr	r3, [pc, #32]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035d6:	4904      	ldr	r1, [pc, #16]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80035de:	e009      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035e0:	7cfb      	ldrb	r3, [r7, #19]
 80035e2:	74bb      	strb	r3, [r7, #18]
 80035e4:	e006      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80035e6:	bf00      	nop
 80035e8:	40021000 	.word	0x40021000
 80035ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f0:	7cfb      	ldrb	r3, [r7, #19]
 80035f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035f4:	7c7b      	ldrb	r3, [r7, #17]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d105      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035fa:	4b9e      	ldr	r3, [pc, #632]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fe:	4a9d      	ldr	r2, [pc, #628]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003600:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003604:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003612:	4b98      	ldr	r3, [pc, #608]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003618:	f023 0203 	bic.w	r2, r3, #3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003620:	4994      	ldr	r1, [pc, #592]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003634:	4b8f      	ldr	r3, [pc, #572]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800363a:	f023 020c 	bic.w	r2, r3, #12
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003642:	498c      	ldr	r1, [pc, #560]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003656:	4b87      	ldr	r3, [pc, #540]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003664:	4983      	ldr	r1, [pc, #524]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003678:	4b7e      	ldr	r3, [pc, #504]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003686:	497b      	ldr	r1, [pc, #492]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0310 	and.w	r3, r3, #16
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800369a:	4b76      	ldr	r3, [pc, #472]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036a8:	4972      	ldr	r1, [pc, #456]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0320 	and.w	r3, r3, #32
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036bc:	4b6d      	ldr	r3, [pc, #436]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ca:	496a      	ldr	r1, [pc, #424]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036de:	4b65      	ldr	r3, [pc, #404]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ec:	4961      	ldr	r1, [pc, #388]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00a      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003700:	4b5c      	ldr	r3, [pc, #368]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003706:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800370e:	4959      	ldr	r1, [pc, #356]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003722:	4b54      	ldr	r3, [pc, #336]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003728:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003730:	4950      	ldr	r1, [pc, #320]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003744:	4b4b      	ldr	r3, [pc, #300]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800374a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003752:	4948      	ldr	r1, [pc, #288]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003766:	4b43      	ldr	r3, [pc, #268]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800376c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003774:	493f      	ldr	r1, [pc, #252]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d028      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003788:	4b3a      	ldr	r3, [pc, #232]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003796:	4937      	ldr	r1, [pc, #220]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037a6:	d106      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037a8:	4b32      	ldr	r3, [pc, #200]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	4a31      	ldr	r2, [pc, #196]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037b2:	60d3      	str	r3, [r2, #12]
 80037b4:	e011      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037be:	d10c      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3304      	adds	r3, #4
 80037c4:	2101      	movs	r1, #1
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 f8d8 	bl	800397c <RCCEx_PLLSAI1_Config>
 80037cc:	4603      	mov	r3, r0
 80037ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037d0:	7cfb      	ldrb	r3, [r7, #19]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80037d6:	7cfb      	ldrb	r3, [r7, #19]
 80037d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d028      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037e6:	4b23      	ldr	r3, [pc, #140]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ec:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f4:	491f      	ldr	r1, [pc, #124]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003800:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003804:	d106      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003806:	4b1b      	ldr	r3, [pc, #108]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	4a1a      	ldr	r2, [pc, #104]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003810:	60d3      	str	r3, [r2, #12]
 8003812:	e011      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003818:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800381c:	d10c      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3304      	adds	r3, #4
 8003822:	2101      	movs	r1, #1
 8003824:	4618      	mov	r0, r3
 8003826:	f000 f8a9 	bl	800397c <RCCEx_PLLSAI1_Config>
 800382a:	4603      	mov	r3, r0
 800382c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800382e:	7cfb      	ldrb	r3, [r7, #19]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003834:	7cfb      	ldrb	r3, [r7, #19]
 8003836:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d02b      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003844:	4b0b      	ldr	r3, [pc, #44]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800384a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003852:	4908      	ldr	r1, [pc, #32]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800385e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003862:	d109      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003864:	4b03      	ldr	r3, [pc, #12]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	4a02      	ldr	r2, [pc, #8]	@ (8003874 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800386e:	60d3      	str	r3, [r2, #12]
 8003870:	e014      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003872:	bf00      	nop
 8003874:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800387c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003880:	d10c      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3304      	adds	r3, #4
 8003886:	2101      	movs	r1, #1
 8003888:	4618      	mov	r0, r3
 800388a:	f000 f877 	bl	800397c <RCCEx_PLLSAI1_Config>
 800388e:	4603      	mov	r3, r0
 8003890:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003892:	7cfb      	ldrb	r3, [r7, #19]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003898:	7cfb      	ldrb	r3, [r7, #19]
 800389a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d02f      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038b6:	4928      	ldr	r1, [pc, #160]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038c6:	d10d      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3304      	adds	r3, #4
 80038cc:	2102      	movs	r1, #2
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 f854 	bl	800397c <RCCEx_PLLSAI1_Config>
 80038d4:	4603      	mov	r3, r0
 80038d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038d8:	7cfb      	ldrb	r3, [r7, #19]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d014      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038de:	7cfb      	ldrb	r3, [r7, #19]
 80038e0:	74bb      	strb	r3, [r7, #18]
 80038e2:	e011      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038ec:	d10c      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3320      	adds	r3, #32
 80038f2:	2102      	movs	r1, #2
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 f935 	bl	8003b64 <RCCEx_PLLSAI2_Config>
 80038fa:	4603      	mov	r3, r0
 80038fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038fe:	7cfb      	ldrb	r3, [r7, #19]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003904:	7cfb      	ldrb	r3, [r7, #19]
 8003906:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003914:	4b10      	ldr	r3, [pc, #64]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003922:	490d      	ldr	r1, [pc, #52]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003924:	4313      	orrs	r3, r2
 8003926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00b      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003936:	4b08      	ldr	r3, [pc, #32]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800393c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003946:	4904      	ldr	r1, [pc, #16]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800394e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000

0800395c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003960:	4b05      	ldr	r3, [pc, #20]	@ (8003978 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a04      	ldr	r2, [pc, #16]	@ (8003978 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003966:	f043 0304 	orr.w	r3, r3, #4
 800396a:	6013      	str	r3, [r2, #0]
}
 800396c:	bf00      	nop
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40021000 	.word	0x40021000

0800397c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800398a:	4b75      	ldr	r3, [pc, #468]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d018      	beq.n	80039c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003996:	4b72      	ldr	r3, [pc, #456]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f003 0203 	and.w	r2, r3, #3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d10d      	bne.n	80039c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
       ||
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d009      	beq.n	80039c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80039ae:	4b6c      	ldr	r3, [pc, #432]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
       ||
 80039be:	429a      	cmp	r2, r3
 80039c0:	d047      	beq.n	8003a52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	73fb      	strb	r3, [r7, #15]
 80039c6:	e044      	b.n	8003a52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d018      	beq.n	8003a02 <RCCEx_PLLSAI1_Config+0x86>
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d825      	bhi.n	8003a20 <RCCEx_PLLSAI1_Config+0xa4>
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d002      	beq.n	80039de <RCCEx_PLLSAI1_Config+0x62>
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d009      	beq.n	80039f0 <RCCEx_PLLSAI1_Config+0x74>
 80039dc:	e020      	b.n	8003a20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039de:	4b60      	ldr	r3, [pc, #384]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d11d      	bne.n	8003a26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ee:	e01a      	b.n	8003a26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039f0:	4b5b      	ldr	r3, [pc, #364]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d116      	bne.n	8003a2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a00:	e013      	b.n	8003a2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a02:	4b57      	ldr	r3, [pc, #348]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10f      	bne.n	8003a2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a0e:	4b54      	ldr	r3, [pc, #336]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a1e:	e006      	b.n	8003a2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	73fb      	strb	r3, [r7, #15]
      break;
 8003a24:	e004      	b.n	8003a30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a26:	bf00      	nop
 8003a28:	e002      	b.n	8003a30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a2a:	bf00      	nop
 8003a2c:	e000      	b.n	8003a30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10d      	bne.n	8003a52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a36:	4b4a      	ldr	r3, [pc, #296]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6819      	ldr	r1, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	430b      	orrs	r3, r1
 8003a4c:	4944      	ldr	r1, [pc, #272]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d17d      	bne.n	8003b54 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a58:	4b41      	ldr	r3, [pc, #260]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a40      	ldr	r2, [pc, #256]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a64:	f7fd fe90 	bl	8001788 <HAL_GetTick>
 8003a68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a6a:	e009      	b.n	8003a80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a6c:	f7fd fe8c 	bl	8001788 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d902      	bls.n	8003a80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a7e:	e005      	b.n	8003a8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a80:	4b37      	ldr	r3, [pc, #220]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1ef      	bne.n	8003a6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d160      	bne.n	8003b54 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d111      	bne.n	8003abc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a98:	4b31      	ldr	r3, [pc, #196]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003aa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6892      	ldr	r2, [r2, #8]
 8003aa8:	0211      	lsls	r1, r2, #8
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	68d2      	ldr	r2, [r2, #12]
 8003aae:	0912      	lsrs	r2, r2, #4
 8003ab0:	0452      	lsls	r2, r2, #17
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	492a      	ldr	r1, [pc, #168]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	610b      	str	r3, [r1, #16]
 8003aba:	e027      	b.n	8003b0c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d112      	bne.n	8003ae8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ac2:	4b27      	ldr	r3, [pc, #156]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003aca:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6892      	ldr	r2, [r2, #8]
 8003ad2:	0211      	lsls	r1, r2, #8
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6912      	ldr	r2, [r2, #16]
 8003ad8:	0852      	lsrs	r2, r2, #1
 8003ada:	3a01      	subs	r2, #1
 8003adc:	0552      	lsls	r2, r2, #21
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	491f      	ldr	r1, [pc, #124]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	610b      	str	r3, [r1, #16]
 8003ae6:	e011      	b.n	8003b0c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003af0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6892      	ldr	r2, [r2, #8]
 8003af8:	0211      	lsls	r1, r2, #8
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6952      	ldr	r2, [r2, #20]
 8003afe:	0852      	lsrs	r2, r2, #1
 8003b00:	3a01      	subs	r2, #1
 8003b02:	0652      	lsls	r2, r2, #25
 8003b04:	430a      	orrs	r2, r1
 8003b06:	4916      	ldr	r1, [pc, #88]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b0c:	4b14      	ldr	r3, [pc, #80]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a13      	ldr	r2, [pc, #76]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b18:	f7fd fe36 	bl	8001788 <HAL_GetTick>
 8003b1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b1e:	e009      	b.n	8003b34 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b20:	f7fd fe32 	bl	8001788 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d902      	bls.n	8003b34 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	73fb      	strb	r3, [r7, #15]
          break;
 8003b32:	e005      	b.n	8003b40 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b34:	4b0a      	ldr	r3, [pc, #40]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0ef      	beq.n	8003b20 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d106      	bne.n	8003b54 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b46:	4b06      	ldr	r3, [pc, #24]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b48:	691a      	ldr	r2, [r3, #16]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	4904      	ldr	r1, [pc, #16]	@ (8003b60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000

08003b64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b72:	4b6a      	ldr	r3, [pc, #424]	@ (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d018      	beq.n	8003bb0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b7e:	4b67      	ldr	r3, [pc, #412]	@ (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f003 0203 	and.w	r2, r3, #3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d10d      	bne.n	8003baa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
       ||
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d009      	beq.n	8003baa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b96:	4b61      	ldr	r3, [pc, #388]	@ (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	091b      	lsrs	r3, r3, #4
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
       ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d047      	beq.n	8003c3a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	73fb      	strb	r3, [r7, #15]
 8003bae:	e044      	b.n	8003c3a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d018      	beq.n	8003bea <RCCEx_PLLSAI2_Config+0x86>
 8003bb8:	2b03      	cmp	r3, #3
 8003bba:	d825      	bhi.n	8003c08 <RCCEx_PLLSAI2_Config+0xa4>
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d002      	beq.n	8003bc6 <RCCEx_PLLSAI2_Config+0x62>
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d009      	beq.n	8003bd8 <RCCEx_PLLSAI2_Config+0x74>
 8003bc4:	e020      	b.n	8003c08 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bc6:	4b55      	ldr	r3, [pc, #340]	@ (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d11d      	bne.n	8003c0e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bd6:	e01a      	b.n	8003c0e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bd8:	4b50      	ldr	r3, [pc, #320]	@ (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d116      	bne.n	8003c12 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003be8:	e013      	b.n	8003c12 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bea:	4b4c      	ldr	r3, [pc, #304]	@ (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10f      	bne.n	8003c16 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bf6:	4b49      	ldr	r3, [pc, #292]	@ (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d109      	bne.n	8003c16 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c06:	e006      	b.n	8003c16 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c0c:	e004      	b.n	8003c18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c0e:	bf00      	nop
 8003c10:	e002      	b.n	8003c18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c12:	bf00      	nop
 8003c14:	e000      	b.n	8003c18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c16:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10d      	bne.n	8003c3a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c1e:	4b3f      	ldr	r3, [pc, #252]	@ (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6819      	ldr	r1, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	430b      	orrs	r3, r1
 8003c34:	4939      	ldr	r1, [pc, #228]	@ (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d167      	bne.n	8003d10 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c40:	4b36      	ldr	r3, [pc, #216]	@ (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a35      	ldr	r2, [pc, #212]	@ (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c4c:	f7fd fd9c 	bl	8001788 <HAL_GetTick>
 8003c50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c52:	e009      	b.n	8003c68 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c54:	f7fd fd98 	bl	8001788 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d902      	bls.n	8003c68 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	73fb      	strb	r3, [r7, #15]
        break;
 8003c66:	e005      	b.n	8003c74 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c68:	4b2c      	ldr	r3, [pc, #176]	@ (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1ef      	bne.n	8003c54 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d14a      	bne.n	8003d10 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d111      	bne.n	8003ca4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c80:	4b26      	ldr	r3, [pc, #152]	@ (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003c88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6892      	ldr	r2, [r2, #8]
 8003c90:	0211      	lsls	r1, r2, #8
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	68d2      	ldr	r2, [r2, #12]
 8003c96:	0912      	lsrs	r2, r2, #4
 8003c98:	0452      	lsls	r2, r2, #17
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	491f      	ldr	r1, [pc, #124]	@ (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	614b      	str	r3, [r1, #20]
 8003ca2:	e011      	b.n	8003cc8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003cac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6892      	ldr	r2, [r2, #8]
 8003cb4:	0211      	lsls	r1, r2, #8
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6912      	ldr	r2, [r2, #16]
 8003cba:	0852      	lsrs	r2, r2, #1
 8003cbc:	3a01      	subs	r2, #1
 8003cbe:	0652      	lsls	r2, r2, #25
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	4916      	ldr	r1, [pc, #88]	@ (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003cc8:	4b14      	ldr	r3, [pc, #80]	@ (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a13      	ldr	r2, [pc, #76]	@ (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd4:	f7fd fd58 	bl	8001788 <HAL_GetTick>
 8003cd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cda:	e009      	b.n	8003cf0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cdc:	f7fd fd54 	bl	8001788 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d902      	bls.n	8003cf0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	73fb      	strb	r3, [r7, #15]
          break;
 8003cee:	e005      	b.n	8003cfc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0ef      	beq.n	8003cdc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d02:	4b06      	ldr	r3, [pc, #24]	@ (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	4904      	ldr	r1, [pc, #16]	@ (8003d1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40021000 	.word	0x40021000

08003d20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e095      	b.n	8003e5e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d108      	bne.n	8003d4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d42:	d009      	beq.n	8003d58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	61da      	str	r2, [r3, #28]
 8003d4a:	e005      	b.n	8003d58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d106      	bne.n	8003d78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7fd fa5e 	bl	8001234 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d98:	d902      	bls.n	8003da0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	e002      	b.n	8003da6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003da0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003da4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003dae:	d007      	beq.n	8003dc0 <HAL_SPI_Init+0xa0>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003db8:	d002      	beq.n	8003dc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e02:	ea42 0103 	orr.w	r1, r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	0c1b      	lsrs	r3, r3, #16
 8003e1c:	f003 0204 	and.w	r2, r3, #4
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e24:	f003 0310 	and.w	r3, r3, #16
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003e3c:	ea42 0103 	orr.w	r1, r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b082      	sub	sp, #8
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e049      	b.n	8003f0c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d106      	bne.n	8003e92 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7fd fa15 	bl	80012bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2202      	movs	r2, #2
 8003e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	f000 f96f 	bl	8004188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d020      	beq.n	8003f78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01b      	beq.n	8003f78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f06f 0202 	mvn.w	r2, #2
 8003f48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f8f3 	bl	800414a <HAL_TIM_IC_CaptureCallback>
 8003f64:	e005      	b.n	8003f72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f8e5 	bl	8004136 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f8f6 	bl	800415e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d020      	beq.n	8003fc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d01b      	beq.n	8003fc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f06f 0204 	mvn.w	r2, #4
 8003f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2202      	movs	r2, #2
 8003f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f8cd 	bl	800414a <HAL_TIM_IC_CaptureCallback>
 8003fb0:	e005      	b.n	8003fbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f8bf 	bl	8004136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f8d0 	bl	800415e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d020      	beq.n	8004010 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d01b      	beq.n	8004010 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f06f 0208 	mvn.w	r2, #8
 8003fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2204      	movs	r2, #4
 8003fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f8a7 	bl	800414a <HAL_TIM_IC_CaptureCallback>
 8003ffc:	e005      	b.n	800400a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f899 	bl	8004136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f8aa 	bl	800415e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	2b00      	cmp	r3, #0
 8004018:	d020      	beq.n	800405c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01b      	beq.n	800405c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0210 	mvn.w	r2, #16
 800402c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2208      	movs	r2, #8
 8004032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f881 	bl	800414a <HAL_TIM_IC_CaptureCallback>
 8004048:	e005      	b.n	8004056 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f873 	bl	8004136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f884 	bl	800415e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00c      	beq.n	8004080 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d007      	beq.n	8004080 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0201 	mvn.w	r2, #1
 8004078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f851 	bl	8004122 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004086:	2b00      	cmp	r3, #0
 8004088:	d104      	bne.n	8004094 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00c      	beq.n	80040ae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800409a:	2b00      	cmp	r3, #0
 800409c:	d007      	beq.n	80040ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80040a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f9a5 	bl	80043f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00c      	beq.n	80040d2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d007      	beq.n	80040d2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80040ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f99d 	bl	800440c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00c      	beq.n	80040f6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d007      	beq.n	80040f6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f83e 	bl	8004172 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00c      	beq.n	800411a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f003 0320 	and.w	r3, r3, #32
 8004106:	2b00      	cmp	r3, #0
 8004108:	d007      	beq.n	800411a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f06f 0220 	mvn.w	r2, #32
 8004112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f965 	bl	80043e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800411a:	bf00      	nop
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
	...

08004188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a46      	ldr	r2, [pc, #280]	@ (80042b4 <TIM_Base_SetConfig+0x12c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d013      	beq.n	80041c8 <TIM_Base_SetConfig+0x40>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041a6:	d00f      	beq.n	80041c8 <TIM_Base_SetConfig+0x40>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a43      	ldr	r2, [pc, #268]	@ (80042b8 <TIM_Base_SetConfig+0x130>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d00b      	beq.n	80041c8 <TIM_Base_SetConfig+0x40>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a42      	ldr	r2, [pc, #264]	@ (80042bc <TIM_Base_SetConfig+0x134>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d007      	beq.n	80041c8 <TIM_Base_SetConfig+0x40>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a41      	ldr	r2, [pc, #260]	@ (80042c0 <TIM_Base_SetConfig+0x138>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d003      	beq.n	80041c8 <TIM_Base_SetConfig+0x40>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a40      	ldr	r2, [pc, #256]	@ (80042c4 <TIM_Base_SetConfig+0x13c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d108      	bne.n	80041da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a35      	ldr	r2, [pc, #212]	@ (80042b4 <TIM_Base_SetConfig+0x12c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d01f      	beq.n	8004222 <TIM_Base_SetConfig+0x9a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041e8:	d01b      	beq.n	8004222 <TIM_Base_SetConfig+0x9a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a32      	ldr	r2, [pc, #200]	@ (80042b8 <TIM_Base_SetConfig+0x130>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d017      	beq.n	8004222 <TIM_Base_SetConfig+0x9a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a31      	ldr	r2, [pc, #196]	@ (80042bc <TIM_Base_SetConfig+0x134>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d013      	beq.n	8004222 <TIM_Base_SetConfig+0x9a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a30      	ldr	r2, [pc, #192]	@ (80042c0 <TIM_Base_SetConfig+0x138>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00f      	beq.n	8004222 <TIM_Base_SetConfig+0x9a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a2f      	ldr	r2, [pc, #188]	@ (80042c4 <TIM_Base_SetConfig+0x13c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00b      	beq.n	8004222 <TIM_Base_SetConfig+0x9a>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a2e      	ldr	r2, [pc, #184]	@ (80042c8 <TIM_Base_SetConfig+0x140>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d007      	beq.n	8004222 <TIM_Base_SetConfig+0x9a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a2d      	ldr	r2, [pc, #180]	@ (80042cc <TIM_Base_SetConfig+0x144>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d003      	beq.n	8004222 <TIM_Base_SetConfig+0x9a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a2c      	ldr	r2, [pc, #176]	@ (80042d0 <TIM_Base_SetConfig+0x148>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d108      	bne.n	8004234 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4313      	orrs	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a16      	ldr	r2, [pc, #88]	@ (80042b4 <TIM_Base_SetConfig+0x12c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d00f      	beq.n	8004280 <TIM_Base_SetConfig+0xf8>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a18      	ldr	r2, [pc, #96]	@ (80042c4 <TIM_Base_SetConfig+0x13c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d00b      	beq.n	8004280 <TIM_Base_SetConfig+0xf8>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a17      	ldr	r2, [pc, #92]	@ (80042c8 <TIM_Base_SetConfig+0x140>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d007      	beq.n	8004280 <TIM_Base_SetConfig+0xf8>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a16      	ldr	r2, [pc, #88]	@ (80042cc <TIM_Base_SetConfig+0x144>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d003      	beq.n	8004280 <TIM_Base_SetConfig+0xf8>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a15      	ldr	r2, [pc, #84]	@ (80042d0 <TIM_Base_SetConfig+0x148>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d103      	bne.n	8004288 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	691a      	ldr	r2, [r3, #16]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b01      	cmp	r3, #1
 8004298:	d105      	bne.n	80042a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f023 0201 	bic.w	r2, r3, #1
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	611a      	str	r2, [r3, #16]
  }
}
 80042a6:	bf00      	nop
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	40012c00 	.word	0x40012c00
 80042b8:	40000400 	.word	0x40000400
 80042bc:	40000800 	.word	0x40000800
 80042c0:	40000c00 	.word	0x40000c00
 80042c4:	40013400 	.word	0x40013400
 80042c8:	40014000 	.word	0x40014000
 80042cc:	40014400 	.word	0x40014400
 80042d0:	40014800 	.word	0x40014800

080042d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e068      	b.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a2e      	ldr	r2, [pc, #184]	@ (80043cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d004      	beq.n	8004320 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a2d      	ldr	r2, [pc, #180]	@ (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d108      	bne.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004326:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004338:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	4313      	orrs	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a1e      	ldr	r2, [pc, #120]	@ (80043cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d01d      	beq.n	8004392 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800435e:	d018      	beq.n	8004392 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a1b      	ldr	r2, [pc, #108]	@ (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d013      	beq.n	8004392 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a1a      	ldr	r2, [pc, #104]	@ (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00e      	beq.n	8004392 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a18      	ldr	r2, [pc, #96]	@ (80043dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d009      	beq.n	8004392 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a13      	ldr	r2, [pc, #76]	@ (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d004      	beq.n	8004392 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a14      	ldr	r2, [pc, #80]	@ (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d10c      	bne.n	80043ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004398:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40012c00 	.word	0x40012c00
 80043d0:	40013400 	.word	0x40013400
 80043d4:	40000400 	.word	0x40000400
 80043d8:	40000800 	.word	0x40000800
 80043dc:	40000c00 	.word	0x40000c00
 80043e0:	40014000 	.word	0x40014000

080043e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e040      	b.n	80044b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004436:	2b00      	cmp	r3, #0
 8004438:	d106      	bne.n	8004448 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7fc ff60 	bl	8001308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2224      	movs	r2, #36	@ 0x24
 800444c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0201 	bic.w	r2, r2, #1
 800445c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fae0 	bl	8004a2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f825 	bl	80044bc <UART_SetConfig>
 8004472:	4603      	mov	r3, r0
 8004474:	2b01      	cmp	r3, #1
 8004476:	d101      	bne.n	800447c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e01b      	b.n	80044b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800448a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800449a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 fb5f 	bl	8004b70 <UART_CheckIdleState>
 80044b2:	4603      	mov	r3, r0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044c0:	b08a      	sub	sp, #40	@ 0x28
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	431a      	orrs	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	431a      	orrs	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	4ba4      	ldr	r3, [pc, #656]	@ (800477c <UART_SetConfig+0x2c0>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	6812      	ldr	r2, [r2, #0]
 80044f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044f4:	430b      	orrs	r3, r1
 80044f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a99      	ldr	r2, [pc, #612]	@ (8004780 <UART_SetConfig+0x2c4>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d004      	beq.n	8004528 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004524:	4313      	orrs	r3, r2
 8004526:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004538:	430a      	orrs	r2, r1
 800453a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a90      	ldr	r2, [pc, #576]	@ (8004784 <UART_SetConfig+0x2c8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d126      	bne.n	8004594 <UART_SetConfig+0xd8>
 8004546:	4b90      	ldr	r3, [pc, #576]	@ (8004788 <UART_SetConfig+0x2cc>)
 8004548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	2b03      	cmp	r3, #3
 8004552:	d81b      	bhi.n	800458c <UART_SetConfig+0xd0>
 8004554:	a201      	add	r2, pc, #4	@ (adr r2, 800455c <UART_SetConfig+0xa0>)
 8004556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455a:	bf00      	nop
 800455c:	0800456d 	.word	0x0800456d
 8004560:	0800457d 	.word	0x0800457d
 8004564:	08004575 	.word	0x08004575
 8004568:	08004585 	.word	0x08004585
 800456c:	2301      	movs	r3, #1
 800456e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004572:	e116      	b.n	80047a2 <UART_SetConfig+0x2e6>
 8004574:	2302      	movs	r3, #2
 8004576:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800457a:	e112      	b.n	80047a2 <UART_SetConfig+0x2e6>
 800457c:	2304      	movs	r3, #4
 800457e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004582:	e10e      	b.n	80047a2 <UART_SetConfig+0x2e6>
 8004584:	2308      	movs	r3, #8
 8004586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800458a:	e10a      	b.n	80047a2 <UART_SetConfig+0x2e6>
 800458c:	2310      	movs	r3, #16
 800458e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004592:	e106      	b.n	80047a2 <UART_SetConfig+0x2e6>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a7c      	ldr	r2, [pc, #496]	@ (800478c <UART_SetConfig+0x2d0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d138      	bne.n	8004610 <UART_SetConfig+0x154>
 800459e:	4b7a      	ldr	r3, [pc, #488]	@ (8004788 <UART_SetConfig+0x2cc>)
 80045a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a4:	f003 030c 	and.w	r3, r3, #12
 80045a8:	2b0c      	cmp	r3, #12
 80045aa:	d82d      	bhi.n	8004608 <UART_SetConfig+0x14c>
 80045ac:	a201      	add	r2, pc, #4	@ (adr r2, 80045b4 <UART_SetConfig+0xf8>)
 80045ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b2:	bf00      	nop
 80045b4:	080045e9 	.word	0x080045e9
 80045b8:	08004609 	.word	0x08004609
 80045bc:	08004609 	.word	0x08004609
 80045c0:	08004609 	.word	0x08004609
 80045c4:	080045f9 	.word	0x080045f9
 80045c8:	08004609 	.word	0x08004609
 80045cc:	08004609 	.word	0x08004609
 80045d0:	08004609 	.word	0x08004609
 80045d4:	080045f1 	.word	0x080045f1
 80045d8:	08004609 	.word	0x08004609
 80045dc:	08004609 	.word	0x08004609
 80045e0:	08004609 	.word	0x08004609
 80045e4:	08004601 	.word	0x08004601
 80045e8:	2300      	movs	r3, #0
 80045ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ee:	e0d8      	b.n	80047a2 <UART_SetConfig+0x2e6>
 80045f0:	2302      	movs	r3, #2
 80045f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045f6:	e0d4      	b.n	80047a2 <UART_SetConfig+0x2e6>
 80045f8:	2304      	movs	r3, #4
 80045fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045fe:	e0d0      	b.n	80047a2 <UART_SetConfig+0x2e6>
 8004600:	2308      	movs	r3, #8
 8004602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004606:	e0cc      	b.n	80047a2 <UART_SetConfig+0x2e6>
 8004608:	2310      	movs	r3, #16
 800460a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800460e:	e0c8      	b.n	80047a2 <UART_SetConfig+0x2e6>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a5e      	ldr	r2, [pc, #376]	@ (8004790 <UART_SetConfig+0x2d4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d125      	bne.n	8004666 <UART_SetConfig+0x1aa>
 800461a:	4b5b      	ldr	r3, [pc, #364]	@ (8004788 <UART_SetConfig+0x2cc>)
 800461c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004620:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004624:	2b30      	cmp	r3, #48	@ 0x30
 8004626:	d016      	beq.n	8004656 <UART_SetConfig+0x19a>
 8004628:	2b30      	cmp	r3, #48	@ 0x30
 800462a:	d818      	bhi.n	800465e <UART_SetConfig+0x1a2>
 800462c:	2b20      	cmp	r3, #32
 800462e:	d00a      	beq.n	8004646 <UART_SetConfig+0x18a>
 8004630:	2b20      	cmp	r3, #32
 8004632:	d814      	bhi.n	800465e <UART_SetConfig+0x1a2>
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <UART_SetConfig+0x182>
 8004638:	2b10      	cmp	r3, #16
 800463a:	d008      	beq.n	800464e <UART_SetConfig+0x192>
 800463c:	e00f      	b.n	800465e <UART_SetConfig+0x1a2>
 800463e:	2300      	movs	r3, #0
 8004640:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004644:	e0ad      	b.n	80047a2 <UART_SetConfig+0x2e6>
 8004646:	2302      	movs	r3, #2
 8004648:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800464c:	e0a9      	b.n	80047a2 <UART_SetConfig+0x2e6>
 800464e:	2304      	movs	r3, #4
 8004650:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004654:	e0a5      	b.n	80047a2 <UART_SetConfig+0x2e6>
 8004656:	2308      	movs	r3, #8
 8004658:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800465c:	e0a1      	b.n	80047a2 <UART_SetConfig+0x2e6>
 800465e:	2310      	movs	r3, #16
 8004660:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004664:	e09d      	b.n	80047a2 <UART_SetConfig+0x2e6>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a4a      	ldr	r2, [pc, #296]	@ (8004794 <UART_SetConfig+0x2d8>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d125      	bne.n	80046bc <UART_SetConfig+0x200>
 8004670:	4b45      	ldr	r3, [pc, #276]	@ (8004788 <UART_SetConfig+0x2cc>)
 8004672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004676:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800467a:	2bc0      	cmp	r3, #192	@ 0xc0
 800467c:	d016      	beq.n	80046ac <UART_SetConfig+0x1f0>
 800467e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004680:	d818      	bhi.n	80046b4 <UART_SetConfig+0x1f8>
 8004682:	2b80      	cmp	r3, #128	@ 0x80
 8004684:	d00a      	beq.n	800469c <UART_SetConfig+0x1e0>
 8004686:	2b80      	cmp	r3, #128	@ 0x80
 8004688:	d814      	bhi.n	80046b4 <UART_SetConfig+0x1f8>
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <UART_SetConfig+0x1d8>
 800468e:	2b40      	cmp	r3, #64	@ 0x40
 8004690:	d008      	beq.n	80046a4 <UART_SetConfig+0x1e8>
 8004692:	e00f      	b.n	80046b4 <UART_SetConfig+0x1f8>
 8004694:	2300      	movs	r3, #0
 8004696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800469a:	e082      	b.n	80047a2 <UART_SetConfig+0x2e6>
 800469c:	2302      	movs	r3, #2
 800469e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046a2:	e07e      	b.n	80047a2 <UART_SetConfig+0x2e6>
 80046a4:	2304      	movs	r3, #4
 80046a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046aa:	e07a      	b.n	80047a2 <UART_SetConfig+0x2e6>
 80046ac:	2308      	movs	r3, #8
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046b2:	e076      	b.n	80047a2 <UART_SetConfig+0x2e6>
 80046b4:	2310      	movs	r3, #16
 80046b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ba:	e072      	b.n	80047a2 <UART_SetConfig+0x2e6>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a35      	ldr	r2, [pc, #212]	@ (8004798 <UART_SetConfig+0x2dc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d12a      	bne.n	800471c <UART_SetConfig+0x260>
 80046c6:	4b30      	ldr	r3, [pc, #192]	@ (8004788 <UART_SetConfig+0x2cc>)
 80046c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046d4:	d01a      	beq.n	800470c <UART_SetConfig+0x250>
 80046d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046da:	d81b      	bhi.n	8004714 <UART_SetConfig+0x258>
 80046dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046e0:	d00c      	beq.n	80046fc <UART_SetConfig+0x240>
 80046e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046e6:	d815      	bhi.n	8004714 <UART_SetConfig+0x258>
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <UART_SetConfig+0x238>
 80046ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046f0:	d008      	beq.n	8004704 <UART_SetConfig+0x248>
 80046f2:	e00f      	b.n	8004714 <UART_SetConfig+0x258>
 80046f4:	2300      	movs	r3, #0
 80046f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046fa:	e052      	b.n	80047a2 <UART_SetConfig+0x2e6>
 80046fc:	2302      	movs	r3, #2
 80046fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004702:	e04e      	b.n	80047a2 <UART_SetConfig+0x2e6>
 8004704:	2304      	movs	r3, #4
 8004706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800470a:	e04a      	b.n	80047a2 <UART_SetConfig+0x2e6>
 800470c:	2308      	movs	r3, #8
 800470e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004712:	e046      	b.n	80047a2 <UART_SetConfig+0x2e6>
 8004714:	2310      	movs	r3, #16
 8004716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800471a:	e042      	b.n	80047a2 <UART_SetConfig+0x2e6>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a17      	ldr	r2, [pc, #92]	@ (8004780 <UART_SetConfig+0x2c4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d13a      	bne.n	800479c <UART_SetConfig+0x2e0>
 8004726:	4b18      	ldr	r3, [pc, #96]	@ (8004788 <UART_SetConfig+0x2cc>)
 8004728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800472c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004730:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004734:	d01a      	beq.n	800476c <UART_SetConfig+0x2b0>
 8004736:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800473a:	d81b      	bhi.n	8004774 <UART_SetConfig+0x2b8>
 800473c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004740:	d00c      	beq.n	800475c <UART_SetConfig+0x2a0>
 8004742:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004746:	d815      	bhi.n	8004774 <UART_SetConfig+0x2b8>
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <UART_SetConfig+0x298>
 800474c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004750:	d008      	beq.n	8004764 <UART_SetConfig+0x2a8>
 8004752:	e00f      	b.n	8004774 <UART_SetConfig+0x2b8>
 8004754:	2300      	movs	r3, #0
 8004756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800475a:	e022      	b.n	80047a2 <UART_SetConfig+0x2e6>
 800475c:	2302      	movs	r3, #2
 800475e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004762:	e01e      	b.n	80047a2 <UART_SetConfig+0x2e6>
 8004764:	2304      	movs	r3, #4
 8004766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800476a:	e01a      	b.n	80047a2 <UART_SetConfig+0x2e6>
 800476c:	2308      	movs	r3, #8
 800476e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004772:	e016      	b.n	80047a2 <UART_SetConfig+0x2e6>
 8004774:	2310      	movs	r3, #16
 8004776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800477a:	e012      	b.n	80047a2 <UART_SetConfig+0x2e6>
 800477c:	efff69f3 	.word	0xefff69f3
 8004780:	40008000 	.word	0x40008000
 8004784:	40013800 	.word	0x40013800
 8004788:	40021000 	.word	0x40021000
 800478c:	40004400 	.word	0x40004400
 8004790:	40004800 	.word	0x40004800
 8004794:	40004c00 	.word	0x40004c00
 8004798:	40005000 	.word	0x40005000
 800479c:	2310      	movs	r3, #16
 800479e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a9f      	ldr	r2, [pc, #636]	@ (8004a24 <UART_SetConfig+0x568>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d17a      	bne.n	80048a2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d824      	bhi.n	80047fe <UART_SetConfig+0x342>
 80047b4:	a201      	add	r2, pc, #4	@ (adr r2, 80047bc <UART_SetConfig+0x300>)
 80047b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ba:	bf00      	nop
 80047bc:	080047e1 	.word	0x080047e1
 80047c0:	080047ff 	.word	0x080047ff
 80047c4:	080047e9 	.word	0x080047e9
 80047c8:	080047ff 	.word	0x080047ff
 80047cc:	080047ef 	.word	0x080047ef
 80047d0:	080047ff 	.word	0x080047ff
 80047d4:	080047ff 	.word	0x080047ff
 80047d8:	080047ff 	.word	0x080047ff
 80047dc:	080047f7 	.word	0x080047f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047e0:	f7fe fd46 	bl	8003270 <HAL_RCC_GetPCLK1Freq>
 80047e4:	61f8      	str	r0, [r7, #28]
        break;
 80047e6:	e010      	b.n	800480a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047e8:	4b8f      	ldr	r3, [pc, #572]	@ (8004a28 <UART_SetConfig+0x56c>)
 80047ea:	61fb      	str	r3, [r7, #28]
        break;
 80047ec:	e00d      	b.n	800480a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ee:	f7fe fca7 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 80047f2:	61f8      	str	r0, [r7, #28]
        break;
 80047f4:	e009      	b.n	800480a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047fa:	61fb      	str	r3, [r7, #28]
        break;
 80047fc:	e005      	b.n	800480a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80047fe:	2300      	movs	r3, #0
 8004800:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004808:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80fb 	beq.w	8004a08 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	4613      	mov	r3, r2
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	4413      	add	r3, r2
 800481c:	69fa      	ldr	r2, [r7, #28]
 800481e:	429a      	cmp	r2, r3
 8004820:	d305      	bcc.n	800482e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004828:	69fa      	ldr	r2, [r7, #28]
 800482a:	429a      	cmp	r2, r3
 800482c:	d903      	bls.n	8004836 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004834:	e0e8      	b.n	8004a08 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	2200      	movs	r2, #0
 800483a:	461c      	mov	r4, r3
 800483c:	4615      	mov	r5, r2
 800483e:	f04f 0200 	mov.w	r2, #0
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	022b      	lsls	r3, r5, #8
 8004848:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800484c:	0222      	lsls	r2, r4, #8
 800484e:	68f9      	ldr	r1, [r7, #12]
 8004850:	6849      	ldr	r1, [r1, #4]
 8004852:	0849      	lsrs	r1, r1, #1
 8004854:	2000      	movs	r0, #0
 8004856:	4688      	mov	r8, r1
 8004858:	4681      	mov	r9, r0
 800485a:	eb12 0a08 	adds.w	sl, r2, r8
 800485e:	eb43 0b09 	adc.w	fp, r3, r9
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	603b      	str	r3, [r7, #0]
 800486a:	607a      	str	r2, [r7, #4]
 800486c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004870:	4650      	mov	r0, sl
 8004872:	4659      	mov	r1, fp
 8004874:	f7fb fcac 	bl	80001d0 <__aeabi_uldivmod>
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4613      	mov	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004886:	d308      	bcc.n	800489a <UART_SetConfig+0x3de>
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800488e:	d204      	bcs.n	800489a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	60da      	str	r2, [r3, #12]
 8004898:	e0b6      	b.n	8004a08 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80048a0:	e0b2      	b.n	8004a08 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048aa:	d15e      	bne.n	800496a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80048ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d828      	bhi.n	8004906 <UART_SetConfig+0x44a>
 80048b4:	a201      	add	r2, pc, #4	@ (adr r2, 80048bc <UART_SetConfig+0x400>)
 80048b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ba:	bf00      	nop
 80048bc:	080048e1 	.word	0x080048e1
 80048c0:	080048e9 	.word	0x080048e9
 80048c4:	080048f1 	.word	0x080048f1
 80048c8:	08004907 	.word	0x08004907
 80048cc:	080048f7 	.word	0x080048f7
 80048d0:	08004907 	.word	0x08004907
 80048d4:	08004907 	.word	0x08004907
 80048d8:	08004907 	.word	0x08004907
 80048dc:	080048ff 	.word	0x080048ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048e0:	f7fe fcc6 	bl	8003270 <HAL_RCC_GetPCLK1Freq>
 80048e4:	61f8      	str	r0, [r7, #28]
        break;
 80048e6:	e014      	b.n	8004912 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048e8:	f7fe fcd8 	bl	800329c <HAL_RCC_GetPCLK2Freq>
 80048ec:	61f8      	str	r0, [r7, #28]
        break;
 80048ee:	e010      	b.n	8004912 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048f0:	4b4d      	ldr	r3, [pc, #308]	@ (8004a28 <UART_SetConfig+0x56c>)
 80048f2:	61fb      	str	r3, [r7, #28]
        break;
 80048f4:	e00d      	b.n	8004912 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048f6:	f7fe fc23 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 80048fa:	61f8      	str	r0, [r7, #28]
        break;
 80048fc:	e009      	b.n	8004912 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004902:	61fb      	str	r3, [r7, #28]
        break;
 8004904:	e005      	b.n	8004912 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004910:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d077      	beq.n	8004a08 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	005a      	lsls	r2, r3, #1
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	085b      	lsrs	r3, r3, #1
 8004922:	441a      	add	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	fbb2 f3f3 	udiv	r3, r2, r3
 800492c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	2b0f      	cmp	r3, #15
 8004932:	d916      	bls.n	8004962 <UART_SetConfig+0x4a6>
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800493a:	d212      	bcs.n	8004962 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	b29b      	uxth	r3, r3
 8004940:	f023 030f 	bic.w	r3, r3, #15
 8004944:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	085b      	lsrs	r3, r3, #1
 800494a:	b29b      	uxth	r3, r3
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	b29a      	uxth	r2, r3
 8004952:	8afb      	ldrh	r3, [r7, #22]
 8004954:	4313      	orrs	r3, r2
 8004956:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	8afa      	ldrh	r2, [r7, #22]
 800495e:	60da      	str	r2, [r3, #12]
 8004960:	e052      	b.n	8004a08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004968:	e04e      	b.n	8004a08 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800496a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800496e:	2b08      	cmp	r3, #8
 8004970:	d827      	bhi.n	80049c2 <UART_SetConfig+0x506>
 8004972:	a201      	add	r2, pc, #4	@ (adr r2, 8004978 <UART_SetConfig+0x4bc>)
 8004974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004978:	0800499d 	.word	0x0800499d
 800497c:	080049a5 	.word	0x080049a5
 8004980:	080049ad 	.word	0x080049ad
 8004984:	080049c3 	.word	0x080049c3
 8004988:	080049b3 	.word	0x080049b3
 800498c:	080049c3 	.word	0x080049c3
 8004990:	080049c3 	.word	0x080049c3
 8004994:	080049c3 	.word	0x080049c3
 8004998:	080049bb 	.word	0x080049bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800499c:	f7fe fc68 	bl	8003270 <HAL_RCC_GetPCLK1Freq>
 80049a0:	61f8      	str	r0, [r7, #28]
        break;
 80049a2:	e014      	b.n	80049ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049a4:	f7fe fc7a 	bl	800329c <HAL_RCC_GetPCLK2Freq>
 80049a8:	61f8      	str	r0, [r7, #28]
        break;
 80049aa:	e010      	b.n	80049ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049ac:	4b1e      	ldr	r3, [pc, #120]	@ (8004a28 <UART_SetConfig+0x56c>)
 80049ae:	61fb      	str	r3, [r7, #28]
        break;
 80049b0:	e00d      	b.n	80049ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049b2:	f7fe fbc5 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 80049b6:	61f8      	str	r0, [r7, #28]
        break;
 80049b8:	e009      	b.n	80049ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049be:	61fb      	str	r3, [r7, #28]
        break;
 80049c0:	e005      	b.n	80049ce <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80049cc:	bf00      	nop
    }

    if (pclk != 0U)
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d019      	beq.n	8004a08 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	085a      	lsrs	r2, r3, #1
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	441a      	add	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	2b0f      	cmp	r3, #15
 80049ec:	d909      	bls.n	8004a02 <UART_SetConfig+0x546>
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049f4:	d205      	bcs.n	8004a02 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	60da      	str	r2, [r3, #12]
 8004a00:	e002      	b.n	8004a08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a14:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3728      	adds	r7, #40	@ 0x28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a22:	bf00      	nop
 8004a24:	40008000 	.word	0x40008000
 8004a28:	00f42400 	.word	0x00f42400

08004a2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a38:	f003 0308 	and.w	r3, r3, #8
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00a      	beq.n	8004a56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00a      	beq.n	8004a9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9e:	f003 0304 	and.w	r3, r3, #4
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00a      	beq.n	8004ade <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae2:	f003 0320 	and.w	r3, r3, #32
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d01a      	beq.n	8004b42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b2a:	d10a      	bne.n	8004b42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	605a      	str	r2, [r3, #4]
  }
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b098      	sub	sp, #96	@ 0x60
 8004b74:	af02      	add	r7, sp, #8
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b80:	f7fc fe02 	bl	8001788 <HAL_GetTick>
 8004b84:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0308 	and.w	r3, r3, #8
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d12e      	bne.n	8004bf2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f88c 	bl	8004cc0 <UART_WaitOnFlagUntilTimeout>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d021      	beq.n	8004bf2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb6:	e853 3f00 	ldrex	r3, [r3]
 8004bba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bd4:	e841 2300 	strex	r3, r2, [r1]
 8004bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1e6      	bne.n	8004bae <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e062      	b.n	8004cb8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d149      	bne.n	8004c94 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f856 	bl	8004cc0 <UART_WaitOnFlagUntilTimeout>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d03c      	beq.n	8004c94 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c22:	e853 3f00 	ldrex	r3, [r3]
 8004c26:	623b      	str	r3, [r7, #32]
   return(result);
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	461a      	mov	r2, r3
 8004c36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c38:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c40:	e841 2300 	strex	r3, r2, [r1]
 8004c44:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e6      	bne.n	8004c1a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3308      	adds	r3, #8
 8004c52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	e853 3f00 	ldrex	r3, [r3]
 8004c5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 0301 	bic.w	r3, r3, #1
 8004c62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3308      	adds	r3, #8
 8004c6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c6c:	61fa      	str	r2, [r7, #28]
 8004c6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c70:	69b9      	ldr	r1, [r7, #24]
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	e841 2300 	strex	r3, r2, [r1]
 8004c78:	617b      	str	r3, [r7, #20]
   return(result);
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1e5      	bne.n	8004c4c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e011      	b.n	8004cb8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2220      	movs	r2, #32
 8004c98:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3758      	adds	r7, #88	@ 0x58
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd0:	e04f      	b.n	8004d72 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd8:	d04b      	beq.n	8004d72 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cda:	f7fc fd55 	bl	8001788 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d302      	bcc.n	8004cf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e04e      	b.n	8004d92 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0304 	and.w	r3, r3, #4
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d037      	beq.n	8004d72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b80      	cmp	r3, #128	@ 0x80
 8004d06:	d034      	beq.n	8004d72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2b40      	cmp	r3, #64	@ 0x40
 8004d0c:	d031      	beq.n	8004d72 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d110      	bne.n	8004d3e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2208      	movs	r2, #8
 8004d22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 f838 	bl	8004d9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2208      	movs	r2, #8
 8004d2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e029      	b.n	8004d92 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d4c:	d111      	bne.n	8004d72 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 f81e 	bl	8004d9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e00f      	b.n	8004d92 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69da      	ldr	r2, [r3, #28]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	bf0c      	ite	eq
 8004d82:	2301      	moveq	r3, #1
 8004d84:	2300      	movne	r3, #0
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	461a      	mov	r2, r3
 8004d8a:	79fb      	ldrb	r3, [r7, #7]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d0a0      	beq.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b095      	sub	sp, #84	@ 0x54
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004daa:	e853 3f00 	ldrex	r3, [r3]
 8004dae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dc2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004dc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004dc8:	e841 2300 	strex	r3, r2, [r1]
 8004dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1e6      	bne.n	8004da2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3308      	adds	r3, #8
 8004dda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	e853 3f00 	ldrex	r3, [r3]
 8004de2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	f023 0301 	bic.w	r3, r3, #1
 8004dea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3308      	adds	r3, #8
 8004df2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004df4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004df6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dfc:	e841 2300 	strex	r3, r2, [r1]
 8004e00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1e5      	bne.n	8004dd4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d118      	bne.n	8004e42 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	e853 3f00 	ldrex	r3, [r3]
 8004e1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f023 0310 	bic.w	r3, r3, #16
 8004e24:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e2e:	61bb      	str	r3, [r7, #24]
 8004e30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e32:	6979      	ldr	r1, [r7, #20]
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	e841 2300 	strex	r3, r2, [r1]
 8004e3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1e6      	bne.n	8004e10 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e56:	bf00      	nop
 8004e58:	3754      	adds	r7, #84	@ 0x54
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e62:	b084      	sub	sp, #16
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	f107 001c 	add.w	r0, r7, #28
 8004e70:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 fa69 	bl	8005358 <USB_CoreReset>
 8004e86:	4603      	mov	r3, r0
 8004e88:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004e8a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d106      	bne.n	8004ea0 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e96:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e9e:	e005      	b.n	8004eac <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eb8:	b004      	add	sp, #16
 8004eba:	4770      	bx	lr

08004ebc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f023 0201 	bic.w	r2, r3, #1
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b084      	sub	sp, #16
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004efa:	78fb      	ldrb	r3, [r7, #3]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d115      	bne.n	8004f2c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f0c:	200a      	movs	r0, #10
 8004f0e:	f7fc fc47 	bl	80017a0 <HAL_Delay>
      ms += 10U;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	330a      	adds	r3, #10
 8004f16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fa0f 	bl	800533c <USB_GetMode>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d01e      	beq.n	8004f62 <USB_SetCurrentMode+0x84>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f28:	d9f0      	bls.n	8004f0c <USB_SetCurrentMode+0x2e>
 8004f2a:	e01a      	b.n	8004f62 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f2c:	78fb      	ldrb	r3, [r7, #3]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d115      	bne.n	8004f5e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f3e:	200a      	movs	r0, #10
 8004f40:	f7fc fc2e 	bl	80017a0 <HAL_Delay>
      ms += 10U;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	330a      	adds	r3, #10
 8004f48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f9f6 	bl	800533c <USB_GetMode>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <USB_SetCurrentMode+0x84>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f5a:	d9f0      	bls.n	8004f3e <USB_SetCurrentMode+0x60>
 8004f5c:	e001      	b.n	8004f62 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e005      	b.n	8004f6e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2bc8      	cmp	r3, #200	@ 0xc8
 8004f66:	d101      	bne.n	8004f6c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e000      	b.n	8004f6e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
	...

08004f78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f78:	b084      	sub	sp, #16
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b086      	sub	sp, #24
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004f86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f92:	2300      	movs	r3, #0
 8004f94:	613b      	str	r3, [r7, #16]
 8004f96:	e009      	b.n	8004fac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	3340      	adds	r3, #64	@ 0x40
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	613b      	str	r3, [r7, #16]
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	2b0e      	cmp	r3, #14
 8004fb0:	d9f2      	bls.n	8004f98 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fb2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d11c      	bne.n	8004ff4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fc8:	f043 0302 	orr.w	r3, r3, #2
 8004fcc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	e005      	b.n	8005000 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005006:	461a      	mov	r2, r3
 8005008:	2300      	movs	r3, #0
 800500a:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800500c:	2103      	movs	r1, #3
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f95a 	bl	80052c8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005014:	2110      	movs	r1, #16
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f8f6 	bl	8005208 <USB_FlushTxFifo>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f920 	bl	800526c <USB_FlushRxFifo>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800503c:	461a      	mov	r2, r3
 800503e:	2300      	movs	r3, #0
 8005040:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005048:	461a      	mov	r2, r3
 800504a:	2300      	movs	r3, #0
 800504c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005054:	461a      	mov	r2, r3
 8005056:	2300      	movs	r3, #0
 8005058:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800505a:	2300      	movs	r3, #0
 800505c:	613b      	str	r3, [r7, #16]
 800505e:	e043      	b.n	80050e8 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005072:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005076:	d118      	bne.n	80050aa <USB_DevInit+0x132>
    {
      if (i == 0U)
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10a      	bne.n	8005094 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	4413      	add	r3, r2
 8005086:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800508a:	461a      	mov	r2, r3
 800508c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	e013      	b.n	80050bc <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050a0:	461a      	mov	r2, r3
 80050a2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80050a6:	6013      	str	r3, [r2, #0]
 80050a8:	e008      	b.n	80050bc <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050b6:	461a      	mov	r2, r3
 80050b8:	2300      	movs	r3, #0
 80050ba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050c8:	461a      	mov	r2, r3
 80050ca:	2300      	movs	r3, #0
 80050cc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050da:	461a      	mov	r2, r3
 80050dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80050e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	3301      	adds	r3, #1
 80050e6:	613b      	str	r3, [r7, #16]
 80050e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80050ec:	461a      	mov	r2, r3
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d3b5      	bcc.n	8005060 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050f4:	2300      	movs	r3, #0
 80050f6:	613b      	str	r3, [r7, #16]
 80050f8:	e043      	b.n	8005182 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800510c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005110:	d118      	bne.n	8005144 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10a      	bne.n	800512e <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005124:	461a      	mov	r2, r3
 8005126:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800512a:	6013      	str	r3, [r2, #0]
 800512c:	e013      	b.n	8005156 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800513a:	461a      	mov	r2, r3
 800513c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	e008      	b.n	8005156 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005150:	461a      	mov	r2, r3
 8005152:	2300      	movs	r3, #0
 8005154:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005162:	461a      	mov	r2, r3
 8005164:	2300      	movs	r3, #0
 8005166:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005174:	461a      	mov	r2, r3
 8005176:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800517a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	3301      	adds	r3, #1
 8005180:	613b      	str	r3, [r7, #16]
 8005182:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005186:	461a      	mov	r2, r3
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	4293      	cmp	r3, r2
 800518c:	d3b5      	bcc.n	80050fa <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800519c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051a0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80051ae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	f043 0210 	orr.w	r2, r3, #16
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699a      	ldr	r2, [r3, #24]
 80051c0:	4b10      	ldr	r3, [pc, #64]	@ (8005204 <USB_DevInit+0x28c>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	f043 0208 	orr.w	r2, r3, #8
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051dc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d107      	bne.n	80051f4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80051ec:	f043 0304 	orr.w	r3, r3, #4
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005200:	b004      	add	sp, #16
 8005202:	4770      	bx	lr
 8005204:	803c3800 	.word	0x803c3800

08005208 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3301      	adds	r3, #1
 800521a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005222:	d901      	bls.n	8005228 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e01b      	b.n	8005260 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	2b00      	cmp	r3, #0
 800522e:	daf2      	bge.n	8005216 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	019b      	lsls	r3, r3, #6
 8005238:	f043 0220 	orr.w	r2, r3, #32
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	3301      	adds	r3, #1
 8005244:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800524c:	d901      	bls.n	8005252 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e006      	b.n	8005260 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f003 0320 	and.w	r3, r3, #32
 800525a:	2b20      	cmp	r3, #32
 800525c:	d0f0      	beq.n	8005240 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	3301      	adds	r3, #1
 800527c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005284:	d901      	bls.n	800528a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e018      	b.n	80052bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	daf2      	bge.n	8005278 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2210      	movs	r2, #16
 800529a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	3301      	adds	r3, #1
 80052a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052a8:	d901      	bls.n	80052ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e006      	b.n	80052bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f003 0310 	and.w	r3, r3, #16
 80052b6:	2b10      	cmp	r3, #16
 80052b8:	d0f0      	beq.n	800529c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	460b      	mov	r3, r1
 80052d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	68f9      	ldr	r1, [r7, #12]
 80052e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052e8:	4313      	orrs	r3, r2
 80052ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b085      	sub	sp, #20
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005314:	f023 0303 	bic.w	r3, r3, #3
 8005318:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005328:	f043 0302 	orr.w	r3, r3, #2
 800532c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	f003 0301 	and.w	r3, r3, #1
}
 800534c:	4618      	mov	r0, r3
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3301      	adds	r3, #1
 8005368:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005370:	d901      	bls.n	8005376 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e01b      	b.n	80053ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	daf2      	bge.n	8005364 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f043 0201 	orr.w	r2, r3, #1
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	3301      	adds	r3, #1
 8005392:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800539a:	d901      	bls.n	80053a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e006      	b.n	80053ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d0f0      	beq.n	800538e <USB_CoreReset+0x36>

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
	...

080053bc <__NVIC_SetPriority>:
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	4603      	mov	r3, r0
 80053c4:	6039      	str	r1, [r7, #0]
 80053c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	db0a      	blt.n	80053e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	490c      	ldr	r1, [pc, #48]	@ (8005408 <__NVIC_SetPriority+0x4c>)
 80053d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053da:	0112      	lsls	r2, r2, #4
 80053dc:	b2d2      	uxtb	r2, r2
 80053de:	440b      	add	r3, r1
 80053e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80053e4:	e00a      	b.n	80053fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	4908      	ldr	r1, [pc, #32]	@ (800540c <__NVIC_SetPriority+0x50>)
 80053ec:	79fb      	ldrb	r3, [r7, #7]
 80053ee:	f003 030f 	and.w	r3, r3, #15
 80053f2:	3b04      	subs	r3, #4
 80053f4:	0112      	lsls	r2, r2, #4
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	440b      	add	r3, r1
 80053fa:	761a      	strb	r2, [r3, #24]
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	e000e100 	.word	0xe000e100
 800540c:	e000ed00 	.word	0xe000ed00

08005410 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005414:	2100      	movs	r1, #0
 8005416:	f06f 0004 	mvn.w	r0, #4
 800541a:	f7ff ffcf 	bl	80053bc <__NVIC_SetPriority>
#endif
}
 800541e:	bf00      	nop
 8005420:	bd80      	pop	{r7, pc}
	...

08005424 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800542a:	f3ef 8305 	mrs	r3, IPSR
 800542e:	603b      	str	r3, [r7, #0]
  return(result);
 8005430:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005436:	f06f 0305 	mvn.w	r3, #5
 800543a:	607b      	str	r3, [r7, #4]
 800543c:	e00c      	b.n	8005458 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800543e:	4b0a      	ldr	r3, [pc, #40]	@ (8005468 <osKernelInitialize+0x44>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d105      	bne.n	8005452 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005446:	4b08      	ldr	r3, [pc, #32]	@ (8005468 <osKernelInitialize+0x44>)
 8005448:	2201      	movs	r2, #1
 800544a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800544c:	2300      	movs	r3, #0
 800544e:	607b      	str	r3, [r7, #4]
 8005450:	e002      	b.n	8005458 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005452:	f04f 33ff 	mov.w	r3, #4294967295
 8005456:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005458:	687b      	ldr	r3, [r7, #4]
}
 800545a:	4618      	mov	r0, r3
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	200007f0 	.word	0x200007f0

0800546c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005472:	f3ef 8305 	mrs	r3, IPSR
 8005476:	603b      	str	r3, [r7, #0]
  return(result);
 8005478:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <osKernelStart+0x1a>
    stat = osErrorISR;
 800547e:	f06f 0305 	mvn.w	r3, #5
 8005482:	607b      	str	r3, [r7, #4]
 8005484:	e010      	b.n	80054a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005486:	4b0b      	ldr	r3, [pc, #44]	@ (80054b4 <osKernelStart+0x48>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d109      	bne.n	80054a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800548e:	f7ff ffbf 	bl	8005410 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005492:	4b08      	ldr	r3, [pc, #32]	@ (80054b4 <osKernelStart+0x48>)
 8005494:	2202      	movs	r2, #2
 8005496:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005498:	f002 f9c6 	bl	8007828 <vTaskStartScheduler>
      stat = osOK;
 800549c:	2300      	movs	r3, #0
 800549e:	607b      	str	r3, [r7, #4]
 80054a0:	e002      	b.n	80054a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80054a2:	f04f 33ff 	mov.w	r3, #4294967295
 80054a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80054a8:	687b      	ldr	r3, [r7, #4]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	200007f0 	.word	0x200007f0

080054b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08e      	sub	sp, #56	@ 0x38
 80054bc:	af04      	add	r7, sp, #16
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80054c4:	2300      	movs	r3, #0
 80054c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054c8:	f3ef 8305 	mrs	r3, IPSR
 80054cc:	617b      	str	r3, [r7, #20]
  return(result);
 80054ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d17e      	bne.n	80055d2 <osThreadNew+0x11a>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d07b      	beq.n	80055d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80054da:	2380      	movs	r3, #128	@ 0x80
 80054dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80054de:	2318      	movs	r3, #24
 80054e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80054e2:	2300      	movs	r3, #0
 80054e4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80054e6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d045      	beq.n	800557e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <osThreadNew+0x48>
        name = attr->name;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d008      	beq.n	8005526 <osThreadNew+0x6e>
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	2b38      	cmp	r3, #56	@ 0x38
 8005518:	d805      	bhi.n	8005526 <osThreadNew+0x6e>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <osThreadNew+0x72>
        return (NULL);
 8005526:	2300      	movs	r3, #0
 8005528:	e054      	b.n	80055d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	089b      	lsrs	r3, r3, #2
 8005538:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00e      	beq.n	8005560 <osThreadNew+0xa8>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	2b5b      	cmp	r3, #91	@ 0x5b
 8005548:	d90a      	bls.n	8005560 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800554e:	2b00      	cmp	r3, #0
 8005550:	d006      	beq.n	8005560 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <osThreadNew+0xa8>
        mem = 1;
 800555a:	2301      	movs	r3, #1
 800555c:	61bb      	str	r3, [r7, #24]
 800555e:	e010      	b.n	8005582 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10c      	bne.n	8005582 <osThreadNew+0xca>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d108      	bne.n	8005582 <osThreadNew+0xca>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d104      	bne.n	8005582 <osThreadNew+0xca>
          mem = 0;
 8005578:	2300      	movs	r3, #0
 800557a:	61bb      	str	r3, [r7, #24]
 800557c:	e001      	b.n	8005582 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800557e:	2300      	movs	r3, #0
 8005580:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d110      	bne.n	80055aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005590:	9202      	str	r2, [sp, #8]
 8005592:	9301      	str	r3, [sp, #4]
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	6a3a      	ldr	r2, [r7, #32]
 800559c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f001 ff66 	bl	8007470 <xTaskCreateStatic>
 80055a4:	4603      	mov	r3, r0
 80055a6:	613b      	str	r3, [r7, #16]
 80055a8:	e013      	b.n	80055d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d110      	bne.n	80055d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	f107 0310 	add.w	r3, r7, #16
 80055b8:	9301      	str	r3, [sp, #4]
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f001 ffb4 	bl	8007530 <xTaskCreate>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d001      	beq.n	80055d2 <osThreadNew+0x11a>
            hTask = NULL;
 80055ce:	2300      	movs	r3, #0
 80055d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80055d2:	693b      	ldr	r3, [r7, #16]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3728      	adds	r7, #40	@ 0x28
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80055dc:	b580      	push	{r7, lr}
 80055de:	b088      	sub	sp, #32
 80055e0:	af02      	add	r7, sp, #8
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <osThreadFlagsSet+0x1a>
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	da03      	bge.n	80055fe <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80055f6:	f06f 0303 	mvn.w	r3, #3
 80055fa:	60fb      	str	r3, [r7, #12]
 80055fc:	e035      	b.n	800566a <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 80055fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005602:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005604:	f3ef 8305 	mrs	r3, IPSR
 8005608:	613b      	str	r3, [r7, #16]
  return(result);
 800560a:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800560c:	2b00      	cmp	r3, #0
 800560e:	d01f      	beq.n	8005650 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8005610:	2300      	movs	r3, #0
 8005612:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8005614:	f107 0308 	add.w	r3, r7, #8
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	2300      	movs	r3, #0
 800561c:	2201      	movs	r2, #1
 800561e:	6839      	ldr	r1, [r7, #0]
 8005620:	6978      	ldr	r0, [r7, #20]
 8005622:	f003 f801 	bl	8008628 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8005626:	f107 030c 	add.w	r3, r7, #12
 800562a:	2200      	movs	r2, #0
 800562c:	9200      	str	r2, [sp, #0]
 800562e:	2200      	movs	r2, #0
 8005630:	2100      	movs	r1, #0
 8005632:	6978      	ldr	r0, [r7, #20]
 8005634:	f002 fff8 	bl	8008628 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d015      	beq.n	800566a <osThreadFlagsSet+0x8e>
 800563e:	4b0d      	ldr	r3, [pc, #52]	@ (8005674 <osThreadFlagsSet+0x98>)
 8005640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	e00c      	b.n	800566a <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8005650:	2300      	movs	r3, #0
 8005652:	2201      	movs	r2, #1
 8005654:	6839      	ldr	r1, [r7, #0]
 8005656:	6978      	ldr	r0, [r7, #20]
 8005658:	f002 ff2c 	bl	80084b4 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800565c:	f107 030c 	add.w	r3, r7, #12
 8005660:	2200      	movs	r2, #0
 8005662:	2100      	movs	r1, #0
 8005664:	6978      	ldr	r0, [r7, #20]
 8005666:	f002 ff25 	bl	80084b4 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800566a:	68fb      	ldr	r3, [r7, #12]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3718      	adds	r7, #24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	e000ed04 	.word	0xe000ed04

08005678 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005680:	f3ef 8305 	mrs	r3, IPSR
 8005684:	60fb      	str	r3, [r7, #12]
  return(result);
 8005686:	68fb      	ldr	r3, [r7, #12]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <osThreadFlagsClear+0x1c>
    rflags = (uint32_t)osErrorISR;
 800568c:	f06f 0305 	mvn.w	r3, #5
 8005690:	617b      	str	r3, [r7, #20]
 8005692:	e02a      	b.n	80056ea <osThreadFlagsClear+0x72>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	da03      	bge.n	80056a2 <osThreadFlagsClear+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800569a:	f06f 0303 	mvn.w	r3, #3
 800569e:	617b      	str	r3, [r7, #20]
 80056a0:	e023      	b.n	80056ea <osThreadFlagsClear+0x72>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 80056a2:	f002 fd0f 	bl	80080c4 <xTaskGetCurrentTaskHandle>
 80056a6:	6138      	str	r0, [r7, #16]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 80056a8:	f107 0308 	add.w	r3, r7, #8
 80056ac:	2200      	movs	r2, #0
 80056ae:	2100      	movs	r1, #0
 80056b0:	6938      	ldr	r0, [r7, #16]
 80056b2:	f002 feff 	bl	80084b4 <xTaskGenericNotify>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d113      	bne.n	80056e4 <osThreadFlagsClear+0x6c>
      rflags = cflags;
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	617b      	str	r3, [r7, #20]
      cflags &= ~flags;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	43da      	mvns	r2, r3
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4013      	ands	r3, r2
 80056c8:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 80056ca:	68b9      	ldr	r1, [r7, #8]
 80056cc:	2300      	movs	r3, #0
 80056ce:	2203      	movs	r2, #3
 80056d0:	6938      	ldr	r0, [r7, #16]
 80056d2:	f002 feef 	bl	80084b4 <xTaskGenericNotify>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d006      	beq.n	80056ea <osThreadFlagsClear+0x72>
        rflags = (uint32_t)osError;
 80056dc:	f04f 33ff 	mov.w	r3, #4294967295
 80056e0:	617b      	str	r3, [r7, #20]
 80056e2:	e002      	b.n	80056ea <osThreadFlagsClear+0x72>
      }
    }
    else {
      rflags = (uint32_t)osError;
 80056e4:	f04f 33ff 	mov.w	r3, #4294967295
 80056e8:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 80056ea:	697b      	ldr	r3, [r7, #20]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b08c      	sub	sp, #48	@ 0x30
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005700:	f3ef 8305 	mrs	r3, IPSR
 8005704:	617b      	str	r3, [r7, #20]
  return(result);
 8005706:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800570c:	f06f 0305 	mvn.w	r3, #5
 8005710:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005712:	e06b      	b.n	80057ec <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b00      	cmp	r3, #0
 8005718:	da03      	bge.n	8005722 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800571a:	f06f 0303 	mvn.w	r3, #3
 800571e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005720:	e064      	b.n	80057ec <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005730:	e001      	b.n	8005736 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800573e:	f002 f987 	bl	8007a50 <xTaskGetTickCount>
 8005742:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8005744:	f107 0210 	add.w	r2, r7, #16
 8005748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800574c:	2000      	movs	r0, #0
 800574e:	f002 fe57 	bl	8008400 <xTaskNotifyWait>
 8005752:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d137      	bne.n	80057ca <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800575a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4013      	ands	r3, r2
 8005760:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005766:	4313      	orrs	r3, r2
 8005768:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00c      	beq.n	800578e <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005778:	4013      	ands	r3, r2
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	429a      	cmp	r2, r3
 800577e:	d032      	beq.n	80057e6 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10f      	bne.n	80057a6 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8005786:	f06f 0302 	mvn.w	r3, #2
 800578a:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800578c:	e02e      	b.n	80057ec <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005792:	4013      	ands	r3, r2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d128      	bne.n	80057ea <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d103      	bne.n	80057a6 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800579e:	f06f 0302 	mvn.w	r3, #2
 80057a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 80057a4:	e022      	b.n	80057ec <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80057a6:	f002 f953 	bl	8007a50 <xTaskGetTickCount>
 80057aa:	4602      	mov	r2, r0
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d902      	bls.n	80057c0 <osThreadFlagsWait+0xcc>
          tout  = 0;
 80057ba:	2300      	movs	r3, #0
 80057bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80057be:	e00e      	b.n	80057de <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 80057c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80057c8:	e009      	b.n	80057de <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d103      	bne.n	80057d8 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 80057d0:	f06f 0302 	mvn.w	r3, #2
 80057d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057d6:	e002      	b.n	80057de <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80057d8:	f06f 0301 	mvn.w	r3, #1
 80057dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1af      	bne.n	8005744 <osThreadFlagsWait+0x50>
 80057e4:	e002      	b.n	80057ec <osThreadFlagsWait+0xf8>
            break;
 80057e6:	bf00      	nop
 80057e8:	e000      	b.n	80057ec <osThreadFlagsWait+0xf8>
            break;
 80057ea:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 80057ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3730      	adds	r7, #48	@ 0x30
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057fe:	f3ef 8305 	mrs	r3, IPSR
 8005802:	60bb      	str	r3, [r7, #8]
  return(result);
 8005804:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <osDelay+0x1c>
    stat = osErrorISR;
 800580a:	f06f 0305 	mvn.w	r3, #5
 800580e:	60fb      	str	r3, [r7, #12]
 8005810:	e007      	b.n	8005822 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d002      	beq.n	8005822 <osDelay+0x2c>
      vTaskDelay(ticks);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f001 ffcd 	bl	80077bc <vTaskDelay>
    }
  }

  return (stat);
 8005822:	68fb      	ldr	r3, [r7, #12]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f003 fc4d 	bl	80090d4 <pvTimerGetTimerID>
 800583a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d005      	beq.n	800584e <TimerCallback+0x22>
    callb->func (callb->arg);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	6852      	ldr	r2, [r2, #4]
 800584a:	4610      	mov	r0, r2
 800584c:	4798      	blx	r3
  }
}
 800584e:	bf00      	nop
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
	...

08005858 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8005858:	b580      	push	{r7, lr}
 800585a:	b08c      	sub	sp, #48	@ 0x30
 800585c:	af02      	add	r7, sp, #8
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	607a      	str	r2, [r7, #4]
 8005862:	603b      	str	r3, [r7, #0]
 8005864:	460b      	mov	r3, r1
 8005866:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8005868:	2300      	movs	r3, #0
 800586a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800586c:	f3ef 8305 	mrs	r3, IPSR
 8005870:	613b      	str	r3, [r7, #16]
  return(result);
 8005872:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8005874:	2b00      	cmp	r3, #0
 8005876:	d163      	bne.n	8005940 <osTimerNew+0xe8>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d060      	beq.n	8005940 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800587e:	2008      	movs	r0, #8
 8005880:	f003 fe9c 	bl	80095bc <pvPortMalloc>
 8005884:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d059      	beq.n	8005940 <osTimerNew+0xe8>
      callb->func = func;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005898:	7afb      	ldrb	r3, [r7, #11]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d102      	bne.n	80058a4 <osTimerNew+0x4c>
        reload = pdFALSE;
 800589e:	2300      	movs	r3, #0
 80058a0:	61fb      	str	r3, [r7, #28]
 80058a2:	e001      	b.n	80058a8 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80058a4:	2301      	movs	r3, #1
 80058a6:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80058a8:	f04f 33ff 	mov.w	r3, #4294967295
 80058ac:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d01c      	beq.n	80058f2 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d002      	beq.n	80058c6 <osTimerNew+0x6e>
          name = attr->name;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d006      	beq.n	80058dc <osTimerNew+0x84>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	2b2b      	cmp	r3, #43	@ 0x2b
 80058d4:	d902      	bls.n	80058dc <osTimerNew+0x84>
          mem = 1;
 80058d6:	2301      	movs	r3, #1
 80058d8:	61bb      	str	r3, [r7, #24]
 80058da:	e00c      	b.n	80058f6 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d108      	bne.n	80058f6 <osTimerNew+0x9e>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d104      	bne.n	80058f6 <osTimerNew+0x9e>
            mem = 0;
 80058ec:	2300      	movs	r3, #0
 80058ee:	61bb      	str	r3, [r7, #24]
 80058f0:	e001      	b.n	80058f6 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80058f2:	2300      	movs	r3, #0
 80058f4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d10c      	bne.n	8005916 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	9301      	str	r3, [sp, #4]
 8005902:	4b12      	ldr	r3, [pc, #72]	@ (800594c <osTimerNew+0xf4>)
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	69fa      	ldr	r2, [r7, #28]
 800590a:	2101      	movs	r1, #1
 800590c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800590e:	f003 f82a 	bl	8008966 <xTimerCreateStatic>
 8005912:	6238      	str	r0, [r7, #32]
 8005914:	e00b      	b.n	800592e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d108      	bne.n	800592e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800591c:	4b0b      	ldr	r3, [pc, #44]	@ (800594c <osTimerNew+0xf4>)
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	69fa      	ldr	r2, [r7, #28]
 8005924:	2101      	movs	r1, #1
 8005926:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005928:	f002 fffc 	bl	8008924 <xTimerCreate>
 800592c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d105      	bne.n	8005940 <osTimerNew+0xe8>
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d002      	beq.n	8005940 <osTimerNew+0xe8>
        vPortFree (callb);
 800593a:	6978      	ldr	r0, [r7, #20]
 800593c:	f003 ff0c 	bl	8009758 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8005940:	6a3b      	ldr	r3, [r7, #32]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3728      	adds	r7, #40	@ 0x28
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	0800582d 	.word	0x0800582d

08005950 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8005950:	b580      	push	{r7, lr}
 8005952:	b088      	sub	sp, #32
 8005954:	af02      	add	r7, sp, #8
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800595e:	f3ef 8305 	mrs	r3, IPSR
 8005962:	60fb      	str	r3, [r7, #12]
  return(result);
 8005964:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <osTimerStart+0x22>
    stat = osErrorISR;
 800596a:	f06f 0305 	mvn.w	r3, #5
 800596e:	617b      	str	r3, [r7, #20]
 8005970:	e017      	b.n	80059a2 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d103      	bne.n	8005980 <osTimerStart+0x30>
    stat = osErrorParameter;
 8005978:	f06f 0303 	mvn.w	r3, #3
 800597c:	617b      	str	r3, [r7, #20]
 800597e:	e010      	b.n	80059a2 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8005980:	2300      	movs	r3, #0
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	2300      	movs	r3, #0
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	2104      	movs	r1, #4
 800598a:	6938      	ldr	r0, [r7, #16]
 800598c:	f003 f868 	bl	8008a60 <xTimerGenericCommand>
 8005990:	4603      	mov	r3, r0
 8005992:	2b01      	cmp	r3, #1
 8005994:	d102      	bne.n	800599c <osTimerStart+0x4c>
      stat = osOK;
 8005996:	2300      	movs	r3, #0
 8005998:	617b      	str	r3, [r7, #20]
 800599a:	e002      	b.n	80059a2 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800599c:	f06f 0302 	mvn.w	r3, #2
 80059a0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80059a2:	697b      	ldr	r3, [r7, #20]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3718      	adds	r7, #24
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af02      	add	r7, sp, #8
 80059b2:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059b8:	f3ef 8305 	mrs	r3, IPSR
 80059bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80059be:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d003      	beq.n	80059cc <osTimerStop+0x20>
    stat = osErrorISR;
 80059c4:	f06f 0305 	mvn.w	r3, #5
 80059c8:	617b      	str	r3, [r7, #20]
 80059ca:	e021      	b.n	8005a10 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d103      	bne.n	80059da <osTimerStop+0x2e>
    stat = osErrorParameter;
 80059d2:	f06f 0303 	mvn.w	r3, #3
 80059d6:	617b      	str	r3, [r7, #20]
 80059d8:	e01a      	b.n	8005a10 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 80059da:	6938      	ldr	r0, [r7, #16]
 80059dc:	f003 fb50 	bl	8009080 <xTimerIsTimerActive>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d103      	bne.n	80059ee <osTimerStop+0x42>
      stat = osErrorResource;
 80059e6:	f06f 0302 	mvn.w	r3, #2
 80059ea:	617b      	str	r3, [r7, #20]
 80059ec:	e010      	b.n	8005a10 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 80059ee:	2300      	movs	r3, #0
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	2300      	movs	r3, #0
 80059f4:	2200      	movs	r2, #0
 80059f6:	2103      	movs	r1, #3
 80059f8:	6938      	ldr	r0, [r7, #16]
 80059fa:	f003 f831 	bl	8008a60 <xTimerGenericCommand>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d102      	bne.n	8005a0a <osTimerStop+0x5e>
        stat = osOK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	617b      	str	r3, [r7, #20]
 8005a08:	e002      	b.n	8005a10 <osTimerStop+0x64>
      } else {
        stat = osError;
 8005a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a0e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005a10:	697b      	ldr	r3, [r7, #20]
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3718      	adds	r7, #24
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b088      	sub	sp, #32
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a26:	f3ef 8305 	mrs	r3, IPSR
 8005a2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a2c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d174      	bne.n	8005b1c <osMutexNew+0x102>
    if (attr != NULL) {
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	61bb      	str	r3, [r7, #24]
 8005a3e:	e001      	b.n	8005a44 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <osMutexNew+0x3a>
      rmtx = 1U;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	617b      	str	r3, [r7, #20]
 8005a52:	e001      	b.n	8005a58 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	f003 0308 	and.w	r3, r3, #8
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d15c      	bne.n	8005b1c <osMutexNew+0x102>
      mem = -1;
 8005a62:	f04f 33ff 	mov.w	r3, #4294967295
 8005a66:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d015      	beq.n	8005a9a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d006      	beq.n	8005a84 <osMutexNew+0x6a>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	2b4f      	cmp	r3, #79	@ 0x4f
 8005a7c:	d902      	bls.n	8005a84 <osMutexNew+0x6a>
          mem = 1;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	613b      	str	r3, [r7, #16]
 8005a82:	e00c      	b.n	8005a9e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d108      	bne.n	8005a9e <osMutexNew+0x84>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d104      	bne.n	8005a9e <osMutexNew+0x84>
            mem = 0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	613b      	str	r3, [r7, #16]
 8005a98:	e001      	b.n	8005a9e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d112      	bne.n	8005aca <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d007      	beq.n	8005aba <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	4619      	mov	r1, r3
 8005ab0:	2004      	movs	r0, #4
 8005ab2:	f000 fd70 	bl	8006596 <xQueueCreateMutexStatic>
 8005ab6:	61f8      	str	r0, [r7, #28]
 8005ab8:	e016      	b.n	8005ae8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	4619      	mov	r1, r3
 8005ac0:	2001      	movs	r0, #1
 8005ac2:	f000 fd68 	bl	8006596 <xQueueCreateMutexStatic>
 8005ac6:	61f8      	str	r0, [r7, #28]
 8005ac8:	e00e      	b.n	8005ae8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10b      	bne.n	8005ae8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d004      	beq.n	8005ae0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005ad6:	2004      	movs	r0, #4
 8005ad8:	f000 fd45 	bl	8006566 <xQueueCreateMutex>
 8005adc:	61f8      	str	r0, [r7, #28]
 8005ade:	e003      	b.n	8005ae8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005ae0:	2001      	movs	r0, #1
 8005ae2:	f000 fd40 	bl	8006566 <xQueueCreateMutex>
 8005ae6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00c      	beq.n	8005b08 <osMutexNew+0xee>
        if (attr != NULL) {
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <osMutexNew+0xe2>
          name = attr->name;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	e001      	b.n	8005b00 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005afc:	2300      	movs	r3, #0
 8005afe:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005b00:	68f9      	ldr	r1, [r7, #12]
 8005b02:	69f8      	ldr	r0, [r7, #28]
 8005b04:	f001 fc2c 	bl	8007360 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d006      	beq.n	8005b1c <osMutexNew+0x102>
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d003      	beq.n	8005b1c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	f043 0301 	orr.w	r3, r3, #1
 8005b1a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005b1c:	69fb      	ldr	r3, [r7, #28]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3720      	adds	r7, #32
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b086      	sub	sp, #24
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f023 0301 	bic.w	r3, r3, #1
 8005b36:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005b40:	2300      	movs	r3, #0
 8005b42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b44:	f3ef 8305 	mrs	r3, IPSR
 8005b48:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b4a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d003      	beq.n	8005b58 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005b50:	f06f 0305 	mvn.w	r3, #5
 8005b54:	617b      	str	r3, [r7, #20]
 8005b56:	e02c      	b.n	8005bb2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d103      	bne.n	8005b66 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005b5e:	f06f 0303 	mvn.w	r3, #3
 8005b62:	617b      	str	r3, [r7, #20]
 8005b64:	e025      	b.n	8005bb2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d011      	beq.n	8005b90 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005b6c:	6839      	ldr	r1, [r7, #0]
 8005b6e:	6938      	ldr	r0, [r7, #16]
 8005b70:	f000 fd61 	bl	8006636 <xQueueTakeMutexRecursive>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d01b      	beq.n	8005bb2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005b80:	f06f 0301 	mvn.w	r3, #1
 8005b84:	617b      	str	r3, [r7, #20]
 8005b86:	e014      	b.n	8005bb2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005b88:	f06f 0302 	mvn.w	r3, #2
 8005b8c:	617b      	str	r3, [r7, #20]
 8005b8e:	e010      	b.n	8005bb2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005b90:	6839      	ldr	r1, [r7, #0]
 8005b92:	6938      	ldr	r0, [r7, #16]
 8005b94:	f001 f906 	bl	8006da4 <xQueueSemaphoreTake>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d009      	beq.n	8005bb2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d003      	beq.n	8005bac <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005ba4:	f06f 0301 	mvn.w	r3, #1
 8005ba8:	617b      	str	r3, [r7, #20]
 8005baa:	e002      	b.n	8005bb2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005bac:	f06f 0302 	mvn.w	r3, #2
 8005bb0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005bb2:	697b      	ldr	r3, [r7, #20]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3718      	adds	r7, #24
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f023 0301 	bic.w	r3, r3, #1
 8005bca:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bd8:	f3ef 8305 	mrs	r3, IPSR
 8005bdc:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bde:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d003      	beq.n	8005bec <osMutexRelease+0x30>
    stat = osErrorISR;
 8005be4:	f06f 0305 	mvn.w	r3, #5
 8005be8:	617b      	str	r3, [r7, #20]
 8005bea:	e01f      	b.n	8005c2c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d103      	bne.n	8005bfa <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005bf2:	f06f 0303 	mvn.w	r3, #3
 8005bf6:	617b      	str	r3, [r7, #20]
 8005bf8:	e018      	b.n	8005c2c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d009      	beq.n	8005c14 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005c00:	6938      	ldr	r0, [r7, #16]
 8005c02:	f000 fce3 	bl	80065cc <xQueueGiveMutexRecursive>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d00f      	beq.n	8005c2c <osMutexRelease+0x70>
        stat = osErrorResource;
 8005c0c:	f06f 0302 	mvn.w	r3, #2
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	e00b      	b.n	8005c2c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005c14:	2300      	movs	r3, #0
 8005c16:	2200      	movs	r2, #0
 8005c18:	2100      	movs	r1, #0
 8005c1a:	6938      	ldr	r0, [r7, #16]
 8005c1c:	f000 fdb0 	bl	8006780 <xQueueGenericSend>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d002      	beq.n	8005c2c <osMutexRelease+0x70>
        stat = osErrorResource;
 8005c26:	f06f 0302 	mvn.w	r3, #2
 8005c2a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005c2c:	697b      	ldr	r3, [r7, #20]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b08a      	sub	sp, #40	@ 0x28
 8005c3a:	af02      	add	r7, sp, #8
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005c42:	2300      	movs	r3, #0
 8005c44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c46:	f3ef 8305 	mrs	r3, IPSR
 8005c4a:	613b      	str	r3, [r7, #16]
  return(result);
 8005c4c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d175      	bne.n	8005d3e <osSemaphoreNew+0x108>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d072      	beq.n	8005d3e <osSemaphoreNew+0x108>
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d86e      	bhi.n	8005d3e <osSemaphoreNew+0x108>
    mem = -1;
 8005c60:	f04f 33ff 	mov.w	r3, #4294967295
 8005c64:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d015      	beq.n	8005c98 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d006      	beq.n	8005c82 <osSemaphoreNew+0x4c>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	2b4f      	cmp	r3, #79	@ 0x4f
 8005c7a:	d902      	bls.n	8005c82 <osSemaphoreNew+0x4c>
        mem = 1;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	61bb      	str	r3, [r7, #24]
 8005c80:	e00c      	b.n	8005c9c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d108      	bne.n	8005c9c <osSemaphoreNew+0x66>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d104      	bne.n	8005c9c <osSemaphoreNew+0x66>
          mem = 0;
 8005c92:	2300      	movs	r3, #0
 8005c94:	61bb      	str	r3, [r7, #24]
 8005c96:	e001      	b.n	8005c9c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca2:	d04c      	beq.n	8005d3e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d128      	bne.n	8005cfc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d10a      	bne.n	8005cc6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	2203      	movs	r2, #3
 8005cb6:	9200      	str	r2, [sp, #0]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	2100      	movs	r1, #0
 8005cbc:	2001      	movs	r0, #1
 8005cbe:	f000 fb5d 	bl	800637c <xQueueGenericCreateStatic>
 8005cc2:	61f8      	str	r0, [r7, #28]
 8005cc4:	e005      	b.n	8005cd2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005cc6:	2203      	movs	r2, #3
 8005cc8:	2100      	movs	r1, #0
 8005cca:	2001      	movs	r0, #1
 8005ccc:	f000 fbd3 	bl	8006476 <xQueueGenericCreate>
 8005cd0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d022      	beq.n	8005d1e <osSemaphoreNew+0xe8>
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d01f      	beq.n	8005d1e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005cde:	2300      	movs	r3, #0
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	69f8      	ldr	r0, [r7, #28]
 8005ce6:	f000 fd4b 	bl	8006780 <xQueueGenericSend>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d016      	beq.n	8005d1e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005cf0:	69f8      	ldr	r0, [r7, #28]
 8005cf2:	f001 f9e9 	bl	80070c8 <vQueueDelete>
            hSemaphore = NULL;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	61fb      	str	r3, [r7, #28]
 8005cfa:	e010      	b.n	8005d1e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d108      	bne.n	8005d14 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	461a      	mov	r2, r3
 8005d08:	68b9      	ldr	r1, [r7, #8]
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 fcca 	bl	80066a4 <xQueueCreateCountingSemaphoreStatic>
 8005d10:	61f8      	str	r0, [r7, #28]
 8005d12:	e004      	b.n	8005d1e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005d14:	68b9      	ldr	r1, [r7, #8]
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f000 fcfd 	bl	8006716 <xQueueCreateCountingSemaphore>
 8005d1c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00c      	beq.n	8005d3e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	617b      	str	r3, [r7, #20]
 8005d30:	e001      	b.n	8005d36 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005d36:	6979      	ldr	r1, [r7, #20]
 8005d38:	69f8      	ldr	r0, [r7, #28]
 8005d3a:	f001 fb11 	bl	8007360 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005d3e:	69fb      	ldr	r3, [r7, #28]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3720      	adds	r7, #32
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d103      	bne.n	8005d68 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005d60:	f06f 0303 	mvn.w	r3, #3
 8005d64:	617b      	str	r3, [r7, #20]
 8005d66:	e039      	b.n	8005ddc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d68:	f3ef 8305 	mrs	r3, IPSR
 8005d6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d022      	beq.n	8005dba <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d003      	beq.n	8005d82 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005d7a:	f06f 0303 	mvn.w	r3, #3
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	e02c      	b.n	8005ddc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005d82:	2300      	movs	r3, #0
 8005d84:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005d86:	f107 0308 	add.w	r3, r7, #8
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	6938      	ldr	r0, [r7, #16]
 8005d90:	f001 f918 	bl	8006fc4 <xQueueReceiveFromISR>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d003      	beq.n	8005da2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005d9a:	f06f 0302 	mvn.w	r3, #2
 8005d9e:	617b      	str	r3, [r7, #20]
 8005da0:	e01c      	b.n	8005ddc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d019      	beq.n	8005ddc <osSemaphoreAcquire+0x94>
 8005da8:	4b0f      	ldr	r3, [pc, #60]	@ (8005de8 <osSemaphoreAcquire+0xa0>)
 8005daa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dae:	601a      	str	r2, [r3, #0]
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	e010      	b.n	8005ddc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005dba:	6839      	ldr	r1, [r7, #0]
 8005dbc:	6938      	ldr	r0, [r7, #16]
 8005dbe:	f000 fff1 	bl	8006da4 <xQueueSemaphoreTake>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d009      	beq.n	8005ddc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d003      	beq.n	8005dd6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005dce:	f06f 0301 	mvn.w	r3, #1
 8005dd2:	617b      	str	r3, [r7, #20]
 8005dd4:	e002      	b.n	8005ddc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005dd6:	f06f 0302 	mvn.w	r3, #2
 8005dda:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005ddc:	697b      	ldr	r3, [r7, #20]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	e000ed04 	.word	0xe000ed04

08005dec <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d103      	bne.n	8005e0a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005e02:	f06f 0303 	mvn.w	r3, #3
 8005e06:	617b      	str	r3, [r7, #20]
 8005e08:	e02c      	b.n	8005e64 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e0a:	f3ef 8305 	mrs	r3, IPSR
 8005e0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e10:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d01a      	beq.n	8005e4c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005e1a:	f107 0308 	add.w	r3, r7, #8
 8005e1e:	4619      	mov	r1, r3
 8005e20:	6938      	ldr	r0, [r7, #16]
 8005e22:	f000 fe4d 	bl	8006ac0 <xQueueGiveFromISR>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d003      	beq.n	8005e34 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005e2c:	f06f 0302 	mvn.w	r3, #2
 8005e30:	617b      	str	r3, [r7, #20]
 8005e32:	e017      	b.n	8005e64 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d014      	beq.n	8005e64 <osSemaphoreRelease+0x78>
 8005e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e70 <osSemaphoreRelease+0x84>)
 8005e3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	e00b      	b.n	8005e64 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	2200      	movs	r2, #0
 8005e50:	2100      	movs	r1, #0
 8005e52:	6938      	ldr	r0, [r7, #16]
 8005e54:	f000 fc94 	bl	8006780 <xQueueGenericSend>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d002      	beq.n	8005e64 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005e5e:	f06f 0302 	mvn.w	r3, #2
 8005e62:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005e64:	697b      	ldr	r3, [r7, #20]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	e000ed04 	.word	0xe000ed04

08005e74 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b08a      	sub	sp, #40	@ 0x28
 8005e78:	af02      	add	r7, sp, #8
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005e80:	2300      	movs	r3, #0
 8005e82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e84:	f3ef 8305 	mrs	r3, IPSR
 8005e88:	613b      	str	r3, [r7, #16]
  return(result);
 8005e8a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d15f      	bne.n	8005f50 <osMessageQueueNew+0xdc>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d05c      	beq.n	8005f50 <osMessageQueueNew+0xdc>
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d059      	beq.n	8005f50 <osMessageQueueNew+0xdc>
    mem = -1;
 8005e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d029      	beq.n	8005efc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d012      	beq.n	8005ed6 <osMessageQueueNew+0x62>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	2b4f      	cmp	r3, #79	@ 0x4f
 8005eb6:	d90e      	bls.n	8005ed6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00a      	beq.n	8005ed6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	695a      	ldr	r2, [r3, #20]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	68b9      	ldr	r1, [r7, #8]
 8005ec8:	fb01 f303 	mul.w	r3, r1, r3
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d302      	bcc.n	8005ed6 <osMessageQueueNew+0x62>
        mem = 1;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	61bb      	str	r3, [r7, #24]
 8005ed4:	e014      	b.n	8005f00 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d110      	bne.n	8005f00 <osMessageQueueNew+0x8c>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10c      	bne.n	8005f00 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d108      	bne.n	8005f00 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d104      	bne.n	8005f00 <osMessageQueueNew+0x8c>
          mem = 0;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	61bb      	str	r3, [r7, #24]
 8005efa:	e001      	b.n	8005f00 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005efc:	2300      	movs	r3, #0
 8005efe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d10b      	bne.n	8005f1e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691a      	ldr	r2, [r3, #16]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	2100      	movs	r1, #0
 8005f10:	9100      	str	r1, [sp, #0]
 8005f12:	68b9      	ldr	r1, [r7, #8]
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 fa31 	bl	800637c <xQueueGenericCreateStatic>
 8005f1a:	61f8      	str	r0, [r7, #28]
 8005f1c:	e008      	b.n	8005f30 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d105      	bne.n	8005f30 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005f24:	2200      	movs	r2, #0
 8005f26:	68b9      	ldr	r1, [r7, #8]
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 faa4 	bl	8006476 <xQueueGenericCreate>
 8005f2e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00c      	beq.n	8005f50 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	617b      	str	r3, [r7, #20]
 8005f42:	e001      	b.n	8005f48 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005f44:	2300      	movs	r3, #0
 8005f46:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005f48:	6979      	ldr	r1, [r7, #20]
 8005f4a:	69f8      	ldr	r0, [r7, #28]
 8005f4c:	f001 fa08 	bl	8007360 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005f50:	69fb      	ldr	r3, [r7, #28]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3720      	adds	r7, #32
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
	...

08005f5c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b088      	sub	sp, #32
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	603b      	str	r3, [r7, #0]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f74:	f3ef 8305 	mrs	r3, IPSR
 8005f78:	617b      	str	r3, [r7, #20]
  return(result);
 8005f7a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d028      	beq.n	8005fd2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d005      	beq.n	8005f92 <osMessageQueuePut+0x36>
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d002      	beq.n	8005f92 <osMessageQueuePut+0x36>
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005f92:	f06f 0303 	mvn.w	r3, #3
 8005f96:	61fb      	str	r3, [r7, #28]
 8005f98:	e038      	b.n	800600c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005f9e:	f107 0210 	add.w	r2, r7, #16
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	68b9      	ldr	r1, [r7, #8]
 8005fa6:	69b8      	ldr	r0, [r7, #24]
 8005fa8:	f000 fcec 	bl	8006984 <xQueueGenericSendFromISR>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d003      	beq.n	8005fba <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005fb2:	f06f 0302 	mvn.w	r3, #2
 8005fb6:	61fb      	str	r3, [r7, #28]
 8005fb8:	e028      	b.n	800600c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d025      	beq.n	800600c <osMessageQueuePut+0xb0>
 8005fc0:	4b15      	ldr	r3, [pc, #84]	@ (8006018 <osMessageQueuePut+0xbc>)
 8005fc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	e01c      	b.n	800600c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <osMessageQueuePut+0x82>
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d103      	bne.n	8005fe6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005fde:	f06f 0303 	mvn.w	r3, #3
 8005fe2:	61fb      	str	r3, [r7, #28]
 8005fe4:	e012      	b.n	800600c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	68b9      	ldr	r1, [r7, #8]
 8005fec:	69b8      	ldr	r0, [r7, #24]
 8005fee:	f000 fbc7 	bl	8006780 <xQueueGenericSend>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d009      	beq.n	800600c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005ffe:	f06f 0301 	mvn.w	r3, #1
 8006002:	61fb      	str	r3, [r7, #28]
 8006004:	e002      	b.n	800600c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006006:	f06f 0302 	mvn.w	r3, #2
 800600a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800600c:	69fb      	ldr	r3, [r7, #28]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3720      	adds	r7, #32
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	e000ed04 	.word	0xe000ed04

0800601c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800601c:	b580      	push	{r7, lr}
 800601e:	b088      	sub	sp, #32
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
 8006028:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800602e:	2300      	movs	r3, #0
 8006030:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006032:	f3ef 8305 	mrs	r3, IPSR
 8006036:	617b      	str	r3, [r7, #20]
  return(result);
 8006038:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800603a:	2b00      	cmp	r3, #0
 800603c:	d028      	beq.n	8006090 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d005      	beq.n	8006050 <osMessageQueueGet+0x34>
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <osMessageQueueGet+0x34>
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006050:	f06f 0303 	mvn.w	r3, #3
 8006054:	61fb      	str	r3, [r7, #28]
 8006056:	e037      	b.n	80060c8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006058:	2300      	movs	r3, #0
 800605a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800605c:	f107 0310 	add.w	r3, r7, #16
 8006060:	461a      	mov	r2, r3
 8006062:	68b9      	ldr	r1, [r7, #8]
 8006064:	69b8      	ldr	r0, [r7, #24]
 8006066:	f000 ffad 	bl	8006fc4 <xQueueReceiveFromISR>
 800606a:	4603      	mov	r3, r0
 800606c:	2b01      	cmp	r3, #1
 800606e:	d003      	beq.n	8006078 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006070:	f06f 0302 	mvn.w	r3, #2
 8006074:	61fb      	str	r3, [r7, #28]
 8006076:	e027      	b.n	80060c8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d024      	beq.n	80060c8 <osMessageQueueGet+0xac>
 800607e:	4b15      	ldr	r3, [pc, #84]	@ (80060d4 <osMessageQueueGet+0xb8>)
 8006080:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	e01b      	b.n	80060c8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d002      	beq.n	800609c <osMessageQueueGet+0x80>
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d103      	bne.n	80060a4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800609c:	f06f 0303 	mvn.w	r3, #3
 80060a0:	61fb      	str	r3, [r7, #28]
 80060a2:	e011      	b.n	80060c8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	68b9      	ldr	r1, [r7, #8]
 80060a8:	69b8      	ldr	r0, [r7, #24]
 80060aa:	f000 fd99 	bl	8006be0 <xQueueReceive>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d009      	beq.n	80060c8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80060ba:	f06f 0301 	mvn.w	r3, #1
 80060be:	61fb      	str	r3, [r7, #28]
 80060c0:	e002      	b.n	80060c8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80060c2:	f06f 0302 	mvn.w	r3, #2
 80060c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80060c8:	69fb      	ldr	r3, [r7, #28]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3720      	adds	r7, #32
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	e000ed04 	.word	0xe000ed04

080060d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	4a07      	ldr	r2, [pc, #28]	@ (8006104 <vApplicationGetIdleTaskMemory+0x2c>)
 80060e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	4a06      	ldr	r2, [pc, #24]	@ (8006108 <vApplicationGetIdleTaskMemory+0x30>)
 80060ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2280      	movs	r2, #128	@ 0x80
 80060f4:	601a      	str	r2, [r3, #0]
}
 80060f6:	bf00      	nop
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	200007f4 	.word	0x200007f4
 8006108:	20000850 	.word	0x20000850

0800610c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4a07      	ldr	r2, [pc, #28]	@ (8006138 <vApplicationGetTimerTaskMemory+0x2c>)
 800611c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	4a06      	ldr	r2, [pc, #24]	@ (800613c <vApplicationGetTimerTaskMemory+0x30>)
 8006122:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800612a:	601a      	str	r2, [r3, #0]
}
 800612c:	bf00      	nop
 800612e:	3714      	adds	r7, #20
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	20000a50 	.word	0x20000a50
 800613c:	20000aac 	.word	0x20000aac

08006140 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f103 0208 	add.w	r2, r3, #8
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f04f 32ff 	mov.w	r2, #4294967295
 8006158:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f103 0208 	add.w	r2, r3, #8
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f103 0208 	add.w	r2, r3, #8
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800618e:	bf00      	nop
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800619a:	b480      	push	{r7}
 800619c:	b085      	sub	sp, #20
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	689a      	ldr	r2, [r3, #8]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	601a      	str	r2, [r3, #0]
}
 80061d6:	bf00      	nop
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061e2:	b480      	push	{r7}
 80061e4:	b085      	sub	sp, #20
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f8:	d103      	bne.n	8006202 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	e00c      	b.n	800621c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	3308      	adds	r3, #8
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	e002      	b.n	8006210 <vListInsert+0x2e>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	429a      	cmp	r2, r3
 800621a:	d2f6      	bcs.n	800620a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	1c5a      	adds	r2, r3, #1
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	601a      	str	r2, [r3, #0]
}
 8006248:	bf00      	nop
 800624a:	3714      	adds	r7, #20
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	6892      	ldr	r2, [r2, #8]
 800626a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	6852      	ldr	r2, [r2, #4]
 8006274:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	429a      	cmp	r2, r3
 800627e:	d103      	bne.n	8006288 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	1e5a      	subs	r2, r3, #1
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10b      	bne.n	80062d4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80062bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c0:	f383 8811 	msr	BASEPRI, r3
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80062ce:	bf00      	nop
 80062d0:	bf00      	nop
 80062d2:	e7fd      	b.n	80062d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80062d4:	f003 f850 	bl	8009378 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e0:	68f9      	ldr	r1, [r7, #12]
 80062e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80062e4:	fb01 f303 	mul.w	r3, r1, r3
 80062e8:	441a      	add	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006304:	3b01      	subs	r3, #1
 8006306:	68f9      	ldr	r1, [r7, #12]
 8006308:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800630a:	fb01 f303 	mul.w	r3, r1, r3
 800630e:	441a      	add	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	22ff      	movs	r2, #255	@ 0xff
 8006318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	22ff      	movs	r2, #255	@ 0xff
 8006320:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d114      	bne.n	8006354 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d01a      	beq.n	8006368 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	3310      	adds	r3, #16
 8006336:	4618      	mov	r0, r3
 8006338:	f001 fd04 	bl	8007d44 <xTaskRemoveFromEventList>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d012      	beq.n	8006368 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006342:	4b0d      	ldr	r3, [pc, #52]	@ (8006378 <xQueueGenericReset+0xd0>)
 8006344:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006348:	601a      	str	r2, [r3, #0]
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	e009      	b.n	8006368 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	3310      	adds	r3, #16
 8006358:	4618      	mov	r0, r3
 800635a:	f7ff fef1 	bl	8006140 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3324      	adds	r3, #36	@ 0x24
 8006362:	4618      	mov	r0, r3
 8006364:	f7ff feec 	bl	8006140 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006368:	f003 f838 	bl	80093dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800636c:	2301      	movs	r3, #1
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	e000ed04 	.word	0xe000ed04

0800637c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800637c:	b580      	push	{r7, lr}
 800637e:	b08e      	sub	sp, #56	@ 0x38
 8006380:	af02      	add	r7, sp, #8
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
 8006388:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10b      	bne.n	80063a8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80063a2:	bf00      	nop
 80063a4:	bf00      	nop
 80063a6:	e7fd      	b.n	80063a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10b      	bne.n	80063c6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80063c0:	bf00      	nop
 80063c2:	bf00      	nop
 80063c4:	e7fd      	b.n	80063c2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d002      	beq.n	80063d2 <xQueueGenericCreateStatic+0x56>
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <xQueueGenericCreateStatic+0x5a>
 80063d2:	2301      	movs	r3, #1
 80063d4:	e000      	b.n	80063d8 <xQueueGenericCreateStatic+0x5c>
 80063d6:	2300      	movs	r3, #0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10b      	bne.n	80063f4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80063dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	623b      	str	r3, [r7, #32]
}
 80063ee:	bf00      	nop
 80063f0:	bf00      	nop
 80063f2:	e7fd      	b.n	80063f0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d102      	bne.n	8006400 <xQueueGenericCreateStatic+0x84>
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <xQueueGenericCreateStatic+0x88>
 8006400:	2301      	movs	r3, #1
 8006402:	e000      	b.n	8006406 <xQueueGenericCreateStatic+0x8a>
 8006404:	2300      	movs	r3, #0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10b      	bne.n	8006422 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800640a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	61fb      	str	r3, [r7, #28]
}
 800641c:	bf00      	nop
 800641e:	bf00      	nop
 8006420:	e7fd      	b.n	800641e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006422:	2350      	movs	r3, #80	@ 0x50
 8006424:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2b50      	cmp	r3, #80	@ 0x50
 800642a:	d00b      	beq.n	8006444 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	61bb      	str	r3, [r7, #24]
}
 800643e:	bf00      	nop
 8006440:	bf00      	nop
 8006442:	e7fd      	b.n	8006440 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006444:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800644a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00d      	beq.n	800646c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006458:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800645c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	4613      	mov	r3, r2
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	68b9      	ldr	r1, [r7, #8]
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f000 f840 	bl	80064ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800646c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800646e:	4618      	mov	r0, r3
 8006470:	3730      	adds	r7, #48	@ 0x30
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006476:	b580      	push	{r7, lr}
 8006478:	b08a      	sub	sp, #40	@ 0x28
 800647a:	af02      	add	r7, sp, #8
 800647c:	60f8      	str	r0, [r7, #12]
 800647e:	60b9      	str	r1, [r7, #8]
 8006480:	4613      	mov	r3, r2
 8006482:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10b      	bne.n	80064a2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800648a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	613b      	str	r3, [r7, #16]
}
 800649c:	bf00      	nop
 800649e:	bf00      	nop
 80064a0:	e7fd      	b.n	800649e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	fb02 f303 	mul.w	r3, r2, r3
 80064aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	3350      	adds	r3, #80	@ 0x50
 80064b0:	4618      	mov	r0, r3
 80064b2:	f003 f883 	bl	80095bc <pvPortMalloc>
 80064b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d011      	beq.n	80064e2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	3350      	adds	r3, #80	@ 0x50
 80064c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064d0:	79fa      	ldrb	r2, [r7, #7]
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	4613      	mov	r3, r2
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	68b9      	ldr	r1, [r7, #8]
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 f805 	bl	80064ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80064e2:	69bb      	ldr	r3, [r7, #24]
	}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3720      	adds	r7, #32
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
 80064f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d103      	bne.n	8006508 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	601a      	str	r2, [r3, #0]
 8006506:	e002      	b.n	800650e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800651a:	2101      	movs	r1, #1
 800651c:	69b8      	ldr	r0, [r7, #24]
 800651e:	f7ff fec3 	bl	80062a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	78fa      	ldrb	r2, [r7, #3]
 8006526:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800652a:	bf00      	nop
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006532:	b580      	push	{r7, lr}
 8006534:	b082      	sub	sp, #8
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00e      	beq.n	800655e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006552:	2300      	movs	r3, #0
 8006554:	2200      	movs	r2, #0
 8006556:	2100      	movs	r1, #0
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 f911 	bl	8006780 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800655e:	bf00      	nop
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006566:	b580      	push	{r7, lr}
 8006568:	b086      	sub	sp, #24
 800656a:	af00      	add	r7, sp, #0
 800656c:	4603      	mov	r3, r0
 800656e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006570:	2301      	movs	r3, #1
 8006572:	617b      	str	r3, [r7, #20]
 8006574:	2300      	movs	r3, #0
 8006576:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006578:	79fb      	ldrb	r3, [r7, #7]
 800657a:	461a      	mov	r2, r3
 800657c:	6939      	ldr	r1, [r7, #16]
 800657e:	6978      	ldr	r0, [r7, #20]
 8006580:	f7ff ff79 	bl	8006476 <xQueueGenericCreate>
 8006584:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f7ff ffd3 	bl	8006532 <prvInitialiseMutex>

		return xNewQueue;
 800658c:	68fb      	ldr	r3, [r7, #12]
	}
 800658e:	4618      	mov	r0, r3
 8006590:	3718      	adds	r7, #24
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006596:	b580      	push	{r7, lr}
 8006598:	b088      	sub	sp, #32
 800659a:	af02      	add	r7, sp, #8
 800659c:	4603      	mov	r3, r0
 800659e:	6039      	str	r1, [r7, #0]
 80065a0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80065a2:	2301      	movs	r3, #1
 80065a4:	617b      	str	r3, [r7, #20]
 80065a6:	2300      	movs	r3, #0
 80065a8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80065aa:	79fb      	ldrb	r3, [r7, #7]
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2200      	movs	r2, #0
 80065b2:	6939      	ldr	r1, [r7, #16]
 80065b4:	6978      	ldr	r0, [r7, #20]
 80065b6:	f7ff fee1 	bl	800637c <xQueueGenericCreateStatic>
 80065ba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f7ff ffb8 	bl	8006532 <prvInitialiseMutex>

		return xNewQueue;
 80065c2:	68fb      	ldr	r3, [r7, #12]
	}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80065cc:	b590      	push	{r4, r7, lr}
 80065ce:	b087      	sub	sp, #28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10b      	bne.n	80065f6 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	60fb      	str	r3, [r7, #12]
}
 80065f0:	bf00      	nop
 80065f2:	bf00      	nop
 80065f4:	e7fd      	b.n	80065f2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	689c      	ldr	r4, [r3, #8]
 80065fa:	f001 fd63 	bl	80080c4 <xTaskGetCurrentTaskHandle>
 80065fe:	4603      	mov	r3, r0
 8006600:	429c      	cmp	r4, r3
 8006602:	d111      	bne.n	8006628 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	1e5a      	subs	r2, r3, #1
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d105      	bne.n	8006622 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006616:	2300      	movs	r3, #0
 8006618:	2200      	movs	r2, #0
 800661a:	2100      	movs	r1, #0
 800661c:	6938      	ldr	r0, [r7, #16]
 800661e:	f000 f8af 	bl	8006780 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006622:	2301      	movs	r3, #1
 8006624:	617b      	str	r3, [r7, #20]
 8006626:	e001      	b.n	800662c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006628:	2300      	movs	r3, #0
 800662a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800662c:	697b      	ldr	r3, [r7, #20]
	}
 800662e:	4618      	mov	r0, r3
 8006630:	371c      	adds	r7, #28
 8006632:	46bd      	mov	sp, r7
 8006634:	bd90      	pop	{r4, r7, pc}

08006636 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006636:	b590      	push	{r4, r7, lr}
 8006638:	b087      	sub	sp, #28
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
 800663e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10b      	bne.n	8006662 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800664a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800664e:	f383 8811 	msr	BASEPRI, r3
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	60fb      	str	r3, [r7, #12]
}
 800665c:	bf00      	nop
 800665e:	bf00      	nop
 8006660:	e7fd      	b.n	800665e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	689c      	ldr	r4, [r3, #8]
 8006666:	f001 fd2d 	bl	80080c4 <xTaskGetCurrentTaskHandle>
 800666a:	4603      	mov	r3, r0
 800666c:	429c      	cmp	r4, r3
 800666e:	d107      	bne.n	8006680 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	1c5a      	adds	r2, r3, #1
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800667a:	2301      	movs	r3, #1
 800667c:	617b      	str	r3, [r7, #20]
 800667e:	e00c      	b.n	800669a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006680:	6839      	ldr	r1, [r7, #0]
 8006682:	6938      	ldr	r0, [r7, #16]
 8006684:	f000 fb8e 	bl	8006da4 <xQueueSemaphoreTake>
 8006688:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d004      	beq.n	800669a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	1c5a      	adds	r2, r3, #1
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800669a:	697b      	ldr	r3, [r7, #20]
	}
 800669c:	4618      	mov	r0, r3
 800669e:	371c      	adds	r7, #28
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd90      	pop	{r4, r7, pc}

080066a4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b08a      	sub	sp, #40	@ 0x28
 80066a8:	af02      	add	r7, sp, #8
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10b      	bne.n	80066ce <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80066b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	61bb      	str	r3, [r7, #24]
}
 80066c8:	bf00      	nop
 80066ca:	bf00      	nop
 80066cc:	e7fd      	b.n	80066ca <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d90b      	bls.n	80066ee <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80066d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066da:	f383 8811 	msr	BASEPRI, r3
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	617b      	str	r3, [r7, #20]
}
 80066e8:	bf00      	nop
 80066ea:	bf00      	nop
 80066ec:	e7fd      	b.n	80066ea <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80066ee:	2302      	movs	r3, #2
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	2100      	movs	r1, #0
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f7ff fe3f 	bl	800637c <xQueueGenericCreateStatic>
 80066fe:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d002      	beq.n	800670c <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800670c:	69fb      	ldr	r3, [r7, #28]
	}
 800670e:	4618      	mov	r0, r3
 8006710:	3720      	adds	r7, #32
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006716:	b580      	push	{r7, lr}
 8006718:	b086      	sub	sp, #24
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10b      	bne.n	800673e <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	613b      	str	r3, [r7, #16]
}
 8006738:	bf00      	nop
 800673a:	bf00      	nop
 800673c:	e7fd      	b.n	800673a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800673e:	683a      	ldr	r2, [r7, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	429a      	cmp	r2, r3
 8006744:	d90b      	bls.n	800675e <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	60fb      	str	r3, [r7, #12]
}
 8006758:	bf00      	nop
 800675a:	bf00      	nop
 800675c:	e7fd      	b.n	800675a <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800675e:	2202      	movs	r2, #2
 8006760:	2100      	movs	r1, #0
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7ff fe87 	bl	8006476 <xQueueGenericCreate>
 8006768:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006776:	697b      	ldr	r3, [r7, #20]
	}
 8006778:	4618      	mov	r0, r3
 800677a:	3718      	adds	r7, #24
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b08e      	sub	sp, #56	@ 0x38
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
 800678c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800678e:	2300      	movs	r3, #0
 8006790:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10b      	bne.n	80067b4 <xQueueGenericSend+0x34>
	__asm volatile
 800679c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a0:	f383 8811 	msr	BASEPRI, r3
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80067ae:	bf00      	nop
 80067b0:	bf00      	nop
 80067b2:	e7fd      	b.n	80067b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d103      	bne.n	80067c2 <xQueueGenericSend+0x42>
 80067ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <xQueueGenericSend+0x46>
 80067c2:	2301      	movs	r3, #1
 80067c4:	e000      	b.n	80067c8 <xQueueGenericSend+0x48>
 80067c6:	2300      	movs	r3, #0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10b      	bne.n	80067e4 <xQueueGenericSend+0x64>
	__asm volatile
 80067cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d0:	f383 8811 	msr	BASEPRI, r3
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80067de:	bf00      	nop
 80067e0:	bf00      	nop
 80067e2:	e7fd      	b.n	80067e0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d103      	bne.n	80067f2 <xQueueGenericSend+0x72>
 80067ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d101      	bne.n	80067f6 <xQueueGenericSend+0x76>
 80067f2:	2301      	movs	r3, #1
 80067f4:	e000      	b.n	80067f8 <xQueueGenericSend+0x78>
 80067f6:	2300      	movs	r3, #0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10b      	bne.n	8006814 <xQueueGenericSend+0x94>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	623b      	str	r3, [r7, #32]
}
 800680e:	bf00      	nop
 8006810:	bf00      	nop
 8006812:	e7fd      	b.n	8006810 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006814:	f001 fc66 	bl	80080e4 <xTaskGetSchedulerState>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d102      	bne.n	8006824 <xQueueGenericSend+0xa4>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <xQueueGenericSend+0xa8>
 8006824:	2301      	movs	r3, #1
 8006826:	e000      	b.n	800682a <xQueueGenericSend+0xaa>
 8006828:	2300      	movs	r3, #0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10b      	bne.n	8006846 <xQueueGenericSend+0xc6>
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	61fb      	str	r3, [r7, #28]
}
 8006840:	bf00      	nop
 8006842:	bf00      	nop
 8006844:	e7fd      	b.n	8006842 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006846:	f002 fd97 	bl	8009378 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800684a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800684e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006852:	429a      	cmp	r2, r3
 8006854:	d302      	bcc.n	800685c <xQueueGenericSend+0xdc>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b02      	cmp	r3, #2
 800685a:	d129      	bne.n	80068b0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	68b9      	ldr	r1, [r7, #8]
 8006860:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006862:	f000 fc6d 	bl	8007140 <prvCopyDataToQueue>
 8006866:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686c:	2b00      	cmp	r3, #0
 800686e:	d010      	beq.n	8006892 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006872:	3324      	adds	r3, #36	@ 0x24
 8006874:	4618      	mov	r0, r3
 8006876:	f001 fa65 	bl	8007d44 <xTaskRemoveFromEventList>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d013      	beq.n	80068a8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006880:	4b3f      	ldr	r3, [pc, #252]	@ (8006980 <xQueueGenericSend+0x200>)
 8006882:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006886:	601a      	str	r2, [r3, #0]
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	e00a      	b.n	80068a8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d007      	beq.n	80068a8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006898:	4b39      	ldr	r3, [pc, #228]	@ (8006980 <xQueueGenericSend+0x200>)
 800689a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80068a8:	f002 fd98 	bl	80093dc <vPortExitCritical>
				return pdPASS;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e063      	b.n	8006978 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d103      	bne.n	80068be <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068b6:	f002 fd91 	bl	80093dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80068ba:	2300      	movs	r3, #0
 80068bc:	e05c      	b.n	8006978 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d106      	bne.n	80068d2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068c4:	f107 0314 	add.w	r3, r7, #20
 80068c8:	4618      	mov	r0, r3
 80068ca:	f001 fa9f 	bl	8007e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068ce:	2301      	movs	r3, #1
 80068d0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068d2:	f002 fd83 	bl	80093dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068d6:	f001 f80f 	bl	80078f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068da:	f002 fd4d 	bl	8009378 <vPortEnterCritical>
 80068de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068e4:	b25b      	sxtb	r3, r3
 80068e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ea:	d103      	bne.n	80068f4 <xQueueGenericSend+0x174>
 80068ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068fa:	b25b      	sxtb	r3, r3
 80068fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006900:	d103      	bne.n	800690a <xQueueGenericSend+0x18a>
 8006902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800690a:	f002 fd67 	bl	80093dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800690e:	1d3a      	adds	r2, r7, #4
 8006910:	f107 0314 	add.w	r3, r7, #20
 8006914:	4611      	mov	r1, r2
 8006916:	4618      	mov	r0, r3
 8006918:	f001 fa8e 	bl	8007e38 <xTaskCheckForTimeOut>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d124      	bne.n	800696c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006922:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006924:	f000 fd04 	bl	8007330 <prvIsQueueFull>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d018      	beq.n	8006960 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800692e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006930:	3310      	adds	r3, #16
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	4611      	mov	r1, r2
 8006936:	4618      	mov	r0, r3
 8006938:	f001 f9b2 	bl	8007ca0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800693c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800693e:	f000 fc8f 	bl	8007260 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006942:	f000 ffe7 	bl	8007914 <xTaskResumeAll>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	f47f af7c 	bne.w	8006846 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800694e:	4b0c      	ldr	r3, [pc, #48]	@ (8006980 <xQueueGenericSend+0x200>)
 8006950:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	e772      	b.n	8006846 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006960:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006962:	f000 fc7d 	bl	8007260 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006966:	f000 ffd5 	bl	8007914 <xTaskResumeAll>
 800696a:	e76c      	b.n	8006846 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800696c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800696e:	f000 fc77 	bl	8007260 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006972:	f000 ffcf 	bl	8007914 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006976:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006978:	4618      	mov	r0, r3
 800697a:	3738      	adds	r7, #56	@ 0x38
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	e000ed04 	.word	0xe000ed04

08006984 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b090      	sub	sp, #64	@ 0x40
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
 8006990:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10b      	bne.n	80069b4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80069ae:	bf00      	nop
 80069b0:	bf00      	nop
 80069b2:	e7fd      	b.n	80069b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d103      	bne.n	80069c2 <xQueueGenericSendFromISR+0x3e>
 80069ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <xQueueGenericSendFromISR+0x42>
 80069c2:	2301      	movs	r3, #1
 80069c4:	e000      	b.n	80069c8 <xQueueGenericSendFromISR+0x44>
 80069c6:	2300      	movs	r3, #0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10b      	bne.n	80069e4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80069cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80069de:	bf00      	nop
 80069e0:	bf00      	nop
 80069e2:	e7fd      	b.n	80069e0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d103      	bne.n	80069f2 <xQueueGenericSendFromISR+0x6e>
 80069ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d101      	bne.n	80069f6 <xQueueGenericSendFromISR+0x72>
 80069f2:	2301      	movs	r3, #1
 80069f4:	e000      	b.n	80069f8 <xQueueGenericSendFromISR+0x74>
 80069f6:	2300      	movs	r3, #0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10b      	bne.n	8006a14 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80069fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	623b      	str	r3, [r7, #32]
}
 8006a0e:	bf00      	nop
 8006a10:	bf00      	nop
 8006a12:	e7fd      	b.n	8006a10 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a14:	f002 fd90 	bl	8009538 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a18:	f3ef 8211 	mrs	r2, BASEPRI
 8006a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	61fa      	str	r2, [r7, #28]
 8006a2e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006a30:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a32:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d302      	bcc.n	8006a46 <xQueueGenericSendFromISR+0xc2>
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d12f      	bne.n	8006aa6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	68b9      	ldr	r1, [r7, #8]
 8006a5a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006a5c:	f000 fb70 	bl	8007140 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a60:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a68:	d112      	bne.n	8006a90 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d016      	beq.n	8006aa0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a74:	3324      	adds	r3, #36	@ 0x24
 8006a76:	4618      	mov	r0, r3
 8006a78:	f001 f964 	bl	8007d44 <xTaskRemoveFromEventList>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00e      	beq.n	8006aa0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00b      	beq.n	8006aa0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	e007      	b.n	8006aa0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006a94:	3301      	adds	r3, #1
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	b25a      	sxtb	r2, r3
 8006a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006aa4:	e001      	b.n	8006aaa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aac:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ab4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3740      	adds	r7, #64	@ 0x40
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b08e      	sub	sp, #56	@ 0x38
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10b      	bne.n	8006aec <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	623b      	str	r3, [r7, #32]
}
 8006ae6:	bf00      	nop
 8006ae8:	bf00      	nop
 8006aea:	e7fd      	b.n	8006ae8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00b      	beq.n	8006b0c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	61fb      	str	r3, [r7, #28]
}
 8006b06:	bf00      	nop
 8006b08:	bf00      	nop
 8006b0a:	e7fd      	b.n	8006b08 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d103      	bne.n	8006b1c <xQueueGiveFromISR+0x5c>
 8006b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d101      	bne.n	8006b20 <xQueueGiveFromISR+0x60>
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e000      	b.n	8006b22 <xQueueGiveFromISR+0x62>
 8006b20:	2300      	movs	r3, #0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10b      	bne.n	8006b3e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b2a:	f383 8811 	msr	BASEPRI, r3
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	61bb      	str	r3, [r7, #24]
}
 8006b38:	bf00      	nop
 8006b3a:	bf00      	nop
 8006b3c:	e7fd      	b.n	8006b3a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b3e:	f002 fcfb 	bl	8009538 <vPortValidateInterruptPriority>
	__asm volatile
 8006b42:	f3ef 8211 	mrs	r2, BASEPRI
 8006b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	617a      	str	r2, [r7, #20]
 8006b58:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006b5a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b62:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d22b      	bcs.n	8006bc6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7a:	1c5a      	adds	r2, r3, #1
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b80:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b88:	d112      	bne.n	8006bb0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d016      	beq.n	8006bc0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b94:	3324      	adds	r3, #36	@ 0x24
 8006b96:	4618      	mov	r0, r3
 8006b98:	f001 f8d4 	bl	8007d44 <xTaskRemoveFromEventList>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00e      	beq.n	8006bc0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00b      	beq.n	8006bc0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	2201      	movs	r2, #1
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	e007      	b.n	8006bc0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	b25a      	sxtb	r2, r3
 8006bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bc4:	e001      	b.n	8006bca <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bcc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f383 8811 	msr	BASEPRI, r3
}
 8006bd4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3738      	adds	r7, #56	@ 0x38
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b08c      	sub	sp, #48	@ 0x30
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006bec:	2300      	movs	r3, #0
 8006bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10b      	bne.n	8006c12 <xQueueReceive+0x32>
	__asm volatile
 8006bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	623b      	str	r3, [r7, #32]
}
 8006c0c:	bf00      	nop
 8006c0e:	bf00      	nop
 8006c10:	e7fd      	b.n	8006c0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d103      	bne.n	8006c20 <xQueueReceive+0x40>
 8006c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <xQueueReceive+0x44>
 8006c20:	2301      	movs	r3, #1
 8006c22:	e000      	b.n	8006c26 <xQueueReceive+0x46>
 8006c24:	2300      	movs	r3, #0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10b      	bne.n	8006c42 <xQueueReceive+0x62>
	__asm volatile
 8006c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	61fb      	str	r3, [r7, #28]
}
 8006c3c:	bf00      	nop
 8006c3e:	bf00      	nop
 8006c40:	e7fd      	b.n	8006c3e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c42:	f001 fa4f 	bl	80080e4 <xTaskGetSchedulerState>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d102      	bne.n	8006c52 <xQueueReceive+0x72>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <xQueueReceive+0x76>
 8006c52:	2301      	movs	r3, #1
 8006c54:	e000      	b.n	8006c58 <xQueueReceive+0x78>
 8006c56:	2300      	movs	r3, #0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10b      	bne.n	8006c74 <xQueueReceive+0x94>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	61bb      	str	r3, [r7, #24]
}
 8006c6e:	bf00      	nop
 8006c70:	bf00      	nop
 8006c72:	e7fd      	b.n	8006c70 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c74:	f002 fb80 	bl	8009378 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c7c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d01f      	beq.n	8006cc4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c84:	68b9      	ldr	r1, [r7, #8]
 8006c86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c88:	f000 fac4 	bl	8007214 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8e:	1e5a      	subs	r2, r3, #1
 8006c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c92:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00f      	beq.n	8006cbc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c9e:	3310      	adds	r3, #16
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f001 f84f 	bl	8007d44 <xTaskRemoveFromEventList>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d007      	beq.n	8006cbc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006cac:	4b3c      	ldr	r3, [pc, #240]	@ (8006da0 <xQueueReceive+0x1c0>)
 8006cae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006cbc:	f002 fb8e 	bl	80093dc <vPortExitCritical>
				return pdPASS;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e069      	b.n	8006d98 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d103      	bne.n	8006cd2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cca:	f002 fb87 	bl	80093dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	e062      	b.n	8006d98 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d106      	bne.n	8006ce6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cd8:	f107 0310 	add.w	r3, r7, #16
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f001 f895 	bl	8007e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ce6:	f002 fb79 	bl	80093dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cea:	f000 fe05 	bl	80078f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cee:	f002 fb43 	bl	8009378 <vPortEnterCritical>
 8006cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006cf8:	b25b      	sxtb	r3, r3
 8006cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cfe:	d103      	bne.n	8006d08 <xQueueReceive+0x128>
 8006d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d0e:	b25b      	sxtb	r3, r3
 8006d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d14:	d103      	bne.n	8006d1e <xQueueReceive+0x13e>
 8006d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d1e:	f002 fb5d 	bl	80093dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d22:	1d3a      	adds	r2, r7, #4
 8006d24:	f107 0310 	add.w	r3, r7, #16
 8006d28:	4611      	mov	r1, r2
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f001 f884 	bl	8007e38 <xTaskCheckForTimeOut>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d123      	bne.n	8006d7e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d38:	f000 fae4 	bl	8007304 <prvIsQueueEmpty>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d017      	beq.n	8006d72 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d44:	3324      	adds	r3, #36	@ 0x24
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	4611      	mov	r1, r2
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 ffa8 	bl	8007ca0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d52:	f000 fa85 	bl	8007260 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d56:	f000 fddd 	bl	8007914 <xTaskResumeAll>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d189      	bne.n	8006c74 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006d60:	4b0f      	ldr	r3, [pc, #60]	@ (8006da0 <xQueueReceive+0x1c0>)
 8006d62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d66:	601a      	str	r2, [r3, #0]
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	e780      	b.n	8006c74 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006d72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d74:	f000 fa74 	bl	8007260 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d78:	f000 fdcc 	bl	8007914 <xTaskResumeAll>
 8006d7c:	e77a      	b.n	8006c74 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d80:	f000 fa6e 	bl	8007260 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d84:	f000 fdc6 	bl	8007914 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d8a:	f000 fabb 	bl	8007304 <prvIsQueueEmpty>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f43f af6f 	beq.w	8006c74 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d96:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3730      	adds	r7, #48	@ 0x30
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	e000ed04 	.word	0xe000ed04

08006da4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b08e      	sub	sp, #56	@ 0x38
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006dae:	2300      	movs	r3, #0
 8006db0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006db6:	2300      	movs	r3, #0
 8006db8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10b      	bne.n	8006dd8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	623b      	str	r3, [r7, #32]
}
 8006dd2:	bf00      	nop
 8006dd4:	bf00      	nop
 8006dd6:	e7fd      	b.n	8006dd4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00b      	beq.n	8006df8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	61fb      	str	r3, [r7, #28]
}
 8006df2:	bf00      	nop
 8006df4:	bf00      	nop
 8006df6:	e7fd      	b.n	8006df4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006df8:	f001 f974 	bl	80080e4 <xTaskGetSchedulerState>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d102      	bne.n	8006e08 <xQueueSemaphoreTake+0x64>
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <xQueueSemaphoreTake+0x68>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e000      	b.n	8006e0e <xQueueSemaphoreTake+0x6a>
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10b      	bne.n	8006e2a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e16:	f383 8811 	msr	BASEPRI, r3
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	61bb      	str	r3, [r7, #24]
}
 8006e24:	bf00      	nop
 8006e26:	bf00      	nop
 8006e28:	e7fd      	b.n	8006e26 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e2a:	f002 faa5 	bl	8009378 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e32:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d024      	beq.n	8006e84 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3c:	1e5a      	subs	r2, r3, #1
 8006e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e40:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d104      	bne.n	8006e54 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006e4a:	f001 fac5 	bl	80083d8 <pvTaskIncrementMutexHeldCount>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e52:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00f      	beq.n	8006e7c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e5e:	3310      	adds	r3, #16
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 ff6f 	bl	8007d44 <xTaskRemoveFromEventList>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d007      	beq.n	8006e7c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e6c:	4b54      	ldr	r3, [pc, #336]	@ (8006fc0 <xQueueSemaphoreTake+0x21c>)
 8006e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e7c:	f002 faae 	bl	80093dc <vPortExitCritical>
				return pdPASS;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e098      	b.n	8006fb6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d112      	bne.n	8006eb0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00b      	beq.n	8006ea8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	617b      	str	r3, [r7, #20]
}
 8006ea2:	bf00      	nop
 8006ea4:	bf00      	nop
 8006ea6:	e7fd      	b.n	8006ea4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006ea8:	f002 fa98 	bl	80093dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006eac:	2300      	movs	r3, #0
 8006eae:	e082      	b.n	8006fb6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d106      	bne.n	8006ec4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006eb6:	f107 030c 	add.w	r3, r7, #12
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 ffa6 	bl	8007e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ec4:	f002 fa8a 	bl	80093dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ec8:	f000 fd16 	bl	80078f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ecc:	f002 fa54 	bl	8009378 <vPortEnterCritical>
 8006ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ed2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ed6:	b25b      	sxtb	r3, r3
 8006ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006edc:	d103      	bne.n	8006ee6 <xQueueSemaphoreTake+0x142>
 8006ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006eec:	b25b      	sxtb	r3, r3
 8006eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef2:	d103      	bne.n	8006efc <xQueueSemaphoreTake+0x158>
 8006ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006efc:	f002 fa6e 	bl	80093dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f00:	463a      	mov	r2, r7
 8006f02:	f107 030c 	add.w	r3, r7, #12
 8006f06:	4611      	mov	r1, r2
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f000 ff95 	bl	8007e38 <xTaskCheckForTimeOut>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d132      	bne.n	8006f7a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f16:	f000 f9f5 	bl	8007304 <prvIsQueueEmpty>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d026      	beq.n	8006f6e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d109      	bne.n	8006f3c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006f28:	f002 fa26 	bl	8009378 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f001 f8f5 	bl	8008120 <xTaskPriorityInherit>
 8006f36:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006f38:	f002 fa50 	bl	80093dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f3e:	3324      	adds	r3, #36	@ 0x24
 8006f40:	683a      	ldr	r2, [r7, #0]
 8006f42:	4611      	mov	r1, r2
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 feab 	bl	8007ca0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f4c:	f000 f988 	bl	8007260 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f50:	f000 fce0 	bl	8007914 <xTaskResumeAll>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f47f af67 	bne.w	8006e2a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006f5c:	4b18      	ldr	r3, [pc, #96]	@ (8006fc0 <xQueueSemaphoreTake+0x21c>)
 8006f5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	e75d      	b.n	8006e2a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006f6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f70:	f000 f976 	bl	8007260 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f74:	f000 fcce 	bl	8007914 <xTaskResumeAll>
 8006f78:	e757      	b.n	8006e2a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006f7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f7c:	f000 f970 	bl	8007260 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f80:	f000 fcc8 	bl	8007914 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f86:	f000 f9bd 	bl	8007304 <prvIsQueueEmpty>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f43f af4c 	beq.w	8006e2a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00d      	beq.n	8006fb4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006f98:	f002 f9ee 	bl	8009378 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006f9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f9e:	f000 f8b7 	bl	8007110 <prvGetDisinheritPriorityAfterTimeout>
 8006fa2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006faa:	4618      	mov	r0, r3
 8006fac:	f001 f990 	bl	80082d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006fb0:	f002 fa14 	bl	80093dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006fb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3738      	adds	r7, #56	@ 0x38
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	e000ed04 	.word	0xe000ed04

08006fc4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b08e      	sub	sp, #56	@ 0x38
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10b      	bne.n	8006ff2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	623b      	str	r3, [r7, #32]
}
 8006fec:	bf00      	nop
 8006fee:	bf00      	nop
 8006ff0:	e7fd      	b.n	8006fee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d103      	bne.n	8007000 <xQueueReceiveFromISR+0x3c>
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <xQueueReceiveFromISR+0x40>
 8007000:	2301      	movs	r3, #1
 8007002:	e000      	b.n	8007006 <xQueueReceiveFromISR+0x42>
 8007004:	2300      	movs	r3, #0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10b      	bne.n	8007022 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	61fb      	str	r3, [r7, #28]
}
 800701c:	bf00      	nop
 800701e:	bf00      	nop
 8007020:	e7fd      	b.n	800701e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007022:	f002 fa89 	bl	8009538 <vPortValidateInterruptPriority>
	__asm volatile
 8007026:	f3ef 8211 	mrs	r2, BASEPRI
 800702a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	61ba      	str	r2, [r7, #24]
 800703c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800703e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007040:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007046:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704a:	2b00      	cmp	r3, #0
 800704c:	d02f      	beq.n	80070ae <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800704e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007050:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007054:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007058:	68b9      	ldr	r1, [r7, #8]
 800705a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800705c:	f000 f8da 	bl	8007214 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007062:	1e5a      	subs	r2, r3, #1
 8007064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007066:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007068:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800706c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007070:	d112      	bne.n	8007098 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d016      	beq.n	80070a8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800707a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707c:	3310      	adds	r3, #16
 800707e:	4618      	mov	r0, r3
 8007080:	f000 fe60 	bl	8007d44 <xTaskRemoveFromEventList>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00e      	beq.n	80070a8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00b      	beq.n	80070a8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	e007      	b.n	80070a8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800709c:	3301      	adds	r3, #1
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	b25a      	sxtb	r2, r3
 80070a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80070a8:	2301      	movs	r3, #1
 80070aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80070ac:	e001      	b.n	80070b2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80070ae:	2300      	movs	r3, #0
 80070b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80070b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	f383 8811 	msr	BASEPRI, r3
}
 80070bc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3738      	adds	r7, #56	@ 0x38
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10b      	bne.n	80070f2 <vQueueDelete+0x2a>
	__asm volatile
 80070da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	60bb      	str	r3, [r7, #8]
}
 80070ec:	bf00      	nop
 80070ee:	bf00      	nop
 80070f0:	e7fd      	b.n	80070ee <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f000 f95e 	bl	80073b4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d102      	bne.n	8007108 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f002 fb28 	bl	8009758 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007108:	bf00      	nop
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711c:	2b00      	cmp	r3, #0
 800711e:	d006      	beq.n	800712e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	e001      	b.n	8007132 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800712e:	2300      	movs	r3, #0
 8007130:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007132:	68fb      	ldr	r3, [r7, #12]
	}
 8007134:	4618      	mov	r0, r3
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800714c:	2300      	movs	r3, #0
 800714e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007154:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10d      	bne.n	800717a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d14d      	bne.n	8007202 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	4618      	mov	r0, r3
 800716c:	f001 f840 	bl	80081f0 <xTaskPriorityDisinherit>
 8007170:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	609a      	str	r2, [r3, #8]
 8007178:	e043      	b.n	8007202 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d119      	bne.n	80071b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6858      	ldr	r0, [r3, #4]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007188:	461a      	mov	r2, r3
 800718a:	68b9      	ldr	r1, [r7, #8]
 800718c:	f002 fc30 	bl	80099f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007198:	441a      	add	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d32b      	bcc.n	8007202 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	605a      	str	r2, [r3, #4]
 80071b2:	e026      	b.n	8007202 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	68d8      	ldr	r0, [r3, #12]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071bc:	461a      	mov	r2, r3
 80071be:	68b9      	ldr	r1, [r7, #8]
 80071c0:	f002 fc16 	bl	80099f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	68da      	ldr	r2, [r3, #12]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071cc:	425b      	negs	r3, r3
 80071ce:	441a      	add	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	68da      	ldr	r2, [r3, #12]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d207      	bcs.n	80071f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e8:	425b      	negs	r3, r3
 80071ea:	441a      	add	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d105      	bne.n	8007202 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d002      	beq.n	8007202 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	3b01      	subs	r3, #1
 8007200:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	1c5a      	adds	r2, r3, #1
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800720a:	697b      	ldr	r3, [r7, #20]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3718      	adds	r7, #24
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007222:	2b00      	cmp	r3, #0
 8007224:	d018      	beq.n	8007258 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	68da      	ldr	r2, [r3, #12]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722e:	441a      	add	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68da      	ldr	r2, [r3, #12]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	429a      	cmp	r2, r3
 800723e:	d303      	bcc.n	8007248 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68d9      	ldr	r1, [r3, #12]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007250:	461a      	mov	r2, r3
 8007252:	6838      	ldr	r0, [r7, #0]
 8007254:	f002 fbcc 	bl	80099f0 <memcpy>
	}
}
 8007258:	bf00      	nop
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007268:	f002 f886 	bl	8009378 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007272:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007274:	e011      	b.n	800729a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727a:	2b00      	cmp	r3, #0
 800727c:	d012      	beq.n	80072a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	3324      	adds	r3, #36	@ 0x24
 8007282:	4618      	mov	r0, r3
 8007284:	f000 fd5e 	bl	8007d44 <xTaskRemoveFromEventList>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800728e:	f000 fe37 	bl	8007f00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007292:	7bfb      	ldrb	r3, [r7, #15]
 8007294:	3b01      	subs	r3, #1
 8007296:	b2db      	uxtb	r3, r3
 8007298:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800729a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	dce9      	bgt.n	8007276 <prvUnlockQueue+0x16>
 80072a2:	e000      	b.n	80072a6 <prvUnlockQueue+0x46>
					break;
 80072a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	22ff      	movs	r2, #255	@ 0xff
 80072aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80072ae:	f002 f895 	bl	80093dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80072b2:	f002 f861 	bl	8009378 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072be:	e011      	b.n	80072e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d012      	beq.n	80072ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3310      	adds	r3, #16
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fd39 	bl	8007d44 <xTaskRemoveFromEventList>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d001      	beq.n	80072dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80072d8:	f000 fe12 	bl	8007f00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80072dc:	7bbb      	ldrb	r3, [r7, #14]
 80072de:	3b01      	subs	r3, #1
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	dce9      	bgt.n	80072c0 <prvUnlockQueue+0x60>
 80072ec:	e000      	b.n	80072f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80072ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	22ff      	movs	r2, #255	@ 0xff
 80072f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80072f8:	f002 f870 	bl	80093dc <vPortExitCritical>
}
 80072fc:	bf00      	nop
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800730c:	f002 f834 	bl	8009378 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007314:	2b00      	cmp	r3, #0
 8007316:	d102      	bne.n	800731e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007318:	2301      	movs	r3, #1
 800731a:	60fb      	str	r3, [r7, #12]
 800731c:	e001      	b.n	8007322 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800731e:	2300      	movs	r3, #0
 8007320:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007322:	f002 f85b 	bl	80093dc <vPortExitCritical>

	return xReturn;
 8007326:	68fb      	ldr	r3, [r7, #12]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007338:	f002 f81e 	bl	8009378 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007344:	429a      	cmp	r2, r3
 8007346:	d102      	bne.n	800734e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007348:	2301      	movs	r3, #1
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	e001      	b.n	8007352 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800734e:	2300      	movs	r3, #0
 8007350:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007352:	f002 f843 	bl	80093dc <vPortExitCritical>

	return xReturn;
 8007356:	68fb      	ldr	r3, [r7, #12]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800736a:	2300      	movs	r3, #0
 800736c:	60fb      	str	r3, [r7, #12]
 800736e:	e014      	b.n	800739a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007370:	4a0f      	ldr	r2, [pc, #60]	@ (80073b0 <vQueueAddToRegistry+0x50>)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10b      	bne.n	8007394 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800737c:	490c      	ldr	r1, [pc, #48]	@ (80073b0 <vQueueAddToRegistry+0x50>)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007386:	4a0a      	ldr	r2, [pc, #40]	@ (80073b0 <vQueueAddToRegistry+0x50>)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	00db      	lsls	r3, r3, #3
 800738c:	4413      	add	r3, r2
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007392:	e006      	b.n	80073a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	3301      	adds	r3, #1
 8007398:	60fb      	str	r3, [r7, #12]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2b07      	cmp	r3, #7
 800739e:	d9e7      	bls.n	8007370 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80073a0:	bf00      	nop
 80073a2:	bf00      	nop
 80073a4:	3714      	adds	r7, #20
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	20000eac 	.word	0x20000eac

080073b4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073bc:	2300      	movs	r3, #0
 80073be:	60fb      	str	r3, [r7, #12]
 80073c0:	e016      	b.n	80073f0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80073c2:	4a10      	ldr	r2, [pc, #64]	@ (8007404 <vQueueUnregisterQueue+0x50>)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	00db      	lsls	r3, r3, #3
 80073c8:	4413      	add	r3, r2
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d10b      	bne.n	80073ea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80073d2:	4a0c      	ldr	r2, [pc, #48]	@ (8007404 <vQueueUnregisterQueue+0x50>)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2100      	movs	r1, #0
 80073d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80073dc:	4a09      	ldr	r2, [pc, #36]	@ (8007404 <vQueueUnregisterQueue+0x50>)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	00db      	lsls	r3, r3, #3
 80073e2:	4413      	add	r3, r2
 80073e4:	2200      	movs	r2, #0
 80073e6:	605a      	str	r2, [r3, #4]
				break;
 80073e8:	e006      	b.n	80073f8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3301      	adds	r3, #1
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2b07      	cmp	r3, #7
 80073f4:	d9e5      	bls.n	80073c2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80073f6:	bf00      	nop
 80073f8:	bf00      	nop
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	20000eac 	.word	0x20000eac

08007408 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007408:	b580      	push	{r7, lr}
 800740a:	b086      	sub	sp, #24
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007418:	f001 ffae 	bl	8009378 <vPortEnterCritical>
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007422:	b25b      	sxtb	r3, r3
 8007424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007428:	d103      	bne.n	8007432 <vQueueWaitForMessageRestricted+0x2a>
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007438:	b25b      	sxtb	r3, r3
 800743a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800743e:	d103      	bne.n	8007448 <vQueueWaitForMessageRestricted+0x40>
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007448:	f001 ffc8 	bl	80093dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007450:	2b00      	cmp	r3, #0
 8007452:	d106      	bne.n	8007462 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	3324      	adds	r3, #36	@ 0x24
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	68b9      	ldr	r1, [r7, #8]
 800745c:	4618      	mov	r0, r3
 800745e:	f000 fc45 	bl	8007cec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007462:	6978      	ldr	r0, [r7, #20]
 8007464:	f7ff fefc 	bl	8007260 <prvUnlockQueue>
	}
 8007468:	bf00      	nop
 800746a:	3718      	adds	r7, #24
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007470:	b580      	push	{r7, lr}
 8007472:	b08e      	sub	sp, #56	@ 0x38
 8007474:	af04      	add	r7, sp, #16
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
 800747c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800747e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10b      	bne.n	800749c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	623b      	str	r3, [r7, #32]
}
 8007496:	bf00      	nop
 8007498:	bf00      	nop
 800749a:	e7fd      	b.n	8007498 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800749c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10b      	bne.n	80074ba <xTaskCreateStatic+0x4a>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	61fb      	str	r3, [r7, #28]
}
 80074b4:	bf00      	nop
 80074b6:	bf00      	nop
 80074b8:	e7fd      	b.n	80074b6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074ba:	235c      	movs	r3, #92	@ 0x5c
 80074bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	2b5c      	cmp	r3, #92	@ 0x5c
 80074c2:	d00b      	beq.n	80074dc <xTaskCreateStatic+0x6c>
	__asm volatile
 80074c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c8:	f383 8811 	msr	BASEPRI, r3
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	61bb      	str	r3, [r7, #24]
}
 80074d6:	bf00      	nop
 80074d8:	bf00      	nop
 80074da:	e7fd      	b.n	80074d8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80074dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80074de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d01e      	beq.n	8007522 <xTaskCreateStatic+0xb2>
 80074e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d01b      	beq.n	8007522 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80074ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074f2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80074f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074fc:	2300      	movs	r3, #0
 80074fe:	9303      	str	r3, [sp, #12]
 8007500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007502:	9302      	str	r3, [sp, #8]
 8007504:	f107 0314 	add.w	r3, r7, #20
 8007508:	9301      	str	r3, [sp, #4]
 800750a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	68b9      	ldr	r1, [r7, #8]
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f000 f850 	bl	80075ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800751a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800751c:	f000 f8de 	bl	80076dc <prvAddNewTaskToReadyList>
 8007520:	e001      	b.n	8007526 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007522:	2300      	movs	r3, #0
 8007524:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007526:	697b      	ldr	r3, [r7, #20]
	}
 8007528:	4618      	mov	r0, r3
 800752a:	3728      	adds	r7, #40	@ 0x28
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007530:	b580      	push	{r7, lr}
 8007532:	b08c      	sub	sp, #48	@ 0x30
 8007534:	af04      	add	r7, sp, #16
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	603b      	str	r3, [r7, #0]
 800753c:	4613      	mov	r3, r2
 800753e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007540:	88fb      	ldrh	r3, [r7, #6]
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4618      	mov	r0, r3
 8007546:	f002 f839 	bl	80095bc <pvPortMalloc>
 800754a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00e      	beq.n	8007570 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007552:	205c      	movs	r0, #92	@ 0x5c
 8007554:	f002 f832 	bl	80095bc <pvPortMalloc>
 8007558:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d003      	beq.n	8007568 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	631a      	str	r2, [r3, #48]	@ 0x30
 8007566:	e005      	b.n	8007574 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007568:	6978      	ldr	r0, [r7, #20]
 800756a:	f002 f8f5 	bl	8009758 <vPortFree>
 800756e:	e001      	b.n	8007574 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007570:	2300      	movs	r3, #0
 8007572:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d017      	beq.n	80075aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007582:	88fa      	ldrh	r2, [r7, #6]
 8007584:	2300      	movs	r3, #0
 8007586:	9303      	str	r3, [sp, #12]
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	9302      	str	r3, [sp, #8]
 800758c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800758e:	9301      	str	r3, [sp, #4]
 8007590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	68b9      	ldr	r1, [r7, #8]
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f000 f80e 	bl	80075ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800759e:	69f8      	ldr	r0, [r7, #28]
 80075a0:	f000 f89c 	bl	80076dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80075a4:	2301      	movs	r3, #1
 80075a6:	61bb      	str	r3, [r7, #24]
 80075a8:	e002      	b.n	80075b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80075aa:	f04f 33ff 	mov.w	r3, #4294967295
 80075ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80075b0:	69bb      	ldr	r3, [r7, #24]
	}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3720      	adds	r7, #32
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b088      	sub	sp, #32
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	607a      	str	r2, [r7, #4]
 80075c6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80075c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ca:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	461a      	mov	r2, r3
 80075d2:	21a5      	movs	r1, #165	@ 0xa5
 80075d4:	f002 f9e0 	bl	8009998 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80075d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80075e2:	3b01      	subs	r3, #1
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	f023 0307 	bic.w	r3, r3, #7
 80075f0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	f003 0307 	and.w	r3, r3, #7
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00b      	beq.n	8007614 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80075fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007600:	f383 8811 	msr	BASEPRI, r3
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	617b      	str	r3, [r7, #20]
}
 800760e:	bf00      	nop
 8007610:	bf00      	nop
 8007612:	e7fd      	b.n	8007610 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d01f      	beq.n	800765a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800761a:	2300      	movs	r3, #0
 800761c:	61fb      	str	r3, [r7, #28]
 800761e:	e012      	b.n	8007646 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	4413      	add	r3, r2
 8007626:	7819      	ldrb	r1, [r3, #0]
 8007628:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	4413      	add	r3, r2
 800762e:	3334      	adds	r3, #52	@ 0x34
 8007630:	460a      	mov	r2, r1
 8007632:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	4413      	add	r3, r2
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d006      	beq.n	800764e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	3301      	adds	r3, #1
 8007644:	61fb      	str	r3, [r7, #28]
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	2b0f      	cmp	r3, #15
 800764a:	d9e9      	bls.n	8007620 <prvInitialiseNewTask+0x66>
 800764c:	e000      	b.n	8007650 <prvInitialiseNewTask+0x96>
			{
				break;
 800764e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007652:	2200      	movs	r2, #0
 8007654:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007658:	e003      	b.n	8007662 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800765a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765c:	2200      	movs	r2, #0
 800765e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007664:	2b37      	cmp	r3, #55	@ 0x37
 8007666:	d901      	bls.n	800766c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007668:	2337      	movs	r3, #55	@ 0x37
 800766a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800766c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007670:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007674:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007676:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767a:	2200      	movs	r2, #0
 800767c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800767e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007680:	3304      	adds	r3, #4
 8007682:	4618      	mov	r0, r3
 8007684:	f7fe fd7c 	bl	8006180 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768a:	3318      	adds	r3, #24
 800768c:	4618      	mov	r0, r3
 800768e:	f7fe fd77 	bl	8006180 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007696:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800769a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800769e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80076a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076a6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80076a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076aa:	2200      	movs	r2, #0
 80076ac:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	68f9      	ldr	r1, [r7, #12]
 80076ba:	69b8      	ldr	r0, [r7, #24]
 80076bc:	f001 fd2c 	bl	8009118 <pxPortInitialiseStack>
 80076c0:	4602      	mov	r2, r0
 80076c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80076c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d002      	beq.n	80076d2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076d2:	bf00      	nop
 80076d4:	3720      	adds	r7, #32
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
	...

080076dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80076e4:	f001 fe48 	bl	8009378 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80076e8:	4b2d      	ldr	r3, [pc, #180]	@ (80077a0 <prvAddNewTaskToReadyList+0xc4>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3301      	adds	r3, #1
 80076ee:	4a2c      	ldr	r2, [pc, #176]	@ (80077a0 <prvAddNewTaskToReadyList+0xc4>)
 80076f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80076f2:	4b2c      	ldr	r3, [pc, #176]	@ (80077a4 <prvAddNewTaskToReadyList+0xc8>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d109      	bne.n	800770e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80076fa:	4a2a      	ldr	r2, [pc, #168]	@ (80077a4 <prvAddNewTaskToReadyList+0xc8>)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007700:	4b27      	ldr	r3, [pc, #156]	@ (80077a0 <prvAddNewTaskToReadyList+0xc4>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d110      	bne.n	800772a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007708:	f000 fc1e 	bl	8007f48 <prvInitialiseTaskLists>
 800770c:	e00d      	b.n	800772a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800770e:	4b26      	ldr	r3, [pc, #152]	@ (80077a8 <prvAddNewTaskToReadyList+0xcc>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d109      	bne.n	800772a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007716:	4b23      	ldr	r3, [pc, #140]	@ (80077a4 <prvAddNewTaskToReadyList+0xc8>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007720:	429a      	cmp	r2, r3
 8007722:	d802      	bhi.n	800772a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007724:	4a1f      	ldr	r2, [pc, #124]	@ (80077a4 <prvAddNewTaskToReadyList+0xc8>)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800772a:	4b20      	ldr	r3, [pc, #128]	@ (80077ac <prvAddNewTaskToReadyList+0xd0>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3301      	adds	r3, #1
 8007730:	4a1e      	ldr	r2, [pc, #120]	@ (80077ac <prvAddNewTaskToReadyList+0xd0>)
 8007732:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007734:	4b1d      	ldr	r3, [pc, #116]	@ (80077ac <prvAddNewTaskToReadyList+0xd0>)
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007740:	4b1b      	ldr	r3, [pc, #108]	@ (80077b0 <prvAddNewTaskToReadyList+0xd4>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	429a      	cmp	r2, r3
 8007746:	d903      	bls.n	8007750 <prvAddNewTaskToReadyList+0x74>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800774c:	4a18      	ldr	r2, [pc, #96]	@ (80077b0 <prvAddNewTaskToReadyList+0xd4>)
 800774e:	6013      	str	r3, [r2, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007754:	4613      	mov	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4413      	add	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4a15      	ldr	r2, [pc, #84]	@ (80077b4 <prvAddNewTaskToReadyList+0xd8>)
 800775e:	441a      	add	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	3304      	adds	r3, #4
 8007764:	4619      	mov	r1, r3
 8007766:	4610      	mov	r0, r2
 8007768:	f7fe fd17 	bl	800619a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800776c:	f001 fe36 	bl	80093dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007770:	4b0d      	ldr	r3, [pc, #52]	@ (80077a8 <prvAddNewTaskToReadyList+0xcc>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00e      	beq.n	8007796 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007778:	4b0a      	ldr	r3, [pc, #40]	@ (80077a4 <prvAddNewTaskToReadyList+0xc8>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007782:	429a      	cmp	r2, r3
 8007784:	d207      	bcs.n	8007796 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007786:	4b0c      	ldr	r3, [pc, #48]	@ (80077b8 <prvAddNewTaskToReadyList+0xdc>)
 8007788:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800778c:	601a      	str	r2, [r3, #0]
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007796:	bf00      	nop
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	200013c0 	.word	0x200013c0
 80077a4:	20000eec 	.word	0x20000eec
 80077a8:	200013cc 	.word	0x200013cc
 80077ac:	200013dc 	.word	0x200013dc
 80077b0:	200013c8 	.word	0x200013c8
 80077b4:	20000ef0 	.word	0x20000ef0
 80077b8:	e000ed04 	.word	0xe000ed04

080077bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077c4:	2300      	movs	r3, #0
 80077c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d018      	beq.n	8007800 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80077ce:	4b14      	ldr	r3, [pc, #80]	@ (8007820 <vTaskDelay+0x64>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00b      	beq.n	80077ee <vTaskDelay+0x32>
	__asm volatile
 80077d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077da:	f383 8811 	msr	BASEPRI, r3
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	60bb      	str	r3, [r7, #8]
}
 80077e8:	bf00      	nop
 80077ea:	bf00      	nop
 80077ec:	e7fd      	b.n	80077ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80077ee:	f000 f883 	bl	80078f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077f2:	2100      	movs	r1, #0
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fff7 	bl	80087e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80077fa:	f000 f88b 	bl	8007914 <xTaskResumeAll>
 80077fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d107      	bne.n	8007816 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007806:	4b07      	ldr	r3, [pc, #28]	@ (8007824 <vTaskDelay+0x68>)
 8007808:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800780c:	601a      	str	r2, [r3, #0]
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007816:	bf00      	nop
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	200013e8 	.word	0x200013e8
 8007824:	e000ed04 	.word	0xe000ed04

08007828 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b08a      	sub	sp, #40	@ 0x28
 800782c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800782e:	2300      	movs	r3, #0
 8007830:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007832:	2300      	movs	r3, #0
 8007834:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007836:	463a      	mov	r2, r7
 8007838:	1d39      	adds	r1, r7, #4
 800783a:	f107 0308 	add.w	r3, r7, #8
 800783e:	4618      	mov	r0, r3
 8007840:	f7fe fc4a 	bl	80060d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68ba      	ldr	r2, [r7, #8]
 800784a:	9202      	str	r2, [sp, #8]
 800784c:	9301      	str	r3, [sp, #4]
 800784e:	2300      	movs	r3, #0
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	2300      	movs	r3, #0
 8007854:	460a      	mov	r2, r1
 8007856:	4922      	ldr	r1, [pc, #136]	@ (80078e0 <vTaskStartScheduler+0xb8>)
 8007858:	4822      	ldr	r0, [pc, #136]	@ (80078e4 <vTaskStartScheduler+0xbc>)
 800785a:	f7ff fe09 	bl	8007470 <xTaskCreateStatic>
 800785e:	4603      	mov	r3, r0
 8007860:	4a21      	ldr	r2, [pc, #132]	@ (80078e8 <vTaskStartScheduler+0xc0>)
 8007862:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007864:	4b20      	ldr	r3, [pc, #128]	@ (80078e8 <vTaskStartScheduler+0xc0>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d002      	beq.n	8007872 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800786c:	2301      	movs	r3, #1
 800786e:	617b      	str	r3, [r7, #20]
 8007870:	e001      	b.n	8007876 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007872:	2300      	movs	r3, #0
 8007874:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d102      	bne.n	8007882 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800787c:	f001 f808 	bl	8008890 <xTimerCreateTimerTask>
 8007880:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d116      	bne.n	80078b6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	613b      	str	r3, [r7, #16]
}
 800789a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800789c:	4b13      	ldr	r3, [pc, #76]	@ (80078ec <vTaskStartScheduler+0xc4>)
 800789e:	f04f 32ff 	mov.w	r2, #4294967295
 80078a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078a4:	4b12      	ldr	r3, [pc, #72]	@ (80078f0 <vTaskStartScheduler+0xc8>)
 80078a6:	2201      	movs	r2, #1
 80078a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80078aa:	4b12      	ldr	r3, [pc, #72]	@ (80078f4 <vTaskStartScheduler+0xcc>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078b0:	f001 fcbe 	bl	8009230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078b4:	e00f      	b.n	80078d6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078bc:	d10b      	bne.n	80078d6 <vTaskStartScheduler+0xae>
	__asm volatile
 80078be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	60fb      	str	r3, [r7, #12]
}
 80078d0:	bf00      	nop
 80078d2:	bf00      	nop
 80078d4:	e7fd      	b.n	80078d2 <vTaskStartScheduler+0xaa>
}
 80078d6:	bf00      	nop
 80078d8:	3718      	adds	r7, #24
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	08009a98 	.word	0x08009a98
 80078e4:	08007f19 	.word	0x08007f19
 80078e8:	200013e4 	.word	0x200013e4
 80078ec:	200013e0 	.word	0x200013e0
 80078f0:	200013cc 	.word	0x200013cc
 80078f4:	200013c4 	.word	0x200013c4

080078f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078f8:	b480      	push	{r7}
 80078fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80078fc:	4b04      	ldr	r3, [pc, #16]	@ (8007910 <vTaskSuspendAll+0x18>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3301      	adds	r3, #1
 8007902:	4a03      	ldr	r2, [pc, #12]	@ (8007910 <vTaskSuspendAll+0x18>)
 8007904:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007906:	bf00      	nop
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	200013e8 	.word	0x200013e8

08007914 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800791a:	2300      	movs	r3, #0
 800791c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800791e:	2300      	movs	r3, #0
 8007920:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007922:	4b42      	ldr	r3, [pc, #264]	@ (8007a2c <xTaskResumeAll+0x118>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10b      	bne.n	8007942 <xTaskResumeAll+0x2e>
	__asm volatile
 800792a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800792e:	f383 8811 	msr	BASEPRI, r3
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	603b      	str	r3, [r7, #0]
}
 800793c:	bf00      	nop
 800793e:	bf00      	nop
 8007940:	e7fd      	b.n	800793e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007942:	f001 fd19 	bl	8009378 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007946:	4b39      	ldr	r3, [pc, #228]	@ (8007a2c <xTaskResumeAll+0x118>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	3b01      	subs	r3, #1
 800794c:	4a37      	ldr	r2, [pc, #220]	@ (8007a2c <xTaskResumeAll+0x118>)
 800794e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007950:	4b36      	ldr	r3, [pc, #216]	@ (8007a2c <xTaskResumeAll+0x118>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d162      	bne.n	8007a1e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007958:	4b35      	ldr	r3, [pc, #212]	@ (8007a30 <xTaskResumeAll+0x11c>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d05e      	beq.n	8007a1e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007960:	e02f      	b.n	80079c2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007962:	4b34      	ldr	r3, [pc, #208]	@ (8007a34 <xTaskResumeAll+0x120>)
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	3318      	adds	r3, #24
 800796e:	4618      	mov	r0, r3
 8007970:	f7fe fc70 	bl	8006254 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	3304      	adds	r3, #4
 8007978:	4618      	mov	r0, r3
 800797a:	f7fe fc6b 	bl	8006254 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007982:	4b2d      	ldr	r3, [pc, #180]	@ (8007a38 <xTaskResumeAll+0x124>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	429a      	cmp	r2, r3
 8007988:	d903      	bls.n	8007992 <xTaskResumeAll+0x7e>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798e:	4a2a      	ldr	r2, [pc, #168]	@ (8007a38 <xTaskResumeAll+0x124>)
 8007990:	6013      	str	r3, [r2, #0]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007996:	4613      	mov	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4a27      	ldr	r2, [pc, #156]	@ (8007a3c <xTaskResumeAll+0x128>)
 80079a0:	441a      	add	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	3304      	adds	r3, #4
 80079a6:	4619      	mov	r1, r3
 80079a8:	4610      	mov	r0, r2
 80079aa:	f7fe fbf6 	bl	800619a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079b2:	4b23      	ldr	r3, [pc, #140]	@ (8007a40 <xTaskResumeAll+0x12c>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d302      	bcc.n	80079c2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80079bc:	4b21      	ldr	r3, [pc, #132]	@ (8007a44 <xTaskResumeAll+0x130>)
 80079be:	2201      	movs	r2, #1
 80079c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079c2:	4b1c      	ldr	r3, [pc, #112]	@ (8007a34 <xTaskResumeAll+0x120>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1cb      	bne.n	8007962 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079d0:	f000 fb58 	bl	8008084 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80079d4:	4b1c      	ldr	r3, [pc, #112]	@ (8007a48 <xTaskResumeAll+0x134>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d010      	beq.n	8007a02 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079e0:	f000 f846 	bl	8007a70 <xTaskIncrementTick>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d002      	beq.n	80079f0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80079ea:	4b16      	ldr	r3, [pc, #88]	@ (8007a44 <xTaskResumeAll+0x130>)
 80079ec:	2201      	movs	r2, #1
 80079ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	3b01      	subs	r3, #1
 80079f4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1f1      	bne.n	80079e0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80079fc:	4b12      	ldr	r3, [pc, #72]	@ (8007a48 <xTaskResumeAll+0x134>)
 80079fe:	2200      	movs	r2, #0
 8007a00:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a02:	4b10      	ldr	r3, [pc, #64]	@ (8007a44 <xTaskResumeAll+0x130>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d009      	beq.n	8007a1e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8007a4c <xTaskResumeAll+0x138>)
 8007a10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a1e:	f001 fcdd 	bl	80093dc <vPortExitCritical>

	return xAlreadyYielded;
 8007a22:	68bb      	ldr	r3, [r7, #8]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	200013e8 	.word	0x200013e8
 8007a30:	200013c0 	.word	0x200013c0
 8007a34:	20001380 	.word	0x20001380
 8007a38:	200013c8 	.word	0x200013c8
 8007a3c:	20000ef0 	.word	0x20000ef0
 8007a40:	20000eec 	.word	0x20000eec
 8007a44:	200013d4 	.word	0x200013d4
 8007a48:	200013d0 	.word	0x200013d0
 8007a4c:	e000ed04 	.word	0xe000ed04

08007a50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a56:	4b05      	ldr	r3, [pc, #20]	@ (8007a6c <xTaskGetTickCount+0x1c>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a5c:	687b      	ldr	r3, [r7, #4]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	370c      	adds	r7, #12
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	200013c4 	.word	0x200013c4

08007a70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a76:	2300      	movs	r3, #0
 8007a78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a7a:	4b4f      	ldr	r3, [pc, #316]	@ (8007bb8 <xTaskIncrementTick+0x148>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f040 8090 	bne.w	8007ba4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a84:	4b4d      	ldr	r3, [pc, #308]	@ (8007bbc <xTaskIncrementTick+0x14c>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a8c:	4a4b      	ldr	r2, [pc, #300]	@ (8007bbc <xTaskIncrementTick+0x14c>)
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d121      	bne.n	8007adc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a98:	4b49      	ldr	r3, [pc, #292]	@ (8007bc0 <xTaskIncrementTick+0x150>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00b      	beq.n	8007aba <xTaskIncrementTick+0x4a>
	__asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	603b      	str	r3, [r7, #0]
}
 8007ab4:	bf00      	nop
 8007ab6:	bf00      	nop
 8007ab8:	e7fd      	b.n	8007ab6 <xTaskIncrementTick+0x46>
 8007aba:	4b41      	ldr	r3, [pc, #260]	@ (8007bc0 <xTaskIncrementTick+0x150>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	60fb      	str	r3, [r7, #12]
 8007ac0:	4b40      	ldr	r3, [pc, #256]	@ (8007bc4 <xTaskIncrementTick+0x154>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a3e      	ldr	r2, [pc, #248]	@ (8007bc0 <xTaskIncrementTick+0x150>)
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	4a3e      	ldr	r2, [pc, #248]	@ (8007bc4 <xTaskIncrementTick+0x154>)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6013      	str	r3, [r2, #0]
 8007ace:	4b3e      	ldr	r3, [pc, #248]	@ (8007bc8 <xTaskIncrementTick+0x158>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	4a3c      	ldr	r2, [pc, #240]	@ (8007bc8 <xTaskIncrementTick+0x158>)
 8007ad6:	6013      	str	r3, [r2, #0]
 8007ad8:	f000 fad4 	bl	8008084 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007adc:	4b3b      	ldr	r3, [pc, #236]	@ (8007bcc <xTaskIncrementTick+0x15c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d349      	bcc.n	8007b7a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ae6:	4b36      	ldr	r3, [pc, #216]	@ (8007bc0 <xTaskIncrementTick+0x150>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d104      	bne.n	8007afa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007af0:	4b36      	ldr	r3, [pc, #216]	@ (8007bcc <xTaskIncrementTick+0x15c>)
 8007af2:	f04f 32ff 	mov.w	r2, #4294967295
 8007af6:	601a      	str	r2, [r3, #0]
					break;
 8007af8:	e03f      	b.n	8007b7a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007afa:	4b31      	ldr	r3, [pc, #196]	@ (8007bc0 <xTaskIncrementTick+0x150>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d203      	bcs.n	8007b1a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b12:	4a2e      	ldr	r2, [pc, #184]	@ (8007bcc <xTaskIncrementTick+0x15c>)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b18:	e02f      	b.n	8007b7a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fe fb98 	bl	8006254 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d004      	beq.n	8007b36 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	3318      	adds	r3, #24
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7fe fb8f 	bl	8006254 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b3a:	4b25      	ldr	r3, [pc, #148]	@ (8007bd0 <xTaskIncrementTick+0x160>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d903      	bls.n	8007b4a <xTaskIncrementTick+0xda>
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b46:	4a22      	ldr	r2, [pc, #136]	@ (8007bd0 <xTaskIncrementTick+0x160>)
 8007b48:	6013      	str	r3, [r2, #0]
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b4e:	4613      	mov	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4a1f      	ldr	r2, [pc, #124]	@ (8007bd4 <xTaskIncrementTick+0x164>)
 8007b58:	441a      	add	r2, r3
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	3304      	adds	r3, #4
 8007b5e:	4619      	mov	r1, r3
 8007b60:	4610      	mov	r0, r2
 8007b62:	f7fe fb1a 	bl	800619a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8007bd8 <xTaskIncrementTick+0x168>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d3b8      	bcc.n	8007ae6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007b74:	2301      	movs	r3, #1
 8007b76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b78:	e7b5      	b.n	8007ae6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b7a:	4b17      	ldr	r3, [pc, #92]	@ (8007bd8 <xTaskIncrementTick+0x168>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b80:	4914      	ldr	r1, [pc, #80]	@ (8007bd4 <xTaskIncrementTick+0x164>)
 8007b82:	4613      	mov	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	440b      	add	r3, r1
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d901      	bls.n	8007b96 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007b92:	2301      	movs	r3, #1
 8007b94:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b96:	4b11      	ldr	r3, [pc, #68]	@ (8007bdc <xTaskIncrementTick+0x16c>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d007      	beq.n	8007bae <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	617b      	str	r3, [r7, #20]
 8007ba2:	e004      	b.n	8007bae <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8007be0 <xTaskIncrementTick+0x170>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	4a0d      	ldr	r2, [pc, #52]	@ (8007be0 <xTaskIncrementTick+0x170>)
 8007bac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007bae:	697b      	ldr	r3, [r7, #20]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3718      	adds	r7, #24
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	200013e8 	.word	0x200013e8
 8007bbc:	200013c4 	.word	0x200013c4
 8007bc0:	20001378 	.word	0x20001378
 8007bc4:	2000137c 	.word	0x2000137c
 8007bc8:	200013d8 	.word	0x200013d8
 8007bcc:	200013e0 	.word	0x200013e0
 8007bd0:	200013c8 	.word	0x200013c8
 8007bd4:	20000ef0 	.word	0x20000ef0
 8007bd8:	20000eec 	.word	0x20000eec
 8007bdc:	200013d4 	.word	0x200013d4
 8007be0:	200013d0 	.word	0x200013d0

08007be4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007bea:	4b28      	ldr	r3, [pc, #160]	@ (8007c8c <vTaskSwitchContext+0xa8>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d003      	beq.n	8007bfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bf2:	4b27      	ldr	r3, [pc, #156]	@ (8007c90 <vTaskSwitchContext+0xac>)
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bf8:	e042      	b.n	8007c80 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007bfa:	4b25      	ldr	r3, [pc, #148]	@ (8007c90 <vTaskSwitchContext+0xac>)
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c00:	4b24      	ldr	r3, [pc, #144]	@ (8007c94 <vTaskSwitchContext+0xb0>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	60fb      	str	r3, [r7, #12]
 8007c06:	e011      	b.n	8007c2c <vTaskSwitchContext+0x48>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10b      	bne.n	8007c26 <vTaskSwitchContext+0x42>
	__asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	607b      	str	r3, [r7, #4]
}
 8007c20:	bf00      	nop
 8007c22:	bf00      	nop
 8007c24:	e7fd      	b.n	8007c22 <vTaskSwitchContext+0x3e>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	491a      	ldr	r1, [pc, #104]	@ (8007c98 <vTaskSwitchContext+0xb4>)
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	4613      	mov	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4413      	add	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	440b      	add	r3, r1
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d0e3      	beq.n	8007c08 <vTaskSwitchContext+0x24>
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	4613      	mov	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4413      	add	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	4a13      	ldr	r2, [pc, #76]	@ (8007c98 <vTaskSwitchContext+0xb4>)
 8007c4c:	4413      	add	r3, r2
 8007c4e:	60bb      	str	r3, [r7, #8]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	605a      	str	r2, [r3, #4]
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	685a      	ldr	r2, [r3, #4]
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	3308      	adds	r3, #8
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d104      	bne.n	8007c70 <vTaskSwitchContext+0x8c>
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	605a      	str	r2, [r3, #4]
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	4a09      	ldr	r2, [pc, #36]	@ (8007c9c <vTaskSwitchContext+0xb8>)
 8007c78:	6013      	str	r3, [r2, #0]
 8007c7a:	4a06      	ldr	r2, [pc, #24]	@ (8007c94 <vTaskSwitchContext+0xb0>)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6013      	str	r3, [r2, #0]
}
 8007c80:	bf00      	nop
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	200013e8 	.word	0x200013e8
 8007c90:	200013d4 	.word	0x200013d4
 8007c94:	200013c8 	.word	0x200013c8
 8007c98:	20000ef0 	.word	0x20000ef0
 8007c9c:	20000eec 	.word	0x20000eec

08007ca0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10b      	bne.n	8007cc8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	60fb      	str	r3, [r7, #12]
}
 8007cc2:	bf00      	nop
 8007cc4:	bf00      	nop
 8007cc6:	e7fd      	b.n	8007cc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cc8:	4b07      	ldr	r3, [pc, #28]	@ (8007ce8 <vTaskPlaceOnEventList+0x48>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3318      	adds	r3, #24
 8007cce:	4619      	mov	r1, r3
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f7fe fa86 	bl	80061e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	6838      	ldr	r0, [r7, #0]
 8007cda:	f000 fd85 	bl	80087e8 <prvAddCurrentTaskToDelayedList>
}
 8007cde:	bf00      	nop
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20000eec 	.word	0x20000eec

08007cec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10b      	bne.n	8007d16 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	617b      	str	r3, [r7, #20]
}
 8007d10:	bf00      	nop
 8007d12:	bf00      	nop
 8007d14:	e7fd      	b.n	8007d12 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d16:	4b0a      	ldr	r3, [pc, #40]	@ (8007d40 <vTaskPlaceOnEventListRestricted+0x54>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	3318      	adds	r3, #24
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f7fe fa3b 	bl	800619a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d002      	beq.n	8007d30 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d2e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d30:	6879      	ldr	r1, [r7, #4]
 8007d32:	68b8      	ldr	r0, [r7, #8]
 8007d34:	f000 fd58 	bl	80087e8 <prvAddCurrentTaskToDelayedList>
	}
 8007d38:	bf00      	nop
 8007d3a:	3718      	adds	r7, #24
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	20000eec 	.word	0x20000eec

08007d44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b086      	sub	sp, #24
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10b      	bne.n	8007d72 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	60fb      	str	r3, [r7, #12]
}
 8007d6c:	bf00      	nop
 8007d6e:	bf00      	nop
 8007d70:	e7fd      	b.n	8007d6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	3318      	adds	r3, #24
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fe fa6c 	bl	8006254 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8007df4 <xTaskRemoveFromEventList+0xb0>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d11d      	bne.n	8007dc0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	3304      	adds	r3, #4
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7fe fa63 	bl	8006254 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d92:	4b19      	ldr	r3, [pc, #100]	@ (8007df8 <xTaskRemoveFromEventList+0xb4>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d903      	bls.n	8007da2 <xTaskRemoveFromEventList+0x5e>
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d9e:	4a16      	ldr	r2, [pc, #88]	@ (8007df8 <xTaskRemoveFromEventList+0xb4>)
 8007da0:	6013      	str	r3, [r2, #0]
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007da6:	4613      	mov	r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4413      	add	r3, r2
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	4a13      	ldr	r2, [pc, #76]	@ (8007dfc <xTaskRemoveFromEventList+0xb8>)
 8007db0:	441a      	add	r2, r3
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	3304      	adds	r3, #4
 8007db6:	4619      	mov	r1, r3
 8007db8:	4610      	mov	r0, r2
 8007dba:	f7fe f9ee 	bl	800619a <vListInsertEnd>
 8007dbe:	e005      	b.n	8007dcc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	3318      	adds	r3, #24
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	480e      	ldr	r0, [pc, #56]	@ (8007e00 <xTaskRemoveFromEventList+0xbc>)
 8007dc8:	f7fe f9e7 	bl	800619a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8007e04 <xTaskRemoveFromEventList+0xc0>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d905      	bls.n	8007de6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007dde:	4b0a      	ldr	r3, [pc, #40]	@ (8007e08 <xTaskRemoveFromEventList+0xc4>)
 8007de0:	2201      	movs	r2, #1
 8007de2:	601a      	str	r2, [r3, #0]
 8007de4:	e001      	b.n	8007dea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007de6:	2300      	movs	r3, #0
 8007de8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007dea:	697b      	ldr	r3, [r7, #20]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3718      	adds	r7, #24
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	200013e8 	.word	0x200013e8
 8007df8:	200013c8 	.word	0x200013c8
 8007dfc:	20000ef0 	.word	0x20000ef0
 8007e00:	20001380 	.word	0x20001380
 8007e04:	20000eec 	.word	0x20000eec
 8007e08:	200013d4 	.word	0x200013d4

08007e0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e14:	4b06      	ldr	r3, [pc, #24]	@ (8007e30 <vTaskInternalSetTimeOutState+0x24>)
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e1c:	4b05      	ldr	r3, [pc, #20]	@ (8007e34 <vTaskInternalSetTimeOutState+0x28>)
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	605a      	str	r2, [r3, #4]
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	200013d8 	.word	0x200013d8
 8007e34:	200013c4 	.word	0x200013c4

08007e38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b088      	sub	sp, #32
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10b      	bne.n	8007e60 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e4c:	f383 8811 	msr	BASEPRI, r3
 8007e50:	f3bf 8f6f 	isb	sy
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	613b      	str	r3, [r7, #16]
}
 8007e5a:	bf00      	nop
 8007e5c:	bf00      	nop
 8007e5e:	e7fd      	b.n	8007e5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d10b      	bne.n	8007e7e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e6a:	f383 8811 	msr	BASEPRI, r3
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	f3bf 8f4f 	dsb	sy
 8007e76:	60fb      	str	r3, [r7, #12]
}
 8007e78:	bf00      	nop
 8007e7a:	bf00      	nop
 8007e7c:	e7fd      	b.n	8007e7a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007e7e:	f001 fa7b 	bl	8009378 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e82:	4b1d      	ldr	r3, [pc, #116]	@ (8007ef8 <xTaskCheckForTimeOut+0xc0>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	69ba      	ldr	r2, [r7, #24]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9a:	d102      	bne.n	8007ea2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	61fb      	str	r3, [r7, #28]
 8007ea0:	e023      	b.n	8007eea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	4b15      	ldr	r3, [pc, #84]	@ (8007efc <xTaskCheckForTimeOut+0xc4>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d007      	beq.n	8007ebe <xTaskCheckForTimeOut+0x86>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	69ba      	ldr	r2, [r7, #24]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d302      	bcc.n	8007ebe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	61fb      	str	r3, [r7, #28]
 8007ebc:	e015      	b.n	8007eea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	697a      	ldr	r2, [r7, #20]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d20b      	bcs.n	8007ee0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	1ad2      	subs	r2, r2, r3
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f7ff ff99 	bl	8007e0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007eda:	2300      	movs	r3, #0
 8007edc:	61fb      	str	r3, [r7, #28]
 8007ede:	e004      	b.n	8007eea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007eea:	f001 fa77 	bl	80093dc <vPortExitCritical>

	return xReturn;
 8007eee:	69fb      	ldr	r3, [r7, #28]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3720      	adds	r7, #32
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	200013c4 	.word	0x200013c4
 8007efc:	200013d8 	.word	0x200013d8

08007f00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f00:	b480      	push	{r7}
 8007f02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f04:	4b03      	ldr	r3, [pc, #12]	@ (8007f14 <vTaskMissedYield+0x14>)
 8007f06:	2201      	movs	r2, #1
 8007f08:	601a      	str	r2, [r3, #0]
}
 8007f0a:	bf00      	nop
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr
 8007f14:	200013d4 	.word	0x200013d4

08007f18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f20:	f000 f852 	bl	8007fc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f24:	4b06      	ldr	r3, [pc, #24]	@ (8007f40 <prvIdleTask+0x28>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d9f9      	bls.n	8007f20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f2c:	4b05      	ldr	r3, [pc, #20]	@ (8007f44 <prvIdleTask+0x2c>)
 8007f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f3c:	e7f0      	b.n	8007f20 <prvIdleTask+0x8>
 8007f3e:	bf00      	nop
 8007f40:	20000ef0 	.word	0x20000ef0
 8007f44:	e000ed04 	.word	0xe000ed04

08007f48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f4e:	2300      	movs	r3, #0
 8007f50:	607b      	str	r3, [r7, #4]
 8007f52:	e00c      	b.n	8007f6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	4613      	mov	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4413      	add	r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4a12      	ldr	r2, [pc, #72]	@ (8007fa8 <prvInitialiseTaskLists+0x60>)
 8007f60:	4413      	add	r3, r2
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fe f8ec 	bl	8006140 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	607b      	str	r3, [r7, #4]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b37      	cmp	r3, #55	@ 0x37
 8007f72:	d9ef      	bls.n	8007f54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f74:	480d      	ldr	r0, [pc, #52]	@ (8007fac <prvInitialiseTaskLists+0x64>)
 8007f76:	f7fe f8e3 	bl	8006140 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f7a:	480d      	ldr	r0, [pc, #52]	@ (8007fb0 <prvInitialiseTaskLists+0x68>)
 8007f7c:	f7fe f8e0 	bl	8006140 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f80:	480c      	ldr	r0, [pc, #48]	@ (8007fb4 <prvInitialiseTaskLists+0x6c>)
 8007f82:	f7fe f8dd 	bl	8006140 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f86:	480c      	ldr	r0, [pc, #48]	@ (8007fb8 <prvInitialiseTaskLists+0x70>)
 8007f88:	f7fe f8da 	bl	8006140 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f8c:	480b      	ldr	r0, [pc, #44]	@ (8007fbc <prvInitialiseTaskLists+0x74>)
 8007f8e:	f7fe f8d7 	bl	8006140 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f92:	4b0b      	ldr	r3, [pc, #44]	@ (8007fc0 <prvInitialiseTaskLists+0x78>)
 8007f94:	4a05      	ldr	r2, [pc, #20]	@ (8007fac <prvInitialiseTaskLists+0x64>)
 8007f96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f98:	4b0a      	ldr	r3, [pc, #40]	@ (8007fc4 <prvInitialiseTaskLists+0x7c>)
 8007f9a:	4a05      	ldr	r2, [pc, #20]	@ (8007fb0 <prvInitialiseTaskLists+0x68>)
 8007f9c:	601a      	str	r2, [r3, #0]
}
 8007f9e:	bf00      	nop
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	20000ef0 	.word	0x20000ef0
 8007fac:	20001350 	.word	0x20001350
 8007fb0:	20001364 	.word	0x20001364
 8007fb4:	20001380 	.word	0x20001380
 8007fb8:	20001394 	.word	0x20001394
 8007fbc:	200013ac 	.word	0x200013ac
 8007fc0:	20001378 	.word	0x20001378
 8007fc4:	2000137c 	.word	0x2000137c

08007fc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fce:	e019      	b.n	8008004 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007fd0:	f001 f9d2 	bl	8009378 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fd4:	4b10      	ldr	r3, [pc, #64]	@ (8008018 <prvCheckTasksWaitingTermination+0x50>)
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	3304      	adds	r3, #4
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7fe f937 	bl	8006254 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800801c <prvCheckTasksWaitingTermination+0x54>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	3b01      	subs	r3, #1
 8007fec:	4a0b      	ldr	r2, [pc, #44]	@ (800801c <prvCheckTasksWaitingTermination+0x54>)
 8007fee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8008020 <prvCheckTasksWaitingTermination+0x58>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8008020 <prvCheckTasksWaitingTermination+0x58>)
 8007ff8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ffa:	f001 f9ef 	bl	80093dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f810 	bl	8008024 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008004:	4b06      	ldr	r3, [pc, #24]	@ (8008020 <prvCheckTasksWaitingTermination+0x58>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1e1      	bne.n	8007fd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800800c:	bf00      	nop
 800800e:	bf00      	nop
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	20001394 	.word	0x20001394
 800801c:	200013c0 	.word	0x200013c0
 8008020:	200013a8 	.word	0x200013a8

08008024 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008032:	2b00      	cmp	r3, #0
 8008034:	d108      	bne.n	8008048 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800803a:	4618      	mov	r0, r3
 800803c:	f001 fb8c 	bl	8009758 <vPortFree>
				vPortFree( pxTCB );
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f001 fb89 	bl	8009758 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008046:	e019      	b.n	800807c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800804e:	2b01      	cmp	r3, #1
 8008050:	d103      	bne.n	800805a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f001 fb80 	bl	8009758 <vPortFree>
	}
 8008058:	e010      	b.n	800807c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008060:	2b02      	cmp	r3, #2
 8008062:	d00b      	beq.n	800807c <prvDeleteTCB+0x58>
	__asm volatile
 8008064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008068:	f383 8811 	msr	BASEPRI, r3
 800806c:	f3bf 8f6f 	isb	sy
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	60fb      	str	r3, [r7, #12]
}
 8008076:	bf00      	nop
 8008078:	bf00      	nop
 800807a:	e7fd      	b.n	8008078 <prvDeleteTCB+0x54>
	}
 800807c:	bf00      	nop
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800808a:	4b0c      	ldr	r3, [pc, #48]	@ (80080bc <prvResetNextTaskUnblockTime+0x38>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d104      	bne.n	800809e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008094:	4b0a      	ldr	r3, [pc, #40]	@ (80080c0 <prvResetNextTaskUnblockTime+0x3c>)
 8008096:	f04f 32ff 	mov.w	r2, #4294967295
 800809a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800809c:	e008      	b.n	80080b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800809e:	4b07      	ldr	r3, [pc, #28]	@ (80080bc <prvResetNextTaskUnblockTime+0x38>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	4a04      	ldr	r2, [pc, #16]	@ (80080c0 <prvResetNextTaskUnblockTime+0x3c>)
 80080ae:	6013      	str	r3, [r2, #0]
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	20001378 	.word	0x20001378
 80080c0:	200013e0 	.word	0x200013e0

080080c4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80080ca:	4b05      	ldr	r3, [pc, #20]	@ (80080e0 <xTaskGetCurrentTaskHandle+0x1c>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	607b      	str	r3, [r7, #4]

		return xReturn;
 80080d0:	687b      	ldr	r3, [r7, #4]
	}
 80080d2:	4618      	mov	r0, r3
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	20000eec 	.word	0x20000eec

080080e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080ea:	4b0b      	ldr	r3, [pc, #44]	@ (8008118 <xTaskGetSchedulerState+0x34>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d102      	bne.n	80080f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080f2:	2301      	movs	r3, #1
 80080f4:	607b      	str	r3, [r7, #4]
 80080f6:	e008      	b.n	800810a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080f8:	4b08      	ldr	r3, [pc, #32]	@ (800811c <xTaskGetSchedulerState+0x38>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d102      	bne.n	8008106 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008100:	2302      	movs	r3, #2
 8008102:	607b      	str	r3, [r7, #4]
 8008104:	e001      	b.n	800810a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008106:	2300      	movs	r3, #0
 8008108:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800810a:	687b      	ldr	r3, [r7, #4]
	}
 800810c:	4618      	mov	r0, r3
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr
 8008118:	200013cc 	.word	0x200013cc
 800811c:	200013e8 	.word	0x200013e8

08008120 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800812c:	2300      	movs	r3, #0
 800812e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d051      	beq.n	80081da <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800813a:	4b2a      	ldr	r3, [pc, #168]	@ (80081e4 <xTaskPriorityInherit+0xc4>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008140:	429a      	cmp	r2, r3
 8008142:	d241      	bcs.n	80081c8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	2b00      	cmp	r3, #0
 800814a:	db06      	blt.n	800815a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800814c:	4b25      	ldr	r3, [pc, #148]	@ (80081e4 <xTaskPriorityInherit+0xc4>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008152:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	6959      	ldr	r1, [r3, #20]
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008162:	4613      	mov	r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4a1f      	ldr	r2, [pc, #124]	@ (80081e8 <xTaskPriorityInherit+0xc8>)
 800816c:	4413      	add	r3, r2
 800816e:	4299      	cmp	r1, r3
 8008170:	d122      	bne.n	80081b8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	3304      	adds	r3, #4
 8008176:	4618      	mov	r0, r3
 8008178:	f7fe f86c 	bl	8006254 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800817c:	4b19      	ldr	r3, [pc, #100]	@ (80081e4 <xTaskPriorityInherit+0xc4>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800818a:	4b18      	ldr	r3, [pc, #96]	@ (80081ec <xTaskPriorityInherit+0xcc>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	429a      	cmp	r2, r3
 8008190:	d903      	bls.n	800819a <xTaskPriorityInherit+0x7a>
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008196:	4a15      	ldr	r2, [pc, #84]	@ (80081ec <xTaskPriorityInherit+0xcc>)
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800819e:	4613      	mov	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4a10      	ldr	r2, [pc, #64]	@ (80081e8 <xTaskPriorityInherit+0xc8>)
 80081a8:	441a      	add	r2, r3
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	3304      	adds	r3, #4
 80081ae:	4619      	mov	r1, r3
 80081b0:	4610      	mov	r0, r2
 80081b2:	f7fd fff2 	bl	800619a <vListInsertEnd>
 80081b6:	e004      	b.n	80081c2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80081b8:	4b0a      	ldr	r3, [pc, #40]	@ (80081e4 <xTaskPriorityInherit+0xc4>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80081c2:	2301      	movs	r3, #1
 80081c4:	60fb      	str	r3, [r7, #12]
 80081c6:	e008      	b.n	80081da <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80081cc:	4b05      	ldr	r3, [pc, #20]	@ (80081e4 <xTaskPriorityInherit+0xc4>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d201      	bcs.n	80081da <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80081d6:	2301      	movs	r3, #1
 80081d8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081da:	68fb      	ldr	r3, [r7, #12]
	}
 80081dc:	4618      	mov	r0, r3
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	20000eec 	.word	0x20000eec
 80081e8:	20000ef0 	.word	0x20000ef0
 80081ec:	200013c8 	.word	0x200013c8

080081f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b086      	sub	sp, #24
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081fc:	2300      	movs	r3, #0
 80081fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d058      	beq.n	80082b8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008206:	4b2f      	ldr	r3, [pc, #188]	@ (80082c4 <xTaskPriorityDisinherit+0xd4>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	693a      	ldr	r2, [r7, #16]
 800820c:	429a      	cmp	r2, r3
 800820e:	d00b      	beq.n	8008228 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	60fb      	str	r3, [r7, #12]
}
 8008222:	bf00      	nop
 8008224:	bf00      	nop
 8008226:	e7fd      	b.n	8008224 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800822c:	2b00      	cmp	r3, #0
 800822e:	d10b      	bne.n	8008248 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008234:	f383 8811 	msr	BASEPRI, r3
 8008238:	f3bf 8f6f 	isb	sy
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	60bb      	str	r3, [r7, #8]
}
 8008242:	bf00      	nop
 8008244:	bf00      	nop
 8008246:	e7fd      	b.n	8008244 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800824c:	1e5a      	subs	r2, r3, #1
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800825a:	429a      	cmp	r2, r3
 800825c:	d02c      	beq.n	80082b8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008262:	2b00      	cmp	r3, #0
 8008264:	d128      	bne.n	80082b8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	3304      	adds	r3, #4
 800826a:	4618      	mov	r0, r3
 800826c:	f7fd fff2 	bl	8006254 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800827c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008288:	4b0f      	ldr	r3, [pc, #60]	@ (80082c8 <xTaskPriorityDisinherit+0xd8>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	429a      	cmp	r2, r3
 800828e:	d903      	bls.n	8008298 <xTaskPriorityDisinherit+0xa8>
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008294:	4a0c      	ldr	r2, [pc, #48]	@ (80082c8 <xTaskPriorityDisinherit+0xd8>)
 8008296:	6013      	str	r3, [r2, #0]
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800829c:	4613      	mov	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4a09      	ldr	r2, [pc, #36]	@ (80082cc <xTaskPriorityDisinherit+0xdc>)
 80082a6:	441a      	add	r2, r3
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	3304      	adds	r3, #4
 80082ac:	4619      	mov	r1, r3
 80082ae:	4610      	mov	r0, r2
 80082b0:	f7fd ff73 	bl	800619a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80082b4:	2301      	movs	r3, #1
 80082b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082b8:	697b      	ldr	r3, [r7, #20]
	}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	20000eec 	.word	0x20000eec
 80082c8:	200013c8 	.word	0x200013c8
 80082cc:	20000ef0 	.word	0x20000ef0

080082d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b088      	sub	sp, #32
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80082de:	2301      	movs	r3, #1
 80082e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d06c      	beq.n	80083c2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10b      	bne.n	8008308 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80082f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	60fb      	str	r3, [r7, #12]
}
 8008302:	bf00      	nop
 8008304:	bf00      	nop
 8008306:	e7fd      	b.n	8008304 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800830c:	683a      	ldr	r2, [r7, #0]
 800830e:	429a      	cmp	r2, r3
 8008310:	d902      	bls.n	8008318 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	61fb      	str	r3, [r7, #28]
 8008316:	e002      	b.n	800831e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800831c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008322:	69fa      	ldr	r2, [r7, #28]
 8008324:	429a      	cmp	r2, r3
 8008326:	d04c      	beq.n	80083c2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800832c:	697a      	ldr	r2, [r7, #20]
 800832e:	429a      	cmp	r2, r3
 8008330:	d147      	bne.n	80083c2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008332:	4b26      	ldr	r3, [pc, #152]	@ (80083cc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	69ba      	ldr	r2, [r7, #24]
 8008338:	429a      	cmp	r2, r3
 800833a:	d10b      	bne.n	8008354 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800833c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008340:	f383 8811 	msr	BASEPRI, r3
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	60bb      	str	r3, [r7, #8]
}
 800834e:	bf00      	nop
 8008350:	bf00      	nop
 8008352:	e7fd      	b.n	8008350 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008358:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	69fa      	ldr	r2, [r7, #28]
 800835e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	2b00      	cmp	r3, #0
 8008366:	db04      	blt.n	8008372 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	6959      	ldr	r1, [r3, #20]
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	4613      	mov	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4413      	add	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4a13      	ldr	r2, [pc, #76]	@ (80083d0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008382:	4413      	add	r3, r2
 8008384:	4299      	cmp	r1, r3
 8008386:	d11c      	bne.n	80083c2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	3304      	adds	r3, #4
 800838c:	4618      	mov	r0, r3
 800838e:	f7fd ff61 	bl	8006254 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008396:	4b0f      	ldr	r3, [pc, #60]	@ (80083d4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	429a      	cmp	r2, r3
 800839c:	d903      	bls.n	80083a6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a2:	4a0c      	ldr	r2, [pc, #48]	@ (80083d4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80083a4:	6013      	str	r3, [r2, #0]
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083aa:	4613      	mov	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4413      	add	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4a07      	ldr	r2, [pc, #28]	@ (80083d0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80083b4:	441a      	add	r2, r3
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	3304      	adds	r3, #4
 80083ba:	4619      	mov	r1, r3
 80083bc:	4610      	mov	r0, r2
 80083be:	f7fd feec 	bl	800619a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083c2:	bf00      	nop
 80083c4:	3720      	adds	r7, #32
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	20000eec 	.word	0x20000eec
 80083d0:	20000ef0 	.word	0x20000ef0
 80083d4:	200013c8 	.word	0x200013c8

080083d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80083d8:	b480      	push	{r7}
 80083da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80083dc:	4b07      	ldr	r3, [pc, #28]	@ (80083fc <pvTaskIncrementMutexHeldCount+0x24>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d004      	beq.n	80083ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80083e4:	4b05      	ldr	r3, [pc, #20]	@ (80083fc <pvTaskIncrementMutexHeldCount+0x24>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083ea:	3201      	adds	r2, #1
 80083ec:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80083ee:	4b03      	ldr	r3, [pc, #12]	@ (80083fc <pvTaskIncrementMutexHeldCount+0x24>)
 80083f0:	681b      	ldr	r3, [r3, #0]
	}
 80083f2:	4618      	mov	r0, r3
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	20000eec 	.word	0x20000eec

08008400 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	607a      	str	r2, [r7, #4]
 800840c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800840e:	f000 ffb3 	bl	8009378 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008412:	4b26      	ldr	r3, [pc, #152]	@ (80084ac <xTaskNotifyWait+0xac>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b02      	cmp	r3, #2
 800841e:	d01a      	beq.n	8008456 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008420:	4b22      	ldr	r3, [pc, #136]	@ (80084ac <xTaskNotifyWait+0xac>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	43d2      	mvns	r2, r2
 800842a:	400a      	ands	r2, r1
 800842c:	655a      	str	r2, [r3, #84]	@ 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800842e:	4b1f      	ldr	r3, [pc, #124]	@ (80084ac <xTaskNotifyWait+0xac>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00b      	beq.n	8008456 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800843e:	2101      	movs	r1, #1
 8008440:	6838      	ldr	r0, [r7, #0]
 8008442:	f000 f9d1 	bl	80087e8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008446:	4b1a      	ldr	r3, [pc, #104]	@ (80084b0 <xTaskNotifyWait+0xb0>)
 8008448:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800844c:	601a      	str	r2, [r3, #0]
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008456:	f000 ffc1 	bl	80093dc <vPortExitCritical>

		taskENTER_CRITICAL();
 800845a:	f000 ff8d 	bl	8009378 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d004      	beq.n	800846e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008464:	4b11      	ldr	r3, [pc, #68]	@ (80084ac <xTaskNotifyWait+0xac>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800846e:	4b0f      	ldr	r3, [pc, #60]	@ (80084ac <xTaskNotifyWait+0xac>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008476:	b2db      	uxtb	r3, r3
 8008478:	2b02      	cmp	r3, #2
 800847a:	d002      	beq.n	8008482 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800847c:	2300      	movs	r3, #0
 800847e:	617b      	str	r3, [r7, #20]
 8008480:	e008      	b.n	8008494 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008482:	4b0a      	ldr	r3, [pc, #40]	@ (80084ac <xTaskNotifyWait+0xac>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	43d2      	mvns	r2, r2
 800848c:	400a      	ands	r2, r1
 800848e:	655a      	str	r2, [r3, #84]	@ 0x54
				xReturn = pdTRUE;
 8008490:	2301      	movs	r3, #1
 8008492:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008494:	4b05      	ldr	r3, [pc, #20]	@ (80084ac <xTaskNotifyWait+0xac>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 800849e:	f000 ff9d 	bl	80093dc <vPortExitCritical>

		return xReturn;
 80084a2:	697b      	ldr	r3, [r7, #20]
	}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3718      	adds	r7, #24
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	20000eec 	.word	0x20000eec
 80084b0:	e000ed04 	.word	0xe000ed04

080084b4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b08a      	sub	sp, #40	@ 0x28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	603b      	str	r3, [r7, #0]
 80084c0:	4613      	mov	r3, r2
 80084c2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80084c4:	2301      	movs	r3, #1
 80084c6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10b      	bne.n	80084e6 <xTaskGenericNotify+0x32>
	__asm volatile
 80084ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	61bb      	str	r3, [r7, #24]
}
 80084e0:	bf00      	nop
 80084e2:	bf00      	nop
 80084e4:	e7fd      	b.n	80084e2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80084ea:	f000 ff45 	bl	8009378 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d003      	beq.n	80084fc <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80084f4:	6a3b      	ldr	r3, [r7, #32]
 80084f6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80084fc:	6a3b      	ldr	r3, [r7, #32]
 80084fe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008502:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008504:	6a3b      	ldr	r3, [r7, #32]
 8008506:	2202      	movs	r2, #2
 8008508:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 800850c:	79fb      	ldrb	r3, [r7, #7]
 800850e:	2b04      	cmp	r3, #4
 8008510:	d827      	bhi.n	8008562 <xTaskGenericNotify+0xae>
 8008512:	a201      	add	r2, pc, #4	@ (adr r2, 8008518 <xTaskGenericNotify+0x64>)
 8008514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008518:	08008585 	.word	0x08008585
 800851c:	0800852d 	.word	0x0800852d
 8008520:	0800853b 	.word	0x0800853b
 8008524:	08008547 	.word	0x08008547
 8008528:	0800854f 	.word	0x0800854f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800852c:	6a3b      	ldr	r3, [r7, #32]
 800852e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	431a      	orrs	r2, r3
 8008534:	6a3b      	ldr	r3, [r7, #32]
 8008536:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8008538:	e027      	b.n	800858a <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800853a:	6a3b      	ldr	r3, [r7, #32]
 800853c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800853e:	1c5a      	adds	r2, r3, #1
 8008540:	6a3b      	ldr	r3, [r7, #32]
 8008542:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8008544:	e021      	b.n	800858a <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008546:	6a3b      	ldr	r3, [r7, #32]
 8008548:	68ba      	ldr	r2, [r7, #8]
 800854a:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800854c:	e01d      	b.n	800858a <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800854e:	7ffb      	ldrb	r3, [r7, #31]
 8008550:	2b02      	cmp	r3, #2
 8008552:	d003      	beq.n	800855c <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008554:	6a3b      	ldr	r3, [r7, #32]
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800855a:	e016      	b.n	800858a <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 800855c:	2300      	movs	r3, #0
 800855e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8008560:	e013      	b.n	800858a <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008562:	6a3b      	ldr	r3, [r7, #32]
 8008564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800856a:	d00d      	beq.n	8008588 <xTaskGenericNotify+0xd4>
	__asm volatile
 800856c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008570:	f383 8811 	msr	BASEPRI, r3
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	617b      	str	r3, [r7, #20]
}
 800857e:	bf00      	nop
 8008580:	bf00      	nop
 8008582:	e7fd      	b.n	8008580 <xTaskGenericNotify+0xcc>
					break;
 8008584:	bf00      	nop
 8008586:	e000      	b.n	800858a <xTaskGenericNotify+0xd6>

					break;
 8008588:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800858a:	7ffb      	ldrb	r3, [r7, #31]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d13b      	bne.n	8008608 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008590:	6a3b      	ldr	r3, [r7, #32]
 8008592:	3304      	adds	r3, #4
 8008594:	4618      	mov	r0, r3
 8008596:	f7fd fe5d 	bl	8006254 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800859a:	6a3b      	ldr	r3, [r7, #32]
 800859c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800859e:	4b1e      	ldr	r3, [pc, #120]	@ (8008618 <xTaskGenericNotify+0x164>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d903      	bls.n	80085ae <xTaskGenericNotify+0xfa>
 80085a6:	6a3b      	ldr	r3, [r7, #32]
 80085a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085aa:	4a1b      	ldr	r2, [pc, #108]	@ (8008618 <xTaskGenericNotify+0x164>)
 80085ac:	6013      	str	r3, [r2, #0]
 80085ae:	6a3b      	ldr	r3, [r7, #32]
 80085b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085b2:	4613      	mov	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4413      	add	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	4a18      	ldr	r2, [pc, #96]	@ (800861c <xTaskGenericNotify+0x168>)
 80085bc:	441a      	add	r2, r3
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	3304      	adds	r3, #4
 80085c2:	4619      	mov	r1, r3
 80085c4:	4610      	mov	r0, r2
 80085c6:	f7fd fde8 	bl	800619a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80085ca:	6a3b      	ldr	r3, [r7, #32]
 80085cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00b      	beq.n	80085ea <xTaskGenericNotify+0x136>
	__asm volatile
 80085d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d6:	f383 8811 	msr	BASEPRI, r3
 80085da:	f3bf 8f6f 	isb	sy
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	613b      	str	r3, [r7, #16]
}
 80085e4:	bf00      	nop
 80085e6:	bf00      	nop
 80085e8:	e7fd      	b.n	80085e6 <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008620 <xTaskGenericNotify+0x16c>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d907      	bls.n	8008608 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80085f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008624 <xTaskGenericNotify+0x170>)
 80085fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085fe:	601a      	str	r2, [r3, #0]
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008608:	f000 fee8 	bl	80093dc <vPortExitCritical>

		return xReturn;
 800860c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800860e:	4618      	mov	r0, r3
 8008610:	3728      	adds	r7, #40	@ 0x28
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	200013c8 	.word	0x200013c8
 800861c:	20000ef0 	.word	0x20000ef0
 8008620:	20000eec 	.word	0x20000eec
 8008624:	e000ed04 	.word	0xe000ed04

08008628 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008628:	b580      	push	{r7, lr}
 800862a:	b08e      	sub	sp, #56	@ 0x38
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	603b      	str	r3, [r7, #0]
 8008634:	4613      	mov	r3, r2
 8008636:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8008638:	2301      	movs	r3, #1
 800863a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10b      	bne.n	800865a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8008642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008654:	bf00      	nop
 8008656:	bf00      	nop
 8008658:	e7fd      	b.n	8008656 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800865a:	f000 ff6d 	bl	8009538 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8008662:	f3ef 8211 	mrs	r2, BASEPRI
 8008666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800866a:	f383 8811 	msr	BASEPRI, r3
 800866e:	f3bf 8f6f 	isb	sy
 8008672:	f3bf 8f4f 	dsb	sy
 8008676:	623a      	str	r2, [r7, #32]
 8008678:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800867a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800867c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d003      	beq.n	800868c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008686:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800868c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008698:	2202      	movs	r2, #2
 800869a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 800869e:	79fb      	ldrb	r3, [r7, #7]
 80086a0:	2b04      	cmp	r3, #4
 80086a2:	d829      	bhi.n	80086f8 <xTaskGenericNotifyFromISR+0xd0>
 80086a4:	a201      	add	r2, pc, #4	@ (adr r2, 80086ac <xTaskGenericNotifyFromISR+0x84>)
 80086a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086aa:	bf00      	nop
 80086ac:	0800871b 	.word	0x0800871b
 80086b0:	080086c1 	.word	0x080086c1
 80086b4:	080086cf 	.word	0x080086cf
 80086b8:	080086db 	.word	0x080086db
 80086bc:	080086e3 	.word	0x080086e3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80086c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	431a      	orrs	r2, r3
 80086c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ca:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80086cc:	e028      	b.n	8008720 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80086ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086d2:	1c5a      	adds	r2, r3, #1
 80086d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d6:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80086d8:	e022      	b.n	8008720 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80086da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80086e0:	e01e      	b.n	8008720 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80086e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d003      	beq.n	80086f2 <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80086ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80086f0:	e016      	b.n	8008720 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 80086f2:	2300      	movs	r3, #0
 80086f4:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80086f6:	e013      	b.n	8008720 <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80086f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008700:	d00d      	beq.n	800871e <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 8008702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008706:	f383 8811 	msr	BASEPRI, r3
 800870a:	f3bf 8f6f 	isb	sy
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	61bb      	str	r3, [r7, #24]
}
 8008714:	bf00      	nop
 8008716:	bf00      	nop
 8008718:	e7fd      	b.n	8008716 <xTaskGenericNotifyFromISR+0xee>
					break;
 800871a:	bf00      	nop
 800871c:	e000      	b.n	8008720 <xTaskGenericNotifyFromISR+0xf8>
					break;
 800871e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008720:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008724:	2b01      	cmp	r3, #1
 8008726:	d147      	bne.n	80087b8 <xTaskGenericNotifyFromISR+0x190>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800872a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00b      	beq.n	8008748 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 8008730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008734:	f383 8811 	msr	BASEPRI, r3
 8008738:	f3bf 8f6f 	isb	sy
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	617b      	str	r3, [r7, #20]
}
 8008742:	bf00      	nop
 8008744:	bf00      	nop
 8008746:	e7fd      	b.n	8008744 <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008748:	4b21      	ldr	r3, [pc, #132]	@ (80087d0 <xTaskGenericNotifyFromISR+0x1a8>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d11d      	bne.n	800878c <xTaskGenericNotifyFromISR+0x164>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008752:	3304      	adds	r3, #4
 8008754:	4618      	mov	r0, r3
 8008756:	f7fd fd7d 	bl	8006254 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800875a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800875e:	4b1d      	ldr	r3, [pc, #116]	@ (80087d4 <xTaskGenericNotifyFromISR+0x1ac>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	429a      	cmp	r2, r3
 8008764:	d903      	bls.n	800876e <xTaskGenericNotifyFromISR+0x146>
 8008766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800876a:	4a1a      	ldr	r2, [pc, #104]	@ (80087d4 <xTaskGenericNotifyFromISR+0x1ac>)
 800876c:	6013      	str	r3, [r2, #0]
 800876e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008772:	4613      	mov	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	4a17      	ldr	r2, [pc, #92]	@ (80087d8 <xTaskGenericNotifyFromISR+0x1b0>)
 800877c:	441a      	add	r2, r3
 800877e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008780:	3304      	adds	r3, #4
 8008782:	4619      	mov	r1, r3
 8008784:	4610      	mov	r0, r2
 8008786:	f7fd fd08 	bl	800619a <vListInsertEnd>
 800878a:	e005      	b.n	8008798 <xTaskGenericNotifyFromISR+0x170>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800878c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800878e:	3318      	adds	r3, #24
 8008790:	4619      	mov	r1, r3
 8008792:	4812      	ldr	r0, [pc, #72]	@ (80087dc <xTaskGenericNotifyFromISR+0x1b4>)
 8008794:	f7fd fd01 	bl	800619a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800879c:	4b10      	ldr	r3, [pc, #64]	@ (80087e0 <xTaskGenericNotifyFromISR+0x1b8>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d908      	bls.n	80087b8 <xTaskGenericNotifyFromISR+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80087a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d002      	beq.n	80087b2 <xTaskGenericNotifyFromISR+0x18a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80087ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087ae:	2201      	movs	r2, #1
 80087b0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80087b2:	4b0c      	ldr	r3, [pc, #48]	@ (80087e4 <xTaskGenericNotifyFromISR+0x1bc>)
 80087b4:	2201      	movs	r2, #1
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ba:	613b      	str	r3, [r7, #16]
	__asm volatile
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	f383 8811 	msr	BASEPRI, r3
}
 80087c2:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80087c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3738      	adds	r7, #56	@ 0x38
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	200013e8 	.word	0x200013e8
 80087d4:	200013c8 	.word	0x200013c8
 80087d8:	20000ef0 	.word	0x20000ef0
 80087dc:	20001380 	.word	0x20001380
 80087e0:	20000eec 	.word	0x20000eec
 80087e4:	200013d4 	.word	0x200013d4

080087e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80087f2:	4b21      	ldr	r3, [pc, #132]	@ (8008878 <prvAddCurrentTaskToDelayedList+0x90>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087f8:	4b20      	ldr	r3, [pc, #128]	@ (800887c <prvAddCurrentTaskToDelayedList+0x94>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	3304      	adds	r3, #4
 80087fe:	4618      	mov	r0, r3
 8008800:	f7fd fd28 	bl	8006254 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800880a:	d10a      	bne.n	8008822 <prvAddCurrentTaskToDelayedList+0x3a>
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d007      	beq.n	8008822 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008812:	4b1a      	ldr	r3, [pc, #104]	@ (800887c <prvAddCurrentTaskToDelayedList+0x94>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	3304      	adds	r3, #4
 8008818:	4619      	mov	r1, r3
 800881a:	4819      	ldr	r0, [pc, #100]	@ (8008880 <prvAddCurrentTaskToDelayedList+0x98>)
 800881c:	f7fd fcbd 	bl	800619a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008820:	e026      	b.n	8008870 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4413      	add	r3, r2
 8008828:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800882a:	4b14      	ldr	r3, [pc, #80]	@ (800887c <prvAddCurrentTaskToDelayedList+0x94>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	429a      	cmp	r2, r3
 8008838:	d209      	bcs.n	800884e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800883a:	4b12      	ldr	r3, [pc, #72]	@ (8008884 <prvAddCurrentTaskToDelayedList+0x9c>)
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	4b0f      	ldr	r3, [pc, #60]	@ (800887c <prvAddCurrentTaskToDelayedList+0x94>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	3304      	adds	r3, #4
 8008844:	4619      	mov	r1, r3
 8008846:	4610      	mov	r0, r2
 8008848:	f7fd fccb 	bl	80061e2 <vListInsert>
}
 800884c:	e010      	b.n	8008870 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800884e:	4b0e      	ldr	r3, [pc, #56]	@ (8008888 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	4b0a      	ldr	r3, [pc, #40]	@ (800887c <prvAddCurrentTaskToDelayedList+0x94>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	3304      	adds	r3, #4
 8008858:	4619      	mov	r1, r3
 800885a:	4610      	mov	r0, r2
 800885c:	f7fd fcc1 	bl	80061e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008860:	4b0a      	ldr	r3, [pc, #40]	@ (800888c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	429a      	cmp	r2, r3
 8008868:	d202      	bcs.n	8008870 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800886a:	4a08      	ldr	r2, [pc, #32]	@ (800888c <prvAddCurrentTaskToDelayedList+0xa4>)
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	6013      	str	r3, [r2, #0]
}
 8008870:	bf00      	nop
 8008872:	3710      	adds	r7, #16
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	200013c4 	.word	0x200013c4
 800887c:	20000eec 	.word	0x20000eec
 8008880:	200013ac 	.word	0x200013ac
 8008884:	2000137c 	.word	0x2000137c
 8008888:	20001378 	.word	0x20001378
 800888c:	200013e0 	.word	0x200013e0

08008890 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b08a      	sub	sp, #40	@ 0x28
 8008894:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008896:	2300      	movs	r3, #0
 8008898:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800889a:	f000 fbb1 	bl	8009000 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800889e:	4b1d      	ldr	r3, [pc, #116]	@ (8008914 <xTimerCreateTimerTask+0x84>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d021      	beq.n	80088ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80088a6:	2300      	movs	r3, #0
 80088a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80088aa:	2300      	movs	r3, #0
 80088ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80088ae:	1d3a      	adds	r2, r7, #4
 80088b0:	f107 0108 	add.w	r1, r7, #8
 80088b4:	f107 030c 	add.w	r3, r7, #12
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7fd fc27 	bl	800610c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80088be:	6879      	ldr	r1, [r7, #4]
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	9202      	str	r2, [sp, #8]
 80088c6:	9301      	str	r3, [sp, #4]
 80088c8:	2302      	movs	r3, #2
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	2300      	movs	r3, #0
 80088ce:	460a      	mov	r2, r1
 80088d0:	4911      	ldr	r1, [pc, #68]	@ (8008918 <xTimerCreateTimerTask+0x88>)
 80088d2:	4812      	ldr	r0, [pc, #72]	@ (800891c <xTimerCreateTimerTask+0x8c>)
 80088d4:	f7fe fdcc 	bl	8007470 <xTaskCreateStatic>
 80088d8:	4603      	mov	r3, r0
 80088da:	4a11      	ldr	r2, [pc, #68]	@ (8008920 <xTimerCreateTimerTask+0x90>)
 80088dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80088de:	4b10      	ldr	r3, [pc, #64]	@ (8008920 <xTimerCreateTimerTask+0x90>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80088e6:	2301      	movs	r3, #1
 80088e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10b      	bne.n	8008908 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	613b      	str	r3, [r7, #16]
}
 8008902:	bf00      	nop
 8008904:	bf00      	nop
 8008906:	e7fd      	b.n	8008904 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008908:	697b      	ldr	r3, [r7, #20]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3718      	adds	r7, #24
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	2000141c 	.word	0x2000141c
 8008918:	08009aa0 	.word	0x08009aa0
 800891c:	08008b99 	.word	0x08008b99
 8008920:	20001420 	.word	0x20001420

08008924 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008924:	b580      	push	{r7, lr}
 8008926:	b088      	sub	sp, #32
 8008928:	af02      	add	r7, sp, #8
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
 8008930:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008932:	202c      	movs	r0, #44	@ 0x2c
 8008934:	f000 fe42 	bl	80095bc <pvPortMalloc>
 8008938:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00d      	beq.n	800895c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	2200      	movs	r2, #0
 8008944:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	9301      	str	r3, [sp, #4]
 800894c:	6a3b      	ldr	r3, [r7, #32]
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	68b9      	ldr	r1, [r7, #8]
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f000 f845 	bl	80089e6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800895c:	697b      	ldr	r3, [r7, #20]
	}
 800895e:	4618      	mov	r0, r3
 8008960:	3718      	adds	r7, #24
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8008966:	b580      	push	{r7, lr}
 8008968:	b08a      	sub	sp, #40	@ 0x28
 800896a:	af02      	add	r7, sp, #8
 800896c:	60f8      	str	r0, [r7, #12]
 800896e:	60b9      	str	r1, [r7, #8]
 8008970:	607a      	str	r2, [r7, #4]
 8008972:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008974:	232c      	movs	r3, #44	@ 0x2c
 8008976:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	2b2c      	cmp	r3, #44	@ 0x2c
 800897c:	d00b      	beq.n	8008996 <xTimerCreateStatic+0x30>
	__asm volatile
 800897e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	61bb      	str	r3, [r7, #24]
}
 8008990:	bf00      	nop
 8008992:	bf00      	nop
 8008994:	e7fd      	b.n	8008992 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008996:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8008998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10b      	bne.n	80089b6 <xTimerCreateStatic+0x50>
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	617b      	str	r3, [r7, #20]
}
 80089b0:	bf00      	nop
 80089b2:	bf00      	nop
 80089b4:	e7fd      	b.n	80089b2 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80089b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00d      	beq.n	80089dc <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	2202      	movs	r2, #2
 80089c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	9301      	str	r3, [sp, #4]
 80089cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ce:	9300      	str	r3, [sp, #0]
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	68b9      	ldr	r1, [r7, #8]
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f000 f805 	bl	80089e6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80089dc:	69fb      	ldr	r3, [r7, #28]
	}
 80089de:	4618      	mov	r0, r3
 80089e0:	3720      	adds	r7, #32
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b086      	sub	sp, #24
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	60f8      	str	r0, [r7, #12]
 80089ee:	60b9      	str	r1, [r7, #8]
 80089f0:	607a      	str	r2, [r7, #4]
 80089f2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10b      	bne.n	8008a12 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 80089fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089fe:	f383 8811 	msr	BASEPRI, r3
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	617b      	str	r3, [r7, #20]
}
 8008a0c:	bf00      	nop
 8008a0e:	bf00      	nop
 8008a10:	e7fd      	b.n	8008a0e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8008a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d01e      	beq.n	8008a56 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008a18:	f000 faf2 	bl	8009000 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1e:	68fa      	ldr	r2, [r7, #12]
 8008a20:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2a:	683a      	ldr	r2, [r7, #0]
 8008a2c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a30:	6a3a      	ldr	r2, [r7, #32]
 8008a32:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a36:	3304      	adds	r3, #4
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fd fba1 	bl	8006180 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d008      	beq.n	8008a56 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a4a:	f043 0304 	orr.w	r3, r3, #4
 8008a4e:	b2da      	uxtb	r2, r3
 8008a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008a56:	bf00      	nop
 8008a58:	3718      	adds	r7, #24
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
	...

08008a60 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b08a      	sub	sp, #40	@ 0x28
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	607a      	str	r2, [r7, #4]
 8008a6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10b      	bne.n	8008a90 <xTimerGenericCommand+0x30>
	__asm volatile
 8008a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7c:	f383 8811 	msr	BASEPRI, r3
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	623b      	str	r3, [r7, #32]
}
 8008a8a:	bf00      	nop
 8008a8c:	bf00      	nop
 8008a8e:	e7fd      	b.n	8008a8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008a90:	4b19      	ldr	r3, [pc, #100]	@ (8008af8 <xTimerGenericCommand+0x98>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d02a      	beq.n	8008aee <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	2b05      	cmp	r3, #5
 8008aa8:	dc18      	bgt.n	8008adc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008aaa:	f7ff fb1b 	bl	80080e4 <xTaskGetSchedulerState>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d109      	bne.n	8008ac8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008ab4:	4b10      	ldr	r3, [pc, #64]	@ (8008af8 <xTimerGenericCommand+0x98>)
 8008ab6:	6818      	ldr	r0, [r3, #0]
 8008ab8:	f107 0110 	add.w	r1, r7, #16
 8008abc:	2300      	movs	r3, #0
 8008abe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ac0:	f7fd fe5e 	bl	8006780 <xQueueGenericSend>
 8008ac4:	6278      	str	r0, [r7, #36]	@ 0x24
 8008ac6:	e012      	b.n	8008aee <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8008af8 <xTimerGenericCommand+0x98>)
 8008aca:	6818      	ldr	r0, [r3, #0]
 8008acc:	f107 0110 	add.w	r1, r7, #16
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f7fd fe54 	bl	8006780 <xQueueGenericSend>
 8008ad8:	6278      	str	r0, [r7, #36]	@ 0x24
 8008ada:	e008      	b.n	8008aee <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008adc:	4b06      	ldr	r3, [pc, #24]	@ (8008af8 <xTimerGenericCommand+0x98>)
 8008ade:	6818      	ldr	r0, [r3, #0]
 8008ae0:	f107 0110 	add.w	r1, r7, #16
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	f7fd ff4c 	bl	8006984 <xQueueGenericSendFromISR>
 8008aec:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3728      	adds	r7, #40	@ 0x28
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	2000141c 	.word	0x2000141c

08008afc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b088      	sub	sp, #32
 8008b00:	af02      	add	r7, sp, #8
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b06:	4b23      	ldr	r3, [pc, #140]	@ (8008b94 <prvProcessExpiredTimer+0x98>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	3304      	adds	r3, #4
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7fd fb9d 	bl	8006254 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b20:	f003 0304 	and.w	r3, r3, #4
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d023      	beq.n	8008b70 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	699a      	ldr	r2, [r3, #24]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	18d1      	adds	r1, r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	683a      	ldr	r2, [r7, #0]
 8008b34:	6978      	ldr	r0, [r7, #20]
 8008b36:	f000 f8d5 	bl	8008ce4 <prvInsertTimerInActiveList>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d020      	beq.n	8008b82 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b40:	2300      	movs	r3, #0
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	2300      	movs	r3, #0
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	2100      	movs	r1, #0
 8008b4a:	6978      	ldr	r0, [r7, #20]
 8008b4c:	f7ff ff88 	bl	8008a60 <xTimerGenericCommand>
 8008b50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d114      	bne.n	8008b82 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	60fb      	str	r3, [r7, #12]
}
 8008b6a:	bf00      	nop
 8008b6c:	bf00      	nop
 8008b6e:	e7fd      	b.n	8008b6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b76:	f023 0301 	bic.w	r3, r3, #1
 8008b7a:	b2da      	uxtb	r2, r3
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	6978      	ldr	r0, [r7, #20]
 8008b88:	4798      	blx	r3
}
 8008b8a:	bf00      	nop
 8008b8c:	3718      	adds	r7, #24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	20001414 	.word	0x20001414

08008b98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ba0:	f107 0308 	add.w	r3, r7, #8
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f000 f859 	bl	8008c5c <prvGetNextExpireTime>
 8008baa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	4619      	mov	r1, r3
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f000 f805 	bl	8008bc0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008bb6:	f000 f8d7 	bl	8008d68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008bba:	bf00      	nop
 8008bbc:	e7f0      	b.n	8008ba0 <prvTimerTask+0x8>
	...

08008bc0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008bca:	f7fe fe95 	bl	80078f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008bce:	f107 0308 	add.w	r3, r7, #8
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f000 f866 	bl	8008ca4 <prvSampleTimeNow>
 8008bd8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d130      	bne.n	8008c42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10a      	bne.n	8008bfc <prvProcessTimerOrBlockTask+0x3c>
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d806      	bhi.n	8008bfc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008bee:	f7fe fe91 	bl	8007914 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008bf2:	68f9      	ldr	r1, [r7, #12]
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f7ff ff81 	bl	8008afc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008bfa:	e024      	b.n	8008c46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d008      	beq.n	8008c14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008c02:	4b13      	ldr	r3, [pc, #76]	@ (8008c50 <prvProcessTimerOrBlockTask+0x90>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d101      	bne.n	8008c10 <prvProcessTimerOrBlockTask+0x50>
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e000      	b.n	8008c12 <prvProcessTimerOrBlockTask+0x52>
 8008c10:	2300      	movs	r3, #0
 8008c12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008c14:	4b0f      	ldr	r3, [pc, #60]	@ (8008c54 <prvProcessTimerOrBlockTask+0x94>)
 8008c16:	6818      	ldr	r0, [r3, #0]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	4619      	mov	r1, r3
 8008c22:	f7fe fbf1 	bl	8007408 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008c26:	f7fe fe75 	bl	8007914 <xTaskResumeAll>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10a      	bne.n	8008c46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008c30:	4b09      	ldr	r3, [pc, #36]	@ (8008c58 <prvProcessTimerOrBlockTask+0x98>)
 8008c32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c36:	601a      	str	r2, [r3, #0]
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	f3bf 8f6f 	isb	sy
}
 8008c40:	e001      	b.n	8008c46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008c42:	f7fe fe67 	bl	8007914 <xTaskResumeAll>
}
 8008c46:	bf00      	nop
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	20001418 	.word	0x20001418
 8008c54:	2000141c 	.word	0x2000141c
 8008c58:	e000ed04 	.word	0xe000ed04

08008c5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c64:	4b0e      	ldr	r3, [pc, #56]	@ (8008ca0 <prvGetNextExpireTime+0x44>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d101      	bne.n	8008c72 <prvGetNextExpireTime+0x16>
 8008c6e:	2201      	movs	r2, #1
 8008c70:	e000      	b.n	8008c74 <prvGetNextExpireTime+0x18>
 8008c72:	2200      	movs	r2, #0
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d105      	bne.n	8008c8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c80:	4b07      	ldr	r3, [pc, #28]	@ (8008ca0 <prvGetNextExpireTime+0x44>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	60fb      	str	r3, [r7, #12]
 8008c8a:	e001      	b.n	8008c90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008c90:	68fb      	ldr	r3, [r7, #12]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3714      	adds	r7, #20
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	20001414 	.word	0x20001414

08008ca4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008cac:	f7fe fed0 	bl	8007a50 <xTaskGetTickCount>
 8008cb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8008ce0 <prvSampleTimeNow+0x3c>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d205      	bcs.n	8008cc8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008cbc:	f000 f93a 	bl	8008f34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	601a      	str	r2, [r3, #0]
 8008cc6:	e002      	b.n	8008cce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008cce:	4a04      	ldr	r2, [pc, #16]	@ (8008ce0 <prvSampleTimeNow+0x3c>)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	20001424 	.word	0x20001424

08008ce4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b086      	sub	sp, #24
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
 8008cf0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008d02:	68ba      	ldr	r2, [r7, #8]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d812      	bhi.n	8008d30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	1ad2      	subs	r2, r2, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	699b      	ldr	r3, [r3, #24]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d302      	bcc.n	8008d1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	617b      	str	r3, [r7, #20]
 8008d1c:	e01b      	b.n	8008d56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008d1e:	4b10      	ldr	r3, [pc, #64]	@ (8008d60 <prvInsertTimerInActiveList+0x7c>)
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	3304      	adds	r3, #4
 8008d26:	4619      	mov	r1, r3
 8008d28:	4610      	mov	r0, r2
 8008d2a:	f7fd fa5a 	bl	80061e2 <vListInsert>
 8008d2e:	e012      	b.n	8008d56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d206      	bcs.n	8008d46 <prvInsertTimerInActiveList+0x62>
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d302      	bcc.n	8008d46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008d40:	2301      	movs	r3, #1
 8008d42:	617b      	str	r3, [r7, #20]
 8008d44:	e007      	b.n	8008d56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d46:	4b07      	ldr	r3, [pc, #28]	@ (8008d64 <prvInsertTimerInActiveList+0x80>)
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	3304      	adds	r3, #4
 8008d4e:	4619      	mov	r1, r3
 8008d50:	4610      	mov	r0, r2
 8008d52:	f7fd fa46 	bl	80061e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008d56:	697b      	ldr	r3, [r7, #20]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3718      	adds	r7, #24
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	20001418 	.word	0x20001418
 8008d64:	20001414 	.word	0x20001414

08008d68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b08e      	sub	sp, #56	@ 0x38
 8008d6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d6e:	e0ce      	b.n	8008f0e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	da19      	bge.n	8008daa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008d76:	1d3b      	adds	r3, r7, #4
 8008d78:	3304      	adds	r3, #4
 8008d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10b      	bne.n	8008d9a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d86:	f383 8811 	msr	BASEPRI, r3
 8008d8a:	f3bf 8f6f 	isb	sy
 8008d8e:	f3bf 8f4f 	dsb	sy
 8008d92:	61fb      	str	r3, [r7, #28]
}
 8008d94:	bf00      	nop
 8008d96:	bf00      	nop
 8008d98:	e7fd      	b.n	8008d96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008da0:	6850      	ldr	r0, [r2, #4]
 8008da2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008da4:	6892      	ldr	r2, [r2, #8]
 8008da6:	4611      	mov	r1, r2
 8008da8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f2c0 80ae 	blt.w	8008f0e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db8:	695b      	ldr	r3, [r3, #20]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d004      	beq.n	8008dc8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc0:	3304      	adds	r3, #4
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7fd fa46 	bl	8006254 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008dc8:	463b      	mov	r3, r7
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7ff ff6a 	bl	8008ca4 <prvSampleTimeNow>
 8008dd0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b09      	cmp	r3, #9
 8008dd6:	f200 8097 	bhi.w	8008f08 <prvProcessReceivedCommands+0x1a0>
 8008dda:	a201      	add	r2, pc, #4	@ (adr r2, 8008de0 <prvProcessReceivedCommands+0x78>)
 8008ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de0:	08008e09 	.word	0x08008e09
 8008de4:	08008e09 	.word	0x08008e09
 8008de8:	08008e09 	.word	0x08008e09
 8008dec:	08008e7f 	.word	0x08008e7f
 8008df0:	08008e93 	.word	0x08008e93
 8008df4:	08008edf 	.word	0x08008edf
 8008df8:	08008e09 	.word	0x08008e09
 8008dfc:	08008e09 	.word	0x08008e09
 8008e00:	08008e7f 	.word	0x08008e7f
 8008e04:	08008e93 	.word	0x08008e93
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e0e:	f043 0301 	orr.w	r3, r3, #1
 8008e12:	b2da      	uxtb	r2, r3
 8008e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	18d1      	adds	r1, r2, r3
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e28:	f7ff ff5c 	bl	8008ce4 <prvInsertTimerInActiveList>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d06c      	beq.n	8008f0c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e34:	6a1b      	ldr	r3, [r3, #32]
 8008e36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e40:	f003 0304 	and.w	r3, r3, #4
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d061      	beq.n	8008f0c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008e48:	68ba      	ldr	r2, [r7, #8]
 8008e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	441a      	add	r2, r3
 8008e50:	2300      	movs	r3, #0
 8008e52:	9300      	str	r3, [sp, #0]
 8008e54:	2300      	movs	r3, #0
 8008e56:	2100      	movs	r1, #0
 8008e58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e5a:	f7ff fe01 	bl	8008a60 <xTimerGenericCommand>
 8008e5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008e60:	6a3b      	ldr	r3, [r7, #32]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d152      	bne.n	8008f0c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	61bb      	str	r3, [r7, #24]
}
 8008e78:	bf00      	nop
 8008e7a:	bf00      	nop
 8008e7c:	e7fd      	b.n	8008e7a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e84:	f023 0301 	bic.w	r3, r3, #1
 8008e88:	b2da      	uxtb	r2, r3
 8008e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008e90:	e03d      	b.n	8008f0e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e98:	f043 0301 	orr.w	r3, r3, #1
 8008e9c:	b2da      	uxtb	r2, r3
 8008e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10b      	bne.n	8008eca <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	617b      	str	r3, [r7, #20]
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	e7fd      	b.n	8008ec6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ecc:	699a      	ldr	r2, [r3, #24]
 8008ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed0:	18d1      	adds	r1, r2, r3
 8008ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ed6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ed8:	f7ff ff04 	bl	8008ce4 <prvInsertTimerInActiveList>
					break;
 8008edc:	e017      	b.n	8008f0e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ee4:	f003 0302 	and.w	r3, r3, #2
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d103      	bne.n	8008ef4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008eec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008eee:	f000 fc33 	bl	8009758 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008ef2:	e00c      	b.n	8008f0e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ef6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008efa:	f023 0301 	bic.w	r3, r3, #1
 8008efe:	b2da      	uxtb	r2, r3
 8008f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008f06:	e002      	b.n	8008f0e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008f08:	bf00      	nop
 8008f0a:	e000      	b.n	8008f0e <prvProcessReceivedCommands+0x1a6>
					break;
 8008f0c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f0e:	4b08      	ldr	r3, [pc, #32]	@ (8008f30 <prvProcessReceivedCommands+0x1c8>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	1d39      	adds	r1, r7, #4
 8008f14:	2200      	movs	r2, #0
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7fd fe62 	bl	8006be0 <xQueueReceive>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f47f af26 	bne.w	8008d70 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop
 8008f28:	3730      	adds	r7, #48	@ 0x30
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	2000141c 	.word	0x2000141c

08008f34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b088      	sub	sp, #32
 8008f38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f3a:	e049      	b.n	8008fd0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f3c:	4b2e      	ldr	r3, [pc, #184]	@ (8008ff8 <prvSwitchTimerLists+0xc4>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f46:	4b2c      	ldr	r3, [pc, #176]	@ (8008ff8 <prvSwitchTimerLists+0xc4>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	3304      	adds	r3, #4
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7fd f97d 	bl	8006254 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6a1b      	ldr	r3, [r3, #32]
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f68:	f003 0304 	and.w	r3, r3, #4
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d02f      	beq.n	8008fd0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	693a      	ldr	r2, [r7, #16]
 8008f76:	4413      	add	r3, r2
 8008f78:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d90e      	bls.n	8008fa0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	68ba      	ldr	r2, [r7, #8]
 8008f86:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ff8 <prvSwitchTimerLists+0xc4>)
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	3304      	adds	r3, #4
 8008f96:	4619      	mov	r1, r3
 8008f98:	4610      	mov	r0, r2
 8008f9a:	f7fd f922 	bl	80061e2 <vListInsert>
 8008f9e:	e017      	b.n	8008fd0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	693a      	ldr	r2, [r7, #16]
 8008fa8:	2100      	movs	r1, #0
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f7ff fd58 	bl	8008a60 <xTimerGenericCommand>
 8008fb0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d10b      	bne.n	8008fd0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	603b      	str	r3, [r7, #0]
}
 8008fca:	bf00      	nop
 8008fcc:	bf00      	nop
 8008fce:	e7fd      	b.n	8008fcc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008fd0:	4b09      	ldr	r3, [pc, #36]	@ (8008ff8 <prvSwitchTimerLists+0xc4>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d1b0      	bne.n	8008f3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008fda:	4b07      	ldr	r3, [pc, #28]	@ (8008ff8 <prvSwitchTimerLists+0xc4>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008fe0:	4b06      	ldr	r3, [pc, #24]	@ (8008ffc <prvSwitchTimerLists+0xc8>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a04      	ldr	r2, [pc, #16]	@ (8008ff8 <prvSwitchTimerLists+0xc4>)
 8008fe6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008fe8:	4a04      	ldr	r2, [pc, #16]	@ (8008ffc <prvSwitchTimerLists+0xc8>)
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	6013      	str	r3, [r2, #0]
}
 8008fee:	bf00      	nop
 8008ff0:	3718      	adds	r7, #24
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	20001414 	.word	0x20001414
 8008ffc:	20001418 	.word	0x20001418

08009000 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009006:	f000 f9b7 	bl	8009378 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800900a:	4b15      	ldr	r3, [pc, #84]	@ (8009060 <prvCheckForValidListAndQueue+0x60>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d120      	bne.n	8009054 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009012:	4814      	ldr	r0, [pc, #80]	@ (8009064 <prvCheckForValidListAndQueue+0x64>)
 8009014:	f7fd f894 	bl	8006140 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009018:	4813      	ldr	r0, [pc, #76]	@ (8009068 <prvCheckForValidListAndQueue+0x68>)
 800901a:	f7fd f891 	bl	8006140 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800901e:	4b13      	ldr	r3, [pc, #76]	@ (800906c <prvCheckForValidListAndQueue+0x6c>)
 8009020:	4a10      	ldr	r2, [pc, #64]	@ (8009064 <prvCheckForValidListAndQueue+0x64>)
 8009022:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009024:	4b12      	ldr	r3, [pc, #72]	@ (8009070 <prvCheckForValidListAndQueue+0x70>)
 8009026:	4a10      	ldr	r2, [pc, #64]	@ (8009068 <prvCheckForValidListAndQueue+0x68>)
 8009028:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800902a:	2300      	movs	r3, #0
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	4b11      	ldr	r3, [pc, #68]	@ (8009074 <prvCheckForValidListAndQueue+0x74>)
 8009030:	4a11      	ldr	r2, [pc, #68]	@ (8009078 <prvCheckForValidListAndQueue+0x78>)
 8009032:	2110      	movs	r1, #16
 8009034:	200a      	movs	r0, #10
 8009036:	f7fd f9a1 	bl	800637c <xQueueGenericCreateStatic>
 800903a:	4603      	mov	r3, r0
 800903c:	4a08      	ldr	r2, [pc, #32]	@ (8009060 <prvCheckForValidListAndQueue+0x60>)
 800903e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009040:	4b07      	ldr	r3, [pc, #28]	@ (8009060 <prvCheckForValidListAndQueue+0x60>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d005      	beq.n	8009054 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009048:	4b05      	ldr	r3, [pc, #20]	@ (8009060 <prvCheckForValidListAndQueue+0x60>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	490b      	ldr	r1, [pc, #44]	@ (800907c <prvCheckForValidListAndQueue+0x7c>)
 800904e:	4618      	mov	r0, r3
 8009050:	f7fe f986 	bl	8007360 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009054:	f000 f9c2 	bl	80093dc <vPortExitCritical>
}
 8009058:	bf00      	nop
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	2000141c 	.word	0x2000141c
 8009064:	200013ec 	.word	0x200013ec
 8009068:	20001400 	.word	0x20001400
 800906c:	20001414 	.word	0x20001414
 8009070:	20001418 	.word	0x20001418
 8009074:	200014c8 	.word	0x200014c8
 8009078:	20001428 	.word	0x20001428
 800907c:	08009aa8 	.word	0x08009aa8

08009080 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b086      	sub	sp, #24
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d10b      	bne.n	80090aa <xTimerIsTimerActive+0x2a>
	__asm volatile
 8009092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009096:	f383 8811 	msr	BASEPRI, r3
 800909a:	f3bf 8f6f 	isb	sy
 800909e:	f3bf 8f4f 	dsb	sy
 80090a2:	60fb      	str	r3, [r7, #12]
}
 80090a4:	bf00      	nop
 80090a6:	bf00      	nop
 80090a8:	e7fd      	b.n	80090a6 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 80090aa:	f000 f965 	bl	8009378 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090b4:	f003 0301 	and.w	r3, r3, #1
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d102      	bne.n	80090c2 <xTimerIsTimerActive+0x42>
		{
			xReturn = pdFALSE;
 80090bc:	2300      	movs	r3, #0
 80090be:	617b      	str	r3, [r7, #20]
 80090c0:	e001      	b.n	80090c6 <xTimerIsTimerActive+0x46>
		}
		else
		{
			xReturn = pdTRUE;
 80090c2:	2301      	movs	r3, #1
 80090c4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80090c6:	f000 f989 	bl	80093dc <vPortExitCritical>

	return xReturn;
 80090ca:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 80090cc:	4618      	mov	r0, r3
 80090ce:	3718      	adds	r7, #24
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b086      	sub	sp, #24
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10b      	bne.n	80090fe <pvTimerGetTimerID+0x2a>
	__asm volatile
 80090e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ea:	f383 8811 	msr	BASEPRI, r3
 80090ee:	f3bf 8f6f 	isb	sy
 80090f2:	f3bf 8f4f 	dsb	sy
 80090f6:	60fb      	str	r3, [r7, #12]
}
 80090f8:	bf00      	nop
 80090fa:	bf00      	nop
 80090fc:	e7fd      	b.n	80090fa <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80090fe:	f000 f93b 	bl	8009378 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	69db      	ldr	r3, [r3, #28]
 8009106:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8009108:	f000 f968 	bl	80093dc <vPortExitCritical>

	return pvReturn;
 800910c:	693b      	ldr	r3, [r7, #16]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3718      	adds	r7, #24
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
	...

08009118 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	3b04      	subs	r3, #4
 8009128:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009130:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	3b04      	subs	r3, #4
 8009136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	f023 0201 	bic.w	r2, r3, #1
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	3b04      	subs	r3, #4
 8009146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009148:	4a0c      	ldr	r2, [pc, #48]	@ (800917c <pxPortInitialiseStack+0x64>)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	3b14      	subs	r3, #20
 8009152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	3b04      	subs	r3, #4
 800915e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f06f 0202 	mvn.w	r2, #2
 8009166:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	3b20      	subs	r3, #32
 800916c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800916e:	68fb      	ldr	r3, [r7, #12]
}
 8009170:	4618      	mov	r0, r3
 8009172:	3714      	adds	r7, #20
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr
 800917c:	08009181 	.word	0x08009181

08009180 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009186:	2300      	movs	r3, #0
 8009188:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800918a:	4b13      	ldr	r3, [pc, #76]	@ (80091d8 <prvTaskExitError+0x58>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009192:	d00b      	beq.n	80091ac <prvTaskExitError+0x2c>
	__asm volatile
 8009194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009198:	f383 8811 	msr	BASEPRI, r3
 800919c:	f3bf 8f6f 	isb	sy
 80091a0:	f3bf 8f4f 	dsb	sy
 80091a4:	60fb      	str	r3, [r7, #12]
}
 80091a6:	bf00      	nop
 80091a8:	bf00      	nop
 80091aa:	e7fd      	b.n	80091a8 <prvTaskExitError+0x28>
	__asm volatile
 80091ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	60bb      	str	r3, [r7, #8]
}
 80091be:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80091c0:	bf00      	nop
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d0fc      	beq.n	80091c2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80091c8:	bf00      	nop
 80091ca:	bf00      	nop
 80091cc:	3714      	adds	r7, #20
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	2000000c 	.word	0x2000000c
 80091dc:	00000000 	.word	0x00000000

080091e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80091e0:	4b07      	ldr	r3, [pc, #28]	@ (8009200 <pxCurrentTCBConst2>)
 80091e2:	6819      	ldr	r1, [r3, #0]
 80091e4:	6808      	ldr	r0, [r1, #0]
 80091e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ea:	f380 8809 	msr	PSP, r0
 80091ee:	f3bf 8f6f 	isb	sy
 80091f2:	f04f 0000 	mov.w	r0, #0
 80091f6:	f380 8811 	msr	BASEPRI, r0
 80091fa:	4770      	bx	lr
 80091fc:	f3af 8000 	nop.w

08009200 <pxCurrentTCBConst2>:
 8009200:	20000eec 	.word	0x20000eec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009204:	bf00      	nop
 8009206:	bf00      	nop

08009208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009208:	4808      	ldr	r0, [pc, #32]	@ (800922c <prvPortStartFirstTask+0x24>)
 800920a:	6800      	ldr	r0, [r0, #0]
 800920c:	6800      	ldr	r0, [r0, #0]
 800920e:	f380 8808 	msr	MSP, r0
 8009212:	f04f 0000 	mov.w	r0, #0
 8009216:	f380 8814 	msr	CONTROL, r0
 800921a:	b662      	cpsie	i
 800921c:	b661      	cpsie	f
 800921e:	f3bf 8f4f 	dsb	sy
 8009222:	f3bf 8f6f 	isb	sy
 8009226:	df00      	svc	0
 8009228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800922a:	bf00      	nop
 800922c:	e000ed08 	.word	0xe000ed08

08009230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009236:	4b47      	ldr	r3, [pc, #284]	@ (8009354 <xPortStartScheduler+0x124>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a47      	ldr	r2, [pc, #284]	@ (8009358 <xPortStartScheduler+0x128>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d10b      	bne.n	8009258 <xPortStartScheduler+0x28>
	__asm volatile
 8009240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009244:	f383 8811 	msr	BASEPRI, r3
 8009248:	f3bf 8f6f 	isb	sy
 800924c:	f3bf 8f4f 	dsb	sy
 8009250:	613b      	str	r3, [r7, #16]
}
 8009252:	bf00      	nop
 8009254:	bf00      	nop
 8009256:	e7fd      	b.n	8009254 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009258:	4b3e      	ldr	r3, [pc, #248]	@ (8009354 <xPortStartScheduler+0x124>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a3f      	ldr	r2, [pc, #252]	@ (800935c <xPortStartScheduler+0x12c>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d10b      	bne.n	800927a <xPortStartScheduler+0x4a>
	__asm volatile
 8009262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009266:	f383 8811 	msr	BASEPRI, r3
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	60fb      	str	r3, [r7, #12]
}
 8009274:	bf00      	nop
 8009276:	bf00      	nop
 8009278:	e7fd      	b.n	8009276 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800927a:	4b39      	ldr	r3, [pc, #228]	@ (8009360 <xPortStartScheduler+0x130>)
 800927c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	b2db      	uxtb	r3, r3
 8009284:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	22ff      	movs	r2, #255	@ 0xff
 800928a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	b2db      	uxtb	r3, r3
 8009292:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009294:	78fb      	ldrb	r3, [r7, #3]
 8009296:	b2db      	uxtb	r3, r3
 8009298:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800929c:	b2da      	uxtb	r2, r3
 800929e:	4b31      	ldr	r3, [pc, #196]	@ (8009364 <xPortStartScheduler+0x134>)
 80092a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80092a2:	4b31      	ldr	r3, [pc, #196]	@ (8009368 <xPortStartScheduler+0x138>)
 80092a4:	2207      	movs	r2, #7
 80092a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092a8:	e009      	b.n	80092be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80092aa:	4b2f      	ldr	r3, [pc, #188]	@ (8009368 <xPortStartScheduler+0x138>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	3b01      	subs	r3, #1
 80092b0:	4a2d      	ldr	r2, [pc, #180]	@ (8009368 <xPortStartScheduler+0x138>)
 80092b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80092b4:	78fb      	ldrb	r3, [r7, #3]
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	005b      	lsls	r3, r3, #1
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092be:	78fb      	ldrb	r3, [r7, #3]
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092c6:	2b80      	cmp	r3, #128	@ 0x80
 80092c8:	d0ef      	beq.n	80092aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80092ca:	4b27      	ldr	r3, [pc, #156]	@ (8009368 <xPortStartScheduler+0x138>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f1c3 0307 	rsb	r3, r3, #7
 80092d2:	2b04      	cmp	r3, #4
 80092d4:	d00b      	beq.n	80092ee <xPortStartScheduler+0xbe>
	__asm volatile
 80092d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092da:	f383 8811 	msr	BASEPRI, r3
 80092de:	f3bf 8f6f 	isb	sy
 80092e2:	f3bf 8f4f 	dsb	sy
 80092e6:	60bb      	str	r3, [r7, #8]
}
 80092e8:	bf00      	nop
 80092ea:	bf00      	nop
 80092ec:	e7fd      	b.n	80092ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80092ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009368 <xPortStartScheduler+0x138>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	021b      	lsls	r3, r3, #8
 80092f4:	4a1c      	ldr	r2, [pc, #112]	@ (8009368 <xPortStartScheduler+0x138>)
 80092f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80092f8:	4b1b      	ldr	r3, [pc, #108]	@ (8009368 <xPortStartScheduler+0x138>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009300:	4a19      	ldr	r2, [pc, #100]	@ (8009368 <xPortStartScheduler+0x138>)
 8009302:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	b2da      	uxtb	r2, r3
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800930c:	4b17      	ldr	r3, [pc, #92]	@ (800936c <xPortStartScheduler+0x13c>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a16      	ldr	r2, [pc, #88]	@ (800936c <xPortStartScheduler+0x13c>)
 8009312:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009316:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009318:	4b14      	ldr	r3, [pc, #80]	@ (800936c <xPortStartScheduler+0x13c>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a13      	ldr	r2, [pc, #76]	@ (800936c <xPortStartScheduler+0x13c>)
 800931e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009322:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009324:	f000 f8da 	bl	80094dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009328:	4b11      	ldr	r3, [pc, #68]	@ (8009370 <xPortStartScheduler+0x140>)
 800932a:	2200      	movs	r2, #0
 800932c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800932e:	f000 f8f9 	bl	8009524 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009332:	4b10      	ldr	r3, [pc, #64]	@ (8009374 <xPortStartScheduler+0x144>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a0f      	ldr	r2, [pc, #60]	@ (8009374 <xPortStartScheduler+0x144>)
 8009338:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800933c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800933e:	f7ff ff63 	bl	8009208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009342:	f7fe fc4f 	bl	8007be4 <vTaskSwitchContext>
	prvTaskExitError();
 8009346:	f7ff ff1b 	bl	8009180 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3718      	adds	r7, #24
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	e000ed00 	.word	0xe000ed00
 8009358:	410fc271 	.word	0x410fc271
 800935c:	410fc270 	.word	0x410fc270
 8009360:	e000e400 	.word	0xe000e400
 8009364:	20001518 	.word	0x20001518
 8009368:	2000151c 	.word	0x2000151c
 800936c:	e000ed20 	.word	0xe000ed20
 8009370:	2000000c 	.word	0x2000000c
 8009374:	e000ef34 	.word	0xe000ef34

08009378 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
	__asm volatile
 800937e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009382:	f383 8811 	msr	BASEPRI, r3
 8009386:	f3bf 8f6f 	isb	sy
 800938a:	f3bf 8f4f 	dsb	sy
 800938e:	607b      	str	r3, [r7, #4]
}
 8009390:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009392:	4b10      	ldr	r3, [pc, #64]	@ (80093d4 <vPortEnterCritical+0x5c>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	3301      	adds	r3, #1
 8009398:	4a0e      	ldr	r2, [pc, #56]	@ (80093d4 <vPortEnterCritical+0x5c>)
 800939a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800939c:	4b0d      	ldr	r3, [pc, #52]	@ (80093d4 <vPortEnterCritical+0x5c>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d110      	bne.n	80093c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80093a4:	4b0c      	ldr	r3, [pc, #48]	@ (80093d8 <vPortEnterCritical+0x60>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00b      	beq.n	80093c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80093ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b2:	f383 8811 	msr	BASEPRI, r3
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	f3bf 8f4f 	dsb	sy
 80093be:	603b      	str	r3, [r7, #0]
}
 80093c0:	bf00      	nop
 80093c2:	bf00      	nop
 80093c4:	e7fd      	b.n	80093c2 <vPortEnterCritical+0x4a>
	}
}
 80093c6:	bf00      	nop
 80093c8:	370c      	adds	r7, #12
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	2000000c 	.word	0x2000000c
 80093d8:	e000ed04 	.word	0xe000ed04

080093dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80093e2:	4b12      	ldr	r3, [pc, #72]	@ (800942c <vPortExitCritical+0x50>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d10b      	bne.n	8009402 <vPortExitCritical+0x26>
	__asm volatile
 80093ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ee:	f383 8811 	msr	BASEPRI, r3
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	f3bf 8f4f 	dsb	sy
 80093fa:	607b      	str	r3, [r7, #4]
}
 80093fc:	bf00      	nop
 80093fe:	bf00      	nop
 8009400:	e7fd      	b.n	80093fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009402:	4b0a      	ldr	r3, [pc, #40]	@ (800942c <vPortExitCritical+0x50>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	3b01      	subs	r3, #1
 8009408:	4a08      	ldr	r2, [pc, #32]	@ (800942c <vPortExitCritical+0x50>)
 800940a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800940c:	4b07      	ldr	r3, [pc, #28]	@ (800942c <vPortExitCritical+0x50>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d105      	bne.n	8009420 <vPortExitCritical+0x44>
 8009414:	2300      	movs	r3, #0
 8009416:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	f383 8811 	msr	BASEPRI, r3
}
 800941e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009420:	bf00      	nop
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr
 800942c:	2000000c 	.word	0x2000000c

08009430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009430:	f3ef 8009 	mrs	r0, PSP
 8009434:	f3bf 8f6f 	isb	sy
 8009438:	4b15      	ldr	r3, [pc, #84]	@ (8009490 <pxCurrentTCBConst>)
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	f01e 0f10 	tst.w	lr, #16
 8009440:	bf08      	it	eq
 8009442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800944a:	6010      	str	r0, [r2, #0]
 800944c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009450:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009454:	f380 8811 	msr	BASEPRI, r0
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	f7fe fbc0 	bl	8007be4 <vTaskSwitchContext>
 8009464:	f04f 0000 	mov.w	r0, #0
 8009468:	f380 8811 	msr	BASEPRI, r0
 800946c:	bc09      	pop	{r0, r3}
 800946e:	6819      	ldr	r1, [r3, #0]
 8009470:	6808      	ldr	r0, [r1, #0]
 8009472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009476:	f01e 0f10 	tst.w	lr, #16
 800947a:	bf08      	it	eq
 800947c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009480:	f380 8809 	msr	PSP, r0
 8009484:	f3bf 8f6f 	isb	sy
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	f3af 8000 	nop.w

08009490 <pxCurrentTCBConst>:
 8009490:	20000eec 	.word	0x20000eec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009494:	bf00      	nop
 8009496:	bf00      	nop

08009498 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
	__asm volatile
 800949e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	607b      	str	r3, [r7, #4]
}
 80094b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80094b2:	f7fe fadd 	bl	8007a70 <xTaskIncrementTick>
 80094b6:	4603      	mov	r3, r0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d003      	beq.n	80094c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80094bc:	4b06      	ldr	r3, [pc, #24]	@ (80094d8 <xPortSysTickHandler+0x40>)
 80094be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094c2:	601a      	str	r2, [r3, #0]
 80094c4:	2300      	movs	r3, #0
 80094c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	f383 8811 	msr	BASEPRI, r3
}
 80094ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80094d0:	bf00      	nop
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	e000ed04 	.word	0xe000ed04

080094dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80094dc:	b480      	push	{r7}
 80094de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80094e0:	4b0b      	ldr	r3, [pc, #44]	@ (8009510 <vPortSetupTimerInterrupt+0x34>)
 80094e2:	2200      	movs	r2, #0
 80094e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80094e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009514 <vPortSetupTimerInterrupt+0x38>)
 80094e8:	2200      	movs	r2, #0
 80094ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80094ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009518 <vPortSetupTimerInterrupt+0x3c>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a0a      	ldr	r2, [pc, #40]	@ (800951c <vPortSetupTimerInterrupt+0x40>)
 80094f2:	fba2 2303 	umull	r2, r3, r2, r3
 80094f6:	099b      	lsrs	r3, r3, #6
 80094f8:	4a09      	ldr	r2, [pc, #36]	@ (8009520 <vPortSetupTimerInterrupt+0x44>)
 80094fa:	3b01      	subs	r3, #1
 80094fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80094fe:	4b04      	ldr	r3, [pc, #16]	@ (8009510 <vPortSetupTimerInterrupt+0x34>)
 8009500:	2207      	movs	r2, #7
 8009502:	601a      	str	r2, [r3, #0]
}
 8009504:	bf00      	nop
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	e000e010 	.word	0xe000e010
 8009514:	e000e018 	.word	0xe000e018
 8009518:	20000000 	.word	0x20000000
 800951c:	10624dd3 	.word	0x10624dd3
 8009520:	e000e014 	.word	0xe000e014

08009524 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009524:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009534 <vPortEnableVFP+0x10>
 8009528:	6801      	ldr	r1, [r0, #0]
 800952a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800952e:	6001      	str	r1, [r0, #0]
 8009530:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009532:	bf00      	nop
 8009534:	e000ed88 	.word	0xe000ed88

08009538 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800953e:	f3ef 8305 	mrs	r3, IPSR
 8009542:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2b0f      	cmp	r3, #15
 8009548:	d915      	bls.n	8009576 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800954a:	4a18      	ldr	r2, [pc, #96]	@ (80095ac <vPortValidateInterruptPriority+0x74>)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	4413      	add	r3, r2
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009554:	4b16      	ldr	r3, [pc, #88]	@ (80095b0 <vPortValidateInterruptPriority+0x78>)
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	7afa      	ldrb	r2, [r7, #11]
 800955a:	429a      	cmp	r2, r3
 800955c:	d20b      	bcs.n	8009576 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800955e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	607b      	str	r3, [r7, #4]
}
 8009570:	bf00      	nop
 8009572:	bf00      	nop
 8009574:	e7fd      	b.n	8009572 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009576:	4b0f      	ldr	r3, [pc, #60]	@ (80095b4 <vPortValidateInterruptPriority+0x7c>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800957e:	4b0e      	ldr	r3, [pc, #56]	@ (80095b8 <vPortValidateInterruptPriority+0x80>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	429a      	cmp	r2, r3
 8009584:	d90b      	bls.n	800959e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800958a:	f383 8811 	msr	BASEPRI, r3
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f3bf 8f4f 	dsb	sy
 8009596:	603b      	str	r3, [r7, #0]
}
 8009598:	bf00      	nop
 800959a:	bf00      	nop
 800959c:	e7fd      	b.n	800959a <vPortValidateInterruptPriority+0x62>
	}
 800959e:	bf00      	nop
 80095a0:	3714      	adds	r7, #20
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	e000e3f0 	.word	0xe000e3f0
 80095b0:	20001518 	.word	0x20001518
 80095b4:	e000ed0c 	.word	0xe000ed0c
 80095b8:	2000151c 	.word	0x2000151c

080095bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b08a      	sub	sp, #40	@ 0x28
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80095c4:	2300      	movs	r3, #0
 80095c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80095c8:	f7fe f996 	bl	80078f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80095cc:	4b5c      	ldr	r3, [pc, #368]	@ (8009740 <pvPortMalloc+0x184>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d101      	bne.n	80095d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80095d4:	f000 f924 	bl	8009820 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80095d8:	4b5a      	ldr	r3, [pc, #360]	@ (8009744 <pvPortMalloc+0x188>)
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4013      	ands	r3, r2
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f040 8095 	bne.w	8009710 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d01e      	beq.n	800962a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80095ec:	2208      	movs	r2, #8
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4413      	add	r3, r2
 80095f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f003 0307 	and.w	r3, r3, #7
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d015      	beq.n	800962a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f023 0307 	bic.w	r3, r3, #7
 8009604:	3308      	adds	r3, #8
 8009606:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f003 0307 	and.w	r3, r3, #7
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00b      	beq.n	800962a <pvPortMalloc+0x6e>
	__asm volatile
 8009612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009616:	f383 8811 	msr	BASEPRI, r3
 800961a:	f3bf 8f6f 	isb	sy
 800961e:	f3bf 8f4f 	dsb	sy
 8009622:	617b      	str	r3, [r7, #20]
}
 8009624:	bf00      	nop
 8009626:	bf00      	nop
 8009628:	e7fd      	b.n	8009626 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d06f      	beq.n	8009710 <pvPortMalloc+0x154>
 8009630:	4b45      	ldr	r3, [pc, #276]	@ (8009748 <pvPortMalloc+0x18c>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	429a      	cmp	r2, r3
 8009638:	d86a      	bhi.n	8009710 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800963a:	4b44      	ldr	r3, [pc, #272]	@ (800974c <pvPortMalloc+0x190>)
 800963c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800963e:	4b43      	ldr	r3, [pc, #268]	@ (800974c <pvPortMalloc+0x190>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009644:	e004      	b.n	8009650 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009648:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800964a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	429a      	cmp	r2, r3
 8009658:	d903      	bls.n	8009662 <pvPortMalloc+0xa6>
 800965a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1f1      	bne.n	8009646 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009662:	4b37      	ldr	r3, [pc, #220]	@ (8009740 <pvPortMalloc+0x184>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009668:	429a      	cmp	r2, r3
 800966a:	d051      	beq.n	8009710 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800966c:	6a3b      	ldr	r3, [r7, #32]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2208      	movs	r2, #8
 8009672:	4413      	add	r3, r2
 8009674:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	6a3b      	ldr	r3, [r7, #32]
 800967c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800967e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009680:	685a      	ldr	r2, [r3, #4]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	1ad2      	subs	r2, r2, r3
 8009686:	2308      	movs	r3, #8
 8009688:	005b      	lsls	r3, r3, #1
 800968a:	429a      	cmp	r2, r3
 800968c:	d920      	bls.n	80096d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800968e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4413      	add	r3, r2
 8009694:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	f003 0307 	and.w	r3, r3, #7
 800969c:	2b00      	cmp	r3, #0
 800969e:	d00b      	beq.n	80096b8 <pvPortMalloc+0xfc>
	__asm volatile
 80096a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a4:	f383 8811 	msr	BASEPRI, r3
 80096a8:	f3bf 8f6f 	isb	sy
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	613b      	str	r3, [r7, #16]
}
 80096b2:	bf00      	nop
 80096b4:	bf00      	nop
 80096b6:	e7fd      	b.n	80096b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80096b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ba:	685a      	ldr	r2, [r3, #4]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	1ad2      	subs	r2, r2, r3
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80096c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80096ca:	69b8      	ldr	r0, [r7, #24]
 80096cc:	f000 f90a 	bl	80098e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80096d0:	4b1d      	ldr	r3, [pc, #116]	@ (8009748 <pvPortMalloc+0x18c>)
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	4a1b      	ldr	r2, [pc, #108]	@ (8009748 <pvPortMalloc+0x18c>)
 80096dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80096de:	4b1a      	ldr	r3, [pc, #104]	@ (8009748 <pvPortMalloc+0x18c>)
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	4b1b      	ldr	r3, [pc, #108]	@ (8009750 <pvPortMalloc+0x194>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d203      	bcs.n	80096f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80096ea:	4b17      	ldr	r3, [pc, #92]	@ (8009748 <pvPortMalloc+0x18c>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a18      	ldr	r2, [pc, #96]	@ (8009750 <pvPortMalloc+0x194>)
 80096f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80096f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f4:	685a      	ldr	r2, [r3, #4]
 80096f6:	4b13      	ldr	r3, [pc, #76]	@ (8009744 <pvPortMalloc+0x188>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	431a      	orrs	r2, r3
 80096fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009702:	2200      	movs	r2, #0
 8009704:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009706:	4b13      	ldr	r3, [pc, #76]	@ (8009754 <pvPortMalloc+0x198>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	3301      	adds	r3, #1
 800970c:	4a11      	ldr	r2, [pc, #68]	@ (8009754 <pvPortMalloc+0x198>)
 800970e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009710:	f7fe f900 	bl	8007914 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	f003 0307 	and.w	r3, r3, #7
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00b      	beq.n	8009736 <pvPortMalloc+0x17a>
	__asm volatile
 800971e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	60fb      	str	r3, [r7, #12]
}
 8009730:	bf00      	nop
 8009732:	bf00      	nop
 8009734:	e7fd      	b.n	8009732 <pvPortMalloc+0x176>
	return pvReturn;
 8009736:	69fb      	ldr	r3, [r7, #28]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3728      	adds	r7, #40	@ 0x28
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	200020e0 	.word	0x200020e0
 8009744:	200020f4 	.word	0x200020f4
 8009748:	200020e4 	.word	0x200020e4
 800974c:	200020d8 	.word	0x200020d8
 8009750:	200020e8 	.word	0x200020e8
 8009754:	200020ec 	.word	0x200020ec

08009758 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b086      	sub	sp, #24
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d04f      	beq.n	800980a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800976a:	2308      	movs	r3, #8
 800976c:	425b      	negs	r3, r3
 800976e:	697a      	ldr	r2, [r7, #20]
 8009770:	4413      	add	r3, r2
 8009772:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	685a      	ldr	r2, [r3, #4]
 800977c:	4b25      	ldr	r3, [pc, #148]	@ (8009814 <vPortFree+0xbc>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4013      	ands	r3, r2
 8009782:	2b00      	cmp	r3, #0
 8009784:	d10b      	bne.n	800979e <vPortFree+0x46>
	__asm volatile
 8009786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800978a:	f383 8811 	msr	BASEPRI, r3
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	60fb      	str	r3, [r7, #12]
}
 8009798:	bf00      	nop
 800979a:	bf00      	nop
 800979c:	e7fd      	b.n	800979a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00b      	beq.n	80097be <vPortFree+0x66>
	__asm volatile
 80097a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097aa:	f383 8811 	msr	BASEPRI, r3
 80097ae:	f3bf 8f6f 	isb	sy
 80097b2:	f3bf 8f4f 	dsb	sy
 80097b6:	60bb      	str	r3, [r7, #8]
}
 80097b8:	bf00      	nop
 80097ba:	bf00      	nop
 80097bc:	e7fd      	b.n	80097ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	685a      	ldr	r2, [r3, #4]
 80097c2:	4b14      	ldr	r3, [pc, #80]	@ (8009814 <vPortFree+0xbc>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4013      	ands	r3, r2
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d01e      	beq.n	800980a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d11a      	bne.n	800980a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	685a      	ldr	r2, [r3, #4]
 80097d8:	4b0e      	ldr	r3, [pc, #56]	@ (8009814 <vPortFree+0xbc>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	43db      	mvns	r3, r3
 80097de:	401a      	ands	r2, r3
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80097e4:	f7fe f888 	bl	80078f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	685a      	ldr	r2, [r3, #4]
 80097ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009818 <vPortFree+0xc0>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4413      	add	r3, r2
 80097f2:	4a09      	ldr	r2, [pc, #36]	@ (8009818 <vPortFree+0xc0>)
 80097f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80097f6:	6938      	ldr	r0, [r7, #16]
 80097f8:	f000 f874 	bl	80098e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80097fc:	4b07      	ldr	r3, [pc, #28]	@ (800981c <vPortFree+0xc4>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	3301      	adds	r3, #1
 8009802:	4a06      	ldr	r2, [pc, #24]	@ (800981c <vPortFree+0xc4>)
 8009804:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009806:	f7fe f885 	bl	8007914 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800980a:	bf00      	nop
 800980c:	3718      	adds	r7, #24
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	200020f4 	.word	0x200020f4
 8009818:	200020e4 	.word	0x200020e4
 800981c:	200020f0 	.word	0x200020f0

08009820 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009826:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800982a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800982c:	4b27      	ldr	r3, [pc, #156]	@ (80098cc <prvHeapInit+0xac>)
 800982e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f003 0307 	and.w	r3, r3, #7
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00c      	beq.n	8009854 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	3307      	adds	r3, #7
 800983e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f023 0307 	bic.w	r3, r3, #7
 8009846:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009848:	68ba      	ldr	r2, [r7, #8]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	1ad3      	subs	r3, r2, r3
 800984e:	4a1f      	ldr	r2, [pc, #124]	@ (80098cc <prvHeapInit+0xac>)
 8009850:	4413      	add	r3, r2
 8009852:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009858:	4a1d      	ldr	r2, [pc, #116]	@ (80098d0 <prvHeapInit+0xb0>)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800985e:	4b1c      	ldr	r3, [pc, #112]	@ (80098d0 <prvHeapInit+0xb0>)
 8009860:	2200      	movs	r2, #0
 8009862:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	68ba      	ldr	r2, [r7, #8]
 8009868:	4413      	add	r3, r2
 800986a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800986c:	2208      	movs	r2, #8
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	1a9b      	subs	r3, r3, r2
 8009872:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f023 0307 	bic.w	r3, r3, #7
 800987a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	4a15      	ldr	r2, [pc, #84]	@ (80098d4 <prvHeapInit+0xb4>)
 8009880:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009882:	4b14      	ldr	r3, [pc, #80]	@ (80098d4 <prvHeapInit+0xb4>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2200      	movs	r2, #0
 8009888:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800988a:	4b12      	ldr	r3, [pc, #72]	@ (80098d4 <prvHeapInit+0xb4>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2200      	movs	r2, #0
 8009890:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	68fa      	ldr	r2, [r7, #12]
 800989a:	1ad2      	subs	r2, r2, r3
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80098a0:	4b0c      	ldr	r3, [pc, #48]	@ (80098d4 <prvHeapInit+0xb4>)
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	4a0a      	ldr	r2, [pc, #40]	@ (80098d8 <prvHeapInit+0xb8>)
 80098ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	4a09      	ldr	r2, [pc, #36]	@ (80098dc <prvHeapInit+0xbc>)
 80098b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80098b8:	4b09      	ldr	r3, [pc, #36]	@ (80098e0 <prvHeapInit+0xc0>)
 80098ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80098be:	601a      	str	r2, [r3, #0]
}
 80098c0:	bf00      	nop
 80098c2:	3714      	adds	r7, #20
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr
 80098cc:	20001520 	.word	0x20001520
 80098d0:	200020d8 	.word	0x200020d8
 80098d4:	200020e0 	.word	0x200020e0
 80098d8:	200020e8 	.word	0x200020e8
 80098dc:	200020e4 	.word	0x200020e4
 80098e0:	200020f4 	.word	0x200020f4

080098e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80098e4:	b480      	push	{r7}
 80098e6:	b085      	sub	sp, #20
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80098ec:	4b28      	ldr	r3, [pc, #160]	@ (8009990 <prvInsertBlockIntoFreeList+0xac>)
 80098ee:	60fb      	str	r3, [r7, #12]
 80098f0:	e002      	b.n	80098f8 <prvInsertBlockIntoFreeList+0x14>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	60fb      	str	r3, [r7, #12]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	429a      	cmp	r2, r3
 8009900:	d8f7      	bhi.n	80098f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	68ba      	ldr	r2, [r7, #8]
 800990c:	4413      	add	r3, r2
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	429a      	cmp	r2, r3
 8009912:	d108      	bne.n	8009926 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	685a      	ldr	r2, [r3, #4]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	441a      	add	r2, r3
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	68ba      	ldr	r2, [r7, #8]
 8009930:	441a      	add	r2, r3
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	429a      	cmp	r2, r3
 8009938:	d118      	bne.n	800996c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	4b15      	ldr	r3, [pc, #84]	@ (8009994 <prvInsertBlockIntoFreeList+0xb0>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	429a      	cmp	r2, r3
 8009944:	d00d      	beq.n	8009962 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	685a      	ldr	r2, [r3, #4]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	441a      	add	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	601a      	str	r2, [r3, #0]
 8009960:	e008      	b.n	8009974 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009962:	4b0c      	ldr	r3, [pc, #48]	@ (8009994 <prvInsertBlockIntoFreeList+0xb0>)
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	601a      	str	r2, [r3, #0]
 800996a:	e003      	b.n	8009974 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	429a      	cmp	r2, r3
 800997a:	d002      	beq.n	8009982 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009982:	bf00      	nop
 8009984:	3714      	adds	r7, #20
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	200020d8 	.word	0x200020d8
 8009994:	200020e0 	.word	0x200020e0

08009998 <memset>:
 8009998:	4402      	add	r2, r0
 800999a:	4603      	mov	r3, r0
 800999c:	4293      	cmp	r3, r2
 800999e:	d100      	bne.n	80099a2 <memset+0xa>
 80099a0:	4770      	bx	lr
 80099a2:	f803 1b01 	strb.w	r1, [r3], #1
 80099a6:	e7f9      	b.n	800999c <memset+0x4>

080099a8 <__libc_init_array>:
 80099a8:	b570      	push	{r4, r5, r6, lr}
 80099aa:	4d0d      	ldr	r5, [pc, #52]	@ (80099e0 <__libc_init_array+0x38>)
 80099ac:	4c0d      	ldr	r4, [pc, #52]	@ (80099e4 <__libc_init_array+0x3c>)
 80099ae:	1b64      	subs	r4, r4, r5
 80099b0:	10a4      	asrs	r4, r4, #2
 80099b2:	2600      	movs	r6, #0
 80099b4:	42a6      	cmp	r6, r4
 80099b6:	d109      	bne.n	80099cc <__libc_init_array+0x24>
 80099b8:	4d0b      	ldr	r5, [pc, #44]	@ (80099e8 <__libc_init_array+0x40>)
 80099ba:	4c0c      	ldr	r4, [pc, #48]	@ (80099ec <__libc_init_array+0x44>)
 80099bc:	f000 f826 	bl	8009a0c <_init>
 80099c0:	1b64      	subs	r4, r4, r5
 80099c2:	10a4      	asrs	r4, r4, #2
 80099c4:	2600      	movs	r6, #0
 80099c6:	42a6      	cmp	r6, r4
 80099c8:	d105      	bne.n	80099d6 <__libc_init_array+0x2e>
 80099ca:	bd70      	pop	{r4, r5, r6, pc}
 80099cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80099d0:	4798      	blx	r3
 80099d2:	3601      	adds	r6, #1
 80099d4:	e7ee      	b.n	80099b4 <__libc_init_array+0xc>
 80099d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80099da:	4798      	blx	r3
 80099dc:	3601      	adds	r6, #1
 80099de:	e7f2      	b.n	80099c6 <__libc_init_array+0x1e>
 80099e0:	08009bd4 	.word	0x08009bd4
 80099e4:	08009bd4 	.word	0x08009bd4
 80099e8:	08009bd4 	.word	0x08009bd4
 80099ec:	08009bd8 	.word	0x08009bd8

080099f0 <memcpy>:
 80099f0:	440a      	add	r2, r1
 80099f2:	4291      	cmp	r1, r2
 80099f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80099f8:	d100      	bne.n	80099fc <memcpy+0xc>
 80099fa:	4770      	bx	lr
 80099fc:	b510      	push	{r4, lr}
 80099fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a06:	4291      	cmp	r1, r2
 8009a08:	d1f9      	bne.n	80099fe <memcpy+0xe>
 8009a0a:	bd10      	pop	{r4, pc}

08009a0c <_init>:
 8009a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0e:	bf00      	nop
 8009a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a12:	bc08      	pop	{r3}
 8009a14:	469e      	mov	lr, r3
 8009a16:	4770      	bx	lr

08009a18 <_fini>:
 8009a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1a:	bf00      	nop
 8009a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a1e:	bc08      	pop	{r3}
 8009a20:	469e      	mov	lr, r3
 8009a22:	4770      	bx	lr
