
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d288  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0800d418  0800d418  0000e418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d87c  0800d87c  0000f220  2**0
                  CONTENTS
  4 .ARM          00000008  0800d87c  0800d87c  0000e87c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d884  0800d884  0000f220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d884  0800d884  0000e884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d888  0800d888  0000e888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000220  20000000  0800d88c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d88  20000220  0800daac  0000f220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fa8  0800daac  0000ffa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023f86  00000000  00000000  0000f250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050f7  00000000  00000000  000331d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f70  00000000  00000000  000382d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001836  00000000  00000000  0003a240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f544  00000000  00000000  0003ba76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028a84  00000000  00000000  0006afba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b974  00000000  00000000  00093a3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019f3b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000945c  00000000  00000000  0019f3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001a8854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d400 	.word	0x0800d400

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	0800d400 	.word	0x0800d400

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b08a      	sub	sp, #40	@ 0x28
 8000f3c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";
 8000f3e:	4b4e      	ldr	r3, [pc, #312]	@ (8001078 <MX_BlueNRG_MS_Init+0x140>)
 8000f40:	617b      	str	r3, [r7, #20]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 8000f42:	f000 f8ad 	bl	80010a0 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000f46:	2000      	movs	r0, #0
 8000f48:	f003 f894 	bl	8004074 <BSP_PB_GetState>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b4a      	ldr	r3, [pc, #296]	@ (800107c <MX_BlueNRG_MS_Init+0x144>)
 8000f52:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 8000f54:	2100      	movs	r1, #0
 8000f56:	484a      	ldr	r0, [pc, #296]	@ (8001080 <MX_BlueNRG_MS_Init+0x148>)
 8000f58:	f009 fa4a 	bl	800a3f0 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000f5c:	1dba      	adds	r2, r7, #6
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	4611      	mov	r1, r2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f009 f8b8 	bl	800a0da <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 8000f6a:	f009 f8fa 	bl	800a162 <hci_reset>
  HAL_Delay(100);
 8000f6e:	2064      	movs	r0, #100	@ 0x64
 8000f70:	f003 fdfc 	bl	8004b6c <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8000f74:	7a3b      	ldrb	r3, [r7, #8]
 8000f76:	2b30      	cmp	r3, #48	@ 0x30
 8000f78:	d902      	bls.n	8000f80 <MX_BlueNRG_MS_Init+0x48>
    bnrg_expansion_board = IDB05A1;
 8000f7a:	4b42      	ldr	r3, [pc, #264]	@ (8001084 <MX_BlueNRG_MS_Init+0x14c>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 8000f80:	f107 0209 	add.w	r2, r7, #9
 8000f84:	4b40      	ldr	r3, [pc, #256]	@ (8001088 <MX_BlueNRG_MS_Init+0x150>)
 8000f86:	2106      	movs	r1, #6
 8000f88:	2080      	movs	r0, #128	@ 0x80
 8000f8a:	f009 f820 	bl	8009fce <aci_hal_read_config_data>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	613b      	str	r3, [r7, #16]

  if (ret) {
    PRINTF("Read Static Random address failed.\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8000f92:	4b3d      	ldr	r3, [pc, #244]	@ (8001088 <MX_BlueNRG_MS_Init+0x150>)
 8000f94:	795b      	ldrb	r3, [r3, #5]
 8000f96:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000f9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8000f9c:	d001      	beq.n	8000fa2 <MX_BlueNRG_MS_Init+0x6a>
    PRINTF("Static Random address not well formed.\n");
    while(1);
 8000f9e:	bf00      	nop
 8000fa0:	e7fd      	b.n	8000f9e <MX_BlueNRG_MS_Init+0x66>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 8000fa2:	f008 fde0 	bl	8009b66 <aci_gatt_init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	613b      	str	r3, [r7, #16]
  if(ret){
    PRINTF("GATT_Init failed.\n");
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8000faa:	4b36      	ldr	r3, [pc, #216]	@ (8001084 <MX_BlueNRG_MS_Init+0x14c>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d110      	bne.n	8000fd4 <MX_BlueNRG_MS_Init+0x9c>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000fb2:	f107 020e 	add.w	r2, r7, #14
 8000fb6:	f107 030a 	add.w	r3, r7, #10
 8000fba:	9301      	str	r3, [sp, #4]
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f008 fba0 	bl	800970e <aci_gap_init_IDB05A1>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	e00a      	b.n	8000fea <MX_BlueNRG_MS_Init+0xb2>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000fd4:	f107 030a 	add.w	r3, r7, #10
 8000fd8:	f107 020c 	add.w	r2, r7, #12
 8000fdc:	f107 010e 	add.w	r1, r7, #14
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f008 fbe4 	bl	80097ae <aci_gap_init_IDB04A1>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	613b      	str	r3, [r7, #16]
  if (ret != BLE_STATUS_SUCCESS) {
    PRINTF("GAP_Init failed.\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000fea:	89fc      	ldrh	r4, [r7, #14]
 8000fec:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 8000fee:	6978      	ldr	r0, [r7, #20]
 8000ff0:	f7ff f93e 	bl	8000270 <strlen>
 8000ff4:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	2200      	movs	r2, #0
 8001000:	4629      	mov	r1, r5
 8001002:	4620      	mov	r0, r4
 8001004:	f008 ff26 	bl	8009e54 <aci_gatt_update_char_value>
 8001008:	4603      	mov	r3, r0
 800100a:	613b      	str	r3, [r7, #16]
  if (ret) {
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_BlueNRG_MS_Init+0xde>
    PRINTF("aci_gatt_update_char_value failed.\n");
    while(1);
 8001012:	bf00      	nop
 8001014:	e7fd      	b.n	8001012 <MX_BlueNRG_MS_Init+0xda>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8001016:	2301      	movs	r3, #1
 8001018:	9303      	str	r3, [sp, #12]
 800101a:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <MX_BlueNRG_MS_Init+0x154>)
 800101c:	9302      	str	r3, [sp, #8]
 800101e:	2300      	movs	r3, #0
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	2310      	movs	r3, #16
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2307      	movs	r3, #7
 8001028:	2200      	movs	r2, #0
 800102a:	2100      	movs	r1, #0
 800102c:	2001      	movs	r0, #1
 800102e:	f008 fcf2 	bl	8009a16 <aci_gap_set_auth_requirement>
 8001032:	4603      	mov	r3, r0
 8001034:	613b      	str	r3, [r7, #16]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_BlueNRG_MS_Init+0x108>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
    while(1);
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <MX_BlueNRG_MS_Init+0x104>
  }

  PRINTF("BLE Stack Initialized\n");

  ret = Add_HWServW2ST_Service();
 8001040:	f001 fa90 	bl	8002564 <Add_HWServW2ST_Service>
 8001044:	4603      	mov	r3, r0
 8001046:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_BlueNRG_MS_Init+0x11a>
    PRINTF("BlueMS HW service added successfully.\n");
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
 800104e:	bf00      	nop
 8001050:	e7fd      	b.n	800104e <MX_BlueNRG_MS_Init+0x116>
  }

  ret = Add_SWServW2ST_Service();
 8001052:	f001 fb59 	bl	8002708 <Add_SWServW2ST_Service>
 8001056:	4603      	mov	r3, r0
 8001058:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_BlueNRG_MS_Init+0x12c>
     PRINTF("BlueMS SW service added successfully.\n");
  } else {
     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
     while(1);
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <MX_BlueNRG_MS_Init+0x128>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 8001064:	2104      	movs	r1, #4
 8001066:	2001      	movs	r0, #1
 8001068:	f009 f806 	bl	800a078 <aci_hal_set_tx_power_level>
 800106c:	4603      	mov	r3, r0
 800106e:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bdb0      	pop	{r4, r5, r7, pc}
 8001078:	0800d418 	.word	0x0800d418
 800107c:	20000000 	.word	0x20000000
 8001080:	08002ccd 	.word	0x08002ccd
 8001084:	2000023c 	.word	0x2000023c
 8001088:	20000240 	.word	0x20000240
 800108c:	0001e240 	.word	0x0001e240

08001090 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 8001094:	f000 f812 	bl	80010bc <User_Process>
  hci_user_evt_proc();
 8001098:	f009 fb24 	bl	800a6e4 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80010a4:	2101      	movs	r1, #1
 80010a6:	2000      	movs	r0, #0
 80010a8:	f002 ff90 	bl	8003fcc <BSP_PB_Init>
  BSP_LED_Init(LED2);
 80010ac:	2000      	movs	r0, #0
 80010ae:	f002 ff25 	bl	8003efc <BSP_LED_Init>

  BSP_COM_Init(COM1);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f003 f83c 	bl	8004130 <BSP_COM_Init>
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}

080010bc <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  if (set_connectable)
 80010c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001174 <User_Process+0xb8>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d004      	beq.n	80010d6 <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 80010cc:	f001 fd8a 	bl	8002be4 <Set_DeviceConnectable>
    set_connectable = FALSE;
 80010d0:	4b28      	ldr	r3, [pc, #160]	@ (8001174 <User_Process+0xb8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);

    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f002 ff22 	bl	8003f20 <BSP_LED_Toggle>

    if (connected)
 80010dc:	4b26      	ldr	r3, [pc, #152]	@ (8001178 <User_Process+0xbc>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d042      	beq.n	800116a <User_Process+0xae>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 80010e4:	f003 fd36 	bl	8004b54 <HAL_GetTick>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f009 fc8a 	bl	800aa04 <srand>

      /* Update emulated Environmental data */
      Set_Random_Environmental_Values(&data_t, &data_p);
 80010f0:	463a      	mov	r2, r7
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	4611      	mov	r1, r2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f84c 	bl	8001194 <Set_Random_Environmental_Values>
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 80010fc:	edd7 7a00 	vldr	s15, [r7]
 8001100:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800117c <User_Process+0xc0>
 8001104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001108:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800110c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001110:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001114:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001118:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800111c:	ee17 3a90 	vmov	r3, s15
 8001120:	b21b      	sxth	r3, r3
 8001122:	4619      	mov	r1, r3
 8001124:	ee16 0a90 	vmov	r0, s13
 8001128:	f001 fd16 	bl	8002b58 <BlueMS_Environmental_Update>

      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
      Set_Random_Motion_Values(counter);
 800112c:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <User_Process+0xc4>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f000 f8af 	bl	8001294 <Set_Random_Motion_Values>
      Acc_Update(&x_axes, &g_axes, &m_axes);
 8001136:	4a13      	ldr	r2, [pc, #76]	@ (8001184 <User_Process+0xc8>)
 8001138:	4913      	ldr	r1, [pc, #76]	@ (8001188 <User_Process+0xcc>)
 800113a:	4814      	ldr	r0, [pc, #80]	@ (800118c <User_Process+0xd0>)
 800113c:	f001 fb74 	bl	8002828 <Acc_Update>
      Quat_Update(&q_axes);
 8001140:	4813      	ldr	r0, [pc, #76]	@ (8001190 <User_Process+0xd4>)
 8001142:	f001 fbfb 	bl	800293c <Quat_Update>

      counter ++;
 8001146:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <User_Process+0xc4>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	3301      	adds	r3, #1
 800114c:	4a0c      	ldr	r2, [pc, #48]	@ (8001180 <User_Process+0xc4>)
 800114e:	6013      	str	r3, [r2, #0]
      if (counter == 40) {
 8001150:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <User_Process+0xc4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b28      	cmp	r3, #40	@ 0x28
 8001156:	d104      	bne.n	8001162 <User_Process+0xa6>
        counter = 0;
 8001158:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <User_Process+0xc4>)
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
        Reset_Motion_Values();
 800115e:	f001 f907 	bl	8002370 <Reset_Motion_Values>
      }
#if !USE_BUTTON
      HAL_Delay(1000); /* wait 1 sec before sending new data */
 8001162:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001166:	f003 fd01 	bl	8004b6c <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000001 	.word	0x20000001
 8001178:	2000027c 	.word	0x2000027c
 800117c:	42c80000 	.word	0x42c80000
 8001180:	20000248 	.word	0x20000248
 8001184:	20000298 	.word	0x20000298
 8001188:	2000028c 	.word	0x2000028c
 800118c:	20000280 	.word	0x20000280
 8001190:	200002a4 	.word	0x200002a4

08001194 <Set_Random_Environmental_Values>:
 * @param  float pointer to temperature data
 * @param  float pointer to pressure data
 * @retval None
 */
static void Set_Random_Environmental_Values(float *data_t, float *data_p)
{
 8001194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001198:	b084      	sub	sp, #16
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	60b9      	str	r1, [r7, #8]
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 80011a0:	f009 fc5e 	bl	800aa60 <rand>
 80011a4:	4603      	mov	r3, r0
 80011a6:	17da      	asrs	r2, r3, #31
 80011a8:	469a      	mov	sl, r3
 80011aa:	4693      	mov	fp, r2
 80011ac:	4652      	mov	r2, sl
 80011ae:	465b      	mov	r3, fp
 80011b0:	f04f 0000 	mov.w	r0, #0
 80011b4:	f04f 0100 	mov.w	r1, #0
 80011b8:	0099      	lsls	r1, r3, #2
 80011ba:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80011be:	0090      	lsls	r0, r2, #2
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	eb12 010a 	adds.w	r1, r2, sl
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	eb43 030b 	adc.w	r3, r3, fp
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80011d4:	f04f 0300 	mov.w	r3, #0
 80011d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011dc:	f7ff fd34 	bl	8000c48 <__aeabi_uldivmod>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4610      	mov	r0, r2
 80011e6:	4619      	mov	r1, r3
 80011e8:	f7ff f9d0 	bl	800058c <__aeabi_ul2d>
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	4b26      	ldr	r3, [pc, #152]	@ (800128c <Set_Random_Environmental_Values+0xf8>)
 80011f2:	f7ff f84b 	bl	800028c <__adddf3>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f7ff fcd3 	bl	8000ba8 <__aeabi_d2f>
 8001202:	4602      	mov	r2, r0
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	601a      	str	r2, [r3, #0]
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 8001208:	f009 fc2a 	bl	800aa60 <rand>
 800120c:	4603      	mov	r3, r0
 800120e:	17da      	asrs	r2, r3, #31
 8001210:	4698      	mov	r8, r3
 8001212:	4691      	mov	r9, r2
 8001214:	4642      	mov	r2, r8
 8001216:	464b      	mov	r3, r9
 8001218:	f04f 0000 	mov.w	r0, #0
 800121c:	f04f 0100 	mov.w	r1, #0
 8001220:	0099      	lsls	r1, r3, #2
 8001222:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001226:	0090      	lsls	r0, r2, #2
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	eb12 0408 	adds.w	r4, r2, r8
 8001230:	eb43 0509 	adc.w	r5, r3, r9
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	f04f 0300 	mov.w	r3, #0
 800123c:	012b      	lsls	r3, r5, #4
 800123e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001242:	0122      	lsls	r2, r4, #4
 8001244:	4614      	mov	r4, r2
 8001246:	461d      	mov	r5, r3
 8001248:	4620      	mov	r0, r4
 800124a:	4629      	mov	r1, r5
 800124c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	f7ff fcf8 	bl	8000c48 <__aeabi_uldivmod>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff f994 	bl	800058c <__aeabi_ul2d>
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <Set_Random_Environmental_Values+0xfc>)
 800126a:	f7ff f80f 	bl	800028c <__adddf3>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4610      	mov	r0, r2
 8001274:	4619      	mov	r1, r3
 8001276:	f7ff fc97 	bl	8000ba8 <__aeabi_d2f>
 800127a:	4602      	mov	r2, r0
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	601a      	str	r2, [r3, #0]
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800128a:	bf00      	nop
 800128c:	403b0000 	.word	0x403b0000
 8001290:	408f4000 	.word	0x408f4000

08001294 <Set_Random_Motion_Values>:
 * @brief  Set random values for all motion sensor data
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{
 8001294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001298:	f5ad 7d7a 	sub.w	sp, sp, #1000	@ 0x3e8
 800129c:	af00      	add	r7, sp, #0
 800129e:	f8c7 03e4 	str.w	r0, [r7, #996]	@ 0x3e4
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
  if (cnt < 20) {
 80012a2:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80012a6:	2b13      	cmp	r3, #19
 80012a8:	f200 8426 	bhi.w	8001af8 <Set_Random_Motion_Values+0x864>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80012ac:	f009 fbd8 	bl	800aa60 <rand>
 80012b0:	4603      	mov	r3, r0
 80012b2:	17da      	asrs	r2, r3, #31
 80012b4:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 80012b8:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
 80012bc:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80012c0:	2200      	movs	r2, #0
 80012c2:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
 80012c6:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
 80012ca:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	@ 0x328
 80012ce:	462b      	mov	r3, r5
 80012d0:	e9d7 abc8 	ldrd	sl, fp, [r7, #800]	@ 0x320
 80012d4:	4652      	mov	r2, sl
 80012d6:	fb02 f203 	mul.w	r2, r2, r3
 80012da:	465b      	mov	r3, fp
 80012dc:	4621      	mov	r1, r4
 80012de:	fb01 f303 	mul.w	r3, r1, r3
 80012e2:	4413      	add	r3, r2
 80012e4:	4622      	mov	r2, r4
 80012e6:	4651      	mov	r1, sl
 80012e8:	fba2 8901 	umull	r8, r9, r2, r1
 80012ec:	444b      	add	r3, r9
 80012ee:	4699      	mov	r9, r3
 80012f0:	4642      	mov	r2, r8
 80012f2:	464b      	mov	r3, r9
 80012f4:	1891      	adds	r1, r2, r2
 80012f6:	66b9      	str	r1, [r7, #104]	@ 0x68
 80012f8:	415b      	adcs	r3, r3
 80012fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80012fc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001300:	eb12 0108 	adds.w	r1, r2, r8
 8001304:	f8c7 1318 	str.w	r1, [r7, #792]	@ 0x318
 8001308:	eb43 0309 	adc.w	r3, r3, r9
 800130c:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 8001310:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001314:	f04f 0300 	mov.w	r3, #0
 8001318:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	@ 0x318
 800131c:	f7ff fc94 	bl	8000c48 <__aeabi_uldivmod>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	f112 010a 	adds.w	r1, r2, #10
 8001328:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 800132c:	f143 0300 	adc.w	r3, r3, #0
 8001330:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001334:	4bec      	ldr	r3, [pc, #944]	@ (80016e8 <Set_Random_Motion_Values+0x454>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800133e:	4413      	add	r3, r2
 8001340:	461a      	mov	r2, r3
 8001342:	4be9      	ldr	r3, [pc, #932]	@ (80016e8 <Set_Random_Motion_Values+0x454>)
 8001344:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001346:	f009 fb8b 	bl	800aa60 <rand>
 800134a:	4603      	mov	r3, r0
 800134c:	17da      	asrs	r2, r3, #31
 800134e:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 8001352:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 8001356:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800135a:	2200      	movs	r2, #0
 800135c:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 8001360:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 8001364:	e9d7 45c4 	ldrd	r4, r5, [r7, #784]	@ 0x310
 8001368:	462b      	mov	r3, r5
 800136a:	e9d7 89c2 	ldrd	r8, r9, [r7, #776]	@ 0x308
 800136e:	4642      	mov	r2, r8
 8001370:	fb02 f203 	mul.w	r2, r2, r3
 8001374:	464b      	mov	r3, r9
 8001376:	4621      	mov	r1, r4
 8001378:	fb01 f303 	mul.w	r3, r1, r3
 800137c:	4413      	add	r3, r2
 800137e:	4622      	mov	r2, r4
 8001380:	4641      	mov	r1, r8
 8001382:	fba2 1201 	umull	r1, r2, r2, r1
 8001386:	f8c7 23dc 	str.w	r2, [r7, #988]	@ 0x3dc
 800138a:	460a      	mov	r2, r1
 800138c:	f8c7 23d8 	str.w	r2, [r7, #984]	@ 0x3d8
 8001390:	f8d7 23dc 	ldr.w	r2, [r7, #988]	@ 0x3dc
 8001394:	4413      	add	r3, r2
 8001396:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
 800139a:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	@ 0x3d8
 800139e:	4622      	mov	r2, r4
 80013a0:	462b      	mov	r3, r5
 80013a2:	f04f 0000 	mov.w	r0, #0
 80013a6:	f04f 0100 	mov.w	r1, #0
 80013aa:	0099      	lsls	r1, r3, #2
 80013ac:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80013b0:	0090      	lsls	r0, r2, #2
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4621      	mov	r1, r4
 80013b8:	1851      	adds	r1, r2, r1
 80013ba:	f8c7 1300 	str.w	r1, [r7, #768]	@ 0x300
 80013be:	4629      	mov	r1, r5
 80013c0:	eb43 0101 	adc.w	r1, r3, r1
 80013c4:	f8c7 1304 	str.w	r1, [r7, #772]	@ 0x304
 80013c8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	@ 0x300
 80013d4:	f7ff fc38 	bl	8000c48 <__aeabi_uldivmod>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	f06f 0009 	mvn.w	r0, #9
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295
 80013e4:	1a80      	subs	r0, r0, r2
 80013e6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 80013ea:	eb61 0303 	sbc.w	r3, r1, r3
 80013ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80013f2:	4bbd      	ldr	r3, [pc, #756]	@ (80016e8 <Set_Random_Motion_Values+0x454>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	461a      	mov	r2, r3
 80013f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80013fc:	4413      	add	r3, r2
 80013fe:	461a      	mov	r2, r3
 8001400:	4bb9      	ldr	r3, [pc, #740]	@ (80016e8 <Set_Random_Motion_Values+0x454>)
 8001402:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001404:	f009 fb2c 	bl	800aa60 <rand>
 8001408:	4603      	mov	r3, r0
 800140a:	17da      	asrs	r2, r3, #31
 800140c:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 8001410:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 8001414:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001418:	2200      	movs	r2, #0
 800141a:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 800141e:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 8001422:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	@ 0x2f8
 8001426:	462b      	mov	r3, r5
 8001428:	e9d7 89bc 	ldrd	r8, r9, [r7, #752]	@ 0x2f0
 800142c:	4642      	mov	r2, r8
 800142e:	fb02 f203 	mul.w	r2, r2, r3
 8001432:	464b      	mov	r3, r9
 8001434:	4621      	mov	r1, r4
 8001436:	fb01 f303 	mul.w	r3, r1, r3
 800143a:	4413      	add	r3, r2
 800143c:	4622      	mov	r2, r4
 800143e:	4641      	mov	r1, r8
 8001440:	fba2 1201 	umull	r1, r2, r2, r1
 8001444:	f8c7 23d4 	str.w	r2, [r7, #980]	@ 0x3d4
 8001448:	460a      	mov	r2, r1
 800144a:	f8c7 23d0 	str.w	r2, [r7, #976]	@ 0x3d0
 800144e:	f8d7 23d4 	ldr.w	r2, [r7, #980]	@ 0x3d4
 8001452:	4413      	add	r3, r2
 8001454:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 8001458:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	@ 0x3d0
 800145c:	4622      	mov	r2, r4
 800145e:	462b      	mov	r3, r5
 8001460:	f04f 0000 	mov.w	r0, #0
 8001464:	f04f 0100 	mov.w	r1, #0
 8001468:	00d9      	lsls	r1, r3, #3
 800146a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800146e:	00d0      	lsls	r0, r2, #3
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4621      	mov	r1, r4
 8001476:	1a51      	subs	r1, r2, r1
 8001478:	f8c7 12e8 	str.w	r1, [r7, #744]	@ 0x2e8
 800147c:	4629      	mov	r1, r5
 800147e:	eb63 0301 	sbc.w	r3, r3, r1
 8001482:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8001486:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	@ 0x2e8
 8001492:	f7ff fbd9 	bl	8000c48 <__aeabi_uldivmod>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	f112 010a 	adds.w	r1, r2, #10
 800149e:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 80014a2:	f143 0300 	adc.w	r3, r3, #0
 80014a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80014aa:	4b8f      	ldr	r3, [pc, #572]	@ (80016e8 <Set_Random_Motion_Values+0x454>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	461a      	mov	r2, r3
 80014b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80014b4:	4413      	add	r3, r2
 80014b6:	461a      	mov	r2, r3
 80014b8:	4b8b      	ldr	r3, [pc, #556]	@ (80016e8 <Set_Random_Motion_Values+0x454>)
 80014ba:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 80014bc:	f009 fad0 	bl	800aa60 <rand>
 80014c0:	4603      	mov	r3, r0
 80014c2:	17da      	asrs	r2, r3, #31
 80014c4:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 80014c8:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 80014cc:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80014d0:	2200      	movs	r2, #0
 80014d2:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 80014d6:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 80014da:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	@ 0x2e0
 80014de:	462b      	mov	r3, r5
 80014e0:	e9d7 89b6 	ldrd	r8, r9, [r7, #728]	@ 0x2d8
 80014e4:	4642      	mov	r2, r8
 80014e6:	fb02 f203 	mul.w	r2, r2, r3
 80014ea:	464b      	mov	r3, r9
 80014ec:	4621      	mov	r1, r4
 80014ee:	fb01 f303 	mul.w	r3, r1, r3
 80014f2:	4413      	add	r3, r2
 80014f4:	4622      	mov	r2, r4
 80014f6:	4641      	mov	r1, r8
 80014f8:	fba2 1201 	umull	r1, r2, r2, r1
 80014fc:	f8c7 23cc 	str.w	r2, [r7, #972]	@ 0x3cc
 8001500:	460a      	mov	r2, r1
 8001502:	f8c7 23c8 	str.w	r2, [r7, #968]	@ 0x3c8
 8001506:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 800150a:	4413      	add	r3, r2
 800150c:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 8001510:	e9d7 12f2 	ldrd	r1, r2, [r7, #968]	@ 0x3c8
 8001514:	460b      	mov	r3, r1
 8001516:	18db      	adds	r3, r3, r3
 8001518:	663b      	str	r3, [r7, #96]	@ 0x60
 800151a:	4613      	mov	r3, r2
 800151c:	eb42 0303 	adc.w	r3, r2, r3
 8001520:	667b      	str	r3, [r7, #100]	@ 0x64
 8001522:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001526:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	f7ff fb8b 	bl	8000c48 <__aeabi_uldivmod>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 800153a:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800153e:	f143 0300 	adc.w	r3, r3, #0
 8001542:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001546:	4b69      	ldr	r3, [pc, #420]	@ (80016ec <Set_Random_Motion_Values+0x458>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	461a      	mov	r2, r3
 800154c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001550:	4413      	add	r3, r2
 8001552:	461a      	mov	r2, r3
 8001554:	4b65      	ldr	r3, [pc, #404]	@ (80016ec <Set_Random_Motion_Values+0x458>)
 8001556:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001558:	f009 fa82 	bl	800aa60 <rand>
 800155c:	4603      	mov	r3, r0
 800155e:	17da      	asrs	r2, r3, #31
 8001560:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 8001564:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 8001568:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800156c:	2200      	movs	r2, #0
 800156e:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 8001572:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 8001576:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	@ 0x2d0
 800157a:	462b      	mov	r3, r5
 800157c:	e9d7 89b2 	ldrd	r8, r9, [r7, #712]	@ 0x2c8
 8001580:	4642      	mov	r2, r8
 8001582:	fb02 f203 	mul.w	r2, r2, r3
 8001586:	464b      	mov	r3, r9
 8001588:	4621      	mov	r1, r4
 800158a:	fb01 f303 	mul.w	r3, r1, r3
 800158e:	4413      	add	r3, r2
 8001590:	4622      	mov	r2, r4
 8001592:	4641      	mov	r1, r8
 8001594:	fba2 1201 	umull	r1, r2, r2, r1
 8001598:	f8c7 23c4 	str.w	r2, [r7, #964]	@ 0x3c4
 800159c:	460a      	mov	r2, r1
 800159e:	f8c7 23c0 	str.w	r2, [r7, #960]	@ 0x3c0
 80015a2:	f8d7 23c4 	ldr.w	r2, [r7, #964]	@ 0x3c4
 80015a6:	4413      	add	r3, r2
 80015a8:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 80015ac:	f04f 0000 	mov.w	r0, #0
 80015b0:	f04f 0100 	mov.w	r1, #0
 80015b4:	e9d7 45f0 	ldrd	r4, r5, [r7, #960]	@ 0x3c0
 80015b8:	462b      	mov	r3, r5
 80015ba:	0099      	lsls	r1, r3, #2
 80015bc:	4623      	mov	r3, r4
 80015be:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 80015c2:	4623      	mov	r3, r4
 80015c4:	0098      	lsls	r0, r3, #2
 80015c6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	f7ff fb3b 	bl	8000c48 <__aeabi_uldivmod>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 80015da:	f04f 31ff 	mov.w	r1, #4294967295
 80015de:	1a80      	subs	r0, r0, r2
 80015e0:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
 80015e4:	eb61 0303 	sbc.w	r3, r1, r3
 80015e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80015ec:	4b3f      	ldr	r3, [pc, #252]	@ (80016ec <Set_Random_Motion_Values+0x458>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	461a      	mov	r2, r3
 80015f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80015f6:	4413      	add	r3, r2
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b3c      	ldr	r3, [pc, #240]	@ (80016ec <Set_Random_Motion_Values+0x458>)
 80015fc:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 80015fe:	f009 fa2f 	bl	800aa60 <rand>
 8001602:	4603      	mov	r3, r0
 8001604:	17da      	asrs	r2, r3, #31
 8001606:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 800160a:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 800160e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001612:	2200      	movs	r2, #0
 8001614:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 8001618:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 800161c:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	@ 0x2c0
 8001620:	462b      	mov	r3, r5
 8001622:	e9d7 89ae 	ldrd	r8, r9, [r7, #696]	@ 0x2b8
 8001626:	4642      	mov	r2, r8
 8001628:	fb02 f203 	mul.w	r2, r2, r3
 800162c:	464b      	mov	r3, r9
 800162e:	4621      	mov	r1, r4
 8001630:	fb01 f303 	mul.w	r3, r1, r3
 8001634:	4413      	add	r3, r2
 8001636:	4622      	mov	r2, r4
 8001638:	4641      	mov	r1, r8
 800163a:	fba2 1201 	umull	r1, r2, r2, r1
 800163e:	f8c7 23bc 	str.w	r2, [r7, #956]	@ 0x3bc
 8001642:	460a      	mov	r2, r1
 8001644:	f8c7 23b8 	str.w	r2, [r7, #952]	@ 0x3b8
 8001648:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 800164c:	4413      	add	r3, r2
 800164e:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 8001652:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	@ 0x3b8
 8001656:	4622      	mov	r2, r4
 8001658:	462b      	mov	r3, r5
 800165a:	1891      	adds	r1, r2, r2
 800165c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800165e:	415b      	adcs	r3, r3
 8001660:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001662:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001666:	4621      	mov	r1, r4
 8001668:	1851      	adds	r1, r2, r1
 800166a:	6539      	str	r1, [r7, #80]	@ 0x50
 800166c:	4629      	mov	r1, r5
 800166e:	eb43 0101 	adc.w	r1, r3, r1
 8001672:	6579      	str	r1, [r7, #84]	@ 0x54
 8001674:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8001678:	460b      	mov	r3, r1
 800167a:	18db      	adds	r3, r3, r3
 800167c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800167e:	4613      	mov	r3, r2
 8001680:	eb42 0303 	adc.w	r3, r2, r3
 8001684:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001686:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 800168a:	4618      	mov	r0, r3
 800168c:	4621      	mov	r1, r4
 800168e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	f7ff fad7 	bl	8000c48 <__aeabi_uldivmod>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 80016a2:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80016a6:	f143 0300 	adc.w	r3, r3, #0
 80016aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80016ae:	4b0f      	ldr	r3, [pc, #60]	@ (80016ec <Set_Random_Motion_Values+0x458>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	461a      	mov	r2, r3
 80016b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80016b8:	4413      	add	r3, r2
 80016ba:	461a      	mov	r2, r3
 80016bc:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <Set_Random_Motion_Values+0x458>)
 80016be:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80016c0:	f009 f9ce 	bl	800aa60 <rand>
 80016c4:	4603      	mov	r3, r0
 80016c6:	17da      	asrs	r2, r3, #31
 80016c8:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 80016cc:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 80016d0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80016d4:	2200      	movs	r2, #0
 80016d6:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 80016da:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 80016de:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	@ 0x2b0
 80016e2:	462b      	mov	r3, r5
 80016e4:	e004      	b.n	80016f0 <Set_Random_Motion_Values+0x45c>
 80016e6:	bf00      	nop
 80016e8:	20000280 	.word	0x20000280
 80016ec:	2000028c 	.word	0x2000028c
 80016f0:	e9d7 89aa 	ldrd	r8, r9, [r7, #680]	@ 0x2a8
 80016f4:	4642      	mov	r2, r8
 80016f6:	fb02 f203 	mul.w	r2, r2, r3
 80016fa:	464b      	mov	r3, r9
 80016fc:	4621      	mov	r1, r4
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	4413      	add	r3, r2
 8001704:	4622      	mov	r2, r4
 8001706:	4641      	mov	r1, r8
 8001708:	fba2 1201 	umull	r1, r2, r2, r1
 800170c:	f8c7 23b4 	str.w	r2, [r7, #948]	@ 0x3b4
 8001710:	460a      	mov	r2, r1
 8001712:	f8c7 23b0 	str.w	r2, [r7, #944]	@ 0x3b0
 8001716:	f8d7 23b4 	ldr.w	r2, [r7, #948]	@ 0x3b4
 800171a:	4413      	add	r3, r2
 800171c:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8001720:	e9d7 45ec 	ldrd	r4, r5, [r7, #944]	@ 0x3b0
 8001724:	4622      	mov	r2, r4
 8001726:	462b      	mov	r3, r5
 8001728:	1891      	adds	r1, r2, r2
 800172a:	6439      	str	r1, [r7, #64]	@ 0x40
 800172c:	415b      	adcs	r3, r3
 800172e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001730:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001734:	4621      	mov	r1, r4
 8001736:	1851      	adds	r1, r2, r1
 8001738:	f8c7 12a0 	str.w	r1, [r7, #672]	@ 0x2a0
 800173c:	4629      	mov	r1, r5
 800173e:	eb43 0101 	adc.w	r1, r3, r1
 8001742:	f8c7 12a4 	str.w	r1, [r7, #676]	@ 0x2a4
 8001746:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	@ 0x2a0
 8001752:	f7ff fa79 	bl	8000c48 <__aeabi_uldivmod>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	1cd1      	adds	r1, r2, #3
 800175c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8001760:	f143 0300 	adc.w	r3, r3, #0
 8001764:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001768:	4be1      	ldr	r3, [pc, #900]	@ (8001af0 <Set_Random_Motion_Values+0x85c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001772:	4413      	add	r3, r2
 8001774:	461a      	mov	r2, r3
 8001776:	4bde      	ldr	r3, [pc, #888]	@ (8001af0 <Set_Random_Motion_Values+0x85c>)
 8001778:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 800177a:	f009 f971 	bl	800aa60 <rand>
 800177e:	4603      	mov	r3, r0
 8001780:	17da      	asrs	r2, r3, #31
 8001782:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 8001786:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 800178a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800178e:	2200      	movs	r2, #0
 8001790:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8001794:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 8001798:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	@ 0x298
 800179c:	462b      	mov	r3, r5
 800179e:	e9d7 89a4 	ldrd	r8, r9, [r7, #656]	@ 0x290
 80017a2:	4642      	mov	r2, r8
 80017a4:	fb02 f203 	mul.w	r2, r2, r3
 80017a8:	464b      	mov	r3, r9
 80017aa:	4621      	mov	r1, r4
 80017ac:	fb01 f303 	mul.w	r3, r1, r3
 80017b0:	4413      	add	r3, r2
 80017b2:	4622      	mov	r2, r4
 80017b4:	4641      	mov	r1, r8
 80017b6:	fba2 1201 	umull	r1, r2, r2, r1
 80017ba:	f8c7 23ac 	str.w	r2, [r7, #940]	@ 0x3ac
 80017be:	460a      	mov	r2, r1
 80017c0:	f8c7 23a8 	str.w	r2, [r7, #936]	@ 0x3a8
 80017c4:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 80017c8:	4413      	add	r3, r2
 80017ca:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 80017ce:	f04f 0000 	mov.w	r0, #0
 80017d2:	f04f 0100 	mov.w	r1, #0
 80017d6:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	@ 0x3a8
 80017da:	462b      	mov	r3, r5
 80017dc:	0099      	lsls	r1, r3, #2
 80017de:	4623      	mov	r3, r4
 80017e0:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 80017e4:	4623      	mov	r3, r4
 80017e6:	0098      	lsls	r0, r3, #2
 80017e8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	f7ff fa2a 	bl	8000c48 <__aeabi_uldivmod>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	f06f 0002 	mvn.w	r0, #2
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001800:	1a80      	subs	r0, r0, r2
 8001802:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
 8001806:	eb61 0303 	sbc.w	r3, r1, r3
 800180a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800180e:	4bb8      	ldr	r3, [pc, #736]	@ (8001af0 <Set_Random_Motion_Values+0x85c>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	461a      	mov	r2, r3
 8001814:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001818:	4413      	add	r3, r2
 800181a:	461a      	mov	r2, r3
 800181c:	4bb4      	ldr	r3, [pc, #720]	@ (8001af0 <Set_Random_Motion_Values+0x85c>)
 800181e:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001820:	f009 f91e 	bl	800aa60 <rand>
 8001824:	4603      	mov	r3, r0
 8001826:	17da      	asrs	r2, r3, #31
 8001828:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 800182c:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 8001830:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001834:	2200      	movs	r2, #0
 8001836:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 800183a:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 800183e:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	@ 0x288
 8001842:	462b      	mov	r3, r5
 8001844:	e9d7 89a0 	ldrd	r8, r9, [r7, #640]	@ 0x280
 8001848:	4642      	mov	r2, r8
 800184a:	fb02 f203 	mul.w	r2, r2, r3
 800184e:	464b      	mov	r3, r9
 8001850:	4621      	mov	r1, r4
 8001852:	fb01 f303 	mul.w	r3, r1, r3
 8001856:	4413      	add	r3, r2
 8001858:	4622      	mov	r2, r4
 800185a:	4641      	mov	r1, r8
 800185c:	fba2 1201 	umull	r1, r2, r2, r1
 8001860:	f8c7 23a4 	str.w	r2, [r7, #932]	@ 0x3a4
 8001864:	460a      	mov	r2, r1
 8001866:	f8c7 23a0 	str.w	r2, [r7, #928]	@ 0x3a0
 800186a:	f8d7 23a4 	ldr.w	r2, [r7, #932]	@ 0x3a4
 800186e:	4413      	add	r3, r2
 8001870:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 8001874:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	@ 0x3a0
 8001878:	4622      	mov	r2, r4
 800187a:	462b      	mov	r3, r5
 800187c:	f04f 0000 	mov.w	r0, #0
 8001880:	f04f 0100 	mov.w	r1, #0
 8001884:	0099      	lsls	r1, r3, #2
 8001886:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800188a:	0090      	lsls	r0, r2, #2
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4621      	mov	r1, r4
 8001892:	1851      	adds	r1, r2, r1
 8001894:	f8c7 1278 	str.w	r1, [r7, #632]	@ 0x278
 8001898:	4629      	mov	r1, r5
 800189a:	eb43 0101 	adc.w	r1, r3, r1
 800189e:	f8c7 127c 	str.w	r1, [r7, #636]	@ 0x27c
 80018a2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 80018ae:	f7ff f9cb 	bl	8000c48 <__aeabi_uldivmod>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	1cd1      	adds	r1, r2, #3
 80018b8:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 80018bc:	f143 0300 	adc.w	r3, r3, #0
 80018c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80018c4:	4b8a      	ldr	r3, [pc, #552]	@ (8001af0 <Set_Random_Motion_Values+0x85c>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	461a      	mov	r2, r3
 80018ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80018ce:	4413      	add	r3, r2
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b87      	ldr	r3, [pc, #540]	@ (8001af0 <Set_Random_Motion_Values+0x85c>)
 80018d4:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80018d6:	f009 f8c3 	bl	800aa60 <rand>
 80018da:	4603      	mov	r3, r0
 80018dc:	17da      	asrs	r2, r3, #31
 80018de:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 80018e2:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 80018e6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80018ea:	2200      	movs	r2, #0
 80018ec:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 80018f0:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 80018f4:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	@ 0x270
 80018f8:	462b      	mov	r3, r5
 80018fa:	e9d7 899a 	ldrd	r8, r9, [r7, #616]	@ 0x268
 80018fe:	4642      	mov	r2, r8
 8001900:	fb02 f203 	mul.w	r2, r2, r3
 8001904:	464b      	mov	r3, r9
 8001906:	4621      	mov	r1, r4
 8001908:	fb01 f303 	mul.w	r3, r1, r3
 800190c:	4413      	add	r3, r2
 800190e:	4622      	mov	r2, r4
 8001910:	4641      	mov	r1, r8
 8001912:	fba2 1201 	umull	r1, r2, r2, r1
 8001916:	f8c7 239c 	str.w	r2, [r7, #924]	@ 0x39c
 800191a:	460a      	mov	r2, r1
 800191c:	f8c7 2398 	str.w	r2, [r7, #920]	@ 0x398
 8001920:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 8001924:	4413      	add	r3, r2
 8001926:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 800192a:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	@ 0x398
 800192e:	4622      	mov	r2, r4
 8001930:	462b      	mov	r3, r5
 8001932:	1891      	adds	r1, r2, r2
 8001934:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001936:	415b      	adcs	r3, r3
 8001938:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800193a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800193e:	4621      	mov	r1, r4
 8001940:	1851      	adds	r1, r2, r1
 8001942:	f8c7 1260 	str.w	r1, [r7, #608]	@ 0x260
 8001946:	4629      	mov	r1, r5
 8001948:	eb43 0101 	adc.w	r1, r3, r1
 800194c:	f8c7 1264 	str.w	r1, [r7, #612]	@ 0x264
 8001950:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001954:	f04f 0300 	mov.w	r3, #0
 8001958:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
 800195c:	f7ff f974 	bl	8000c48 <__aeabi_uldivmod>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001968:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800196c:	f143 0300 	adc.w	r3, r3, #0
 8001970:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001974:	4b5f      	ldr	r3, [pc, #380]	@ (8001af4 <Set_Random_Motion_Values+0x860>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	461a      	mov	r2, r3
 8001982:	4b5c      	ldr	r3, [pc, #368]	@ (8001af4 <Set_Random_Motion_Values+0x860>)
 8001984:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001986:	f009 f86b 	bl	800aa60 <rand>
 800198a:	4603      	mov	r3, r0
 800198c:	17da      	asrs	r2, r3, #31
 800198e:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 8001992:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 8001996:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800199a:	2200      	movs	r2, #0
 800199c:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 80019a0:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 80019a4:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	@ 0x258
 80019a8:	462b      	mov	r3, r5
 80019aa:	e9d7 8994 	ldrd	r8, r9, [r7, #592]	@ 0x250
 80019ae:	4642      	mov	r2, r8
 80019b0:	fb02 f203 	mul.w	r2, r2, r3
 80019b4:	464b      	mov	r3, r9
 80019b6:	4621      	mov	r1, r4
 80019b8:	fb01 f303 	mul.w	r3, r1, r3
 80019bc:	4413      	add	r3, r2
 80019be:	4622      	mov	r2, r4
 80019c0:	4641      	mov	r1, r8
 80019c2:	fba2 1201 	umull	r1, r2, r2, r1
 80019c6:	f8c7 2394 	str.w	r2, [r7, #916]	@ 0x394
 80019ca:	460a      	mov	r2, r1
 80019cc:	f8c7 2390 	str.w	r2, [r7, #912]	@ 0x390
 80019d0:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 80019d4:	4413      	add	r3, r2
 80019d6:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 80019da:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	@ 0x390
 80019de:	4622      	mov	r2, r4
 80019e0:	462b      	mov	r3, r5
 80019e2:	f04f 0000 	mov.w	r0, #0
 80019e6:	f04f 0100 	mov.w	r1, #0
 80019ea:	0099      	lsls	r1, r3, #2
 80019ec:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80019f0:	0090      	lsls	r0, r2, #2
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4621      	mov	r1, r4
 80019f8:	1851      	adds	r1, r2, r1
 80019fa:	f8c7 1248 	str.w	r1, [r7, #584]	@ 0x248
 80019fe:	4629      	mov	r1, r5
 8001a00:	eb43 0101 	adc.w	r1, r3, r1
 8001a04:	f8c7 124c 	str.w	r1, [r7, #588]	@ 0x24c
 8001a08:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	@ 0x248
 8001a14:	f7ff f918 	bl	8000c48 <__aeabi_uldivmod>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001a20:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001a22:	f143 0300 	adc.w	r3, r3, #0
 8001a26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001a28:	4b32      	ldr	r3, [pc, #200]	@ (8001af4 <Set_Random_Motion_Values+0x860>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a30:	4413      	add	r3, r2
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b2f      	ldr	r3, [pc, #188]	@ (8001af4 <Set_Random_Motion_Values+0x860>)
 8001a36:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001a38:	f009 f812 	bl	800aa60 <rand>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	17da      	asrs	r2, r3, #31
 8001a40:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8001a44:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 8001a48:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 8001a52:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 8001a56:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	@ 0x240
 8001a5a:	462b      	mov	r3, r5
 8001a5c:	e9d7 898e 	ldrd	r8, r9, [r7, #568]	@ 0x238
 8001a60:	4642      	mov	r2, r8
 8001a62:	fb02 f203 	mul.w	r2, r2, r3
 8001a66:	464b      	mov	r3, r9
 8001a68:	4621      	mov	r1, r4
 8001a6a:	fb01 f303 	mul.w	r3, r1, r3
 8001a6e:	4413      	add	r3, r2
 8001a70:	4622      	mov	r2, r4
 8001a72:	4641      	mov	r1, r8
 8001a74:	fba2 1201 	umull	r1, r2, r2, r1
 8001a78:	f8c7 238c 	str.w	r2, [r7, #908]	@ 0x38c
 8001a7c:	460a      	mov	r2, r1
 8001a7e:	f8c7 2388 	str.w	r2, [r7, #904]	@ 0x388
 8001a82:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 8001a86:	4413      	add	r3, r2
 8001a88:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 8001a8c:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	@ 0x388
 8001a90:	4622      	mov	r2, r4
 8001a92:	462b      	mov	r3, r5
 8001a94:	f04f 0000 	mov.w	r0, #0
 8001a98:	f04f 0100 	mov.w	r1, #0
 8001a9c:	00d9      	lsls	r1, r3, #3
 8001a9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001aa2:	00d0      	lsls	r0, r2, #3
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	1a51      	subs	r1, r2, r1
 8001aac:	f8c7 1230 	str.w	r1, [r7, #560]	@ 0x230
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ab6:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 8001aba:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 8001ac6:	f7ff f8bf 	bl	8000c48 <__aeabi_uldivmod>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001ad2:	6739      	str	r1, [r7, #112]	@ 0x70
 8001ad4:	f143 0300 	adc.w	r3, r3, #0
 8001ad8:	677b      	str	r3, [r7, #116]	@ 0x74
 8001ada:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <Set_Random_Motion_Values+0x860>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b03      	ldr	r3, [pc, #12]	@ (8001af4 <Set_Random_Motion_Values+0x860>)
 8001ae8:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }

}
 8001aea:	f000 bc37 	b.w	800235c <Set_Random_Motion_Values+0x10c8>
 8001aee:	bf00      	nop
 8001af0:	20000298 	.word	0x20000298
 8001af4:	200002a4 	.word	0x200002a4
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001af8:	f008 ffb2 	bl	800aa60 <rand>
 8001afc:	4603      	mov	r3, r0
 8001afe:	17da      	asrs	r2, r3, #31
 8001b00:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 8001b04:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 8001b08:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	469a      	mov	sl, r3
 8001b10:	4693      	mov	fp, r2
 8001b12:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8001b16:	460b      	mov	r3, r1
 8001b18:	fb0a f203 	mul.w	r2, sl, r3
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	fb03 f30b 	mul.w	r3, r3, fp
 8001b22:	4413      	add	r3, r2
 8001b24:	4602      	mov	r2, r0
 8001b26:	fba2 450a 	umull	r4, r5, r2, sl
 8001b2a:	442b      	add	r3, r5
 8001b2c:	461d      	mov	r5, r3
 8001b2e:	4622      	mov	r2, r4
 8001b30:	462b      	mov	r3, r5
 8001b32:	1891      	adds	r1, r2, r2
 8001b34:	6339      	str	r1, [r7, #48]	@ 0x30
 8001b36:	415b      	adcs	r3, r3
 8001b38:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001b3e:	1911      	adds	r1, r2, r4
 8001b40:	f8c7 1220 	str.w	r1, [r7, #544]	@ 0x220
 8001b44:	416b      	adcs	r3, r5
 8001b46:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8001b4a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 8001b56:	f7ff f877 	bl	8000c48 <__aeabi_uldivmod>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	f06f 0009 	mvn.w	r0, #9
 8001b62:	f04f 31ff 	mov.w	r1, #4294967295
 8001b66:	1a80      	subs	r0, r0, r2
 8001b68:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
 8001b6c:	eb61 0303 	sbc.w	r3, r1, r3
 8001b70:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001b74:	4beb      	ldr	r3, [pc, #940]	@ (8001f24 <Set_Random_Motion_Values+0xc90>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001b7e:	4413      	add	r3, r2
 8001b80:	461a      	mov	r2, r3
 8001b82:	4be8      	ldr	r3, [pc, #928]	@ (8001f24 <Set_Random_Motion_Values+0xc90>)
 8001b84:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001b86:	f008 ff6b 	bl	800aa60 <rand>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	17da      	asrs	r2, r3, #31
 8001b8e:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 8001b92:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 8001b96:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001ba0:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 8001ba4:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	@ 0x218
 8001ba8:	462b      	mov	r3, r5
 8001baa:	e9d7 8984 	ldrd	r8, r9, [r7, #528]	@ 0x210
 8001bae:	4642      	mov	r2, r8
 8001bb0:	fb02 f203 	mul.w	r2, r2, r3
 8001bb4:	464b      	mov	r3, r9
 8001bb6:	4621      	mov	r1, r4
 8001bb8:	fb01 f303 	mul.w	r3, r1, r3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4622      	mov	r2, r4
 8001bc0:	4641      	mov	r1, r8
 8001bc2:	fba2 1201 	umull	r1, r2, r2, r1
 8001bc6:	f8c7 2384 	str.w	r2, [r7, #900]	@ 0x384
 8001bca:	460a      	mov	r2, r1
 8001bcc:	f8c7 2380 	str.w	r2, [r7, #896]	@ 0x380
 8001bd0:	f8d7 2384 	ldr.w	r2, [r7, #900]	@ 0x384
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 8001bda:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	@ 0x380
 8001bde:	4622      	mov	r2, r4
 8001be0:	462b      	mov	r3, r5
 8001be2:	f04f 0000 	mov.w	r0, #0
 8001be6:	f04f 0100 	mov.w	r1, #0
 8001bea:	0099      	lsls	r1, r3, #2
 8001bec:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001bf0:	0090      	lsls	r0, r2, #2
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4621      	mov	r1, r4
 8001bf8:	1851      	adds	r1, r2, r1
 8001bfa:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
 8001bfe:	4629      	mov	r1, r5
 8001c00:	eb43 0101 	adc.w	r1, r3, r1
 8001c04:	f8c7 120c 	str.w	r1, [r7, #524]	@ 0x20c
 8001c08:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 8001c14:	f7ff f818 	bl	8000c48 <__aeabi_uldivmod>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	f112 010a 	adds.w	r1, r2, #10
 8001c20:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 8001c24:	f143 0300 	adc.w	r3, r3, #0
 8001c28:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001c2c:	4bbd      	ldr	r3, [pc, #756]	@ (8001f24 <Set_Random_Motion_Values+0xc90>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	461a      	mov	r2, r3
 8001c32:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001c36:	4413      	add	r3, r2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4bba      	ldr	r3, [pc, #744]	@ (8001f24 <Set_Random_Motion_Values+0xc90>)
 8001c3c:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001c3e:	f008 ff0f 	bl	800aa60 <rand>
 8001c42:	4603      	mov	r3, r0
 8001c44:	17da      	asrs	r2, r3, #31
 8001c46:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8001c4a:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 8001c4e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001c52:	2200      	movs	r2, #0
 8001c54:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 8001c58:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 8001c5c:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	@ 0x200
 8001c60:	462b      	mov	r3, r5
 8001c62:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	@ 0x1f8
 8001c66:	4642      	mov	r2, r8
 8001c68:	fb02 f203 	mul.w	r2, r2, r3
 8001c6c:	464b      	mov	r3, r9
 8001c6e:	4621      	mov	r1, r4
 8001c70:	fb01 f303 	mul.w	r3, r1, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	4622      	mov	r2, r4
 8001c78:	4641      	mov	r1, r8
 8001c7a:	fba2 1201 	umull	r1, r2, r2, r1
 8001c7e:	f8c7 237c 	str.w	r2, [r7, #892]	@ 0x37c
 8001c82:	460a      	mov	r2, r1
 8001c84:	f8c7 2378 	str.w	r2, [r7, #888]	@ 0x378
 8001c88:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 8001c92:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	@ 0x378
 8001c96:	4622      	mov	r2, r4
 8001c98:	462b      	mov	r3, r5
 8001c9a:	f04f 0000 	mov.w	r0, #0
 8001c9e:	f04f 0100 	mov.w	r1, #0
 8001ca2:	00d9      	lsls	r1, r3, #3
 8001ca4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ca8:	00d0      	lsls	r0, r2, #3
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4621      	mov	r1, r4
 8001cb0:	1a51      	subs	r1, r2, r1
 8001cb2:	f8c7 11f0 	str.w	r1, [r7, #496]	@ 0x1f0
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	eb63 0301 	sbc.w	r3, r3, r1
 8001cbc:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8001cc0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 8001ccc:	f7fe ffbc 	bl	8000c48 <__aeabi_uldivmod>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	f06f 0009 	mvn.w	r0, #9
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cdc:	1a80      	subs	r0, r0, r2
 8001cde:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
 8001ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8001ce6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001cea:	4b8e      	ldr	r3, [pc, #568]	@ (8001f24 <Set_Random_Motion_Values+0xc90>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001cf4:	4413      	add	r3, r2
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4b8a      	ldr	r3, [pc, #552]	@ (8001f24 <Set_Random_Motion_Values+0xc90>)
 8001cfa:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8001cfc:	f008 feb0 	bl	800aa60 <rand>
 8001d00:	4603      	mov	r3, r0
 8001d02:	17da      	asrs	r2, r3, #31
 8001d04:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001d08:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 8001d0c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001d10:	2200      	movs	r2, #0
 8001d12:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001d16:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8001d1a:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	@ 0x1e8
 8001d1e:	462b      	mov	r3, r5
 8001d20:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	@ 0x1e0
 8001d24:	4642      	mov	r2, r8
 8001d26:	fb02 f203 	mul.w	r2, r2, r3
 8001d2a:	464b      	mov	r3, r9
 8001d2c:	4621      	mov	r1, r4
 8001d2e:	fb01 f303 	mul.w	r3, r1, r3
 8001d32:	4413      	add	r3, r2
 8001d34:	4622      	mov	r2, r4
 8001d36:	4641      	mov	r1, r8
 8001d38:	fba2 1201 	umull	r1, r2, r2, r1
 8001d3c:	f8c7 2374 	str.w	r2, [r7, #884]	@ 0x374
 8001d40:	460a      	mov	r2, r1
 8001d42:	f8c7 2370 	str.w	r2, [r7, #880]	@ 0x370
 8001d46:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 8001d50:	e9d7 12dc 	ldrd	r1, r2, [r7, #880]	@ 0x370
 8001d54:	460b      	mov	r3, r1
 8001d56:	18db      	adds	r3, r3, r3
 8001d58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	eb42 0303 	adc.w	r3, r2, r3
 8001d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d66:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	f7fe ff6b 	bl	8000c48 <__aeabi_uldivmod>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 8001d7a:	f04f 31ff 	mov.w	r1, #4294967295
 8001d7e:	1a80      	subs	r0, r0, r2
 8001d80:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
 8001d84:	eb61 0303 	sbc.w	r3, r1, r3
 8001d88:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001d8c:	4b66      	ldr	r3, [pc, #408]	@ (8001f28 <Set_Random_Motion_Values+0xc94>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	461a      	mov	r2, r3
 8001d92:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001d96:	4413      	add	r3, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b63      	ldr	r3, [pc, #396]	@ (8001f28 <Set_Random_Motion_Values+0xc94>)
 8001d9c:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001d9e:	f008 fe5f 	bl	800aa60 <rand>
 8001da2:	4603      	mov	r3, r0
 8001da4:	17da      	asrs	r2, r3, #31
 8001da6:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8001daa:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001dae:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001db2:	2200      	movs	r2, #0
 8001db4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001db8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8001dbc:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	@ 0x1d8
 8001dc0:	462b      	mov	r3, r5
 8001dc2:	e9d7 8974 	ldrd	r8, r9, [r7, #464]	@ 0x1d0
 8001dc6:	4642      	mov	r2, r8
 8001dc8:	fb02 f203 	mul.w	r2, r2, r3
 8001dcc:	464b      	mov	r3, r9
 8001dce:	4621      	mov	r1, r4
 8001dd0:	fb01 f303 	mul.w	r3, r1, r3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4622      	mov	r2, r4
 8001dd8:	4641      	mov	r1, r8
 8001dda:	fba2 1201 	umull	r1, r2, r2, r1
 8001dde:	f8c7 236c 	str.w	r2, [r7, #876]	@ 0x36c
 8001de2:	460a      	mov	r2, r1
 8001de4:	f8c7 2368 	str.w	r2, [r7, #872]	@ 0x368
 8001de8:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 8001dec:	4413      	add	r3, r2
 8001dee:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
 8001df2:	f04f 0000 	mov.w	r0, #0
 8001df6:	f04f 0100 	mov.w	r1, #0
 8001dfa:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	@ 0x368
 8001dfe:	462b      	mov	r3, r5
 8001e00:	0099      	lsls	r1, r3, #2
 8001e02:	4623      	mov	r3, r4
 8001e04:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001e08:	4623      	mov	r3, r4
 8001e0a:	0098      	lsls	r0, r3, #2
 8001e0c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	f7fe ff18 	bl	8000c48 <__aeabi_uldivmod>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	f112 0164 	adds.w	r1, r2, #100	@ 0x64
 8001e20:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 8001e24:	f143 0300 	adc.w	r3, r3, #0
 8001e28:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001e2c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f28 <Set_Random_Motion_Values+0xc94>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	461a      	mov	r2, r3
 8001e32:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001e36:	4413      	add	r3, r2
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f28 <Set_Random_Motion_Values+0xc94>)
 8001e3c:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8001e3e:	f008 fe0f 	bl	800aa60 <rand>
 8001e42:	4603      	mov	r3, r0
 8001e44:	17da      	asrs	r2, r3, #31
 8001e46:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001e4a:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8001e4e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001e52:	2200      	movs	r2, #0
 8001e54:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001e58:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8001e5c:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	@ 0x1c8
 8001e60:	462b      	mov	r3, r5
 8001e62:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 8001e66:	4642      	mov	r2, r8
 8001e68:	fb02 f203 	mul.w	r2, r2, r3
 8001e6c:	464b      	mov	r3, r9
 8001e6e:	4621      	mov	r1, r4
 8001e70:	fb01 f303 	mul.w	r3, r1, r3
 8001e74:	4413      	add	r3, r2
 8001e76:	4622      	mov	r2, r4
 8001e78:	4641      	mov	r1, r8
 8001e7a:	fba2 1201 	umull	r1, r2, r2, r1
 8001e7e:	f8c7 2364 	str.w	r2, [r7, #868]	@ 0x364
 8001e82:	460a      	mov	r2, r1
 8001e84:	f8c7 2360 	str.w	r2, [r7, #864]	@ 0x360
 8001e88:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8001e92:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	@ 0x360
 8001e96:	4622      	mov	r2, r4
 8001e98:	462b      	mov	r3, r5
 8001e9a:	1891      	adds	r1, r2, r2
 8001e9c:	6239      	str	r1, [r7, #32]
 8001e9e:	415b      	adcs	r3, r3
 8001ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ea6:	4621      	mov	r1, r4
 8001ea8:	1851      	adds	r1, r2, r1
 8001eaa:	61b9      	str	r1, [r7, #24]
 8001eac:	4629      	mov	r1, r5
 8001eae:	eb43 0101 	adc.w	r1, r3, r1
 8001eb2:	61f9      	str	r1, [r7, #28]
 8001eb4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	18db      	adds	r3, r3, r3
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	eb42 0303 	adc.w	r3, r2, r3
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	4621      	mov	r1, r4
 8001ece:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	f7fe feb7 	bl	8000c48 <__aeabi_uldivmod>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 8001ee2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee6:	1a80      	subs	r0, r0, r2
 8001ee8:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
 8001eec:	eb61 0303 	sbc.w	r3, r1, r3
 8001ef0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <Set_Random_Motion_Values+0xc94>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001efe:	4413      	add	r3, r2
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <Set_Random_Motion_Values+0xc94>)
 8001f04:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001f06:	f008 fdab 	bl	800aa60 <rand>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	17da      	asrs	r2, r3, #31
 8001f0e:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8001f12:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001f16:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8001f20:	e004      	b.n	8001f2c <Set_Random_Motion_Values+0xc98>
 8001f22:	bf00      	nop
 8001f24:	20000280 	.word	0x20000280
 8001f28:	2000028c 	.word	0x2000028c
 8001f2c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8001f30:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	@ 0x1b8
 8001f34:	462b      	mov	r3, r5
 8001f36:	e9d7 896c 	ldrd	r8, r9, [r7, #432]	@ 0x1b0
 8001f3a:	4642      	mov	r2, r8
 8001f3c:	fb02 f203 	mul.w	r2, r2, r3
 8001f40:	464b      	mov	r3, r9
 8001f42:	4621      	mov	r1, r4
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	4622      	mov	r2, r4
 8001f4c:	4641      	mov	r1, r8
 8001f4e:	fba2 1201 	umull	r1, r2, r2, r1
 8001f52:	f8c7 235c 	str.w	r2, [r7, #860]	@ 0x35c
 8001f56:	460a      	mov	r2, r1
 8001f58:	f8c7 2358 	str.w	r2, [r7, #856]	@ 0x358
 8001f5c:	f8d7 235c 	ldr.w	r2, [r7, #860]	@ 0x35c
 8001f60:	4413      	add	r3, r2
 8001f62:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 8001f66:	e9d7 45d6 	ldrd	r4, r5, [r7, #856]	@ 0x358
 8001f6a:	4622      	mov	r2, r4
 8001f6c:	462b      	mov	r3, r5
 8001f6e:	f04f 0000 	mov.w	r0, #0
 8001f72:	f04f 0100 	mov.w	r1, #0
 8001f76:	00d9      	lsls	r1, r3, #3
 8001f78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f7c:	00d0      	lsls	r0, r2, #3
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4621      	mov	r1, r4
 8001f84:	1a51      	subs	r1, r2, r1
 8001f86:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
 8001f8a:	4629      	mov	r1, r5
 8001f8c:	eb63 0301 	sbc.w	r3, r3, r1
 8001f90:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8001f94:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 8001fa0:	f7fe fe52 	bl	8000c48 <__aeabi_uldivmod>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	f06f 0002 	mvn.w	r0, #2
 8001fac:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb0:	1a80      	subs	r0, r0, r2
 8001fb2:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
 8001fb6:	eb61 0303 	sbc.w	r3, r1, r3
 8001fba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001fbe:	4bea      	ldr	r3, [pc, #936]	@ (8002368 <Set_Random_Motion_Values+0x10d4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001fc8:	4413      	add	r3, r2
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4be6      	ldr	r3, [pc, #920]	@ (8002368 <Set_Random_Motion_Values+0x10d4>)
 8001fce:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 8001fd0:	f008 fd46 	bl	800aa60 <rand>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	17da      	asrs	r2, r3, #31
 8001fd8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001fdc:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 8001fe0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8001fea:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001fee:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	@ 0x1a0
 8001ff2:	462b      	mov	r3, r5
 8001ff4:	e9d7 8966 	ldrd	r8, r9, [r7, #408]	@ 0x198
 8001ff8:	4642      	mov	r2, r8
 8001ffa:	fb02 f203 	mul.w	r2, r2, r3
 8001ffe:	464b      	mov	r3, r9
 8002000:	4621      	mov	r1, r4
 8002002:	fb01 f303 	mul.w	r3, r1, r3
 8002006:	4413      	add	r3, r2
 8002008:	4622      	mov	r2, r4
 800200a:	4641      	mov	r1, r8
 800200c:	fba2 1201 	umull	r1, r2, r2, r1
 8002010:	f8c7 2354 	str.w	r2, [r7, #852]	@ 0x354
 8002014:	460a      	mov	r2, r1
 8002016:	f8c7 2350 	str.w	r2, [r7, #848]	@ 0x350
 800201a:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 800201e:	4413      	add	r3, r2
 8002020:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8002024:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	@ 0x350
 8002028:	4622      	mov	r2, r4
 800202a:	462b      	mov	r3, r5
 800202c:	f04f 0000 	mov.w	r0, #0
 8002030:	f04f 0100 	mov.w	r1, #0
 8002034:	00d9      	lsls	r1, r3, #3
 8002036:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800203a:	00d0      	lsls	r0, r2, #3
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4621      	mov	r1, r4
 8002042:	1851      	adds	r1, r2, r1
 8002044:	f8c7 1190 	str.w	r1, [r7, #400]	@ 0x190
 8002048:	4629      	mov	r1, r5
 800204a:	eb43 0101 	adc.w	r1, r3, r1
 800204e:	f8c7 1194 	str.w	r1, [r7, #404]	@ 0x194
 8002052:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800205e:	f7fe fdf3 	bl	8000c48 <__aeabi_uldivmod>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	1cd1      	adds	r1, r2, #3
 8002068:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 800206c:	f143 0300 	adc.w	r3, r3, #0
 8002070:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002074:	4bbc      	ldr	r3, [pc, #752]	@ (8002368 <Set_Random_Motion_Values+0x10d4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	461a      	mov	r2, r3
 800207a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800207e:	4413      	add	r3, r2
 8002080:	461a      	mov	r2, r3
 8002082:	4bb9      	ldr	r3, [pc, #740]	@ (8002368 <Set_Random_Motion_Values+0x10d4>)
 8002084:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8002086:	f008 fceb 	bl	800aa60 <rand>
 800208a:	4603      	mov	r3, r0
 800208c:	17da      	asrs	r2, r3, #31
 800208e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002092:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 8002096:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 800209a:	2200      	movs	r2, #0
 800209c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80020a0:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 80020a4:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	@ 0x188
 80020a8:	462b      	mov	r3, r5
 80020aa:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	@ 0x180
 80020ae:	4642      	mov	r2, r8
 80020b0:	fb02 f203 	mul.w	r2, r2, r3
 80020b4:	464b      	mov	r3, r9
 80020b6:	4621      	mov	r1, r4
 80020b8:	fb01 f303 	mul.w	r3, r1, r3
 80020bc:	4413      	add	r3, r2
 80020be:	4622      	mov	r2, r4
 80020c0:	4641      	mov	r1, r8
 80020c2:	fba2 1201 	umull	r1, r2, r2, r1
 80020c6:	f8c7 234c 	str.w	r2, [r7, #844]	@ 0x34c
 80020ca:	460a      	mov	r2, r1
 80020cc:	f8c7 2348 	str.w	r2, [r7, #840]	@ 0x348
 80020d0:	f8d7 234c 	ldr.w	r2, [r7, #844]	@ 0x34c
 80020d4:	4413      	add	r3, r2
 80020d6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 80020da:	e9d7 45d2 	ldrd	r4, r5, [r7, #840]	@ 0x348
 80020de:	4622      	mov	r2, r4
 80020e0:	462b      	mov	r3, r5
 80020e2:	1891      	adds	r1, r2, r2
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	415b      	adcs	r3, r3
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020ee:	4621      	mov	r1, r4
 80020f0:	1851      	adds	r1, r2, r1
 80020f2:	f8c7 1178 	str.w	r1, [r7, #376]	@ 0x178
 80020f6:	4629      	mov	r1, r5
 80020f8:	eb43 0101 	adc.w	r1, r3, r1
 80020fc:	f8c7 117c 	str.w	r1, [r7, #380]	@ 0x17c
 8002100:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 800210c:	f7fe fd9c 	bl	8000c48 <__aeabi_uldivmod>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	f06f 0002 	mvn.w	r0, #2
 8002118:	f04f 31ff 	mov.w	r1, #4294967295
 800211c:	1a80      	subs	r0, r0, r2
 800211e:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
 8002122:	eb61 0303 	sbc.w	r3, r1, r3
 8002126:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800212a:	4b8f      	ldr	r3, [pc, #572]	@ (8002368 <Set_Random_Motion_Values+0x10d4>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	461a      	mov	r2, r3
 8002130:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002134:	4413      	add	r3, r2
 8002136:	461a      	mov	r2, r3
 8002138:	4b8b      	ldr	r3, [pc, #556]	@ (8002368 <Set_Random_Motion_Values+0x10d4>)
 800213a:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 800213c:	f008 fc90 	bl	800aa60 <rand>
 8002140:	4603      	mov	r3, r0
 8002142:	17da      	asrs	r2, r3, #31
 8002144:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8002148:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 800214c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8002150:	2200      	movs	r2, #0
 8002152:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8002156:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 800215a:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	@ 0x170
 800215e:	462b      	mov	r3, r5
 8002160:	e9d7 895a 	ldrd	r8, r9, [r7, #360]	@ 0x168
 8002164:	4642      	mov	r2, r8
 8002166:	fb02 f203 	mul.w	r2, r2, r3
 800216a:	464b      	mov	r3, r9
 800216c:	4621      	mov	r1, r4
 800216e:	fb01 f303 	mul.w	r3, r1, r3
 8002172:	4413      	add	r3, r2
 8002174:	4622      	mov	r2, r4
 8002176:	4641      	mov	r1, r8
 8002178:	fba2 1201 	umull	r1, r2, r2, r1
 800217c:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 8002180:	460a      	mov	r2, r1
 8002182:	f8c7 2340 	str.w	r2, [r7, #832]	@ 0x340
 8002186:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 800218a:	4413      	add	r3, r2
 800218c:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 8002190:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	@ 0x340
 8002194:	4622      	mov	r2, r4
 8002196:	462b      	mov	r3, r5
 8002198:	f04f 0000 	mov.w	r0, #0
 800219c:	f04f 0100 	mov.w	r1, #0
 80021a0:	00d9      	lsls	r1, r3, #3
 80021a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021a6:	00d0      	lsls	r0, r2, #3
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4621      	mov	r1, r4
 80021ae:	1a51      	subs	r1, r2, r1
 80021b0:	f8c7 1160 	str.w	r1, [r7, #352]	@ 0x160
 80021b4:	4629      	mov	r1, r5
 80021b6:	eb63 0301 	sbc.w	r3, r3, r1
 80021ba:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 80021be:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 80021ca:	f7fe fd3d 	bl	8000c48 <__aeabi_uldivmod>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	f112 01c8 	adds.w	r1, r2, #200	@ 0xc8
 80021d6:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 80021da:	f143 0300 	adc.w	r3, r3, #0
 80021de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80021e2:	4b62      	ldr	r3, [pc, #392]	@ (800236c <Set_Random_Motion_Values+0x10d8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021ec:	4413      	add	r3, r2
 80021ee:	461a      	mov	r2, r3
 80021f0:	4b5e      	ldr	r3, [pc, #376]	@ (800236c <Set_Random_Motion_Values+0x10d8>)
 80021f2:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80021f4:	f008 fc34 	bl	800aa60 <rand>
 80021f8:	4603      	mov	r3, r0
 80021fa:	17da      	asrs	r2, r3, #31
 80021fc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002200:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8002204:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8002208:	2200      	movs	r2, #0
 800220a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800220e:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8002212:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 8002216:	462b      	mov	r3, r5
 8002218:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	@ 0x150
 800221c:	4642      	mov	r2, r8
 800221e:	fb02 f203 	mul.w	r2, r2, r3
 8002222:	464b      	mov	r3, r9
 8002224:	4621      	mov	r1, r4
 8002226:	fb01 f303 	mul.w	r3, r1, r3
 800222a:	4413      	add	r3, r2
 800222c:	4622      	mov	r2, r4
 800222e:	4641      	mov	r1, r8
 8002230:	fba2 1201 	umull	r1, r2, r2, r1
 8002234:	f8c7 233c 	str.w	r2, [r7, #828]	@ 0x33c
 8002238:	460a      	mov	r2, r1
 800223a:	f8c7 2338 	str.w	r2, [r7, #824]	@ 0x338
 800223e:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8002242:	4413      	add	r3, r2
 8002244:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8002248:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	@ 0x338
 800224c:	4622      	mov	r2, r4
 800224e:	462b      	mov	r3, r5
 8002250:	1891      	adds	r1, r2, r2
 8002252:	6039      	str	r1, [r7, #0]
 8002254:	415b      	adcs	r3, r3
 8002256:	607b      	str	r3, [r7, #4]
 8002258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800225c:	4621      	mov	r1, r4
 800225e:	1851      	adds	r1, r2, r1
 8002260:	f8c7 1148 	str.w	r1, [r7, #328]	@ 0x148
 8002264:	4629      	mov	r1, r5
 8002266:	eb43 0101 	adc.w	r1, r3, r1
 800226a:	f8c7 114c 	str.w	r1, [r7, #332]	@ 0x14c
 800226e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002272:	f04f 0300 	mov.w	r3, #0
 8002276:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800227a:	f7fe fce5 	bl	8000c48 <__aeabi_uldivmod>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	f112 0196 	adds.w	r1, r2, #150	@ 0x96
 8002286:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 800228a:	f143 0300 	adc.w	r3, r3, #0
 800228e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002292:	4b36      	ldr	r3, [pc, #216]	@ (800236c <Set_Random_Motion_Values+0x10d8>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	461a      	mov	r2, r3
 8002298:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	4b32      	ldr	r3, [pc, #200]	@ (800236c <Set_Random_Motion_Values+0x10d8>)
 80022a2:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80022a4:	f008 fbdc 	bl	800aa60 <rand>
 80022a8:	4603      	mov	r3, r0
 80022aa:	17da      	asrs	r2, r3, #31
 80022ac:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80022b0:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 80022b4:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 80022b8:	2200      	movs	r2, #0
 80022ba:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80022be:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 80022c2:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 80022c6:	462b      	mov	r3, r5
 80022c8:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 80022cc:	4642      	mov	r2, r8
 80022ce:	fb02 f203 	mul.w	r2, r2, r3
 80022d2:	464b      	mov	r3, r9
 80022d4:	4621      	mov	r1, r4
 80022d6:	fb01 f303 	mul.w	r3, r1, r3
 80022da:	4413      	add	r3, r2
 80022dc:	4622      	mov	r2, r4
 80022de:	4641      	mov	r1, r8
 80022e0:	fba2 1201 	umull	r1, r2, r2, r1
 80022e4:	f8c7 2334 	str.w	r2, [r7, #820]	@ 0x334
 80022e8:	460a      	mov	r2, r1
 80022ea:	f8c7 2330 	str.w	r2, [r7, #816]	@ 0x330
 80022ee:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 80022f2:	4413      	add	r3, r2
 80022f4:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 80022f8:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	@ 0x330
 80022fc:	4622      	mov	r2, r4
 80022fe:	462b      	mov	r3, r5
 8002300:	f04f 0000 	mov.w	r0, #0
 8002304:	f04f 0100 	mov.w	r1, #0
 8002308:	0099      	lsls	r1, r3, #2
 800230a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800230e:	0090      	lsls	r0, r2, #2
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4621      	mov	r1, r4
 8002316:	1851      	adds	r1, r2, r1
 8002318:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 800231c:	4629      	mov	r1, r5
 800231e:	eb43 0101 	adc.w	r1, r3, r1
 8002322:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8002326:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8002332:	f7fe fc89 	bl	8000c48 <__aeabi_uldivmod>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	f112 010a 	adds.w	r1, r2, #10
 800233e:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8002342:	f143 0300 	adc.w	r3, r3, #0
 8002346:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800234a:	4b08      	ldr	r3, [pc, #32]	@ (800236c <Set_Random_Motion_Values+0x10d8>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	461a      	mov	r2, r3
 8002350:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002354:	4413      	add	r3, r2
 8002356:	461a      	mov	r2, r3
 8002358:	4b04      	ldr	r3, [pc, #16]	@ (800236c <Set_Random_Motion_Values+0x10d8>)
 800235a:	609a      	str	r2, [r3, #8]
}
 800235c:	bf00      	nop
 800235e:	f507 777a 	add.w	r7, r7, #1000	@ 0x3e8
 8002362:	46bd      	mov	sp, r7
 8002364:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002368:	20000298 	.word	0x20000298
 800236c:	200002a4 	.word	0x200002a4

08002370 <Reset_Motion_Values>:
 * @brief  Reset values for all motion sensor data
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 8002374:	4b6e      	ldr	r3, [pc, #440]	@ (8002530 <Reset_Motion_Values+0x1c0>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b6e      	ldr	r3, [pc, #440]	@ (8002534 <Reset_Motion_Values+0x1c4>)
 800237a:	fb83 1302 	smull	r1, r3, r3, r2
 800237e:	11d9      	asrs	r1, r3, #7
 8002380:	17d3      	asrs	r3, r2, #31
 8002382:	1acb      	subs	r3, r1, r3
 8002384:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d103      	bne.n	800239a <Reset_Motion_Values+0x2a>
 8002392:	4b67      	ldr	r3, [pc, #412]	@ (8002530 <Reset_Motion_Values+0x1c0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	425b      	negs	r3, r3
 8002398:	e000      	b.n	800239c <Reset_Motion_Values+0x2c>
 800239a:	230a      	movs	r3, #10
 800239c:	4a64      	ldr	r2, [pc, #400]	@ (8002530 <Reset_Motion_Values+0x1c0>)
 800239e:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 80023a0:	4b63      	ldr	r3, [pc, #396]	@ (8002530 <Reset_Motion_Values+0x1c0>)
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	4b63      	ldr	r3, [pc, #396]	@ (8002534 <Reset_Motion_Values+0x1c4>)
 80023a6:	fb83 1302 	smull	r1, r3, r3, r2
 80023aa:	11d9      	asrs	r1, r3, #7
 80023ac:	17d3      	asrs	r3, r2, #31
 80023ae:	1acb      	subs	r3, r1, r3
 80023b0:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80023b4:	fb01 f303 	mul.w	r3, r1, r3
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d103      	bne.n	80023c6 <Reset_Motion_Values+0x56>
 80023be:	4b5c      	ldr	r3, [pc, #368]	@ (8002530 <Reset_Motion_Values+0x1c0>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	425b      	negs	r3, r3
 80023c4:	e001      	b.n	80023ca <Reset_Motion_Values+0x5a>
 80023c6:	f06f 0309 	mvn.w	r3, #9
 80023ca:	4a59      	ldr	r2, [pc, #356]	@ (8002530 <Reset_Motion_Values+0x1c0>)
 80023cc:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 80023ce:	4b58      	ldr	r3, [pc, #352]	@ (8002530 <Reset_Motion_Values+0x1c0>)
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	4b58      	ldr	r3, [pc, #352]	@ (8002534 <Reset_Motion_Values+0x1c4>)
 80023d4:	fb83 1302 	smull	r1, r3, r3, r2
 80023d8:	11d9      	asrs	r1, r3, #7
 80023da:	17d3      	asrs	r3, r2, #31
 80023dc:	1acb      	subs	r3, r1, r3
 80023de:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d103      	bne.n	80023f4 <Reset_Motion_Values+0x84>
 80023ec:	4b50      	ldr	r3, [pc, #320]	@ (8002530 <Reset_Motion_Values+0x1c0>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	425b      	negs	r3, r3
 80023f2:	e000      	b.n	80023f6 <Reset_Motion_Values+0x86>
 80023f4:	230a      	movs	r3, #10
 80023f6:	4a4e      	ldr	r2, [pc, #312]	@ (8002530 <Reset_Motion_Values+0x1c0>)
 80023f8:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 80023fa:	4b4f      	ldr	r3, [pc, #316]	@ (8002538 <Reset_Motion_Values+0x1c8>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	4b4d      	ldr	r3, [pc, #308]	@ (8002534 <Reset_Motion_Values+0x1c4>)
 8002400:	fb83 1302 	smull	r1, r3, r3, r2
 8002404:	11d9      	asrs	r1, r3, #7
 8002406:	17d3      	asrs	r3, r2, #31
 8002408:	1acb      	subs	r3, r1, r3
 800240a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d103      	bne.n	8002420 <Reset_Motion_Values+0xb0>
 8002418:	4b47      	ldr	r3, [pc, #284]	@ (8002538 <Reset_Motion_Values+0x1c8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	425b      	negs	r3, r3
 800241e:	e000      	b.n	8002422 <Reset_Motion_Values+0xb2>
 8002420:	2364      	movs	r3, #100	@ 0x64
 8002422:	4a45      	ldr	r2, [pc, #276]	@ (8002538 <Reset_Motion_Values+0x1c8>)
 8002424:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 8002426:	4b44      	ldr	r3, [pc, #272]	@ (8002538 <Reset_Motion_Values+0x1c8>)
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	4b42      	ldr	r3, [pc, #264]	@ (8002534 <Reset_Motion_Values+0x1c4>)
 800242c:	fb83 1302 	smull	r1, r3, r3, r2
 8002430:	11d9      	asrs	r1, r3, #7
 8002432:	17d3      	asrs	r3, r2, #31
 8002434:	1acb      	subs	r3, r1, r3
 8002436:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800243a:	fb01 f303 	mul.w	r3, r1, r3
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d103      	bne.n	800244c <Reset_Motion_Values+0xdc>
 8002444:	4b3c      	ldr	r3, [pc, #240]	@ (8002538 <Reset_Motion_Values+0x1c8>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	425b      	negs	r3, r3
 800244a:	e001      	b.n	8002450 <Reset_Motion_Values+0xe0>
 800244c:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8002450:	4a39      	ldr	r2, [pc, #228]	@ (8002538 <Reset_Motion_Values+0x1c8>)
 8002452:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 8002454:	4b38      	ldr	r3, [pc, #224]	@ (8002538 <Reset_Motion_Values+0x1c8>)
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	4b36      	ldr	r3, [pc, #216]	@ (8002534 <Reset_Motion_Values+0x1c4>)
 800245a:	fb83 1302 	smull	r1, r3, r3, r2
 800245e:	11d9      	asrs	r1, r3, #7
 8002460:	17d3      	asrs	r3, r2, #31
 8002462:	1acb      	subs	r3, r1, r3
 8002464:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d103      	bne.n	800247a <Reset_Motion_Values+0x10a>
 8002472:	4b31      	ldr	r3, [pc, #196]	@ (8002538 <Reset_Motion_Values+0x1c8>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	425b      	negs	r3, r3
 8002478:	e000      	b.n	800247c <Reset_Motion_Values+0x10c>
 800247a:	2364      	movs	r3, #100	@ 0x64
 800247c:	4a2e      	ldr	r2, [pc, #184]	@ (8002538 <Reset_Motion_Values+0x1c8>)
 800247e:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 8002480:	4b2d      	ldr	r3, [pc, #180]	@ (8002538 <Reset_Motion_Values+0x1c8>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b2b      	ldr	r3, [pc, #172]	@ (8002534 <Reset_Motion_Values+0x1c4>)
 8002486:	fb83 1302 	smull	r1, r3, r3, r2
 800248a:	11d9      	asrs	r1, r3, #7
 800248c:	17d3      	asrs	r3, r2, #31
 800248e:	1acb      	subs	r3, r1, r3
 8002490:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002494:	fb01 f303 	mul.w	r3, r1, r3
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d103      	bne.n	80024a6 <Reset_Motion_Values+0x136>
 800249e:	4b27      	ldr	r3, [pc, #156]	@ (800253c <Reset_Motion_Values+0x1cc>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	425b      	negs	r3, r3
 80024a4:	e000      	b.n	80024a8 <Reset_Motion_Values+0x138>
 80024a6:	2303      	movs	r3, #3
 80024a8:	4a24      	ldr	r2, [pc, #144]	@ (800253c <Reset_Motion_Values+0x1cc>)
 80024aa:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 80024ac:	4b22      	ldr	r3, [pc, #136]	@ (8002538 <Reset_Motion_Values+0x1c8>)
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	4b20      	ldr	r3, [pc, #128]	@ (8002534 <Reset_Motion_Values+0x1c4>)
 80024b2:	fb83 1302 	smull	r1, r3, r3, r2
 80024b6:	11d9      	asrs	r1, r3, #7
 80024b8:	17d3      	asrs	r3, r2, #31
 80024ba:	1acb      	subs	r3, r1, r3
 80024bc:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80024c0:	fb01 f303 	mul.w	r3, r1, r3
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d103      	bne.n	80024d2 <Reset_Motion_Values+0x162>
 80024ca:	4b1c      	ldr	r3, [pc, #112]	@ (800253c <Reset_Motion_Values+0x1cc>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	425b      	negs	r3, r3
 80024d0:	e001      	b.n	80024d6 <Reset_Motion_Values+0x166>
 80024d2:	f06f 0302 	mvn.w	r3, #2
 80024d6:	4a19      	ldr	r2, [pc, #100]	@ (800253c <Reset_Motion_Values+0x1cc>)
 80024d8:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 80024da:	4b17      	ldr	r3, [pc, #92]	@ (8002538 <Reset_Motion_Values+0x1c8>)
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	4b15      	ldr	r3, [pc, #84]	@ (8002534 <Reset_Motion_Values+0x1c4>)
 80024e0:	fb83 1302 	smull	r1, r3, r3, r2
 80024e4:	11d9      	asrs	r1, r3, #7
 80024e6:	17d3      	asrs	r3, r2, #31
 80024e8:	1acb      	subs	r3, r1, r3
 80024ea:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d103      	bne.n	8002500 <Reset_Motion_Values+0x190>
 80024f8:	4b10      	ldr	r3, [pc, #64]	@ (800253c <Reset_Motion_Values+0x1cc>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	425b      	negs	r3, r3
 80024fe:	e000      	b.n	8002502 <Reset_Motion_Values+0x192>
 8002500:	2303      	movs	r3, #3
 8002502:	4a0e      	ldr	r2, [pc, #56]	@ (800253c <Reset_Motion_Values+0x1cc>)
 8002504:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 8002506:	4b0e      	ldr	r3, [pc, #56]	@ (8002540 <Reset_Motion_Values+0x1d0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	425b      	negs	r3, r3
 800250c:	4a0c      	ldr	r2, [pc, #48]	@ (8002540 <Reset_Motion_Values+0x1d0>)
 800250e:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 8002510:	4b0b      	ldr	r3, [pc, #44]	@ (8002540 <Reset_Motion_Values+0x1d0>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	425b      	negs	r3, r3
 8002516:	4a0a      	ldr	r2, [pc, #40]	@ (8002540 <Reset_Motion_Values+0x1d0>)
 8002518:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 800251a:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <Reset_Motion_Values+0x1d0>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	425b      	negs	r3, r3
 8002520:	4a07      	ldr	r2, [pc, #28]	@ (8002540 <Reset_Motion_Values+0x1d0>)
 8002522:	6093      	str	r3, [r2, #8]
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20000280 	.word	0x20000280
 8002534:	10624dd3 	.word	0x10624dd3
 8002538:	2000028c 	.word	0x2000028c
 800253c:	20000298 	.word	0x20000298
 8002540:	200002a4 	.word	0x200002a4

08002544 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 800254e:	4b04      	ldr	r3, [pc, #16]	@ (8002560 <BSP_PB_Callback+0x1c>)
 8002550:	2201      	movs	r2, #1
 8002552:	701a      	strb	r2, [r3, #0]
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	20000246 	.word	0x20000246

08002564 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8002564:	b590      	push	{r4, r7, lr}
 8002566:	b08d      	sub	sp, #52	@ 0x34
 8002568:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 800256a:	231b      	movs	r3, #27
 800256c:	713b      	strb	r3, [r7, #4]
 800256e:	23c5      	movs	r3, #197	@ 0xc5
 8002570:	717b      	strb	r3, [r7, #5]
 8002572:	23d5      	movs	r3, #213	@ 0xd5
 8002574:	71bb      	strb	r3, [r7, #6]
 8002576:	23a5      	movs	r3, #165	@ 0xa5
 8002578:	71fb      	strb	r3, [r7, #7]
 800257a:	2302      	movs	r3, #2
 800257c:	723b      	strb	r3, [r7, #8]
 800257e:	2300      	movs	r3, #0
 8002580:	727b      	strb	r3, [r7, #9]
 8002582:	23b4      	movs	r3, #180	@ 0xb4
 8002584:	72bb      	strb	r3, [r7, #10]
 8002586:	239a      	movs	r3, #154	@ 0x9a
 8002588:	72fb      	strb	r3, [r7, #11]
 800258a:	23e1      	movs	r3, #225	@ 0xe1
 800258c:	733b      	strb	r3, [r7, #12]
 800258e:	2311      	movs	r3, #17
 8002590:	737b      	strb	r3, [r7, #13]
 8002592:	2301      	movs	r3, #1
 8002594:	73bb      	strb	r3, [r7, #14]
 8002596:	2300      	movs	r3, #0
 8002598:	73fb      	strb	r3, [r7, #15]
 800259a:	2300      	movs	r3, #0
 800259c:	743b      	strb	r3, [r7, #16]
 800259e:	2300      	movs	r3, #0
 80025a0:	747b      	strb	r3, [r7, #17]
 80025a2:	2300      	movs	r3, #0
 80025a4:	74bb      	strb	r3, [r7, #18]
 80025a6:	2300      	movs	r3, #0
 80025a8:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80025aa:	4b52      	ldr	r3, [pc, #328]	@ (80026f4 <Add_HWServW2ST_Service+0x190>)
 80025ac:	461c      	mov	r4, r3
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 80025b6:	4b50      	ldr	r3, [pc, #320]	@ (80026f8 <Add_HWServW2ST_Service+0x194>)
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	2310      	movs	r3, #16
 80025bc:	2201      	movs	r2, #1
 80025be:	494d      	ldr	r1, [pc, #308]	@ (80026f4 <Add_HWServW2ST_Service+0x190>)
 80025c0:	2002      	movs	r0, #2
 80025c2:	f007 faf3 	bl	8009bac <aci_gatt_add_serv>
 80025c6:	4603      	mov	r3, r0
 80025c8:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80025ca:	7dfb      	ldrb	r3, [r7, #23]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <Add_HWServW2ST_Service+0x70>
    return BLE_STATUS_ERROR;
 80025d0:	2347      	movs	r3, #71	@ 0x47
 80025d2:	e08a      	b.n	80026ea <Add_HWServW2ST_Service+0x186>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 80025d4:	231b      	movs	r3, #27
 80025d6:	713b      	strb	r3, [r7, #4]
 80025d8:	23c5      	movs	r3, #197	@ 0xc5
 80025da:	717b      	strb	r3, [r7, #5]
 80025dc:	23d5      	movs	r3, #213	@ 0xd5
 80025de:	71bb      	strb	r3, [r7, #6]
 80025e0:	23a5      	movs	r3, #165	@ 0xa5
 80025e2:	71fb      	strb	r3, [r7, #7]
 80025e4:	2302      	movs	r3, #2
 80025e6:	723b      	strb	r3, [r7, #8]
 80025e8:	2300      	movs	r3, #0
 80025ea:	727b      	strb	r3, [r7, #9]
 80025ec:	2336      	movs	r3, #54	@ 0x36
 80025ee:	72bb      	strb	r3, [r7, #10]
 80025f0:	23ac      	movs	r3, #172	@ 0xac
 80025f2:	72fb      	strb	r3, [r7, #11]
 80025f4:	23e1      	movs	r3, #225	@ 0xe1
 80025f6:	733b      	strb	r3, [r7, #12]
 80025f8:	2311      	movs	r3, #17
 80025fa:	737b      	strb	r3, [r7, #13]
 80025fc:	2301      	movs	r3, #1
 80025fe:	73bb      	strb	r3, [r7, #14]
 8002600:	2300      	movs	r3, #0
 8002602:	73fb      	strb	r3, [r7, #15]
 8002604:	2300      	movs	r3, #0
 8002606:	743b      	strb	r3, [r7, #16]
 8002608:	2300      	movs	r3, #0
 800260a:	747b      	strb	r3, [r7, #17]
 800260c:	2300      	movs	r3, #0
 800260e:	74bb      	strb	r3, [r7, #18]
 8002610:	2300      	movs	r3, #0
 8002612:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 8002614:	7cbb      	ldrb	r3, [r7, #18]
 8002616:	f043 0304 	orr.w	r3, r3, #4
 800261a:	b2db      	uxtb	r3, r3
 800261c:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 800261e:	7cbb      	ldrb	r3, [r7, #18]
 8002620:	f043 0310 	orr.w	r3, r3, #16
 8002624:	b2db      	uxtb	r3, r3
 8002626:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002628:	4b34      	ldr	r3, [pc, #208]	@ (80026fc <Add_HWServW2ST_Service+0x198>)
 800262a:	461c      	mov	r4, r3
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002630:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8002634:	4b30      	ldr	r3, [pc, #192]	@ (80026f8 <Add_HWServW2ST_Service+0x194>)
 8002636:	8818      	ldrh	r0, [r3, #0]
 8002638:	4b31      	ldr	r3, [pc, #196]	@ (8002700 <Add_HWServW2ST_Service+0x19c>)
 800263a:	9305      	str	r3, [sp, #20]
 800263c:	2300      	movs	r3, #0
 800263e:	9304      	str	r3, [sp, #16]
 8002640:	2310      	movs	r3, #16
 8002642:	9303      	str	r3, [sp, #12]
 8002644:	2304      	movs	r3, #4
 8002646:	9302      	str	r3, [sp, #8]
 8002648:	2300      	movs	r3, #0
 800264a:	9301      	str	r3, [sp, #4]
 800264c:	2312      	movs	r3, #18
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	2308      	movs	r3, #8
 8002652:	4a2a      	ldr	r2, [pc, #168]	@ (80026fc <Add_HWServW2ST_Service+0x198>)
 8002654:	2102      	movs	r1, #2
 8002656:	f007 fb32 	bl	8009cbe <aci_gatt_add_char>
 800265a:	4603      	mov	r3, r0
 800265c:	75fb      	strb	r3, [r7, #23]
                           2+2+4,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800265e:	7dfb      	ldrb	r3, [r7, #23]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <Add_HWServW2ST_Service+0x104>
    return BLE_STATUS_ERROR;
 8002664:	2347      	movs	r3, #71	@ 0x47
 8002666:	e040      	b.n	80026ea <Add_HWServW2ST_Service+0x186>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8002668:	231b      	movs	r3, #27
 800266a:	713b      	strb	r3, [r7, #4]
 800266c:	23c5      	movs	r3, #197	@ 0xc5
 800266e:	717b      	strb	r3, [r7, #5]
 8002670:	23d5      	movs	r3, #213	@ 0xd5
 8002672:	71bb      	strb	r3, [r7, #6]
 8002674:	23a5      	movs	r3, #165	@ 0xa5
 8002676:	71fb      	strb	r3, [r7, #7]
 8002678:	2302      	movs	r3, #2
 800267a:	723b      	strb	r3, [r7, #8]
 800267c:	2300      	movs	r3, #0
 800267e:	727b      	strb	r3, [r7, #9]
 8002680:	2336      	movs	r3, #54	@ 0x36
 8002682:	72bb      	strb	r3, [r7, #10]
 8002684:	23ac      	movs	r3, #172	@ 0xac
 8002686:	72fb      	strb	r3, [r7, #11]
 8002688:	23e1      	movs	r3, #225	@ 0xe1
 800268a:	733b      	strb	r3, [r7, #12]
 800268c:	2311      	movs	r3, #17
 800268e:	737b      	strb	r3, [r7, #13]
 8002690:	2301      	movs	r3, #1
 8002692:	73bb      	strb	r3, [r7, #14]
 8002694:	2300      	movs	r3, #0
 8002696:	73fb      	strb	r3, [r7, #15]
 8002698:	2300      	movs	r3, #0
 800269a:	743b      	strb	r3, [r7, #16]
 800269c:	2300      	movs	r3, #0
 800269e:	747b      	strb	r3, [r7, #17]
 80026a0:	23e0      	movs	r3, #224	@ 0xe0
 80026a2:	74bb      	strb	r3, [r7, #18]
 80026a4:	2300      	movs	r3, #0
 80026a6:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80026a8:	4b14      	ldr	r3, [pc, #80]	@ (80026fc <Add_HWServW2ST_Service+0x198>)
 80026aa:	461c      	mov	r4, r3
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 80026b4:	4b10      	ldr	r3, [pc, #64]	@ (80026f8 <Add_HWServW2ST_Service+0x194>)
 80026b6:	8818      	ldrh	r0, [r3, #0]
 80026b8:	4b12      	ldr	r3, [pc, #72]	@ (8002704 <Add_HWServW2ST_Service+0x1a0>)
 80026ba:	9305      	str	r3, [sp, #20]
 80026bc:	2300      	movs	r3, #0
 80026be:	9304      	str	r3, [sp, #16]
 80026c0:	2310      	movs	r3, #16
 80026c2:	9303      	str	r3, [sp, #12]
 80026c4:	2304      	movs	r3, #4
 80026c6:	9302      	str	r3, [sp, #8]
 80026c8:	2300      	movs	r3, #0
 80026ca:	9301      	str	r3, [sp, #4]
 80026cc:	2310      	movs	r3, #16
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	2314      	movs	r3, #20
 80026d2:	4a0a      	ldr	r2, [pc, #40]	@ (80026fc <Add_HWServW2ST_Service+0x198>)
 80026d4:	2102      	movs	r1, #2
 80026d6:	f007 faf2 	bl	8009cbe <aci_gatt_add_char>
 80026da:	4603      	mov	r3, r0
 80026dc:	75fb      	strb	r3, [r7, #23]
                           2+3*3*2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80026de:	7dfb      	ldrb	r3, [r7, #23]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <Add_HWServW2ST_Service+0x184>
    return BLE_STATUS_ERROR;
 80026e4:	2347      	movs	r3, #71	@ 0x47
 80026e6:	e000      	b.n	80026ea <Add_HWServW2ST_Service+0x186>

  return BLE_STATUS_SUCCESS;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	371c      	adds	r7, #28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd90      	pop	{r4, r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000258 	.word	0x20000258
 80026f8:	2000024c 	.word	0x2000024c
 80026fc:	20000268 	.word	0x20000268
 8002700:	2000024e 	.word	0x2000024e
 8002704:	20000250 	.word	0x20000250

08002708 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b08d      	sub	sp, #52	@ 0x34
 800270c:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberOfRecords=1;
 800270e:	2301      	movs	r3, #1
 8002710:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 8002712:	231b      	movs	r3, #27
 8002714:	703b      	strb	r3, [r7, #0]
 8002716:	23c5      	movs	r3, #197	@ 0xc5
 8002718:	707b      	strb	r3, [r7, #1]
 800271a:	23d5      	movs	r3, #213	@ 0xd5
 800271c:	70bb      	strb	r3, [r7, #2]
 800271e:	23a5      	movs	r3, #165	@ 0xa5
 8002720:	70fb      	strb	r3, [r7, #3]
 8002722:	2302      	movs	r3, #2
 8002724:	713b      	strb	r3, [r7, #4]
 8002726:	2300      	movs	r3, #0
 8002728:	717b      	strb	r3, [r7, #5]
 800272a:	23b4      	movs	r3, #180	@ 0xb4
 800272c:	71bb      	strb	r3, [r7, #6]
 800272e:	239a      	movs	r3, #154	@ 0x9a
 8002730:	71fb      	strb	r3, [r7, #7]
 8002732:	23e1      	movs	r3, #225	@ 0xe1
 8002734:	723b      	strb	r3, [r7, #8]
 8002736:	2311      	movs	r3, #17
 8002738:	727b      	strb	r3, [r7, #9]
 800273a:	2302      	movs	r3, #2
 800273c:	72bb      	strb	r3, [r7, #10]
 800273e:	2300      	movs	r3, #0
 8002740:	72fb      	strb	r3, [r7, #11]
 8002742:	2300      	movs	r3, #0
 8002744:	733b      	strb	r3, [r7, #12]
 8002746:	2300      	movs	r3, #0
 8002748:	737b      	strb	r3, [r7, #13]
 800274a:	2300      	movs	r3, #0
 800274c:	73bb      	strb	r3, [r7, #14]
 800274e:	2300      	movs	r3, #0
 8002750:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8002752:	4b31      	ldr	r3, [pc, #196]	@ (8002818 <Add_SWServW2ST_Service+0x110>)
 8002754:	461c      	mov	r4, r3
 8002756:	463b      	mov	r3, r7
 8002758:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800275a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	461a      	mov	r2, r3
 8002764:	0052      	lsls	r2, r2, #1
 8002766:	4413      	add	r3, r2
 8002768:	b2db      	uxtb	r3, r3
 800276a:	3301      	adds	r3, #1
 800276c:	b2db      	uxtb	r3, r3
 800276e:	4a2b      	ldr	r2, [pc, #172]	@ (800281c <Add_SWServW2ST_Service+0x114>)
 8002770:	9200      	str	r2, [sp, #0]
 8002772:	2201      	movs	r2, #1
 8002774:	4928      	ldr	r1, [pc, #160]	@ (8002818 <Add_SWServW2ST_Service+0x110>)
 8002776:	2002      	movs	r0, #2
 8002778:	f007 fa18 	bl	8009bac <aci_gatt_add_serv>
 800277c:	4603      	mov	r3, r0
 800277e:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8002780:	7cfb      	ldrb	r3, [r7, #19]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d13f      	bne.n	8002806 <Add_SWServW2ST_Service+0xfe>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 8002786:	231b      	movs	r3, #27
 8002788:	703b      	strb	r3, [r7, #0]
 800278a:	23c5      	movs	r3, #197	@ 0xc5
 800278c:	707b      	strb	r3, [r7, #1]
 800278e:	23d5      	movs	r3, #213	@ 0xd5
 8002790:	70bb      	strb	r3, [r7, #2]
 8002792:	23a5      	movs	r3, #165	@ 0xa5
 8002794:	70fb      	strb	r3, [r7, #3]
 8002796:	2302      	movs	r3, #2
 8002798:	713b      	strb	r3, [r7, #4]
 800279a:	2300      	movs	r3, #0
 800279c:	717b      	strb	r3, [r7, #5]
 800279e:	2336      	movs	r3, #54	@ 0x36
 80027a0:	71bb      	strb	r3, [r7, #6]
 80027a2:	23ac      	movs	r3, #172	@ 0xac
 80027a4:	71fb      	strb	r3, [r7, #7]
 80027a6:	23e1      	movs	r3, #225	@ 0xe1
 80027a8:	723b      	strb	r3, [r7, #8]
 80027aa:	2311      	movs	r3, #17
 80027ac:	727b      	strb	r3, [r7, #9]
 80027ae:	2301      	movs	r3, #1
 80027b0:	72bb      	strb	r3, [r7, #10]
 80027b2:	2300      	movs	r3, #0
 80027b4:	72fb      	strb	r3, [r7, #11]
 80027b6:	2300      	movs	r3, #0
 80027b8:	733b      	strb	r3, [r7, #12]
 80027ba:	2301      	movs	r3, #1
 80027bc:	737b      	strb	r3, [r7, #13]
 80027be:	2300      	movs	r3, #0
 80027c0:	73bb      	strb	r3, [r7, #14]
 80027c2:	2300      	movs	r3, #0
 80027c4:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80027c6:	4b16      	ldr	r3, [pc, #88]	@ (8002820 <Add_SWServW2ST_Service+0x118>)
 80027c8:	461c      	mov	r4, r3
 80027ca:	463b      	mov	r3, r7
 80027cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 80027d2:	4b12      	ldr	r3, [pc, #72]	@ (800281c <Add_SWServW2ST_Service+0x114>)
 80027d4:	8818      	ldrh	r0, [r3, #0]
 80027d6:	4b13      	ldr	r3, [pc, #76]	@ (8002824 <Add_SWServW2ST_Service+0x11c>)
 80027d8:	9305      	str	r3, [sp, #20]
 80027da:	2300      	movs	r3, #0
 80027dc:	9304      	str	r3, [sp, #16]
 80027de:	2310      	movs	r3, #16
 80027e0:	9303      	str	r3, [sp, #12]
 80027e2:	2304      	movs	r3, #4
 80027e4:	9302      	str	r3, [sp, #8]
 80027e6:	2300      	movs	r3, #0
 80027e8:	9301      	str	r3, [sp, #4]
 80027ea:	2310      	movs	r3, #16
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	2308      	movs	r3, #8
 80027f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002820 <Add_SWServW2ST_Service+0x118>)
 80027f2:	2102      	movs	r1, #2
 80027f4:	f007 fa63 	bl	8009cbe <aci_gatt_add_char>
 80027f8:	4603      	mov	r3, r0
 80027fa:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 80027fc:	7cfb      	ldrb	r3, [r7, #19]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d103      	bne.n	800280a <Add_SWServW2ST_Service+0x102>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 8002802:	2300      	movs	r3, #0
 8002804:	e003      	b.n	800280e <Add_SWServW2ST_Service+0x106>
    goto fail;
 8002806:	bf00      	nop
 8002808:	e000      	b.n	800280c <Add_SWServW2ST_Service+0x104>
    goto fail;
 800280a:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 800280c:	2347      	movs	r3, #71	@ 0x47
}
 800280e:	4618      	mov	r0, r3
 8002810:	371c      	adds	r7, #28
 8002812:	46bd      	mov	sp, r7
 8002814:	bd90      	pop	{r4, r7, pc}
 8002816:	bf00      	nop
 8002818:	20000258 	.word	0x20000258
 800281c:	20000252 	.word	0x20000252
 8002820:	20000268 	.word	0x20000268
 8002824:	20000254 	.word	0x20000254

08002828 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08c      	sub	sp, #48	@ 0x30
 800282c:	af02      	add	r7, sp, #8
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002834:	f002 f98e 	bl	8004b54 <HAL_GetTick>
 8002838:	4603      	mov	r3, r0
 800283a:	08db      	lsrs	r3, r3, #3
 800283c:	b2db      	uxtb	r3, r3
 800283e:	743b      	strb	r3, [r7, #16]
 8002840:	f002 f988 	bl	8004b54 <HAL_GetTick>
 8002844:	4603      	mov	r3, r0
 8002846:	0adb      	lsrs	r3, r3, #11
 8002848:	b2db      	uxtb	r3, r3
 800284a:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	425b      	negs	r3, r3
 8002854:	b2db      	uxtb	r3, r3
 8002856:	74bb      	strb	r3, [r7, #18]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	425b      	negs	r3, r3
 800285e:	121b      	asrs	r3, r3, #8
 8002860:	b2db      	uxtb	r3, r3
 8002862:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	753b      	strb	r3, [r7, #20]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	121b      	asrs	r3, r3, #8
 8002872:	b2db      	uxtb	r3, r3
 8002874:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	425b      	negs	r3, r3
 800287e:	b2db      	uxtb	r3, r3
 8002880:	75bb      	strb	r3, [r7, #22]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	425b      	negs	r3, r3
 8002888:	121b      	asrs	r3, r3, #8
 800288a:	b2db      	uxtb	r3, r3
 800288c:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	b2db      	uxtb	r3, r3
 8002894:	763b      	strb	r3, [r7, #24]
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	121b      	asrs	r3, r3, #8
 800289c:	b2db      	uxtb	r3, r3
 800289e:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	76bb      	strb	r3, [r7, #26]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	121b      	asrs	r3, r3, #8
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	773b      	strb	r3, [r7, #28]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	121b      	asrs	r3, r3, #8
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	77bb      	strb	r3, [r7, #30]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	121b      	asrs	r3, r3, #8
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	f887 3020 	strb.w	r3, [r7, #32]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	121b      	asrs	r3, r3, #8
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	121b      	asrs	r3, r3, #8
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 8002902:	4b0c      	ldr	r3, [pc, #48]	@ (8002934 <Acc_Update+0x10c>)
 8002904:	8818      	ldrh	r0, [r3, #0]
 8002906:	4b0c      	ldr	r3, [pc, #48]	@ (8002938 <Acc_Update+0x110>)
 8002908:	8819      	ldrh	r1, [r3, #0]
 800290a:	f107 0310 	add.w	r3, r7, #16
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	2314      	movs	r3, #20
 8002912:	2200      	movs	r2, #0
 8002914:	f007 fa9e 	bl	8009e54 <aci_gatt_update_char_value>
 8002918:	4603      	mov	r3, r0
 800291a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 800291e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <Acc_Update+0x102>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8002926:	2347      	movs	r3, #71	@ 0x47
 8002928:	e000      	b.n	800292c <Acc_Update+0x104>
  }

  return BLE_STATUS_SUCCESS;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3728      	adds	r7, #40	@ 0x28
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	2000024c 	.word	0x2000024c
 8002938:	20000250 	.word	0x20000250

0800293c <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af02      	add	r7, sp, #8
 8002942:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002944:	f002 f906 	bl	8004b54 <HAL_GetTick>
 8002948:	4603      	mov	r3, r0
 800294a:	08db      	lsrs	r3, r3, #3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	733b      	strb	r3, [r7, #12]
 8002950:	f002 f900 	bl	8004b54 <HAL_GetTick>
 8002954:	4603      	mov	r3, r0
 8002956:	0adb      	lsrs	r3, r3, #11
 8002958:	b2db      	uxtb	r3, r3
 800295a:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	73bb      	strb	r3, [r7, #14]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	121b      	asrs	r3, r3, #8
 800296a:	b2db      	uxtb	r3, r3
 800296c:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	743b      	strb	r3, [r7, #16]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	121b      	asrs	r3, r3, #8
 800297c:	b2db      	uxtb	r3, r3
 800297e:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	74bb      	strb	r3, [r7, #18]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	121b      	asrs	r3, r3, #8
 800298e:	b2db      	uxtb	r3, r3
 8002990:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif

  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 8002992:	4b0b      	ldr	r3, [pc, #44]	@ (80029c0 <Quat_Update+0x84>)
 8002994:	8818      	ldrh	r0, [r3, #0]
 8002996:	4b0b      	ldr	r3, [pc, #44]	@ (80029c4 <Quat_Update+0x88>)
 8002998:	8819      	ldrh	r1, [r3, #0]
 800299a:	f107 030c 	add.w	r3, r7, #12
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	2308      	movs	r3, #8
 80029a2:	2200      	movs	r2, #0
 80029a4:	f007 fa56 	bl	8009e54 <aci_gatt_update_char_value>
 80029a8:	4603      	mov	r3, r0
 80029aa:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 80029ac:	7dfb      	ldrb	r3, [r7, #23]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <Quat_Update+0x7a>
    PRINTF("Error while updating Sensor Fusion characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 80029b2:	2347      	movs	r3, #71	@ 0x47
 80029b4:	e000      	b.n	80029b8 <Quat_Update+0x7c>
  }

  return BLE_STATUS_SUCCESS;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20000252 	.word	0x20000252
 80029c4:	20000254 	.word	0x20000254

080029c8 <Read_Request_CB>:
* Description    : Update the sensor values.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 80029c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029cc:	b08e      	sub	sp, #56	@ 0x38
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	4603      	mov	r3, r0
 80029d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 80029d4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80029d6:	4b57      	ldr	r3, [pc, #348]	@ (8002b34 <Read_Request_CB+0x16c>)
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	3301      	adds	r3, #1
 80029dc:	429a      	cmp	r2, r3
 80029de:	d105      	bne.n	80029ec <Read_Request_CB+0x24>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 80029e0:	4a55      	ldr	r2, [pc, #340]	@ (8002b38 <Read_Request_CB+0x170>)
 80029e2:	4956      	ldr	r1, [pc, #344]	@ (8002b3c <Read_Request_CB+0x174>)
 80029e4:	4856      	ldr	r0, [pc, #344]	@ (8002b40 <Read_Request_CB+0x178>)
 80029e6:	f7ff ff1f 	bl	8002828 <Acc_Update>
 80029ea:	e091      	b.n	8002b10 <Read_Request_CB+0x148>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 80029ec:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80029ee:	4b55      	ldr	r3, [pc, #340]	@ (8002b44 <Read_Request_CB+0x17c>)
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	3301      	adds	r3, #1
 80029f4:	429a      	cmp	r2, r3
 80029f6:	f040 808b 	bne.w	8002b10 <Read_Request_CB+0x148>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 80029fa:	f008 f831 	bl	800aa60 <rand>
 80029fe:	4603      	mov	r3, r0
 8002a00:	17da      	asrs	r2, r3, #31
 8002a02:	61bb      	str	r3, [r7, #24]
 8002a04:	61fa      	str	r2, [r7, #28]
 8002a06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a0a:	f04f 0000 	mov.w	r0, #0
 8002a0e:	f04f 0100 	mov.w	r1, #0
 8002a12:	0099      	lsls	r1, r3, #2
 8002a14:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002a18:	0090      	lsls	r0, r2, #2
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	69b9      	ldr	r1, [r7, #24]
 8002a20:	1851      	adds	r1, r2, r1
 8002a22:	6139      	str	r1, [r7, #16]
 8002a24:	69f9      	ldr	r1, [r7, #28]
 8002a26:	eb43 0101 	adc.w	r1, r3, r1
 8002a2a:	6179      	str	r1, [r7, #20]
 8002a2c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a38:	f7fe f906 	bl	8000c48 <__aeabi_uldivmod>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4610      	mov	r0, r2
 8002a42:	4619      	mov	r1, r3
 8002a44:	f7fd fda2 	bl	800058c <__aeabi_ul2d>
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	4b3e      	ldr	r3, [pc, #248]	@ (8002b48 <Read_Request_CB+0x180>)
 8002a4e:	f7fd fc1d 	bl	800028c <__adddf3>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4610      	mov	r0, r2
 8002a58:	4619      	mov	r1, r3
 8002a5a:	f7fe f8a5 	bl	8000ba8 <__aeabi_d2f>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	637b      	str	r3, [r7, #52]	@ 0x34
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 8002a62:	f007 fffd 	bl	800aa60 <rand>
 8002a66:	4603      	mov	r3, r0
 8002a68:	17da      	asrs	r2, r3, #31
 8002a6a:	4698      	mov	r8, r3
 8002a6c:	4691      	mov	r9, r2
 8002a6e:	4642      	mov	r2, r8
 8002a70:	464b      	mov	r3, r9
 8002a72:	1891      	adds	r1, r2, r2
 8002a74:	6039      	str	r1, [r7, #0]
 8002a76:	415b      	adcs	r3, r3
 8002a78:	607b      	str	r3, [r7, #4]
 8002a7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a7e:	eb12 0408 	adds.w	r4, r2, r8
 8002a82:	eb43 0509 	adc.w	r5, r3, r9
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	016b      	lsls	r3, r5, #5
 8002a90:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002a94:	0162      	lsls	r2, r4, #5
 8002a96:	eb14 0a02 	adds.w	sl, r4, r2
 8002a9a:	eb45 0b03 	adc.w	fp, r5, r3
 8002a9e:	eb1a 0308 	adds.w	r3, sl, r8
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	eb4b 0309 	adc.w	r3, fp, r9
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ab6:	f7fe f8c7 	bl	8000c48 <__aeabi_uldivmod>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f7fd fd63 	bl	800058c <__aeabi_ul2d>
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	4b20      	ldr	r3, [pc, #128]	@ (8002b4c <Read_Request_CB+0x184>)
 8002acc:	f7fd fbde 	bl	800028c <__adddf3>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f7fe f866 	bl	8000ba8 <__aeabi_d2f>
 8002adc:	4603      	mov	r3, r0
 8002ade:	633b      	str	r3, [r7, #48]	@ 0x30
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8002ae0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002ae4:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002b50 <Read_Request_CB+0x188>
 8002ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aec:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8002af0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002af4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002af8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002afc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b00:	ee17 3a90 	vmov	r3, s15
 8002b04:	b21b      	sxth	r3, r3
 8002b06:	4619      	mov	r1, r3
 8002b08:	ee16 0a90 	vmov	r0, s13
 8002b0c:	f000 f824 	bl	8002b58 <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 8002b10:	4b10      	ldr	r3, [pc, #64]	@ (8002b54 <Read_Request_CB+0x18c>)
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d007      	beq.n	8002b28 <Read_Request_CB+0x160>
  {
    ret = aci_gatt_allow_read(connection_handle);
 8002b18:	4b0e      	ldr	r3, [pc, #56]	@ (8002b54 <Read_Request_CB+0x18c>)
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f007 fa29 	bl	8009f74 <aci_gatt_allow_read>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (ret != BLE_STATUS_SUCCESS)
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
    }
  }
}
 8002b28:	bf00      	nop
 8002b2a:	3738      	adds	r7, #56	@ 0x38
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b32:	bf00      	nop
 8002b34:	20000250 	.word	0x20000250
 8002b38:	20000298 	.word	0x20000298
 8002b3c:	2000028c 	.word	0x2000028c
 8002b40:	20000280 	.word	0x20000280
 8002b44:	2000024e 	.word	0x2000024e
 8002b48:	403b0000 	.word	0x403b0000
 8002b4c:	408f4000 	.word	0x408f4000
 8002b50:	42c80000 	.word	0x42c80000
 8002b54:	20000278 	.word	0x20000278

08002b58 <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 8002b64:	f001 fff6 	bl	8004b54 <HAL_GetTick>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	08db      	lsrs	r3, r3, #3
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	733b      	strb	r3, [r7, #12]
 8002b70:	f001 fff0 	bl	8004b54 <HAL_GetTick>
 8002b74:	4603      	mov	r3, r0
 8002b76:	0adb      	lsrs	r3, r3, #11
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	73bb      	strb	r3, [r7, #14]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	121b      	asrs	r3, r3, #8
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	73fb      	strb	r3, [r7, #15]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	141b      	asrs	r3, r3, #16
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	743b      	strb	r3, [r7, #16]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	161b      	asrs	r3, r3, #24
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 8002b9a:	887b      	ldrh	r3, [r7, #2]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	74bb      	strb	r3, [r7, #18]
 8002ba0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ba4:	121b      	asrs	r3, r3, #8
 8002ba6:	b21b      	sxth	r3, r3
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 8002bac:	4b0b      	ldr	r3, [pc, #44]	@ (8002bdc <BlueMS_Environmental_Update+0x84>)
 8002bae:	8818      	ldrh	r0, [r3, #0]
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <BlueMS_Environmental_Update+0x88>)
 8002bb2:	8819      	ldrh	r1, [r3, #0]
 8002bb4:	f107 030c 	add.w	r3, r7, #12
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	2308      	movs	r3, #8
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f007 f949 	bl	8009e54 <aci_gatt_update_char_value>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 8002bc6:	7dfb      	ldrb	r3, [r7, #23]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <BlueMS_Environmental_Update+0x78>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8002bcc:	2347      	movs	r3, #71	@ 0x47
 8002bce:	e000      	b.n	8002bd2 <BlueMS_Environmental_Update+0x7a>
  }

  return BLE_STATUS_SUCCESS;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	2000024c 	.word	0x2000024c
 8002be0:	2000024e 	.word	0x2000024e

08002be4 <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b092      	sub	sp, #72	@ 0x48
 8002be8:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 8002bea:	4a36      	ldr	r2, [pc, #216]	@ (8002cc4 <Set_DeviceConnectable+0xe0>)
 8002bec:	f107 031c 	add.w	r3, r7, #28
 8002bf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bf4:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	703b      	strb	r3, [r7, #0]
 8002bfc:	230a      	movs	r3, #10
 8002bfe:	707b      	strb	r3, [r7, #1]
 8002c00:	2300      	movs	r3, #0
 8002c02:	70bb      	strb	r3, [r7, #2]
 8002c04:	2308      	movs	r3, #8
 8002c06:	70fb      	strb	r3, [r7, #3]
 8002c08:	2309      	movs	r3, #9
 8002c0a:	713b      	strb	r3, [r7, #4]
 8002c0c:	2342      	movs	r3, #66	@ 0x42
 8002c0e:	717b      	strb	r3, [r7, #5]
 8002c10:	236c      	movs	r3, #108	@ 0x6c
 8002c12:	71bb      	strb	r3, [r7, #6]
 8002c14:	2375      	movs	r3, #117	@ 0x75
 8002c16:	71fb      	strb	r3, [r7, #7]
 8002c18:	2365      	movs	r3, #101	@ 0x65
 8002c1a:	723b      	strb	r3, [r7, #8]
 8002c1c:	234e      	movs	r3, #78	@ 0x4e
 8002c1e:	727b      	strb	r3, [r7, #9]
 8002c20:	2352      	movs	r3, #82	@ 0x52
 8002c22:	72bb      	strb	r3, [r7, #10]
 8002c24:	2347      	movs	r3, #71	@ 0x47
 8002c26:	72fb      	strb	r3, [r7, #11]
 8002c28:	230d      	movs	r3, #13
 8002c2a:	733b      	strb	r3, [r7, #12]
 8002c2c:	23ff      	movs	r3, #255	@ 0xff
 8002c2e:	737b      	strb	r3, [r7, #13]
 8002c30:	2301      	movs	r3, #1
 8002c32:	73bb      	strb	r3, [r7, #14]
 8002c34:	2380      	movs	r3, #128	@ 0x80
 8002c36:	73fb      	strb	r3, [r7, #15]
 8002c38:	2300      	movs	r3, #0
 8002c3a:	743b      	strb	r3, [r7, #16]
 8002c3c:	23f4      	movs	r3, #244	@ 0xf4
 8002c3e:	747b      	strb	r3, [r7, #17]
 8002c40:	2300      	movs	r3, #0
 8002c42:	74bb      	strb	r3, [r7, #18]
 8002c44:	2300      	movs	r3, #0
 8002c46:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 8002c48:	4b1f      	ldr	r3, [pc, #124]	@ (8002cc8 <Set_DeviceConnectable+0xe4>)
 8002c4a:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 8002c4c:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc8 <Set_DeviceConnectable+0xe4>)
 8002c50:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 8002c52:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 8002c54:	4b1c      	ldr	r3, [pc, #112]	@ (8002cc8 <Set_DeviceConnectable+0xe4>)
 8002c56:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 8002c58:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 8002c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc8 <Set_DeviceConnectable+0xe4>)
 8002c5c:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 8002c5e:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 8002c60:	4b19      	ldr	r3, [pc, #100]	@ (8002cc8 <Set_DeviceConnectable+0xe4>)
 8002c62:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 8002c64:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 8002c66:	4b18      	ldr	r3, [pc, #96]	@ (8002cc8 <Set_DeviceConnectable+0xe4>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 8002c6a:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 8002c6c:	7cbb      	ldrb	r3, [r7, #18]
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 8002c76:	2100      	movs	r1, #0
 8002c78:	2000      	movs	r0, #0
 8002c7a:	f007 fade 	bl	800a23a <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 8002c7e:	2300      	movs	r3, #0
 8002c80:	9306      	str	r3, [sp, #24]
 8002c82:	2300      	movs	r3, #0
 8002c84:	9305      	str	r3, [sp, #20]
 8002c86:	2300      	movs	r3, #0
 8002c88:	9304      	str	r3, [sp, #16]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	9303      	str	r3, [sp, #12]
 8002c8e:	f107 031c 	add.w	r3, r7, #28
 8002c92:	9302      	str	r3, [sp, #8]
 8002c94:	2308      	movs	r3, #8
 8002c96:	9301      	str	r3, [sp, #4]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 8002ca2:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f006 fdcb 	bl	8009842 <aci_gap_set_discoverable>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 8002cb2:	463b      	mov	r3, r7
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	201a      	movs	r0, #26
 8002cb8:	f006 ff04 	bl	8009ac4 <aci_gap_update_adv_data>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 8002cbc:	bf00      	nop
 8002cbe:	3728      	adds	r7, #40	@ 0x28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	0800d420 	.word	0x0800d420
 8002cc8:	20000240 	.word	0x20000240

08002ccc <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	61fb      	str	r3, [r7, #28]
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type != HCI_EVENT_PKT)
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d139      	bne.n	8002d5a <user_notify+0x8e>
    return;

  switch(event_pckt->evt){
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2bff      	cmp	r3, #255	@ 0xff
 8002cec:	d01f      	beq.n	8002d2e <user_notify+0x62>
 8002cee:	2bff      	cmp	r3, #255	@ 0xff
 8002cf0:	dc38      	bgt.n	8002d64 <user_notify+0x98>
 8002cf2:	2b05      	cmp	r3, #5
 8002cf4:	d002      	beq.n	8002cfc <user_notify+0x30>
 8002cf6:	2b3e      	cmp	r3, #62	@ 0x3e
 8002cf8:	d003      	beq.n	8002d02 <user_notify+0x36>
 8002cfa:	e033      	b.n	8002d64 <user_notify+0x98>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8002cfc:	f000 f836 	bl	8002d6c <GAP_DisconnectionComplete_CB>
    }
    break;
 8002d00:	e030      	b.n	8002d64 <user_notify+0x98>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	3302      	adds	r3, #2
 8002d06:	60fb      	str	r3, [r7, #12]

      switch(evt->subevent){
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d126      	bne.n	8002d5e <user_notify+0x92>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	3301      	adds	r3, #1
 8002d14:	60bb      	str	r3, [r7, #8]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	1d5a      	adds	r2, r3, #5
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	4619      	mov	r1, r3
 8002d24:	4610      	mov	r0, r2
 8002d26:	f000 f837 	bl	8002d98 <GAP_ConnectionComplete_CB>
        }
        break;
 8002d2a:	bf00      	nop
      }
    }
    break;
 8002d2c:	e017      	b.n	8002d5e <user_notify+0x92>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	3302      	adds	r3, #2
 8002d32:	617b      	str	r3, [r7, #20]
      switch(blue_evt->ecode){
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	881b      	ldrh	r3, [r3, #0]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f640 4314 	movw	r3, #3092	@ 0xc14
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d10e      	bne.n	8002d62 <user_notify+0x96>

      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	3302      	adds	r3, #2
 8002d48:	613b      	str	r3, [r7, #16]
          Read_Request_CB(pr->attr_handle);
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	885b      	ldrh	r3, [r3, #2]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff fe39 	bl	80029c8 <Read_Request_CB>
        }
        break;
 8002d56:	bf00      	nop
      }

    }
    break;
 8002d58:	e003      	b.n	8002d62 <user_notify+0x96>
    return;
 8002d5a:	bf00      	nop
 8002d5c:	e002      	b.n	8002d64 <user_notify+0x98>
    break;
 8002d5e:	bf00      	nop
 8002d60:	e000      	b.n	8002d64 <user_notify+0x98>
    break;
 8002d62:	bf00      	nop
  }
}
 8002d64:	3720      	adds	r7, #32
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  connected = FALSE;
 8002d70:	4b06      	ldr	r3, [pc, #24]	@ (8002d8c <GAP_DisconnectionComplete_CB+0x20>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8002d76:	4b06      	ldr	r3, [pc, #24]	@ (8002d90 <GAP_DisconnectionComplete_CB+0x24>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8002d7c:	4b05      	ldr	r3, [pc, #20]	@ (8002d94 <GAP_DisconnectionComplete_CB+0x28>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]
}
 8002d82:	bf00      	nop
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	2000027c 	.word	0x2000027c
 8002d90:	20000001 	.word	0x20000001
 8002d94:	2000027a 	.word	0x2000027a

08002d98 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8002da4:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd0 <GAP_ConnectionComplete_CB+0x38>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8002daa:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd4 <GAP_ConnectionComplete_CB+0x3c>)
 8002dac:	887b      	ldrh	r3, [r7, #2]
 8002dae:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
  for(uint32_t i = 5; i > 0; i--){
 8002db0:	2305      	movs	r3, #5
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	e002      	b.n	8002dbc <GAP_ConnectionComplete_CB+0x24>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	3b01      	subs	r3, #1
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f9      	bne.n	8002db6 <GAP_ConnectionComplete_CB+0x1e>
    PRINTF("%02X-", addr[i]);
  }
  PRINTF("%02X\n", addr[0]);
}
 8002dc2:	bf00      	nop
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	2000027c 	.word	0x2000027c
 8002dd4:	20000278 	.word	0x20000278

08002dd8 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de0:	4b1f      	ldr	r3, [pc, #124]	@ (8002e60 <HCI_TL_SPI_Init+0x88>)
 8002de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de4:	4a1e      	ldr	r2, [pc, #120]	@ (8002e60 <HCI_TL_SPI_Init+0x88>)
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dec:	4b1c      	ldr	r3, [pc, #112]	@ (8002e60 <HCI_TL_SPI_Init+0x88>)
 8002dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8002df8:	2340      	movs	r3, #64	@ 0x40
 8002dfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002dfc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002e00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8002e06:	f107 030c 	add.w	r3, r7, #12
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4815      	ldr	r0, [pc, #84]	@ (8002e64 <HCI_TL_SPI_Init+0x8c>)
 8002e0e:	f002 f94d 	bl	80050ac <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8002e12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e20:	2300      	movs	r3, #0
 8002e22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8002e24:	f107 030c 	add.w	r3, r7, #12
 8002e28:	4619      	mov	r1, r3
 8002e2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e2e:	f002 f93d 	bl	80050ac <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8002e32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e40:	2300      	movs	r3, #0
 8002e42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8002e44:	f107 030c 	add.w	r3, r7, #12
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4807      	ldr	r0, [pc, #28]	@ (8002e68 <HCI_TL_SPI_Init+0x90>)
 8002e4c:	f002 f92e 	bl	80050ac <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 8002e50:	f001 fbaa 	bl	80045a8 <BSP_SPI3_Init>
 8002e54:	4603      	mov	r3, r0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3720      	adds	r7, #32
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40021000 	.word	0x40021000
 8002e64:	48001000 	.word	0x48001000
 8002e68:	48000c00 	.word	0x48000c00

08002e6c <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8002e70:	2140      	movs	r1, #64	@ 0x40
 8002e72:	4808      	ldr	r0, [pc, #32]	@ (8002e94 <HCI_TL_SPI_DeInit+0x28>)
 8002e74:	f002 fac4 	bl	8005400 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8002e78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002e7c:	4806      	ldr	r0, [pc, #24]	@ (8002e98 <HCI_TL_SPI_DeInit+0x2c>)
 8002e7e:	f002 fabf 	bl	8005400 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8002e82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e8a:	f002 fab9 	bl	8005400 <HAL_GPIO_DeInit>
  return 0;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	48001000 	.word	0x48001000
 8002e98:	48000c00 	.word	0x48000c00

08002e9c <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002ea6:	480d      	ldr	r0, [pc, #52]	@ (8002edc <HCI_TL_SPI_Reset+0x40>)
 8002ea8:	f002 fbb6 	bl	8005618 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8002eac:	2200      	movs	r2, #0
 8002eae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002eb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002eb6:	f002 fbaf 	bl	8005618 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8002eba:	2005      	movs	r0, #5
 8002ebc:	f001 fe56 	bl	8004b6c <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ec6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002eca:	f002 fba5 	bl	8005618 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8002ece:	2005      	movs	r0, #5
 8002ed0:	f001 fe4c 	bl	8004b6c <HAL_Delay>
  return 0;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	48000c00 	.word	0x48000c00

08002ee0 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8002eec:	2300      	movs	r3, #0
 8002eee:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8002ef0:	23ff      	movs	r3, #255	@ 0xff
 8002ef2:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8002ef4:	4a26      	ldr	r2, [pc, #152]	@ (8002f90 <HCI_TL_SPI_Receive+0xb0>)
 8002ef6:	f107 0314 	add.w	r3, r7, #20
 8002efa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002efe:	6018      	str	r0, [r3, #0]
 8002f00:	3304      	adds	r3, #4
 8002f02:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8002f04:	2200      	movs	r2, #0
 8002f06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f0a:	4822      	ldr	r0, [pc, #136]	@ (8002f94 <HCI_TL_SPI_Receive+0xb4>)
 8002f0c:	f002 fb84 	bl	8005618 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8002f10:	f107 010c 	add.w	r1, r7, #12
 8002f14:	f107 0314 	add.w	r3, r7, #20
 8002f18:	2205      	movs	r2, #5
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f001 fb74 	bl	8004608 <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 8002f20:	7b3b      	ldrb	r3, [r7, #12]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d129      	bne.n	8002f7a <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8002f26:	7c3b      	ldrb	r3, [r7, #16]
 8002f28:	021b      	lsls	r3, r3, #8
 8002f2a:	b21a      	sxth	r2, r3
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	b21b      	sxth	r3, r3
 8002f30:	4313      	orrs	r3, r2
 8002f32:	b21b      	sxth	r3, r3
 8002f34:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8002f36:	8bfb      	ldrh	r3, [r7, #30]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d01e      	beq.n	8002f7a <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8002f3c:	8bfa      	ldrh	r2, [r7, #30]
 8002f3e:	887b      	ldrh	r3, [r7, #2]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d901      	bls.n	8002f48 <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 8002f44:	887b      	ldrh	r3, [r7, #2]
 8002f46:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8002f48:	2300      	movs	r3, #0
 8002f4a:	777b      	strb	r3, [r7, #29]
 8002f4c:	e010      	b.n	8002f70 <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8002f4e:	f107 011b 	add.w	r1, r7, #27
 8002f52:	f107 031c 	add.w	r3, r7, #28
 8002f56:	2201      	movs	r2, #1
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f001 fb55 	bl	8004608 <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 8002f5e:	7f7b      	ldrb	r3, [r7, #29]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	4413      	add	r3, r2
 8002f64:	7efa      	ldrb	r2, [r7, #27]
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8002f6a:	7f7b      	ldrb	r3, [r7, #29]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	777b      	strb	r3, [r7, #29]
 8002f70:	7f7b      	ldrb	r3, [r7, #29]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	8bfa      	ldrh	r2, [r7, #30]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d8e9      	bhi.n	8002f4e <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f80:	4804      	ldr	r0, [pc, #16]	@ (8002f94 <HCI_TL_SPI_Receive+0xb4>)
 8002f82:	f002 fb49 	bl	8005618 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8002f86:	7f7b      	ldrb	r3, [r7, #29]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3720      	adds	r7, #32
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	0800d428 	.word	0x0800d428
 8002f94:	48000c00 	.word	0x48000c00

08002f98 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b088      	sub	sp, #32
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8002fa4:	4a24      	ldr	r2, [pc, #144]	@ (8003038 <HCI_TL_SPI_Send+0xa0>)
 8002fa6:	f107 0310 	add.w	r3, r7, #16
 8002faa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fae:	6018      	str	r0, [r3, #0]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8002fb4:	f001 fdce 	bl	8004b54 <HAL_GetTick>
 8002fb8:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002fc4:	481d      	ldr	r0, [pc, #116]	@ (800303c <HCI_TL_SPI_Send+0xa4>)
 8002fc6:	f002 fb27 	bl	8005618 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8002fca:	f107 0108 	add.w	r1, r7, #8
 8002fce:	f107 0310 	add.w	r3, r7, #16
 8002fd2:	2205      	movs	r2, #5
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f001 fb17 	bl	8004608 <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 8002fda:	7a3b      	ldrb	r3, [r7, #8]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d10f      	bne.n	8003000 <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8002fe0:	7a7b      	ldrb	r3, [r7, #9]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	887b      	ldrh	r3, [r7, #2]
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d806      	bhi.n	8002ff8 <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 8002fea:	887b      	ldrh	r3, [r7, #2]
 8002fec:	461a      	mov	r2, r3
 8002fee:	4914      	ldr	r1, [pc, #80]	@ (8003040 <HCI_TL_SPI_Send+0xa8>)
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f001 fb09 	bl	8004608 <BSP_SPI3_SendRecv>
 8002ff6:	e006      	b.n	8003006 <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8002ff8:	f06f 0301 	mvn.w	r3, #1
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	e002      	b.n	8003006 <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8003000:	f04f 33ff 	mov.w	r3, #4294967295
 8003004:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8003006:	2201      	movs	r2, #1
 8003008:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800300c:	480b      	ldr	r0, [pc, #44]	@ (800303c <HCI_TL_SPI_Send+0xa4>)
 800300e:	f002 fb03 	bl	8005618 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8003012:	f001 fd9f 	bl	8004b54 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b0f      	cmp	r3, #15
 800301e:	d903      	bls.n	8003028 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 8003020:	f06f 0302 	mvn.w	r3, #2
 8003024:	61fb      	str	r3, [r7, #28]
      break;
 8003026:	e002      	b.n	800302e <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	2b00      	cmp	r3, #0
 800302c:	dbc5      	blt.n	8002fba <HCI_TL_SPI_Send+0x22>

  return result;
 800302e:	69fb      	ldr	r3, [r7, #28]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3720      	adds	r7, #32
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	0800d430 	.word	0x0800d430
 800303c:	48000c00 	.word	0x48000c00
 8003040:	200002b8 	.word	0x200002b8

08003044 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8003048:	2140      	movs	r1, #64	@ 0x40
 800304a:	4805      	ldr	r0, [pc, #20]	@ (8003060 <IsDataAvailable+0x1c>)
 800304c:	f002 facc 	bl	80055e8 <HAL_GPIO_ReadPin>
 8003050:	4603      	mov	r3, r0
 8003052:	2b01      	cmp	r3, #1
 8003054:	bf0c      	ite	eq
 8003056:	2301      	moveq	r3, #1
 8003058:	2300      	movne	r3, #0
 800305a:	b2db      	uxtb	r3, r3
}
 800305c:	4618      	mov	r0, r3
 800305e:	bd80      	pop	{r7, pc}
 8003060:	48001000 	.word	0x48001000

08003064 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800306a:	4b12      	ldr	r3, [pc, #72]	@ (80030b4 <hci_tl_lowlevel_init+0x50>)
 800306c:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800306e:	4b12      	ldr	r3, [pc, #72]	@ (80030b8 <hci_tl_lowlevel_init+0x54>)
 8003070:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8003072:	4b12      	ldr	r3, [pc, #72]	@ (80030bc <hci_tl_lowlevel_init+0x58>)
 8003074:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8003076:	4b12      	ldr	r3, [pc, #72]	@ (80030c0 <hci_tl_lowlevel_init+0x5c>)
 8003078:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 800307a:	4b12      	ldr	r3, [pc, #72]	@ (80030c4 <hci_tl_lowlevel_init+0x60>)
 800307c:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800307e:	4b12      	ldr	r3, [pc, #72]	@ (80030c8 <hci_tl_lowlevel_init+0x64>)
 8003080:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8003082:	1d3b      	adds	r3, r7, #4
 8003084:	4618      	mov	r0, r3
 8003086:	f007 f9f5 	bl	800a474 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 800308a:	4910      	ldr	r1, [pc, #64]	@ (80030cc <hci_tl_lowlevel_init+0x68>)
 800308c:	4810      	ldr	r0, [pc, #64]	@ (80030d0 <hci_tl_lowlevel_init+0x6c>)
 800308e:	f001 ffc9 	bl	8005024 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8003092:	4a10      	ldr	r2, [pc, #64]	@ (80030d4 <hci_tl_lowlevel_init+0x70>)
 8003094:	2100      	movs	r1, #0
 8003096:	480e      	ldr	r0, [pc, #56]	@ (80030d0 <hci_tl_lowlevel_init+0x6c>)
 8003098:	f001 ffaa 	bl	8004ff0 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800309c:	2200      	movs	r2, #0
 800309e:	2100      	movs	r1, #0
 80030a0:	2017      	movs	r0, #23
 80030a2:	f001 fe62 	bl	8004d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80030a6:	2017      	movs	r0, #23
 80030a8:	f001 fe7b 	bl	8004da2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80030ac:	bf00      	nop
 80030ae:	3720      	adds	r7, #32
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	08002dd9 	.word	0x08002dd9
 80030b8:	08002e6d 	.word	0x08002e6d
 80030bc:	08002f99 	.word	0x08002f99
 80030c0:	08002ee1 	.word	0x08002ee1
 80030c4:	08002e9d 	.word	0x08002e9d
 80030c8:	08004649 	.word	0x08004649
 80030cc:	16000006 	.word	0x16000006
 80030d0:	200002b0 	.word	0x200002b0
 80030d4:	080030d9 	.word	0x080030d9

080030d8 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80030dc:	e005      	b.n	80030ea <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80030de:	2000      	movs	r0, #0
 80030e0:	f007 fb2c 	bl	800a73c <hci_notify_asynch_evt>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d105      	bne.n	80030f6 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80030ea:	f7ff ffab 	bl	8003044 <IsDataAvailable>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1f4      	bne.n	80030de <hci_tl_lowlevel_isr+0x6>
 80030f4:	e000      	b.n	80030f8 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80030f6:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003100:	b088      	sub	sp, #32
 8003102:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003104:	f001 fcbe 	bl	8004a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003108:	f000 f84c 	bl	80031a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800310c:	f000 f9a6 	bl	800345c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8003110:	f000 f8aa 	bl	8003268 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8003114:	f000 f8e0 	bl	80032d8 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8003118:	f000 f91c 	bl	8003354 <MX_QUADSPI_Init>
  MX_USART3_UART_Init();
 800311c:	f000 f940 	bl	80033a0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003120:	f000 f96e 	bl	8003400 <MX_USB_OTG_FS_PCD_Init>
  MX_BlueNRG_MS_Init();
 8003124:	f7fd ff08 	bl	8000f38 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */
  BSP_GYRO_Init();
 8003128:	f001 fb30 	bl	800478c <BSP_GYRO_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  MX_BlueNRG_MS_Process();
 800312c:	f7fd ffb0 	bl	8001090 <MX_BlueNRG_MS_Process>
		/* USER CODE BEGIN 3 */
	  float pData[3];
	  BSP_GYRO_GetXYZ(pData);
 8003130:	1d3b      	adds	r3, r7, #4
 8003132:	4618      	mov	r0, r3
 8003134:	f001 fb6c 	bl	8004810 <BSP_GYRO_GetXYZ>
	  printf("(%.2f, %.2f, %.2f)\r\n", pData[0]/1000, pData[1]/1000, pData[2]/1000);
 8003138:	edd7 7a01 	vldr	s15, [r7, #4]
 800313c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800319c <main+0xa0>
 8003140:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003144:	ee16 0a90 	vmov	r0, s13
 8003148:	f7fd f9fe 	bl	8000548 <__aeabi_f2d>
 800314c:	4680      	mov	r8, r0
 800314e:	4689      	mov	r9, r1
 8003150:	edd7 7a02 	vldr	s15, [r7, #8]
 8003154:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800319c <main+0xa0>
 8003158:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800315c:	ee16 0a90 	vmov	r0, s13
 8003160:	f7fd f9f2 	bl	8000548 <__aeabi_f2d>
 8003164:	4604      	mov	r4, r0
 8003166:	460d      	mov	r5, r1
 8003168:	edd7 7a03 	vldr	s15, [r7, #12]
 800316c:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800319c <main+0xa0>
 8003170:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003174:	ee16 0a90 	vmov	r0, s13
 8003178:	f7fd f9e6 	bl	8000548 <__aeabi_f2d>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003184:	e9cd 4500 	strd	r4, r5, [sp]
 8003188:	4642      	mov	r2, r8
 800318a:	464b      	mov	r3, r9
 800318c:	4804      	ldr	r0, [pc, #16]	@ (80031a0 <main+0xa4>)
 800318e:	f008 f9bf 	bl	800b510 <iprintf>
	  HAL_Delay(200);
 8003192:	20c8      	movs	r0, #200	@ 0xc8
 8003194:	f001 fcea 	bl	8004b6c <HAL_Delay>
  {
 8003198:	bf00      	nop
 800319a:	e7c7      	b.n	800312c <main+0x30>
 800319c:	447a0000 	.word	0x447a0000
 80031a0:	0800d438 	.word	0x0800d438

080031a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b096      	sub	sp, #88	@ 0x58
 80031a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031aa:	f107 0314 	add.w	r3, r7, #20
 80031ae:	2244      	movs	r2, #68	@ 0x44
 80031b0:	2100      	movs	r1, #0
 80031b2:	4618      	mov	r0, r3
 80031b4:	f008 fa01 	bl	800b5ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031b8:	463b      	mov	r3, r7
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	605a      	str	r2, [r3, #4]
 80031c0:	609a      	str	r2, [r3, #8]
 80031c2:	60da      	str	r2, [r3, #12]
 80031c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80031c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80031ca:	f003 fa1d 	bl	8006608 <HAL_PWREx_ControlVoltageScaling>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80031d4:	f000 fae4 	bl	80037a0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80031d8:	f003 f9f8 	bl	80065cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80031dc:	4b21      	ldr	r3, [pc, #132]	@ (8003264 <SystemClock_Config+0xc0>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e2:	4a20      	ldr	r2, [pc, #128]	@ (8003264 <SystemClock_Config+0xc0>)
 80031e4:	f023 0318 	bic.w	r3, r3, #24
 80031e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80031ec:	2314      	movs	r3, #20
 80031ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80031f0:	2301      	movs	r3, #1
 80031f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80031f4:	2301      	movs	r3, #1
 80031f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80031fc:	2360      	movs	r3, #96	@ 0x60
 80031fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003200:	2302      	movs	r3, #2
 8003202:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003204:	2301      	movs	r3, #1
 8003206:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003208:	2301      	movs	r3, #1
 800320a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800320c:	2328      	movs	r3, #40	@ 0x28
 800320e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003210:	2307      	movs	r3, #7
 8003212:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003214:	2302      	movs	r3, #2
 8003216:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003218:	2302      	movs	r3, #2
 800321a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800321c:	f107 0314 	add.w	r3, r7, #20
 8003220:	4618      	mov	r0, r3
 8003222:	f003 fb13 	bl	800684c <HAL_RCC_OscConfig>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800322c:	f000 fab8 	bl	80037a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003230:	230f      	movs	r3, #15
 8003232:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003234:	2303      	movs	r3, #3
 8003236:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003238:	2300      	movs	r3, #0
 800323a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003240:	2300      	movs	r3, #0
 8003242:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003244:	463b      	mov	r3, r7
 8003246:	2104      	movs	r1, #4
 8003248:	4618      	mov	r0, r3
 800324a:	f003 fedb 	bl	8007004 <HAL_RCC_ClockConfig>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003254:	f000 faa4 	bl	80037a0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003258:	f004 fbe2 	bl	8007a20 <HAL_RCCEx_EnableMSIPLLMode>
}
 800325c:	bf00      	nop
 800325e:	3758      	adds	r7, #88	@ 0x58
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40021000 	.word	0x40021000

08003268 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800326c:	4b18      	ldr	r3, [pc, #96]	@ (80032d0 <MX_DFSDM1_Init+0x68>)
 800326e:	4a19      	ldr	r2, [pc, #100]	@ (80032d4 <MX_DFSDM1_Init+0x6c>)
 8003270:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8003272:	4b17      	ldr	r3, [pc, #92]	@ (80032d0 <MX_DFSDM1_Init+0x68>)
 8003274:	2201      	movs	r2, #1
 8003276:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8003278:	4b15      	ldr	r3, [pc, #84]	@ (80032d0 <MX_DFSDM1_Init+0x68>)
 800327a:	2200      	movs	r2, #0
 800327c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800327e:	4b14      	ldr	r3, [pc, #80]	@ (80032d0 <MX_DFSDM1_Init+0x68>)
 8003280:	2202      	movs	r2, #2
 8003282:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8003284:	4b12      	ldr	r3, [pc, #72]	@ (80032d0 <MX_DFSDM1_Init+0x68>)
 8003286:	2200      	movs	r2, #0
 8003288:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800328a:	4b11      	ldr	r3, [pc, #68]	@ (80032d0 <MX_DFSDM1_Init+0x68>)
 800328c:	2200      	movs	r2, #0
 800328e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8003290:	4b0f      	ldr	r3, [pc, #60]	@ (80032d0 <MX_DFSDM1_Init+0x68>)
 8003292:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003296:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8003298:	4b0d      	ldr	r3, [pc, #52]	@ (80032d0 <MX_DFSDM1_Init+0x68>)
 800329a:	2200      	movs	r2, #0
 800329c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800329e:	4b0c      	ldr	r3, [pc, #48]	@ (80032d0 <MX_DFSDM1_Init+0x68>)
 80032a0:	2204      	movs	r2, #4
 80032a2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80032a4:	4b0a      	ldr	r3, [pc, #40]	@ (80032d0 <MX_DFSDM1_Init+0x68>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80032aa:	4b09      	ldr	r3, [pc, #36]	@ (80032d0 <MX_DFSDM1_Init+0x68>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80032b0:	4b07      	ldr	r3, [pc, #28]	@ (80032d0 <MX_DFSDM1_Init+0x68>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80032b6:	4b06      	ldr	r3, [pc, #24]	@ (80032d0 <MX_DFSDM1_Init+0x68>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80032bc:	4804      	ldr	r0, [pc, #16]	@ (80032d0 <MX_DFSDM1_Init+0x68>)
 80032be:	f001 fd8b 	bl	8004dd8 <HAL_DFSDM_ChannelInit>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80032c8:	f000 fa6a 	bl	80037a0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80032cc:	bf00      	nop
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	200003b8 	.word	0x200003b8
 80032d4:	40016020 	.word	0x40016020

080032d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80032dc:	4b1b      	ldr	r3, [pc, #108]	@ (800334c <MX_I2C2_Init+0x74>)
 80032de:	4a1c      	ldr	r2, [pc, #112]	@ (8003350 <MX_I2C2_Init+0x78>)
 80032e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80032e2:	4b1a      	ldr	r3, [pc, #104]	@ (800334c <MX_I2C2_Init+0x74>)
 80032e4:	f640 6214 	movw	r2, #3604	@ 0xe14
 80032e8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80032ea:	4b18      	ldr	r3, [pc, #96]	@ (800334c <MX_I2C2_Init+0x74>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032f0:	4b16      	ldr	r3, [pc, #88]	@ (800334c <MX_I2C2_Init+0x74>)
 80032f2:	2201      	movs	r2, #1
 80032f4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032f6:	4b15      	ldr	r3, [pc, #84]	@ (800334c <MX_I2C2_Init+0x74>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80032fc:	4b13      	ldr	r3, [pc, #76]	@ (800334c <MX_I2C2_Init+0x74>)
 80032fe:	2200      	movs	r2, #0
 8003300:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003302:	4b12      	ldr	r3, [pc, #72]	@ (800334c <MX_I2C2_Init+0x74>)
 8003304:	2200      	movs	r2, #0
 8003306:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003308:	4b10      	ldr	r3, [pc, #64]	@ (800334c <MX_I2C2_Init+0x74>)
 800330a:	2200      	movs	r2, #0
 800330c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800330e:	4b0f      	ldr	r3, [pc, #60]	@ (800334c <MX_I2C2_Init+0x74>)
 8003310:	2200      	movs	r2, #0
 8003312:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003314:	480d      	ldr	r0, [pc, #52]	@ (800334c <MX_I2C2_Init+0x74>)
 8003316:	f002 f9d4 	bl	80056c2 <HAL_I2C_Init>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003320:	f000 fa3e 	bl	80037a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003324:	2100      	movs	r1, #0
 8003326:	4809      	ldr	r0, [pc, #36]	@ (800334c <MX_I2C2_Init+0x74>)
 8003328:	f002 ff86 	bl	8006238 <HAL_I2CEx_ConfigAnalogFilter>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8003332:	f000 fa35 	bl	80037a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003336:	2100      	movs	r1, #0
 8003338:	4804      	ldr	r0, [pc, #16]	@ (800334c <MX_I2C2_Init+0x74>)
 800333a:	f002 ffc8 	bl	80062ce <HAL_I2CEx_ConfigDigitalFilter>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8003344:	f000 fa2c 	bl	80037a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003348:	bf00      	nop
 800334a:	bd80      	pop	{r7, pc}
 800334c:	200003f0 	.word	0x200003f0
 8003350:	40005800 	.word	0x40005800

08003354 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8003358:	4b0f      	ldr	r3, [pc, #60]	@ (8003398 <MX_QUADSPI_Init+0x44>)
 800335a:	4a10      	ldr	r2, [pc, #64]	@ (800339c <MX_QUADSPI_Init+0x48>)
 800335c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800335e:	4b0e      	ldr	r3, [pc, #56]	@ (8003398 <MX_QUADSPI_Init+0x44>)
 8003360:	2202      	movs	r2, #2
 8003362:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8003364:	4b0c      	ldr	r3, [pc, #48]	@ (8003398 <MX_QUADSPI_Init+0x44>)
 8003366:	2204      	movs	r2, #4
 8003368:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800336a:	4b0b      	ldr	r3, [pc, #44]	@ (8003398 <MX_QUADSPI_Init+0x44>)
 800336c:	2210      	movs	r2, #16
 800336e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8003370:	4b09      	ldr	r3, [pc, #36]	@ (8003398 <MX_QUADSPI_Init+0x44>)
 8003372:	2217      	movs	r2, #23
 8003374:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8003376:	4b08      	ldr	r3, [pc, #32]	@ (8003398 <MX_QUADSPI_Init+0x44>)
 8003378:	2200      	movs	r2, #0
 800337a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800337c:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <MX_QUADSPI_Init+0x44>)
 800337e:	2200      	movs	r2, #0
 8003380:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8003382:	4805      	ldr	r0, [pc, #20]	@ (8003398 <MX_QUADSPI_Init+0x44>)
 8003384:	f003 f9a6 	bl	80066d4 <HAL_QSPI_Init>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800338e:	f000 fa07 	bl	80037a0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20000444 	.word	0x20000444
 800339c:	a0001000 	.word	0xa0001000

080033a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80033a4:	4b14      	ldr	r3, [pc, #80]	@ (80033f8 <MX_USART3_UART_Init+0x58>)
 80033a6:	4a15      	ldr	r2, [pc, #84]	@ (80033fc <MX_USART3_UART_Init+0x5c>)
 80033a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80033aa:	4b13      	ldr	r3, [pc, #76]	@ (80033f8 <MX_USART3_UART_Init+0x58>)
 80033ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80033b2:	4b11      	ldr	r3, [pc, #68]	@ (80033f8 <MX_USART3_UART_Init+0x58>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80033b8:	4b0f      	ldr	r3, [pc, #60]	@ (80033f8 <MX_USART3_UART_Init+0x58>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80033be:	4b0e      	ldr	r3, [pc, #56]	@ (80033f8 <MX_USART3_UART_Init+0x58>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033c4:	4b0c      	ldr	r3, [pc, #48]	@ (80033f8 <MX_USART3_UART_Init+0x58>)
 80033c6:	220c      	movs	r2, #12
 80033c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ca:	4b0b      	ldr	r3, [pc, #44]	@ (80033f8 <MX_USART3_UART_Init+0x58>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033d0:	4b09      	ldr	r3, [pc, #36]	@ (80033f8 <MX_USART3_UART_Init+0x58>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033d6:	4b08      	ldr	r3, [pc, #32]	@ (80033f8 <MX_USART3_UART_Init+0x58>)
 80033d8:	2200      	movs	r2, #0
 80033da:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033dc:	4b06      	ldr	r3, [pc, #24]	@ (80033f8 <MX_USART3_UART_Init+0x58>)
 80033de:	2200      	movs	r2, #0
 80033e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033e2:	4805      	ldr	r0, [pc, #20]	@ (80033f8 <MX_USART3_UART_Init+0x58>)
 80033e4:	f005 f93c 	bl	8008660 <HAL_UART_Init>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80033ee:	f000 f9d7 	bl	80037a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20000488 	.word	0x20000488
 80033fc:	40004800 	.word	0x40004800

08003400 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003404:	4b14      	ldr	r3, [pc, #80]	@ (8003458 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003406:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800340a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800340c:	4b12      	ldr	r3, [pc, #72]	@ (8003458 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800340e:	2206      	movs	r2, #6
 8003410:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003412:	4b11      	ldr	r3, [pc, #68]	@ (8003458 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003414:	2202      	movs	r2, #2
 8003416:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003418:	4b0f      	ldr	r3, [pc, #60]	@ (8003458 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800341a:	2202      	movs	r2, #2
 800341c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800341e:	4b0e      	ldr	r3, [pc, #56]	@ (8003458 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003420:	2200      	movs	r2, #0
 8003422:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003424:	4b0c      	ldr	r3, [pc, #48]	@ (8003458 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003426:	2200      	movs	r2, #0
 8003428:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800342a:	4b0b      	ldr	r3, [pc, #44]	@ (8003458 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800342c:	2200      	movs	r2, #0
 800342e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8003430:	4b09      	ldr	r3, [pc, #36]	@ (8003458 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003432:	2200      	movs	r2, #0
 8003434:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003436:	4b08      	ldr	r3, [pc, #32]	@ (8003458 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003438:	2200      	movs	r2, #0
 800343a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800343c:	4b06      	ldr	r3, [pc, #24]	@ (8003458 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800343e:	2200      	movs	r2, #0
 8003440:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003442:	4805      	ldr	r0, [pc, #20]	@ (8003458 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003444:	f002 ff8f 	bl	8006366 <HAL_PCD_Init>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800344e:	f000 f9a7 	bl	80037a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000510 	.word	0x20000510

0800345c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08a      	sub	sp, #40	@ 0x28
 8003460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003462:	f107 0314 	add.w	r3, r7, #20
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	605a      	str	r2, [r3, #4]
 800346c:	609a      	str	r2, [r3, #8]
 800346e:	60da      	str	r2, [r3, #12]
 8003470:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003472:	4bbd      	ldr	r3, [pc, #756]	@ (8003768 <MX_GPIO_Init+0x30c>)
 8003474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003476:	4abc      	ldr	r2, [pc, #752]	@ (8003768 <MX_GPIO_Init+0x30c>)
 8003478:	f043 0310 	orr.w	r3, r3, #16
 800347c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800347e:	4bba      	ldr	r3, [pc, #744]	@ (8003768 <MX_GPIO_Init+0x30c>)
 8003480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003482:	f003 0310 	and.w	r3, r3, #16
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800348a:	4bb7      	ldr	r3, [pc, #732]	@ (8003768 <MX_GPIO_Init+0x30c>)
 800348c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800348e:	4ab6      	ldr	r2, [pc, #728]	@ (8003768 <MX_GPIO_Init+0x30c>)
 8003490:	f043 0304 	orr.w	r3, r3, #4
 8003494:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003496:	4bb4      	ldr	r3, [pc, #720]	@ (8003768 <MX_GPIO_Init+0x30c>)
 8003498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a2:	4bb1      	ldr	r3, [pc, #708]	@ (8003768 <MX_GPIO_Init+0x30c>)
 80034a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a6:	4ab0      	ldr	r2, [pc, #704]	@ (8003768 <MX_GPIO_Init+0x30c>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034ae:	4bae      	ldr	r3, [pc, #696]	@ (8003768 <MX_GPIO_Init+0x30c>)
 80034b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	60bb      	str	r3, [r7, #8]
 80034b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ba:	4bab      	ldr	r3, [pc, #684]	@ (8003768 <MX_GPIO_Init+0x30c>)
 80034bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034be:	4aaa      	ldr	r2, [pc, #680]	@ (8003768 <MX_GPIO_Init+0x30c>)
 80034c0:	f043 0302 	orr.w	r3, r3, #2
 80034c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034c6:	4ba8      	ldr	r3, [pc, #672]	@ (8003768 <MX_GPIO_Init+0x30c>)
 80034c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	607b      	str	r3, [r7, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034d2:	4ba5      	ldr	r3, [pc, #660]	@ (8003768 <MX_GPIO_Init+0x30c>)
 80034d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d6:	4aa4      	ldr	r2, [pc, #656]	@ (8003768 <MX_GPIO_Init+0x30c>)
 80034d8:	f043 0308 	orr.w	r3, r3, #8
 80034dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034de:	4ba2      	ldr	r3, [pc, #648]	@ (8003768 <MX_GPIO_Init+0x30c>)
 80034e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80034ea:	2200      	movs	r2, #0
 80034ec:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80034f0:	489e      	ldr	r0, [pc, #632]	@ (800376c <MX_GPIO_Init+0x310>)
 80034f2:	f002 f891 	bl	8005618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80034f6:	2200      	movs	r2, #0
 80034f8:	f248 1104 	movw	r1, #33028	@ 0x8104
 80034fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003500:	f002 f88a 	bl	8005618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8003504:	2200      	movs	r2, #0
 8003506:	f24b 0114 	movw	r1, #45076	@ 0xb014
 800350a:	4899      	ldr	r0, [pc, #612]	@ (8003770 <MX_GPIO_Init+0x314>)
 800350c:	f002 f884 	bl	8005618 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8003510:	2200      	movs	r2, #0
 8003512:	f241 0181 	movw	r1, #4225	@ 0x1081
 8003516:	4897      	ldr	r0, [pc, #604]	@ (8003774 <MX_GPIO_Init+0x318>)
 8003518:	f002 f87e 	bl	8005618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800351c:	2201      	movs	r2, #1
 800351e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003522:	4894      	ldr	r0, [pc, #592]	@ (8003774 <MX_GPIO_Init+0x318>)
 8003524:	f002 f878 	bl	8005618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8003528:	2200      	movs	r2, #0
 800352a:	f44f 7110 	mov.w	r1, #576	@ 0x240
 800352e:	4892      	ldr	r0, [pc, #584]	@ (8003778 <MX_GPIO_Init+0x31c>)
 8003530:	f002 f872 	bl	8005618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8003534:	2201      	movs	r2, #1
 8003536:	2120      	movs	r1, #32
 8003538:	488d      	ldr	r0, [pc, #564]	@ (8003770 <MX_GPIO_Init+0x314>)
 800353a:	f002 f86d 	bl	8005618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800353e:	2201      	movs	r2, #1
 8003540:	2101      	movs	r1, #1
 8003542:	488a      	ldr	r0, [pc, #552]	@ (800376c <MX_GPIO_Init+0x310>)
 8003544:	f002 f868 	bl	8005618 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8003548:	f240 1315 	movw	r3, #277	@ 0x115
 800354c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800354e:	2301      	movs	r3, #1
 8003550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003552:	2300      	movs	r3, #0
 8003554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003556:	2300      	movs	r3, #0
 8003558:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800355a:	f107 0314 	add.w	r3, r7, #20
 800355e:	4619      	mov	r1, r3
 8003560:	4882      	ldr	r0, [pc, #520]	@ (800376c <MX_GPIO_Init+0x310>)
 8003562:	f001 fda3 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8003566:	236a      	movs	r3, #106	@ 0x6a
 8003568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800356a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800356e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003570:	2300      	movs	r3, #0
 8003572:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003574:	f107 0314 	add.w	r3, r7, #20
 8003578:	4619      	mov	r1, r3
 800357a:	487c      	ldr	r0, [pc, #496]	@ (800376c <MX_GPIO_Init+0x310>)
 800357c:	f001 fd96 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8003580:	233f      	movs	r3, #63	@ 0x3f
 8003582:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003584:	230b      	movs	r3, #11
 8003586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003588:	2300      	movs	r3, #0
 800358a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800358c:	f107 0314 	add.w	r3, r7, #20
 8003590:	4619      	mov	r1, r3
 8003592:	4879      	ldr	r0, [pc, #484]	@ (8003778 <MX_GPIO_Init+0x31c>)
 8003594:	f001 fd8a 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8003598:	2303      	movs	r3, #3
 800359a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359c:	2302      	movs	r3, #2
 800359e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a4:	2303      	movs	r3, #3
 80035a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80035a8:	2308      	movs	r3, #8
 80035aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ac:	f107 0314 	add.w	r3, r7, #20
 80035b0:	4619      	mov	r1, r3
 80035b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035b6:	f001 fd79 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80035ba:	f248 1304 	movw	r3, #33028	@ 0x8104
 80035be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035c0:	2301      	movs	r3, #1
 80035c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c8:	2300      	movs	r3, #0
 80035ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035cc:	f107 0314 	add.w	r3, r7, #20
 80035d0:	4619      	mov	r1, r3
 80035d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035d6:	f001 fd69 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80035da:	2308      	movs	r3, #8
 80035dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035de:	2302      	movs	r3, #2
 80035e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e6:	2300      	movs	r3, #0
 80035e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035ea:	2301      	movs	r3, #1
 80035ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80035ee:	f107 0314 	add.w	r3, r7, #20
 80035f2:	4619      	mov	r1, r3
 80035f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035f8:	f001 fd58 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80035fc:	2310      	movs	r3, #16
 80035fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003600:	230b      	movs	r3, #11
 8003602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003604:	2300      	movs	r3, #0
 8003606:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8003608:	f107 0314 	add.w	r3, r7, #20
 800360c:	4619      	mov	r1, r3
 800360e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003612:	f001 fd4b 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8003616:	23e0      	movs	r3, #224	@ 0xe0
 8003618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361a:	2302      	movs	r3, #2
 800361c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003622:	2303      	movs	r3, #3
 8003624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003626:	2305      	movs	r3, #5
 8003628:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800362a:	f107 0314 	add.w	r3, r7, #20
 800362e:	4619      	mov	r1, r3
 8003630:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003634:	f001 fd3a 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8003638:	2301      	movs	r3, #1
 800363a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800363c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003642:	2300      	movs	r3, #0
 8003644:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8003646:	f107 0314 	add.w	r3, r7, #20
 800364a:	4619      	mov	r1, r3
 800364c:	4848      	ldr	r0, [pc, #288]	@ (8003770 <MX_GPIO_Init+0x314>)
 800364e:	f001 fd2d 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8003652:	2302      	movs	r3, #2
 8003654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003656:	230b      	movs	r3, #11
 8003658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365a:	2300      	movs	r3, #0
 800365c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800365e:	f107 0314 	add.w	r3, r7, #20
 8003662:	4619      	mov	r1, r3
 8003664:	4842      	ldr	r0, [pc, #264]	@ (8003770 <MX_GPIO_Init+0x314>)
 8003666:	f001 fd21 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 800366a:	f24b 0334 	movw	r3, #45108	@ 0xb034
 800366e:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003670:	2301      	movs	r3, #1
 8003672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	2300      	movs	r3, #0
 8003676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003678:	2300      	movs	r3, #0
 800367a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800367c:	f107 0314 	add.w	r3, r7, #20
 8003680:	4619      	mov	r1, r3
 8003682:	483b      	ldr	r0, [pc, #236]	@ (8003770 <MX_GPIO_Init+0x314>)
 8003684:	f001 fd12 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8003688:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 800368c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800368e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003694:	2300      	movs	r3, #0
 8003696:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003698:	f107 0314 	add.w	r3, r7, #20
 800369c:	4619      	mov	r1, r3
 800369e:	4835      	ldr	r0, [pc, #212]	@ (8003774 <MX_GPIO_Init+0x318>)
 80036a0:	f001 fd04 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80036a4:	f243 0381 	movw	r3, #12417	@ 0x3081
 80036a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036aa:	2301      	movs	r3, #1
 80036ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b2:	2300      	movs	r3, #0
 80036b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036b6:	f107 0314 	add.w	r3, r7, #20
 80036ba:	4619      	mov	r1, r3
 80036bc:	482d      	ldr	r0, [pc, #180]	@ (8003774 <MX_GPIO_Init+0x318>)
 80036be:	f001 fcf5 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80036c2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80036c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036c8:	2301      	movs	r3, #1
 80036ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d0:	2300      	movs	r3, #0
 80036d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036d4:	f107 0314 	add.w	r3, r7, #20
 80036d8:	4619      	mov	r1, r3
 80036da:	4827      	ldr	r0, [pc, #156]	@ (8003778 <MX_GPIO_Init+0x31c>)
 80036dc:	f001 fce6 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80036e0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80036e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80036ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036f0:	f107 0314 	add.w	r3, r7, #20
 80036f4:	4619      	mov	r1, r3
 80036f6:	4820      	ldr	r0, [pc, #128]	@ (8003778 <MX_GPIO_Init+0x31c>)
 80036f8:	f001 fcd8 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80036fc:	2302      	movs	r3, #2
 80036fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003700:	2302      	movs	r3, #2
 8003702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003704:	2300      	movs	r3, #0
 8003706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003708:	2303      	movs	r3, #3
 800370a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800370c:	2305      	movs	r3, #5
 800370e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8003710:	f107 0314 	add.w	r3, r7, #20
 8003714:	4619      	mov	r1, r3
 8003716:	4817      	ldr	r0, [pc, #92]	@ (8003774 <MX_GPIO_Init+0x318>)
 8003718:	f001 fcc8 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800371c:	2378      	movs	r3, #120	@ 0x78
 800371e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003720:	2302      	movs	r3, #2
 8003722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003724:	2300      	movs	r3, #0
 8003726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003728:	2303      	movs	r3, #3
 800372a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800372c:	2307      	movs	r3, #7
 800372e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003730:	f107 0314 	add.w	r3, r7, #20
 8003734:	4619      	mov	r1, r3
 8003736:	480f      	ldr	r0, [pc, #60]	@ (8003774 <MX_GPIO_Init+0x318>)
 8003738:	f001 fcb8 	bl	80050ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800373c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003742:	2312      	movs	r3, #18
 8003744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003746:	2300      	movs	r3, #0
 8003748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800374a:	2303      	movs	r3, #3
 800374c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800374e:	2304      	movs	r3, #4
 8003750:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003752:	f107 0314 	add.w	r3, r7, #20
 8003756:	4619      	mov	r1, r3
 8003758:	4805      	ldr	r0, [pc, #20]	@ (8003770 <MX_GPIO_Init+0x314>)
 800375a:	f001 fca7 	bl	80050ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800375e:	2200      	movs	r2, #0
 8003760:	2100      	movs	r1, #0
 8003762:	2017      	movs	r0, #23
 8003764:	e00a      	b.n	800377c <MX_GPIO_Init+0x320>
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000
 800376c:	48001000 	.word	0x48001000
 8003770:	48000400 	.word	0x48000400
 8003774:	48000c00 	.word	0x48000c00
 8003778:	48000800 	.word	0x48000800
 800377c:	f001 faf5 	bl	8004d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003780:	2017      	movs	r0, #23
 8003782:	f001 fb0e 	bl	8004da2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003786:	2200      	movs	r2, #0
 8003788:	2100      	movs	r1, #0
 800378a:	2028      	movs	r0, #40	@ 0x28
 800378c:	f001 faed 	bl	8004d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003790:	2028      	movs	r0, #40	@ 0x28
 8003792:	f001 fb06 	bl	8004da2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003796:	bf00      	nop
 8003798:	3728      	adds	r7, #40	@ 0x28
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop

080037a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037a4:	b672      	cpsid	i
}
 80037a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037a8:	bf00      	nop
 80037aa:	e7fd      	b.n	80037a8 <Error_Handler+0x8>

080037ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037b2:	4b0f      	ldr	r3, [pc, #60]	@ (80037f0 <HAL_MspInit+0x44>)
 80037b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037b6:	4a0e      	ldr	r2, [pc, #56]	@ (80037f0 <HAL_MspInit+0x44>)
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80037be:	4b0c      	ldr	r3, [pc, #48]	@ (80037f0 <HAL_MspInit+0x44>)
 80037c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	607b      	str	r3, [r7, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037ca:	4b09      	ldr	r3, [pc, #36]	@ (80037f0 <HAL_MspInit+0x44>)
 80037cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ce:	4a08      	ldr	r2, [pc, #32]	@ (80037f0 <HAL_MspInit+0x44>)
 80037d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80037d6:	4b06      	ldr	r3, [pc, #24]	@ (80037f0 <HAL_MspInit+0x44>)
 80037d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40021000 	.word	0x40021000

080037f4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b0ac      	sub	sp, #176	@ 0xb0
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	605a      	str	r2, [r3, #4]
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	60da      	str	r2, [r3, #12]
 800380a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800380c:	f107 0314 	add.w	r3, r7, #20
 8003810:	2288      	movs	r2, #136	@ 0x88
 8003812:	2100      	movs	r1, #0
 8003814:	4618      	mov	r0, r3
 8003816:	f007 fed0 	bl	800b5ba <memset>
  if(DFSDM1_Init == 0)
 800381a:	4b25      	ldr	r3, [pc, #148]	@ (80038b0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d142      	bne.n	80038a8 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8003822:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003826:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8003828:	2300      	movs	r3, #0
 800382a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800382e:	f107 0314 	add.w	r3, r7, #20
 8003832:	4618      	mov	r0, r3
 8003834:	f003 fe0a 	bl	800744c <HAL_RCCEx_PeriphCLKConfig>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800383e:	f7ff ffaf 	bl	80037a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003842:	4b1c      	ldr	r3, [pc, #112]	@ (80038b4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003846:	4a1b      	ldr	r2, [pc, #108]	@ (80038b4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003848:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800384c:	6613      	str	r3, [r2, #96]	@ 0x60
 800384e:	4b19      	ldr	r3, [pc, #100]	@ (80038b4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003852:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800385a:	4b16      	ldr	r3, [pc, #88]	@ (80038b4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800385c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800385e:	4a15      	ldr	r2, [pc, #84]	@ (80038b4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003860:	f043 0310 	orr.w	r3, r3, #16
 8003864:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003866:	4b13      	ldr	r3, [pc, #76]	@ (80038b4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800386a:	f003 0310 	and.w	r3, r3, #16
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8003872:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8003876:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387a:	2302      	movs	r3, #2
 800387c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003880:	2300      	movs	r3, #0
 8003882:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003886:	2300      	movs	r3, #0
 8003888:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800388c:	2306      	movs	r3, #6
 800388e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003892:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003896:	4619      	mov	r1, r3
 8003898:	4807      	ldr	r0, [pc, #28]	@ (80038b8 <HAL_DFSDM_ChannelMspInit+0xc4>)
 800389a:	f001 fc07 	bl	80050ac <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 800389e:	4b04      	ldr	r3, [pc, #16]	@ (80038b0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3301      	adds	r3, #1
 80038a4:	4a02      	ldr	r2, [pc, #8]	@ (80038b0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80038a6:	6013      	str	r3, [r2, #0]
  }

}
 80038a8:	bf00      	nop
 80038aa:	37b0      	adds	r7, #176	@ 0xb0
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	200009f4 	.word	0x200009f4
 80038b4:	40021000 	.word	0x40021000
 80038b8:	48001000 	.word	0x48001000

080038bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b0ac      	sub	sp, #176	@ 0xb0
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	605a      	str	r2, [r3, #4]
 80038ce:	609a      	str	r2, [r3, #8]
 80038d0:	60da      	str	r2, [r3, #12]
 80038d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038d4:	f107 0314 	add.w	r3, r7, #20
 80038d8:	2288      	movs	r2, #136	@ 0x88
 80038da:	2100      	movs	r1, #0
 80038dc:	4618      	mov	r0, r3
 80038de:	f007 fe6c 	bl	800b5ba <memset>
  if(hi2c->Instance==I2C2)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a21      	ldr	r2, [pc, #132]	@ (800396c <HAL_I2C_MspInit+0xb0>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d13b      	bne.n	8003964 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80038ec:	2380      	movs	r3, #128	@ 0x80
 80038ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80038f0:	2300      	movs	r3, #0
 80038f2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038f4:	f107 0314 	add.w	r3, r7, #20
 80038f8:	4618      	mov	r0, r3
 80038fa:	f003 fda7 	bl	800744c <HAL_RCCEx_PeriphCLKConfig>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003904:	f7ff ff4c 	bl	80037a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003908:	4b19      	ldr	r3, [pc, #100]	@ (8003970 <HAL_I2C_MspInit+0xb4>)
 800390a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800390c:	4a18      	ldr	r2, [pc, #96]	@ (8003970 <HAL_I2C_MspInit+0xb4>)
 800390e:	f043 0302 	orr.w	r3, r3, #2
 8003912:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003914:	4b16      	ldr	r3, [pc, #88]	@ (8003970 <HAL_I2C_MspInit+0xb4>)
 8003916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8003920:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003924:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003928:	2312      	movs	r3, #18
 800392a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800392e:	2301      	movs	r3, #1
 8003930:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003934:	2303      	movs	r3, #3
 8003936:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800393a:	2304      	movs	r3, #4
 800393c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003940:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003944:	4619      	mov	r1, r3
 8003946:	480b      	ldr	r0, [pc, #44]	@ (8003974 <HAL_I2C_MspInit+0xb8>)
 8003948:	f001 fbb0 	bl	80050ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800394c:	4b08      	ldr	r3, [pc, #32]	@ (8003970 <HAL_I2C_MspInit+0xb4>)
 800394e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003950:	4a07      	ldr	r2, [pc, #28]	@ (8003970 <HAL_I2C_MspInit+0xb4>)
 8003952:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003956:	6593      	str	r3, [r2, #88]	@ 0x58
 8003958:	4b05      	ldr	r3, [pc, #20]	@ (8003970 <HAL_I2C_MspInit+0xb4>)
 800395a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800395c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8003964:	bf00      	nop
 8003966:	37b0      	adds	r7, #176	@ 0xb0
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40005800 	.word	0x40005800
 8003970:	40021000 	.word	0x40021000
 8003974:	48000400 	.word	0x48000400

08003978 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a0b      	ldr	r2, [pc, #44]	@ (80039b4 <HAL_I2C_MspDeInit+0x3c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d10f      	bne.n	80039aa <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800398a:	4b0b      	ldr	r3, [pc, #44]	@ (80039b8 <HAL_I2C_MspDeInit+0x40>)
 800398c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398e:	4a0a      	ldr	r2, [pc, #40]	@ (80039b8 <HAL_I2C_MspDeInit+0x40>)
 8003990:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003994:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8003996:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800399a:	4808      	ldr	r0, [pc, #32]	@ (80039bc <HAL_I2C_MspDeInit+0x44>)
 800399c:	f001 fd30 	bl	8005400 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80039a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80039a4:	4805      	ldr	r0, [pc, #20]	@ (80039bc <HAL_I2C_MspDeInit+0x44>)
 80039a6:	f001 fd2b 	bl	8005400 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40005800 	.word	0x40005800
 80039b8:	40021000 	.word	0x40021000
 80039bc:	48000400 	.word	0x48000400

080039c0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	@ 0x28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c8:	f107 0314 	add.w	r3, r7, #20
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	605a      	str	r2, [r3, #4]
 80039d2:	609a      	str	r2, [r3, #8]
 80039d4:	60da      	str	r2, [r3, #12]
 80039d6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a17      	ldr	r2, [pc, #92]	@ (8003a3c <HAL_QSPI_MspInit+0x7c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d128      	bne.n	8003a34 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80039e2:	4b17      	ldr	r3, [pc, #92]	@ (8003a40 <HAL_QSPI_MspInit+0x80>)
 80039e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039e6:	4a16      	ldr	r2, [pc, #88]	@ (8003a40 <HAL_QSPI_MspInit+0x80>)
 80039e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ec:	6513      	str	r3, [r2, #80]	@ 0x50
 80039ee:	4b14      	ldr	r3, [pc, #80]	@ (8003a40 <HAL_QSPI_MspInit+0x80>)
 80039f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80039fa:	4b11      	ldr	r3, [pc, #68]	@ (8003a40 <HAL_QSPI_MspInit+0x80>)
 80039fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fe:	4a10      	ldr	r2, [pc, #64]	@ (8003a40 <HAL_QSPI_MspInit+0x80>)
 8003a00:	f043 0310 	orr.w	r3, r3, #16
 8003a04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a06:	4b0e      	ldr	r3, [pc, #56]	@ (8003a40 <HAL_QSPI_MspInit+0x80>)
 8003a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a0a:	f003 0310 	and.w	r3, r3, #16
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8003a12:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8003a16:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a20:	2303      	movs	r3, #3
 8003a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003a24:	230a      	movs	r3, #10
 8003a26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a28:	f107 0314 	add.w	r3, r7, #20
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4805      	ldr	r0, [pc, #20]	@ (8003a44 <HAL_QSPI_MspInit+0x84>)
 8003a30:	f001 fb3c 	bl	80050ac <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8003a34:	bf00      	nop
 8003a36:	3728      	adds	r7, #40	@ 0x28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	a0001000 	.word	0xa0001000
 8003a40:	40021000 	.word	0x40021000
 8003a44:	48001000 	.word	0x48001000

08003a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b0ac      	sub	sp, #176	@ 0xb0
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a50:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	605a      	str	r2, [r3, #4]
 8003a5a:	609a      	str	r2, [r3, #8]
 8003a5c:	60da      	str	r2, [r3, #12]
 8003a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a60:	f107 0314 	add.w	r3, r7, #20
 8003a64:	2288      	movs	r2, #136	@ 0x88
 8003a66:	2100      	movs	r1, #0
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f007 fda6 	bl	800b5ba <memset>
  if(huart->Instance==USART3)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a21      	ldr	r2, [pc, #132]	@ (8003af8 <HAL_UART_MspInit+0xb0>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d13b      	bne.n	8003af0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003a78:	2304      	movs	r3, #4
 8003a7a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a80:	f107 0314 	add.w	r3, r7, #20
 8003a84:	4618      	mov	r0, r3
 8003a86:	f003 fce1 	bl	800744c <HAL_RCCEx_PeriphCLKConfig>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003a90:	f7ff fe86 	bl	80037a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a94:	4b19      	ldr	r3, [pc, #100]	@ (8003afc <HAL_UART_MspInit+0xb4>)
 8003a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a98:	4a18      	ldr	r2, [pc, #96]	@ (8003afc <HAL_UART_MspInit+0xb4>)
 8003a9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003aa0:	4b16      	ldr	r3, [pc, #88]	@ (8003afc <HAL_UART_MspInit+0xb4>)
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003aac:	4b13      	ldr	r3, [pc, #76]	@ (8003afc <HAL_UART_MspInit+0xb4>)
 8003aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ab0:	4a12      	ldr	r2, [pc, #72]	@ (8003afc <HAL_UART_MspInit+0xb4>)
 8003ab2:	f043 0308 	orr.w	r3, r3, #8
 8003ab6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ab8:	4b10      	ldr	r3, [pc, #64]	@ (8003afc <HAL_UART_MspInit+0xb4>)
 8003aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8003ac4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003ac8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003acc:	2302      	movs	r3, #2
 8003ace:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003ade:	2307      	movs	r3, #7
 8003ae0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ae4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4805      	ldr	r0, [pc, #20]	@ (8003b00 <HAL_UART_MspInit+0xb8>)
 8003aec:	f001 fade 	bl	80050ac <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8003af0:	bf00      	nop
 8003af2:	37b0      	adds	r7, #176	@ 0xb0
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40004800 	.word	0x40004800
 8003afc:	40021000 	.word	0x40021000
 8003b00:	48000c00 	.word	0x48000c00

08003b04 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b0ac      	sub	sp, #176	@ 0xb0
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b0c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	605a      	str	r2, [r3, #4]
 8003b16:	609a      	str	r2, [r3, #8]
 8003b18:	60da      	str	r2, [r3, #12]
 8003b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b1c:	f107 0314 	add.w	r3, r7, #20
 8003b20:	2288      	movs	r2, #136	@ 0x88
 8003b22:	2100      	movs	r1, #0
 8003b24:	4618      	mov	r0, r3
 8003b26:	f007 fd48 	bl	800b5ba <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b32:	d17c      	bne.n	8003c2e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003b34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b38:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003b3a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003b3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003b42:	2301      	movs	r3, #1
 8003b44:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003b46:	2301      	movs	r3, #1
 8003b48:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8003b4a:	2318      	movs	r3, #24
 8003b4c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003b4e:	2307      	movs	r3, #7
 8003b50:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003b52:	2302      	movs	r3, #2
 8003b54:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003b56:	2302      	movs	r3, #2
 8003b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8003b5a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003b5e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b60:	f107 0314 	add.w	r3, r7, #20
 8003b64:	4618      	mov	r0, r3
 8003b66:	f003 fc71 	bl	800744c <HAL_RCCEx_PeriphCLKConfig>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8003b70:	f7ff fe16 	bl	80037a0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b74:	4b30      	ldr	r3, [pc, #192]	@ (8003c38 <HAL_PCD_MspInit+0x134>)
 8003b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b78:	4a2f      	ldr	r2, [pc, #188]	@ (8003c38 <HAL_PCD_MspInit+0x134>)
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b80:	4b2d      	ldr	r3, [pc, #180]	@ (8003c38 <HAL_PCD_MspInit+0x134>)
 8003b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8003b8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b94:	2300      	movs	r3, #0
 8003b96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003ba0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003baa:	f001 fa7f 	bl	80050ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8003bae:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003bb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003bc8:	230a      	movs	r3, #10
 8003bca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bce:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bd8:	f001 fa68 	bl	80050ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003bdc:	4b16      	ldr	r3, [pc, #88]	@ (8003c38 <HAL_PCD_MspInit+0x134>)
 8003bde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003be0:	4a15      	ldr	r2, [pc, #84]	@ (8003c38 <HAL_PCD_MspInit+0x134>)
 8003be2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003be6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003be8:	4b13      	ldr	r3, [pc, #76]	@ (8003c38 <HAL_PCD_MspInit+0x134>)
 8003bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf4:	4b10      	ldr	r3, [pc, #64]	@ (8003c38 <HAL_PCD_MspInit+0x134>)
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d114      	bne.n	8003c2a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c00:	4b0d      	ldr	r3, [pc, #52]	@ (8003c38 <HAL_PCD_MspInit+0x134>)
 8003c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c04:	4a0c      	ldr	r2, [pc, #48]	@ (8003c38 <HAL_PCD_MspInit+0x134>)
 8003c06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c38 <HAL_PCD_MspInit+0x134>)
 8003c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8003c18:	f002 fd4c 	bl	80066b4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c1c:	4b06      	ldr	r3, [pc, #24]	@ (8003c38 <HAL_PCD_MspInit+0x134>)
 8003c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c20:	4a05      	ldr	r2, [pc, #20]	@ (8003c38 <HAL_PCD_MspInit+0x134>)
 8003c22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c26:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8003c28:	e001      	b.n	8003c2e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8003c2a:	f002 fd43 	bl	80066b4 <HAL_PWREx_EnableVddUSB>
}
 8003c2e:	bf00      	nop
 8003c30:	37b0      	adds	r7, #176	@ 0xb0
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40021000 	.word	0x40021000

08003c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c40:	bf00      	nop
 8003c42:	e7fd      	b.n	8003c40 <NMI_Handler+0x4>

08003c44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c48:	bf00      	nop
 8003c4a:	e7fd      	b.n	8003c48 <HardFault_Handler+0x4>

08003c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c50:	bf00      	nop
 8003c52:	e7fd      	b.n	8003c50 <MemManage_Handler+0x4>

08003c54 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c58:	bf00      	nop
 8003c5a:	e7fd      	b.n	8003c58 <BusFault_Handler+0x4>

08003c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c60:	bf00      	nop
 8003c62:	e7fd      	b.n	8003c60 <UsageFault_Handler+0x4>

08003c64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c68:	bf00      	nop
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c72:	b480      	push	{r7}
 8003c74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c76:	bf00      	nop
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c84:	bf00      	nop
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c92:	f000 ff4b 	bl	8004b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c96:	bf00      	nop
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8003ca0:	2020      	movs	r0, #32
 8003ca2:	f001 fceb 	bl	800567c <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 8003ca6:	4806      	ldr	r0, [pc, #24]	@ (8003cc0 <EXTI9_5_IRQHandler+0x24>)
 8003ca8:	f001 f9d0 	bl	800504c <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8003cac:	2080      	movs	r0, #128	@ 0x80
 8003cae:	f001 fce5 	bl	800567c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8003cb2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003cb6:	f001 fce1 	bl	800567c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003cba:	bf00      	nop
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	200002b0 	.word	0x200002b0

08003cc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8003cc8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003ccc:	f001 fcd6 	bl	800567c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8003cd0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003cd4:	f001 fcd2 	bl	800567c <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8003cd8:	4806      	ldr	r0, [pc, #24]	@ (8003cf4 <EXTI15_10_IRQHandler+0x30>)
 8003cda:	f001 f9b7 	bl	800504c <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8003cde:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003ce2:	f001 fccb 	bl	800567c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8003ce6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003cea:	f001 fcc7 	bl	800567c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003cee:	bf00      	nop
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000010 	.word	0x20000010

08003cf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  return 1;
 8003cfc:	2301      	movs	r3, #1
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <_kill>:

int _kill(int pid, int sig)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d12:	f007 fca5 	bl	800b660 <__errno>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2216      	movs	r2, #22
 8003d1a:	601a      	str	r2, [r3, #0]
  return -1;
 8003d1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <_exit>:

void _exit (int status)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d30:	f04f 31ff 	mov.w	r1, #4294967295
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7ff ffe7 	bl	8003d08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d3a:	bf00      	nop
 8003d3c:	e7fd      	b.n	8003d3a <_exit+0x12>

08003d3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b086      	sub	sp, #24
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	e00a      	b.n	8003d66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d50:	f3af 8000 	nop.w
 8003d54:	4601      	mov	r1, r0
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	60ba      	str	r2, [r7, #8]
 8003d5c:	b2ca      	uxtb	r2, r1
 8003d5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	3301      	adds	r3, #1
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	dbf0      	blt.n	8003d50 <_read+0x12>
  }

  return len;
 8003d6e:	687b      	ldr	r3, [r7, #4]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	e009      	b.n	8003d9e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	60ba      	str	r2, [r7, #8]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fb8e 	bl	80044b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	dbf1      	blt.n	8003d8a <_write+0x12>
  }
  return len;
 8003da6:	687b      	ldr	r3, [r7, #4]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <_close>:

int _close(int file)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003db8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003dd8:	605a      	str	r2, [r3, #4]
  return 0;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <_isatty>:

int _isatty(int file)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003df0:	2301      	movs	r3, #1
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b085      	sub	sp, #20
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e20:	4a14      	ldr	r2, [pc, #80]	@ (8003e74 <_sbrk+0x5c>)
 8003e22:	4b15      	ldr	r3, [pc, #84]	@ (8003e78 <_sbrk+0x60>)
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e2c:	4b13      	ldr	r3, [pc, #76]	@ (8003e7c <_sbrk+0x64>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d102      	bne.n	8003e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e34:	4b11      	ldr	r3, [pc, #68]	@ (8003e7c <_sbrk+0x64>)
 8003e36:	4a12      	ldr	r2, [pc, #72]	@ (8003e80 <_sbrk+0x68>)
 8003e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e3a:	4b10      	ldr	r3, [pc, #64]	@ (8003e7c <_sbrk+0x64>)
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4413      	add	r3, r2
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d207      	bcs.n	8003e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e48:	f007 fc0a 	bl	800b660 <__errno>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	220c      	movs	r2, #12
 8003e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e52:	f04f 33ff 	mov.w	r3, #4294967295
 8003e56:	e009      	b.n	8003e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e58:	4b08      	ldr	r3, [pc, #32]	@ (8003e7c <_sbrk+0x64>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e5e:	4b07      	ldr	r3, [pc, #28]	@ (8003e7c <_sbrk+0x64>)
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4413      	add	r3, r2
 8003e66:	4a05      	ldr	r2, [pc, #20]	@ (8003e7c <_sbrk+0x64>)
 8003e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	20018000 	.word	0x20018000
 8003e78:	00000400 	.word	0x00000400
 8003e7c:	200009f8 	.word	0x200009f8
 8003e80:	20000fa8 	.word	0x20000fa8

08003e84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003e88:	4b06      	ldr	r3, [pc, #24]	@ (8003ea4 <SystemInit+0x20>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8e:	4a05      	ldr	r2, [pc, #20]	@ (8003ea4 <SystemInit+0x20>)
 8003e90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003e98:	bf00      	nop
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	e000ed00 	.word	0xe000ed00

08003ea8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003ea8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ee0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003eac:	f7ff ffea 	bl	8003e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003eb0:	480c      	ldr	r0, [pc, #48]	@ (8003ee4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003eb2:	490d      	ldr	r1, [pc, #52]	@ (8003ee8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8003eec <LoopForever+0xe>)
  movs r3, #0
 8003eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003eb8:	e002      	b.n	8003ec0 <LoopCopyDataInit>

08003eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ebe:	3304      	adds	r3, #4

08003ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ec4:	d3f9      	bcc.n	8003eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ec8:	4c0a      	ldr	r4, [pc, #40]	@ (8003ef4 <LoopForever+0x16>)
  movs r3, #0
 8003eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ecc:	e001      	b.n	8003ed2 <LoopFillZerobss>

08003ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ed0:	3204      	adds	r2, #4

08003ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ed4:	d3fb      	bcc.n	8003ece <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ed6:	f007 fbc9 	bl	800b66c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003eda:	f7ff f90f 	bl	80030fc <main>

08003ede <LoopForever>:

LoopForever:
    b LoopForever
 8003ede:	e7fe      	b.n	8003ede <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003ee0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ee8:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8003eec:	0800d88c 	.word	0x0800d88c
  ldr r2, =_sbss
 8003ef0:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8003ef4:	20000fa8 	.word	0x20000fa8

08003ef8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ef8:	e7fe      	b.n	8003ef8 <ADC1_2_IRQHandler>
	...

08003efc <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8003f06:	79fb      	ldrb	r3, [r7, #7]
 8003f08:	4a04      	ldr	r2, [pc, #16]	@ (8003f1c <BSP_LED_Init+0x20>)
 8003f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f0e:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	0800d4a0 	.word	0x0800d4a0

08003f20 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	4a06      	ldr	r2, [pc, #24]	@ (8003f48 <BSP_LED_Toggle+0x28>)
 8003f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f36:	4611      	mov	r1, r2
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f001 fb85 	bl	8005648 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	20000008 	.word	0x20000008

08003f4c <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f52:	4b1c      	ldr	r3, [pc, #112]	@ (8003fc4 <LED_USER_GPIO_Init+0x78>)
 8003f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f56:	4a1b      	ldr	r2, [pc, #108]	@ (8003fc4 <LED_USER_GPIO_Init+0x78>)
 8003f58:	f043 0302 	orr.w	r3, r3, #2
 8003f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f5e:	4b19      	ldr	r3, [pc, #100]	@ (8003fc4 <LED_USER_GPIO_Init+0x78>)
 8003f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	60bb      	str	r3, [r7, #8]
 8003f68:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f6a:	f107 030c 	add.w	r3, r7, #12
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	605a      	str	r2, [r3, #4]
 8003f74:	609a      	str	r2, [r3, #8]
 8003f76:	60da      	str	r2, [r3, #12]
 8003f78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f7a:	4b12      	ldr	r3, [pc, #72]	@ (8003fc4 <LED_USER_GPIO_Init+0x78>)
 8003f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f7e:	4a11      	ldr	r2, [pc, #68]	@ (8003fc4 <LED_USER_GPIO_Init+0x78>)
 8003f80:	f043 0302 	orr.w	r3, r3, #2
 8003f84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f86:	4b0f      	ldr	r3, [pc, #60]	@ (8003fc4 <LED_USER_GPIO_Init+0x78>)
 8003f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	607b      	str	r3, [r7, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8003f92:	2200      	movs	r2, #0
 8003f94:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003f98:	480b      	ldr	r0, [pc, #44]	@ (8003fc8 <LED_USER_GPIO_Init+0x7c>)
 8003f9a:	f001 fb3d 	bl	8005618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8003f9e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003fa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fac:	2300      	movs	r3, #0
 8003fae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8003fb0:	f107 030c 	add.w	r3, r7, #12
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4804      	ldr	r0, [pc, #16]	@ (8003fc8 <LED_USER_GPIO_Init+0x7c>)
 8003fb8:	f001 f878 	bl	80050ac <HAL_GPIO_Init>

}
 8003fbc:	bf00      	nop
 8003fbe:	3720      	adds	r7, #32
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	48000400 	.word	0x48000400

08003fcc <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	460a      	mov	r2, r1
 8003fd6:	71fb      	strb	r3, [r7, #7]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	4a1f      	ldr	r2, [pc, #124]	@ (8004060 <BSP_PB_Init+0x94>)
 8003fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe8:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8003fea:	79bb      	ldrb	r3, [r7, #6]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d132      	bne.n	8004056 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8003ff0:	79fb      	ldrb	r3, [r7, #7]
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	4a1b      	ldr	r2, [pc, #108]	@ (8004064 <BSP_PB_Init+0x98>)
 8003ff6:	441a      	add	r2, r3
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
 8003ffa:	491b      	ldr	r1, [pc, #108]	@ (8004068 <BSP_PB_Init+0x9c>)
 8003ffc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004000:	4619      	mov	r1, r3
 8004002:	4610      	mov	r0, r2
 8004004:	f001 f80e 	bl	8005024 <HAL_EXTI_GetHandle>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800400e:	f06f 0303 	mvn.w	r3, #3
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	e01f      	b.n	8004056 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8004016:	79fb      	ldrb	r3, [r7, #7]
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	4a12      	ldr	r2, [pc, #72]	@ (8004064 <BSP_PB_Init+0x98>)
 800401c:	1898      	adds	r0, r3, r2
 800401e:	79fb      	ldrb	r3, [r7, #7]
 8004020:	4a12      	ldr	r2, [pc, #72]	@ (800406c <BSP_PB_Init+0xa0>)
 8004022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004026:	461a      	mov	r2, r3
 8004028:	2100      	movs	r1, #0
 800402a:	f000 ffe1 	bl	8004ff0 <HAL_EXTI_RegisterCallback>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004034:	f06f 0303 	mvn.w	r3, #3
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	e00c      	b.n	8004056 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800403c:	2028      	movs	r0, #40	@ 0x28
 800403e:	79fb      	ldrb	r3, [r7, #7]
 8004040:	4a0b      	ldr	r2, [pc, #44]	@ (8004070 <BSP_PB_Init+0xa4>)
 8004042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004046:	2200      	movs	r2, #0
 8004048:	4619      	mov	r1, r3
 800404a:	f000 fe8e 	bl	8004d6a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800404e:	2328      	movs	r3, #40	@ 0x28
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fea6 	bl	8004da2 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8004056:	68fb      	ldr	r3, [r7, #12]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	0800d4a4 	.word	0x0800d4a4
 8004064:	20000010 	.word	0x20000010
 8004068:	0800d4a8 	.word	0x0800d4a8
 800406c:	0800d4ac 	.word	0x0800d4ac
 8004070:	0800d4b0 	.word	0x0800d4b0

08004074 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800407e:	79fb      	ldrb	r3, [r7, #7]
 8004080:	4a09      	ldr	r2, [pc, #36]	@ (80040a8 <BSP_PB_GetState+0x34>)
 8004082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004086:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800408a:	4611      	mov	r1, r2
 800408c:	4618      	mov	r0, r3
 800408e:	f001 faab 	bl	80055e8 <HAL_GPIO_ReadPin>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	bf0c      	ite	eq
 8004098:	2301      	moveq	r3, #1
 800409a:	2300      	movne	r3, #0
 800409c:	b2db      	uxtb	r3, r3
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	2000000c 	.word	0x2000000c

080040ac <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80040b0:	2000      	movs	r0, #0
 80040b2:	f7fe fa47 	bl	8002544 <BSP_PB_Callback>
}
 80040b6:	bf00      	nop
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040c2:	4b19      	ldr	r3, [pc, #100]	@ (8004128 <BUTTON_USER_GPIO_Init+0x6c>)
 80040c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040c6:	4a18      	ldr	r2, [pc, #96]	@ (8004128 <BUTTON_USER_GPIO_Init+0x6c>)
 80040c8:	f043 0304 	orr.w	r3, r3, #4
 80040cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040ce:	4b16      	ldr	r3, [pc, #88]	@ (8004128 <BUTTON_USER_GPIO_Init+0x6c>)
 80040d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	60bb      	str	r3, [r7, #8]
 80040d8:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040da:	f107 030c 	add.w	r3, r7, #12
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	605a      	str	r2, [r3, #4]
 80040e4:	609a      	str	r2, [r3, #8]
 80040e6:	60da      	str	r2, [r3, #12]
 80040e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004128 <BUTTON_USER_GPIO_Init+0x6c>)
 80040ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ee:	4a0e      	ldr	r2, [pc, #56]	@ (8004128 <BUTTON_USER_GPIO_Init+0x6c>)
 80040f0:	f043 0304 	orr.w	r3, r3, #4
 80040f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004128 <BUTTON_USER_GPIO_Init+0x6c>)
 80040f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040fa:	f003 0304 	and.w	r3, r3, #4
 80040fe:	607b      	str	r3, [r7, #4]
 8004100:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8004102:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004106:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004108:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800410c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410e:	2300      	movs	r3, #0
 8004110:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8004112:	f107 030c 	add.w	r3, r7, #12
 8004116:	4619      	mov	r1, r3
 8004118:	4804      	ldr	r0, [pc, #16]	@ (800412c <BUTTON_USER_GPIO_Init+0x70>)
 800411a:	f000 ffc7 	bl	80050ac <HAL_GPIO_Init>

}
 800411e:	bf00      	nop
 8004120:	3720      	adds	r7, #32
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40021000 	.word	0x40021000
 800412c:	48000800 	.word	0x48000800

08004130 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d903      	bls.n	800414c <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004144:	f06f 0301 	mvn.w	r3, #1
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	e025      	b.n	8004198 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800414c:	79fb      	ldrb	r3, [r7, #7]
 800414e:	79fa      	ldrb	r2, [r7, #7]
 8004150:	4914      	ldr	r1, [pc, #80]	@ (80041a4 <BSP_COM_Init+0x74>)
 8004152:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004156:	4814      	ldr	r0, [pc, #80]	@ (80041a8 <BSP_COM_Init+0x78>)
 8004158:	4613      	mov	r3, r2
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	4413      	add	r3, r2
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	4403      	add	r3, r0
 8004162:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8004164:	79fa      	ldrb	r2, [r7, #7]
 8004166:	4613      	mov	r3, r2
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	4413      	add	r3, r2
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	4a0e      	ldr	r2, [pc, #56]	@ (80041a8 <BSP_COM_Init+0x78>)
 8004170:	4413      	add	r3, r2
 8004172:	4618      	mov	r0, r3
 8004174:	f000 f9ba 	bl	80044ec <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8004178:	79fa      	ldrb	r2, [r7, #7]
 800417a:	4613      	mov	r3, r2
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	4413      	add	r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	4a09      	ldr	r2, [pc, #36]	@ (80041a8 <BSP_COM_Init+0x78>)
 8004184:	4413      	add	r3, r2
 8004186:	4618      	mov	r0, r3
 8004188:	f000 f960 	bl	800444c <MX_USART1_UART_Init>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d002      	beq.n	8004198 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004192:	f06f 0303 	mvn.w	r3, #3
 8004196:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004198:	68fb      	ldr	r3, [r7, #12]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000018 	.word	0x20000018
 80041a8:	200009fc 	.word	0x200009fc

080041ac <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08a      	sub	sp, #40	@ 0x28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80041b4:	4b27      	ldr	r3, [pc, #156]	@ (8004254 <I2Cx_MspInit+0xa8>)
 80041b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041b8:	4a26      	ldr	r2, [pc, #152]	@ (8004254 <I2Cx_MspInit+0xa8>)
 80041ba:	f043 0302 	orr.w	r3, r3, #2
 80041be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041c0:	4b24      	ldr	r3, [pc, #144]	@ (8004254 <I2Cx_MspInit+0xa8>)
 80041c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80041cc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80041d0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80041d2:	2312      	movs	r3, #18
 80041d4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80041d6:	2301      	movs	r3, #1
 80041d8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041da:	2303      	movs	r3, #3
 80041dc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80041de:	2304      	movs	r3, #4
 80041e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80041e2:	f107 0314 	add.w	r3, r7, #20
 80041e6:	4619      	mov	r1, r3
 80041e8:	481b      	ldr	r0, [pc, #108]	@ (8004258 <I2Cx_MspInit+0xac>)
 80041ea:	f000 ff5f 	bl	80050ac <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80041ee:	f107 0314 	add.w	r3, r7, #20
 80041f2:	4619      	mov	r1, r3
 80041f4:	4818      	ldr	r0, [pc, #96]	@ (8004258 <I2Cx_MspInit+0xac>)
 80041f6:	f000 ff59 	bl	80050ac <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80041fa:	4b16      	ldr	r3, [pc, #88]	@ (8004254 <I2Cx_MspInit+0xa8>)
 80041fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fe:	4a15      	ldr	r2, [pc, #84]	@ (8004254 <I2Cx_MspInit+0xa8>)
 8004200:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004204:	6593      	str	r3, [r2, #88]	@ 0x58
 8004206:	4b13      	ldr	r3, [pc, #76]	@ (8004254 <I2Cx_MspInit+0xa8>)
 8004208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800420a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8004212:	4b10      	ldr	r3, [pc, #64]	@ (8004254 <I2Cx_MspInit+0xa8>)
 8004214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004216:	4a0f      	ldr	r2, [pc, #60]	@ (8004254 <I2Cx_MspInit+0xa8>)
 8004218:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800421c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800421e:	4b0d      	ldr	r3, [pc, #52]	@ (8004254 <I2Cx_MspInit+0xa8>)
 8004220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004222:	4a0c      	ldr	r2, [pc, #48]	@ (8004254 <I2Cx_MspInit+0xa8>)
 8004224:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004228:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800422a:	2200      	movs	r2, #0
 800422c:	210f      	movs	r1, #15
 800422e:	2021      	movs	r0, #33	@ 0x21
 8004230:	f000 fd9b 	bl	8004d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8004234:	2021      	movs	r0, #33	@ 0x21
 8004236:	f000 fdb4 	bl	8004da2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800423a:	2200      	movs	r2, #0
 800423c:	210f      	movs	r1, #15
 800423e:	2022      	movs	r0, #34	@ 0x22
 8004240:	f000 fd93 	bl	8004d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8004244:	2022      	movs	r0, #34	@ 0x22
 8004246:	f000 fdac 	bl	8004da2 <HAL_NVIC_EnableIRQ>
}
 800424a:	bf00      	nop
 800424c:	3728      	adds	r7, #40	@ 0x28
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40021000 	.word	0x40021000
 8004258:	48000400 	.word	0x48000400

0800425c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a12      	ldr	r2, [pc, #72]	@ (80042b0 <I2Cx_Init+0x54>)
 8004268:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a11      	ldr	r2, [pc, #68]	@ (80042b4 <I2Cx_Init+0x58>)
 800426e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff ff89 	bl	80041ac <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f001 fa11 	bl	80056c2 <HAL_I2C_Init>

  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);
 80042a0:	2100      	movs	r1, #0
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f001 ffc8 	bl	8006238 <HAL_I2CEx_ConfigAnalogFilter>
}
 80042a8:	bf00      	nop
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40005800 	.word	0x40005800
 80042b4:	00702681 	.word	0x00702681

080042b8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08a      	sub	sp, #40	@ 0x28
 80042bc:	af04      	add	r7, sp, #16
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	4608      	mov	r0, r1
 80042c2:	4611      	mov	r1, r2
 80042c4:	461a      	mov	r2, r3
 80042c6:	4603      	mov	r3, r0
 80042c8:	72fb      	strb	r3, [r7, #11]
 80042ca:	460b      	mov	r3, r1
 80042cc:	813b      	strh	r3, [r7, #8]
 80042ce:	4613      	mov	r3, r2
 80042d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80042d2:	2300      	movs	r3, #0
 80042d4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80042d6:	7afb      	ldrb	r3, [r7, #11]
 80042d8:	b299      	uxth	r1, r3
 80042da:	88f8      	ldrh	r0, [r7, #6]
 80042dc:	893a      	ldrh	r2, [r7, #8]
 80042de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80042e2:	9302      	str	r3, [sp, #8]
 80042e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80042e6:	9301      	str	r3, [sp, #4]
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	4603      	mov	r3, r0
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f001 fbc6 	bl	8005a80 <HAL_I2C_Mem_Read>
 80042f4:	4603      	mov	r3, r0
 80042f6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80042f8:	7dfb      	ldrb	r3, [r7, #23]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d004      	beq.n	8004308 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80042fe:	7afb      	ldrb	r3, [r7, #11]
 8004300:	4619      	mov	r1, r3
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 f832 	bl	800436c <I2Cx_Error>
  }
  return status;
 8004308:	7dfb      	ldrb	r3, [r7, #23]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3718      	adds	r7, #24
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b08a      	sub	sp, #40	@ 0x28
 8004316:	af04      	add	r7, sp, #16
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	4608      	mov	r0, r1
 800431c:	4611      	mov	r1, r2
 800431e:	461a      	mov	r2, r3
 8004320:	4603      	mov	r3, r0
 8004322:	72fb      	strb	r3, [r7, #11]
 8004324:	460b      	mov	r3, r1
 8004326:	813b      	strh	r3, [r7, #8]
 8004328:	4613      	mov	r3, r2
 800432a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004330:	7afb      	ldrb	r3, [r7, #11]
 8004332:	b299      	uxth	r1, r3
 8004334:	88f8      	ldrh	r0, [r7, #6]
 8004336:	893a      	ldrh	r2, [r7, #8]
 8004338:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800433c:	9302      	str	r3, [sp, #8]
 800433e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004340:	9301      	str	r3, [sp, #4]
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	4603      	mov	r3, r0
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f001 fa85 	bl	8005858 <HAL_I2C_Mem_Write>
 800434e:	4603      	mov	r3, r0
 8004350:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004352:	7dfb      	ldrb	r3, [r7, #23]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d004      	beq.n	8004362 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004358:	7afb      	ldrb	r3, [r7, #11]
 800435a:	4619      	mov	r1, r3
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 f805 	bl	800436c <I2Cx_Error>
  }
  return status;
 8004362:	7dfb      	ldrb	r3, [r7, #23]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	460b      	mov	r3, r1
 8004376:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f001 fa3d 	bl	80057f8 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff ff6c 	bl	800425c <I2Cx_Init>
}
 8004384:	bf00      	nop
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8004390:	4802      	ldr	r0, [pc, #8]	@ (800439c <SENSOR_IO_Init+0x10>)
 8004392:	f7ff ff63 	bl	800425c <I2Cx_Init>
}
 8004396:	bf00      	nop
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	20000a88 	.word	0x20000a88

080043a0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af02      	add	r7, sp, #8
 80043a6:	4603      	mov	r3, r0
 80043a8:	71fb      	strb	r3, [r7, #7]
 80043aa:	460b      	mov	r3, r1
 80043ac:	71bb      	strb	r3, [r7, #6]
 80043ae:	4613      	mov	r3, r2
 80043b0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80043b2:	79bb      	ldrb	r3, [r7, #6]
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	79f9      	ldrb	r1, [r7, #7]
 80043b8:	2301      	movs	r3, #1
 80043ba:	9301      	str	r3, [sp, #4]
 80043bc:	1d7b      	adds	r3, r7, #5
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	2301      	movs	r3, #1
 80043c2:	4803      	ldr	r0, [pc, #12]	@ (80043d0 <SENSOR_IO_Write+0x30>)
 80043c4:	f7ff ffa5 	bl	8004312 <I2Cx_WriteMultiple>
}
 80043c8:	bf00      	nop
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	20000a88 	.word	0x20000a88

080043d4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af02      	add	r7, sp, #8
 80043da:	4603      	mov	r3, r0
 80043dc:	460a      	mov	r2, r1
 80043de:	71fb      	strb	r3, [r7, #7]
 80043e0:	4613      	mov	r3, r2
 80043e2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80043e4:	2300      	movs	r3, #0
 80043e6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80043e8:	79bb      	ldrb	r3, [r7, #6]
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	79f9      	ldrb	r1, [r7, #7]
 80043ee:	2301      	movs	r3, #1
 80043f0:	9301      	str	r3, [sp, #4]
 80043f2:	f107 030f 	add.w	r3, r7, #15
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	2301      	movs	r3, #1
 80043fa:	4804      	ldr	r0, [pc, #16]	@ (800440c <SENSOR_IO_Read+0x38>)
 80043fc:	f7ff ff5c 	bl	80042b8 <I2Cx_ReadMultiple>

  return read_value;
 8004400:	7bfb      	ldrb	r3, [r7, #15]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	20000a88 	.word	0x20000a88

08004410 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af02      	add	r7, sp, #8
 8004416:	603a      	str	r2, [r7, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	4603      	mov	r3, r0
 800441c:	71fb      	strb	r3, [r7, #7]
 800441e:	460b      	mov	r3, r1
 8004420:	71bb      	strb	r3, [r7, #6]
 8004422:	4613      	mov	r3, r2
 8004424:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8004426:	79bb      	ldrb	r3, [r7, #6]
 8004428:	b29a      	uxth	r2, r3
 800442a:	79f9      	ldrb	r1, [r7, #7]
 800442c:	88bb      	ldrh	r3, [r7, #4]
 800442e:	9301      	str	r3, [sp, #4]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	2301      	movs	r3, #1
 8004436:	4804      	ldr	r0, [pc, #16]	@ (8004448 <SENSOR_IO_ReadMultiple+0x38>)
 8004438:	f7ff ff3e 	bl	80042b8 <I2Cx_ReadMultiple>
 800443c:	4603      	mov	r3, r0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	20000a88 	.word	0x20000a88

0800444c <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a15      	ldr	r2, [pc, #84]	@ (80044b0 <MX_USART1_UART_Init+0x64>)
 800445c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004464:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	220c      	movs	r2, #12
 800447c:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f004 f8e2 	bl	8008660 <HAL_UART_Init>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <MX_USART1_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40013800 	.word	0x40013800

080044b4 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80044bc:	4b09      	ldr	r3, [pc, #36]	@ (80044e4 <__io_putchar+0x30>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	461a      	mov	r2, r3
 80044c2:	4613      	mov	r3, r2
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	4413      	add	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4a07      	ldr	r2, [pc, #28]	@ (80044e8 <__io_putchar+0x34>)
 80044cc:	1898      	adds	r0, r3, r2
 80044ce:	1d39      	adds	r1, r7, #4
 80044d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80044d4:	2201      	movs	r2, #1
 80044d6:	f004 f911 	bl	80086fc <HAL_UART_Transmit>
  return ch;
 80044da:	687b      	ldr	r3, [r7, #4]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	20000a84 	.word	0x20000a84
 80044e8:	200009fc 	.word	0x200009fc

080044ec <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b0ac      	sub	sp, #176	@ 0xb0
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044f4:	f107 0314 	add.w	r3, r7, #20
 80044f8:	2288      	movs	r2, #136	@ 0x88
 80044fa:	2100      	movs	r1, #0
 80044fc:	4618      	mov	r0, r3
 80044fe:	f007 f85c 	bl	800b5ba <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004502:	2301      	movs	r3, #1
 8004504:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004506:	2300      	movs	r3, #0
 8004508:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800450a:	f107 0314 	add.w	r3, r7, #20
 800450e:	4618      	mov	r0, r3
 8004510:	f002 ff9c 	bl	800744c <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004514:	4b22      	ldr	r3, [pc, #136]	@ (80045a0 <USART1_MspInit+0xb4>)
 8004516:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004518:	4a21      	ldr	r2, [pc, #132]	@ (80045a0 <USART1_MspInit+0xb4>)
 800451a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800451e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004520:	4b1f      	ldr	r3, [pc, #124]	@ (80045a0 <USART1_MspInit+0xb4>)
 8004522:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004524:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004528:	613b      	str	r3, [r7, #16]
 800452a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800452c:	4b1c      	ldr	r3, [pc, #112]	@ (80045a0 <USART1_MspInit+0xb4>)
 800452e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004530:	4a1b      	ldr	r2, [pc, #108]	@ (80045a0 <USART1_MspInit+0xb4>)
 8004532:	f043 0302 	orr.w	r3, r3, #2
 8004536:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004538:	4b19      	ldr	r3, [pc, #100]	@ (80045a0 <USART1_MspInit+0xb4>)
 800453a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8004544:	2340      	movs	r3, #64	@ 0x40
 8004546:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800454a:	2302      	movs	r3, #2
 800454c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004550:	2300      	movs	r3, #0
 8004552:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004556:	2303      	movs	r3, #3
 8004558:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 800455c:	2307      	movs	r3, #7
 800455e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8004562:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004566:	4619      	mov	r1, r3
 8004568:	480e      	ldr	r0, [pc, #56]	@ (80045a4 <USART1_MspInit+0xb8>)
 800456a:	f000 fd9f 	bl	80050ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 800456e:	2380      	movs	r3, #128	@ 0x80
 8004570:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004574:	2302      	movs	r3, #2
 8004576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457a:	2300      	movs	r3, #0
 800457c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004580:	2303      	movs	r3, #3
 8004582:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 8004586:	2307      	movs	r3, #7
 8004588:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 800458c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004590:	4619      	mov	r1, r3
 8004592:	4804      	ldr	r0, [pc, #16]	@ (80045a4 <USART1_MspInit+0xb8>)
 8004594:	f000 fd8a 	bl	80050ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 8004598:	bf00      	nop
 800459a:	37b0      	adds	r7, #176	@ 0xb0
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40021000 	.word	0x40021000
 80045a4:	48000400 	.word	0x48000400

080045a8 <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80045ae:	2300      	movs	r3, #0
 80045b0:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 80045b2:	4b12      	ldr	r3, [pc, #72]	@ (80045fc <BSP_SPI3_Init+0x54>)
 80045b4:	4a12      	ldr	r2, [pc, #72]	@ (8004600 <BSP_SPI3_Init+0x58>)
 80045b6:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 80045b8:	4b12      	ldr	r3, [pc, #72]	@ (8004604 <BSP_SPI3_Init+0x5c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	4911      	ldr	r1, [pc, #68]	@ (8004604 <BSP_SPI3_Init+0x5c>)
 80045c0:	600a      	str	r2, [r1, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d114      	bne.n	80045f0 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 80045c6:	480d      	ldr	r0, [pc, #52]	@ (80045fc <BSP_SPI3_Init+0x54>)
 80045c8:	f003 fed8 	bl	800837c <HAL_SPI_GetState>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10e      	bne.n	80045f0 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 80045d2:	480a      	ldr	r0, [pc, #40]	@ (80045fc <BSP_SPI3_Init+0x54>)
 80045d4:	f000 f882 	bl	80046dc <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d108      	bne.n	80045f0 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 80045de:	4807      	ldr	r0, [pc, #28]	@ (80045fc <BSP_SPI3_Init+0x54>)
 80045e0:	f000 f83a 	bl	8004658 <MX_SPI3_Init>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 80045ea:	f06f 0307 	mvn.w	r3, #7
 80045ee:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 80045f0:	687b      	ldr	r3, [r7, #4]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20000adc 	.word	0x20000adc
 8004600:	40003c00 	.word	0x40003c00
 8004604:	20000b40 	.word	0x20000b40

08004608 <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af02      	add	r7, sp, #8
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	4613      	mov	r3, r2
 8004614:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8004616:	2300      	movs	r3, #0
 8004618:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004620:	9200      	str	r2, [sp, #0]
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	68f9      	ldr	r1, [r7, #12]
 8004626:	4807      	ldr	r0, [pc, #28]	@ (8004644 <BSP_SPI3_SendRecv+0x3c>)
 8004628:	f003 fc89 	bl	8007f3e <HAL_SPI_TransmitReceive>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004632:	f06f 0305 	mvn.w	r3, #5
 8004636:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8004638:	697b      	ldr	r3, [r7, #20]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	20000adc 	.word	0x20000adc

08004648 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800464c:	f000 fa82 	bl	8004b54 <HAL_GetTick>
 8004650:	4603      	mov	r3, r0
}
 8004652:	4618      	mov	r0, r3
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a1c      	ldr	r2, [pc, #112]	@ (80046d8 <MX_SPI3_Init+0x80>)
 8004668:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004670:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800467e:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004692:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2207      	movs	r2, #7
 80046b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2208      	movs	r2, #8
 80046bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f003 fb90 	bl	8007de4 <HAL_SPI_Init>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40003c00 	.word	0x40003c00

080046dc <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08a      	sub	sp, #40	@ 0x28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80046e4:	4b27      	ldr	r3, [pc, #156]	@ (8004784 <SPI3_MspInit+0xa8>)
 80046e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e8:	4a26      	ldr	r2, [pc, #152]	@ (8004784 <SPI3_MspInit+0xa8>)
 80046ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80046f0:	4b24      	ldr	r3, [pc, #144]	@ (8004784 <SPI3_MspInit+0xa8>)
 80046f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046f8:	613b      	str	r3, [r7, #16]
 80046fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046fc:	4b21      	ldr	r3, [pc, #132]	@ (8004784 <SPI3_MspInit+0xa8>)
 80046fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004700:	4a20      	ldr	r2, [pc, #128]	@ (8004784 <SPI3_MspInit+0xa8>)
 8004702:	f043 0304 	orr.w	r3, r3, #4
 8004706:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004708:	4b1e      	ldr	r3, [pc, #120]	@ (8004784 <SPI3_MspInit+0xa8>)
 800470a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	60fb      	str	r3, [r7, #12]
 8004712:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 8004714:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800471a:	2302      	movs	r3, #2
 800471c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800471e:	2300      	movs	r3, #0
 8004720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004722:	2303      	movs	r3, #3
 8004724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 8004726:	2306      	movs	r3, #6
 8004728:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 800472a:	f107 0314 	add.w	r3, r7, #20
 800472e:	4619      	mov	r1, r3
 8004730:	4815      	ldr	r0, [pc, #84]	@ (8004788 <SPI3_MspInit+0xac>)
 8004732:	f000 fcbb 	bl	80050ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 8004736:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800473a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800473c:	2302      	movs	r3, #2
 800473e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004740:	2300      	movs	r3, #0
 8004742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004744:	2303      	movs	r3, #3
 8004746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 8004748:	2306      	movs	r3, #6
 800474a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 800474c:	f107 0314 	add.w	r3, r7, #20
 8004750:	4619      	mov	r1, r3
 8004752:	480d      	ldr	r0, [pc, #52]	@ (8004788 <SPI3_MspInit+0xac>)
 8004754:	f000 fcaa 	bl	80050ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 8004758:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800475c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800475e:	2302      	movs	r3, #2
 8004760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004762:	2300      	movs	r3, #0
 8004764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004766:	2303      	movs	r3, #3
 8004768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 800476a:	2306      	movs	r3, #6
 800476c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800476e:	f107 0314 	add.w	r3, r7, #20
 8004772:	4619      	mov	r1, r3
 8004774:	4804      	ldr	r0, [pc, #16]	@ (8004788 <SPI3_MspInit+0xac>)
 8004776:	f000 fc99 	bl	80050ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 800477a:	bf00      	nop
 800477c:	3728      	adds	r7, #40	@ 0x28
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40021000 	.word	0x40021000
 8004788:	48000800 	.word	0x48000800

0800478c <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8004796:	2300      	movs	r3, #0
 8004798:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800479a:	4b1b      	ldr	r3, [pc, #108]	@ (8004808 <BSP_GYRO_Init+0x7c>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	4798      	blx	r3
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b6a      	cmp	r3, #106	@ 0x6a
 80047a4:	d002      	beq.n	80047ac <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	73fb      	strb	r3, [r7, #15]
 80047aa:	e028      	b.n	80047fe <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 80047ac:	4b17      	ldr	r3, [pc, #92]	@ (800480c <BSP_GYRO_Init+0x80>)
 80047ae:	4a16      	ldr	r2, [pc, #88]	@ (8004808 <BSP_GYRO_Init+0x7c>)
 80047b0:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 80047b2:	2300      	movs	r3, #0
 80047b4:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 80047b6:	2330      	movs	r3, #48	@ 0x30
 80047b8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80047ba:	2300      	movs	r3, #0
 80047bc:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 80047be:	2300      	movs	r3, #0
 80047c0:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80047c2:	2340      	movs	r3, #64	@ 0x40
 80047c4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 80047c6:	2300      	movs	r3, #0
 80047c8:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 80047ca:	230c      	movs	r3, #12
 80047cc:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 80047ce:	7aba      	ldrb	r2, [r7, #10]
 80047d0:	797b      	ldrb	r3, [r7, #5]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80047d8:	7a3b      	ldrb	r3, [r7, #8]
 80047da:	f043 0304 	orr.w	r3, r3, #4
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	021b      	lsls	r3, r3, #8
 80047e2:	b21a      	sxth	r2, r3
 80047e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	b21b      	sxth	r3, r3
 80047ec:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 80047ee:	4b07      	ldr	r3, [pc, #28]	@ (800480c <BSP_GYRO_Init+0x80>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	89ba      	ldrh	r2, [r7, #12]
 80047f6:	4610      	mov	r0, r2
 80047f8:	4798      	blx	r3
    
    ret = GYRO_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	2000001c 	.word	0x2000001c
 800480c:	20000b44 	.word	0x20000b44

08004810 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8004818:	4b08      	ldr	r3, [pc, #32]	@ (800483c <BSP_GYRO_GetXYZ+0x2c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d009      	beq.n	8004834 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8004820:	4b06      	ldr	r3, [pc, #24]	@ (800483c <BSP_GYRO_GetXYZ+0x2c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004826:	2b00      	cmp	r3, #0
 8004828:	d004      	beq.n	8004834 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 800482a:	4b04      	ldr	r3, [pc, #16]	@ (800483c <BSP_GYRO_GetXYZ+0x2c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	4798      	blx	r3
    }
  }
}
 8004834:	bf00      	nop
 8004836:	3708      	adds	r7, #8
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	20000b44 	.word	0x20000b44

08004840 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	4603      	mov	r3, r0
 8004848:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800484a:	2300      	movs	r3, #0
 800484c:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800484e:	2111      	movs	r1, #17
 8004850:	20d4      	movs	r0, #212	@ 0xd4
 8004852:	f7ff fdbf 	bl	80043d4 <SENSOR_IO_Read>
 8004856:	4603      	mov	r3, r0
 8004858:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800485e:	7bbb      	ldrb	r3, [r7, #14]
 8004860:	f003 0303 	and.w	r3, r3, #3
 8004864:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8004866:	7bba      	ldrb	r2, [r7, #14]
 8004868:	7bfb      	ldrb	r3, [r7, #15]
 800486a:	4313      	orrs	r3, r2
 800486c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 800486e:	7bbb      	ldrb	r3, [r7, #14]
 8004870:	461a      	mov	r2, r3
 8004872:	2111      	movs	r1, #17
 8004874:	20d4      	movs	r0, #212	@ 0xd4
 8004876:	f7ff fd93 	bl	80043a0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800487a:	2112      	movs	r1, #18
 800487c:	20d4      	movs	r0, #212	@ 0xd4
 800487e:	f7ff fda9 	bl	80043d4 <SENSOR_IO_Read>
 8004882:	4603      	mov	r3, r0
 8004884:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8004886:	88fb      	ldrh	r3, [r7, #6]
 8004888:	0a1b      	lsrs	r3, r3, #8
 800488a:	b29b      	uxth	r3, r3
 800488c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800488e:	7bbb      	ldrb	r3, [r7, #14]
 8004890:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8004894:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8004896:	7bba      	ldrb	r2, [r7, #14]
 8004898:	7bfb      	ldrb	r3, [r7, #15]
 800489a:	4313      	orrs	r3, r2
 800489c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800489e:	7bbb      	ldrb	r3, [r7, #14]
 80048a0:	461a      	mov	r2, r3
 80048a2:	2112      	movs	r1, #18
 80048a4:	20d4      	movs	r0, #212	@ 0xd4
 80048a6:	f7ff fd7b 	bl	80043a0 <SENSOR_IO_Write>
}
 80048aa:	bf00      	nop
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b082      	sub	sp, #8
 80048b6:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80048b8:	2300      	movs	r3, #0
 80048ba:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80048bc:	2111      	movs	r1, #17
 80048be:	20d4      	movs	r0, #212	@ 0xd4
 80048c0:	f7ff fd88 	bl	80043d4 <SENSOR_IO_Read>
 80048c4:	4603      	mov	r3, r0
 80048c6:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80048c8:	79fb      	ldrb	r3, [r7, #7]
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80048d0:	79fb      	ldrb	r3, [r7, #7]
 80048d2:	461a      	mov	r2, r3
 80048d4:	2111      	movs	r1, #17
 80048d6:	20d4      	movs	r0, #212	@ 0xd4
 80048d8:	f7ff fd62 	bl	80043a0 <SENSOR_IO_Write>
}
 80048dc:	bf00      	nop
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80048e8:	f7ff fd50 	bl	800438c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80048ec:	210f      	movs	r1, #15
 80048ee:	20d4      	movs	r0, #212	@ 0xd4
 80048f0:	f7ff fd70 	bl	80043d4 <SENSOR_IO_Read>
 80048f4:	4603      	mov	r3, r0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	bd80      	pop	{r7, pc}

080048fa <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b084      	sub	sp, #16
 80048fe:	af00      	add	r7, sp, #0
 8004900:	4603      	mov	r3, r0
 8004902:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004904:	2300      	movs	r3, #0
 8004906:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8004908:	2116      	movs	r1, #22
 800490a:	20d4      	movs	r0, #212	@ 0xd4
 800490c:	f7ff fd62 	bl	80043d4 <SENSOR_IO_Read>
 8004910:	4603      	mov	r3, r0
 8004912:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800491a:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800491c:	88fb      	ldrh	r3, [r7, #6]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8004922:	7bfb      	ldrb	r3, [r7, #15]
 8004924:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004928:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 800492a:	7bfb      	ldrb	r3, [r7, #15]
 800492c:	461a      	mov	r2, r3
 800492e:	2116      	movs	r1, #22
 8004930:	20d4      	movs	r0, #212	@ 0xd4
 8004932:	f7ff fd35 	bl	80043a0 <SENSOR_IO_Write>
}
 8004936:	bf00      	nop
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8004948:	2300      	movs	r3, #0
 800494a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800494c:	2300      	movs	r3, #0
 800494e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8004956:	2111      	movs	r1, #17
 8004958:	20d4      	movs	r0, #212	@ 0xd4
 800495a:	f7ff fd3b 	bl	80043d4 <SENSOR_IO_Read>
 800495e:	4603      	mov	r3, r0
 8004960:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8004962:	f107 0208 	add.w	r2, r7, #8
 8004966:	2306      	movs	r3, #6
 8004968:	2122      	movs	r1, #34	@ 0x22
 800496a:	20d4      	movs	r0, #212	@ 0xd4
 800496c:	f7ff fd50 	bl	8004410 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8004970:	2300      	movs	r3, #0
 8004972:	77fb      	strb	r3, [r7, #31]
 8004974:	e01a      	b.n	80049ac <LSM6DSL_GyroReadXYZAngRate+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8004976:	7ffb      	ldrb	r3, [r7, #31]
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	3301      	adds	r3, #1
 800497c:	3320      	adds	r3, #32
 800497e:	443b      	add	r3, r7
 8004980:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004984:	021b      	lsls	r3, r3, #8
 8004986:	b29b      	uxth	r3, r3
 8004988:	7ffa      	ldrb	r2, [r7, #31]
 800498a:	0052      	lsls	r2, r2, #1
 800498c:	3220      	adds	r2, #32
 800498e:	443a      	add	r2, r7
 8004990:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8004994:	4413      	add	r3, r2
 8004996:	b29a      	uxth	r2, r3
 8004998:	7ffb      	ldrb	r3, [r7, #31]
 800499a:	b212      	sxth	r2, r2
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	3320      	adds	r3, #32
 80049a0:	443b      	add	r3, r7
 80049a2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80049a6:	7ffb      	ldrb	r3, [r7, #31]
 80049a8:	3301      	adds	r3, #1
 80049aa:	77fb      	strb	r3, [r7, #31]
 80049ac:	7ffb      	ldrb	r3, [r7, #31]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d9e1      	bls.n	8004976 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  printf("%d\n", ctrlg);
 80049b2:	7dfb      	ldrb	r3, [r7, #23]
 80049b4:	4619      	mov	r1, r3
 80049b6:	482d      	ldr	r0, [pc, #180]	@ (8004a6c <LSM6DSL_GyroReadXYZAngRate+0x12c>)
 80049b8:	f006 fdaa 	bl	800b510 <iprintf>
  switch(ctrlg & 0x0C)
 80049bc:	7dfb      	ldrb	r3, [r7, #23]
 80049be:	f003 030c 	and.w	r3, r3, #12
 80049c2:	2b0c      	cmp	r3, #12
 80049c4:	d828      	bhi.n	8004a18 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 80049c6:	a201      	add	r2, pc, #4	@ (adr r2, 80049cc <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 80049c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049cc:	08004a01 	.word	0x08004a01
 80049d0:	08004a19 	.word	0x08004a19
 80049d4:	08004a19 	.word	0x08004a19
 80049d8:	08004a19 	.word	0x08004a19
 80049dc:	08004a07 	.word	0x08004a07
 80049e0:	08004a19 	.word	0x08004a19
 80049e4:	08004a19 	.word	0x08004a19
 80049e8:	08004a19 	.word	0x08004a19
 80049ec:	08004a0d 	.word	0x08004a0d
 80049f0:	08004a19 	.word	0x08004a19
 80049f4:	08004a19 	.word	0x08004a19
 80049f8:	08004a19 	.word	0x08004a19
 80049fc:	08004a13 	.word	0x08004a13
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8004a00:	4b1b      	ldr	r3, [pc, #108]	@ (8004a70 <LSM6DSL_GyroReadXYZAngRate+0x130>)
 8004a02:	61bb      	str	r3, [r7, #24]
    break;
 8004a04:	e008      	b.n	8004a18 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8004a06:	4b1b      	ldr	r3, [pc, #108]	@ (8004a74 <LSM6DSL_GyroReadXYZAngRate+0x134>)
 8004a08:	61bb      	str	r3, [r7, #24]
    break;
 8004a0a:	e005      	b.n	8004a18 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8004a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8004a78 <LSM6DSL_GyroReadXYZAngRate+0x138>)
 8004a0e:	61bb      	str	r3, [r7, #24]
    break;
 8004a10:	e002      	b.n	8004a18 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8004a12:	4b1a      	ldr	r3, [pc, #104]	@ (8004a7c <LSM6DSL_GyroReadXYZAngRate+0x13c>)
 8004a14:	61bb      	str	r3, [r7, #24]
    break;    
 8004a16:	bf00      	nop
  }
  printf("%f\n", sensitivity);
 8004a18:	69b8      	ldr	r0, [r7, #24]
 8004a1a:	f7fb fd95 	bl	8000548 <__aeabi_f2d>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	4817      	ldr	r0, [pc, #92]	@ (8004a80 <LSM6DSL_GyroReadXYZAngRate+0x140>)
 8004a24:	f006 fd74 	bl	800b510 <iprintf>
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8004a28:	2300      	movs	r3, #0
 8004a2a:	77fb      	strb	r3, [r7, #31]
 8004a2c:	e016      	b.n	8004a5c <LSM6DSL_GyroReadXYZAngRate+0x11c>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8004a2e:	7ffb      	ldrb	r3, [r7, #31]
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	3320      	adds	r3, #32
 8004a34:	443b      	add	r3, r7
 8004a36:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8004a3a:	ee07 3a90 	vmov	s15, r3
 8004a3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a42:	7ffb      	ldrb	r3, [r7, #31]
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	4413      	add	r3, r2
 8004a4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8004a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a52:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8004a56:	7ffb      	ldrb	r3, [r7, #31]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	77fb      	strb	r3, [r7, #31]
 8004a5c:	7ffb      	ldrb	r3, [r7, #31]
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d9e5      	bls.n	8004a2e <LSM6DSL_GyroReadXYZAngRate+0xee>
  }
}
 8004a62:	bf00      	nop
 8004a64:	bf00      	nop
 8004a66:	3720      	adds	r7, #32
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	0800d450 	.word	0x0800d450
 8004a70:	410c0000 	.word	0x410c0000
 8004a74:	418c0000 	.word	0x418c0000
 8004a78:	420c0000 	.word	0x420c0000
 8004a7c:	428c0000 	.word	0x428c0000
 8004a80:	0800d454 	.word	0x0800d454

08004a84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a8e:	2003      	movs	r0, #3
 8004a90:	f000 f960 	bl	8004d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a94:	2000      	movs	r0, #0
 8004a96:	f000 f80d 	bl	8004ab4 <HAL_InitTick>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d002      	beq.n	8004aa6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	71fb      	strb	r3, [r7, #7]
 8004aa4:	e001      	b.n	8004aaa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004aa6:	f7fe fe81 	bl	80037ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004ac0:	4b17      	ldr	r3, [pc, #92]	@ (8004b20 <HAL_InitTick+0x6c>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d023      	beq.n	8004b10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004ac8:	4b16      	ldr	r3, [pc, #88]	@ (8004b24 <HAL_InitTick+0x70>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b14      	ldr	r3, [pc, #80]	@ (8004b20 <HAL_InitTick+0x6c>)
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 f96d 	bl	8004dbe <HAL_SYSTICK_Config>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10f      	bne.n	8004b0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b0f      	cmp	r3, #15
 8004aee:	d809      	bhi.n	8004b04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004af0:	2200      	movs	r2, #0
 8004af2:	6879      	ldr	r1, [r7, #4]
 8004af4:	f04f 30ff 	mov.w	r0, #4294967295
 8004af8:	f000 f937 	bl	8004d6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004afc:	4a0a      	ldr	r2, [pc, #40]	@ (8004b28 <HAL_InitTick+0x74>)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	e007      	b.n	8004b14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	73fb      	strb	r3, [r7, #15]
 8004b08:	e004      	b.n	8004b14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	73fb      	strb	r3, [r7, #15]
 8004b0e:	e001      	b.n	8004b14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20000054 	.word	0x20000054
 8004b24:	20000004 	.word	0x20000004
 8004b28:	20000050 	.word	0x20000050

08004b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004b30:	4b06      	ldr	r3, [pc, #24]	@ (8004b4c <HAL_IncTick+0x20>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	461a      	mov	r2, r3
 8004b36:	4b06      	ldr	r3, [pc, #24]	@ (8004b50 <HAL_IncTick+0x24>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	4a04      	ldr	r2, [pc, #16]	@ (8004b50 <HAL_IncTick+0x24>)
 8004b3e:	6013      	str	r3, [r2, #0]
}
 8004b40:	bf00      	nop
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	20000054 	.word	0x20000054
 8004b50:	20000b48 	.word	0x20000b48

08004b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  return uwTick;
 8004b58:	4b03      	ldr	r3, [pc, #12]	@ (8004b68 <HAL_GetTick+0x14>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	20000b48 	.word	0x20000b48

08004b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b74:	f7ff ffee 	bl	8004b54 <HAL_GetTick>
 8004b78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b84:	d005      	beq.n	8004b92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004b86:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb0 <HAL_Delay+0x44>)
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4413      	add	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b92:	bf00      	nop
 8004b94:	f7ff ffde 	bl	8004b54 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d8f7      	bhi.n	8004b94 <HAL_Delay+0x28>
  {
  }
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	20000054 	.word	0x20000054

08004bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004be6:	4a04      	ldr	r2, [pc, #16]	@ (8004bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	60d3      	str	r3, [r2, #12]
}
 8004bec:	bf00      	nop
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	e000ed00 	.word	0xe000ed00

08004bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c00:	4b04      	ldr	r3, [pc, #16]	@ (8004c14 <__NVIC_GetPriorityGrouping+0x18>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	0a1b      	lsrs	r3, r3, #8
 8004c06:	f003 0307 	and.w	r3, r3, #7
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	e000ed00 	.word	0xe000ed00

08004c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	db0b      	blt.n	8004c42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	f003 021f 	and.w	r2, r3, #31
 8004c30:	4907      	ldr	r1, [pc, #28]	@ (8004c50 <__NVIC_EnableIRQ+0x38>)
 8004c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c36:	095b      	lsrs	r3, r3, #5
 8004c38:	2001      	movs	r0, #1
 8004c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	e000e100 	.word	0xe000e100

08004c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	6039      	str	r1, [r7, #0]
 8004c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	db0a      	blt.n	8004c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	490c      	ldr	r1, [pc, #48]	@ (8004ca0 <__NVIC_SetPriority+0x4c>)
 8004c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c72:	0112      	lsls	r2, r2, #4
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	440b      	add	r3, r1
 8004c78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c7c:	e00a      	b.n	8004c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	4908      	ldr	r1, [pc, #32]	@ (8004ca4 <__NVIC_SetPriority+0x50>)
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	3b04      	subs	r3, #4
 8004c8c:	0112      	lsls	r2, r2, #4
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	440b      	add	r3, r1
 8004c92:	761a      	strb	r2, [r3, #24]
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	e000e100 	.word	0xe000e100
 8004ca4:	e000ed00 	.word	0xe000ed00

08004ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b089      	sub	sp, #36	@ 0x24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f1c3 0307 	rsb	r3, r3, #7
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	bf28      	it	cs
 8004cc6:	2304      	movcs	r3, #4
 8004cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	3304      	adds	r3, #4
 8004cce:	2b06      	cmp	r3, #6
 8004cd0:	d902      	bls.n	8004cd8 <NVIC_EncodePriority+0x30>
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	3b03      	subs	r3, #3
 8004cd6:	e000      	b.n	8004cda <NVIC_EncodePriority+0x32>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	43da      	mvns	r2, r3
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	401a      	ands	r2, r3
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cfa:	43d9      	mvns	r1, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d00:	4313      	orrs	r3, r2
         );
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3724      	adds	r7, #36	@ 0x24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
	...

08004d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d20:	d301      	bcc.n	8004d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d22:	2301      	movs	r3, #1
 8004d24:	e00f      	b.n	8004d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d26:	4a0a      	ldr	r2, [pc, #40]	@ (8004d50 <SysTick_Config+0x40>)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d2e:	210f      	movs	r1, #15
 8004d30:	f04f 30ff 	mov.w	r0, #4294967295
 8004d34:	f7ff ff8e 	bl	8004c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d38:	4b05      	ldr	r3, [pc, #20]	@ (8004d50 <SysTick_Config+0x40>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d3e:	4b04      	ldr	r3, [pc, #16]	@ (8004d50 <SysTick_Config+0x40>)
 8004d40:	2207      	movs	r2, #7
 8004d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	e000e010 	.word	0xe000e010

08004d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7ff ff29 	bl	8004bb4 <__NVIC_SetPriorityGrouping>
}
 8004d62:	bf00      	nop
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b086      	sub	sp, #24
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	4603      	mov	r3, r0
 8004d72:	60b9      	str	r1, [r7, #8]
 8004d74:	607a      	str	r2, [r7, #4]
 8004d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d7c:	f7ff ff3e 	bl	8004bfc <__NVIC_GetPriorityGrouping>
 8004d80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	68b9      	ldr	r1, [r7, #8]
 8004d86:	6978      	ldr	r0, [r7, #20]
 8004d88:	f7ff ff8e 	bl	8004ca8 <NVIC_EncodePriority>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d92:	4611      	mov	r1, r2
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff ff5d 	bl	8004c54 <__NVIC_SetPriority>
}
 8004d9a:	bf00      	nop
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b082      	sub	sp, #8
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	4603      	mov	r3, r0
 8004daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff ff31 	bl	8004c18 <__NVIC_EnableIRQ>
}
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b082      	sub	sp, #8
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7ff ffa2 	bl	8004d10 <SysTick_Config>
 8004dcc:	4603      	mov	r3, r0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
	...

08004dd8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e0ac      	b.n	8004f44 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 f8b2 	bl	8004f58 <DFSDM_GetChannelFromInstance>
 8004df4:	4603      	mov	r3, r0
 8004df6:	4a55      	ldr	r2, [pc, #340]	@ (8004f4c <HAL_DFSDM_ChannelInit+0x174>)
 8004df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e09f      	b.n	8004f44 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fe fcf5 	bl	80037f4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004e0a:	4b51      	ldr	r3, [pc, #324]	@ (8004f50 <HAL_DFSDM_ChannelInit+0x178>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	4a4f      	ldr	r2, [pc, #316]	@ (8004f50 <HAL_DFSDM_ChannelInit+0x178>)
 8004e12:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004e14:	4b4e      	ldr	r3, [pc, #312]	@ (8004f50 <HAL_DFSDM_ChannelInit+0x178>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d125      	bne.n	8004e68 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004e1c:	4b4d      	ldr	r3, [pc, #308]	@ (8004f54 <HAL_DFSDM_ChannelInit+0x17c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a4c      	ldr	r2, [pc, #304]	@ (8004f54 <HAL_DFSDM_ChannelInit+0x17c>)
 8004e22:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004e26:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004e28:	4b4a      	ldr	r3, [pc, #296]	@ (8004f54 <HAL_DFSDM_ChannelInit+0x17c>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	4948      	ldr	r1, [pc, #288]	@ (8004f54 <HAL_DFSDM_ChannelInit+0x17c>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004e36:	4b47      	ldr	r3, [pc, #284]	@ (8004f54 <HAL_DFSDM_ChannelInit+0x17c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a46      	ldr	r2, [pc, #280]	@ (8004f54 <HAL_DFSDM_ChannelInit+0x17c>)
 8004e3c:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8004e40:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	791b      	ldrb	r3, [r3, #4]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d108      	bne.n	8004e5c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004e4a:	4b42      	ldr	r3, [pc, #264]	@ (8004f54 <HAL_DFSDM_ChannelInit+0x17c>)
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	041b      	lsls	r3, r3, #16
 8004e56:	493f      	ldr	r1, [pc, #252]	@ (8004f54 <HAL_DFSDM_ChannelInit+0x17c>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004e5c:	4b3d      	ldr	r3, [pc, #244]	@ (8004f54 <HAL_DFSDM_ChannelInit+0x17c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a3c      	ldr	r2, [pc, #240]	@ (8004f54 <HAL_DFSDM_ChannelInit+0x17c>)
 8004e62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004e66:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8004e76:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6819      	ldr	r1, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004e86:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004e8c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 020f 	bic.w	r2, r2, #15
 8004ea4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6819      	ldr	r1, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8004ecc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6899      	ldr	r1, [r3, #8]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004edc:	3b01      	subs	r3, #1
 8004ede:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f002 0207 	and.w	r2, r2, #7
 8004ef8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6859      	ldr	r1, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f04:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004f24:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 f810 	bl	8004f58 <DFSDM_GetChannelFromInstance>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	4904      	ldr	r1, [pc, #16]	@ (8004f4c <HAL_DFSDM_ChannelInit+0x174>)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	20000b50 	.word	0x20000b50
 8004f50:	20000b4c 	.word	0x20000b4c
 8004f54:	40016000 	.word	0x40016000

08004f58 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a1c      	ldr	r2, [pc, #112]	@ (8004fd4 <DFSDM_GetChannelFromInstance+0x7c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d102      	bne.n	8004f6e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	e02b      	b.n	8004fc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a19      	ldr	r2, [pc, #100]	@ (8004fd8 <DFSDM_GetChannelFromInstance+0x80>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d102      	bne.n	8004f7c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004f76:	2301      	movs	r3, #1
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	e024      	b.n	8004fc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a17      	ldr	r2, [pc, #92]	@ (8004fdc <DFSDM_GetChannelFromInstance+0x84>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d102      	bne.n	8004f8a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004f84:	2302      	movs	r3, #2
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	e01d      	b.n	8004fc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a14      	ldr	r2, [pc, #80]	@ (8004fe0 <DFSDM_GetChannelFromInstance+0x88>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d102      	bne.n	8004f98 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004f92:	2304      	movs	r3, #4
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	e016      	b.n	8004fc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a12      	ldr	r2, [pc, #72]	@ (8004fe4 <DFSDM_GetChannelFromInstance+0x8c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d102      	bne.n	8004fa6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004fa0:	2305      	movs	r3, #5
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	e00f      	b.n	8004fc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a0f      	ldr	r2, [pc, #60]	@ (8004fe8 <DFSDM_GetChannelFromInstance+0x90>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d102      	bne.n	8004fb4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004fae:	2306      	movs	r3, #6
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	e008      	b.n	8004fc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a0d      	ldr	r2, [pc, #52]	@ (8004fec <DFSDM_GetChannelFromInstance+0x94>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d102      	bne.n	8004fc2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004fbc:	2307      	movs	r3, #7
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	e001      	b.n	8004fc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	40016000 	.word	0x40016000
 8004fd8:	40016020 	.word	0x40016020
 8004fdc:	40016040 	.word	0x40016040
 8004fe0:	40016080 	.word	0x40016080
 8004fe4:	400160a0 	.word	0x400160a0
 8004fe8:	400160c0 	.word	0x400160c0
 8004fec:	400160e0 	.word	0x400160e0

08004ff0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	607a      	str	r2, [r7, #4]
 8004ffc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8005002:	7afb      	ldrb	r3, [r7, #11]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d103      	bne.n	8005010 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	605a      	str	r2, [r3, #4]
      break;
 800500e:	e002      	b.n	8005016 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	75fb      	strb	r3, [r7, #23]
      break;
 8005014:	bf00      	nop
  }

  return status;
 8005016:	7dfb      	ldrb	r3, [r7, #23]
}
 8005018:	4618      	mov	r0, r3
 800501a:	371c      	adds	r7, #28
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e003      	b.n	8005040 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800503e:	2300      	movs	r3, #0
  }
}
 8005040:	4618      	mov	r0, r3
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	0c1b      	lsrs	r3, r3, #16
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 031f 	and.w	r3, r3, #31
 8005068:	2201      	movs	r2, #1
 800506a:	fa02 f303 	lsl.w	r3, r2, r3
 800506e:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	4b0c      	ldr	r3, [pc, #48]	@ (80050a8 <HAL_EXTI_IRQHandler+0x5c>)
 8005076:	4413      	add	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4013      	ands	r3, r2
 8005082:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d009      	beq.n	800509e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	4798      	blx	r3
    }
  }
}
 800509e:	bf00      	nop
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	40010414 	.word	0x40010414

080050ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050ba:	e17f      	b.n	80053bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	2101      	movs	r1, #1
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	fa01 f303 	lsl.w	r3, r1, r3
 80050c8:	4013      	ands	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 8171 	beq.w	80053b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f003 0303 	and.w	r3, r3, #3
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d005      	beq.n	80050ec <HAL_GPIO_Init+0x40>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f003 0303 	and.w	r3, r3, #3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d130      	bne.n	800514e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	2203      	movs	r2, #3
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	43db      	mvns	r3, r3
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4013      	ands	r3, r2
 8005102:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005122:	2201      	movs	r2, #1
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	43db      	mvns	r3, r3
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4013      	ands	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	091b      	lsrs	r3, r3, #4
 8005138:	f003 0201 	and.w	r2, r3, #1
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	2b03      	cmp	r3, #3
 8005158:	d118      	bne.n	800518c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005160:	2201      	movs	r2, #1
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	fa02 f303 	lsl.w	r3, r2, r3
 8005168:	43db      	mvns	r3, r3
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4013      	ands	r3, r2
 800516e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	08db      	lsrs	r3, r3, #3
 8005176:	f003 0201 	and.w	r2, r3, #1
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	fa02 f303 	lsl.w	r3, r2, r3
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	4313      	orrs	r3, r2
 8005184:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f003 0303 	and.w	r3, r3, #3
 8005194:	2b03      	cmp	r3, #3
 8005196:	d017      	beq.n	80051c8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	2203      	movs	r2, #3
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	43db      	mvns	r3, r3
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	4013      	ands	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	fa02 f303 	lsl.w	r3, r2, r3
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	4313      	orrs	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f003 0303 	and.w	r3, r3, #3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d123      	bne.n	800521c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	08da      	lsrs	r2, r3, #3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3208      	adds	r2, #8
 80051dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	220f      	movs	r2, #15
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	43db      	mvns	r3, r3
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	4013      	ands	r3, r2
 80051f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	fa02 f303 	lsl.w	r3, r2, r3
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	08da      	lsrs	r2, r3, #3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	3208      	adds	r2, #8
 8005216:	6939      	ldr	r1, [r7, #16]
 8005218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	2203      	movs	r2, #3
 8005228:	fa02 f303 	lsl.w	r3, r2, r3
 800522c:	43db      	mvns	r3, r3
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4013      	ands	r3, r2
 8005232:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f003 0203 	and.w	r2, r3, #3
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	4313      	orrs	r3, r2
 8005248:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 80ac 	beq.w	80053b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800525e:	4b5f      	ldr	r3, [pc, #380]	@ (80053dc <HAL_GPIO_Init+0x330>)
 8005260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005262:	4a5e      	ldr	r2, [pc, #376]	@ (80053dc <HAL_GPIO_Init+0x330>)
 8005264:	f043 0301 	orr.w	r3, r3, #1
 8005268:	6613      	str	r3, [r2, #96]	@ 0x60
 800526a:	4b5c      	ldr	r3, [pc, #368]	@ (80053dc <HAL_GPIO_Init+0x330>)
 800526c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	60bb      	str	r3, [r7, #8]
 8005274:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005276:	4a5a      	ldr	r2, [pc, #360]	@ (80053e0 <HAL_GPIO_Init+0x334>)
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	089b      	lsrs	r3, r3, #2
 800527c:	3302      	adds	r3, #2
 800527e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005282:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f003 0303 	and.w	r3, r3, #3
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	220f      	movs	r2, #15
 800528e:	fa02 f303 	lsl.w	r3, r2, r3
 8005292:	43db      	mvns	r3, r3
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	4013      	ands	r3, r2
 8005298:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80052a0:	d025      	beq.n	80052ee <HAL_GPIO_Init+0x242>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a4f      	ldr	r2, [pc, #316]	@ (80053e4 <HAL_GPIO_Init+0x338>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d01f      	beq.n	80052ea <HAL_GPIO_Init+0x23e>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a4e      	ldr	r2, [pc, #312]	@ (80053e8 <HAL_GPIO_Init+0x33c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d019      	beq.n	80052e6 <HAL_GPIO_Init+0x23a>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a4d      	ldr	r2, [pc, #308]	@ (80053ec <HAL_GPIO_Init+0x340>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d013      	beq.n	80052e2 <HAL_GPIO_Init+0x236>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a4c      	ldr	r2, [pc, #304]	@ (80053f0 <HAL_GPIO_Init+0x344>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00d      	beq.n	80052de <HAL_GPIO_Init+0x232>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a4b      	ldr	r2, [pc, #300]	@ (80053f4 <HAL_GPIO_Init+0x348>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d007      	beq.n	80052da <HAL_GPIO_Init+0x22e>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a4a      	ldr	r2, [pc, #296]	@ (80053f8 <HAL_GPIO_Init+0x34c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d101      	bne.n	80052d6 <HAL_GPIO_Init+0x22a>
 80052d2:	2306      	movs	r3, #6
 80052d4:	e00c      	b.n	80052f0 <HAL_GPIO_Init+0x244>
 80052d6:	2307      	movs	r3, #7
 80052d8:	e00a      	b.n	80052f0 <HAL_GPIO_Init+0x244>
 80052da:	2305      	movs	r3, #5
 80052dc:	e008      	b.n	80052f0 <HAL_GPIO_Init+0x244>
 80052de:	2304      	movs	r3, #4
 80052e0:	e006      	b.n	80052f0 <HAL_GPIO_Init+0x244>
 80052e2:	2303      	movs	r3, #3
 80052e4:	e004      	b.n	80052f0 <HAL_GPIO_Init+0x244>
 80052e6:	2302      	movs	r3, #2
 80052e8:	e002      	b.n	80052f0 <HAL_GPIO_Init+0x244>
 80052ea:	2301      	movs	r3, #1
 80052ec:	e000      	b.n	80052f0 <HAL_GPIO_Init+0x244>
 80052ee:	2300      	movs	r3, #0
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	f002 0203 	and.w	r2, r2, #3
 80052f6:	0092      	lsls	r2, r2, #2
 80052f8:	4093      	lsls	r3, r2
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005300:	4937      	ldr	r1, [pc, #220]	@ (80053e0 <HAL_GPIO_Init+0x334>)
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	089b      	lsrs	r3, r3, #2
 8005306:	3302      	adds	r3, #2
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800530e:	4b3b      	ldr	r3, [pc, #236]	@ (80053fc <HAL_GPIO_Init+0x350>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	43db      	mvns	r3, r3
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	4013      	ands	r3, r2
 800531c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4313      	orrs	r3, r2
 8005330:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005332:	4a32      	ldr	r2, [pc, #200]	@ (80053fc <HAL_GPIO_Init+0x350>)
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005338:	4b30      	ldr	r3, [pc, #192]	@ (80053fc <HAL_GPIO_Init+0x350>)
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	43db      	mvns	r3, r3
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	4013      	ands	r3, r2
 8005346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4313      	orrs	r3, r2
 800535a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800535c:	4a27      	ldr	r2, [pc, #156]	@ (80053fc <HAL_GPIO_Init+0x350>)
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005362:	4b26      	ldr	r3, [pc, #152]	@ (80053fc <HAL_GPIO_Init+0x350>)
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	43db      	mvns	r3, r3
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4013      	ands	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005386:	4a1d      	ldr	r2, [pc, #116]	@ (80053fc <HAL_GPIO_Init+0x350>)
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800538c:	4b1b      	ldr	r3, [pc, #108]	@ (80053fc <HAL_GPIO_Init+0x350>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	43db      	mvns	r3, r3
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	4013      	ands	r3, r2
 800539a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80053b0:	4a12      	ldr	r2, [pc, #72]	@ (80053fc <HAL_GPIO_Init+0x350>)
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	3301      	adds	r3, #1
 80053ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	fa22 f303 	lsr.w	r3, r2, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f47f ae78 	bne.w	80050bc <HAL_GPIO_Init+0x10>
  }
}
 80053cc:	bf00      	nop
 80053ce:	bf00      	nop
 80053d0:	371c      	adds	r7, #28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	40021000 	.word	0x40021000
 80053e0:	40010000 	.word	0x40010000
 80053e4:	48000400 	.word	0x48000400
 80053e8:	48000800 	.word	0x48000800
 80053ec:	48000c00 	.word	0x48000c00
 80053f0:	48001000 	.word	0x48001000
 80053f4:	48001400 	.word	0x48001400
 80053f8:	48001800 	.word	0x48001800
 80053fc:	40010400 	.word	0x40010400

08005400 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800540a:	2300      	movs	r3, #0
 800540c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800540e:	e0cd      	b.n	80055ac <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005410:	2201      	movs	r2, #1
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	4013      	ands	r3, r2
 800541c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 80c0 	beq.w	80055a6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005426:	4a68      	ldr	r2, [pc, #416]	@ (80055c8 <HAL_GPIO_DeInit+0x1c8>)
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	089b      	lsrs	r3, r3, #2
 800542c:	3302      	adds	r3, #2
 800542e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005432:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f003 0303 	and.w	r3, r3, #3
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	220f      	movs	r2, #15
 800543e:	fa02 f303 	lsl.w	r3, r2, r3
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4013      	ands	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800544e:	d025      	beq.n	800549c <HAL_GPIO_DeInit+0x9c>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a5e      	ldr	r2, [pc, #376]	@ (80055cc <HAL_GPIO_DeInit+0x1cc>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d01f      	beq.n	8005498 <HAL_GPIO_DeInit+0x98>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a5d      	ldr	r2, [pc, #372]	@ (80055d0 <HAL_GPIO_DeInit+0x1d0>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d019      	beq.n	8005494 <HAL_GPIO_DeInit+0x94>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a5c      	ldr	r2, [pc, #368]	@ (80055d4 <HAL_GPIO_DeInit+0x1d4>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d013      	beq.n	8005490 <HAL_GPIO_DeInit+0x90>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a5b      	ldr	r2, [pc, #364]	@ (80055d8 <HAL_GPIO_DeInit+0x1d8>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d00d      	beq.n	800548c <HAL_GPIO_DeInit+0x8c>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a5a      	ldr	r2, [pc, #360]	@ (80055dc <HAL_GPIO_DeInit+0x1dc>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d007      	beq.n	8005488 <HAL_GPIO_DeInit+0x88>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a59      	ldr	r2, [pc, #356]	@ (80055e0 <HAL_GPIO_DeInit+0x1e0>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d101      	bne.n	8005484 <HAL_GPIO_DeInit+0x84>
 8005480:	2306      	movs	r3, #6
 8005482:	e00c      	b.n	800549e <HAL_GPIO_DeInit+0x9e>
 8005484:	2307      	movs	r3, #7
 8005486:	e00a      	b.n	800549e <HAL_GPIO_DeInit+0x9e>
 8005488:	2305      	movs	r3, #5
 800548a:	e008      	b.n	800549e <HAL_GPIO_DeInit+0x9e>
 800548c:	2304      	movs	r3, #4
 800548e:	e006      	b.n	800549e <HAL_GPIO_DeInit+0x9e>
 8005490:	2303      	movs	r3, #3
 8005492:	e004      	b.n	800549e <HAL_GPIO_DeInit+0x9e>
 8005494:	2302      	movs	r3, #2
 8005496:	e002      	b.n	800549e <HAL_GPIO_DeInit+0x9e>
 8005498:	2301      	movs	r3, #1
 800549a:	e000      	b.n	800549e <HAL_GPIO_DeInit+0x9e>
 800549c:	2300      	movs	r3, #0
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	f002 0203 	and.w	r2, r2, #3
 80054a4:	0092      	lsls	r2, r2, #2
 80054a6:	4093      	lsls	r3, r2
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d132      	bne.n	8005514 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80054ae:	4b4d      	ldr	r3, [pc, #308]	@ (80055e4 <HAL_GPIO_DeInit+0x1e4>)
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	43db      	mvns	r3, r3
 80054b6:	494b      	ldr	r1, [pc, #300]	@ (80055e4 <HAL_GPIO_DeInit+0x1e4>)
 80054b8:	4013      	ands	r3, r2
 80054ba:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80054bc:	4b49      	ldr	r3, [pc, #292]	@ (80055e4 <HAL_GPIO_DeInit+0x1e4>)
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	43db      	mvns	r3, r3
 80054c4:	4947      	ldr	r1, [pc, #284]	@ (80055e4 <HAL_GPIO_DeInit+0x1e4>)
 80054c6:	4013      	ands	r3, r2
 80054c8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80054ca:	4b46      	ldr	r3, [pc, #280]	@ (80055e4 <HAL_GPIO_DeInit+0x1e4>)
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	43db      	mvns	r3, r3
 80054d2:	4944      	ldr	r1, [pc, #272]	@ (80055e4 <HAL_GPIO_DeInit+0x1e4>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80054d8:	4b42      	ldr	r3, [pc, #264]	@ (80055e4 <HAL_GPIO_DeInit+0x1e4>)
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	43db      	mvns	r3, r3
 80054e0:	4940      	ldr	r1, [pc, #256]	@ (80055e4 <HAL_GPIO_DeInit+0x1e4>)
 80054e2:	4013      	ands	r3, r2
 80054e4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f003 0303 	and.w	r3, r3, #3
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	220f      	movs	r2, #15
 80054f0:	fa02 f303 	lsl.w	r3, r2, r3
 80054f4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80054f6:	4a34      	ldr	r2, [pc, #208]	@ (80055c8 <HAL_GPIO_DeInit+0x1c8>)
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	089b      	lsrs	r3, r3, #2
 80054fc:	3302      	adds	r3, #2
 80054fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	43da      	mvns	r2, r3
 8005506:	4830      	ldr	r0, [pc, #192]	@ (80055c8 <HAL_GPIO_DeInit+0x1c8>)
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	089b      	lsrs	r3, r3, #2
 800550c:	400a      	ands	r2, r1
 800550e:	3302      	adds	r3, #2
 8005510:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	2103      	movs	r1, #3
 800551e:	fa01 f303 	lsl.w	r3, r1, r3
 8005522:	431a      	orrs	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	08da      	lsrs	r2, r3, #3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3208      	adds	r2, #8
 8005530:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	220f      	movs	r2, #15
 800553e:	fa02 f303 	lsl.w	r3, r2, r3
 8005542:	43db      	mvns	r3, r3
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	08d2      	lsrs	r2, r2, #3
 8005548:	4019      	ands	r1, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	3208      	adds	r2, #8
 800554e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	2103      	movs	r1, #3
 800555c:	fa01 f303 	lsl.w	r3, r1, r3
 8005560:	43db      	mvns	r3, r3
 8005562:	401a      	ands	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	2101      	movs	r1, #1
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	fa01 f303 	lsl.w	r3, r1, r3
 8005574:	43db      	mvns	r3, r3
 8005576:	401a      	ands	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68da      	ldr	r2, [r3, #12]
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	005b      	lsls	r3, r3, #1
 8005584:	2103      	movs	r1, #3
 8005586:	fa01 f303 	lsl.w	r3, r1, r3
 800558a:	43db      	mvns	r3, r3
 800558c:	401a      	ands	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005596:	2101      	movs	r1, #1
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	fa01 f303 	lsl.w	r3, r1, r3
 800559e:	43db      	mvns	r3, r3
 80055a0:	401a      	ands	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	3301      	adds	r3, #1
 80055aa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	fa22 f303 	lsr.w	r3, r2, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f47f af2b 	bne.w	8005410 <HAL_GPIO_DeInit+0x10>
  }
}
 80055ba:	bf00      	nop
 80055bc:	bf00      	nop
 80055be:	371c      	adds	r7, #28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	40010000 	.word	0x40010000
 80055cc:	48000400 	.word	0x48000400
 80055d0:	48000800 	.word	0x48000800
 80055d4:	48000c00 	.word	0x48000c00
 80055d8:	48001000 	.word	0x48001000
 80055dc:	48001400 	.word	0x48001400
 80055e0:	48001800 	.word	0x48001800
 80055e4:	40010400 	.word	0x40010400

080055e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	460b      	mov	r3, r1
 80055f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691a      	ldr	r2, [r3, #16]
 80055f8:	887b      	ldrh	r3, [r7, #2]
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005600:	2301      	movs	r3, #1
 8005602:	73fb      	strb	r3, [r7, #15]
 8005604:	e001      	b.n	800560a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005606:	2300      	movs	r3, #0
 8005608:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800560a:	7bfb      	ldrb	r3, [r7, #15]
}
 800560c:	4618      	mov	r0, r3
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	460b      	mov	r3, r1
 8005622:	807b      	strh	r3, [r7, #2]
 8005624:	4613      	mov	r3, r2
 8005626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005628:	787b      	ldrb	r3, [r7, #1]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800562e:	887a      	ldrh	r2, [r7, #2]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005634:	e002      	b.n	800563c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005636:	887a      	ldrh	r2, [r7, #2]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	460b      	mov	r3, r1
 8005652:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800565a:	887a      	ldrh	r2, [r7, #2]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4013      	ands	r3, r2
 8005660:	041a      	lsls	r2, r3, #16
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	43d9      	mvns	r1, r3
 8005666:	887b      	ldrh	r3, [r7, #2]
 8005668:	400b      	ands	r3, r1
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	619a      	str	r2, [r3, #24]
}
 8005670:	bf00      	nop
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	4603      	mov	r3, r0
 8005684:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005686:	4b08      	ldr	r3, [pc, #32]	@ (80056a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005688:	695a      	ldr	r2, [r3, #20]
 800568a:	88fb      	ldrh	r3, [r7, #6]
 800568c:	4013      	ands	r3, r2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d006      	beq.n	80056a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005692:	4a05      	ldr	r2, [pc, #20]	@ (80056a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005694:	88fb      	ldrh	r3, [r7, #6]
 8005696:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005698:	88fb      	ldrh	r3, [r7, #6]
 800569a:	4618      	mov	r0, r3
 800569c:	f000 f806 	bl	80056ac <HAL_GPIO_EXTI_Callback>
  }
}
 80056a0:	bf00      	nop
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	40010400 	.word	0x40010400

080056ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	4603      	mov	r3, r0
 80056b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b082      	sub	sp, #8
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e08d      	b.n	80057f0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d106      	bne.n	80056ee <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7fe f8e7 	bl	80038bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2224      	movs	r2, #36	@ 0x24
 80056f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 0201 	bic.w	r2, r2, #1
 8005704:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005712:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689a      	ldr	r2, [r3, #8]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005722:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d107      	bne.n	800573c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005738:	609a      	str	r2, [r3, #8]
 800573a:	e006      	b.n	800574a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005748:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	2b02      	cmp	r3, #2
 8005750:	d108      	bne.n	8005764 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005760:	605a      	str	r2, [r3, #4]
 8005762:	e007      	b.n	8005774 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005772:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	6812      	ldr	r2, [r2, #0]
 800577e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005782:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005786:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68da      	ldr	r2, [r3, #12]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005796:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	69d9      	ldr	r1, [r3, #28]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1a      	ldr	r2, [r3, #32]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f042 0201 	orr.w	r2, r2, #1
 80057d0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2220      	movs	r2, #32
 80057dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e021      	b.n	800584e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2224      	movs	r2, #36	@ 0x24
 800580e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0201 	bic.w	r2, r2, #1
 8005820:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7fe f8a8 	bl	8003978 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
	...

08005858 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af02      	add	r7, sp, #8
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	4608      	mov	r0, r1
 8005862:	4611      	mov	r1, r2
 8005864:	461a      	mov	r2, r3
 8005866:	4603      	mov	r3, r0
 8005868:	817b      	strh	r3, [r7, #10]
 800586a:	460b      	mov	r3, r1
 800586c:	813b      	strh	r3, [r7, #8]
 800586e:	4613      	mov	r3, r2
 8005870:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b20      	cmp	r3, #32
 800587c:	f040 80f9 	bne.w	8005a72 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <HAL_I2C_Mem_Write+0x34>
 8005886:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005888:	2b00      	cmp	r3, #0
 800588a:	d105      	bne.n	8005898 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005892:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e0ed      	b.n	8005a74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d101      	bne.n	80058a6 <HAL_I2C_Mem_Write+0x4e>
 80058a2:	2302      	movs	r3, #2
 80058a4:	e0e6      	b.n	8005a74 <HAL_I2C_Mem_Write+0x21c>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058ae:	f7ff f951 	bl	8004b54 <HAL_GetTick>
 80058b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	2319      	movs	r3, #25
 80058ba:	2201      	movs	r2, #1
 80058bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 fac3 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e0d1      	b.n	8005a74 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2221      	movs	r2, #33	@ 0x21
 80058d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2240      	movs	r2, #64	@ 0x40
 80058dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6a3a      	ldr	r2, [r7, #32]
 80058ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80058f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058f8:	88f8      	ldrh	r0, [r7, #6]
 80058fa:	893a      	ldrh	r2, [r7, #8]
 80058fc:	8979      	ldrh	r1, [r7, #10]
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	9301      	str	r3, [sp, #4]
 8005902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	4603      	mov	r3, r0
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 f9d3 	bl	8005cb4 <I2C_RequestMemoryWrite>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d005      	beq.n	8005920 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e0a9      	b.n	8005a74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005924:	b29b      	uxth	r3, r3
 8005926:	2bff      	cmp	r3, #255	@ 0xff
 8005928:	d90e      	bls.n	8005948 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	22ff      	movs	r2, #255	@ 0xff
 800592e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005934:	b2da      	uxtb	r2, r3
 8005936:	8979      	ldrh	r1, [r7, #10]
 8005938:	2300      	movs	r3, #0
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 fc47 	bl	80061d4 <I2C_TransferConfig>
 8005946:	e00f      	b.n	8005968 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800594c:	b29a      	uxth	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005956:	b2da      	uxtb	r2, r3
 8005958:	8979      	ldrh	r1, [r7, #10]
 800595a:	2300      	movs	r3, #0
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 fc36 	bl	80061d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 fac6 	bl	8005efe <I2C_WaitOnTXISFlagUntilTimeout>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e07b      	b.n	8005a74 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005980:	781a      	ldrb	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598c:	1c5a      	adds	r2, r3, #1
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005996:	b29b      	uxth	r3, r3
 8005998:	3b01      	subs	r3, #1
 800599a:	b29a      	uxth	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059a4:	3b01      	subs	r3, #1
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d034      	beq.n	8005a20 <HAL_I2C_Mem_Write+0x1c8>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d130      	bne.n	8005a20 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c4:	2200      	movs	r2, #0
 80059c6:	2180      	movs	r1, #128	@ 0x80
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 fa3f 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e04d      	b.n	8005a74 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059dc:	b29b      	uxth	r3, r3
 80059de:	2bff      	cmp	r3, #255	@ 0xff
 80059e0:	d90e      	bls.n	8005a00 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	22ff      	movs	r2, #255	@ 0xff
 80059e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	8979      	ldrh	r1, [r7, #10]
 80059f0:	2300      	movs	r3, #0
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 fbeb 	bl	80061d4 <I2C_TransferConfig>
 80059fe:	e00f      	b.n	8005a20 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	8979      	ldrh	r1, [r7, #10]
 8005a12:	2300      	movs	r3, #0
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 fbda 	bl	80061d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d19e      	bne.n	8005968 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 faac 	bl	8005f8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e01a      	b.n	8005a74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2220      	movs	r2, #32
 8005a44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6859      	ldr	r1, [r3, #4]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	4b0a      	ldr	r3, [pc, #40]	@ (8005a7c <HAL_I2C_Mem_Write+0x224>)
 8005a52:	400b      	ands	r3, r1
 8005a54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e000      	b.n	8005a74 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005a72:	2302      	movs	r3, #2
  }
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3718      	adds	r7, #24
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	fe00e800 	.word	0xfe00e800

08005a80 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	4608      	mov	r0, r1
 8005a8a:	4611      	mov	r1, r2
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	4603      	mov	r3, r0
 8005a90:	817b      	strh	r3, [r7, #10]
 8005a92:	460b      	mov	r3, r1
 8005a94:	813b      	strh	r3, [r7, #8]
 8005a96:	4613      	mov	r3, r2
 8005a98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b20      	cmp	r3, #32
 8005aa4:	f040 80fd 	bne.w	8005ca2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <HAL_I2C_Mem_Read+0x34>
 8005aae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d105      	bne.n	8005ac0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005aba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e0f1      	b.n	8005ca4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d101      	bne.n	8005ace <HAL_I2C_Mem_Read+0x4e>
 8005aca:	2302      	movs	r3, #2
 8005acc:	e0ea      	b.n	8005ca4 <HAL_I2C_Mem_Read+0x224>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ad6:	f7ff f83d 	bl	8004b54 <HAL_GetTick>
 8005ada:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	2319      	movs	r3, #25
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 f9af 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e0d5      	b.n	8005ca4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2222      	movs	r2, #34	@ 0x22
 8005afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2240      	movs	r2, #64	@ 0x40
 8005b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6a3a      	ldr	r2, [r7, #32]
 8005b12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005b18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b20:	88f8      	ldrh	r0, [r7, #6]
 8005b22:	893a      	ldrh	r2, [r7, #8]
 8005b24:	8979      	ldrh	r1, [r7, #10]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	9301      	str	r3, [sp, #4]
 8005b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	4603      	mov	r3, r0
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 f913 	bl	8005d5c <I2C_RequestMemoryRead>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e0ad      	b.n	8005ca4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2bff      	cmp	r3, #255	@ 0xff
 8005b50:	d90e      	bls.n	8005b70 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2201      	movs	r2, #1
 8005b56:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	8979      	ldrh	r1, [r7, #10]
 8005b60:	4b52      	ldr	r3, [pc, #328]	@ (8005cac <HAL_I2C_Mem_Read+0x22c>)
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 fb33 	bl	80061d4 <I2C_TransferConfig>
 8005b6e:	e00f      	b.n	8005b90 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	8979      	ldrh	r1, [r7, #10]
 8005b82:	4b4a      	ldr	r3, [pc, #296]	@ (8005cac <HAL_I2C_Mem_Read+0x22c>)
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 fb22 	bl	80061d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b96:	2200      	movs	r2, #0
 8005b98:	2104      	movs	r1, #4
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 f956 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e07c      	b.n	8005ca4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d034      	beq.n	8005c50 <HAL_I2C_Mem_Read+0x1d0>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d130      	bne.n	8005c50 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	2180      	movs	r1, #128	@ 0x80
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 f927 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d001      	beq.n	8005c08 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e04d      	b.n	8005ca4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	2bff      	cmp	r3, #255	@ 0xff
 8005c10:	d90e      	bls.n	8005c30 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2201      	movs	r2, #1
 8005c16:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	8979      	ldrh	r1, [r7, #10]
 8005c20:	2300      	movs	r3, #0
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 fad3 	bl	80061d4 <I2C_TransferConfig>
 8005c2e:	e00f      	b.n	8005c50 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	8979      	ldrh	r1, [r7, #10]
 8005c42:	2300      	movs	r3, #0
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f000 fac2 	bl	80061d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d19a      	bne.n	8005b90 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 f994 	bl	8005f8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e01a      	b.n	8005ca4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2220      	movs	r2, #32
 8005c74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6859      	ldr	r1, [r3, #4]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb0 <HAL_I2C_Mem_Read+0x230>)
 8005c82:	400b      	ands	r3, r1
 8005c84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	e000      	b.n	8005ca4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005ca2:	2302      	movs	r3, #2
  }
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3718      	adds	r7, #24
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	80002400 	.word	0x80002400
 8005cb0:	fe00e800 	.word	0xfe00e800

08005cb4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af02      	add	r7, sp, #8
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	4608      	mov	r0, r1
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	817b      	strh	r3, [r7, #10]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	813b      	strh	r3, [r7, #8]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005cce:	88fb      	ldrh	r3, [r7, #6]
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	8979      	ldrh	r1, [r7, #10]
 8005cd4:	4b20      	ldr	r3, [pc, #128]	@ (8005d58 <I2C_RequestMemoryWrite+0xa4>)
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 fa79 	bl	80061d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ce2:	69fa      	ldr	r2, [r7, #28]
 8005ce4:	69b9      	ldr	r1, [r7, #24]
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 f909 	bl	8005efe <I2C_WaitOnTXISFlagUntilTimeout>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e02c      	b.n	8005d50 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cf6:	88fb      	ldrh	r3, [r7, #6]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d105      	bne.n	8005d08 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cfc:	893b      	ldrh	r3, [r7, #8]
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d06:	e015      	b.n	8005d34 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d08:	893b      	ldrh	r3, [r7, #8]
 8005d0a:	0a1b      	lsrs	r3, r3, #8
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d16:	69fa      	ldr	r2, [r7, #28]
 8005d18:	69b9      	ldr	r1, [r7, #24]
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f000 f8ef 	bl	8005efe <I2C_WaitOnTXISFlagUntilTimeout>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e012      	b.n	8005d50 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d2a:	893b      	ldrh	r3, [r7, #8]
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	2180      	movs	r1, #128	@ 0x80
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 f884 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e000      	b.n	8005d50 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	80002000 	.word	0x80002000

08005d5c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af02      	add	r7, sp, #8
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	4608      	mov	r0, r1
 8005d66:	4611      	mov	r1, r2
 8005d68:	461a      	mov	r2, r3
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	817b      	strh	r3, [r7, #10]
 8005d6e:	460b      	mov	r3, r1
 8005d70:	813b      	strh	r3, [r7, #8]
 8005d72:	4613      	mov	r3, r2
 8005d74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005d76:	88fb      	ldrh	r3, [r7, #6]
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	8979      	ldrh	r1, [r7, #10]
 8005d7c:	4b20      	ldr	r3, [pc, #128]	@ (8005e00 <I2C_RequestMemoryRead+0xa4>)
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	2300      	movs	r3, #0
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f000 fa26 	bl	80061d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d88:	69fa      	ldr	r2, [r7, #28]
 8005d8a:	69b9      	ldr	r1, [r7, #24]
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 f8b6 	bl	8005efe <I2C_WaitOnTXISFlagUntilTimeout>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e02c      	b.n	8005df6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d9c:	88fb      	ldrh	r3, [r7, #6]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d105      	bne.n	8005dae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005da2:	893b      	ldrh	r3, [r7, #8]
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	629a      	str	r2, [r3, #40]	@ 0x28
 8005dac:	e015      	b.n	8005dda <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005dae:	893b      	ldrh	r3, [r7, #8]
 8005db0:	0a1b      	lsrs	r3, r3, #8
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dbc:	69fa      	ldr	r2, [r7, #28]
 8005dbe:	69b9      	ldr	r1, [r7, #24]
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 f89c 	bl	8005efe <I2C_WaitOnTXISFlagUntilTimeout>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e012      	b.n	8005df6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005dd0:	893b      	ldrh	r3, [r7, #8]
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	2200      	movs	r2, #0
 8005de2:	2140      	movs	r1, #64	@ 0x40
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 f831 	bl	8005e4c <I2C_WaitOnFlagUntilTimeout>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e000      	b.n	8005df6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	80002000 	.word	0x80002000

08005e04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d103      	bne.n	8005e22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d007      	beq.n	8005e40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699a      	ldr	r2, [r3, #24]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 0201 	orr.w	r2, r2, #1
 8005e3e:	619a      	str	r2, [r3, #24]
  }
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	603b      	str	r3, [r7, #0]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e5c:	e03b      	b.n	8005ed6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	6839      	ldr	r1, [r7, #0]
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f000 f8d6 	bl	8006014 <I2C_IsErrorOccurred>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e041      	b.n	8005ef6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e78:	d02d      	beq.n	8005ed6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e7a:	f7fe fe6b 	bl	8004b54 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d302      	bcc.n	8005e90 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d122      	bne.n	8005ed6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	699a      	ldr	r2, [r3, #24]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	bf0c      	ite	eq
 8005ea0:	2301      	moveq	r3, #1
 8005ea2:	2300      	movne	r3, #0
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	79fb      	ldrb	r3, [r7, #7]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d113      	bne.n	8005ed6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eb2:	f043 0220 	orr.w	r2, r3, #32
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e00f      	b.n	8005ef6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	699a      	ldr	r2, [r3, #24]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	bf0c      	ite	eq
 8005ee6:	2301      	moveq	r3, #1
 8005ee8:	2300      	movne	r3, #0
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	79fb      	ldrb	r3, [r7, #7]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d0b4      	beq.n	8005e5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b084      	sub	sp, #16
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	60f8      	str	r0, [r7, #12]
 8005f06:	60b9      	str	r1, [r7, #8]
 8005f08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f0a:	e033      	b.n	8005f74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	68b9      	ldr	r1, [r7, #8]
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f000 f87f 	bl	8006014 <I2C_IsErrorOccurred>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e031      	b.n	8005f84 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f26:	d025      	beq.n	8005f74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f28:	f7fe fe14 	bl	8004b54 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d302      	bcc.n	8005f3e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d11a      	bne.n	8005f74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	f003 0302 	and.w	r3, r3, #2
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d013      	beq.n	8005f74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f50:	f043 0220 	orr.w	r2, r3, #32
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e007      	b.n	8005f84 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d1c4      	bne.n	8005f0c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f98:	e02f      	b.n	8005ffa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	68b9      	ldr	r1, [r7, #8]
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 f838 	bl	8006014 <I2C_IsErrorOccurred>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e02d      	b.n	800600a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fae:	f7fe fdd1 	bl	8004b54 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d302      	bcc.n	8005fc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d11a      	bne.n	8005ffa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	2b20      	cmp	r3, #32
 8005fd0:	d013      	beq.n	8005ffa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fd6:	f043 0220 	orr.w	r2, r3, #32
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e007      	b.n	800600a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	f003 0320 	and.w	r3, r3, #32
 8006004:	2b20      	cmp	r3, #32
 8006006:	d1c8      	bne.n	8005f9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
	...

08006014 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b08a      	sub	sp, #40	@ 0x28
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006020:	2300      	movs	r3, #0
 8006022:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800602e:	2300      	movs	r3, #0
 8006030:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	f003 0310 	and.w	r3, r3, #16
 800603c:	2b00      	cmp	r3, #0
 800603e:	d068      	beq.n	8006112 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2210      	movs	r2, #16
 8006046:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006048:	e049      	b.n	80060de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006050:	d045      	beq.n	80060de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006052:	f7fe fd7f 	bl	8004b54 <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	429a      	cmp	r2, r3
 8006060:	d302      	bcc.n	8006068 <I2C_IsErrorOccurred+0x54>
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d13a      	bne.n	80060de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006072:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800607a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006086:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800608a:	d121      	bne.n	80060d0 <I2C_IsErrorOccurred+0xbc>
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006092:	d01d      	beq.n	80060d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006094:	7cfb      	ldrb	r3, [r7, #19]
 8006096:	2b20      	cmp	r3, #32
 8006098:	d01a      	beq.n	80060d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80060aa:	f7fe fd53 	bl	8004b54 <HAL_GetTick>
 80060ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060b0:	e00e      	b.n	80060d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80060b2:	f7fe fd4f 	bl	8004b54 <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	2b19      	cmp	r3, #25
 80060be:	d907      	bls.n	80060d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	f043 0320 	orr.w	r3, r3, #32
 80060c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80060ce:	e006      	b.n	80060de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	f003 0320 	and.w	r3, r3, #32
 80060da:	2b20      	cmp	r3, #32
 80060dc:	d1e9      	bne.n	80060b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	f003 0320 	and.w	r3, r3, #32
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	d003      	beq.n	80060f4 <I2C_IsErrorOccurred+0xe0>
 80060ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0aa      	beq.n	800604a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80060f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d103      	bne.n	8006104 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2220      	movs	r2, #32
 8006102:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	f043 0304 	orr.w	r3, r3, #4
 800610a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00b      	beq.n	800613c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	f043 0301 	orr.w	r3, r3, #1
 800612a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006134:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00b      	beq.n	800615e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	f043 0308 	orr.w	r3, r3, #8
 800614c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006156:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00b      	beq.n	8006180 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	f043 0302 	orr.w	r3, r3, #2
 800616e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006178:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006180:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006184:	2b00      	cmp	r3, #0
 8006186:	d01c      	beq.n	80061c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f7ff fe3b 	bl	8005e04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6859      	ldr	r1, [r3, #4]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	4b0d      	ldr	r3, [pc, #52]	@ (80061d0 <I2C_IsErrorOccurred+0x1bc>)
 800619a:	400b      	ands	r3, r1
 800619c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	431a      	orrs	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2220      	movs	r2, #32
 80061ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80061c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3728      	adds	r7, #40	@ 0x28
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	fe00e800 	.word	0xfe00e800

080061d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b087      	sub	sp, #28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	607b      	str	r3, [r7, #4]
 80061de:	460b      	mov	r3, r1
 80061e0:	817b      	strh	r3, [r7, #10]
 80061e2:	4613      	mov	r3, r2
 80061e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061e6:	897b      	ldrh	r3, [r7, #10]
 80061e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80061ec:	7a7b      	ldrb	r3, [r7, #9]
 80061ee:	041b      	lsls	r3, r3, #16
 80061f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061fa:	6a3b      	ldr	r3, [r7, #32]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006202:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	6a3b      	ldr	r3, [r7, #32]
 800620c:	0d5b      	lsrs	r3, r3, #21
 800620e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006212:	4b08      	ldr	r3, [pc, #32]	@ (8006234 <I2C_TransferConfig+0x60>)
 8006214:	430b      	orrs	r3, r1
 8006216:	43db      	mvns	r3, r3
 8006218:	ea02 0103 	and.w	r1, r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	430a      	orrs	r2, r1
 8006224:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006226:	bf00      	nop
 8006228:	371c      	adds	r7, #28
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	03ff63ff 	.word	0x03ff63ff

08006238 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b20      	cmp	r3, #32
 800624c:	d138      	bne.n	80062c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006254:	2b01      	cmp	r3, #1
 8006256:	d101      	bne.n	800625c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006258:	2302      	movs	r3, #2
 800625a:	e032      	b.n	80062c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2224      	movs	r2, #36	@ 0x24
 8006268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 0201 	bic.w	r2, r2, #1
 800627a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800628a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6819      	ldr	r1, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f042 0201 	orr.w	r2, r2, #1
 80062aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2220      	movs	r2, #32
 80062b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80062bc:	2300      	movs	r3, #0
 80062be:	e000      	b.n	80062c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062c0:	2302      	movs	r3, #2
  }
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b085      	sub	sp, #20
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b20      	cmp	r3, #32
 80062e2:	d139      	bne.n	8006358 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d101      	bne.n	80062f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80062ee:	2302      	movs	r3, #2
 80062f0:	e033      	b.n	800635a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2224      	movs	r2, #36	@ 0x24
 80062fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 0201 	bic.w	r2, r2, #1
 8006310:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006320:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	021b      	lsls	r3, r3, #8
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	4313      	orrs	r3, r2
 800632a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0201 	orr.w	r2, r2, #1
 8006342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2220      	movs	r2, #32
 8006348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006354:	2300      	movs	r3, #0
 8006356:	e000      	b.n	800635a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006358:	2302      	movs	r3, #2
  }
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b086      	sub	sp, #24
 800636a:	af02      	add	r7, sp, #8
 800636c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e101      	b.n	800657c <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b00      	cmp	r3, #0
 8006382:	d106      	bne.n	8006392 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7fd fbb9 	bl	8003b04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2203      	movs	r2, #3
 8006396:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f002 ff33 	bl	8009210 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	7c1a      	ldrb	r2, [r3, #16]
 80063b2:	f88d 2000 	strb.w	r2, [sp]
 80063b6:	3304      	adds	r3, #4
 80063b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063ba:	f002 fefc 	bl	80091b6 <USB_CoreInit>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d005      	beq.n	80063d0 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e0d5      	b.n	800657c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2100      	movs	r1, #0
 80063d6:	4618      	mov	r0, r3
 80063d8:	f002 ff2b 	bl	8009232 <USB_SetCurrentMode>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d005      	beq.n	80063ee <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2202      	movs	r2, #2
 80063e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e0c6      	b.n	800657c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063ee:	2300      	movs	r3, #0
 80063f0:	73fb      	strb	r3, [r7, #15]
 80063f2:	e04a      	b.n	800648a <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80063f4:	7bfa      	ldrb	r2, [r7, #15]
 80063f6:	6879      	ldr	r1, [r7, #4]
 80063f8:	4613      	mov	r3, r2
 80063fa:	00db      	lsls	r3, r3, #3
 80063fc:	4413      	add	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	440b      	add	r3, r1
 8006402:	3315      	adds	r3, #21
 8006404:	2201      	movs	r2, #1
 8006406:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006408:	7bfa      	ldrb	r2, [r7, #15]
 800640a:	6879      	ldr	r1, [r7, #4]
 800640c:	4613      	mov	r3, r2
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	4413      	add	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	440b      	add	r3, r1
 8006416:	3314      	adds	r3, #20
 8006418:	7bfa      	ldrb	r2, [r7, #15]
 800641a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800641c:	7bfa      	ldrb	r2, [r7, #15]
 800641e:	7bfb      	ldrb	r3, [r7, #15]
 8006420:	b298      	uxth	r0, r3
 8006422:	6879      	ldr	r1, [r7, #4]
 8006424:	4613      	mov	r3, r2
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	4413      	add	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	440b      	add	r3, r1
 800642e:	332e      	adds	r3, #46	@ 0x2e
 8006430:	4602      	mov	r2, r0
 8006432:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006434:	7bfa      	ldrb	r2, [r7, #15]
 8006436:	6879      	ldr	r1, [r7, #4]
 8006438:	4613      	mov	r3, r2
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	4413      	add	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	440b      	add	r3, r1
 8006442:	3318      	adds	r3, #24
 8006444:	2200      	movs	r2, #0
 8006446:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006448:	7bfa      	ldrb	r2, [r7, #15]
 800644a:	6879      	ldr	r1, [r7, #4]
 800644c:	4613      	mov	r3, r2
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	4413      	add	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	440b      	add	r3, r1
 8006456:	331c      	adds	r3, #28
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800645c:	7bfa      	ldrb	r2, [r7, #15]
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	4613      	mov	r3, r2
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	4413      	add	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	440b      	add	r3, r1
 800646a:	3320      	adds	r3, #32
 800646c:	2200      	movs	r2, #0
 800646e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006470:	7bfa      	ldrb	r2, [r7, #15]
 8006472:	6879      	ldr	r1, [r7, #4]
 8006474:	4613      	mov	r3, r2
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	4413      	add	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	440b      	add	r3, r1
 800647e:	3324      	adds	r3, #36	@ 0x24
 8006480:	2200      	movs	r2, #0
 8006482:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006484:	7bfb      	ldrb	r3, [r7, #15]
 8006486:	3301      	adds	r3, #1
 8006488:	73fb      	strb	r3, [r7, #15]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	791b      	ldrb	r3, [r3, #4]
 800648e:	7bfa      	ldrb	r2, [r7, #15]
 8006490:	429a      	cmp	r2, r3
 8006492:	d3af      	bcc.n	80063f4 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006494:	2300      	movs	r3, #0
 8006496:	73fb      	strb	r3, [r7, #15]
 8006498:	e044      	b.n	8006524 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800649a:	7bfa      	ldrb	r2, [r7, #15]
 800649c:	6879      	ldr	r1, [r7, #4]
 800649e:	4613      	mov	r3, r2
 80064a0:	00db      	lsls	r3, r3, #3
 80064a2:	4413      	add	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	440b      	add	r3, r1
 80064a8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80064ac:	2200      	movs	r2, #0
 80064ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80064b0:	7bfa      	ldrb	r2, [r7, #15]
 80064b2:	6879      	ldr	r1, [r7, #4]
 80064b4:	4613      	mov	r3, r2
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	4413      	add	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	440b      	add	r3, r1
 80064be:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80064c2:	7bfa      	ldrb	r2, [r7, #15]
 80064c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80064c6:	7bfa      	ldrb	r2, [r7, #15]
 80064c8:	6879      	ldr	r1, [r7, #4]
 80064ca:	4613      	mov	r3, r2
 80064cc:	00db      	lsls	r3, r3, #3
 80064ce:	4413      	add	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	440b      	add	r3, r1
 80064d4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80064d8:	2200      	movs	r2, #0
 80064da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80064dc:	7bfa      	ldrb	r2, [r7, #15]
 80064de:	6879      	ldr	r1, [r7, #4]
 80064e0:	4613      	mov	r3, r2
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	4413      	add	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	440b      	add	r3, r1
 80064ea:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80064ee:	2200      	movs	r2, #0
 80064f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80064f2:	7bfa      	ldrb	r2, [r7, #15]
 80064f4:	6879      	ldr	r1, [r7, #4]
 80064f6:	4613      	mov	r3, r2
 80064f8:	00db      	lsls	r3, r3, #3
 80064fa:	4413      	add	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	440b      	add	r3, r1
 8006500:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006504:	2200      	movs	r2, #0
 8006506:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006508:	7bfa      	ldrb	r2, [r7, #15]
 800650a:	6879      	ldr	r1, [r7, #4]
 800650c:	4613      	mov	r3, r2
 800650e:	00db      	lsls	r3, r3, #3
 8006510:	4413      	add	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	440b      	add	r3, r1
 8006516:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800651a:	2200      	movs	r2, #0
 800651c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800651e:	7bfb      	ldrb	r3, [r7, #15]
 8006520:	3301      	adds	r3, #1
 8006522:	73fb      	strb	r3, [r7, #15]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	791b      	ldrb	r3, [r3, #4]
 8006528:	7bfa      	ldrb	r2, [r7, #15]
 800652a:	429a      	cmp	r2, r3
 800652c:	d3b5      	bcc.n	800649a <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6818      	ldr	r0, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	7c1a      	ldrb	r2, [r3, #16]
 8006536:	f88d 2000 	strb.w	r2, [sp]
 800653a:	3304      	adds	r3, #4
 800653c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800653e:	f002 fec5 	bl	80092cc <USB_DevInit>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d005      	beq.n	8006554 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e013      	b.n	800657c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	7b1b      	ldrb	r3, [r3, #12]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d102      	bne.n	8006570 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f80a 	bl	8006584 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4618      	mov	r0, r3
 8006576:	f003 f86a 	bl	800964e <USB_DevDisconnect>

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065b6:	f043 0303 	orr.w	r3, r3, #3
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065d0:	4b05      	ldr	r3, [pc, #20]	@ (80065e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a04      	ldr	r2, [pc, #16]	@ (80065e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80065d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065da:	6013      	str	r3, [r2, #0]
}
 80065dc:	bf00      	nop
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	40007000 	.word	0x40007000

080065ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80065f0:	4b04      	ldr	r3, [pc, #16]	@ (8006604 <HAL_PWREx_GetVoltageRange+0x18>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	40007000 	.word	0x40007000

08006608 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006616:	d130      	bne.n	800667a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006618:	4b23      	ldr	r3, [pc, #140]	@ (80066a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006620:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006624:	d038      	beq.n	8006698 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006626:	4b20      	ldr	r3, [pc, #128]	@ (80066a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800662e:	4a1e      	ldr	r2, [pc, #120]	@ (80066a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006630:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006634:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006636:	4b1d      	ldr	r3, [pc, #116]	@ (80066ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2232      	movs	r2, #50	@ 0x32
 800663c:	fb02 f303 	mul.w	r3, r2, r3
 8006640:	4a1b      	ldr	r2, [pc, #108]	@ (80066b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006642:	fba2 2303 	umull	r2, r3, r2, r3
 8006646:	0c9b      	lsrs	r3, r3, #18
 8006648:	3301      	adds	r3, #1
 800664a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800664c:	e002      	b.n	8006654 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3b01      	subs	r3, #1
 8006652:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006654:	4b14      	ldr	r3, [pc, #80]	@ (80066a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800665c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006660:	d102      	bne.n	8006668 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1f2      	bne.n	800664e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006668:	4b0f      	ldr	r3, [pc, #60]	@ (80066a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006670:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006674:	d110      	bne.n	8006698 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e00f      	b.n	800669a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800667a:	4b0b      	ldr	r3, [pc, #44]	@ (80066a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006686:	d007      	beq.n	8006698 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006688:	4b07      	ldr	r3, [pc, #28]	@ (80066a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006690:	4a05      	ldr	r2, [pc, #20]	@ (80066a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006692:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006696:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3714      	adds	r7, #20
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	40007000 	.word	0x40007000
 80066ac:	20000004 	.word	0x20000004
 80066b0:	431bde83 	.word	0x431bde83

080066b4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80066b4:	b480      	push	{r7}
 80066b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80066b8:	4b05      	ldr	r3, [pc, #20]	@ (80066d0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	4a04      	ldr	r2, [pc, #16]	@ (80066d0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80066be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80066c2:	6053      	str	r3, [r2, #4]
}
 80066c4:	bf00      	nop
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	40007000 	.word	0x40007000

080066d4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af02      	add	r7, sp, #8
 80066da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80066dc:	f7fe fa3a 	bl	8004b54 <HAL_GetTick>
 80066e0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e063      	b.n	80067b4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10b      	bne.n	8006710 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7fd f95d 	bl	80039c0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006706:	f241 3188 	movw	r1, #5000	@ 0x1388
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f858 	bl	80067c0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	3b01      	subs	r3, #1
 8006720:	021a      	lsls	r2, r3, #8
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	2120      	movs	r1, #32
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f850 	bl	80067dc <QSPI_WaitFlagStateUntilTimeout>
 800673c:	4603      	mov	r3, r0
 800673e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006740:	7afb      	ldrb	r3, [r7, #11]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d131      	bne.n	80067aa <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006750:	f023 0310 	bic.w	r3, r3, #16
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	6852      	ldr	r2, [r2, #4]
 8006758:	0611      	lsls	r1, r2, #24
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	68d2      	ldr	r2, [r2, #12]
 800675e:	4311      	orrs	r1, r2
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	6812      	ldr	r2, [r2, #0]
 8006764:	430b      	orrs	r3, r1
 8006766:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	4b13      	ldr	r3, [pc, #76]	@ (80067bc <HAL_QSPI_Init+0xe8>)
 8006770:	4013      	ands	r3, r2
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	6912      	ldr	r2, [r2, #16]
 8006776:	0411      	lsls	r1, r2, #16
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	6952      	ldr	r2, [r2, #20]
 800677c:	4311      	orrs	r1, r2
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	6992      	ldr	r2, [r2, #24]
 8006782:	4311      	orrs	r1, r2
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	6812      	ldr	r2, [r2, #0]
 8006788:	430b      	orrs	r3, r1
 800678a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f042 0201 	orr.w	r2, r2, #1
 800679a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80067b2:	7afb      	ldrb	r3, [r7, #11]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	ffe0f8fe 	.word	0xffe0f8fe

080067c0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	603b      	str	r3, [r7, #0]
 80067e8:	4613      	mov	r3, r2
 80067ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80067ec:	e01a      	b.n	8006824 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f4:	d016      	beq.n	8006824 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067f6:	f7fe f9ad 	bl	8004b54 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	429a      	cmp	r2, r3
 8006804:	d302      	bcc.n	800680c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10b      	bne.n	8006824 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2204      	movs	r2, #4
 8006810:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006818:	f043 0201 	orr.w	r2, r3, #1
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e00e      	b.n	8006842 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	689a      	ldr	r2, [r3, #8]
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	4013      	ands	r3, r2
 800682e:	2b00      	cmp	r3, #0
 8006830:	bf14      	ite	ne
 8006832:	2301      	movne	r3, #1
 8006834:	2300      	moveq	r3, #0
 8006836:	b2db      	uxtb	r3, r3
 8006838:	461a      	mov	r2, r3
 800683a:	79fb      	ldrb	r3, [r7, #7]
 800683c:	429a      	cmp	r2, r3
 800683e:	d1d6      	bne.n	80067ee <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
	...

0800684c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b088      	sub	sp, #32
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e3ca      	b.n	8006ff4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800685e:	4b97      	ldr	r3, [pc, #604]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f003 030c 	and.w	r3, r3, #12
 8006866:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006868:	4b94      	ldr	r3, [pc, #592]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f003 0303 	and.w	r3, r3, #3
 8006870:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0310 	and.w	r3, r3, #16
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 80e4 	beq.w	8006a48 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d007      	beq.n	8006896 <HAL_RCC_OscConfig+0x4a>
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	2b0c      	cmp	r3, #12
 800688a:	f040 808b 	bne.w	80069a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	2b01      	cmp	r3, #1
 8006892:	f040 8087 	bne.w	80069a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006896:	4b89      	ldr	r3, [pc, #548]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d005      	beq.n	80068ae <HAL_RCC_OscConfig+0x62>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e3a2      	b.n	8006ff4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1a      	ldr	r2, [r3, #32]
 80068b2:	4b82      	ldr	r3, [pc, #520]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0308 	and.w	r3, r3, #8
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d004      	beq.n	80068c8 <HAL_RCC_OscConfig+0x7c>
 80068be:	4b7f      	ldr	r3, [pc, #508]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068c6:	e005      	b.n	80068d4 <HAL_RCC_OscConfig+0x88>
 80068c8:	4b7c      	ldr	r3, [pc, #496]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 80068ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068ce:	091b      	lsrs	r3, r3, #4
 80068d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d223      	bcs.n	8006920 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	4618      	mov	r0, r3
 80068de:	f000 fd55 	bl	800738c <RCC_SetFlashLatencyFromMSIRange>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d001      	beq.n	80068ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e383      	b.n	8006ff4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80068ec:	4b73      	ldr	r3, [pc, #460]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a72      	ldr	r2, [pc, #456]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 80068f2:	f043 0308 	orr.w	r3, r3, #8
 80068f6:	6013      	str	r3, [r2, #0]
 80068f8:	4b70      	ldr	r3, [pc, #448]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	496d      	ldr	r1, [pc, #436]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 8006906:	4313      	orrs	r3, r2
 8006908:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800690a:	4b6c      	ldr	r3, [pc, #432]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	021b      	lsls	r3, r3, #8
 8006918:	4968      	ldr	r1, [pc, #416]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 800691a:	4313      	orrs	r3, r2
 800691c:	604b      	str	r3, [r1, #4]
 800691e:	e025      	b.n	800696c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006920:	4b66      	ldr	r3, [pc, #408]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a65      	ldr	r2, [pc, #404]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 8006926:	f043 0308 	orr.w	r3, r3, #8
 800692a:	6013      	str	r3, [r2, #0]
 800692c:	4b63      	ldr	r3, [pc, #396]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a1b      	ldr	r3, [r3, #32]
 8006938:	4960      	ldr	r1, [pc, #384]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 800693a:	4313      	orrs	r3, r2
 800693c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800693e:	4b5f      	ldr	r3, [pc, #380]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	021b      	lsls	r3, r3, #8
 800694c:	495b      	ldr	r1, [pc, #364]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 800694e:	4313      	orrs	r3, r2
 8006950:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d109      	bne.n	800696c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	4618      	mov	r0, r3
 800695e:	f000 fd15 	bl	800738c <RCC_SetFlashLatencyFromMSIRange>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e343      	b.n	8006ff4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800696c:	f000 fc4a 	bl	8007204 <HAL_RCC_GetSysClockFreq>
 8006970:	4602      	mov	r2, r0
 8006972:	4b52      	ldr	r3, [pc, #328]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	091b      	lsrs	r3, r3, #4
 8006978:	f003 030f 	and.w	r3, r3, #15
 800697c:	4950      	ldr	r1, [pc, #320]	@ (8006ac0 <HAL_RCC_OscConfig+0x274>)
 800697e:	5ccb      	ldrb	r3, [r1, r3]
 8006980:	f003 031f 	and.w	r3, r3, #31
 8006984:	fa22 f303 	lsr.w	r3, r2, r3
 8006988:	4a4e      	ldr	r2, [pc, #312]	@ (8006ac4 <HAL_RCC_OscConfig+0x278>)
 800698a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800698c:	4b4e      	ldr	r3, [pc, #312]	@ (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4618      	mov	r0, r3
 8006992:	f7fe f88f 	bl	8004ab4 <HAL_InitTick>
 8006996:	4603      	mov	r3, r0
 8006998:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800699a:	7bfb      	ldrb	r3, [r7, #15]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d052      	beq.n	8006a46 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
 80069a2:	e327      	b.n	8006ff4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d032      	beq.n	8006a12 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80069ac:	4b43      	ldr	r3, [pc, #268]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a42      	ldr	r2, [pc, #264]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 80069b2:	f043 0301 	orr.w	r3, r3, #1
 80069b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80069b8:	f7fe f8cc 	bl	8004b54 <HAL_GetTick>
 80069bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80069be:	e008      	b.n	80069d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80069c0:	f7fe f8c8 	bl	8004b54 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e310      	b.n	8006ff4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80069d2:	4b3a      	ldr	r3, [pc, #232]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d0f0      	beq.n	80069c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80069de:	4b37      	ldr	r3, [pc, #220]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a36      	ldr	r2, [pc, #216]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 80069e4:	f043 0308 	orr.w	r3, r3, #8
 80069e8:	6013      	str	r3, [r2, #0]
 80069ea:	4b34      	ldr	r3, [pc, #208]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	4931      	ldr	r1, [pc, #196]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80069fc:	4b2f      	ldr	r3, [pc, #188]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	021b      	lsls	r3, r3, #8
 8006a0a:	492c      	ldr	r1, [pc, #176]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	604b      	str	r3, [r1, #4]
 8006a10:	e01a      	b.n	8006a48 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006a12:	4b2a      	ldr	r3, [pc, #168]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a29      	ldr	r2, [pc, #164]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 8006a18:	f023 0301 	bic.w	r3, r3, #1
 8006a1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006a1e:	f7fe f899 	bl	8004b54 <HAL_GetTick>
 8006a22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006a24:	e008      	b.n	8006a38 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006a26:	f7fe f895 	bl	8004b54 <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d901      	bls.n	8006a38 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e2dd      	b.n	8006ff4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006a38:	4b20      	ldr	r3, [pc, #128]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1f0      	bne.n	8006a26 <HAL_RCC_OscConfig+0x1da>
 8006a44:	e000      	b.n	8006a48 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006a46:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d074      	beq.n	8006b3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	2b08      	cmp	r3, #8
 8006a58:	d005      	beq.n	8006a66 <HAL_RCC_OscConfig+0x21a>
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	2b0c      	cmp	r3, #12
 8006a5e:	d10e      	bne.n	8006a7e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	2b03      	cmp	r3, #3
 8006a64:	d10b      	bne.n	8006a7e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a66:	4b15      	ldr	r3, [pc, #84]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d064      	beq.n	8006b3c <HAL_RCC_OscConfig+0x2f0>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d160      	bne.n	8006b3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e2ba      	b.n	8006ff4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a86:	d106      	bne.n	8006a96 <HAL_RCC_OscConfig+0x24a>
 8006a88:	4b0c      	ldr	r3, [pc, #48]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a0b      	ldr	r2, [pc, #44]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 8006a8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a92:	6013      	str	r3, [r2, #0]
 8006a94:	e026      	b.n	8006ae4 <HAL_RCC_OscConfig+0x298>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a9e:	d115      	bne.n	8006acc <HAL_RCC_OscConfig+0x280>
 8006aa0:	4b06      	ldr	r3, [pc, #24]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a05      	ldr	r2, [pc, #20]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 8006aa6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006aaa:	6013      	str	r3, [r2, #0]
 8006aac:	4b03      	ldr	r3, [pc, #12]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a02      	ldr	r2, [pc, #8]	@ (8006abc <HAL_RCC_OscConfig+0x270>)
 8006ab2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ab6:	6013      	str	r3, [r2, #0]
 8006ab8:	e014      	b.n	8006ae4 <HAL_RCC_OscConfig+0x298>
 8006aba:	bf00      	nop
 8006abc:	40021000 	.word	0x40021000
 8006ac0:	0800d458 	.word	0x0800d458
 8006ac4:	20000004 	.word	0x20000004
 8006ac8:	20000050 	.word	0x20000050
 8006acc:	4ba0      	ldr	r3, [pc, #640]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a9f      	ldr	r2, [pc, #636]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006ad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ad6:	6013      	str	r3, [r2, #0]
 8006ad8:	4b9d      	ldr	r3, [pc, #628]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a9c      	ldr	r2, [pc, #624]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006ade:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d013      	beq.n	8006b14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aec:	f7fe f832 	bl	8004b54 <HAL_GetTick>
 8006af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006af2:	e008      	b.n	8006b06 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006af4:	f7fe f82e 	bl	8004b54 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	2b64      	cmp	r3, #100	@ 0x64
 8006b00:	d901      	bls.n	8006b06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e276      	b.n	8006ff4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b06:	4b92      	ldr	r3, [pc, #584]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0f0      	beq.n	8006af4 <HAL_RCC_OscConfig+0x2a8>
 8006b12:	e014      	b.n	8006b3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b14:	f7fe f81e 	bl	8004b54 <HAL_GetTick>
 8006b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b1a:	e008      	b.n	8006b2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b1c:	f7fe f81a 	bl	8004b54 <HAL_GetTick>
 8006b20:	4602      	mov	r2, r0
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	2b64      	cmp	r3, #100	@ 0x64
 8006b28:	d901      	bls.n	8006b2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e262      	b.n	8006ff4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b2e:	4b88      	ldr	r3, [pc, #544]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1f0      	bne.n	8006b1c <HAL_RCC_OscConfig+0x2d0>
 8006b3a:	e000      	b.n	8006b3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d060      	beq.n	8006c0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	2b04      	cmp	r3, #4
 8006b4e:	d005      	beq.n	8006b5c <HAL_RCC_OscConfig+0x310>
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	2b0c      	cmp	r3, #12
 8006b54:	d119      	bne.n	8006b8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d116      	bne.n	8006b8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b5c:	4b7c      	ldr	r3, [pc, #496]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d005      	beq.n	8006b74 <HAL_RCC_OscConfig+0x328>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e23f      	b.n	8006ff4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b74:	4b76      	ldr	r3, [pc, #472]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	061b      	lsls	r3, r3, #24
 8006b82:	4973      	ldr	r1, [pc, #460]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b88:	e040      	b.n	8006c0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d023      	beq.n	8006bda <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b92:	4b6f      	ldr	r3, [pc, #444]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a6e      	ldr	r2, [pc, #440]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006b98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b9e:	f7fd ffd9 	bl	8004b54 <HAL_GetTick>
 8006ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ba4:	e008      	b.n	8006bb8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ba6:	f7fd ffd5 	bl	8004b54 <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d901      	bls.n	8006bb8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e21d      	b.n	8006ff4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bb8:	4b65      	ldr	r3, [pc, #404]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d0f0      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bc4:	4b62      	ldr	r3, [pc, #392]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	061b      	lsls	r3, r3, #24
 8006bd2:	495f      	ldr	r1, [pc, #380]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	604b      	str	r3, [r1, #4]
 8006bd8:	e018      	b.n	8006c0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bda:	4b5d      	ldr	r3, [pc, #372]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a5c      	ldr	r2, [pc, #368]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006be0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be6:	f7fd ffb5 	bl	8004b54 <HAL_GetTick>
 8006bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006bec:	e008      	b.n	8006c00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bee:	f7fd ffb1 	bl	8004b54 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d901      	bls.n	8006c00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e1f9      	b.n	8006ff4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c00:	4b53      	ldr	r3, [pc, #332]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1f0      	bne.n	8006bee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0308 	and.w	r3, r3, #8
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d03c      	beq.n	8006c92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d01c      	beq.n	8006c5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c20:	4b4b      	ldr	r3, [pc, #300]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c26:	4a4a      	ldr	r2, [pc, #296]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006c28:	f043 0301 	orr.w	r3, r3, #1
 8006c2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c30:	f7fd ff90 	bl	8004b54 <HAL_GetTick>
 8006c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c36:	e008      	b.n	8006c4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c38:	f7fd ff8c 	bl	8004b54 <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d901      	bls.n	8006c4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e1d4      	b.n	8006ff4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c4a:	4b41      	ldr	r3, [pc, #260]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c50:	f003 0302 	and.w	r3, r3, #2
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d0ef      	beq.n	8006c38 <HAL_RCC_OscConfig+0x3ec>
 8006c58:	e01b      	b.n	8006c92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c5a:	4b3d      	ldr	r3, [pc, #244]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c60:	4a3b      	ldr	r2, [pc, #236]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006c62:	f023 0301 	bic.w	r3, r3, #1
 8006c66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c6a:	f7fd ff73 	bl	8004b54 <HAL_GetTick>
 8006c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c70:	e008      	b.n	8006c84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c72:	f7fd ff6f 	bl	8004b54 <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d901      	bls.n	8006c84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e1b7      	b.n	8006ff4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c84:	4b32      	ldr	r3, [pc, #200]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1ef      	bne.n	8006c72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0304 	and.w	r3, r3, #4
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f000 80a6 	beq.w	8006dec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ca8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10d      	bne.n	8006ccc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cb0:	4b27      	ldr	r3, [pc, #156]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cb4:	4a26      	ldr	r2, [pc, #152]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006cb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cba:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cbc:	4b24      	ldr	r3, [pc, #144]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cc4:	60bb      	str	r3, [r7, #8]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ccc:	4b21      	ldr	r3, [pc, #132]	@ (8006d54 <HAL_RCC_OscConfig+0x508>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d118      	bne.n	8006d0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cd8:	4b1e      	ldr	r3, [pc, #120]	@ (8006d54 <HAL_RCC_OscConfig+0x508>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8006d54 <HAL_RCC_OscConfig+0x508>)
 8006cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ce2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ce4:	f7fd ff36 	bl	8004b54 <HAL_GetTick>
 8006ce8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cea:	e008      	b.n	8006cfe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cec:	f7fd ff32 	bl	8004b54 <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d901      	bls.n	8006cfe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e17a      	b.n	8006ff4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cfe:	4b15      	ldr	r3, [pc, #84]	@ (8006d54 <HAL_RCC_OscConfig+0x508>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d0f0      	beq.n	8006cec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d108      	bne.n	8006d24 <HAL_RCC_OscConfig+0x4d8>
 8006d12:	4b0f      	ldr	r3, [pc, #60]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d18:	4a0d      	ldr	r2, [pc, #52]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006d1a:	f043 0301 	orr.w	r3, r3, #1
 8006d1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d22:	e029      	b.n	8006d78 <HAL_RCC_OscConfig+0x52c>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	2b05      	cmp	r3, #5
 8006d2a:	d115      	bne.n	8006d58 <HAL_RCC_OscConfig+0x50c>
 8006d2c:	4b08      	ldr	r3, [pc, #32]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d32:	4a07      	ldr	r2, [pc, #28]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006d34:	f043 0304 	orr.w	r3, r3, #4
 8006d38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d3c:	4b04      	ldr	r3, [pc, #16]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d42:	4a03      	ldr	r2, [pc, #12]	@ (8006d50 <HAL_RCC_OscConfig+0x504>)
 8006d44:	f043 0301 	orr.w	r3, r3, #1
 8006d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d4c:	e014      	b.n	8006d78 <HAL_RCC_OscConfig+0x52c>
 8006d4e:	bf00      	nop
 8006d50:	40021000 	.word	0x40021000
 8006d54:	40007000 	.word	0x40007000
 8006d58:	4b9c      	ldr	r3, [pc, #624]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d5e:	4a9b      	ldr	r2, [pc, #620]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006d60:	f023 0301 	bic.w	r3, r3, #1
 8006d64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d68:	4b98      	ldr	r3, [pc, #608]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d6e:	4a97      	ldr	r2, [pc, #604]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006d70:	f023 0304 	bic.w	r3, r3, #4
 8006d74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d016      	beq.n	8006dae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d80:	f7fd fee8 	bl	8004b54 <HAL_GetTick>
 8006d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d86:	e00a      	b.n	8006d9e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d88:	f7fd fee4 	bl	8004b54 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e12a      	b.n	8006ff4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d9e:	4b8b      	ldr	r3, [pc, #556]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006da4:	f003 0302 	and.w	r3, r3, #2
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d0ed      	beq.n	8006d88 <HAL_RCC_OscConfig+0x53c>
 8006dac:	e015      	b.n	8006dda <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dae:	f7fd fed1 	bl	8004b54 <HAL_GetTick>
 8006db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006db4:	e00a      	b.n	8006dcc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006db6:	f7fd fecd 	bl	8004b54 <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d901      	bls.n	8006dcc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e113      	b.n	8006ff4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006dcc:	4b7f      	ldr	r3, [pc, #508]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1ed      	bne.n	8006db6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dda:	7ffb      	ldrb	r3, [r7, #31]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d105      	bne.n	8006dec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006de0:	4b7a      	ldr	r3, [pc, #488]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006de4:	4a79      	ldr	r2, [pc, #484]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006de6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006dea:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 80fe 	beq.w	8006ff2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	f040 80d0 	bne.w	8006fa0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006e00:	4b72      	ldr	r3, [pc, #456]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	f003 0203 	and.w	r2, r3, #3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d130      	bne.n	8006e76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d127      	bne.n	8006e76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e30:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d11f      	bne.n	8006e76 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006e40:	2a07      	cmp	r2, #7
 8006e42:	bf14      	ite	ne
 8006e44:	2201      	movne	r2, #1
 8006e46:	2200      	moveq	r2, #0
 8006e48:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d113      	bne.n	8006e76 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e58:	085b      	lsrs	r3, r3, #1
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d109      	bne.n	8006e76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e6c:	085b      	lsrs	r3, r3, #1
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d06e      	beq.n	8006f54 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	2b0c      	cmp	r3, #12
 8006e7a:	d069      	beq.n	8006f50 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006e7c:	4b53      	ldr	r3, [pc, #332]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d105      	bne.n	8006e94 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006e88:	4b50      	ldr	r3, [pc, #320]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d001      	beq.n	8006e98 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e0ad      	b.n	8006ff4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006e98:	4b4c      	ldr	r3, [pc, #304]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a4b      	ldr	r2, [pc, #300]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006e9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ea2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ea4:	f7fd fe56 	bl	8004b54 <HAL_GetTick>
 8006ea8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006eaa:	e008      	b.n	8006ebe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eac:	f7fd fe52 	bl	8004b54 <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d901      	bls.n	8006ebe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e09a      	b.n	8006ff4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ebe:	4b43      	ldr	r3, [pc, #268]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1f0      	bne.n	8006eac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006eca:	4b40      	ldr	r3, [pc, #256]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006ecc:	68da      	ldr	r2, [r3, #12]
 8006ece:	4b40      	ldr	r3, [pc, #256]	@ (8006fd0 <HAL_RCC_OscConfig+0x784>)
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006eda:	3a01      	subs	r2, #1
 8006edc:	0112      	lsls	r2, r2, #4
 8006ede:	4311      	orrs	r1, r2
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006ee4:	0212      	lsls	r2, r2, #8
 8006ee6:	4311      	orrs	r1, r2
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006eec:	0852      	lsrs	r2, r2, #1
 8006eee:	3a01      	subs	r2, #1
 8006ef0:	0552      	lsls	r2, r2, #21
 8006ef2:	4311      	orrs	r1, r2
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006ef8:	0852      	lsrs	r2, r2, #1
 8006efa:	3a01      	subs	r2, #1
 8006efc:	0652      	lsls	r2, r2, #25
 8006efe:	4311      	orrs	r1, r2
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006f04:	0912      	lsrs	r2, r2, #4
 8006f06:	0452      	lsls	r2, r2, #17
 8006f08:	430a      	orrs	r2, r1
 8006f0a:	4930      	ldr	r1, [pc, #192]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006f10:	4b2e      	ldr	r3, [pc, #184]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a2d      	ldr	r2, [pc, #180]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006f16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	4a2a      	ldr	r2, [pc, #168]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006f22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006f28:	f7fd fe14 	bl	8004b54 <HAL_GetTick>
 8006f2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f2e:	e008      	b.n	8006f42 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f30:	f7fd fe10 	bl	8004b54 <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e058      	b.n	8006ff4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f42:	4b22      	ldr	r3, [pc, #136]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d0f0      	beq.n	8006f30 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006f4e:	e050      	b.n	8006ff2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e04f      	b.n	8006ff4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f54:	4b1d      	ldr	r3, [pc, #116]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d148      	bne.n	8006ff2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006f60:	4b1a      	ldr	r3, [pc, #104]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a19      	ldr	r2, [pc, #100]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006f66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f6c:	4b17      	ldr	r3, [pc, #92]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	4a16      	ldr	r2, [pc, #88]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006f72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f78:	f7fd fdec 	bl	8004b54 <HAL_GetTick>
 8006f7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f7e:	e008      	b.n	8006f92 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f80:	f7fd fde8 	bl	8004b54 <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e030      	b.n	8006ff4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f92:	4b0e      	ldr	r3, [pc, #56]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0f0      	beq.n	8006f80 <HAL_RCC_OscConfig+0x734>
 8006f9e:	e028      	b.n	8006ff2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	2b0c      	cmp	r3, #12
 8006fa4:	d023      	beq.n	8006fee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fa6:	4b09      	ldr	r3, [pc, #36]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a08      	ldr	r2, [pc, #32]	@ (8006fcc <HAL_RCC_OscConfig+0x780>)
 8006fac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb2:	f7fd fdcf 	bl	8004b54 <HAL_GetTick>
 8006fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fb8:	e00c      	b.n	8006fd4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fba:	f7fd fdcb 	bl	8004b54 <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d905      	bls.n	8006fd4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e013      	b.n	8006ff4 <HAL_RCC_OscConfig+0x7a8>
 8006fcc:	40021000 	.word	0x40021000
 8006fd0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fd4:	4b09      	ldr	r3, [pc, #36]	@ (8006ffc <HAL_RCC_OscConfig+0x7b0>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1ec      	bne.n	8006fba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006fe0:	4b06      	ldr	r3, [pc, #24]	@ (8006ffc <HAL_RCC_OscConfig+0x7b0>)
 8006fe2:	68da      	ldr	r2, [r3, #12]
 8006fe4:	4905      	ldr	r1, [pc, #20]	@ (8006ffc <HAL_RCC_OscConfig+0x7b0>)
 8006fe6:	4b06      	ldr	r3, [pc, #24]	@ (8007000 <HAL_RCC_OscConfig+0x7b4>)
 8006fe8:	4013      	ands	r3, r2
 8006fea:	60cb      	str	r3, [r1, #12]
 8006fec:	e001      	b.n	8006ff2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e000      	b.n	8006ff4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3720      	adds	r7, #32
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	40021000 	.word	0x40021000
 8007000:	feeefffc 	.word	0xfeeefffc

08007004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d101      	bne.n	8007018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e0e7      	b.n	80071e8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007018:	4b75      	ldr	r3, [pc, #468]	@ (80071f0 <HAL_RCC_ClockConfig+0x1ec>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0307 	and.w	r3, r3, #7
 8007020:	683a      	ldr	r2, [r7, #0]
 8007022:	429a      	cmp	r2, r3
 8007024:	d910      	bls.n	8007048 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007026:	4b72      	ldr	r3, [pc, #456]	@ (80071f0 <HAL_RCC_ClockConfig+0x1ec>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f023 0207 	bic.w	r2, r3, #7
 800702e:	4970      	ldr	r1, [pc, #448]	@ (80071f0 <HAL_RCC_ClockConfig+0x1ec>)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	4313      	orrs	r3, r2
 8007034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007036:	4b6e      	ldr	r3, [pc, #440]	@ (80071f0 <HAL_RCC_ClockConfig+0x1ec>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0307 	and.w	r3, r3, #7
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	429a      	cmp	r2, r3
 8007042:	d001      	beq.n	8007048 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e0cf      	b.n	80071e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0302 	and.w	r3, r3, #2
 8007050:	2b00      	cmp	r3, #0
 8007052:	d010      	beq.n	8007076 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	689a      	ldr	r2, [r3, #8]
 8007058:	4b66      	ldr	r3, [pc, #408]	@ (80071f4 <HAL_RCC_ClockConfig+0x1f0>)
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007060:	429a      	cmp	r2, r3
 8007062:	d908      	bls.n	8007076 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007064:	4b63      	ldr	r3, [pc, #396]	@ (80071f4 <HAL_RCC_ClockConfig+0x1f0>)
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	4960      	ldr	r1, [pc, #384]	@ (80071f4 <HAL_RCC_ClockConfig+0x1f0>)
 8007072:	4313      	orrs	r3, r2
 8007074:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b00      	cmp	r3, #0
 8007080:	d04c      	beq.n	800711c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	2b03      	cmp	r3, #3
 8007088:	d107      	bne.n	800709a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800708a:	4b5a      	ldr	r3, [pc, #360]	@ (80071f4 <HAL_RCC_ClockConfig+0x1f0>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d121      	bne.n	80070da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e0a6      	b.n	80071e8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d107      	bne.n	80070b2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070a2:	4b54      	ldr	r3, [pc, #336]	@ (80071f4 <HAL_RCC_ClockConfig+0x1f0>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d115      	bne.n	80070da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e09a      	b.n	80071e8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d107      	bne.n	80070ca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80070ba:	4b4e      	ldr	r3, [pc, #312]	@ (80071f4 <HAL_RCC_ClockConfig+0x1f0>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d109      	bne.n	80070da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e08e      	b.n	80071e8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070ca:	4b4a      	ldr	r3, [pc, #296]	@ (80071f4 <HAL_RCC_ClockConfig+0x1f0>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e086      	b.n	80071e8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80070da:	4b46      	ldr	r3, [pc, #280]	@ (80071f4 <HAL_RCC_ClockConfig+0x1f0>)
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f023 0203 	bic.w	r2, r3, #3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	4943      	ldr	r1, [pc, #268]	@ (80071f4 <HAL_RCC_ClockConfig+0x1f0>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070ec:	f7fd fd32 	bl	8004b54 <HAL_GetTick>
 80070f0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070f2:	e00a      	b.n	800710a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070f4:	f7fd fd2e 	bl	8004b54 <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007102:	4293      	cmp	r3, r2
 8007104:	d901      	bls.n	800710a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e06e      	b.n	80071e8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800710a:	4b3a      	ldr	r3, [pc, #232]	@ (80071f4 <HAL_RCC_ClockConfig+0x1f0>)
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f003 020c 	and.w	r2, r3, #12
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	429a      	cmp	r2, r3
 800711a:	d1eb      	bne.n	80070f4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0302 	and.w	r3, r3, #2
 8007124:	2b00      	cmp	r3, #0
 8007126:	d010      	beq.n	800714a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	689a      	ldr	r2, [r3, #8]
 800712c:	4b31      	ldr	r3, [pc, #196]	@ (80071f4 <HAL_RCC_ClockConfig+0x1f0>)
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007134:	429a      	cmp	r2, r3
 8007136:	d208      	bcs.n	800714a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007138:	4b2e      	ldr	r3, [pc, #184]	@ (80071f4 <HAL_RCC_ClockConfig+0x1f0>)
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	492b      	ldr	r1, [pc, #172]	@ (80071f4 <HAL_RCC_ClockConfig+0x1f0>)
 8007146:	4313      	orrs	r3, r2
 8007148:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800714a:	4b29      	ldr	r3, [pc, #164]	@ (80071f0 <HAL_RCC_ClockConfig+0x1ec>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0307 	and.w	r3, r3, #7
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	429a      	cmp	r2, r3
 8007156:	d210      	bcs.n	800717a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007158:	4b25      	ldr	r3, [pc, #148]	@ (80071f0 <HAL_RCC_ClockConfig+0x1ec>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f023 0207 	bic.w	r2, r3, #7
 8007160:	4923      	ldr	r1, [pc, #140]	@ (80071f0 <HAL_RCC_ClockConfig+0x1ec>)
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	4313      	orrs	r3, r2
 8007166:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007168:	4b21      	ldr	r3, [pc, #132]	@ (80071f0 <HAL_RCC_ClockConfig+0x1ec>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0307 	and.w	r3, r3, #7
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	429a      	cmp	r2, r3
 8007174:	d001      	beq.n	800717a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e036      	b.n	80071e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0304 	and.w	r3, r3, #4
 8007182:	2b00      	cmp	r3, #0
 8007184:	d008      	beq.n	8007198 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007186:	4b1b      	ldr	r3, [pc, #108]	@ (80071f4 <HAL_RCC_ClockConfig+0x1f0>)
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	4918      	ldr	r1, [pc, #96]	@ (80071f4 <HAL_RCC_ClockConfig+0x1f0>)
 8007194:	4313      	orrs	r3, r2
 8007196:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0308 	and.w	r3, r3, #8
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d009      	beq.n	80071b8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071a4:	4b13      	ldr	r3, [pc, #76]	@ (80071f4 <HAL_RCC_ClockConfig+0x1f0>)
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	00db      	lsls	r3, r3, #3
 80071b2:	4910      	ldr	r1, [pc, #64]	@ (80071f4 <HAL_RCC_ClockConfig+0x1f0>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80071b8:	f000 f824 	bl	8007204 <HAL_RCC_GetSysClockFreq>
 80071bc:	4602      	mov	r2, r0
 80071be:	4b0d      	ldr	r3, [pc, #52]	@ (80071f4 <HAL_RCC_ClockConfig+0x1f0>)
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	091b      	lsrs	r3, r3, #4
 80071c4:	f003 030f 	and.w	r3, r3, #15
 80071c8:	490b      	ldr	r1, [pc, #44]	@ (80071f8 <HAL_RCC_ClockConfig+0x1f4>)
 80071ca:	5ccb      	ldrb	r3, [r1, r3]
 80071cc:	f003 031f 	and.w	r3, r3, #31
 80071d0:	fa22 f303 	lsr.w	r3, r2, r3
 80071d4:	4a09      	ldr	r2, [pc, #36]	@ (80071fc <HAL_RCC_ClockConfig+0x1f8>)
 80071d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80071d8:	4b09      	ldr	r3, [pc, #36]	@ (8007200 <HAL_RCC_ClockConfig+0x1fc>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4618      	mov	r0, r3
 80071de:	f7fd fc69 	bl	8004ab4 <HAL_InitTick>
 80071e2:	4603      	mov	r3, r0
 80071e4:	72fb      	strb	r3, [r7, #11]

  return status;
 80071e6:	7afb      	ldrb	r3, [r7, #11]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	40022000 	.word	0x40022000
 80071f4:	40021000 	.word	0x40021000
 80071f8:	0800d458 	.word	0x0800d458
 80071fc:	20000004 	.word	0x20000004
 8007200:	20000050 	.word	0x20000050

08007204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007204:	b480      	push	{r7}
 8007206:	b089      	sub	sp, #36	@ 0x24
 8007208:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	61fb      	str	r3, [r7, #28]
 800720e:	2300      	movs	r3, #0
 8007210:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007212:	4b3e      	ldr	r3, [pc, #248]	@ (800730c <HAL_RCC_GetSysClockFreq+0x108>)
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f003 030c 	and.w	r3, r3, #12
 800721a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800721c:	4b3b      	ldr	r3, [pc, #236]	@ (800730c <HAL_RCC_GetSysClockFreq+0x108>)
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	f003 0303 	and.w	r3, r3, #3
 8007224:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d005      	beq.n	8007238 <HAL_RCC_GetSysClockFreq+0x34>
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	2b0c      	cmp	r3, #12
 8007230:	d121      	bne.n	8007276 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d11e      	bne.n	8007276 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007238:	4b34      	ldr	r3, [pc, #208]	@ (800730c <HAL_RCC_GetSysClockFreq+0x108>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0308 	and.w	r3, r3, #8
 8007240:	2b00      	cmp	r3, #0
 8007242:	d107      	bne.n	8007254 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007244:	4b31      	ldr	r3, [pc, #196]	@ (800730c <HAL_RCC_GetSysClockFreq+0x108>)
 8007246:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800724a:	0a1b      	lsrs	r3, r3, #8
 800724c:	f003 030f 	and.w	r3, r3, #15
 8007250:	61fb      	str	r3, [r7, #28]
 8007252:	e005      	b.n	8007260 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007254:	4b2d      	ldr	r3, [pc, #180]	@ (800730c <HAL_RCC_GetSysClockFreq+0x108>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	091b      	lsrs	r3, r3, #4
 800725a:	f003 030f 	and.w	r3, r3, #15
 800725e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007260:	4a2b      	ldr	r2, [pc, #172]	@ (8007310 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007268:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10d      	bne.n	800728c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007274:	e00a      	b.n	800728c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	2b04      	cmp	r3, #4
 800727a:	d102      	bne.n	8007282 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800727c:	4b25      	ldr	r3, [pc, #148]	@ (8007314 <HAL_RCC_GetSysClockFreq+0x110>)
 800727e:	61bb      	str	r3, [r7, #24]
 8007280:	e004      	b.n	800728c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	2b08      	cmp	r3, #8
 8007286:	d101      	bne.n	800728c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007288:	4b23      	ldr	r3, [pc, #140]	@ (8007318 <HAL_RCC_GetSysClockFreq+0x114>)
 800728a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	2b0c      	cmp	r3, #12
 8007290:	d134      	bne.n	80072fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007292:	4b1e      	ldr	r3, [pc, #120]	@ (800730c <HAL_RCC_GetSysClockFreq+0x108>)
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	f003 0303 	and.w	r3, r3, #3
 800729a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d003      	beq.n	80072aa <HAL_RCC_GetSysClockFreq+0xa6>
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	2b03      	cmp	r3, #3
 80072a6:	d003      	beq.n	80072b0 <HAL_RCC_GetSysClockFreq+0xac>
 80072a8:	e005      	b.n	80072b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80072aa:	4b1a      	ldr	r3, [pc, #104]	@ (8007314 <HAL_RCC_GetSysClockFreq+0x110>)
 80072ac:	617b      	str	r3, [r7, #20]
      break;
 80072ae:	e005      	b.n	80072bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80072b0:	4b19      	ldr	r3, [pc, #100]	@ (8007318 <HAL_RCC_GetSysClockFreq+0x114>)
 80072b2:	617b      	str	r3, [r7, #20]
      break;
 80072b4:	e002      	b.n	80072bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	617b      	str	r3, [r7, #20]
      break;
 80072ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80072bc:	4b13      	ldr	r3, [pc, #76]	@ (800730c <HAL_RCC_GetSysClockFreq+0x108>)
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	091b      	lsrs	r3, r3, #4
 80072c2:	f003 0307 	and.w	r3, r3, #7
 80072c6:	3301      	adds	r3, #1
 80072c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80072ca:	4b10      	ldr	r3, [pc, #64]	@ (800730c <HAL_RCC_GetSysClockFreq+0x108>)
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	0a1b      	lsrs	r3, r3, #8
 80072d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	fb03 f202 	mul.w	r2, r3, r2
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80072e2:	4b0a      	ldr	r3, [pc, #40]	@ (800730c <HAL_RCC_GetSysClockFreq+0x108>)
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	0e5b      	lsrs	r3, r3, #25
 80072e8:	f003 0303 	and.w	r3, r3, #3
 80072ec:	3301      	adds	r3, #1
 80072ee:	005b      	lsls	r3, r3, #1
 80072f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80072fc:	69bb      	ldr	r3, [r7, #24]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3724      	adds	r7, #36	@ 0x24
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	40021000 	.word	0x40021000
 8007310:	0800d470 	.word	0x0800d470
 8007314:	00f42400 	.word	0x00f42400
 8007318:	007a1200 	.word	0x007a1200

0800731c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800731c:	b480      	push	{r7}
 800731e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007320:	4b03      	ldr	r3, [pc, #12]	@ (8007330 <HAL_RCC_GetHCLKFreq+0x14>)
 8007322:	681b      	ldr	r3, [r3, #0]
}
 8007324:	4618      	mov	r0, r3
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	20000004 	.word	0x20000004

08007334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007338:	f7ff fff0 	bl	800731c <HAL_RCC_GetHCLKFreq>
 800733c:	4602      	mov	r2, r0
 800733e:	4b06      	ldr	r3, [pc, #24]	@ (8007358 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	0a1b      	lsrs	r3, r3, #8
 8007344:	f003 0307 	and.w	r3, r3, #7
 8007348:	4904      	ldr	r1, [pc, #16]	@ (800735c <HAL_RCC_GetPCLK1Freq+0x28>)
 800734a:	5ccb      	ldrb	r3, [r1, r3]
 800734c:	f003 031f 	and.w	r3, r3, #31
 8007350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007354:	4618      	mov	r0, r3
 8007356:	bd80      	pop	{r7, pc}
 8007358:	40021000 	.word	0x40021000
 800735c:	0800d468 	.word	0x0800d468

08007360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007364:	f7ff ffda 	bl	800731c <HAL_RCC_GetHCLKFreq>
 8007368:	4602      	mov	r2, r0
 800736a:	4b06      	ldr	r3, [pc, #24]	@ (8007384 <HAL_RCC_GetPCLK2Freq+0x24>)
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	0adb      	lsrs	r3, r3, #11
 8007370:	f003 0307 	and.w	r3, r3, #7
 8007374:	4904      	ldr	r1, [pc, #16]	@ (8007388 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007376:	5ccb      	ldrb	r3, [r1, r3]
 8007378:	f003 031f 	and.w	r3, r3, #31
 800737c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007380:	4618      	mov	r0, r3
 8007382:	bd80      	pop	{r7, pc}
 8007384:	40021000 	.word	0x40021000
 8007388:	0800d468 	.word	0x0800d468

0800738c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007394:	2300      	movs	r3, #0
 8007396:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007398:	4b2a      	ldr	r3, [pc, #168]	@ (8007444 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800739a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800739c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d003      	beq.n	80073ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80073a4:	f7ff f922 	bl	80065ec <HAL_PWREx_GetVoltageRange>
 80073a8:	6178      	str	r0, [r7, #20]
 80073aa:	e014      	b.n	80073d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80073ac:	4b25      	ldr	r3, [pc, #148]	@ (8007444 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073b0:	4a24      	ldr	r2, [pc, #144]	@ (8007444 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80073b8:	4b22      	ldr	r3, [pc, #136]	@ (8007444 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073c0:	60fb      	str	r3, [r7, #12]
 80073c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80073c4:	f7ff f912 	bl	80065ec <HAL_PWREx_GetVoltageRange>
 80073c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80073ca:	4b1e      	ldr	r3, [pc, #120]	@ (8007444 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ce:	4a1d      	ldr	r2, [pc, #116]	@ (8007444 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073dc:	d10b      	bne.n	80073f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2b80      	cmp	r3, #128	@ 0x80
 80073e2:	d919      	bls.n	8007418 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2ba0      	cmp	r3, #160	@ 0xa0
 80073e8:	d902      	bls.n	80073f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80073ea:	2302      	movs	r3, #2
 80073ec:	613b      	str	r3, [r7, #16]
 80073ee:	e013      	b.n	8007418 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80073f0:	2301      	movs	r3, #1
 80073f2:	613b      	str	r3, [r7, #16]
 80073f4:	e010      	b.n	8007418 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2b80      	cmp	r3, #128	@ 0x80
 80073fa:	d902      	bls.n	8007402 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80073fc:	2303      	movs	r3, #3
 80073fe:	613b      	str	r3, [r7, #16]
 8007400:	e00a      	b.n	8007418 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2b80      	cmp	r3, #128	@ 0x80
 8007406:	d102      	bne.n	800740e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007408:	2302      	movs	r3, #2
 800740a:	613b      	str	r3, [r7, #16]
 800740c:	e004      	b.n	8007418 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b70      	cmp	r3, #112	@ 0x70
 8007412:	d101      	bne.n	8007418 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007414:	2301      	movs	r3, #1
 8007416:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007418:	4b0b      	ldr	r3, [pc, #44]	@ (8007448 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f023 0207 	bic.w	r2, r3, #7
 8007420:	4909      	ldr	r1, [pc, #36]	@ (8007448 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	4313      	orrs	r3, r2
 8007426:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007428:	4b07      	ldr	r3, [pc, #28]	@ (8007448 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0307 	and.w	r3, r3, #7
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	429a      	cmp	r2, r3
 8007434:	d001      	beq.n	800743a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e000      	b.n	800743c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	40021000 	.word	0x40021000
 8007448:	40022000 	.word	0x40022000

0800744c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007454:	2300      	movs	r3, #0
 8007456:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007458:	2300      	movs	r3, #0
 800745a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007464:	2b00      	cmp	r3, #0
 8007466:	d041      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800746c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007470:	d02a      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007472:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007476:	d824      	bhi.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007478:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800747c:	d008      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800747e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007482:	d81e      	bhi.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00a      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007488:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800748c:	d010      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800748e:	e018      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007490:	4b86      	ldr	r3, [pc, #536]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	4a85      	ldr	r2, [pc, #532]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007496:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800749a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800749c:	e015      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	3304      	adds	r3, #4
 80074a2:	2100      	movs	r1, #0
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 facb 	bl	8007a40 <RCCEx_PLLSAI1_Config>
 80074aa:	4603      	mov	r3, r0
 80074ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80074ae:	e00c      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	3320      	adds	r3, #32
 80074b4:	2100      	movs	r1, #0
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 fbb6 	bl	8007c28 <RCCEx_PLLSAI2_Config>
 80074bc:	4603      	mov	r3, r0
 80074be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80074c0:	e003      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	74fb      	strb	r3, [r7, #19]
      break;
 80074c6:	e000      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80074c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074ca:	7cfb      	ldrb	r3, [r7, #19]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10b      	bne.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074d0:	4b76      	ldr	r3, [pc, #472]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074de:	4973      	ldr	r1, [pc, #460]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80074e6:	e001      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e8:	7cfb      	ldrb	r3, [r7, #19]
 80074ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d041      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007500:	d02a      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007502:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007506:	d824      	bhi.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007508:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800750c:	d008      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800750e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007512:	d81e      	bhi.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00a      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007518:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800751c:	d010      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800751e:	e018      	b.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007520:	4b62      	ldr	r3, [pc, #392]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	4a61      	ldr	r2, [pc, #388]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007526:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800752a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800752c:	e015      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	3304      	adds	r3, #4
 8007532:	2100      	movs	r1, #0
 8007534:	4618      	mov	r0, r3
 8007536:	f000 fa83 	bl	8007a40 <RCCEx_PLLSAI1_Config>
 800753a:	4603      	mov	r3, r0
 800753c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800753e:	e00c      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	3320      	adds	r3, #32
 8007544:	2100      	movs	r1, #0
 8007546:	4618      	mov	r0, r3
 8007548:	f000 fb6e 	bl	8007c28 <RCCEx_PLLSAI2_Config>
 800754c:	4603      	mov	r3, r0
 800754e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007550:	e003      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	74fb      	strb	r3, [r7, #19]
      break;
 8007556:	e000      	b.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007558:	bf00      	nop
    }

    if(ret == HAL_OK)
 800755a:	7cfb      	ldrb	r3, [r7, #19]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10b      	bne.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007560:	4b52      	ldr	r3, [pc, #328]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007566:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800756e:	494f      	ldr	r1, [pc, #316]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007570:	4313      	orrs	r3, r2
 8007572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007576:	e001      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007578:	7cfb      	ldrb	r3, [r7, #19]
 800757a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 80a0 	beq.w	80076ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800758a:	2300      	movs	r3, #0
 800758c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800758e:	4b47      	ldr	r3, [pc, #284]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d101      	bne.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800759a:	2301      	movs	r3, #1
 800759c:	e000      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800759e:	2300      	movs	r3, #0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00d      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075a4:	4b41      	ldr	r3, [pc, #260]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075a8:	4a40      	ldr	r2, [pc, #256]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80075b0:	4b3e      	ldr	r3, [pc, #248]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075b8:	60bb      	str	r3, [r7, #8]
 80075ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075bc:	2301      	movs	r3, #1
 80075be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075c0:	4b3b      	ldr	r3, [pc, #236]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a3a      	ldr	r2, [pc, #232]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80075c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075cc:	f7fd fac2 	bl	8004b54 <HAL_GetTick>
 80075d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80075d2:	e009      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075d4:	f7fd fabe 	bl	8004b54 <HAL_GetTick>
 80075d8:	4602      	mov	r2, r0
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d902      	bls.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	74fb      	strb	r3, [r7, #19]
        break;
 80075e6:	e005      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80075e8:	4b31      	ldr	r3, [pc, #196]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d0ef      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80075f4:	7cfb      	ldrb	r3, [r7, #19]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d15c      	bne.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80075fa:	4b2c      	ldr	r3, [pc, #176]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007600:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007604:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d01f      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	429a      	cmp	r2, r3
 8007616:	d019      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007618:	4b24      	ldr	r3, [pc, #144]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800761a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800761e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007622:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007624:	4b21      	ldr	r3, [pc, #132]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800762a:	4a20      	ldr	r2, [pc, #128]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800762c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007634:	4b1d      	ldr	r3, [pc, #116]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800763a:	4a1c      	ldr	r2, [pc, #112]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800763c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007640:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007644:	4a19      	ldr	r2, [pc, #100]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	2b00      	cmp	r3, #0
 8007654:	d016      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007656:	f7fd fa7d 	bl	8004b54 <HAL_GetTick>
 800765a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800765c:	e00b      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800765e:	f7fd fa79 	bl	8004b54 <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	f241 3288 	movw	r2, #5000	@ 0x1388
 800766c:	4293      	cmp	r3, r2
 800766e:	d902      	bls.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	74fb      	strb	r3, [r7, #19]
            break;
 8007674:	e006      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007676:	4b0d      	ldr	r3, [pc, #52]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	2b00      	cmp	r3, #0
 8007682:	d0ec      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007684:	7cfb      	ldrb	r3, [r7, #19]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10c      	bne.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800768a:	4b08      	ldr	r3, [pc, #32]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800768c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007690:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800769a:	4904      	ldr	r1, [pc, #16]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800769c:	4313      	orrs	r3, r2
 800769e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80076a2:	e009      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076a4:	7cfb      	ldrb	r3, [r7, #19]
 80076a6:	74bb      	strb	r3, [r7, #18]
 80076a8:	e006      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80076aa:	bf00      	nop
 80076ac:	40021000 	.word	0x40021000
 80076b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076b4:	7cfb      	ldrb	r3, [r7, #19]
 80076b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076b8:	7c7b      	ldrb	r3, [r7, #17]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d105      	bne.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076be:	4b9e      	ldr	r3, [pc, #632]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076c2:	4a9d      	ldr	r2, [pc, #628]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00a      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80076d6:	4b98      	ldr	r3, [pc, #608]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076dc:	f023 0203 	bic.w	r2, r3, #3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e4:	4994      	ldr	r1, [pc, #592]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00a      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80076f8:	4b8f      	ldr	r3, [pc, #572]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076fe:	f023 020c 	bic.w	r2, r3, #12
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007706:	498c      	ldr	r1, [pc, #560]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007708:	4313      	orrs	r3, r2
 800770a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0304 	and.w	r3, r3, #4
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00a      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800771a:	4b87      	ldr	r3, [pc, #540]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800771c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007720:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007728:	4983      	ldr	r1, [pc, #524]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800772a:	4313      	orrs	r3, r2
 800772c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 0308 	and.w	r3, r3, #8
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00a      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800773c:	4b7e      	ldr	r3, [pc, #504]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800773e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007742:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800774a:	497b      	ldr	r1, [pc, #492]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800774c:	4313      	orrs	r3, r2
 800774e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0310 	and.w	r3, r3, #16
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00a      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800775e:	4b76      	ldr	r3, [pc, #472]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007764:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800776c:	4972      	ldr	r1, [pc, #456]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800776e:	4313      	orrs	r3, r2
 8007770:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0320 	and.w	r3, r3, #32
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00a      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007780:	4b6d      	ldr	r3, [pc, #436]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007786:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800778e:	496a      	ldr	r1, [pc, #424]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007790:	4313      	orrs	r3, r2
 8007792:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00a      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077a2:	4b65      	ldr	r3, [pc, #404]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077b0:	4961      	ldr	r1, [pc, #388]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077b2:	4313      	orrs	r3, r2
 80077b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00a      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80077c4:	4b5c      	ldr	r3, [pc, #368]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077d2:	4959      	ldr	r1, [pc, #356]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077d4:	4313      	orrs	r3, r2
 80077d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00a      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80077e6:	4b54      	ldr	r3, [pc, #336]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077f4:	4950      	ldr	r1, [pc, #320]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00a      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007808:	4b4b      	ldr	r3, [pc, #300]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800780a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800780e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007816:	4948      	ldr	r1, [pc, #288]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007818:	4313      	orrs	r3, r2
 800781a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00a      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800782a:	4b43      	ldr	r3, [pc, #268]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800782c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007830:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007838:	493f      	ldr	r1, [pc, #252]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800783a:	4313      	orrs	r3, r2
 800783c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d028      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800784c:	4b3a      	ldr	r3, [pc, #232]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800784e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007852:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800785a:	4937      	ldr	r1, [pc, #220]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800785c:	4313      	orrs	r3, r2
 800785e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007866:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800786a:	d106      	bne.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800786c:	4b32      	ldr	r3, [pc, #200]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	4a31      	ldr	r2, [pc, #196]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007872:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007876:	60d3      	str	r3, [r2, #12]
 8007878:	e011      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800787e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007882:	d10c      	bne.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	3304      	adds	r3, #4
 8007888:	2101      	movs	r1, #1
 800788a:	4618      	mov	r0, r3
 800788c:	f000 f8d8 	bl	8007a40 <RCCEx_PLLSAI1_Config>
 8007890:	4603      	mov	r3, r0
 8007892:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007894:	7cfb      	ldrb	r3, [r7, #19]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d001      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800789a:	7cfb      	ldrb	r3, [r7, #19]
 800789c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d028      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80078aa:	4b23      	ldr	r3, [pc, #140]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078b8:	491f      	ldr	r1, [pc, #124]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078c8:	d106      	bne.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078ca:	4b1b      	ldr	r3, [pc, #108]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	4a1a      	ldr	r2, [pc, #104]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078d4:	60d3      	str	r3, [r2, #12]
 80078d6:	e011      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80078e0:	d10c      	bne.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	3304      	adds	r3, #4
 80078e6:	2101      	movs	r1, #1
 80078e8:	4618      	mov	r0, r3
 80078ea:	f000 f8a9 	bl	8007a40 <RCCEx_PLLSAI1_Config>
 80078ee:	4603      	mov	r3, r0
 80078f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80078f2:	7cfb      	ldrb	r3, [r7, #19]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80078f8:	7cfb      	ldrb	r3, [r7, #19]
 80078fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007904:	2b00      	cmp	r3, #0
 8007906:	d02b      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007908:	4b0b      	ldr	r3, [pc, #44]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800790a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800790e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007916:	4908      	ldr	r1, [pc, #32]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007918:	4313      	orrs	r3, r2
 800791a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007922:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007926:	d109      	bne.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007928:	4b03      	ldr	r3, [pc, #12]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	4a02      	ldr	r2, [pc, #8]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800792e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007932:	60d3      	str	r3, [r2, #12]
 8007934:	e014      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007936:	bf00      	nop
 8007938:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007940:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007944:	d10c      	bne.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	3304      	adds	r3, #4
 800794a:	2101      	movs	r1, #1
 800794c:	4618      	mov	r0, r3
 800794e:	f000 f877 	bl	8007a40 <RCCEx_PLLSAI1_Config>
 8007952:	4603      	mov	r3, r0
 8007954:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007956:	7cfb      	ldrb	r3, [r7, #19]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d001      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800795c:	7cfb      	ldrb	r3, [r7, #19]
 800795e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d02f      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800796c:	4b2b      	ldr	r3, [pc, #172]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800796e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007972:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800797a:	4928      	ldr	r1, [pc, #160]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800797c:	4313      	orrs	r3, r2
 800797e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007986:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800798a:	d10d      	bne.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	3304      	adds	r3, #4
 8007990:	2102      	movs	r1, #2
 8007992:	4618      	mov	r0, r3
 8007994:	f000 f854 	bl	8007a40 <RCCEx_PLLSAI1_Config>
 8007998:	4603      	mov	r3, r0
 800799a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800799c:	7cfb      	ldrb	r3, [r7, #19]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d014      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80079a2:	7cfb      	ldrb	r3, [r7, #19]
 80079a4:	74bb      	strb	r3, [r7, #18]
 80079a6:	e011      	b.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079b0:	d10c      	bne.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	3320      	adds	r3, #32
 80079b6:	2102      	movs	r1, #2
 80079b8:	4618      	mov	r0, r3
 80079ba:	f000 f935 	bl	8007c28 <RCCEx_PLLSAI2_Config>
 80079be:	4603      	mov	r3, r0
 80079c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80079c2:	7cfb      	ldrb	r3, [r7, #19]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d001      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80079c8:	7cfb      	ldrb	r3, [r7, #19]
 80079ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00a      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80079d8:	4b10      	ldr	r3, [pc, #64]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80079da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079de:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079e6:	490d      	ldr	r1, [pc, #52]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80079e8:	4313      	orrs	r3, r2
 80079ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00b      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80079fa:	4b08      	ldr	r3, [pc, #32]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80079fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a00:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a0a:	4904      	ldr	r1, [pc, #16]	@ (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007a12:	7cbb      	ldrb	r3, [r7, #18]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3718      	adds	r7, #24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	40021000 	.word	0x40021000

08007a20 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007a20:	b480      	push	{r7}
 8007a22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007a24:	4b05      	ldr	r3, [pc, #20]	@ (8007a3c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a04      	ldr	r2, [pc, #16]	@ (8007a3c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007a2a:	f043 0304 	orr.w	r3, r3, #4
 8007a2e:	6013      	str	r3, [r2, #0]
}
 8007a30:	bf00      	nop
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	40021000 	.word	0x40021000

08007a40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007a4e:	4b75      	ldr	r3, [pc, #468]	@ (8007c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	f003 0303 	and.w	r3, r3, #3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d018      	beq.n	8007a8c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007a5a:	4b72      	ldr	r3, [pc, #456]	@ (8007c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	f003 0203 	and.w	r2, r3, #3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d10d      	bne.n	8007a86 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
       ||
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d009      	beq.n	8007a86 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007a72:	4b6c      	ldr	r3, [pc, #432]	@ (8007c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	091b      	lsrs	r3, r3, #4
 8007a78:	f003 0307 	and.w	r3, r3, #7
 8007a7c:	1c5a      	adds	r2, r3, #1
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
       ||
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d047      	beq.n	8007b16 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	73fb      	strb	r3, [r7, #15]
 8007a8a:	e044      	b.n	8007b16 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b03      	cmp	r3, #3
 8007a92:	d018      	beq.n	8007ac6 <RCCEx_PLLSAI1_Config+0x86>
 8007a94:	2b03      	cmp	r3, #3
 8007a96:	d825      	bhi.n	8007ae4 <RCCEx_PLLSAI1_Config+0xa4>
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d002      	beq.n	8007aa2 <RCCEx_PLLSAI1_Config+0x62>
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d009      	beq.n	8007ab4 <RCCEx_PLLSAI1_Config+0x74>
 8007aa0:	e020      	b.n	8007ae4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007aa2:	4b60      	ldr	r3, [pc, #384]	@ (8007c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 0302 	and.w	r3, r3, #2
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d11d      	bne.n	8007aea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ab2:	e01a      	b.n	8007aea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007ab4:	4b5b      	ldr	r3, [pc, #364]	@ (8007c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d116      	bne.n	8007aee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ac4:	e013      	b.n	8007aee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007ac6:	4b57      	ldr	r3, [pc, #348]	@ (8007c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10f      	bne.n	8007af2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007ad2:	4b54      	ldr	r3, [pc, #336]	@ (8007c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d109      	bne.n	8007af2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007ae2:	e006      	b.n	8007af2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ae8:	e004      	b.n	8007af4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007aea:	bf00      	nop
 8007aec:	e002      	b.n	8007af4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007aee:	bf00      	nop
 8007af0:	e000      	b.n	8007af4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007af2:	bf00      	nop
    }

    if(status == HAL_OK)
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d10d      	bne.n	8007b16 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007afa:	4b4a      	ldr	r3, [pc, #296]	@ (8007c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6819      	ldr	r1, [r3, #0]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	011b      	lsls	r3, r3, #4
 8007b0e:	430b      	orrs	r3, r1
 8007b10:	4944      	ldr	r1, [pc, #272]	@ (8007c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007b16:	7bfb      	ldrb	r3, [r7, #15]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d17d      	bne.n	8007c18 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007b1c:	4b41      	ldr	r3, [pc, #260]	@ (8007c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a40      	ldr	r2, [pc, #256]	@ (8007c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b28:	f7fd f814 	bl	8004b54 <HAL_GetTick>
 8007b2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007b2e:	e009      	b.n	8007b44 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b30:	f7fd f810 	bl	8004b54 <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d902      	bls.n	8007b44 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	73fb      	strb	r3, [r7, #15]
        break;
 8007b42:	e005      	b.n	8007b50 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007b44:	4b37      	ldr	r3, [pc, #220]	@ (8007c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1ef      	bne.n	8007b30 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d160      	bne.n	8007c18 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d111      	bne.n	8007b80 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b5c:	4b31      	ldr	r3, [pc, #196]	@ (8007c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007b64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	6892      	ldr	r2, [r2, #8]
 8007b6c:	0211      	lsls	r1, r2, #8
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	68d2      	ldr	r2, [r2, #12]
 8007b72:	0912      	lsrs	r2, r2, #4
 8007b74:	0452      	lsls	r2, r2, #17
 8007b76:	430a      	orrs	r2, r1
 8007b78:	492a      	ldr	r1, [pc, #168]	@ (8007c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	610b      	str	r3, [r1, #16]
 8007b7e:	e027      	b.n	8007bd0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d112      	bne.n	8007bac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b86:	4b27      	ldr	r3, [pc, #156]	@ (8007c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007b8e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	6892      	ldr	r2, [r2, #8]
 8007b96:	0211      	lsls	r1, r2, #8
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	6912      	ldr	r2, [r2, #16]
 8007b9c:	0852      	lsrs	r2, r2, #1
 8007b9e:	3a01      	subs	r2, #1
 8007ba0:	0552      	lsls	r2, r2, #21
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	491f      	ldr	r1, [pc, #124]	@ (8007c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	610b      	str	r3, [r1, #16]
 8007baa:	e011      	b.n	8007bd0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007bac:	4b1d      	ldr	r3, [pc, #116]	@ (8007c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007bb4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	6892      	ldr	r2, [r2, #8]
 8007bbc:	0211      	lsls	r1, r2, #8
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	6952      	ldr	r2, [r2, #20]
 8007bc2:	0852      	lsrs	r2, r2, #1
 8007bc4:	3a01      	subs	r2, #1
 8007bc6:	0652      	lsls	r2, r2, #25
 8007bc8:	430a      	orrs	r2, r1
 8007bca:	4916      	ldr	r1, [pc, #88]	@ (8007c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007bd0:	4b14      	ldr	r3, [pc, #80]	@ (8007c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a13      	ldr	r2, [pc, #76]	@ (8007c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007bd6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007bda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bdc:	f7fc ffba 	bl	8004b54 <HAL_GetTick>
 8007be0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007be2:	e009      	b.n	8007bf8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007be4:	f7fc ffb6 	bl	8004b54 <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d902      	bls.n	8007bf8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	73fb      	strb	r3, [r7, #15]
          break;
 8007bf6:	e005      	b.n	8007c04 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8007c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d0ef      	beq.n	8007be4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007c04:	7bfb      	ldrb	r3, [r7, #15]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d106      	bne.n	8007c18 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007c0a:	4b06      	ldr	r3, [pc, #24]	@ (8007c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c0c:	691a      	ldr	r2, [r3, #16]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	4904      	ldr	r1, [pc, #16]	@ (8007c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c14:	4313      	orrs	r3, r2
 8007c16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	40021000 	.word	0x40021000

08007c28 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007c36:	4b6a      	ldr	r3, [pc, #424]	@ (8007de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	f003 0303 	and.w	r3, r3, #3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d018      	beq.n	8007c74 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007c42:	4b67      	ldr	r3, [pc, #412]	@ (8007de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	f003 0203 	and.w	r2, r3, #3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d10d      	bne.n	8007c6e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
       ||
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d009      	beq.n	8007c6e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007c5a:	4b61      	ldr	r3, [pc, #388]	@ (8007de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	091b      	lsrs	r3, r3, #4
 8007c60:	f003 0307 	and.w	r3, r3, #7
 8007c64:	1c5a      	adds	r2, r3, #1
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	685b      	ldr	r3, [r3, #4]
       ||
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d047      	beq.n	8007cfe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	73fb      	strb	r3, [r7, #15]
 8007c72:	e044      	b.n	8007cfe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2b03      	cmp	r3, #3
 8007c7a:	d018      	beq.n	8007cae <RCCEx_PLLSAI2_Config+0x86>
 8007c7c:	2b03      	cmp	r3, #3
 8007c7e:	d825      	bhi.n	8007ccc <RCCEx_PLLSAI2_Config+0xa4>
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d002      	beq.n	8007c8a <RCCEx_PLLSAI2_Config+0x62>
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d009      	beq.n	8007c9c <RCCEx_PLLSAI2_Config+0x74>
 8007c88:	e020      	b.n	8007ccc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007c8a:	4b55      	ldr	r3, [pc, #340]	@ (8007de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 0302 	and.w	r3, r3, #2
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d11d      	bne.n	8007cd2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c9a:	e01a      	b.n	8007cd2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007c9c:	4b50      	ldr	r3, [pc, #320]	@ (8007de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d116      	bne.n	8007cd6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007cac:	e013      	b.n	8007cd6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007cae:	4b4c      	ldr	r3, [pc, #304]	@ (8007de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d10f      	bne.n	8007cda <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007cba:	4b49      	ldr	r3, [pc, #292]	@ (8007de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d109      	bne.n	8007cda <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007cca:	e006      	b.n	8007cda <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd0:	e004      	b.n	8007cdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007cd2:	bf00      	nop
 8007cd4:	e002      	b.n	8007cdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007cd6:	bf00      	nop
 8007cd8:	e000      	b.n	8007cdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007cda:	bf00      	nop
    }

    if(status == HAL_OK)
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10d      	bne.n	8007cfe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007ce2:	4b3f      	ldr	r3, [pc, #252]	@ (8007de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6819      	ldr	r1, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	011b      	lsls	r3, r3, #4
 8007cf6:	430b      	orrs	r3, r1
 8007cf8:	4939      	ldr	r1, [pc, #228]	@ (8007de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d167      	bne.n	8007dd4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007d04:	4b36      	ldr	r3, [pc, #216]	@ (8007de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a35      	ldr	r2, [pc, #212]	@ (8007de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d10:	f7fc ff20 	bl	8004b54 <HAL_GetTick>
 8007d14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007d16:	e009      	b.n	8007d2c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007d18:	f7fc ff1c 	bl	8004b54 <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d902      	bls.n	8007d2c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	73fb      	strb	r3, [r7, #15]
        break;
 8007d2a:	e005      	b.n	8007d38 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007d2c:	4b2c      	ldr	r3, [pc, #176]	@ (8007de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1ef      	bne.n	8007d18 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d14a      	bne.n	8007dd4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d111      	bne.n	8007d68 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007d44:	4b26      	ldr	r3, [pc, #152]	@ (8007de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d46:	695b      	ldr	r3, [r3, #20]
 8007d48:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007d4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	6892      	ldr	r2, [r2, #8]
 8007d54:	0211      	lsls	r1, r2, #8
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	68d2      	ldr	r2, [r2, #12]
 8007d5a:	0912      	lsrs	r2, r2, #4
 8007d5c:	0452      	lsls	r2, r2, #17
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	491f      	ldr	r1, [pc, #124]	@ (8007de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	614b      	str	r3, [r1, #20]
 8007d66:	e011      	b.n	8007d8c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007d68:	4b1d      	ldr	r3, [pc, #116]	@ (8007de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d6a:	695b      	ldr	r3, [r3, #20]
 8007d6c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007d70:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6892      	ldr	r2, [r2, #8]
 8007d78:	0211      	lsls	r1, r2, #8
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	6912      	ldr	r2, [r2, #16]
 8007d7e:	0852      	lsrs	r2, r2, #1
 8007d80:	3a01      	subs	r2, #1
 8007d82:	0652      	lsls	r2, r2, #25
 8007d84:	430a      	orrs	r2, r1
 8007d86:	4916      	ldr	r1, [pc, #88]	@ (8007de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007d8c:	4b14      	ldr	r3, [pc, #80]	@ (8007de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a13      	ldr	r2, [pc, #76]	@ (8007de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d98:	f7fc fedc 	bl	8004b54 <HAL_GetTick>
 8007d9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007d9e:	e009      	b.n	8007db4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007da0:	f7fc fed8 	bl	8004b54 <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d902      	bls.n	8007db4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	73fb      	strb	r3, [r7, #15]
          break;
 8007db2:	e005      	b.n	8007dc0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007db4:	4b0a      	ldr	r3, [pc, #40]	@ (8007de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d0ef      	beq.n	8007da0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d106      	bne.n	8007dd4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007dc6:	4b06      	ldr	r3, [pc, #24]	@ (8007de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007dc8:	695a      	ldr	r2, [r3, #20]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	4904      	ldr	r1, [pc, #16]	@ (8007de0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	40021000 	.word	0x40021000

08007de4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e095      	b.n	8007f22 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d108      	bne.n	8007e10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e06:	d009      	beq.n	8007e1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	61da      	str	r2, [r3, #28]
 8007e0e:	e005      	b.n	8007e1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d106      	bne.n	8007e3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f877 	bl	8007f2a <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2202      	movs	r2, #2
 8007e40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007e5c:	d902      	bls.n	8007e64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	60fb      	str	r3, [r7, #12]
 8007e62:	e002      	b.n	8007e6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007e64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007e68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007e72:	d007      	beq.n	8007e84 <HAL_SPI_Init+0xa0>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007e7c:	d002      	beq.n	8007e84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007e94:	431a      	orrs	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	f003 0302 	and.w	r3, r3, #2
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	695b      	ldr	r3, [r3, #20]
 8007ea4:	f003 0301 	and.w	r3, r3, #1
 8007ea8:	431a      	orrs	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007eb2:	431a      	orrs	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	69db      	ldr	r3, [r3, #28]
 8007eb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ebc:	431a      	orrs	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ec6:	ea42 0103 	orr.w	r1, r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ece:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	0c1b      	lsrs	r3, r3, #16
 8007ee0:	f003 0204 	and.w	r2, r3, #4
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee8:	f003 0310 	and.w	r3, r3, #16
 8007eec:	431a      	orrs	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ef2:	f003 0308 	and.w	r3, r3, #8
 8007ef6:	431a      	orrs	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007f00:	ea42 0103 	orr.w	r1, r2, r3
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	430a      	orrs	r2, r1
 8007f10:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007f32:	bf00      	nop
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b08a      	sub	sp, #40	@ 0x28
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	60f8      	str	r0, [r7, #12]
 8007f46:	60b9      	str	r1, [r7, #8]
 8007f48:	607a      	str	r2, [r7, #4]
 8007f4a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f50:	f7fc fe00 	bl	8004b54 <HAL_GetTick>
 8007f54:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007f5c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007f64:	887b      	ldrh	r3, [r7, #2]
 8007f66:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8007f68:	887b      	ldrh	r3, [r7, #2]
 8007f6a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007f6c:	7ffb      	ldrb	r3, [r7, #31]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d00c      	beq.n	8007f8c <HAL_SPI_TransmitReceive+0x4e>
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f78:	d106      	bne.n	8007f88 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d102      	bne.n	8007f88 <HAL_SPI_TransmitReceive+0x4a>
 8007f82:	7ffb      	ldrb	r3, [r7, #31]
 8007f84:	2b04      	cmp	r3, #4
 8007f86:	d001      	beq.n	8007f8c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007f88:	2302      	movs	r3, #2
 8007f8a:	e1f3      	b.n	8008374 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d005      	beq.n	8007f9e <HAL_SPI_TransmitReceive+0x60>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <HAL_SPI_TransmitReceive+0x60>
 8007f98:	887b      	ldrh	r3, [r7, #2]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d101      	bne.n	8007fa2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e1e8      	b.n	8008374 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d101      	bne.n	8007fb0 <HAL_SPI_TransmitReceive+0x72>
 8007fac:	2302      	movs	r3, #2
 8007fae:	e1e1      	b.n	8008374 <HAL_SPI_TransmitReceive+0x436>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	2b04      	cmp	r3, #4
 8007fc2:	d003      	beq.n	8007fcc <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2205      	movs	r2, #5
 8007fc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	887a      	ldrh	r2, [r7, #2]
 8007fdc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	887a      	ldrh	r2, [r7, #2]
 8007fe4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	68ba      	ldr	r2, [r7, #8]
 8007fec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	887a      	ldrh	r2, [r7, #2]
 8007ff2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	887a      	ldrh	r2, [r7, #2]
 8007ff8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800800e:	d802      	bhi.n	8008016 <HAL_SPI_TransmitReceive+0xd8>
 8008010:	8abb      	ldrh	r3, [r7, #20]
 8008012:	2b01      	cmp	r3, #1
 8008014:	d908      	bls.n	8008028 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008024:	605a      	str	r2, [r3, #4]
 8008026:	e007      	b.n	8008038 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008036:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008042:	2b40      	cmp	r3, #64	@ 0x40
 8008044:	d007      	beq.n	8008056 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008054:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800805e:	f240 8083 	bls.w	8008168 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d002      	beq.n	8008070 <HAL_SPI_TransmitReceive+0x132>
 800806a:	8afb      	ldrh	r3, [r7, #22]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d16f      	bne.n	8008150 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008074:	881a      	ldrh	r2, [r3, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008080:	1c9a      	adds	r2, r3, #2
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800808a:	b29b      	uxth	r3, r3
 800808c:	3b01      	subs	r3, #1
 800808e:	b29a      	uxth	r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008094:	e05c      	b.n	8008150 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	f003 0302 	and.w	r3, r3, #2
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d11b      	bne.n	80080dc <HAL_SPI_TransmitReceive+0x19e>
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d016      	beq.n	80080dc <HAL_SPI_TransmitReceive+0x19e>
 80080ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d113      	bne.n	80080dc <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b8:	881a      	ldrh	r2, [r3, #0]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c4:	1c9a      	adds	r2, r3, #2
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	3b01      	subs	r3, #1
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80080d8:	2300      	movs	r3, #0
 80080da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d11c      	bne.n	8008124 <HAL_SPI_TransmitReceive+0x1e6>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d016      	beq.n	8008124 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68da      	ldr	r2, [r3, #12]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008100:	b292      	uxth	r2, r2
 8008102:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008108:	1c9a      	adds	r2, r3, #2
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008114:	b29b      	uxth	r3, r3
 8008116:	3b01      	subs	r3, #1
 8008118:	b29a      	uxth	r2, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008120:	2301      	movs	r3, #1
 8008122:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008124:	f7fc fd16 	bl	8004b54 <HAL_GetTick>
 8008128:	4602      	mov	r2, r0
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008130:	429a      	cmp	r2, r3
 8008132:	d80d      	bhi.n	8008150 <HAL_SPI_TransmitReceive+0x212>
 8008134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800813a:	d009      	beq.n	8008150 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800814c:	2303      	movs	r3, #3
 800814e:	e111      	b.n	8008374 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008154:	b29b      	uxth	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	d19d      	bne.n	8008096 <HAL_SPI_TransmitReceive+0x158>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008160:	b29b      	uxth	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d197      	bne.n	8008096 <HAL_SPI_TransmitReceive+0x158>
 8008166:	e0e5      	b.n	8008334 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d003      	beq.n	8008178 <HAL_SPI_TransmitReceive+0x23a>
 8008170:	8afb      	ldrh	r3, [r7, #22]
 8008172:	2b01      	cmp	r3, #1
 8008174:	f040 80d1 	bne.w	800831a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800817c:	b29b      	uxth	r3, r3
 800817e:	2b01      	cmp	r3, #1
 8008180:	d912      	bls.n	80081a8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008186:	881a      	ldrh	r2, [r3, #0]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008192:	1c9a      	adds	r2, r3, #2
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800819c:	b29b      	uxth	r3, r3
 800819e:	3b02      	subs	r3, #2
 80081a0:	b29a      	uxth	r2, r3
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80081a6:	e0b8      	b.n	800831a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	330c      	adds	r3, #12
 80081b2:	7812      	ldrb	r2, [r2, #0]
 80081b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ba:	1c5a      	adds	r2, r3, #1
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	3b01      	subs	r3, #1
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081ce:	e0a4      	b.n	800831a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	f003 0302 	and.w	r3, r3, #2
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d134      	bne.n	8008248 <HAL_SPI_TransmitReceive+0x30a>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d02f      	beq.n	8008248 <HAL_SPI_TransmitReceive+0x30a>
 80081e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d12c      	bne.n	8008248 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d912      	bls.n	800821e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081fc:	881a      	ldrh	r2, [r3, #0]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008208:	1c9a      	adds	r2, r3, #2
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008212:	b29b      	uxth	r3, r3
 8008214:	3b02      	subs	r3, #2
 8008216:	b29a      	uxth	r2, r3
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800821c:	e012      	b.n	8008244 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	330c      	adds	r3, #12
 8008228:	7812      	ldrb	r2, [r2, #0]
 800822a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008230:	1c5a      	adds	r2, r3, #1
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800823a:	b29b      	uxth	r3, r3
 800823c:	3b01      	subs	r3, #1
 800823e:	b29a      	uxth	r2, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008244:	2300      	movs	r3, #0
 8008246:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	f003 0301 	and.w	r3, r3, #1
 8008252:	2b01      	cmp	r3, #1
 8008254:	d148      	bne.n	80082e8 <HAL_SPI_TransmitReceive+0x3aa>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800825c:	b29b      	uxth	r3, r3
 800825e:	2b00      	cmp	r3, #0
 8008260:	d042      	beq.n	80082e8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008268:	b29b      	uxth	r3, r3
 800826a:	2b01      	cmp	r3, #1
 800826c:	d923      	bls.n	80082b6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68da      	ldr	r2, [r3, #12]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008278:	b292      	uxth	r2, r2
 800827a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008280:	1c9a      	adds	r2, r3, #2
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800828c:	b29b      	uxth	r3, r3
 800828e:	3b02      	subs	r3, #2
 8008290:	b29a      	uxth	r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800829e:	b29b      	uxth	r3, r3
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d81f      	bhi.n	80082e4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	685a      	ldr	r2, [r3, #4]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80082b2:	605a      	str	r2, [r3, #4]
 80082b4:	e016      	b.n	80082e4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f103 020c 	add.w	r2, r3, #12
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082c2:	7812      	ldrb	r2, [r2, #0]
 80082c4:	b2d2      	uxtb	r2, r2
 80082c6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082cc:	1c5a      	adds	r2, r3, #1
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80082d8:	b29b      	uxth	r3, r3
 80082da:	3b01      	subs	r3, #1
 80082dc:	b29a      	uxth	r2, r3
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80082e4:	2301      	movs	r3, #1
 80082e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80082e8:	f7fc fc34 	bl	8004b54 <HAL_GetTick>
 80082ec:	4602      	mov	r2, r0
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d803      	bhi.n	8008300 <HAL_SPI_TransmitReceive+0x3c2>
 80082f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082fe:	d102      	bne.n	8008306 <HAL_SPI_TransmitReceive+0x3c8>
 8008300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008302:	2b00      	cmp	r3, #0
 8008304:	d109      	bne.n	800831a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2201      	movs	r2, #1
 800830a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008316:	2303      	movs	r3, #3
 8008318:	e02c      	b.n	8008374 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800831e:	b29b      	uxth	r3, r3
 8008320:	2b00      	cmp	r3, #0
 8008322:	f47f af55 	bne.w	80081d0 <HAL_SPI_TransmitReceive+0x292>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800832c:	b29b      	uxth	r3, r3
 800832e:	2b00      	cmp	r3, #0
 8008330:	f47f af4e 	bne.w	80081d0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008334:	6a3a      	ldr	r2, [r7, #32]
 8008336:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f000 f94b 	bl	80085d4 <SPI_EndRxTxTransaction>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d008      	beq.n	8008356 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2220      	movs	r2, #32
 8008348:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2200      	movs	r2, #0
 800834e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e00e      	b.n	8008374 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2201      	movs	r2, #1
 800835a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800836a:	2b00      	cmp	r3, #0
 800836c:	d001      	beq.n	8008372 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e000      	b.n	8008374 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8008372:	2300      	movs	r3, #0
  }
}
 8008374:	4618      	mov	r0, r3
 8008376:	3728      	adds	r7, #40	@ 0x28
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800838a:	b2db      	uxtb	r3, r3
}
 800838c:	4618      	mov	r0, r3
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b088      	sub	sp, #32
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	603b      	str	r3, [r7, #0]
 80083a4:	4613      	mov	r3, r2
 80083a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80083a8:	f7fc fbd4 	bl	8004b54 <HAL_GetTick>
 80083ac:	4602      	mov	r2, r0
 80083ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b0:	1a9b      	subs	r3, r3, r2
 80083b2:	683a      	ldr	r2, [r7, #0]
 80083b4:	4413      	add	r3, r2
 80083b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80083b8:	f7fc fbcc 	bl	8004b54 <HAL_GetTick>
 80083bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80083be:	4b39      	ldr	r3, [pc, #228]	@ (80084a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	015b      	lsls	r3, r3, #5
 80083c4:	0d1b      	lsrs	r3, r3, #20
 80083c6:	69fa      	ldr	r2, [r7, #28]
 80083c8:	fb02 f303 	mul.w	r3, r2, r3
 80083cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083ce:	e054      	b.n	800847a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d6:	d050      	beq.n	800847a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80083d8:	f7fc fbbc 	bl	8004b54 <HAL_GetTick>
 80083dc:	4602      	mov	r2, r0
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	69fa      	ldr	r2, [r7, #28]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d902      	bls.n	80083ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d13d      	bne.n	800846a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	685a      	ldr	r2, [r3, #4]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80083fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008406:	d111      	bne.n	800842c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008410:	d004      	beq.n	800841c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800841a:	d107      	bne.n	800842c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800842a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008430:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008434:	d10f      	bne.n	8008456 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008444:	601a      	str	r2, [r3, #0]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008454:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008466:	2303      	movs	r3, #3
 8008468:	e017      	b.n	800849a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d101      	bne.n	8008474 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008470:	2300      	movs	r3, #0
 8008472:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	3b01      	subs	r3, #1
 8008478:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	689a      	ldr	r2, [r3, #8]
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	4013      	ands	r3, r2
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	429a      	cmp	r2, r3
 8008488:	bf0c      	ite	eq
 800848a:	2301      	moveq	r3, #1
 800848c:	2300      	movne	r3, #0
 800848e:	b2db      	uxtb	r3, r3
 8008490:	461a      	mov	r2, r3
 8008492:	79fb      	ldrb	r3, [r7, #7]
 8008494:	429a      	cmp	r2, r3
 8008496:	d19b      	bne.n	80083d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3720      	adds	r7, #32
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	20000004 	.word	0x20000004

080084a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b08a      	sub	sp, #40	@ 0x28
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
 80084b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80084b6:	2300      	movs	r3, #0
 80084b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80084ba:	f7fc fb4b 	bl	8004b54 <HAL_GetTick>
 80084be:	4602      	mov	r2, r0
 80084c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c2:	1a9b      	subs	r3, r3, r2
 80084c4:	683a      	ldr	r2, [r7, #0]
 80084c6:	4413      	add	r3, r2
 80084c8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80084ca:	f7fc fb43 	bl	8004b54 <HAL_GetTick>
 80084ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	330c      	adds	r3, #12
 80084d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80084d8:	4b3d      	ldr	r3, [pc, #244]	@ (80085d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	4613      	mov	r3, r2
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	4413      	add	r3, r2
 80084e2:	00da      	lsls	r2, r3, #3
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	0d1b      	lsrs	r3, r3, #20
 80084e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084ea:	fb02 f303 	mul.w	r3, r2, r3
 80084ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80084f0:	e060      	b.n	80085b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80084f8:	d107      	bne.n	800850a <SPI_WaitFifoStateUntilTimeout+0x62>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d104      	bne.n	800850a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	b2db      	uxtb	r3, r3
 8008506:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008508:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008510:	d050      	beq.n	80085b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008512:	f7fc fb1f 	bl	8004b54 <HAL_GetTick>
 8008516:	4602      	mov	r2, r0
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	1ad3      	subs	r3, r2, r3
 800851c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800851e:	429a      	cmp	r2, r3
 8008520:	d902      	bls.n	8008528 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008524:	2b00      	cmp	r3, #0
 8008526:	d13d      	bne.n	80085a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	685a      	ldr	r2, [r3, #4]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008536:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008540:	d111      	bne.n	8008566 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800854a:	d004      	beq.n	8008556 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008554:	d107      	bne.n	8008566 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008564:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800856a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800856e:	d10f      	bne.n	8008590 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800857e:	601a      	str	r2, [r3, #0]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800858e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e010      	b.n	80085c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d101      	bne.n	80085ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80085aa:	2300      	movs	r3, #0
 80085ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	3b01      	subs	r3, #1
 80085b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	689a      	ldr	r2, [r3, #8]
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	4013      	ands	r3, r2
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d196      	bne.n	80084f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3728      	adds	r7, #40	@ 0x28
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	20000004 	.word	0x20000004

080085d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af02      	add	r7, sp, #8
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f7ff ff5b 	bl	80084a8 <SPI_WaitFifoStateUntilTimeout>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d007      	beq.n	8008608 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085fc:	f043 0220 	orr.w	r2, r3, #32
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e027      	b.n	8008658 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	2200      	movs	r2, #0
 8008610:	2180      	movs	r1, #128	@ 0x80
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f7ff fec0 	bl	8008398 <SPI_WaitFlagStateUntilTimeout>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d007      	beq.n	800862e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008622:	f043 0220 	orr.w	r2, r3, #32
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	e014      	b.n	8008658 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	2200      	movs	r2, #0
 8008636:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f7ff ff34 	bl	80084a8 <SPI_WaitFifoStateUntilTimeout>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d007      	beq.n	8008656 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800864a:	f043 0220 	orr.w	r2, r3, #32
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008652:	2303      	movs	r3, #3
 8008654:	e000      	b.n	8008658 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3710      	adds	r7, #16
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d101      	bne.n	8008672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e040      	b.n	80086f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008676:	2b00      	cmp	r3, #0
 8008678:	d106      	bne.n	8008688 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7fb f9e0 	bl	8003a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2224      	movs	r2, #36	@ 0x24
 800868c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f022 0201 	bic.w	r2, r2, #1
 800869c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d002      	beq.n	80086ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fb6a 	bl	8008d80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f8af 	bl	8008810 <UART_SetConfig>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d101      	bne.n	80086bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e01b      	b.n	80086f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	685a      	ldr	r2, [r3, #4]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80086ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	689a      	ldr	r2, [r3, #8]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80086da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f042 0201 	orr.w	r2, r2, #1
 80086ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fbe9 	bl	8008ec4 <UART_CheckIdleState>
 80086f2:	4603      	mov	r3, r0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b08a      	sub	sp, #40	@ 0x28
 8008700:	af02      	add	r7, sp, #8
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	603b      	str	r3, [r7, #0]
 8008708:	4613      	mov	r3, r2
 800870a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008710:	2b20      	cmp	r3, #32
 8008712:	d177      	bne.n	8008804 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d002      	beq.n	8008720 <HAL_UART_Transmit+0x24>
 800871a:	88fb      	ldrh	r3, [r7, #6]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d101      	bne.n	8008724 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	e070      	b.n	8008806 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2200      	movs	r2, #0
 8008728:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2221      	movs	r2, #33	@ 0x21
 8008730:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008732:	f7fc fa0f 	bl	8004b54 <HAL_GetTick>
 8008736:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	88fa      	ldrh	r2, [r7, #6]
 800873c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	88fa      	ldrh	r2, [r7, #6]
 8008744:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008750:	d108      	bne.n	8008764 <HAL_UART_Transmit+0x68>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d104      	bne.n	8008764 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800875a:	2300      	movs	r3, #0
 800875c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	61bb      	str	r3, [r7, #24]
 8008762:	e003      	b.n	800876c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008768:	2300      	movs	r3, #0
 800876a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800876c:	e02f      	b.n	80087ce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	9300      	str	r3, [sp, #0]
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	2200      	movs	r2, #0
 8008776:	2180      	movs	r1, #128	@ 0x80
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f000 fc4b 	bl	8009014 <UART_WaitOnFlagUntilTimeout>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d004      	beq.n	800878e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2220      	movs	r2, #32
 8008788:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800878a:	2303      	movs	r3, #3
 800878c:	e03b      	b.n	8008806 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d10b      	bne.n	80087ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	881a      	ldrh	r2, [r3, #0]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087a0:	b292      	uxth	r2, r2
 80087a2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	3302      	adds	r3, #2
 80087a8:	61bb      	str	r3, [r7, #24]
 80087aa:	e007      	b.n	80087bc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	781a      	ldrb	r2, [r3, #0]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	3301      	adds	r3, #1
 80087ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	3b01      	subs	r3, #1
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1c9      	bne.n	800876e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	9300      	str	r3, [sp, #0]
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	2200      	movs	r2, #0
 80087e2:	2140      	movs	r1, #64	@ 0x40
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f000 fc15 	bl	8009014 <UART_WaitOnFlagUntilTimeout>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d004      	beq.n	80087fa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2220      	movs	r2, #32
 80087f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e005      	b.n	8008806 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2220      	movs	r2, #32
 80087fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	e000      	b.n	8008806 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008804:	2302      	movs	r3, #2
  }
}
 8008806:	4618      	mov	r0, r3
 8008808:	3720      	adds	r7, #32
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
	...

08008810 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008814:	b08a      	sub	sp, #40	@ 0x28
 8008816:	af00      	add	r7, sp, #0
 8008818:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	689a      	ldr	r2, [r3, #8]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	431a      	orrs	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	431a      	orrs	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	69db      	ldr	r3, [r3, #28]
 8008834:	4313      	orrs	r3, r2
 8008836:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	4ba4      	ldr	r3, [pc, #656]	@ (8008ad0 <UART_SetConfig+0x2c0>)
 8008840:	4013      	ands	r3, r2
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	6812      	ldr	r2, [r2, #0]
 8008846:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008848:	430b      	orrs	r3, r1
 800884a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	68da      	ldr	r2, [r3, #12]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	430a      	orrs	r2, r1
 8008860:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a99      	ldr	r2, [pc, #612]	@ (8008ad4 <UART_SetConfig+0x2c4>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d004      	beq.n	800887c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6a1b      	ldr	r3, [r3, #32]
 8008876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008878:	4313      	orrs	r3, r2
 800887a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800888c:	430a      	orrs	r2, r1
 800888e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a90      	ldr	r2, [pc, #576]	@ (8008ad8 <UART_SetConfig+0x2c8>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d126      	bne.n	80088e8 <UART_SetConfig+0xd8>
 800889a:	4b90      	ldr	r3, [pc, #576]	@ (8008adc <UART_SetConfig+0x2cc>)
 800889c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088a0:	f003 0303 	and.w	r3, r3, #3
 80088a4:	2b03      	cmp	r3, #3
 80088a6:	d81b      	bhi.n	80088e0 <UART_SetConfig+0xd0>
 80088a8:	a201      	add	r2, pc, #4	@ (adr r2, 80088b0 <UART_SetConfig+0xa0>)
 80088aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ae:	bf00      	nop
 80088b0:	080088c1 	.word	0x080088c1
 80088b4:	080088d1 	.word	0x080088d1
 80088b8:	080088c9 	.word	0x080088c9
 80088bc:	080088d9 	.word	0x080088d9
 80088c0:	2301      	movs	r3, #1
 80088c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088c6:	e116      	b.n	8008af6 <UART_SetConfig+0x2e6>
 80088c8:	2302      	movs	r3, #2
 80088ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088ce:	e112      	b.n	8008af6 <UART_SetConfig+0x2e6>
 80088d0:	2304      	movs	r3, #4
 80088d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088d6:	e10e      	b.n	8008af6 <UART_SetConfig+0x2e6>
 80088d8:	2308      	movs	r3, #8
 80088da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088de:	e10a      	b.n	8008af6 <UART_SetConfig+0x2e6>
 80088e0:	2310      	movs	r3, #16
 80088e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088e6:	e106      	b.n	8008af6 <UART_SetConfig+0x2e6>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a7c      	ldr	r2, [pc, #496]	@ (8008ae0 <UART_SetConfig+0x2d0>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d138      	bne.n	8008964 <UART_SetConfig+0x154>
 80088f2:	4b7a      	ldr	r3, [pc, #488]	@ (8008adc <UART_SetConfig+0x2cc>)
 80088f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088f8:	f003 030c 	and.w	r3, r3, #12
 80088fc:	2b0c      	cmp	r3, #12
 80088fe:	d82d      	bhi.n	800895c <UART_SetConfig+0x14c>
 8008900:	a201      	add	r2, pc, #4	@ (adr r2, 8008908 <UART_SetConfig+0xf8>)
 8008902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008906:	bf00      	nop
 8008908:	0800893d 	.word	0x0800893d
 800890c:	0800895d 	.word	0x0800895d
 8008910:	0800895d 	.word	0x0800895d
 8008914:	0800895d 	.word	0x0800895d
 8008918:	0800894d 	.word	0x0800894d
 800891c:	0800895d 	.word	0x0800895d
 8008920:	0800895d 	.word	0x0800895d
 8008924:	0800895d 	.word	0x0800895d
 8008928:	08008945 	.word	0x08008945
 800892c:	0800895d 	.word	0x0800895d
 8008930:	0800895d 	.word	0x0800895d
 8008934:	0800895d 	.word	0x0800895d
 8008938:	08008955 	.word	0x08008955
 800893c:	2300      	movs	r3, #0
 800893e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008942:	e0d8      	b.n	8008af6 <UART_SetConfig+0x2e6>
 8008944:	2302      	movs	r3, #2
 8008946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800894a:	e0d4      	b.n	8008af6 <UART_SetConfig+0x2e6>
 800894c:	2304      	movs	r3, #4
 800894e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008952:	e0d0      	b.n	8008af6 <UART_SetConfig+0x2e6>
 8008954:	2308      	movs	r3, #8
 8008956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800895a:	e0cc      	b.n	8008af6 <UART_SetConfig+0x2e6>
 800895c:	2310      	movs	r3, #16
 800895e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008962:	e0c8      	b.n	8008af6 <UART_SetConfig+0x2e6>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a5e      	ldr	r2, [pc, #376]	@ (8008ae4 <UART_SetConfig+0x2d4>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d125      	bne.n	80089ba <UART_SetConfig+0x1aa>
 800896e:	4b5b      	ldr	r3, [pc, #364]	@ (8008adc <UART_SetConfig+0x2cc>)
 8008970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008974:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008978:	2b30      	cmp	r3, #48	@ 0x30
 800897a:	d016      	beq.n	80089aa <UART_SetConfig+0x19a>
 800897c:	2b30      	cmp	r3, #48	@ 0x30
 800897e:	d818      	bhi.n	80089b2 <UART_SetConfig+0x1a2>
 8008980:	2b20      	cmp	r3, #32
 8008982:	d00a      	beq.n	800899a <UART_SetConfig+0x18a>
 8008984:	2b20      	cmp	r3, #32
 8008986:	d814      	bhi.n	80089b2 <UART_SetConfig+0x1a2>
 8008988:	2b00      	cmp	r3, #0
 800898a:	d002      	beq.n	8008992 <UART_SetConfig+0x182>
 800898c:	2b10      	cmp	r3, #16
 800898e:	d008      	beq.n	80089a2 <UART_SetConfig+0x192>
 8008990:	e00f      	b.n	80089b2 <UART_SetConfig+0x1a2>
 8008992:	2300      	movs	r3, #0
 8008994:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008998:	e0ad      	b.n	8008af6 <UART_SetConfig+0x2e6>
 800899a:	2302      	movs	r3, #2
 800899c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089a0:	e0a9      	b.n	8008af6 <UART_SetConfig+0x2e6>
 80089a2:	2304      	movs	r3, #4
 80089a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089a8:	e0a5      	b.n	8008af6 <UART_SetConfig+0x2e6>
 80089aa:	2308      	movs	r3, #8
 80089ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089b0:	e0a1      	b.n	8008af6 <UART_SetConfig+0x2e6>
 80089b2:	2310      	movs	r3, #16
 80089b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089b8:	e09d      	b.n	8008af6 <UART_SetConfig+0x2e6>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a4a      	ldr	r2, [pc, #296]	@ (8008ae8 <UART_SetConfig+0x2d8>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d125      	bne.n	8008a10 <UART_SetConfig+0x200>
 80089c4:	4b45      	ldr	r3, [pc, #276]	@ (8008adc <UART_SetConfig+0x2cc>)
 80089c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80089ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80089d0:	d016      	beq.n	8008a00 <UART_SetConfig+0x1f0>
 80089d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80089d4:	d818      	bhi.n	8008a08 <UART_SetConfig+0x1f8>
 80089d6:	2b80      	cmp	r3, #128	@ 0x80
 80089d8:	d00a      	beq.n	80089f0 <UART_SetConfig+0x1e0>
 80089da:	2b80      	cmp	r3, #128	@ 0x80
 80089dc:	d814      	bhi.n	8008a08 <UART_SetConfig+0x1f8>
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d002      	beq.n	80089e8 <UART_SetConfig+0x1d8>
 80089e2:	2b40      	cmp	r3, #64	@ 0x40
 80089e4:	d008      	beq.n	80089f8 <UART_SetConfig+0x1e8>
 80089e6:	e00f      	b.n	8008a08 <UART_SetConfig+0x1f8>
 80089e8:	2300      	movs	r3, #0
 80089ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089ee:	e082      	b.n	8008af6 <UART_SetConfig+0x2e6>
 80089f0:	2302      	movs	r3, #2
 80089f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089f6:	e07e      	b.n	8008af6 <UART_SetConfig+0x2e6>
 80089f8:	2304      	movs	r3, #4
 80089fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089fe:	e07a      	b.n	8008af6 <UART_SetConfig+0x2e6>
 8008a00:	2308      	movs	r3, #8
 8008a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a06:	e076      	b.n	8008af6 <UART_SetConfig+0x2e6>
 8008a08:	2310      	movs	r3, #16
 8008a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a0e:	e072      	b.n	8008af6 <UART_SetConfig+0x2e6>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a35      	ldr	r2, [pc, #212]	@ (8008aec <UART_SetConfig+0x2dc>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d12a      	bne.n	8008a70 <UART_SetConfig+0x260>
 8008a1a:	4b30      	ldr	r3, [pc, #192]	@ (8008adc <UART_SetConfig+0x2cc>)
 8008a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a28:	d01a      	beq.n	8008a60 <UART_SetConfig+0x250>
 8008a2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a2e:	d81b      	bhi.n	8008a68 <UART_SetConfig+0x258>
 8008a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a34:	d00c      	beq.n	8008a50 <UART_SetConfig+0x240>
 8008a36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a3a:	d815      	bhi.n	8008a68 <UART_SetConfig+0x258>
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d003      	beq.n	8008a48 <UART_SetConfig+0x238>
 8008a40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a44:	d008      	beq.n	8008a58 <UART_SetConfig+0x248>
 8008a46:	e00f      	b.n	8008a68 <UART_SetConfig+0x258>
 8008a48:	2300      	movs	r3, #0
 8008a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a4e:	e052      	b.n	8008af6 <UART_SetConfig+0x2e6>
 8008a50:	2302      	movs	r3, #2
 8008a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a56:	e04e      	b.n	8008af6 <UART_SetConfig+0x2e6>
 8008a58:	2304      	movs	r3, #4
 8008a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a5e:	e04a      	b.n	8008af6 <UART_SetConfig+0x2e6>
 8008a60:	2308      	movs	r3, #8
 8008a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a66:	e046      	b.n	8008af6 <UART_SetConfig+0x2e6>
 8008a68:	2310      	movs	r3, #16
 8008a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a6e:	e042      	b.n	8008af6 <UART_SetConfig+0x2e6>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a17      	ldr	r2, [pc, #92]	@ (8008ad4 <UART_SetConfig+0x2c4>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d13a      	bne.n	8008af0 <UART_SetConfig+0x2e0>
 8008a7a:	4b18      	ldr	r3, [pc, #96]	@ (8008adc <UART_SetConfig+0x2cc>)
 8008a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008a84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a88:	d01a      	beq.n	8008ac0 <UART_SetConfig+0x2b0>
 8008a8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a8e:	d81b      	bhi.n	8008ac8 <UART_SetConfig+0x2b8>
 8008a90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a94:	d00c      	beq.n	8008ab0 <UART_SetConfig+0x2a0>
 8008a96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a9a:	d815      	bhi.n	8008ac8 <UART_SetConfig+0x2b8>
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d003      	beq.n	8008aa8 <UART_SetConfig+0x298>
 8008aa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008aa4:	d008      	beq.n	8008ab8 <UART_SetConfig+0x2a8>
 8008aa6:	e00f      	b.n	8008ac8 <UART_SetConfig+0x2b8>
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008aae:	e022      	b.n	8008af6 <UART_SetConfig+0x2e6>
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ab6:	e01e      	b.n	8008af6 <UART_SetConfig+0x2e6>
 8008ab8:	2304      	movs	r3, #4
 8008aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008abe:	e01a      	b.n	8008af6 <UART_SetConfig+0x2e6>
 8008ac0:	2308      	movs	r3, #8
 8008ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ac6:	e016      	b.n	8008af6 <UART_SetConfig+0x2e6>
 8008ac8:	2310      	movs	r3, #16
 8008aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ace:	e012      	b.n	8008af6 <UART_SetConfig+0x2e6>
 8008ad0:	efff69f3 	.word	0xefff69f3
 8008ad4:	40008000 	.word	0x40008000
 8008ad8:	40013800 	.word	0x40013800
 8008adc:	40021000 	.word	0x40021000
 8008ae0:	40004400 	.word	0x40004400
 8008ae4:	40004800 	.word	0x40004800
 8008ae8:	40004c00 	.word	0x40004c00
 8008aec:	40005000 	.word	0x40005000
 8008af0:	2310      	movs	r3, #16
 8008af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a9f      	ldr	r2, [pc, #636]	@ (8008d78 <UART_SetConfig+0x568>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d17a      	bne.n	8008bf6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008b00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008b04:	2b08      	cmp	r3, #8
 8008b06:	d824      	bhi.n	8008b52 <UART_SetConfig+0x342>
 8008b08:	a201      	add	r2, pc, #4	@ (adr r2, 8008b10 <UART_SetConfig+0x300>)
 8008b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0e:	bf00      	nop
 8008b10:	08008b35 	.word	0x08008b35
 8008b14:	08008b53 	.word	0x08008b53
 8008b18:	08008b3d 	.word	0x08008b3d
 8008b1c:	08008b53 	.word	0x08008b53
 8008b20:	08008b43 	.word	0x08008b43
 8008b24:	08008b53 	.word	0x08008b53
 8008b28:	08008b53 	.word	0x08008b53
 8008b2c:	08008b53 	.word	0x08008b53
 8008b30:	08008b4b 	.word	0x08008b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b34:	f7fe fbfe 	bl	8007334 <HAL_RCC_GetPCLK1Freq>
 8008b38:	61f8      	str	r0, [r7, #28]
        break;
 8008b3a:	e010      	b.n	8008b5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b3c:	4b8f      	ldr	r3, [pc, #572]	@ (8008d7c <UART_SetConfig+0x56c>)
 8008b3e:	61fb      	str	r3, [r7, #28]
        break;
 8008b40:	e00d      	b.n	8008b5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b42:	f7fe fb5f 	bl	8007204 <HAL_RCC_GetSysClockFreq>
 8008b46:	61f8      	str	r0, [r7, #28]
        break;
 8008b48:	e009      	b.n	8008b5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b4e:	61fb      	str	r3, [r7, #28]
        break;
 8008b50:	e005      	b.n	8008b5e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008b52:	2300      	movs	r3, #0
 8008b54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008b5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f000 80fb 	beq.w	8008d5c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	685a      	ldr	r2, [r3, #4]
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	005b      	lsls	r3, r3, #1
 8008b6e:	4413      	add	r3, r2
 8008b70:	69fa      	ldr	r2, [r7, #28]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d305      	bcc.n	8008b82 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008b7c:	69fa      	ldr	r2, [r7, #28]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d903      	bls.n	8008b8a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008b88:	e0e8      	b.n	8008d5c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	461c      	mov	r4, r3
 8008b90:	4615      	mov	r5, r2
 8008b92:	f04f 0200 	mov.w	r2, #0
 8008b96:	f04f 0300 	mov.w	r3, #0
 8008b9a:	022b      	lsls	r3, r5, #8
 8008b9c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008ba0:	0222      	lsls	r2, r4, #8
 8008ba2:	68f9      	ldr	r1, [r7, #12]
 8008ba4:	6849      	ldr	r1, [r1, #4]
 8008ba6:	0849      	lsrs	r1, r1, #1
 8008ba8:	2000      	movs	r0, #0
 8008baa:	4688      	mov	r8, r1
 8008bac:	4681      	mov	r9, r0
 8008bae:	eb12 0a08 	adds.w	sl, r2, r8
 8008bb2:	eb43 0b09 	adc.w	fp, r3, r9
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	603b      	str	r3, [r7, #0]
 8008bbe:	607a      	str	r2, [r7, #4]
 8008bc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bc4:	4650      	mov	r0, sl
 8008bc6:	4659      	mov	r1, fp
 8008bc8:	f7f8 f83e 	bl	8000c48 <__aeabi_uldivmod>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	460b      	mov	r3, r1
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008bda:	d308      	bcc.n	8008bee <UART_SetConfig+0x3de>
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008be2:	d204      	bcs.n	8008bee <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	69ba      	ldr	r2, [r7, #24]
 8008bea:	60da      	str	r2, [r3, #12]
 8008bec:	e0b6      	b.n	8008d5c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008bf4:	e0b2      	b.n	8008d5c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	69db      	ldr	r3, [r3, #28]
 8008bfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bfe:	d15e      	bne.n	8008cbe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008c00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008c04:	2b08      	cmp	r3, #8
 8008c06:	d828      	bhi.n	8008c5a <UART_SetConfig+0x44a>
 8008c08:	a201      	add	r2, pc, #4	@ (adr r2, 8008c10 <UART_SetConfig+0x400>)
 8008c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0e:	bf00      	nop
 8008c10:	08008c35 	.word	0x08008c35
 8008c14:	08008c3d 	.word	0x08008c3d
 8008c18:	08008c45 	.word	0x08008c45
 8008c1c:	08008c5b 	.word	0x08008c5b
 8008c20:	08008c4b 	.word	0x08008c4b
 8008c24:	08008c5b 	.word	0x08008c5b
 8008c28:	08008c5b 	.word	0x08008c5b
 8008c2c:	08008c5b 	.word	0x08008c5b
 8008c30:	08008c53 	.word	0x08008c53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c34:	f7fe fb7e 	bl	8007334 <HAL_RCC_GetPCLK1Freq>
 8008c38:	61f8      	str	r0, [r7, #28]
        break;
 8008c3a:	e014      	b.n	8008c66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c3c:	f7fe fb90 	bl	8007360 <HAL_RCC_GetPCLK2Freq>
 8008c40:	61f8      	str	r0, [r7, #28]
        break;
 8008c42:	e010      	b.n	8008c66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c44:	4b4d      	ldr	r3, [pc, #308]	@ (8008d7c <UART_SetConfig+0x56c>)
 8008c46:	61fb      	str	r3, [r7, #28]
        break;
 8008c48:	e00d      	b.n	8008c66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c4a:	f7fe fadb 	bl	8007204 <HAL_RCC_GetSysClockFreq>
 8008c4e:	61f8      	str	r0, [r7, #28]
        break;
 8008c50:	e009      	b.n	8008c66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c56:	61fb      	str	r3, [r7, #28]
        break;
 8008c58:	e005      	b.n	8008c66 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008c64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d077      	beq.n	8008d5c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	005a      	lsls	r2, r3, #1
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	085b      	lsrs	r3, r3, #1
 8008c76:	441a      	add	r2, r3
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c80:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	2b0f      	cmp	r3, #15
 8008c86:	d916      	bls.n	8008cb6 <UART_SetConfig+0x4a6>
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c8e:	d212      	bcs.n	8008cb6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	f023 030f 	bic.w	r3, r3, #15
 8008c98:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	085b      	lsrs	r3, r3, #1
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	f003 0307 	and.w	r3, r3, #7
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	8afb      	ldrh	r3, [r7, #22]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	8afa      	ldrh	r2, [r7, #22]
 8008cb2:	60da      	str	r2, [r3, #12]
 8008cb4:	e052      	b.n	8008d5c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008cbc:	e04e      	b.n	8008d5c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008cbe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008cc2:	2b08      	cmp	r3, #8
 8008cc4:	d827      	bhi.n	8008d16 <UART_SetConfig+0x506>
 8008cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8008ccc <UART_SetConfig+0x4bc>)
 8008cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ccc:	08008cf1 	.word	0x08008cf1
 8008cd0:	08008cf9 	.word	0x08008cf9
 8008cd4:	08008d01 	.word	0x08008d01
 8008cd8:	08008d17 	.word	0x08008d17
 8008cdc:	08008d07 	.word	0x08008d07
 8008ce0:	08008d17 	.word	0x08008d17
 8008ce4:	08008d17 	.word	0x08008d17
 8008ce8:	08008d17 	.word	0x08008d17
 8008cec:	08008d0f 	.word	0x08008d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cf0:	f7fe fb20 	bl	8007334 <HAL_RCC_GetPCLK1Freq>
 8008cf4:	61f8      	str	r0, [r7, #28]
        break;
 8008cf6:	e014      	b.n	8008d22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cf8:	f7fe fb32 	bl	8007360 <HAL_RCC_GetPCLK2Freq>
 8008cfc:	61f8      	str	r0, [r7, #28]
        break;
 8008cfe:	e010      	b.n	8008d22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d00:	4b1e      	ldr	r3, [pc, #120]	@ (8008d7c <UART_SetConfig+0x56c>)
 8008d02:	61fb      	str	r3, [r7, #28]
        break;
 8008d04:	e00d      	b.n	8008d22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d06:	f7fe fa7d 	bl	8007204 <HAL_RCC_GetSysClockFreq>
 8008d0a:	61f8      	str	r0, [r7, #28]
        break;
 8008d0c:	e009      	b.n	8008d22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d12:	61fb      	str	r3, [r7, #28]
        break;
 8008d14:	e005      	b.n	8008d22 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008d16:	2300      	movs	r3, #0
 8008d18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008d20:	bf00      	nop
    }

    if (pclk != 0U)
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d019      	beq.n	8008d5c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	085a      	lsrs	r2, r3, #1
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	441a      	add	r2, r3
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d3a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	2b0f      	cmp	r3, #15
 8008d40:	d909      	bls.n	8008d56 <UART_SetConfig+0x546>
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d48:	d205      	bcs.n	8008d56 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	60da      	str	r2, [r3, #12]
 8008d54:	e002      	b.n	8008d5c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2200      	movs	r2, #0
 8008d66:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008d68:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3728      	adds	r7, #40	@ 0x28
 8008d70:	46bd      	mov	sp, r7
 8008d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d76:	bf00      	nop
 8008d78:	40008000 	.word	0x40008000
 8008d7c:	00f42400 	.word	0x00f42400

08008d80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d8c:	f003 0308 	and.w	r3, r3, #8
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00a      	beq.n	8008daa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	430a      	orrs	r2, r1
 8008da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dae:	f003 0301 	and.w	r3, r3, #1
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00a      	beq.n	8008dcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	430a      	orrs	r2, r1
 8008dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd0:	f003 0302 	and.w	r3, r3, #2
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d00a      	beq.n	8008dee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	430a      	orrs	r2, r1
 8008dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df2:	f003 0304 	and.w	r3, r3, #4
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00a      	beq.n	8008e10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	430a      	orrs	r2, r1
 8008e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e14:	f003 0310 	and.w	r3, r3, #16
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00a      	beq.n	8008e32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	430a      	orrs	r2, r1
 8008e30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e36:	f003 0320 	and.w	r3, r3, #32
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00a      	beq.n	8008e54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	430a      	orrs	r2, r1
 8008e52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d01a      	beq.n	8008e96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	430a      	orrs	r2, r1
 8008e74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e7e:	d10a      	bne.n	8008e96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	430a      	orrs	r2, r1
 8008e94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00a      	beq.n	8008eb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	430a      	orrs	r2, r1
 8008eb6:	605a      	str	r2, [r3, #4]
  }
}
 8008eb8:	bf00      	nop
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b098      	sub	sp, #96	@ 0x60
 8008ec8:	af02      	add	r7, sp, #8
 8008eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ed4:	f7fb fe3e 	bl	8004b54 <HAL_GetTick>
 8008ed8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 0308 	and.w	r3, r3, #8
 8008ee4:	2b08      	cmp	r3, #8
 8008ee6:	d12e      	bne.n	8008f46 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ee8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 f88c 	bl	8009014 <UART_WaitOnFlagUntilTimeout>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d021      	beq.n	8008f46 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f0a:	e853 3f00 	ldrex	r3, [r3]
 8008f0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f16:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f20:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f22:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f28:	e841 2300 	strex	r3, r2, [r1]
 8008f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d1e6      	bne.n	8008f02 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2220      	movs	r2, #32
 8008f38:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	e062      	b.n	800900c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f003 0304 	and.w	r3, r3, #4
 8008f50:	2b04      	cmp	r3, #4
 8008f52:	d149      	bne.n	8008fe8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f58:	9300      	str	r3, [sp, #0]
 8008f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 f856 	bl	8009014 <UART_WaitOnFlagUntilTimeout>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d03c      	beq.n	8008fe8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f76:	e853 3f00 	ldrex	r3, [r3]
 8008f7a:	623b      	str	r3, [r7, #32]
   return(result);
 8008f7c:	6a3b      	ldr	r3, [r7, #32]
 8008f7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	461a      	mov	r2, r3
 8008f8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f94:	e841 2300 	strex	r3, r2, [r1]
 8008f98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1e6      	bne.n	8008f6e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	3308      	adds	r3, #8
 8008fa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	e853 3f00 	ldrex	r3, [r3]
 8008fae:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f023 0301 	bic.w	r3, r3, #1
 8008fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	3308      	adds	r3, #8
 8008fbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008fc0:	61fa      	str	r2, [r7, #28]
 8008fc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc4:	69b9      	ldr	r1, [r7, #24]
 8008fc6:	69fa      	ldr	r2, [r7, #28]
 8008fc8:	e841 2300 	strex	r3, r2, [r1]
 8008fcc:	617b      	str	r3, [r7, #20]
   return(result);
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1e5      	bne.n	8008fa0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2220      	movs	r2, #32
 8008fd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e011      	b.n	800900c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2220      	movs	r2, #32
 8008fec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2220      	movs	r2, #32
 8008ff2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3758      	adds	r7, #88	@ 0x58
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	603b      	str	r3, [r7, #0]
 8009020:	4613      	mov	r3, r2
 8009022:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009024:	e04f      	b.n	80090c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800902c:	d04b      	beq.n	80090c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800902e:	f7fb fd91 	bl	8004b54 <HAL_GetTick>
 8009032:	4602      	mov	r2, r0
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	1ad3      	subs	r3, r2, r3
 8009038:	69ba      	ldr	r2, [r7, #24]
 800903a:	429a      	cmp	r2, r3
 800903c:	d302      	bcc.n	8009044 <UART_WaitOnFlagUntilTimeout+0x30>
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d101      	bne.n	8009048 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009044:	2303      	movs	r3, #3
 8009046:	e04e      	b.n	80090e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f003 0304 	and.w	r3, r3, #4
 8009052:	2b00      	cmp	r3, #0
 8009054:	d037      	beq.n	80090c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	2b80      	cmp	r3, #128	@ 0x80
 800905a:	d034      	beq.n	80090c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	2b40      	cmp	r3, #64	@ 0x40
 8009060:	d031      	beq.n	80090c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	69db      	ldr	r3, [r3, #28]
 8009068:	f003 0308 	and.w	r3, r3, #8
 800906c:	2b08      	cmp	r3, #8
 800906e:	d110      	bne.n	8009092 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2208      	movs	r2, #8
 8009076:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f000 f838 	bl	80090ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2208      	movs	r2, #8
 8009082:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	e029      	b.n	80090e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	69db      	ldr	r3, [r3, #28]
 8009098:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800909c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090a0:	d111      	bne.n	80090c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80090aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f000 f81e 	bl	80090ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2220      	movs	r2, #32
 80090b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80090c2:	2303      	movs	r3, #3
 80090c4:	e00f      	b.n	80090e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	69da      	ldr	r2, [r3, #28]
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	4013      	ands	r3, r2
 80090d0:	68ba      	ldr	r2, [r7, #8]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	bf0c      	ite	eq
 80090d6:	2301      	moveq	r3, #1
 80090d8:	2300      	movne	r3, #0
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	461a      	mov	r2, r3
 80090de:	79fb      	ldrb	r3, [r7, #7]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d0a0      	beq.n	8009026 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090ee:	b480      	push	{r7}
 80090f0:	b095      	sub	sp, #84	@ 0x54
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090fe:	e853 3f00 	ldrex	r3, [r3]
 8009102:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009106:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800910a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	461a      	mov	r2, r3
 8009112:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009114:	643b      	str	r3, [r7, #64]	@ 0x40
 8009116:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009118:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800911a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800911c:	e841 2300 	strex	r3, r2, [r1]
 8009120:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1e6      	bne.n	80090f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	3308      	adds	r3, #8
 800912e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009130:	6a3b      	ldr	r3, [r7, #32]
 8009132:	e853 3f00 	ldrex	r3, [r3]
 8009136:	61fb      	str	r3, [r7, #28]
   return(result);
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	f023 0301 	bic.w	r3, r3, #1
 800913e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	3308      	adds	r3, #8
 8009146:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009148:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800914a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800914e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009150:	e841 2300 	strex	r3, r2, [r1]
 8009154:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009158:	2b00      	cmp	r3, #0
 800915a:	d1e5      	bne.n	8009128 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009160:	2b01      	cmp	r3, #1
 8009162:	d118      	bne.n	8009196 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	e853 3f00 	ldrex	r3, [r3]
 8009170:	60bb      	str	r3, [r7, #8]
   return(result);
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	f023 0310 	bic.w	r3, r3, #16
 8009178:	647b      	str	r3, [r7, #68]	@ 0x44
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	461a      	mov	r2, r3
 8009180:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009182:	61bb      	str	r3, [r7, #24]
 8009184:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009186:	6979      	ldr	r1, [r7, #20]
 8009188:	69ba      	ldr	r2, [r7, #24]
 800918a:	e841 2300 	strex	r3, r2, [r1]
 800918e:	613b      	str	r3, [r7, #16]
   return(result);
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1e6      	bne.n	8009164 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2220      	movs	r2, #32
 800919a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80091aa:	bf00      	nop
 80091ac:	3754      	adds	r7, #84	@ 0x54
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80091b6:	b084      	sub	sp, #16
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	f107 001c 	add.w	r0, r7, #28
 80091c4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 fa69 	bl	80096ac <USB_CoreReset>
 80091da:	4603      	mov	r3, r0
 80091dc:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80091de:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d106      	bne.n	80091f4 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80091f2:	e005      	b.n	8009200 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8009200:	7bfb      	ldrb	r3, [r7, #15]
}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800920c:	b004      	add	sp, #16
 800920e:	4770      	bx	lr

08009210 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	f023 0201 	bic.w	r2, r3, #1
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr

08009232 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b084      	sub	sp, #16
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	460b      	mov	r3, r1
 800923c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800923e:	2300      	movs	r3, #0
 8009240:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800924e:	78fb      	ldrb	r3, [r7, #3]
 8009250:	2b01      	cmp	r3, #1
 8009252:	d115      	bne.n	8009280 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009260:	200a      	movs	r0, #10
 8009262:	f7fb fc83 	bl	8004b6c <HAL_Delay>
      ms += 10U;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	330a      	adds	r3, #10
 800926a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 fa0f 	bl	8009690 <USB_GetMode>
 8009272:	4603      	mov	r3, r0
 8009274:	2b01      	cmp	r3, #1
 8009276:	d01e      	beq.n	80092b6 <USB_SetCurrentMode+0x84>
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2bc7      	cmp	r3, #199	@ 0xc7
 800927c:	d9f0      	bls.n	8009260 <USB_SetCurrentMode+0x2e>
 800927e:	e01a      	b.n	80092b6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009280:	78fb      	ldrb	r3, [r7, #3]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d115      	bne.n	80092b2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009292:	200a      	movs	r0, #10
 8009294:	f7fb fc6a 	bl	8004b6c <HAL_Delay>
      ms += 10U;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	330a      	adds	r3, #10
 800929c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 f9f6 	bl	8009690 <USB_GetMode>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d005      	beq.n	80092b6 <USB_SetCurrentMode+0x84>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2bc7      	cmp	r3, #199	@ 0xc7
 80092ae:	d9f0      	bls.n	8009292 <USB_SetCurrentMode+0x60>
 80092b0:	e001      	b.n	80092b6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e005      	b.n	80092c2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2bc8      	cmp	r3, #200	@ 0xc8
 80092ba:	d101      	bne.n	80092c0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	e000      	b.n	80092c2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
	...

080092cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092cc:	b084      	sub	sp, #16
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b086      	sub	sp, #24
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80092da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80092e6:	2300      	movs	r3, #0
 80092e8:	613b      	str	r3, [r7, #16]
 80092ea:	e009      	b.n	8009300 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	3340      	adds	r3, #64	@ 0x40
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	4413      	add	r3, r2
 80092f6:	2200      	movs	r2, #0
 80092f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	3301      	adds	r3, #1
 80092fe:	613b      	str	r3, [r7, #16]
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	2b0e      	cmp	r3, #14
 8009304:	d9f2      	bls.n	80092ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009306:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800930a:	2b00      	cmp	r3, #0
 800930c:	d11c      	bne.n	8009348 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800931c:	f043 0302 	orr.w	r3, r3, #2
 8009320:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009326:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	601a      	str	r2, [r3, #0]
 8009346:	e005      	b.n	8009354 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800934c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800935a:	461a      	mov	r2, r3
 800935c:	2300      	movs	r3, #0
 800935e:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009360:	2103      	movs	r1, #3
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f95a 	bl	800961c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009368:	2110      	movs	r1, #16
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f8f6 	bl	800955c <USB_FlushTxFifo>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d001      	beq.n	800937a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8009376:	2301      	movs	r3, #1
 8009378:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f920 	bl	80095c0 <USB_FlushRxFifo>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d001      	beq.n	800938a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009390:	461a      	mov	r2, r3
 8009392:	2300      	movs	r3, #0
 8009394:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800939c:	461a      	mov	r2, r3
 800939e:	2300      	movs	r3, #0
 80093a0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093a8:	461a      	mov	r2, r3
 80093aa:	2300      	movs	r3, #0
 80093ac:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093ae:	2300      	movs	r3, #0
 80093b0:	613b      	str	r3, [r7, #16]
 80093b2:	e043      	b.n	800943c <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	015a      	lsls	r2, r3, #5
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	4413      	add	r3, r2
 80093bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093ca:	d118      	bne.n	80093fe <USB_DevInit+0x132>
    {
      if (i == 0U)
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d10a      	bne.n	80093e8 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	015a      	lsls	r2, r3, #5
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	4413      	add	r3, r2
 80093da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093de:	461a      	mov	r2, r3
 80093e0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80093e4:	6013      	str	r3, [r2, #0]
 80093e6:	e013      	b.n	8009410 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	015a      	lsls	r2, r3, #5
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	4413      	add	r3, r2
 80093f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093f4:	461a      	mov	r2, r3
 80093f6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80093fa:	6013      	str	r3, [r2, #0]
 80093fc:	e008      	b.n	8009410 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	015a      	lsls	r2, r3, #5
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	4413      	add	r3, r2
 8009406:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800940a:	461a      	mov	r2, r3
 800940c:	2300      	movs	r3, #0
 800940e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	015a      	lsls	r2, r3, #5
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	4413      	add	r3, r2
 8009418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800941c:	461a      	mov	r2, r3
 800941e:	2300      	movs	r3, #0
 8009420:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	015a      	lsls	r2, r3, #5
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	4413      	add	r3, r2
 800942a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800942e:	461a      	mov	r2, r3
 8009430:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009434:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	3301      	adds	r3, #1
 800943a:	613b      	str	r3, [r7, #16]
 800943c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009440:	461a      	mov	r2, r3
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	4293      	cmp	r3, r2
 8009446:	d3b5      	bcc.n	80093b4 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009448:	2300      	movs	r3, #0
 800944a:	613b      	str	r3, [r7, #16]
 800944c:	e043      	b.n	80094d6 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	015a      	lsls	r2, r3, #5
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	4413      	add	r3, r2
 8009456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009460:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009464:	d118      	bne.n	8009498 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d10a      	bne.n	8009482 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	015a      	lsls	r2, r3, #5
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	4413      	add	r3, r2
 8009474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009478:	461a      	mov	r2, r3
 800947a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800947e:	6013      	str	r3, [r2, #0]
 8009480:	e013      	b.n	80094aa <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	015a      	lsls	r2, r3, #5
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	4413      	add	r3, r2
 800948a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800948e:	461a      	mov	r2, r3
 8009490:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009494:	6013      	str	r3, [r2, #0]
 8009496:	e008      	b.n	80094aa <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	015a      	lsls	r2, r3, #5
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	4413      	add	r3, r2
 80094a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094a4:	461a      	mov	r2, r3
 80094a6:	2300      	movs	r3, #0
 80094a8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	015a      	lsls	r2, r3, #5
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	4413      	add	r3, r2
 80094b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094b6:	461a      	mov	r2, r3
 80094b8:	2300      	movs	r3, #0
 80094ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	015a      	lsls	r2, r3, #5
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	4413      	add	r3, r2
 80094c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094c8:	461a      	mov	r2, r3
 80094ca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80094ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	3301      	adds	r3, #1
 80094d4:	613b      	str	r3, [r7, #16]
 80094d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80094da:	461a      	mov	r2, r3
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	4293      	cmp	r3, r2
 80094e0:	d3b5      	bcc.n	800944e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80094f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094f4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009502:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	f043 0210 	orr.w	r2, r3, #16
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	699a      	ldr	r2, [r3, #24]
 8009514:	4b10      	ldr	r3, [pc, #64]	@ (8009558 <USB_DevInit+0x28c>)
 8009516:	4313      	orrs	r3, r2
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800951c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009520:	2b00      	cmp	r3, #0
 8009522:	d005      	beq.n	8009530 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	699b      	ldr	r3, [r3, #24]
 8009528:	f043 0208 	orr.w	r2, r3, #8
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009530:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009534:	2b01      	cmp	r3, #1
 8009536:	d107      	bne.n	8009548 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	699b      	ldr	r3, [r3, #24]
 800953c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009540:	f043 0304 	orr.w	r3, r3, #4
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009548:	7dfb      	ldrb	r3, [r7, #23]
}
 800954a:	4618      	mov	r0, r3
 800954c:	3718      	adds	r7, #24
 800954e:	46bd      	mov	sp, r7
 8009550:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009554:	b004      	add	sp, #16
 8009556:	4770      	bx	lr
 8009558:	803c3800 	.word	0x803c3800

0800955c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800955c:	b480      	push	{r7}
 800955e:	b085      	sub	sp, #20
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009566:	2300      	movs	r3, #0
 8009568:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	3301      	adds	r3, #1
 800956e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009576:	d901      	bls.n	800957c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009578:	2303      	movs	r3, #3
 800957a:	e01b      	b.n	80095b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	2b00      	cmp	r3, #0
 8009582:	daf2      	bge.n	800956a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009584:	2300      	movs	r3, #0
 8009586:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	019b      	lsls	r3, r3, #6
 800958c:	f043 0220 	orr.w	r2, r3, #32
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	3301      	adds	r3, #1
 8009598:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095a0:	d901      	bls.n	80095a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80095a2:	2303      	movs	r3, #3
 80095a4:	e006      	b.n	80095b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	f003 0320 	and.w	r3, r3, #32
 80095ae:	2b20      	cmp	r3, #32
 80095b0:	d0f0      	beq.n	8009594 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095c8:	2300      	movs	r3, #0
 80095ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	3301      	adds	r3, #1
 80095d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095d8:	d901      	bls.n	80095de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80095da:	2303      	movs	r3, #3
 80095dc:	e018      	b.n	8009610 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	daf2      	bge.n	80095cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80095e6:	2300      	movs	r3, #0
 80095e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2210      	movs	r2, #16
 80095ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	3301      	adds	r3, #1
 80095f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095fc:	d901      	bls.n	8009602 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80095fe:	2303      	movs	r3, #3
 8009600:	e006      	b.n	8009610 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	691b      	ldr	r3, [r3, #16]
 8009606:	f003 0310 	and.w	r3, r3, #16
 800960a:	2b10      	cmp	r3, #16
 800960c:	d0f0      	beq.n	80095f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3714      	adds	r7, #20
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	460b      	mov	r3, r1
 8009626:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	78fb      	ldrb	r3, [r7, #3]
 8009636:	68f9      	ldr	r1, [r7, #12]
 8009638:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800963c:	4313      	orrs	r3, r2
 800963e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3714      	adds	r7, #20
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr

0800964e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800964e:	b480      	push	{r7}
 8009650:	b085      	sub	sp, #20
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	68fa      	ldr	r2, [r7, #12]
 8009664:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009668:	f023 0303 	bic.w	r3, r3, #3
 800966c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800967c:	f043 0302 	orr.w	r3, r3, #2
 8009680:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009682:	2300      	movs	r3, #0
}
 8009684:	4618      	mov	r0, r3
 8009686:	3714      	adds	r7, #20
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	695b      	ldr	r3, [r3, #20]
 800969c:	f003 0301 	and.w	r3, r3, #1
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80096b4:	2300      	movs	r3, #0
 80096b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	3301      	adds	r3, #1
 80096bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80096c4:	d901      	bls.n	80096ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80096c6:	2303      	movs	r3, #3
 80096c8:	e01b      	b.n	8009702 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	daf2      	bge.n	80096b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	f043 0201 	orr.w	r2, r3, #1
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	3301      	adds	r3, #1
 80096e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80096ee:	d901      	bls.n	80096f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80096f0:	2303      	movs	r3, #3
 80096f2:	e006      	b.n	8009702 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	f003 0301 	and.w	r3, r3, #1
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d0f0      	beq.n	80096e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3714      	adds	r7, #20
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr

0800970e <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b08c      	sub	sp, #48	@ 0x30
 8009712:	af00      	add	r7, sp, #0
 8009714:	603b      	str	r3, [r7, #0]
 8009716:	4603      	mov	r3, r0
 8009718:	71fb      	strb	r3, [r7, #7]
 800971a:	460b      	mov	r3, r1
 800971c:	71bb      	strb	r3, [r7, #6]
 800971e:	4613      	mov	r3, r2
 8009720:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8009722:	79fb      	ldrb	r3, [r7, #7]
 8009724:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8009726:	79bb      	ldrb	r3, [r7, #6]
 8009728:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 800972a:	797b      	ldrb	r3, [r7, #5]
 800972c:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800972e:	f107 030c 	add.w	r3, r7, #12
 8009732:	2207      	movs	r2, #7
 8009734:	2100      	movs	r1, #0
 8009736:	4618      	mov	r0, r3
 8009738:	f001 ff3f 	bl	800b5ba <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800973c:	f107 0318 	add.w	r3, r7, #24
 8009740:	2218      	movs	r2, #24
 8009742:	2100      	movs	r1, #0
 8009744:	4618      	mov	r0, r3
 8009746:	f001 ff38 	bl	800b5ba <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800974a:	233f      	movs	r3, #63	@ 0x3f
 800974c:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 800974e:	238a      	movs	r3, #138	@ 0x8a
 8009750:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8009752:	f107 0314 	add.w	r3, r7, #20
 8009756:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8009758:	2303      	movs	r3, #3
 800975a:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &resp;
 800975c:	f107 030c 	add.w	r3, r7, #12
 8009760:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8009762:	2307      	movs	r3, #7
 8009764:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009766:	f107 0318 	add.w	r3, r7, #24
 800976a:	2100      	movs	r1, #0
 800976c:	4618      	mov	r0, r3
 800976e:	f000 fea1 	bl	800a4b4 <hci_send_req>
 8009772:	4603      	mov	r3, r0
 8009774:	2b00      	cmp	r3, #0
 8009776:	da01      	bge.n	800977c <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8009778:	23ff      	movs	r3, #255	@ 0xff
 800977a:	e014      	b.n	80097a6 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 800977c:	7b3b      	ldrb	r3, [r7, #12]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d001      	beq.n	8009786 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8009782:	7b3b      	ldrb	r3, [r7, #12]
 8009784:	e00f      	b.n	80097a6 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8009786:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800978a:	b29a      	uxth	r2, r3
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8009790:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8009794:	b29a      	uxth	r2, r3
 8009796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009798:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800979a:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800979e:	b29a      	uxth	r2, r3
 80097a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097a2:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3730      	adds	r7, #48	@ 0x30
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b08e      	sub	sp, #56	@ 0x38
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	607a      	str	r2, [r7, #4]
 80097b8:	603b      	str	r3, [r7, #0]
 80097ba:	4603      	mov	r3, r0
 80097bc:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 80097be:	7bfb      	ldrb	r3, [r7, #15]
 80097c0:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80097c2:	f107 0314 	add.w	r3, r7, #20
 80097c6:	2207      	movs	r2, #7
 80097c8:	2100      	movs	r1, #0
 80097ca:	4618      	mov	r0, r3
 80097cc:	f001 fef5 	bl	800b5ba <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80097d0:	f107 0320 	add.w	r3, r7, #32
 80097d4:	2218      	movs	r2, #24
 80097d6:	2100      	movs	r1, #0
 80097d8:	4618      	mov	r0, r3
 80097da:	f001 feee 	bl	800b5ba <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80097de:	233f      	movs	r3, #63	@ 0x3f
 80097e0:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 80097e2:	238a      	movs	r3, #138	@ 0x8a
 80097e4:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = &cp;
 80097e6:	f107 031c 	add.w	r3, r7, #28
 80097ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = sizeof(cp);
 80097ec:	2301      	movs	r3, #1
 80097ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 80097f0:	f107 0314 	add.w	r3, r7, #20
 80097f4:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 80097f6:	2307      	movs	r3, #7
 80097f8:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 80097fa:	f107 0320 	add.w	r3, r7, #32
 80097fe:	2100      	movs	r1, #0
 8009800:	4618      	mov	r0, r3
 8009802:	f000 fe57 	bl	800a4b4 <hci_send_req>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	da01      	bge.n	8009810 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 800980c:	23ff      	movs	r3, #255	@ 0xff
 800980e:	e014      	b.n	800983a <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 8009810:	7d3b      	ldrb	r3, [r7, #20]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d001      	beq.n	800981a <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8009816:	7d3b      	ldrb	r3, [r7, #20]
 8009818:	e00f      	b.n	800983a <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 800981a:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800981e:	b29a      	uxth	r2, r3
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8009824:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8009828:	b29a      	uxth	r2, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800982e:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8009832:	b29a      	uxth	r2, r3
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3738      	adds	r7, #56	@ 0x38
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8009842:	b590      	push	{r4, r7, lr}
 8009844:	b095      	sub	sp, #84	@ 0x54
 8009846:	af00      	add	r7, sp, #0
 8009848:	4604      	mov	r4, r0
 800984a:	4608      	mov	r0, r1
 800984c:	4611      	mov	r1, r2
 800984e:	461a      	mov	r2, r3
 8009850:	4623      	mov	r3, r4
 8009852:	71fb      	strb	r3, [r7, #7]
 8009854:	4603      	mov	r3, r0
 8009856:	80bb      	strh	r3, [r7, #4]
 8009858:	460b      	mov	r3, r1
 800985a:	807b      	strh	r3, [r7, #2]
 800985c:	4613      	mov	r3, r2
 800985e:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8009860:	2300      	movs	r3, #0
 8009862:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8009866:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800986a:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800986e:	4413      	add	r3, r2
 8009870:	330e      	adds	r3, #14
 8009872:	2b28      	cmp	r3, #40	@ 0x28
 8009874:	d901      	bls.n	800987a <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8009876:	2342      	movs	r3, #66	@ 0x42
 8009878:	e0c9      	b.n	8009a0e <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 800987a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800987e:	3350      	adds	r3, #80	@ 0x50
 8009880:	443b      	add	r3, r7
 8009882:	79fa      	ldrb	r2, [r7, #7]
 8009884:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009888:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800988c:	3301      	adds	r3, #1
 800988e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8009892:	88bb      	ldrh	r3, [r7, #4]
 8009894:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8009896:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800989a:	f107 0208 	add.w	r2, r7, #8
 800989e:	4413      	add	r3, r2
 80098a0:	88ba      	ldrh	r2, [r7, #4]
 80098a2:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80098a4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80098a8:	3302      	adds	r3, #2
 80098aa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 80098ae:	887b      	ldrh	r3, [r7, #2]
 80098b0:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 80098b2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80098b6:	f107 0208 	add.w	r2, r7, #8
 80098ba:	4413      	add	r3, r2
 80098bc:	887a      	ldrh	r2, [r7, #2]
 80098be:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80098c0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80098c4:	3302      	adds	r3, #2
 80098c6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = OwnAddrType;
 80098ca:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80098ce:	3350      	adds	r3, #80	@ 0x50
 80098d0:	443b      	add	r3, r7
 80098d2:	79ba      	ldrb	r2, [r7, #6]
 80098d4:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80098d8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80098dc:	3301      	adds	r3, #1
 80098de:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 80098e2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80098e6:	3350      	adds	r3, #80	@ 0x50
 80098e8:	443b      	add	r3, r7
 80098ea:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 80098ee:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80098f2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80098f6:	3301      	adds	r3, #1
 80098f8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = LocalNameLen;
 80098fc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009900:	3350      	adds	r3, #80	@ 0x50
 8009902:	443b      	add	r3, r7
 8009904:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8009908:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800990c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009910:	3301      	adds	r3, #1
 8009912:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8009916:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800991a:	f107 0208 	add.w	r2, r7, #8
 800991e:	4413      	add	r3, r2
 8009920:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8009924:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009926:	4618      	mov	r0, r3
 8009928:	f001 fec7 	bl	800b6ba <memcpy>
  indx +=  LocalNameLen;
 800992c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8009930:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8009934:	4413      	add	r3, r2
 8009936:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 800993a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800993e:	3350      	adds	r3, #80	@ 0x50
 8009940:	443b      	add	r3, r7
 8009942:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8009946:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800994a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800994e:	3301      	adds	r3, #1
 8009950:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8009954:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009958:	f107 0208 	add.w	r2, r7, #8
 800995c:	4413      	add	r3, r2
 800995e:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8009962:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8009964:	4618      	mov	r0, r3
 8009966:	f001 fea8 	bl	800b6ba <memcpy>
  indx +=  ServiceUUIDLen;  
 800996a:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800996e:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8009972:	4413      	add	r3, r2
 8009974:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8009978:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800997c:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8009980:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009984:	f107 0208 	add.w	r2, r7, #8
 8009988:	4413      	add	r3, r2
 800998a:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 800998e:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8009990:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009994:	3302      	adds	r3, #2
 8009996:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 800999a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800999e:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 80099a2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80099a6:	f107 0208 	add.w	r2, r7, #8
 80099aa:	4413      	add	r3, r2
 80099ac:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 80099b0:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 80099b2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80099b6:	3302      	adds	r3, #2
 80099b8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80099bc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80099c0:	2218      	movs	r2, #24
 80099c2:	2100      	movs	r1, #0
 80099c4:	4618      	mov	r0, r3
 80099c6:	f001 fdf8 	bl	800b5ba <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80099ca:	233f      	movs	r3, #63	@ 0x3f
 80099cc:	86bb      	strh	r3, [r7, #52]	@ 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 80099ce:	2383      	movs	r3, #131	@ 0x83
 80099d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
  rq.cparam = (void *)buffer;
 80099d2:	f107 0308 	add.w	r3, r7, #8
 80099d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.clen = indx;
 80099d8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80099dc:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rparam = &status;
 80099de:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 80099e2:	647b      	str	r3, [r7, #68]	@ 0x44
  rq.rlen = 1;
 80099e4:	2301      	movs	r3, #1
 80099e6:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 80099e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80099ec:	2100      	movs	r1, #0
 80099ee:	4618      	mov	r0, r3
 80099f0:	f000 fd60 	bl	800a4b4 <hci_send_req>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	da01      	bge.n	80099fe <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 80099fa:	23ff      	movs	r3, #255	@ 0xff
 80099fc:	e007      	b.n	8009a0e <aci_gap_set_discoverable+0x1cc>

  if (status) {
 80099fe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d002      	beq.n	8009a0c <aci_gap_set_discoverable+0x1ca>
    return status;
 8009a06:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009a0a:	e000      	b.n	8009a0e <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3754      	adds	r7, #84	@ 0x54
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd90      	pop	{r4, r7, pc}

08009a16 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8009a16:	b590      	push	{r4, r7, lr}
 8009a18:	b091      	sub	sp, #68	@ 0x44
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	603a      	str	r2, [r7, #0]
 8009a1e:	461a      	mov	r2, r3
 8009a20:	4603      	mov	r3, r0
 8009a22:	71fb      	strb	r3, [r7, #7]
 8009a24:	460b      	mov	r3, r1
 8009a26:	71bb      	strb	r3, [r7, #6]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8009a2c:	79fb      	ldrb	r3, [r7, #7]
 8009a2e:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 8009a30:	79bb      	ldrb	r3, [r7, #6]
 8009a32:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8009a34:	79bb      	ldrb	r3, [r7, #6]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00a      	beq.n	8009a50 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8009a3a:	683a      	ldr	r2, [r7, #0]
 8009a3c:	f107 030e 	add.w	r3, r7, #14
 8009a40:	6814      	ldr	r4, [r2, #0]
 8009a42:	6850      	ldr	r0, [r2, #4]
 8009a44:	6891      	ldr	r1, [r2, #8]
 8009a46:	68d2      	ldr	r2, [r2, #12]
 8009a48:	601c      	str	r4, [r3, #0]
 8009a4a:	6058      	str	r0, [r3, #4]
 8009a4c:	6099      	str	r1, [r3, #8]
 8009a4e:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8009a50:	797b      	ldrb	r3, [r7, #5]
 8009a52:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8009a54:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8009a58:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8009a5a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8009a5e:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8009a62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009a64:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
  cp.bonding_mode = bonding_mode;
 8009a68:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8009a6c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009a70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009a74:	2218      	movs	r2, #24
 8009a76:	2100      	movs	r1, #0
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f001 fd9e 	bl	800b5ba <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009a7e:	233f      	movs	r3, #63	@ 0x3f
 8009a80:	853b      	strh	r3, [r7, #40]	@ 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8009a82:	2386      	movs	r3, #134	@ 0x86
 8009a84:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rq.cparam = &cp;
 8009a86:	f107 030c 	add.w	r3, r7, #12
 8009a8a:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.clen = sizeof(cp);
 8009a8c:	231a      	movs	r3, #26
 8009a8e:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rparam = &status;
 8009a90:	f107 030b 	add.w	r3, r7, #11
 8009a94:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rlen = 1;
 8009a96:	2301      	movs	r3, #1
 8009a98:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8009a9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f000 fd07 	bl	800a4b4 <hci_send_req>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	da01      	bge.n	8009ab0 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 8009aac:	23ff      	movs	r3, #255	@ 0xff
 8009aae:	e005      	b.n	8009abc <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 8009ab0:	7afb      	ldrb	r3, [r7, #11]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d001      	beq.n	8009aba <aci_gap_set_auth_requirement+0xa4>
    return status;
 8009ab6:	7afb      	ldrb	r3, [r7, #11]
 8009ab8:	e000      	b.n	8009abc <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8009aba:	2300      	movs	r3, #0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3744      	adds	r7, #68	@ 0x44
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd90      	pop	{r4, r7, pc}

08009ac4 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b092      	sub	sp, #72	@ 0x48
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	4603      	mov	r3, r0
 8009acc:	6039      	str	r1, [r7, #0]
 8009ace:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 8009ad6:	79fb      	ldrb	r3, [r7, #7]
 8009ad8:	2b1f      	cmp	r3, #31
 8009ada:	d901      	bls.n	8009ae0 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 8009adc:	2342      	movs	r3, #66	@ 0x42
 8009ade:	e03e      	b.n	8009b5e <aci_gap_update_adv_data+0x9a>

  buffer[indx] = AdvLen;
 8009ae0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009ae4:	3348      	adds	r3, #72	@ 0x48
 8009ae6:	443b      	add	r3, r7
 8009ae8:	79fa      	ldrb	r2, [r7, #7]
 8009aea:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 8009aee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009af2:	3301      	adds	r3, #1
 8009af4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 8009af8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009afc:	f107 0208 	add.w	r2, r7, #8
 8009b00:	4413      	add	r3, r2
 8009b02:	79fa      	ldrb	r2, [r7, #7]
 8009b04:	6839      	ldr	r1, [r7, #0]
 8009b06:	4618      	mov	r0, r3
 8009b08:	f001 fdd7 	bl	800b6ba <memcpy>
  indx +=  AdvLen;
 8009b0c:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8009b10:	79fb      	ldrb	r3, [r7, #7]
 8009b12:	4413      	add	r3, r2
 8009b14:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009b18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009b1c:	2218      	movs	r2, #24
 8009b1e:	2100      	movs	r1, #0
 8009b20:	4618      	mov	r0, r3
 8009b22:	f001 fd4a 	bl	800b5ba <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009b26:	233f      	movs	r3, #63	@ 0x3f
 8009b28:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 8009b2a:	238e      	movs	r3, #142	@ 0x8e
 8009b2c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 8009b2e:	f107 0308 	add.w	r3, r7, #8
 8009b32:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8009b34:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009b38:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &status;
 8009b3a:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8009b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = 1;
 8009b40:	2301      	movs	r3, #1
 8009b42:	643b      	str	r3, [r7, #64]	@ 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 8009b44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009b48:	2100      	movs	r1, #0
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f000 fcb2 	bl	800a4b4 <hci_send_req>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	da01      	bge.n	8009b5a <aci_gap_update_adv_data+0x96>
    return BLE_STATUS_TIMEOUT;
 8009b56:	23ff      	movs	r3, #255	@ 0xff
 8009b58:	e001      	b.n	8009b5e <aci_gap_update_adv_data+0x9a>
    
  return status;
 8009b5a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3748      	adds	r7, #72	@ 0x48
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b088      	sub	sp, #32
 8009b6a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009b6c:	f107 0308 	add.w	r3, r7, #8
 8009b70:	2218      	movs	r2, #24
 8009b72:	2100      	movs	r1, #0
 8009b74:	4618      	mov	r0, r3
 8009b76:	f001 fd20 	bl	800b5ba <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009b7a:	233f      	movs	r3, #63	@ 0x3f
 8009b7c:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8009b7e:	f240 1301 	movw	r3, #257	@ 0x101
 8009b82:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009b84:	1dfb      	adds	r3, r7, #7
 8009b86:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8009b8c:	f107 0308 	add.w	r3, r7, #8
 8009b90:	2100      	movs	r1, #0
 8009b92:	4618      	mov	r0, r3
 8009b94:	f000 fc8e 	bl	800a4b4 <hci_send_req>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	da01      	bge.n	8009ba2 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8009b9e:	23ff      	movs	r3, #255	@ 0xff
 8009ba0:	e000      	b.n	8009ba4 <aci_gatt_init+0x3e>

  return status;
 8009ba2:	79fb      	ldrb	r3, [r7, #7]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3720      	adds	r7, #32
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b090      	sub	sp, #64	@ 0x40
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6039      	str	r1, [r7, #0]
 8009bb4:	4611      	mov	r1, r2
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	4603      	mov	r3, r0
 8009bba:	71fb      	strb	r3, [r7, #7]
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	71bb      	strb	r3, [r7, #6]
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_uuid_type;
 8009bca:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009bce:	3340      	adds	r3, #64	@ 0x40
 8009bd0:	443b      	add	r3, r7
 8009bd2:	79fa      	ldrb	r2, [r7, #7]
 8009bd4:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8009bd8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009bdc:	3301      	adds	r3, #1
 8009bde:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8009be2:	79fb      	ldrb	r3, [r7, #7]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d103      	bne.n	8009bf0 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 8009be8:	2302      	movs	r3, #2
 8009bea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009bee:	e002      	b.n	8009bf6 <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 8009bf0:	2310      	movs	r3, #16
 8009bf2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8009bf6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009bfa:	f107 020c 	add.w	r2, r7, #12
 8009bfe:	4413      	add	r3, r2
 8009c00:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8009c04:	6839      	ldr	r1, [r7, #0]
 8009c06:	4618      	mov	r0, r3
 8009c08:	f001 fd57 	bl	800b6ba <memcpy>
  indx +=  uuid_len;
 8009c0c:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8009c10:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009c14:	4413      	add	r3, r2
 8009c16:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_type;
 8009c1a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009c1e:	3340      	adds	r3, #64	@ 0x40
 8009c20:	443b      	add	r3, r7
 8009c22:	79ba      	ldrb	r2, [r7, #6]
 8009c24:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8009c28:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = max_attr_records;
 8009c32:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009c36:	3340      	adds	r3, #64	@ 0x40
 8009c38:	443b      	add	r3, r7
 8009c3a:	797a      	ldrb	r2, [r7, #5]
 8009c3c:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8009c40:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009c44:	3301      	adds	r3, #1
 8009c46:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009c4a:	f107 0320 	add.w	r3, r7, #32
 8009c4e:	2203      	movs	r2, #3
 8009c50:	2100      	movs	r1, #0
 8009c52:	4618      	mov	r0, r3
 8009c54:	f001 fcb1 	bl	800b5ba <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009c58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c5c:	2218      	movs	r2, #24
 8009c5e:	2100      	movs	r1, #0
 8009c60:	4618      	mov	r0, r3
 8009c62:	f001 fcaa 	bl	800b5ba <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009c66:	233f      	movs	r3, #63	@ 0x3f
 8009c68:	84bb      	strh	r3, [r7, #36]	@ 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8009c6a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8009c6e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  rq.cparam = (void *)buffer;
 8009c70:	f107 030c 	add.w	r3, r7, #12
 8009c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.clen = indx;
 8009c76:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009c7a:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rparam = &resp;
 8009c7c:	f107 0320 	add.w	r3, r7, #32
 8009c80:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8009c82:	2303      	movs	r3, #3
 8009c84:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8009c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f000 fc11 	bl	800a4b4 <hci_send_req>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	da01      	bge.n	8009c9c <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 8009c98:	23ff      	movs	r3, #255	@ 0xff
 8009c9a:	e00c      	b.n	8009cb6 <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 8009c9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d002      	beq.n	8009caa <aci_gatt_add_serv+0xfe>
    return resp.status;
 8009ca4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009ca8:	e005      	b.n	8009cb6 <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 8009caa:	f8b7 3021 	ldrh.w	r3, [r7, #33]	@ 0x21
 8009cae:	b29a      	uxth	r2, r3
 8009cb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cb2:	801a      	strh	r2, [r3, #0]

  return 0;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3740      	adds	r7, #64	@ 0x40
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b092      	sub	sp, #72	@ 0x48
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	603a      	str	r2, [r7, #0]
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	4603      	mov	r3, r0
 8009cca:	80fb      	strh	r3, [r7, #6]
 8009ccc:	460b      	mov	r3, r1
 8009cce:	717b      	strb	r3, [r7, #5]
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  serviceHandle = htobs(serviceHandle);
 8009cda:	88fb      	ldrh	r3, [r7, #6]
 8009cdc:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8009cde:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009ce2:	f107 020c 	add.w	r2, r7, #12
 8009ce6:	4413      	add	r3, r2
 8009ce8:	88fa      	ldrh	r2, [r7, #6]
 8009cea:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8009cec:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009cf0:	3302      	adds	r3, #2
 8009cf2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charUuidType;
 8009cf6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009cfa:	3348      	adds	r3, #72	@ 0x48
 8009cfc:	443b      	add	r3, r7
 8009cfe:	797a      	ldrb	r2, [r7, #5]
 8009d00:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009d04:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009d08:	3301      	adds	r3, #1
 8009d0a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8009d0e:	797b      	ldrb	r3, [r7, #5]
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d103      	bne.n	8009d1c <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 8009d14:	2302      	movs	r3, #2
 8009d16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009d1a:	e002      	b.n	8009d22 <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 8009d1c:	2310      	movs	r3, #16
 8009d1e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8009d22:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009d26:	f107 020c 	add.w	r2, r7, #12
 8009d2a:	4413      	add	r3, r2
 8009d2c:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8009d30:	6839      	ldr	r1, [r7, #0]
 8009d32:	4618      	mov	r0, r3
 8009d34:	f001 fcc1 	bl	800b6ba <memcpy>
  indx +=  uuid_len;
 8009d38:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8009d3c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009d40:	4413      	add	r3, r2
 8009d42:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charValueLen;
 8009d46:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009d4a:	3348      	adds	r3, #72	@ 0x48
 8009d4c:	443b      	add	r3, r7
 8009d4e:	793a      	ldrb	r2, [r7, #4]
 8009d50:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009d54:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009d58:	3301      	adds	r3, #1
 8009d5a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charProperties;
 8009d5e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009d62:	3348      	adds	r3, #72	@ 0x48
 8009d64:	443b      	add	r3, r7
 8009d66:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8009d6a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009d6e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009d72:	3301      	adds	r3, #1
 8009d74:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = secPermissions;
 8009d78:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009d7c:	3348      	adds	r3, #72	@ 0x48
 8009d7e:	443b      	add	r3, r7
 8009d80:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8009d84:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009d88:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = gattEvtMask;
 8009d92:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009d96:	3348      	adds	r3, #72	@ 0x48
 8009d98:	443b      	add	r3, r7
 8009d9a:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 8009d9e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009da2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009da6:	3301      	adds	r3, #1
 8009da8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = encryKeySize;
 8009dac:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009db0:	3348      	adds	r3, #72	@ 0x48
 8009db2:	443b      	add	r3, r7
 8009db4:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8009db8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009dbc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = isVariable;
 8009dc6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009dca:	3348      	adds	r3, #72	@ 0x48
 8009dcc:	443b      	add	r3, r7
 8009dce:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8009dd2:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009dd6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009dda:	3301      	adds	r3, #1
 8009ddc:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009de0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009de4:	2203      	movs	r2, #3
 8009de6:	2100      	movs	r1, #0
 8009de8:	4618      	mov	r0, r3
 8009dea:	f001 fbe6 	bl	800b5ba <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009dee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009df2:	2218      	movs	r2, #24
 8009df4:	2100      	movs	r1, #0
 8009df6:	4618      	mov	r0, r3
 8009df8:	f001 fbdf 	bl	800b5ba <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009dfc:	233f      	movs	r3, #63	@ 0x3f
 8009dfe:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8009e00:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8009e04:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 8009e06:	f107 030c 	add.w	r3, r7, #12
 8009e0a:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8009e0c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009e10:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &resp;
 8009e12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	643b      	str	r3, [r7, #64]	@ 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8009e1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009e20:	2100      	movs	r1, #0
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 fb46 	bl	800a4b4 <hci_send_req>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	da01      	bge.n	8009e32 <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 8009e2e:	23ff      	movs	r3, #255	@ 0xff
 8009e30:	e00c      	b.n	8009e4c <aci_gatt_add_char+0x18e>

  if (resp.status) {
 8009e32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d002      	beq.n	8009e40 <aci_gatt_add_char+0x182>
    return resp.status;
 8009e3a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009e3e:	e005      	b.n	8009e4c <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8009e40:	f8b7 3029 	ldrh.w	r3, [r7, #41]	@ 0x29
 8009e44:	b29a      	uxth	r2, r3
 8009e46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e48:	801a      	strh	r2, [r3, #0]

  return 0;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3748      	adds	r7, #72	@ 0x48
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8009e54:	b590      	push	{r4, r7, lr}
 8009e56:	b0ab      	sub	sp, #172	@ 0xac
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	4604      	mov	r4, r0
 8009e5c:	4608      	mov	r0, r1
 8009e5e:	4611      	mov	r1, r2
 8009e60:	461a      	mov	r2, r3
 8009e62:	4623      	mov	r3, r4
 8009e64:	80fb      	strh	r3, [r7, #6]
 8009e66:	4603      	mov	r3, r0
 8009e68:	80bb      	strh	r3, [r7, #4]
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	70fb      	strb	r3, [r7, #3]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8009e72:	2300      	movs	r3, #0
 8009e74:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8009e78:	78bb      	ldrb	r3, [r7, #2]
 8009e7a:	2b7a      	cmp	r3, #122	@ 0x7a
 8009e7c:	d901      	bls.n	8009e82 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 8009e7e:	2342      	movs	r3, #66	@ 0x42
 8009e80:	e074      	b.n	8009f6c <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 8009e82:	88fb      	ldrh	r3, [r7, #6]
 8009e84:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8009e86:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009e8a:	f107 0208 	add.w	r2, r7, #8
 8009e8e:	4413      	add	r3, r2
 8009e90:	88fa      	ldrh	r2, [r7, #6]
 8009e92:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8009e94:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009e98:	3302      	adds	r3, #2
 8009e9a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  charHandle = htobs(charHandle);
 8009e9e:	88bb      	ldrh	r3, [r7, #4]
 8009ea0:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8009ea2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009ea6:	f107 0208 	add.w	r2, r7, #8
 8009eaa:	4413      	add	r3, r2
 8009eac:	88ba      	ldrh	r2, [r7, #4]
 8009eae:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8009eb0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009eb4:	3302      	adds	r3, #2
 8009eb6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValOffset;
 8009eba:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009ebe:	33a8      	adds	r3, #168	@ 0xa8
 8009ec0:	443b      	add	r3, r7
 8009ec2:	78fa      	ldrb	r2, [r7, #3]
 8009ec4:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8009ec8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009ecc:	3301      	adds	r3, #1
 8009ece:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValueLen;
 8009ed2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009ed6:	33a8      	adds	r3, #168	@ 0xa8
 8009ed8:	443b      	add	r3, r7
 8009eda:	78ba      	ldrb	r2, [r7, #2]
 8009edc:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8009ee0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8009eea:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009eee:	f107 0208 	add.w	r2, r7, #8
 8009ef2:	4413      	add	r3, r2
 8009ef4:	78ba      	ldrb	r2, [r7, #2]
 8009ef6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8009efa:	4618      	mov	r0, r3
 8009efc:	f001 fbdd 	bl	800b6ba <memcpy>
  indx +=  charValueLen;
 8009f00:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8009f04:	78bb      	ldrb	r3, [r7, #2]
 8009f06:	4413      	add	r3, r2
 8009f08:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009f0c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8009f10:	2218      	movs	r2, #24
 8009f12:	2100      	movs	r1, #0
 8009f14:	4618      	mov	r0, r3
 8009f16:	f001 fb50 	bl	800b5ba <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009f1a:	233f      	movs	r3, #63	@ 0x3f
 8009f1c:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8009f20:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8009f24:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 8009f28:	f107 0308 	add.w	r3, r7, #8
 8009f2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 8009f30:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009f34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 8009f38:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 8009f3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 8009f40:	2301      	movs	r3, #1
 8009f42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8009f46:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f000 fab1 	bl	800a4b4 <hci_send_req>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	da01      	bge.n	8009f5c <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 8009f58:	23ff      	movs	r3, #255	@ 0xff
 8009f5a:	e007      	b.n	8009f6c <aci_gatt_update_char_value+0x118>

  if (status) {
 8009f5c:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d002      	beq.n	8009f6a <aci_gatt_update_char_value+0x116>
    return status;
 8009f64:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8009f68:	e000      	b.n	8009f6c <aci_gatt_update_char_value+0x118>
  }

  return 0;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	37ac      	adds	r7, #172	@ 0xac
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd90      	pop	{r4, r7, pc}

08009f74 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b08a      	sub	sp, #40	@ 0x28
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 8009f7e:	88fb      	ldrh	r3, [r7, #6]
 8009f80:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 8009f82:	f107 0310 	add.w	r3, r7, #16
 8009f86:	2218      	movs	r2, #24
 8009f88:	2100      	movs	r1, #0
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f001 fb15 	bl	800b5ba <memset>
    rq.ogf = OGF_VENDOR_CMD;
 8009f90:	233f      	movs	r3, #63	@ 0x3f
 8009f92:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8009f94:	f240 1327 	movw	r3, #295	@ 0x127
 8009f98:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 8009f9a:	f107 030c 	add.w	r3, r7, #12
 8009f9e:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 8009fa0:	2302      	movs	r3, #2
 8009fa2:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 8009fa4:	f107 030b 	add.w	r3, r7, #11
 8009fa8:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 8009faa:	2301      	movs	r3, #1
 8009fac:	627b      	str	r3, [r7, #36]	@ 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 8009fae:	f107 0310 	add.w	r3, r7, #16
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f000 fa7d 	bl	800a4b4 <hci_send_req>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	da01      	bge.n	8009fc4 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 8009fc0:	23ff      	movs	r3, #255	@ 0xff
 8009fc2:	e000      	b.n	8009fc6 <aci_gatt_allow_read+0x52>

    return status;
 8009fc4:	7afb      	ldrb	r3, [r7, #11]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3728      	adds	r7, #40	@ 0x28
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b0ac      	sub	sp, #176	@ 0xb0
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	60ba      	str	r2, [r7, #8]
 8009fd6:	607b      	str	r3, [r7, #4]
 8009fd8:	4603      	mov	r3, r0
 8009fda:	73fb      	strb	r3, [r7, #15]
 8009fdc:	460b      	mov	r3, r1
 8009fde:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 8009fe0:	7bfb      	ldrb	r3, [r7, #15]
 8009fe2:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009fe6:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8009fea:	2218      	movs	r2, #24
 8009fec:	2100      	movs	r1, #0
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f001 fae3 	bl	800b5ba <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009ff4:	233f      	movs	r3, #63	@ 0x3f
 8009ff6:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 8009ffa:	230d      	movs	r3, #13
 8009ffc:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  rq.cparam = &cp;
 800a000:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800a004:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  rq.clen = sizeof(cp);
 800a008:	2301      	movs	r3, #1
 800a00a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  rq.rparam = &rp;
 800a00e:	f107 0314 	add.w	r3, r7, #20
 800a012:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  rq.rlen = sizeof(rp);
 800a016:	2380      	movs	r3, #128	@ 0x80
 800a018:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a01c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800a020:	2100      	movs	r1, #0
 800a022:	4618      	mov	r0, r3
 800a024:	f000 fa46 	bl	800a4b4 <hci_send_req>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	da01      	bge.n	800a032 <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 800a02e:	23ff      	movs	r3, #255	@ 0xff
 800a030:	e01e      	b.n	800a070 <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 800a032:	7d3b      	ldrb	r3, [r7, #20]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d001      	beq.n	800a03c <aci_hal_read_config_data+0x6e>
    return rp.status;
 800a038:	7d3b      	ldrb	r3, [r7, #20]
 800a03a:	e019      	b.n	800a070 <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 800a03c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a040:	b2db      	uxtb	r3, r3
 800a042:	3b01      	subs	r3, #1
 800a044:	b2da      	uxtb	r2, r3
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	461a      	mov	r2, r3
 800a050:	89bb      	ldrh	r3, [r7, #12]
 800a052:	4293      	cmp	r3, r2
 800a054:	d201      	bcs.n	800a05a <aci_hal_read_config_data+0x8c>
 800a056:	89ba      	ldrh	r2, [r7, #12]
 800a058:	e002      	b.n	800a060 <aci_hal_read_config_data+0x92>
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	461a      	mov	r2, r3
 800a060:	f107 0314 	add.w	r3, r7, #20
 800a064:	3301      	adds	r3, #1
 800a066:	4619      	mov	r1, r3
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f001 fb26 	bl	800b6ba <memcpy>
  
  return 0;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	4618      	mov	r0, r3
 800a072:	37b0      	adds	r7, #176	@ 0xb0
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b08a      	sub	sp, #40	@ 0x28
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	4603      	mov	r3, r0
 800a080:	460a      	mov	r2, r1
 800a082:	71fb      	strb	r3, [r7, #7]
 800a084:	4613      	mov	r3, r2
 800a086:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800a088:	79fb      	ldrb	r3, [r7, #7]
 800a08a:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 800a08c:	79bb      	ldrb	r3, [r7, #6]
 800a08e:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a090:	f107 0310 	add.w	r3, r7, #16
 800a094:	2218      	movs	r2, #24
 800a096:	2100      	movs	r1, #0
 800a098:	4618      	mov	r0, r3
 800a09a:	f001 fa8e 	bl	800b5ba <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a09e:	233f      	movs	r3, #63	@ 0x3f
 800a0a0:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800a0a2:	230f      	movs	r3, #15
 800a0a4:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800a0a6:	f107 030c 	add.w	r3, r7, #12
 800a0aa:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800a0ac:	2302      	movs	r3, #2
 800a0ae:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800a0b0:	f107 030b 	add.w	r3, r7, #11
 800a0b4:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	627b      	str	r3, [r7, #36]	@ 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800a0ba:	f107 0310 	add.w	r3, r7, #16
 800a0be:	2100      	movs	r1, #0
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f000 f9f7 	bl	800a4b4 <hci_send_req>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	da01      	bge.n	800a0d0 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800a0cc:	23ff      	movs	r3, #255	@ 0xff
 800a0ce:	e000      	b.n	800a0d2 <aci_hal_set_tx_power_level+0x5a>

  return status;
 800a0d0:	7afb      	ldrb	r3, [r7, #11]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3728      	adds	r7, #40	@ 0x28
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800a0da:	b590      	push	{r4, r7, lr}
 800a0dc:	b089      	sub	sp, #36	@ 0x24
 800a0de:	af02      	add	r7, sp, #8
 800a0e0:	6078      	str	r0, [r7, #4]
 800a0e2:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800a0e4:	f107 0410 	add.w	r4, r7, #16
 800a0e8:	f107 0215 	add.w	r2, r7, #21
 800a0ec:	f107 0112 	add.w	r1, r7, #18
 800a0f0:	f107 0016 	add.w	r0, r7, #22
 800a0f4:	f107 030e 	add.w	r3, r7, #14
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	4623      	mov	r3, r4
 800a0fc:	f000 f853 	bl	800a1a6 <hci_le_read_local_version>
 800a100:	4603      	mov	r3, r0
 800a102:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800a104:	7dfb      	ldrb	r3, [r7, #23]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d126      	bne.n	800a158 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800a10a:	8a7b      	ldrh	r3, [r7, #18]
 800a10c:	0a1b      	lsrs	r3, r3, #8
 800a10e:	b29b      	uxth	r3, r3
 800a110:	b2da      	uxtb	r2, r3
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800a116:	8a7b      	ldrh	r3, [r7, #18]
 800a118:	021b      	lsls	r3, r3, #8
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	881b      	ldrh	r3, [r3, #0]
 800a124:	b21a      	sxth	r2, r3
 800a126:	89fb      	ldrh	r3, [r7, #14]
 800a128:	091b      	lsrs	r3, r3, #4
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	011b      	lsls	r3, r3, #4
 800a12e:	b21b      	sxth	r3, r3
 800a130:	b2db      	uxtb	r3, r3
 800a132:	b21b      	sxth	r3, r3
 800a134:	4313      	orrs	r3, r2
 800a136:	b21b      	sxth	r3, r3
 800a138:	b29a      	uxth	r2, r3
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	881b      	ldrh	r3, [r3, #0]
 800a142:	b21a      	sxth	r2, r3
 800a144:	89fb      	ldrh	r3, [r7, #14]
 800a146:	b21b      	sxth	r3, r3
 800a148:	f003 030f 	and.w	r3, r3, #15
 800a14c:	b21b      	sxth	r3, r3
 800a14e:	4313      	orrs	r3, r2
 800a150:	b21b      	sxth	r3, r3
 800a152:	b29a      	uxth	r2, r3
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800a158:	7dfb      	ldrb	r3, [r7, #23]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	371c      	adds	r7, #28
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd90      	pop	{r4, r7, pc}

0800a162 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b088      	sub	sp, #32
 800a166:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a168:	f107 0308 	add.w	r3, r7, #8
 800a16c:	2218      	movs	r2, #24
 800a16e:	2100      	movs	r1, #0
 800a170:	4618      	mov	r0, r3
 800a172:	f001 fa22 	bl	800b5ba <memset>
  rq.ogf = OGF_HOST_CTL;
 800a176:	2303      	movs	r3, #3
 800a178:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 800a17a:	2303      	movs	r3, #3
 800a17c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a17e:	1dfb      	adds	r3, r7, #7
 800a180:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a182:	2301      	movs	r3, #1
 800a184:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a186:	f107 0308 	add.w	r3, r7, #8
 800a18a:	2100      	movs	r1, #0
 800a18c:	4618      	mov	r0, r3
 800a18e:	f000 f991 	bl	800a4b4 <hci_send_req>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	da01      	bge.n	800a19c <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 800a198:	23ff      	movs	r3, #255	@ 0xff
 800a19a:	e000      	b.n	800a19e <hci_reset+0x3c>
  
  return status;  
 800a19c:	79fb      	ldrb	r3, [r7, #7]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3720      	adds	r7, #32
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b08e      	sub	sp, #56	@ 0x38
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	60f8      	str	r0, [r7, #12]
 800a1ae:	60b9      	str	r1, [r7, #8]
 800a1b0:	607a      	str	r2, [r7, #4]
 800a1b2:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a1b4:	f107 0314 	add.w	r3, r7, #20
 800a1b8:	2209      	movs	r2, #9
 800a1ba:	2100      	movs	r1, #0
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f001 f9fc 	bl	800b5ba <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a1c2:	f107 0320 	add.w	r3, r7, #32
 800a1c6:	2218      	movs	r2, #24
 800a1c8:	2100      	movs	r1, #0
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f001 f9f5 	bl	800b5ba <memset>
  rq.ogf = OGF_INFO_PARAM;
 800a1d0:	2304      	movs	r3, #4
 800a1d2:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = NULL;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = 0;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 800a1e0:	f107 0314 	add.w	r3, r7, #20
 800a1e4:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800a1e6:	2309      	movs	r3, #9
 800a1e8:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a1ea:	f107 0320 	add.w	r3, r7, #32
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f000 f95f 	bl	800a4b4 <hci_send_req>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	da01      	bge.n	800a200 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800a1fc:	23ff      	movs	r3, #255	@ 0xff
 800a1fe:	e018      	b.n	800a232 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 800a200:	7d3b      	ldrb	r3, [r7, #20]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d001      	beq.n	800a20a <hci_le_read_local_version+0x64>
    return resp.status;
 800a206:	7d3b      	ldrb	r3, [r7, #20]
 800a208:	e013      	b.n	800a232 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800a20a:	7d7a      	ldrb	r2, [r7, #21]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 800a210:	8afa      	ldrh	r2, [r7, #22]
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800a216:	7e3a      	ldrb	r2, [r7, #24]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800a21c:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800a220:	b29a      	uxth	r2, r3
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800a226:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a22e:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3738      	adds	r7, #56	@ 0x38
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}

0800a23a <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800a23a:	b580      	push	{r7, lr}
 800a23c:	b092      	sub	sp, #72	@ 0x48
 800a23e:	af00      	add	r7, sp, #0
 800a240:	4603      	mov	r3, r0
 800a242:	6039      	str	r1, [r7, #0]
 800a244:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800a246:	f107 0310 	add.w	r3, r7, #16
 800a24a:	2220      	movs	r2, #32
 800a24c:	2100      	movs	r1, #0
 800a24e:	4618      	mov	r0, r3
 800a250:	f001 f9b3 	bl	800b5ba <memset>
  scan_resp_cp.length = length;
 800a254:	79fb      	ldrb	r3, [r7, #7]
 800a256:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800a258:	79fb      	ldrb	r3, [r7, #7]
 800a25a:	2b1f      	cmp	r3, #31
 800a25c:	bf28      	it	cs
 800a25e:	231f      	movcs	r3, #31
 800a260:	b2db      	uxtb	r3, r3
 800a262:	461a      	mov	r2, r3
 800a264:	f107 0310 	add.w	r3, r7, #16
 800a268:	3301      	adds	r3, #1
 800a26a:	6839      	ldr	r1, [r7, #0]
 800a26c:	4618      	mov	r0, r3
 800a26e:	f001 fa24 	bl	800b6ba <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a272:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a276:	2218      	movs	r2, #24
 800a278:	2100      	movs	r1, #0
 800a27a:	4618      	mov	r0, r3
 800a27c:	f001 f99d 	bl	800b5ba <memset>
  rq.ogf = OGF_LE_CTL;
 800a280:	2308      	movs	r3, #8
 800a282:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800a284:	2309      	movs	r3, #9
 800a286:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &scan_resp_cp;
 800a288:	f107 0310 	add.w	r3, r7, #16
 800a28c:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800a28e:	2320      	movs	r3, #32
 800a290:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 800a292:	f107 030f 	add.w	r3, r7, #15
 800a296:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 800a298:	2301      	movs	r3, #1
 800a29a:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a29c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f000 f906 	bl	800a4b4 <hci_send_req>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	da01      	bge.n	800a2b2 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800a2ae:	23ff      	movs	r3, #255	@ 0xff
 800a2b0:	e000      	b.n	800a2b4 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 800a2b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3748      	adds	r7, #72	@ 0x48
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	3308      	adds	r3, #8
 800a2c8:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	2b04      	cmp	r3, #4
 800a2d0:	d001      	beq.n	800a2d6 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e00c      	b.n	800a2f0 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	3302      	adds	r3, #2
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	461a      	mov	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a2e4:	3b03      	subs	r3, #3
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d001      	beq.n	800a2ee <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800a2ea:	2302      	movs	r3, #2
 800a2ec:	e000      	b.n	800a2f0 <verify_packet+0x34>
  
  return 0;      
 800a2ee:	2300      	movs	r3, #0
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3714      	adds	r7, #20
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b0a6      	sub	sp, #152	@ 0x98
 800a300:	af00      	add	r7, sp, #0
 800a302:	607b      	str	r3, [r7, #4]
 800a304:	4603      	mov	r3, r0
 800a306:	81fb      	strh	r3, [r7, #14]
 800a308:	460b      	mov	r3, r1
 800a30a:	81bb      	strh	r3, [r7, #12]
 800a30c:	4613      	mov	r3, r2
 800a30e:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800a310:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a314:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a318:	b21a      	sxth	r2, r3
 800a31a:	89fb      	ldrh	r3, [r7, #14]
 800a31c:	029b      	lsls	r3, r3, #10
 800a31e:	b21b      	sxth	r3, r3
 800a320:	4313      	orrs	r3, r2
 800a322:	b21b      	sxth	r3, r3
 800a324:	b29b      	uxth	r3, r3
 800a326:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800a328:	7afb      	ldrb	r3, [r7, #11]
 800a32a:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800a32c:	2301      	movs	r3, #1
 800a32e:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800a330:	f107 0318 	add.w	r3, r7, #24
 800a334:	3301      	adds	r3, #1
 800a336:	461a      	mov	r2, r3
 800a338:	f107 0314 	add.w	r3, r7, #20
 800a33c:	8819      	ldrh	r1, [r3, #0]
 800a33e:	789b      	ldrb	r3, [r3, #2]
 800a340:	8011      	strh	r1, [r2, #0]
 800a342:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800a344:	f107 0318 	add.w	r3, r7, #24
 800a348:	3304      	adds	r3, #4
 800a34a:	7afa      	ldrb	r2, [r7, #11]
 800a34c:	6879      	ldr	r1, [r7, #4]
 800a34e:	4618      	mov	r0, r3
 800a350:	f001 f9b3 	bl	800b6ba <memcpy>
  
  if (hciContext.io.Send)
 800a354:	4b08      	ldr	r3, [pc, #32]	@ (800a378 <send_cmd+0x7c>)
 800a356:	691b      	ldr	r3, [r3, #16]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d009      	beq.n	800a370 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800a35c:	4b06      	ldr	r3, [pc, #24]	@ (800a378 <send_cmd+0x7c>)
 800a35e:	691b      	ldr	r3, [r3, #16]
 800a360:	7afa      	ldrb	r2, [r7, #11]
 800a362:	b292      	uxth	r2, r2
 800a364:	3204      	adds	r2, #4
 800a366:	b291      	uxth	r1, r2
 800a368:	f107 0218 	add.w	r2, r7, #24
 800a36c:	4610      	mov	r0, r2
 800a36e:	4798      	blx	r3
  }
}
 800a370:	bf00      	nop
 800a372:	3798      	adds	r7, #152	@ 0x98
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	20000e3c 	.word	0x20000e3c

0800a37c <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800a386:	e00a      	b.n	800a39e <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800a388:	f107 030c 	add.w	r3, r7, #12
 800a38c:	4619      	mov	r1, r3
 800a38e:	6838      	ldr	r0, [r7, #0]
 800a390:	f000 fae8 	bl	800a964 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	4619      	mov	r1, r3
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 fa4f 	bl	800a83c <list_insert_head>
  while (!list_is_empty(src_list))
 800a39e:	6838      	ldr	r0, [r7, #0]
 800a3a0:	f000 fa2a 	bl	800a7f8 <list_is_empty>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d0ee      	beq.n	800a388 <move_list+0xc>
  }
}
 800a3aa:	bf00      	nop
 800a3ac:	bf00      	nop
 800a3ae:	3710      	adds	r7, #16
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800a3ba:	e009      	b.n	800a3d0 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800a3bc:	1d3b      	adds	r3, r7, #4
 800a3be:	4619      	mov	r1, r3
 800a3c0:	4809      	ldr	r0, [pc, #36]	@ (800a3e8 <free_event_list+0x34>)
 800a3c2:	f000 faa8 	bl	800a916 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	4808      	ldr	r0, [pc, #32]	@ (800a3ec <free_event_list+0x38>)
 800a3cc:	f000 fa5c 	bl	800a888 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800a3d0:	4806      	ldr	r0, [pc, #24]	@ (800a3ec <free_event_list+0x38>)
 800a3d2:	f000 faee 	bl	800a9b2 <list_get_size>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	ddef      	ble.n	800a3bc <free_event_list+0x8>
  }
}
 800a3dc:	bf00      	nop
 800a3de:	bf00      	nop
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	20000b78 	.word	0x20000b78
 800a3ec:	20000b70 	.word	0x20000b70

0800a3f0 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d002      	beq.n	800a406 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800a400:	4a18      	ldr	r2, [pc, #96]	@ (800a464 <hci_init+0x74>)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800a406:	4818      	ldr	r0, [pc, #96]	@ (800a468 <hci_init+0x78>)
 800a408:	f000 f9e6 	bl	800a7d8 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800a40c:	4817      	ldr	r0, [pc, #92]	@ (800a46c <hci_init+0x7c>)
 800a40e:	f000 f9e3 	bl	800a7d8 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800a412:	f7f8 fe27 	bl	8003064 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800a416:	2300      	movs	r3, #0
 800a418:	73fb      	strb	r3, [r7, #15]
 800a41a:	e00c      	b.n	800a436 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800a41c:	7bfb      	ldrb	r3, [r7, #15]
 800a41e:	228c      	movs	r2, #140	@ 0x8c
 800a420:	fb02 f303 	mul.w	r3, r2, r3
 800a424:	4a12      	ldr	r2, [pc, #72]	@ (800a470 <hci_init+0x80>)
 800a426:	4413      	add	r3, r2
 800a428:	4619      	mov	r1, r3
 800a42a:	480f      	ldr	r0, [pc, #60]	@ (800a468 <hci_init+0x78>)
 800a42c:	f000 fa2c 	bl	800a888 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800a430:	7bfb      	ldrb	r3, [r7, #15]
 800a432:	3301      	adds	r3, #1
 800a434:	73fb      	strb	r3, [r7, #15]
 800a436:	7bfb      	ldrb	r3, [r7, #15]
 800a438:	2b04      	cmp	r3, #4
 800a43a:	d9ef      	bls.n	800a41c <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800a43c:	4b09      	ldr	r3, [pc, #36]	@ (800a464 <hci_init+0x74>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d003      	beq.n	800a44c <hci_init+0x5c>
 800a444:	4b07      	ldr	r3, [pc, #28]	@ (800a464 <hci_init+0x74>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2000      	movs	r0, #0
 800a44a:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800a44c:	4b05      	ldr	r3, [pc, #20]	@ (800a464 <hci_init+0x74>)
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d002      	beq.n	800a45a <hci_init+0x6a>
 800a454:	4b03      	ldr	r3, [pc, #12]	@ (800a464 <hci_init+0x74>)
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	4798      	blx	r3
}
 800a45a:	bf00      	nop
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	20000e3c 	.word	0x20000e3c
 800a468:	20000b70 	.word	0x20000b70
 800a46c:	20000b78 	.word	0x20000b78
 800a470:	20000b80 	.word	0x20000b80

0800a474 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a0b      	ldr	r2, [pc, #44]	@ (800a4b0 <hci_register_io_bus+0x3c>)
 800a482:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	4a09      	ldr	r2, [pc, #36]	@ (800a4b0 <hci_register_io_bus+0x3c>)
 800a48a:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	4a07      	ldr	r2, [pc, #28]	@ (800a4b0 <hci_register_io_bus+0x3c>)
 800a492:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	699b      	ldr	r3, [r3, #24]
 800a498:	4a05      	ldr	r2, [pc, #20]	@ (800a4b0 <hci_register_io_bus+0x3c>)
 800a49a:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	4a03      	ldr	r2, [pc, #12]	@ (800a4b0 <hci_register_io_bus+0x3c>)
 800a4a2:	6093      	str	r3, [r2, #8]
}
 800a4a4:	bf00      	nop
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr
 800a4b0:	20000e3c 	.word	0x20000e3c

0800a4b4 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b08e      	sub	sp, #56	@ 0x38
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	460b      	mov	r3, r1
 800a4be:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	885b      	ldrh	r3, [r3, #2]
 800a4c4:	b21b      	sxth	r3, r3
 800a4c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4ca:	b21a      	sxth	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	881b      	ldrh	r3, [r3, #0]
 800a4d0:	029b      	lsls	r3, r3, #10
 800a4d2:	b21b      	sxth	r3, r3
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	b21b      	sxth	r3, r3
 800a4d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800a4de:	f107 0308 	add.w	r3, r7, #8
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f000 f978 	bl	800a7d8 <list_init_head>

  free_event_list();
 800a4e8:	f7ff ff64 	bl	800a3b4 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	8818      	ldrh	r0, [r3, #0]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	8859      	ldrh	r1, [r3, #2]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	b2da      	uxtb	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	f7ff fefd 	bl	800a2fc <send_cmd>
  
  if (async)
 800a502:	78fb      	ldrb	r3, [r7, #3]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d001      	beq.n	800a50c <hci_send_req+0x58>
  {
    return 0;
 800a508:	2300      	movs	r3, #0
 800a50a:	e0e2      	b.n	800a6d2 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800a50c:	f7fa fb22 	bl	8004b54 <HAL_GetTick>
 800a510:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800a512:	f7fa fb1f 	bl	8004b54 <HAL_GetTick>
 800a516:	4602      	mov	r2, r0
 800a518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51a:	1ad3      	subs	r3, r2, r3
 800a51c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a520:	f200 80b3 	bhi.w	800a68a <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800a524:	486d      	ldr	r0, [pc, #436]	@ (800a6dc <hci_send_req+0x228>)
 800a526:	f000 f967 	bl	800a7f8 <list_is_empty>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d000      	beq.n	800a532 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800a530:	e7ef      	b.n	800a512 <hci_send_req+0x5e>
      {
        break;
 800a532:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800a534:	f107 0310 	add.w	r3, r7, #16
 800a538:	4619      	mov	r1, r3
 800a53a:	4868      	ldr	r0, [pc, #416]	@ (800a6dc <hci_send_req+0x228>)
 800a53c:	f000 f9eb 	bl	800a916 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	3308      	adds	r3, #8
 800a544:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800a546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	2b04      	cmp	r3, #4
 800a54c:	d17f      	bne.n	800a64e <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 800a54e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a550:	3301      	adds	r3, #1
 800a552:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	3308      	adds	r3, #8
 800a558:	3303      	adds	r3, #3
 800a55a:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a562:	3b03      	subs	r3, #3
 800a564:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800a566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a56c:	d04c      	beq.n	800a608 <hci_send_req+0x154>
 800a56e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a570:	dc68      	bgt.n	800a644 <hci_send_req+0x190>
 800a572:	2b10      	cmp	r3, #16
 800a574:	f000 808b 	beq.w	800a68e <hci_send_req+0x1da>
 800a578:	2b10      	cmp	r3, #16
 800a57a:	dc63      	bgt.n	800a644 <hci_send_req+0x190>
 800a57c:	2b0e      	cmp	r3, #14
 800a57e:	d023      	beq.n	800a5c8 <hci_send_req+0x114>
 800a580:	2b0f      	cmp	r3, #15
 800a582:	d15f      	bne.n	800a644 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800a584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a586:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	885b      	ldrh	r3, [r3, #2]
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a590:	429a      	cmp	r2, r3
 800a592:	d17e      	bne.n	800a692 <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	2b0f      	cmp	r3, #15
 800a59a:	d004      	beq.n	800a5a6 <hci_send_req+0xf2>
          if (cs->status) {
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d051      	beq.n	800a648 <hci_send_req+0x194>
            goto failed;
 800a5a4:	e078      	b.n	800a698 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	695a      	ldr	r2, [r3, #20]
 800a5aa:	6a3b      	ldr	r3, [r7, #32]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	bf28      	it	cs
 800a5b0:	461a      	movcs	r2, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6918      	ldr	r0, [r3, #16]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	695b      	ldr	r3, [r3, #20]
 800a5be:	461a      	mov	r2, r3
 800a5c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a5c2:	f001 f87a 	bl	800b6ba <memcpy>
        goto done;
 800a5c6:	e078      	b.n	800a6ba <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800a5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ca:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d15d      	bne.n	800a696 <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800a5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5dc:	3303      	adds	r3, #3
 800a5de:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800a5e0:	6a3b      	ldr	r3, [r7, #32]
 800a5e2:	3b03      	subs	r3, #3
 800a5e4:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	695a      	ldr	r2, [r3, #20]
 800a5ea:	6a3b      	ldr	r3, [r7, #32]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	bf28      	it	cs
 800a5f0:	461a      	movcs	r2, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6918      	ldr	r0, [r3, #16]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	695b      	ldr	r3, [r3, #20]
 800a5fe:	461a      	mov	r2, r3
 800a600:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a602:	f001 f85a 	bl	800b6ba <memcpy>
        goto done;
 800a606:	e058      	b.n	800a6ba <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800a608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a60a:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	461a      	mov	r2, r3
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	429a      	cmp	r2, r3
 800a618:	d118      	bne.n	800a64c <hci_send_req+0x198>
          break;
      
        len -= 1;
 800a61a:	6a3b      	ldr	r3, [r7, #32]
 800a61c:	3b01      	subs	r3, #1
 800a61e:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	695a      	ldr	r2, [r3, #20]
 800a624:	6a3b      	ldr	r3, [r7, #32]
 800a626:	429a      	cmp	r2, r3
 800a628:	bf28      	it	cs
 800a62a:	461a      	movcs	r2, r3
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6918      	ldr	r0, [r3, #16]
 800a634:	69fb      	ldr	r3, [r7, #28]
 800a636:	1c59      	adds	r1, r3, #1
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	695b      	ldr	r3, [r3, #20]
 800a63c:	461a      	mov	r2, r3
 800a63e:	f001 f83c 	bl	800b6ba <memcpy>
        goto done;
 800a642:	e03a      	b.n	800a6ba <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800a644:	bf00      	nop
 800a646:	e002      	b.n	800a64e <hci_send_req+0x19a>
          break;
 800a648:	bf00      	nop
 800a64a:	e000      	b.n	800a64e <hci_send_req+0x19a>
          break;
 800a64c:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800a64e:	4824      	ldr	r0, [pc, #144]	@ (800a6e0 <hci_send_req+0x22c>)
 800a650:	f000 f8d2 	bl	800a7f8 <list_is_empty>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d00d      	beq.n	800a676 <hci_send_req+0x1c2>
 800a65a:	4820      	ldr	r0, [pc, #128]	@ (800a6dc <hci_send_req+0x228>)
 800a65c:	f000 f8cc 	bl	800a7f8 <list_is_empty>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d007      	beq.n	800a676 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	4619      	mov	r1, r3
 800a66a:	481d      	ldr	r0, [pc, #116]	@ (800a6e0 <hci_send_req+0x22c>)
 800a66c:	f000 f90c 	bl	800a888 <list_insert_tail>
      hciReadPacket=NULL;
 800a670:	2300      	movs	r3, #0
 800a672:	613b      	str	r3, [r7, #16]
 800a674:	e008      	b.n	800a688 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800a676:	693a      	ldr	r2, [r7, #16]
 800a678:	f107 0308 	add.w	r3, r7, #8
 800a67c:	4611      	mov	r1, r2
 800a67e:	4618      	mov	r0, r3
 800a680:	f000 f902 	bl	800a888 <list_insert_tail>
      hciReadPacket=NULL;
 800a684:	2300      	movs	r3, #0
 800a686:	613b      	str	r3, [r7, #16]
  {
 800a688:	e740      	b.n	800a50c <hci_send_req+0x58>
        goto failed;
 800a68a:	bf00      	nop
 800a68c:	e004      	b.n	800a698 <hci_send_req+0x1e4>
        goto failed;
 800a68e:	bf00      	nop
 800a690:	e002      	b.n	800a698 <hci_send_req+0x1e4>
          goto failed;
 800a692:	bf00      	nop
 800a694:	e000      	b.n	800a698 <hci_send_req+0x1e4>
          goto failed;
 800a696:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d004      	beq.n	800a6a8 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	480f      	ldr	r0, [pc, #60]	@ (800a6e0 <hci_send_req+0x22c>)
 800a6a4:	f000 f8ca 	bl	800a83c <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800a6a8:	f107 0308 	add.w	r3, r7, #8
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	480b      	ldr	r0, [pc, #44]	@ (800a6dc <hci_send_req+0x228>)
 800a6b0:	f7ff fe64 	bl	800a37c <move_list>

  return -1;
 800a6b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a6b8:	e00b      	b.n	800a6d2 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	4619      	mov	r1, r3
 800a6be:	4808      	ldr	r0, [pc, #32]	@ (800a6e0 <hci_send_req+0x22c>)
 800a6c0:	f000 f8bc 	bl	800a83c <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800a6c4:	f107 0308 	add.w	r3, r7, #8
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	4804      	ldr	r0, [pc, #16]	@ (800a6dc <hci_send_req+0x228>)
 800a6cc:	f7ff fe56 	bl	800a37c <move_list>

  return 0;
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3738      	adds	r7, #56	@ 0x38
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	20000b78 	.word	0x20000b78
 800a6e0:	20000b70 	.word	0x20000b70

0800a6e4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800a6ee:	e013      	b.n	800a718 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800a6f0:	1d3b      	adds	r3, r7, #4
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	480e      	ldr	r0, [pc, #56]	@ (800a730 <hci_user_evt_proc+0x4c>)
 800a6f6:	f000 f90e 	bl	800a916 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800a6fa:	4b0e      	ldr	r3, [pc, #56]	@ (800a734 <hci_user_evt_proc+0x50>)
 800a6fc:	69db      	ldr	r3, [r3, #28]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d005      	beq.n	800a70e <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800a702:	4b0c      	ldr	r3, [pc, #48]	@ (800a734 <hci_user_evt_proc+0x50>)
 800a704:	69db      	ldr	r3, [r3, #28]
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	3208      	adds	r2, #8
 800a70a:	4610      	mov	r0, r2
 800a70c:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4619      	mov	r1, r3
 800a712:	4809      	ldr	r0, [pc, #36]	@ (800a738 <hci_user_evt_proc+0x54>)
 800a714:	f000 f8b8 	bl	800a888 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800a718:	4805      	ldr	r0, [pc, #20]	@ (800a730 <hci_user_evt_proc+0x4c>)
 800a71a:	f000 f86d 	bl	800a7f8 <list_is_empty>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d0e5      	beq.n	800a6f0 <hci_user_evt_proc+0xc>
  }
}
 800a724:	bf00      	nop
 800a726:	bf00      	nop
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	20000b78 	.word	0x20000b78
 800a734:	20000e3c 	.word	0x20000e3c
 800a738:	20000b70 	.word	0x20000b70

0800a73c <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b086      	sub	sp, #24
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800a744:	2300      	movs	r3, #0
 800a746:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800a748:	2300      	movs	r3, #0
 800a74a:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800a74c:	481f      	ldr	r0, [pc, #124]	@ (800a7cc <hci_notify_asynch_evt+0x90>)
 800a74e:	f000 f853 	bl	800a7f8 <list_is_empty>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d132      	bne.n	800a7be <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800a758:	f107 030c 	add.w	r3, r7, #12
 800a75c:	4619      	mov	r1, r3
 800a75e:	481b      	ldr	r0, [pc, #108]	@ (800a7cc <hci_notify_asynch_evt+0x90>)
 800a760:	f000 f8d9 	bl	800a916 <list_remove_head>
    
    if (hciContext.io.Receive)
 800a764:	4b1a      	ldr	r3, [pc, #104]	@ (800a7d0 <hci_notify_asynch_evt+0x94>)
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d02a      	beq.n	800a7c2 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800a76c:	4b18      	ldr	r3, [pc, #96]	@ (800a7d0 <hci_notify_asynch_evt+0x94>)
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	68fa      	ldr	r2, [r7, #12]
 800a772:	3208      	adds	r2, #8
 800a774:	2180      	movs	r1, #128	@ 0x80
 800a776:	4610      	mov	r0, r2
 800a778:	4798      	blx	r3
 800a77a:	4603      	mov	r3, r0
 800a77c:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800a77e:	7cfb      	ldrb	r3, [r7, #19]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d016      	beq.n	800a7b2 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	7cfa      	ldrb	r2, [r7, #19]
 800a788:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	4618      	mov	r0, r3
 800a790:	f7ff fd94 	bl	800a2bc <verify_packet>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d105      	bne.n	800a7a6 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	4619      	mov	r1, r3
 800a79e:	480d      	ldr	r0, [pc, #52]	@ (800a7d4 <hci_notify_asynch_evt+0x98>)
 800a7a0:	f000 f872 	bl	800a888 <list_insert_tail>
 800a7a4:	e00d      	b.n	800a7c2 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	4808      	ldr	r0, [pc, #32]	@ (800a7cc <hci_notify_asynch_evt+0x90>)
 800a7ac:	f000 f846 	bl	800a83c <list_insert_head>
 800a7b0:	e007      	b.n	800a7c2 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	4805      	ldr	r0, [pc, #20]	@ (800a7cc <hci_notify_asynch_evt+0x90>)
 800a7b8:	f000 f840 	bl	800a83c <list_insert_head>
 800a7bc:	e001      	b.n	800a7c2 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800a7c2:	697b      	ldr	r3, [r7, #20]

}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3718      	adds	r7, #24
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	20000b70 	.word	0x20000b70
 800a7d0:	20000e3c 	.word	0x20000e3c
 800a7d4:	20000b78 	.word	0x20000b78

0800a7d8 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	605a      	str	r2, [r3, #4]
}
 800a7ec:	bf00      	nop
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b087      	sub	sp, #28
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a800:	f3ef 8310 	mrs	r3, PRIMASK
 800a804:	60fb      	str	r3, [r7, #12]
  return(result);
 800a806:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a808:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a80a:	b672      	cpsid	i
}
 800a80c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	429a      	cmp	r2, r3
 800a816:	d102      	bne.n	800a81e <list_is_empty+0x26>
  {
    return_value = 1;
 800a818:	2301      	movs	r3, #1
 800a81a:	75fb      	strb	r3, [r7, #23]
 800a81c:	e001      	b.n	800a822 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800a81e:	2300      	movs	r3, #0
 800a820:	75fb      	strb	r3, [r7, #23]
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	f383 8810 	msr	PRIMASK, r3
}
 800a82c:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800a82e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a830:	4618      	mov	r0, r3
 800a832:	371c      	adds	r7, #28
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b087      	sub	sp, #28
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a846:	f3ef 8310 	mrs	r3, PRIMASK
 800a84a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a84c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a84e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a850:	b672      	cpsid	i
}
 800a852:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	683a      	ldr	r2, [r7, #0]
 800a866:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	683a      	ldr	r2, [r7, #0]
 800a86e:	605a      	str	r2, [r3, #4]
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	f383 8810 	msr	PRIMASK, r3
}
 800a87a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a87c:	bf00      	nop
 800a87e:	371c      	adds	r7, #28
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800a888:	b480      	push	{r7}
 800a88a:	b087      	sub	sp, #28
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a892:	f3ef 8310 	mrs	r3, PRIMASK
 800a896:	60fb      	str	r3, [r7, #12]
  return(result);
 800a898:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a89a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a89c:	b672      	cpsid	i
}
 800a89e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	685a      	ldr	r2, [r3, #4]
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	683a      	ldr	r2, [r7, #0]
 800a8b2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	683a      	ldr	r2, [r7, #0]
 800a8ba:	601a      	str	r2, [r3, #0]
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	f383 8810 	msr	PRIMASK, r3
}
 800a8c6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a8c8:	bf00      	nop
 800a8ca:	371c      	adds	r7, #28
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b087      	sub	sp, #28
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8dc:	f3ef 8310 	mrs	r3, PRIMASK
 800a8e0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a8e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8e6:	b672      	cpsid	i
}
 800a8e8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	6812      	ldr	r2, [r2, #0]
 800a8f2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	6852      	ldr	r2, [r2, #4]
 800a8fc:	605a      	str	r2, [r3, #4]
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	f383 8810 	msr	PRIMASK, r3
}
 800a908:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a90a:	bf00      	nop
 800a90c:	371c      	adds	r7, #28
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr

0800a916 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800a916:	b580      	push	{r7, lr}
 800a918:	b086      	sub	sp, #24
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
 800a91e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a920:	f3ef 8310 	mrs	r3, PRIMASK
 800a924:	60fb      	str	r3, [r7, #12]
  return(result);
 800a926:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a928:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a92a:	b672      	cpsid	i
}
 800a92c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7ff ffca 	bl	800a8d4 <list_remove_node>
  (*node)->next = NULL;
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2200      	movs	r2, #0
 800a946:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2200      	movs	r2, #0
 800a94e:	605a      	str	r2, [r3, #4]
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	f383 8810 	msr	PRIMASK, r3
}
 800a95a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a95c:	bf00      	nop
 800a95e:	3718      	adds	r7, #24
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b086      	sub	sp, #24
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a96e:	f3ef 8310 	mrs	r3, PRIMASK
 800a972:	60fb      	str	r3, [r7, #12]
  return(result);
 800a974:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a976:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a978:	b672      	cpsid	i
}
 800a97a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	685a      	ldr	r2, [r3, #4]
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	4618      	mov	r0, r3
 800a98a:	f7ff ffa3 	bl	800a8d4 <list_remove_node>
  (*node)->next = NULL;
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2200      	movs	r2, #0
 800a994:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2200      	movs	r2, #0
 800a99c:	605a      	str	r2, [r3, #4]
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	f383 8810 	msr	PRIMASK, r3
}
 800a9a8:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a9aa:	bf00      	nop
 800a9ac:	3718      	adds	r7, #24
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b089      	sub	sp, #36	@ 0x24
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
  int size = 0;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9be:	f3ef 8310 	mrs	r3, PRIMASK
 800a9c2:	613b      	str	r3, [r7, #16]
  return(result);
 800a9c4:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a9c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a9c8:	b672      	cpsid	i
}
 800a9ca:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800a9d2:	e005      	b.n	800a9e0 <list_get_size+0x2e>
  {
    size++;
 800a9d4:	69fb      	ldr	r3, [r7, #28]
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800a9e0:	69ba      	ldr	r2, [r7, #24]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d1f5      	bne.n	800a9d4 <list_get_size+0x22>
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f383 8810 	msr	PRIMASK, r3
}
 800a9f2:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800a9f4:	69fb      	ldr	r3, [r7, #28]
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3724      	adds	r7, #36	@ 0x24
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
	...

0800aa04 <srand>:
 800aa04:	b538      	push	{r3, r4, r5, lr}
 800aa06:	4b10      	ldr	r3, [pc, #64]	@ (800aa48 <srand+0x44>)
 800aa08:	681d      	ldr	r5, [r3, #0]
 800aa0a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800aa0c:	4604      	mov	r4, r0
 800aa0e:	b9b3      	cbnz	r3, 800aa3e <srand+0x3a>
 800aa10:	2018      	movs	r0, #24
 800aa12:	f001 fd17 	bl	800c444 <malloc>
 800aa16:	4602      	mov	r2, r0
 800aa18:	6328      	str	r0, [r5, #48]	@ 0x30
 800aa1a:	b920      	cbnz	r0, 800aa26 <srand+0x22>
 800aa1c:	4b0b      	ldr	r3, [pc, #44]	@ (800aa4c <srand+0x48>)
 800aa1e:	480c      	ldr	r0, [pc, #48]	@ (800aa50 <srand+0x4c>)
 800aa20:	2146      	movs	r1, #70	@ 0x46
 800aa22:	f000 fe59 	bl	800b6d8 <__assert_func>
 800aa26:	490b      	ldr	r1, [pc, #44]	@ (800aa54 <srand+0x50>)
 800aa28:	4b0b      	ldr	r3, [pc, #44]	@ (800aa58 <srand+0x54>)
 800aa2a:	e9c0 1300 	strd	r1, r3, [r0]
 800aa2e:	4b0b      	ldr	r3, [pc, #44]	@ (800aa5c <srand+0x58>)
 800aa30:	6083      	str	r3, [r0, #8]
 800aa32:	230b      	movs	r3, #11
 800aa34:	8183      	strh	r3, [r0, #12]
 800aa36:	2100      	movs	r1, #0
 800aa38:	2001      	movs	r0, #1
 800aa3a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800aa3e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800aa40:	2200      	movs	r2, #0
 800aa42:	611c      	str	r4, [r3, #16]
 800aa44:	615a      	str	r2, [r3, #20]
 800aa46:	bd38      	pop	{r3, r4, r5, pc}
 800aa48:	20000064 	.word	0x20000064
 800aa4c:	0800d4b4 	.word	0x0800d4b4
 800aa50:	0800d4cb 	.word	0x0800d4cb
 800aa54:	abcd330e 	.word	0xabcd330e
 800aa58:	e66d1234 	.word	0xe66d1234
 800aa5c:	0005deec 	.word	0x0005deec

0800aa60 <rand>:
 800aa60:	4b16      	ldr	r3, [pc, #88]	@ (800aabc <rand+0x5c>)
 800aa62:	b510      	push	{r4, lr}
 800aa64:	681c      	ldr	r4, [r3, #0]
 800aa66:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800aa68:	b9b3      	cbnz	r3, 800aa98 <rand+0x38>
 800aa6a:	2018      	movs	r0, #24
 800aa6c:	f001 fcea 	bl	800c444 <malloc>
 800aa70:	4602      	mov	r2, r0
 800aa72:	6320      	str	r0, [r4, #48]	@ 0x30
 800aa74:	b920      	cbnz	r0, 800aa80 <rand+0x20>
 800aa76:	4b12      	ldr	r3, [pc, #72]	@ (800aac0 <rand+0x60>)
 800aa78:	4812      	ldr	r0, [pc, #72]	@ (800aac4 <rand+0x64>)
 800aa7a:	2152      	movs	r1, #82	@ 0x52
 800aa7c:	f000 fe2c 	bl	800b6d8 <__assert_func>
 800aa80:	4911      	ldr	r1, [pc, #68]	@ (800aac8 <rand+0x68>)
 800aa82:	4b12      	ldr	r3, [pc, #72]	@ (800aacc <rand+0x6c>)
 800aa84:	e9c0 1300 	strd	r1, r3, [r0]
 800aa88:	4b11      	ldr	r3, [pc, #68]	@ (800aad0 <rand+0x70>)
 800aa8a:	6083      	str	r3, [r0, #8]
 800aa8c:	230b      	movs	r3, #11
 800aa8e:	8183      	strh	r3, [r0, #12]
 800aa90:	2100      	movs	r1, #0
 800aa92:	2001      	movs	r0, #1
 800aa94:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800aa98:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800aa9a:	480e      	ldr	r0, [pc, #56]	@ (800aad4 <rand+0x74>)
 800aa9c:	690b      	ldr	r3, [r1, #16]
 800aa9e:	694c      	ldr	r4, [r1, #20]
 800aaa0:	4a0d      	ldr	r2, [pc, #52]	@ (800aad8 <rand+0x78>)
 800aaa2:	4358      	muls	r0, r3
 800aaa4:	fb02 0004 	mla	r0, r2, r4, r0
 800aaa8:	fba3 3202 	umull	r3, r2, r3, r2
 800aaac:	3301      	adds	r3, #1
 800aaae:	eb40 0002 	adc.w	r0, r0, r2
 800aab2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800aab6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800aaba:	bd10      	pop	{r4, pc}
 800aabc:	20000064 	.word	0x20000064
 800aac0:	0800d4b4 	.word	0x0800d4b4
 800aac4:	0800d4cb 	.word	0x0800d4cb
 800aac8:	abcd330e 	.word	0xabcd330e
 800aacc:	e66d1234 	.word	0xe66d1234
 800aad0:	0005deec 	.word	0x0005deec
 800aad4:	5851f42d 	.word	0x5851f42d
 800aad8:	4c957f2d 	.word	0x4c957f2d

0800aadc <__cvt>:
 800aadc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aae0:	ec57 6b10 	vmov	r6, r7, d0
 800aae4:	2f00      	cmp	r7, #0
 800aae6:	460c      	mov	r4, r1
 800aae8:	4619      	mov	r1, r3
 800aaea:	463b      	mov	r3, r7
 800aaec:	bfbb      	ittet	lt
 800aaee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800aaf2:	461f      	movlt	r7, r3
 800aaf4:	2300      	movge	r3, #0
 800aaf6:	232d      	movlt	r3, #45	@ 0x2d
 800aaf8:	700b      	strb	r3, [r1, #0]
 800aafa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aafc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ab00:	4691      	mov	r9, r2
 800ab02:	f023 0820 	bic.w	r8, r3, #32
 800ab06:	bfbc      	itt	lt
 800ab08:	4632      	movlt	r2, r6
 800ab0a:	4616      	movlt	r6, r2
 800ab0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ab10:	d005      	beq.n	800ab1e <__cvt+0x42>
 800ab12:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ab16:	d100      	bne.n	800ab1a <__cvt+0x3e>
 800ab18:	3401      	adds	r4, #1
 800ab1a:	2102      	movs	r1, #2
 800ab1c:	e000      	b.n	800ab20 <__cvt+0x44>
 800ab1e:	2103      	movs	r1, #3
 800ab20:	ab03      	add	r3, sp, #12
 800ab22:	9301      	str	r3, [sp, #4]
 800ab24:	ab02      	add	r3, sp, #8
 800ab26:	9300      	str	r3, [sp, #0]
 800ab28:	ec47 6b10 	vmov	d0, r6, r7
 800ab2c:	4653      	mov	r3, sl
 800ab2e:	4622      	mov	r2, r4
 800ab30:	f000 fe7a 	bl	800b828 <_dtoa_r>
 800ab34:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ab38:	4605      	mov	r5, r0
 800ab3a:	d119      	bne.n	800ab70 <__cvt+0x94>
 800ab3c:	f019 0f01 	tst.w	r9, #1
 800ab40:	d00e      	beq.n	800ab60 <__cvt+0x84>
 800ab42:	eb00 0904 	add.w	r9, r0, r4
 800ab46:	2200      	movs	r2, #0
 800ab48:	2300      	movs	r3, #0
 800ab4a:	4630      	mov	r0, r6
 800ab4c:	4639      	mov	r1, r7
 800ab4e:	f7f5 ffbb 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab52:	b108      	cbz	r0, 800ab58 <__cvt+0x7c>
 800ab54:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab58:	2230      	movs	r2, #48	@ 0x30
 800ab5a:	9b03      	ldr	r3, [sp, #12]
 800ab5c:	454b      	cmp	r3, r9
 800ab5e:	d31e      	bcc.n	800ab9e <__cvt+0xc2>
 800ab60:	9b03      	ldr	r3, [sp, #12]
 800ab62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab64:	1b5b      	subs	r3, r3, r5
 800ab66:	4628      	mov	r0, r5
 800ab68:	6013      	str	r3, [r2, #0]
 800ab6a:	b004      	add	sp, #16
 800ab6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ab74:	eb00 0904 	add.w	r9, r0, r4
 800ab78:	d1e5      	bne.n	800ab46 <__cvt+0x6a>
 800ab7a:	7803      	ldrb	r3, [r0, #0]
 800ab7c:	2b30      	cmp	r3, #48	@ 0x30
 800ab7e:	d10a      	bne.n	800ab96 <__cvt+0xba>
 800ab80:	2200      	movs	r2, #0
 800ab82:	2300      	movs	r3, #0
 800ab84:	4630      	mov	r0, r6
 800ab86:	4639      	mov	r1, r7
 800ab88:	f7f5 ff9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab8c:	b918      	cbnz	r0, 800ab96 <__cvt+0xba>
 800ab8e:	f1c4 0401 	rsb	r4, r4, #1
 800ab92:	f8ca 4000 	str.w	r4, [sl]
 800ab96:	f8da 3000 	ldr.w	r3, [sl]
 800ab9a:	4499      	add	r9, r3
 800ab9c:	e7d3      	b.n	800ab46 <__cvt+0x6a>
 800ab9e:	1c59      	adds	r1, r3, #1
 800aba0:	9103      	str	r1, [sp, #12]
 800aba2:	701a      	strb	r2, [r3, #0]
 800aba4:	e7d9      	b.n	800ab5a <__cvt+0x7e>

0800aba6 <__exponent>:
 800aba6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aba8:	2900      	cmp	r1, #0
 800abaa:	bfba      	itte	lt
 800abac:	4249      	neglt	r1, r1
 800abae:	232d      	movlt	r3, #45	@ 0x2d
 800abb0:	232b      	movge	r3, #43	@ 0x2b
 800abb2:	2909      	cmp	r1, #9
 800abb4:	7002      	strb	r2, [r0, #0]
 800abb6:	7043      	strb	r3, [r0, #1]
 800abb8:	dd29      	ble.n	800ac0e <__exponent+0x68>
 800abba:	f10d 0307 	add.w	r3, sp, #7
 800abbe:	461d      	mov	r5, r3
 800abc0:	270a      	movs	r7, #10
 800abc2:	461a      	mov	r2, r3
 800abc4:	fbb1 f6f7 	udiv	r6, r1, r7
 800abc8:	fb07 1416 	mls	r4, r7, r6, r1
 800abcc:	3430      	adds	r4, #48	@ 0x30
 800abce:	f802 4c01 	strb.w	r4, [r2, #-1]
 800abd2:	460c      	mov	r4, r1
 800abd4:	2c63      	cmp	r4, #99	@ 0x63
 800abd6:	f103 33ff 	add.w	r3, r3, #4294967295
 800abda:	4631      	mov	r1, r6
 800abdc:	dcf1      	bgt.n	800abc2 <__exponent+0x1c>
 800abde:	3130      	adds	r1, #48	@ 0x30
 800abe0:	1e94      	subs	r4, r2, #2
 800abe2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800abe6:	1c41      	adds	r1, r0, #1
 800abe8:	4623      	mov	r3, r4
 800abea:	42ab      	cmp	r3, r5
 800abec:	d30a      	bcc.n	800ac04 <__exponent+0x5e>
 800abee:	f10d 0309 	add.w	r3, sp, #9
 800abf2:	1a9b      	subs	r3, r3, r2
 800abf4:	42ac      	cmp	r4, r5
 800abf6:	bf88      	it	hi
 800abf8:	2300      	movhi	r3, #0
 800abfa:	3302      	adds	r3, #2
 800abfc:	4403      	add	r3, r0
 800abfe:	1a18      	subs	r0, r3, r0
 800ac00:	b003      	add	sp, #12
 800ac02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac04:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ac08:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ac0c:	e7ed      	b.n	800abea <__exponent+0x44>
 800ac0e:	2330      	movs	r3, #48	@ 0x30
 800ac10:	3130      	adds	r1, #48	@ 0x30
 800ac12:	7083      	strb	r3, [r0, #2]
 800ac14:	70c1      	strb	r1, [r0, #3]
 800ac16:	1d03      	adds	r3, r0, #4
 800ac18:	e7f1      	b.n	800abfe <__exponent+0x58>
	...

0800ac1c <_printf_float>:
 800ac1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac20:	b08d      	sub	sp, #52	@ 0x34
 800ac22:	460c      	mov	r4, r1
 800ac24:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ac28:	4616      	mov	r6, r2
 800ac2a:	461f      	mov	r7, r3
 800ac2c:	4605      	mov	r5, r0
 800ac2e:	f000 fccd 	bl	800b5cc <_localeconv_r>
 800ac32:	6803      	ldr	r3, [r0, #0]
 800ac34:	9304      	str	r3, [sp, #16]
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7f5 fb1a 	bl	8000270 <strlen>
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac40:	f8d8 3000 	ldr.w	r3, [r8]
 800ac44:	9005      	str	r0, [sp, #20]
 800ac46:	3307      	adds	r3, #7
 800ac48:	f023 0307 	bic.w	r3, r3, #7
 800ac4c:	f103 0208 	add.w	r2, r3, #8
 800ac50:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ac54:	f8d4 b000 	ldr.w	fp, [r4]
 800ac58:	f8c8 2000 	str.w	r2, [r8]
 800ac5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac60:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ac64:	9307      	str	r3, [sp, #28]
 800ac66:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac6a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ac6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac72:	4b9c      	ldr	r3, [pc, #624]	@ (800aee4 <_printf_float+0x2c8>)
 800ac74:	f04f 32ff 	mov.w	r2, #4294967295
 800ac78:	f7f5 ff58 	bl	8000b2c <__aeabi_dcmpun>
 800ac7c:	bb70      	cbnz	r0, 800acdc <_printf_float+0xc0>
 800ac7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac82:	4b98      	ldr	r3, [pc, #608]	@ (800aee4 <_printf_float+0x2c8>)
 800ac84:	f04f 32ff 	mov.w	r2, #4294967295
 800ac88:	f7f5 ff32 	bl	8000af0 <__aeabi_dcmple>
 800ac8c:	bb30      	cbnz	r0, 800acdc <_printf_float+0xc0>
 800ac8e:	2200      	movs	r2, #0
 800ac90:	2300      	movs	r3, #0
 800ac92:	4640      	mov	r0, r8
 800ac94:	4649      	mov	r1, r9
 800ac96:	f7f5 ff21 	bl	8000adc <__aeabi_dcmplt>
 800ac9a:	b110      	cbz	r0, 800aca2 <_printf_float+0x86>
 800ac9c:	232d      	movs	r3, #45	@ 0x2d
 800ac9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aca2:	4a91      	ldr	r2, [pc, #580]	@ (800aee8 <_printf_float+0x2cc>)
 800aca4:	4b91      	ldr	r3, [pc, #580]	@ (800aeec <_printf_float+0x2d0>)
 800aca6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800acaa:	bf94      	ite	ls
 800acac:	4690      	movls	r8, r2
 800acae:	4698      	movhi	r8, r3
 800acb0:	2303      	movs	r3, #3
 800acb2:	6123      	str	r3, [r4, #16]
 800acb4:	f02b 0304 	bic.w	r3, fp, #4
 800acb8:	6023      	str	r3, [r4, #0]
 800acba:	f04f 0900 	mov.w	r9, #0
 800acbe:	9700      	str	r7, [sp, #0]
 800acc0:	4633      	mov	r3, r6
 800acc2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800acc4:	4621      	mov	r1, r4
 800acc6:	4628      	mov	r0, r5
 800acc8:	f000 f9d2 	bl	800b070 <_printf_common>
 800accc:	3001      	adds	r0, #1
 800acce:	f040 808d 	bne.w	800adec <_printf_float+0x1d0>
 800acd2:	f04f 30ff 	mov.w	r0, #4294967295
 800acd6:	b00d      	add	sp, #52	@ 0x34
 800acd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acdc:	4642      	mov	r2, r8
 800acde:	464b      	mov	r3, r9
 800ace0:	4640      	mov	r0, r8
 800ace2:	4649      	mov	r1, r9
 800ace4:	f7f5 ff22 	bl	8000b2c <__aeabi_dcmpun>
 800ace8:	b140      	cbz	r0, 800acfc <_printf_float+0xe0>
 800acea:	464b      	mov	r3, r9
 800acec:	2b00      	cmp	r3, #0
 800acee:	bfbc      	itt	lt
 800acf0:	232d      	movlt	r3, #45	@ 0x2d
 800acf2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800acf6:	4a7e      	ldr	r2, [pc, #504]	@ (800aef0 <_printf_float+0x2d4>)
 800acf8:	4b7e      	ldr	r3, [pc, #504]	@ (800aef4 <_printf_float+0x2d8>)
 800acfa:	e7d4      	b.n	800aca6 <_printf_float+0x8a>
 800acfc:	6863      	ldr	r3, [r4, #4]
 800acfe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ad02:	9206      	str	r2, [sp, #24]
 800ad04:	1c5a      	adds	r2, r3, #1
 800ad06:	d13b      	bne.n	800ad80 <_printf_float+0x164>
 800ad08:	2306      	movs	r3, #6
 800ad0a:	6063      	str	r3, [r4, #4]
 800ad0c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ad10:	2300      	movs	r3, #0
 800ad12:	6022      	str	r2, [r4, #0]
 800ad14:	9303      	str	r3, [sp, #12]
 800ad16:	ab0a      	add	r3, sp, #40	@ 0x28
 800ad18:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ad1c:	ab09      	add	r3, sp, #36	@ 0x24
 800ad1e:	9300      	str	r3, [sp, #0]
 800ad20:	6861      	ldr	r1, [r4, #4]
 800ad22:	ec49 8b10 	vmov	d0, r8, r9
 800ad26:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ad2a:	4628      	mov	r0, r5
 800ad2c:	f7ff fed6 	bl	800aadc <__cvt>
 800ad30:	9b06      	ldr	r3, [sp, #24]
 800ad32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad34:	2b47      	cmp	r3, #71	@ 0x47
 800ad36:	4680      	mov	r8, r0
 800ad38:	d129      	bne.n	800ad8e <_printf_float+0x172>
 800ad3a:	1cc8      	adds	r0, r1, #3
 800ad3c:	db02      	blt.n	800ad44 <_printf_float+0x128>
 800ad3e:	6863      	ldr	r3, [r4, #4]
 800ad40:	4299      	cmp	r1, r3
 800ad42:	dd41      	ble.n	800adc8 <_printf_float+0x1ac>
 800ad44:	f1aa 0a02 	sub.w	sl, sl, #2
 800ad48:	fa5f fa8a 	uxtb.w	sl, sl
 800ad4c:	3901      	subs	r1, #1
 800ad4e:	4652      	mov	r2, sl
 800ad50:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ad54:	9109      	str	r1, [sp, #36]	@ 0x24
 800ad56:	f7ff ff26 	bl	800aba6 <__exponent>
 800ad5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad5c:	1813      	adds	r3, r2, r0
 800ad5e:	2a01      	cmp	r2, #1
 800ad60:	4681      	mov	r9, r0
 800ad62:	6123      	str	r3, [r4, #16]
 800ad64:	dc02      	bgt.n	800ad6c <_printf_float+0x150>
 800ad66:	6822      	ldr	r2, [r4, #0]
 800ad68:	07d2      	lsls	r2, r2, #31
 800ad6a:	d501      	bpl.n	800ad70 <_printf_float+0x154>
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	6123      	str	r3, [r4, #16]
 800ad70:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d0a2      	beq.n	800acbe <_printf_float+0xa2>
 800ad78:	232d      	movs	r3, #45	@ 0x2d
 800ad7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad7e:	e79e      	b.n	800acbe <_printf_float+0xa2>
 800ad80:	9a06      	ldr	r2, [sp, #24]
 800ad82:	2a47      	cmp	r2, #71	@ 0x47
 800ad84:	d1c2      	bne.n	800ad0c <_printf_float+0xf0>
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d1c0      	bne.n	800ad0c <_printf_float+0xf0>
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e7bd      	b.n	800ad0a <_printf_float+0xee>
 800ad8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ad92:	d9db      	bls.n	800ad4c <_printf_float+0x130>
 800ad94:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ad98:	d118      	bne.n	800adcc <_printf_float+0x1b0>
 800ad9a:	2900      	cmp	r1, #0
 800ad9c:	6863      	ldr	r3, [r4, #4]
 800ad9e:	dd0b      	ble.n	800adb8 <_printf_float+0x19c>
 800ada0:	6121      	str	r1, [r4, #16]
 800ada2:	b913      	cbnz	r3, 800adaa <_printf_float+0x18e>
 800ada4:	6822      	ldr	r2, [r4, #0]
 800ada6:	07d0      	lsls	r0, r2, #31
 800ada8:	d502      	bpl.n	800adb0 <_printf_float+0x194>
 800adaa:	3301      	adds	r3, #1
 800adac:	440b      	add	r3, r1
 800adae:	6123      	str	r3, [r4, #16]
 800adb0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800adb2:	f04f 0900 	mov.w	r9, #0
 800adb6:	e7db      	b.n	800ad70 <_printf_float+0x154>
 800adb8:	b913      	cbnz	r3, 800adc0 <_printf_float+0x1a4>
 800adba:	6822      	ldr	r2, [r4, #0]
 800adbc:	07d2      	lsls	r2, r2, #31
 800adbe:	d501      	bpl.n	800adc4 <_printf_float+0x1a8>
 800adc0:	3302      	adds	r3, #2
 800adc2:	e7f4      	b.n	800adae <_printf_float+0x192>
 800adc4:	2301      	movs	r3, #1
 800adc6:	e7f2      	b.n	800adae <_printf_float+0x192>
 800adc8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800adcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adce:	4299      	cmp	r1, r3
 800add0:	db05      	blt.n	800adde <_printf_float+0x1c2>
 800add2:	6823      	ldr	r3, [r4, #0]
 800add4:	6121      	str	r1, [r4, #16]
 800add6:	07d8      	lsls	r0, r3, #31
 800add8:	d5ea      	bpl.n	800adb0 <_printf_float+0x194>
 800adda:	1c4b      	adds	r3, r1, #1
 800addc:	e7e7      	b.n	800adae <_printf_float+0x192>
 800adde:	2900      	cmp	r1, #0
 800ade0:	bfd4      	ite	le
 800ade2:	f1c1 0202 	rsble	r2, r1, #2
 800ade6:	2201      	movgt	r2, #1
 800ade8:	4413      	add	r3, r2
 800adea:	e7e0      	b.n	800adae <_printf_float+0x192>
 800adec:	6823      	ldr	r3, [r4, #0]
 800adee:	055a      	lsls	r2, r3, #21
 800adf0:	d407      	bmi.n	800ae02 <_printf_float+0x1e6>
 800adf2:	6923      	ldr	r3, [r4, #16]
 800adf4:	4642      	mov	r2, r8
 800adf6:	4631      	mov	r1, r6
 800adf8:	4628      	mov	r0, r5
 800adfa:	47b8      	blx	r7
 800adfc:	3001      	adds	r0, #1
 800adfe:	d12b      	bne.n	800ae58 <_printf_float+0x23c>
 800ae00:	e767      	b.n	800acd2 <_printf_float+0xb6>
 800ae02:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ae06:	f240 80dd 	bls.w	800afc4 <_printf_float+0x3a8>
 800ae0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ae0e:	2200      	movs	r2, #0
 800ae10:	2300      	movs	r3, #0
 800ae12:	f7f5 fe59 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae16:	2800      	cmp	r0, #0
 800ae18:	d033      	beq.n	800ae82 <_printf_float+0x266>
 800ae1a:	4a37      	ldr	r2, [pc, #220]	@ (800aef8 <_printf_float+0x2dc>)
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	4631      	mov	r1, r6
 800ae20:	4628      	mov	r0, r5
 800ae22:	47b8      	blx	r7
 800ae24:	3001      	adds	r0, #1
 800ae26:	f43f af54 	beq.w	800acd2 <_printf_float+0xb6>
 800ae2a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ae2e:	4543      	cmp	r3, r8
 800ae30:	db02      	blt.n	800ae38 <_printf_float+0x21c>
 800ae32:	6823      	ldr	r3, [r4, #0]
 800ae34:	07d8      	lsls	r0, r3, #31
 800ae36:	d50f      	bpl.n	800ae58 <_printf_float+0x23c>
 800ae38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae3c:	4631      	mov	r1, r6
 800ae3e:	4628      	mov	r0, r5
 800ae40:	47b8      	blx	r7
 800ae42:	3001      	adds	r0, #1
 800ae44:	f43f af45 	beq.w	800acd2 <_printf_float+0xb6>
 800ae48:	f04f 0900 	mov.w	r9, #0
 800ae4c:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae50:	f104 0a1a 	add.w	sl, r4, #26
 800ae54:	45c8      	cmp	r8, r9
 800ae56:	dc09      	bgt.n	800ae6c <_printf_float+0x250>
 800ae58:	6823      	ldr	r3, [r4, #0]
 800ae5a:	079b      	lsls	r3, r3, #30
 800ae5c:	f100 8103 	bmi.w	800b066 <_printf_float+0x44a>
 800ae60:	68e0      	ldr	r0, [r4, #12]
 800ae62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae64:	4298      	cmp	r0, r3
 800ae66:	bfb8      	it	lt
 800ae68:	4618      	movlt	r0, r3
 800ae6a:	e734      	b.n	800acd6 <_printf_float+0xba>
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	4652      	mov	r2, sl
 800ae70:	4631      	mov	r1, r6
 800ae72:	4628      	mov	r0, r5
 800ae74:	47b8      	blx	r7
 800ae76:	3001      	adds	r0, #1
 800ae78:	f43f af2b 	beq.w	800acd2 <_printf_float+0xb6>
 800ae7c:	f109 0901 	add.w	r9, r9, #1
 800ae80:	e7e8      	b.n	800ae54 <_printf_float+0x238>
 800ae82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	dc39      	bgt.n	800aefc <_printf_float+0x2e0>
 800ae88:	4a1b      	ldr	r2, [pc, #108]	@ (800aef8 <_printf_float+0x2dc>)
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	4631      	mov	r1, r6
 800ae8e:	4628      	mov	r0, r5
 800ae90:	47b8      	blx	r7
 800ae92:	3001      	adds	r0, #1
 800ae94:	f43f af1d 	beq.w	800acd2 <_printf_float+0xb6>
 800ae98:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ae9c:	ea59 0303 	orrs.w	r3, r9, r3
 800aea0:	d102      	bne.n	800aea8 <_printf_float+0x28c>
 800aea2:	6823      	ldr	r3, [r4, #0]
 800aea4:	07d9      	lsls	r1, r3, #31
 800aea6:	d5d7      	bpl.n	800ae58 <_printf_float+0x23c>
 800aea8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aeac:	4631      	mov	r1, r6
 800aeae:	4628      	mov	r0, r5
 800aeb0:	47b8      	blx	r7
 800aeb2:	3001      	adds	r0, #1
 800aeb4:	f43f af0d 	beq.w	800acd2 <_printf_float+0xb6>
 800aeb8:	f04f 0a00 	mov.w	sl, #0
 800aebc:	f104 0b1a 	add.w	fp, r4, #26
 800aec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aec2:	425b      	negs	r3, r3
 800aec4:	4553      	cmp	r3, sl
 800aec6:	dc01      	bgt.n	800aecc <_printf_float+0x2b0>
 800aec8:	464b      	mov	r3, r9
 800aeca:	e793      	b.n	800adf4 <_printf_float+0x1d8>
 800aecc:	2301      	movs	r3, #1
 800aece:	465a      	mov	r2, fp
 800aed0:	4631      	mov	r1, r6
 800aed2:	4628      	mov	r0, r5
 800aed4:	47b8      	blx	r7
 800aed6:	3001      	adds	r0, #1
 800aed8:	f43f aefb 	beq.w	800acd2 <_printf_float+0xb6>
 800aedc:	f10a 0a01 	add.w	sl, sl, #1
 800aee0:	e7ee      	b.n	800aec0 <_printf_float+0x2a4>
 800aee2:	bf00      	nop
 800aee4:	7fefffff 	.word	0x7fefffff
 800aee8:	0800d523 	.word	0x0800d523
 800aeec:	0800d527 	.word	0x0800d527
 800aef0:	0800d52b 	.word	0x0800d52b
 800aef4:	0800d52f 	.word	0x0800d52f
 800aef8:	0800d533 	.word	0x0800d533
 800aefc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aefe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800af02:	4553      	cmp	r3, sl
 800af04:	bfa8      	it	ge
 800af06:	4653      	movge	r3, sl
 800af08:	2b00      	cmp	r3, #0
 800af0a:	4699      	mov	r9, r3
 800af0c:	dc36      	bgt.n	800af7c <_printf_float+0x360>
 800af0e:	f04f 0b00 	mov.w	fp, #0
 800af12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af16:	f104 021a 	add.w	r2, r4, #26
 800af1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800af1c:	9306      	str	r3, [sp, #24]
 800af1e:	eba3 0309 	sub.w	r3, r3, r9
 800af22:	455b      	cmp	r3, fp
 800af24:	dc31      	bgt.n	800af8a <_printf_float+0x36e>
 800af26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af28:	459a      	cmp	sl, r3
 800af2a:	dc3a      	bgt.n	800afa2 <_printf_float+0x386>
 800af2c:	6823      	ldr	r3, [r4, #0]
 800af2e:	07da      	lsls	r2, r3, #31
 800af30:	d437      	bmi.n	800afa2 <_printf_float+0x386>
 800af32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af34:	ebaa 0903 	sub.w	r9, sl, r3
 800af38:	9b06      	ldr	r3, [sp, #24]
 800af3a:	ebaa 0303 	sub.w	r3, sl, r3
 800af3e:	4599      	cmp	r9, r3
 800af40:	bfa8      	it	ge
 800af42:	4699      	movge	r9, r3
 800af44:	f1b9 0f00 	cmp.w	r9, #0
 800af48:	dc33      	bgt.n	800afb2 <_printf_float+0x396>
 800af4a:	f04f 0800 	mov.w	r8, #0
 800af4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af52:	f104 0b1a 	add.w	fp, r4, #26
 800af56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af58:	ebaa 0303 	sub.w	r3, sl, r3
 800af5c:	eba3 0309 	sub.w	r3, r3, r9
 800af60:	4543      	cmp	r3, r8
 800af62:	f77f af79 	ble.w	800ae58 <_printf_float+0x23c>
 800af66:	2301      	movs	r3, #1
 800af68:	465a      	mov	r2, fp
 800af6a:	4631      	mov	r1, r6
 800af6c:	4628      	mov	r0, r5
 800af6e:	47b8      	blx	r7
 800af70:	3001      	adds	r0, #1
 800af72:	f43f aeae 	beq.w	800acd2 <_printf_float+0xb6>
 800af76:	f108 0801 	add.w	r8, r8, #1
 800af7a:	e7ec      	b.n	800af56 <_printf_float+0x33a>
 800af7c:	4642      	mov	r2, r8
 800af7e:	4631      	mov	r1, r6
 800af80:	4628      	mov	r0, r5
 800af82:	47b8      	blx	r7
 800af84:	3001      	adds	r0, #1
 800af86:	d1c2      	bne.n	800af0e <_printf_float+0x2f2>
 800af88:	e6a3      	b.n	800acd2 <_printf_float+0xb6>
 800af8a:	2301      	movs	r3, #1
 800af8c:	4631      	mov	r1, r6
 800af8e:	4628      	mov	r0, r5
 800af90:	9206      	str	r2, [sp, #24]
 800af92:	47b8      	blx	r7
 800af94:	3001      	adds	r0, #1
 800af96:	f43f ae9c 	beq.w	800acd2 <_printf_float+0xb6>
 800af9a:	9a06      	ldr	r2, [sp, #24]
 800af9c:	f10b 0b01 	add.w	fp, fp, #1
 800afa0:	e7bb      	b.n	800af1a <_printf_float+0x2fe>
 800afa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afa6:	4631      	mov	r1, r6
 800afa8:	4628      	mov	r0, r5
 800afaa:	47b8      	blx	r7
 800afac:	3001      	adds	r0, #1
 800afae:	d1c0      	bne.n	800af32 <_printf_float+0x316>
 800afb0:	e68f      	b.n	800acd2 <_printf_float+0xb6>
 800afb2:	9a06      	ldr	r2, [sp, #24]
 800afb4:	464b      	mov	r3, r9
 800afb6:	4442      	add	r2, r8
 800afb8:	4631      	mov	r1, r6
 800afba:	4628      	mov	r0, r5
 800afbc:	47b8      	blx	r7
 800afbe:	3001      	adds	r0, #1
 800afc0:	d1c3      	bne.n	800af4a <_printf_float+0x32e>
 800afc2:	e686      	b.n	800acd2 <_printf_float+0xb6>
 800afc4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800afc8:	f1ba 0f01 	cmp.w	sl, #1
 800afcc:	dc01      	bgt.n	800afd2 <_printf_float+0x3b6>
 800afce:	07db      	lsls	r3, r3, #31
 800afd0:	d536      	bpl.n	800b040 <_printf_float+0x424>
 800afd2:	2301      	movs	r3, #1
 800afd4:	4642      	mov	r2, r8
 800afd6:	4631      	mov	r1, r6
 800afd8:	4628      	mov	r0, r5
 800afda:	47b8      	blx	r7
 800afdc:	3001      	adds	r0, #1
 800afde:	f43f ae78 	beq.w	800acd2 <_printf_float+0xb6>
 800afe2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afe6:	4631      	mov	r1, r6
 800afe8:	4628      	mov	r0, r5
 800afea:	47b8      	blx	r7
 800afec:	3001      	adds	r0, #1
 800afee:	f43f ae70 	beq.w	800acd2 <_printf_float+0xb6>
 800aff2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aff6:	2200      	movs	r2, #0
 800aff8:	2300      	movs	r3, #0
 800affa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800affe:	f7f5 fd63 	bl	8000ac8 <__aeabi_dcmpeq>
 800b002:	b9c0      	cbnz	r0, 800b036 <_printf_float+0x41a>
 800b004:	4653      	mov	r3, sl
 800b006:	f108 0201 	add.w	r2, r8, #1
 800b00a:	4631      	mov	r1, r6
 800b00c:	4628      	mov	r0, r5
 800b00e:	47b8      	blx	r7
 800b010:	3001      	adds	r0, #1
 800b012:	d10c      	bne.n	800b02e <_printf_float+0x412>
 800b014:	e65d      	b.n	800acd2 <_printf_float+0xb6>
 800b016:	2301      	movs	r3, #1
 800b018:	465a      	mov	r2, fp
 800b01a:	4631      	mov	r1, r6
 800b01c:	4628      	mov	r0, r5
 800b01e:	47b8      	blx	r7
 800b020:	3001      	adds	r0, #1
 800b022:	f43f ae56 	beq.w	800acd2 <_printf_float+0xb6>
 800b026:	f108 0801 	add.w	r8, r8, #1
 800b02a:	45d0      	cmp	r8, sl
 800b02c:	dbf3      	blt.n	800b016 <_printf_float+0x3fa>
 800b02e:	464b      	mov	r3, r9
 800b030:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b034:	e6df      	b.n	800adf6 <_printf_float+0x1da>
 800b036:	f04f 0800 	mov.w	r8, #0
 800b03a:	f104 0b1a 	add.w	fp, r4, #26
 800b03e:	e7f4      	b.n	800b02a <_printf_float+0x40e>
 800b040:	2301      	movs	r3, #1
 800b042:	4642      	mov	r2, r8
 800b044:	e7e1      	b.n	800b00a <_printf_float+0x3ee>
 800b046:	2301      	movs	r3, #1
 800b048:	464a      	mov	r2, r9
 800b04a:	4631      	mov	r1, r6
 800b04c:	4628      	mov	r0, r5
 800b04e:	47b8      	blx	r7
 800b050:	3001      	adds	r0, #1
 800b052:	f43f ae3e 	beq.w	800acd2 <_printf_float+0xb6>
 800b056:	f108 0801 	add.w	r8, r8, #1
 800b05a:	68e3      	ldr	r3, [r4, #12]
 800b05c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b05e:	1a5b      	subs	r3, r3, r1
 800b060:	4543      	cmp	r3, r8
 800b062:	dcf0      	bgt.n	800b046 <_printf_float+0x42a>
 800b064:	e6fc      	b.n	800ae60 <_printf_float+0x244>
 800b066:	f04f 0800 	mov.w	r8, #0
 800b06a:	f104 0919 	add.w	r9, r4, #25
 800b06e:	e7f4      	b.n	800b05a <_printf_float+0x43e>

0800b070 <_printf_common>:
 800b070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b074:	4616      	mov	r6, r2
 800b076:	4698      	mov	r8, r3
 800b078:	688a      	ldr	r2, [r1, #8]
 800b07a:	690b      	ldr	r3, [r1, #16]
 800b07c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b080:	4293      	cmp	r3, r2
 800b082:	bfb8      	it	lt
 800b084:	4613      	movlt	r3, r2
 800b086:	6033      	str	r3, [r6, #0]
 800b088:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b08c:	4607      	mov	r7, r0
 800b08e:	460c      	mov	r4, r1
 800b090:	b10a      	cbz	r2, 800b096 <_printf_common+0x26>
 800b092:	3301      	adds	r3, #1
 800b094:	6033      	str	r3, [r6, #0]
 800b096:	6823      	ldr	r3, [r4, #0]
 800b098:	0699      	lsls	r1, r3, #26
 800b09a:	bf42      	ittt	mi
 800b09c:	6833      	ldrmi	r3, [r6, #0]
 800b09e:	3302      	addmi	r3, #2
 800b0a0:	6033      	strmi	r3, [r6, #0]
 800b0a2:	6825      	ldr	r5, [r4, #0]
 800b0a4:	f015 0506 	ands.w	r5, r5, #6
 800b0a8:	d106      	bne.n	800b0b8 <_printf_common+0x48>
 800b0aa:	f104 0a19 	add.w	sl, r4, #25
 800b0ae:	68e3      	ldr	r3, [r4, #12]
 800b0b0:	6832      	ldr	r2, [r6, #0]
 800b0b2:	1a9b      	subs	r3, r3, r2
 800b0b4:	42ab      	cmp	r3, r5
 800b0b6:	dc26      	bgt.n	800b106 <_printf_common+0x96>
 800b0b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b0bc:	6822      	ldr	r2, [r4, #0]
 800b0be:	3b00      	subs	r3, #0
 800b0c0:	bf18      	it	ne
 800b0c2:	2301      	movne	r3, #1
 800b0c4:	0692      	lsls	r2, r2, #26
 800b0c6:	d42b      	bmi.n	800b120 <_printf_common+0xb0>
 800b0c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b0cc:	4641      	mov	r1, r8
 800b0ce:	4638      	mov	r0, r7
 800b0d0:	47c8      	blx	r9
 800b0d2:	3001      	adds	r0, #1
 800b0d4:	d01e      	beq.n	800b114 <_printf_common+0xa4>
 800b0d6:	6823      	ldr	r3, [r4, #0]
 800b0d8:	6922      	ldr	r2, [r4, #16]
 800b0da:	f003 0306 	and.w	r3, r3, #6
 800b0de:	2b04      	cmp	r3, #4
 800b0e0:	bf02      	ittt	eq
 800b0e2:	68e5      	ldreq	r5, [r4, #12]
 800b0e4:	6833      	ldreq	r3, [r6, #0]
 800b0e6:	1aed      	subeq	r5, r5, r3
 800b0e8:	68a3      	ldr	r3, [r4, #8]
 800b0ea:	bf0c      	ite	eq
 800b0ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0f0:	2500      	movne	r5, #0
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	bfc4      	itt	gt
 800b0f6:	1a9b      	subgt	r3, r3, r2
 800b0f8:	18ed      	addgt	r5, r5, r3
 800b0fa:	2600      	movs	r6, #0
 800b0fc:	341a      	adds	r4, #26
 800b0fe:	42b5      	cmp	r5, r6
 800b100:	d11a      	bne.n	800b138 <_printf_common+0xc8>
 800b102:	2000      	movs	r0, #0
 800b104:	e008      	b.n	800b118 <_printf_common+0xa8>
 800b106:	2301      	movs	r3, #1
 800b108:	4652      	mov	r2, sl
 800b10a:	4641      	mov	r1, r8
 800b10c:	4638      	mov	r0, r7
 800b10e:	47c8      	blx	r9
 800b110:	3001      	adds	r0, #1
 800b112:	d103      	bne.n	800b11c <_printf_common+0xac>
 800b114:	f04f 30ff 	mov.w	r0, #4294967295
 800b118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b11c:	3501      	adds	r5, #1
 800b11e:	e7c6      	b.n	800b0ae <_printf_common+0x3e>
 800b120:	18e1      	adds	r1, r4, r3
 800b122:	1c5a      	adds	r2, r3, #1
 800b124:	2030      	movs	r0, #48	@ 0x30
 800b126:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b12a:	4422      	add	r2, r4
 800b12c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b130:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b134:	3302      	adds	r3, #2
 800b136:	e7c7      	b.n	800b0c8 <_printf_common+0x58>
 800b138:	2301      	movs	r3, #1
 800b13a:	4622      	mov	r2, r4
 800b13c:	4641      	mov	r1, r8
 800b13e:	4638      	mov	r0, r7
 800b140:	47c8      	blx	r9
 800b142:	3001      	adds	r0, #1
 800b144:	d0e6      	beq.n	800b114 <_printf_common+0xa4>
 800b146:	3601      	adds	r6, #1
 800b148:	e7d9      	b.n	800b0fe <_printf_common+0x8e>
	...

0800b14c <_printf_i>:
 800b14c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b150:	7e0f      	ldrb	r7, [r1, #24]
 800b152:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b154:	2f78      	cmp	r7, #120	@ 0x78
 800b156:	4691      	mov	r9, r2
 800b158:	4680      	mov	r8, r0
 800b15a:	460c      	mov	r4, r1
 800b15c:	469a      	mov	sl, r3
 800b15e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b162:	d807      	bhi.n	800b174 <_printf_i+0x28>
 800b164:	2f62      	cmp	r7, #98	@ 0x62
 800b166:	d80a      	bhi.n	800b17e <_printf_i+0x32>
 800b168:	2f00      	cmp	r7, #0
 800b16a:	f000 80d2 	beq.w	800b312 <_printf_i+0x1c6>
 800b16e:	2f58      	cmp	r7, #88	@ 0x58
 800b170:	f000 80b9 	beq.w	800b2e6 <_printf_i+0x19a>
 800b174:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b178:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b17c:	e03a      	b.n	800b1f4 <_printf_i+0xa8>
 800b17e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b182:	2b15      	cmp	r3, #21
 800b184:	d8f6      	bhi.n	800b174 <_printf_i+0x28>
 800b186:	a101      	add	r1, pc, #4	@ (adr r1, 800b18c <_printf_i+0x40>)
 800b188:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b18c:	0800b1e5 	.word	0x0800b1e5
 800b190:	0800b1f9 	.word	0x0800b1f9
 800b194:	0800b175 	.word	0x0800b175
 800b198:	0800b175 	.word	0x0800b175
 800b19c:	0800b175 	.word	0x0800b175
 800b1a0:	0800b175 	.word	0x0800b175
 800b1a4:	0800b1f9 	.word	0x0800b1f9
 800b1a8:	0800b175 	.word	0x0800b175
 800b1ac:	0800b175 	.word	0x0800b175
 800b1b0:	0800b175 	.word	0x0800b175
 800b1b4:	0800b175 	.word	0x0800b175
 800b1b8:	0800b2f9 	.word	0x0800b2f9
 800b1bc:	0800b223 	.word	0x0800b223
 800b1c0:	0800b2b3 	.word	0x0800b2b3
 800b1c4:	0800b175 	.word	0x0800b175
 800b1c8:	0800b175 	.word	0x0800b175
 800b1cc:	0800b31b 	.word	0x0800b31b
 800b1d0:	0800b175 	.word	0x0800b175
 800b1d4:	0800b223 	.word	0x0800b223
 800b1d8:	0800b175 	.word	0x0800b175
 800b1dc:	0800b175 	.word	0x0800b175
 800b1e0:	0800b2bb 	.word	0x0800b2bb
 800b1e4:	6833      	ldr	r3, [r6, #0]
 800b1e6:	1d1a      	adds	r2, r3, #4
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	6032      	str	r2, [r6, #0]
 800b1ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b1f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	e09d      	b.n	800b334 <_printf_i+0x1e8>
 800b1f8:	6833      	ldr	r3, [r6, #0]
 800b1fa:	6820      	ldr	r0, [r4, #0]
 800b1fc:	1d19      	adds	r1, r3, #4
 800b1fe:	6031      	str	r1, [r6, #0]
 800b200:	0606      	lsls	r6, r0, #24
 800b202:	d501      	bpl.n	800b208 <_printf_i+0xbc>
 800b204:	681d      	ldr	r5, [r3, #0]
 800b206:	e003      	b.n	800b210 <_printf_i+0xc4>
 800b208:	0645      	lsls	r5, r0, #25
 800b20a:	d5fb      	bpl.n	800b204 <_printf_i+0xb8>
 800b20c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b210:	2d00      	cmp	r5, #0
 800b212:	da03      	bge.n	800b21c <_printf_i+0xd0>
 800b214:	232d      	movs	r3, #45	@ 0x2d
 800b216:	426d      	negs	r5, r5
 800b218:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b21c:	4859      	ldr	r0, [pc, #356]	@ (800b384 <_printf_i+0x238>)
 800b21e:	230a      	movs	r3, #10
 800b220:	e011      	b.n	800b246 <_printf_i+0xfa>
 800b222:	6821      	ldr	r1, [r4, #0]
 800b224:	6833      	ldr	r3, [r6, #0]
 800b226:	0608      	lsls	r0, r1, #24
 800b228:	f853 5b04 	ldr.w	r5, [r3], #4
 800b22c:	d402      	bmi.n	800b234 <_printf_i+0xe8>
 800b22e:	0649      	lsls	r1, r1, #25
 800b230:	bf48      	it	mi
 800b232:	b2ad      	uxthmi	r5, r5
 800b234:	2f6f      	cmp	r7, #111	@ 0x6f
 800b236:	4853      	ldr	r0, [pc, #332]	@ (800b384 <_printf_i+0x238>)
 800b238:	6033      	str	r3, [r6, #0]
 800b23a:	bf14      	ite	ne
 800b23c:	230a      	movne	r3, #10
 800b23e:	2308      	moveq	r3, #8
 800b240:	2100      	movs	r1, #0
 800b242:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b246:	6866      	ldr	r6, [r4, #4]
 800b248:	60a6      	str	r6, [r4, #8]
 800b24a:	2e00      	cmp	r6, #0
 800b24c:	bfa2      	ittt	ge
 800b24e:	6821      	ldrge	r1, [r4, #0]
 800b250:	f021 0104 	bicge.w	r1, r1, #4
 800b254:	6021      	strge	r1, [r4, #0]
 800b256:	b90d      	cbnz	r5, 800b25c <_printf_i+0x110>
 800b258:	2e00      	cmp	r6, #0
 800b25a:	d04b      	beq.n	800b2f4 <_printf_i+0x1a8>
 800b25c:	4616      	mov	r6, r2
 800b25e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b262:	fb03 5711 	mls	r7, r3, r1, r5
 800b266:	5dc7      	ldrb	r7, [r0, r7]
 800b268:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b26c:	462f      	mov	r7, r5
 800b26e:	42bb      	cmp	r3, r7
 800b270:	460d      	mov	r5, r1
 800b272:	d9f4      	bls.n	800b25e <_printf_i+0x112>
 800b274:	2b08      	cmp	r3, #8
 800b276:	d10b      	bne.n	800b290 <_printf_i+0x144>
 800b278:	6823      	ldr	r3, [r4, #0]
 800b27a:	07df      	lsls	r7, r3, #31
 800b27c:	d508      	bpl.n	800b290 <_printf_i+0x144>
 800b27e:	6923      	ldr	r3, [r4, #16]
 800b280:	6861      	ldr	r1, [r4, #4]
 800b282:	4299      	cmp	r1, r3
 800b284:	bfde      	ittt	le
 800b286:	2330      	movle	r3, #48	@ 0x30
 800b288:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b28c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b290:	1b92      	subs	r2, r2, r6
 800b292:	6122      	str	r2, [r4, #16]
 800b294:	f8cd a000 	str.w	sl, [sp]
 800b298:	464b      	mov	r3, r9
 800b29a:	aa03      	add	r2, sp, #12
 800b29c:	4621      	mov	r1, r4
 800b29e:	4640      	mov	r0, r8
 800b2a0:	f7ff fee6 	bl	800b070 <_printf_common>
 800b2a4:	3001      	adds	r0, #1
 800b2a6:	d14a      	bne.n	800b33e <_printf_i+0x1f2>
 800b2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ac:	b004      	add	sp, #16
 800b2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2b2:	6823      	ldr	r3, [r4, #0]
 800b2b4:	f043 0320 	orr.w	r3, r3, #32
 800b2b8:	6023      	str	r3, [r4, #0]
 800b2ba:	4833      	ldr	r0, [pc, #204]	@ (800b388 <_printf_i+0x23c>)
 800b2bc:	2778      	movs	r7, #120	@ 0x78
 800b2be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b2c2:	6823      	ldr	r3, [r4, #0]
 800b2c4:	6831      	ldr	r1, [r6, #0]
 800b2c6:	061f      	lsls	r7, r3, #24
 800b2c8:	f851 5b04 	ldr.w	r5, [r1], #4
 800b2cc:	d402      	bmi.n	800b2d4 <_printf_i+0x188>
 800b2ce:	065f      	lsls	r7, r3, #25
 800b2d0:	bf48      	it	mi
 800b2d2:	b2ad      	uxthmi	r5, r5
 800b2d4:	6031      	str	r1, [r6, #0]
 800b2d6:	07d9      	lsls	r1, r3, #31
 800b2d8:	bf44      	itt	mi
 800b2da:	f043 0320 	orrmi.w	r3, r3, #32
 800b2de:	6023      	strmi	r3, [r4, #0]
 800b2e0:	b11d      	cbz	r5, 800b2ea <_printf_i+0x19e>
 800b2e2:	2310      	movs	r3, #16
 800b2e4:	e7ac      	b.n	800b240 <_printf_i+0xf4>
 800b2e6:	4827      	ldr	r0, [pc, #156]	@ (800b384 <_printf_i+0x238>)
 800b2e8:	e7e9      	b.n	800b2be <_printf_i+0x172>
 800b2ea:	6823      	ldr	r3, [r4, #0]
 800b2ec:	f023 0320 	bic.w	r3, r3, #32
 800b2f0:	6023      	str	r3, [r4, #0]
 800b2f2:	e7f6      	b.n	800b2e2 <_printf_i+0x196>
 800b2f4:	4616      	mov	r6, r2
 800b2f6:	e7bd      	b.n	800b274 <_printf_i+0x128>
 800b2f8:	6833      	ldr	r3, [r6, #0]
 800b2fa:	6825      	ldr	r5, [r4, #0]
 800b2fc:	6961      	ldr	r1, [r4, #20]
 800b2fe:	1d18      	adds	r0, r3, #4
 800b300:	6030      	str	r0, [r6, #0]
 800b302:	062e      	lsls	r6, r5, #24
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	d501      	bpl.n	800b30c <_printf_i+0x1c0>
 800b308:	6019      	str	r1, [r3, #0]
 800b30a:	e002      	b.n	800b312 <_printf_i+0x1c6>
 800b30c:	0668      	lsls	r0, r5, #25
 800b30e:	d5fb      	bpl.n	800b308 <_printf_i+0x1bc>
 800b310:	8019      	strh	r1, [r3, #0]
 800b312:	2300      	movs	r3, #0
 800b314:	6123      	str	r3, [r4, #16]
 800b316:	4616      	mov	r6, r2
 800b318:	e7bc      	b.n	800b294 <_printf_i+0x148>
 800b31a:	6833      	ldr	r3, [r6, #0]
 800b31c:	1d1a      	adds	r2, r3, #4
 800b31e:	6032      	str	r2, [r6, #0]
 800b320:	681e      	ldr	r6, [r3, #0]
 800b322:	6862      	ldr	r2, [r4, #4]
 800b324:	2100      	movs	r1, #0
 800b326:	4630      	mov	r0, r6
 800b328:	f7f4 ff52 	bl	80001d0 <memchr>
 800b32c:	b108      	cbz	r0, 800b332 <_printf_i+0x1e6>
 800b32e:	1b80      	subs	r0, r0, r6
 800b330:	6060      	str	r0, [r4, #4]
 800b332:	6863      	ldr	r3, [r4, #4]
 800b334:	6123      	str	r3, [r4, #16]
 800b336:	2300      	movs	r3, #0
 800b338:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b33c:	e7aa      	b.n	800b294 <_printf_i+0x148>
 800b33e:	6923      	ldr	r3, [r4, #16]
 800b340:	4632      	mov	r2, r6
 800b342:	4649      	mov	r1, r9
 800b344:	4640      	mov	r0, r8
 800b346:	47d0      	blx	sl
 800b348:	3001      	adds	r0, #1
 800b34a:	d0ad      	beq.n	800b2a8 <_printf_i+0x15c>
 800b34c:	6823      	ldr	r3, [r4, #0]
 800b34e:	079b      	lsls	r3, r3, #30
 800b350:	d413      	bmi.n	800b37a <_printf_i+0x22e>
 800b352:	68e0      	ldr	r0, [r4, #12]
 800b354:	9b03      	ldr	r3, [sp, #12]
 800b356:	4298      	cmp	r0, r3
 800b358:	bfb8      	it	lt
 800b35a:	4618      	movlt	r0, r3
 800b35c:	e7a6      	b.n	800b2ac <_printf_i+0x160>
 800b35e:	2301      	movs	r3, #1
 800b360:	4632      	mov	r2, r6
 800b362:	4649      	mov	r1, r9
 800b364:	4640      	mov	r0, r8
 800b366:	47d0      	blx	sl
 800b368:	3001      	adds	r0, #1
 800b36a:	d09d      	beq.n	800b2a8 <_printf_i+0x15c>
 800b36c:	3501      	adds	r5, #1
 800b36e:	68e3      	ldr	r3, [r4, #12]
 800b370:	9903      	ldr	r1, [sp, #12]
 800b372:	1a5b      	subs	r3, r3, r1
 800b374:	42ab      	cmp	r3, r5
 800b376:	dcf2      	bgt.n	800b35e <_printf_i+0x212>
 800b378:	e7eb      	b.n	800b352 <_printf_i+0x206>
 800b37a:	2500      	movs	r5, #0
 800b37c:	f104 0619 	add.w	r6, r4, #25
 800b380:	e7f5      	b.n	800b36e <_printf_i+0x222>
 800b382:	bf00      	nop
 800b384:	0800d535 	.word	0x0800d535
 800b388:	0800d546 	.word	0x0800d546

0800b38c <std>:
 800b38c:	2300      	movs	r3, #0
 800b38e:	b510      	push	{r4, lr}
 800b390:	4604      	mov	r4, r0
 800b392:	e9c0 3300 	strd	r3, r3, [r0]
 800b396:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b39a:	6083      	str	r3, [r0, #8]
 800b39c:	8181      	strh	r1, [r0, #12]
 800b39e:	6643      	str	r3, [r0, #100]	@ 0x64
 800b3a0:	81c2      	strh	r2, [r0, #14]
 800b3a2:	6183      	str	r3, [r0, #24]
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	2208      	movs	r2, #8
 800b3a8:	305c      	adds	r0, #92	@ 0x5c
 800b3aa:	f000 f906 	bl	800b5ba <memset>
 800b3ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b3e4 <std+0x58>)
 800b3b0:	6263      	str	r3, [r4, #36]	@ 0x24
 800b3b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b3e8 <std+0x5c>)
 800b3b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b3b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b3ec <std+0x60>)
 800b3b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b3ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b3f0 <std+0x64>)
 800b3bc:	6323      	str	r3, [r4, #48]	@ 0x30
 800b3be:	4b0d      	ldr	r3, [pc, #52]	@ (800b3f4 <std+0x68>)
 800b3c0:	6224      	str	r4, [r4, #32]
 800b3c2:	429c      	cmp	r4, r3
 800b3c4:	d006      	beq.n	800b3d4 <std+0x48>
 800b3c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b3ca:	4294      	cmp	r4, r2
 800b3cc:	d002      	beq.n	800b3d4 <std+0x48>
 800b3ce:	33d0      	adds	r3, #208	@ 0xd0
 800b3d0:	429c      	cmp	r4, r3
 800b3d2:	d105      	bne.n	800b3e0 <std+0x54>
 800b3d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b3d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3dc:	f000 b96a 	b.w	800b6b4 <__retarget_lock_init_recursive>
 800b3e0:	bd10      	pop	{r4, pc}
 800b3e2:	bf00      	nop
 800b3e4:	0800b535 	.word	0x0800b535
 800b3e8:	0800b557 	.word	0x0800b557
 800b3ec:	0800b58f 	.word	0x0800b58f
 800b3f0:	0800b5b3 	.word	0x0800b5b3
 800b3f4:	20000e5c 	.word	0x20000e5c

0800b3f8 <stdio_exit_handler>:
 800b3f8:	4a02      	ldr	r2, [pc, #8]	@ (800b404 <stdio_exit_handler+0xc>)
 800b3fa:	4903      	ldr	r1, [pc, #12]	@ (800b408 <stdio_exit_handler+0x10>)
 800b3fc:	4803      	ldr	r0, [pc, #12]	@ (800b40c <stdio_exit_handler+0x14>)
 800b3fe:	f000 b869 	b.w	800b4d4 <_fwalk_sglue>
 800b402:	bf00      	nop
 800b404:	20000058 	.word	0x20000058
 800b408:	0800d041 	.word	0x0800d041
 800b40c:	20000068 	.word	0x20000068

0800b410 <cleanup_stdio>:
 800b410:	6841      	ldr	r1, [r0, #4]
 800b412:	4b0c      	ldr	r3, [pc, #48]	@ (800b444 <cleanup_stdio+0x34>)
 800b414:	4299      	cmp	r1, r3
 800b416:	b510      	push	{r4, lr}
 800b418:	4604      	mov	r4, r0
 800b41a:	d001      	beq.n	800b420 <cleanup_stdio+0x10>
 800b41c:	f001 fe10 	bl	800d040 <_fflush_r>
 800b420:	68a1      	ldr	r1, [r4, #8]
 800b422:	4b09      	ldr	r3, [pc, #36]	@ (800b448 <cleanup_stdio+0x38>)
 800b424:	4299      	cmp	r1, r3
 800b426:	d002      	beq.n	800b42e <cleanup_stdio+0x1e>
 800b428:	4620      	mov	r0, r4
 800b42a:	f001 fe09 	bl	800d040 <_fflush_r>
 800b42e:	68e1      	ldr	r1, [r4, #12]
 800b430:	4b06      	ldr	r3, [pc, #24]	@ (800b44c <cleanup_stdio+0x3c>)
 800b432:	4299      	cmp	r1, r3
 800b434:	d004      	beq.n	800b440 <cleanup_stdio+0x30>
 800b436:	4620      	mov	r0, r4
 800b438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b43c:	f001 be00 	b.w	800d040 <_fflush_r>
 800b440:	bd10      	pop	{r4, pc}
 800b442:	bf00      	nop
 800b444:	20000e5c 	.word	0x20000e5c
 800b448:	20000ec4 	.word	0x20000ec4
 800b44c:	20000f2c 	.word	0x20000f2c

0800b450 <global_stdio_init.part.0>:
 800b450:	b510      	push	{r4, lr}
 800b452:	4b0b      	ldr	r3, [pc, #44]	@ (800b480 <global_stdio_init.part.0+0x30>)
 800b454:	4c0b      	ldr	r4, [pc, #44]	@ (800b484 <global_stdio_init.part.0+0x34>)
 800b456:	4a0c      	ldr	r2, [pc, #48]	@ (800b488 <global_stdio_init.part.0+0x38>)
 800b458:	601a      	str	r2, [r3, #0]
 800b45a:	4620      	mov	r0, r4
 800b45c:	2200      	movs	r2, #0
 800b45e:	2104      	movs	r1, #4
 800b460:	f7ff ff94 	bl	800b38c <std>
 800b464:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b468:	2201      	movs	r2, #1
 800b46a:	2109      	movs	r1, #9
 800b46c:	f7ff ff8e 	bl	800b38c <std>
 800b470:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b474:	2202      	movs	r2, #2
 800b476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b47a:	2112      	movs	r1, #18
 800b47c:	f7ff bf86 	b.w	800b38c <std>
 800b480:	20000f94 	.word	0x20000f94
 800b484:	20000e5c 	.word	0x20000e5c
 800b488:	0800b3f9 	.word	0x0800b3f9

0800b48c <__sfp_lock_acquire>:
 800b48c:	4801      	ldr	r0, [pc, #4]	@ (800b494 <__sfp_lock_acquire+0x8>)
 800b48e:	f000 b912 	b.w	800b6b6 <__retarget_lock_acquire_recursive>
 800b492:	bf00      	nop
 800b494:	20000f9d 	.word	0x20000f9d

0800b498 <__sfp_lock_release>:
 800b498:	4801      	ldr	r0, [pc, #4]	@ (800b4a0 <__sfp_lock_release+0x8>)
 800b49a:	f000 b90d 	b.w	800b6b8 <__retarget_lock_release_recursive>
 800b49e:	bf00      	nop
 800b4a0:	20000f9d 	.word	0x20000f9d

0800b4a4 <__sinit>:
 800b4a4:	b510      	push	{r4, lr}
 800b4a6:	4604      	mov	r4, r0
 800b4a8:	f7ff fff0 	bl	800b48c <__sfp_lock_acquire>
 800b4ac:	6a23      	ldr	r3, [r4, #32]
 800b4ae:	b11b      	cbz	r3, 800b4b8 <__sinit+0x14>
 800b4b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4b4:	f7ff bff0 	b.w	800b498 <__sfp_lock_release>
 800b4b8:	4b04      	ldr	r3, [pc, #16]	@ (800b4cc <__sinit+0x28>)
 800b4ba:	6223      	str	r3, [r4, #32]
 800b4bc:	4b04      	ldr	r3, [pc, #16]	@ (800b4d0 <__sinit+0x2c>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d1f5      	bne.n	800b4b0 <__sinit+0xc>
 800b4c4:	f7ff ffc4 	bl	800b450 <global_stdio_init.part.0>
 800b4c8:	e7f2      	b.n	800b4b0 <__sinit+0xc>
 800b4ca:	bf00      	nop
 800b4cc:	0800b411 	.word	0x0800b411
 800b4d0:	20000f94 	.word	0x20000f94

0800b4d4 <_fwalk_sglue>:
 800b4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4d8:	4607      	mov	r7, r0
 800b4da:	4688      	mov	r8, r1
 800b4dc:	4614      	mov	r4, r2
 800b4de:	2600      	movs	r6, #0
 800b4e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4e4:	f1b9 0901 	subs.w	r9, r9, #1
 800b4e8:	d505      	bpl.n	800b4f6 <_fwalk_sglue+0x22>
 800b4ea:	6824      	ldr	r4, [r4, #0]
 800b4ec:	2c00      	cmp	r4, #0
 800b4ee:	d1f7      	bne.n	800b4e0 <_fwalk_sglue+0xc>
 800b4f0:	4630      	mov	r0, r6
 800b4f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4f6:	89ab      	ldrh	r3, [r5, #12]
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d907      	bls.n	800b50c <_fwalk_sglue+0x38>
 800b4fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b500:	3301      	adds	r3, #1
 800b502:	d003      	beq.n	800b50c <_fwalk_sglue+0x38>
 800b504:	4629      	mov	r1, r5
 800b506:	4638      	mov	r0, r7
 800b508:	47c0      	blx	r8
 800b50a:	4306      	orrs	r6, r0
 800b50c:	3568      	adds	r5, #104	@ 0x68
 800b50e:	e7e9      	b.n	800b4e4 <_fwalk_sglue+0x10>

0800b510 <iprintf>:
 800b510:	b40f      	push	{r0, r1, r2, r3}
 800b512:	b507      	push	{r0, r1, r2, lr}
 800b514:	4906      	ldr	r1, [pc, #24]	@ (800b530 <iprintf+0x20>)
 800b516:	ab04      	add	r3, sp, #16
 800b518:	6808      	ldr	r0, [r1, #0]
 800b51a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b51e:	6881      	ldr	r1, [r0, #8]
 800b520:	9301      	str	r3, [sp, #4]
 800b522:	f001 fbf1 	bl	800cd08 <_vfiprintf_r>
 800b526:	b003      	add	sp, #12
 800b528:	f85d eb04 	ldr.w	lr, [sp], #4
 800b52c:	b004      	add	sp, #16
 800b52e:	4770      	bx	lr
 800b530:	20000064 	.word	0x20000064

0800b534 <__sread>:
 800b534:	b510      	push	{r4, lr}
 800b536:	460c      	mov	r4, r1
 800b538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b53c:	f000 f86c 	bl	800b618 <_read_r>
 800b540:	2800      	cmp	r0, #0
 800b542:	bfab      	itete	ge
 800b544:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b546:	89a3      	ldrhlt	r3, [r4, #12]
 800b548:	181b      	addge	r3, r3, r0
 800b54a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b54e:	bfac      	ite	ge
 800b550:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b552:	81a3      	strhlt	r3, [r4, #12]
 800b554:	bd10      	pop	{r4, pc}

0800b556 <__swrite>:
 800b556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b55a:	461f      	mov	r7, r3
 800b55c:	898b      	ldrh	r3, [r1, #12]
 800b55e:	05db      	lsls	r3, r3, #23
 800b560:	4605      	mov	r5, r0
 800b562:	460c      	mov	r4, r1
 800b564:	4616      	mov	r6, r2
 800b566:	d505      	bpl.n	800b574 <__swrite+0x1e>
 800b568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b56c:	2302      	movs	r3, #2
 800b56e:	2200      	movs	r2, #0
 800b570:	f000 f840 	bl	800b5f4 <_lseek_r>
 800b574:	89a3      	ldrh	r3, [r4, #12]
 800b576:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b57a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b57e:	81a3      	strh	r3, [r4, #12]
 800b580:	4632      	mov	r2, r6
 800b582:	463b      	mov	r3, r7
 800b584:	4628      	mov	r0, r5
 800b586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b58a:	f000 b857 	b.w	800b63c <_write_r>

0800b58e <__sseek>:
 800b58e:	b510      	push	{r4, lr}
 800b590:	460c      	mov	r4, r1
 800b592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b596:	f000 f82d 	bl	800b5f4 <_lseek_r>
 800b59a:	1c43      	adds	r3, r0, #1
 800b59c:	89a3      	ldrh	r3, [r4, #12]
 800b59e:	bf15      	itete	ne
 800b5a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b5a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b5a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b5aa:	81a3      	strheq	r3, [r4, #12]
 800b5ac:	bf18      	it	ne
 800b5ae:	81a3      	strhne	r3, [r4, #12]
 800b5b0:	bd10      	pop	{r4, pc}

0800b5b2 <__sclose>:
 800b5b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5b6:	f000 b80d 	b.w	800b5d4 <_close_r>

0800b5ba <memset>:
 800b5ba:	4402      	add	r2, r0
 800b5bc:	4603      	mov	r3, r0
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d100      	bne.n	800b5c4 <memset+0xa>
 800b5c2:	4770      	bx	lr
 800b5c4:	f803 1b01 	strb.w	r1, [r3], #1
 800b5c8:	e7f9      	b.n	800b5be <memset+0x4>
	...

0800b5cc <_localeconv_r>:
 800b5cc:	4800      	ldr	r0, [pc, #0]	@ (800b5d0 <_localeconv_r+0x4>)
 800b5ce:	4770      	bx	lr
 800b5d0:	200001a4 	.word	0x200001a4

0800b5d4 <_close_r>:
 800b5d4:	b538      	push	{r3, r4, r5, lr}
 800b5d6:	4d06      	ldr	r5, [pc, #24]	@ (800b5f0 <_close_r+0x1c>)
 800b5d8:	2300      	movs	r3, #0
 800b5da:	4604      	mov	r4, r0
 800b5dc:	4608      	mov	r0, r1
 800b5de:	602b      	str	r3, [r5, #0]
 800b5e0:	f7f8 fbe6 	bl	8003db0 <_close>
 800b5e4:	1c43      	adds	r3, r0, #1
 800b5e6:	d102      	bne.n	800b5ee <_close_r+0x1a>
 800b5e8:	682b      	ldr	r3, [r5, #0]
 800b5ea:	b103      	cbz	r3, 800b5ee <_close_r+0x1a>
 800b5ec:	6023      	str	r3, [r4, #0]
 800b5ee:	bd38      	pop	{r3, r4, r5, pc}
 800b5f0:	20000f98 	.word	0x20000f98

0800b5f4 <_lseek_r>:
 800b5f4:	b538      	push	{r3, r4, r5, lr}
 800b5f6:	4d07      	ldr	r5, [pc, #28]	@ (800b614 <_lseek_r+0x20>)
 800b5f8:	4604      	mov	r4, r0
 800b5fa:	4608      	mov	r0, r1
 800b5fc:	4611      	mov	r1, r2
 800b5fe:	2200      	movs	r2, #0
 800b600:	602a      	str	r2, [r5, #0]
 800b602:	461a      	mov	r2, r3
 800b604:	f7f8 fbfb 	bl	8003dfe <_lseek>
 800b608:	1c43      	adds	r3, r0, #1
 800b60a:	d102      	bne.n	800b612 <_lseek_r+0x1e>
 800b60c:	682b      	ldr	r3, [r5, #0]
 800b60e:	b103      	cbz	r3, 800b612 <_lseek_r+0x1e>
 800b610:	6023      	str	r3, [r4, #0]
 800b612:	bd38      	pop	{r3, r4, r5, pc}
 800b614:	20000f98 	.word	0x20000f98

0800b618 <_read_r>:
 800b618:	b538      	push	{r3, r4, r5, lr}
 800b61a:	4d07      	ldr	r5, [pc, #28]	@ (800b638 <_read_r+0x20>)
 800b61c:	4604      	mov	r4, r0
 800b61e:	4608      	mov	r0, r1
 800b620:	4611      	mov	r1, r2
 800b622:	2200      	movs	r2, #0
 800b624:	602a      	str	r2, [r5, #0]
 800b626:	461a      	mov	r2, r3
 800b628:	f7f8 fb89 	bl	8003d3e <_read>
 800b62c:	1c43      	adds	r3, r0, #1
 800b62e:	d102      	bne.n	800b636 <_read_r+0x1e>
 800b630:	682b      	ldr	r3, [r5, #0]
 800b632:	b103      	cbz	r3, 800b636 <_read_r+0x1e>
 800b634:	6023      	str	r3, [r4, #0]
 800b636:	bd38      	pop	{r3, r4, r5, pc}
 800b638:	20000f98 	.word	0x20000f98

0800b63c <_write_r>:
 800b63c:	b538      	push	{r3, r4, r5, lr}
 800b63e:	4d07      	ldr	r5, [pc, #28]	@ (800b65c <_write_r+0x20>)
 800b640:	4604      	mov	r4, r0
 800b642:	4608      	mov	r0, r1
 800b644:	4611      	mov	r1, r2
 800b646:	2200      	movs	r2, #0
 800b648:	602a      	str	r2, [r5, #0]
 800b64a:	461a      	mov	r2, r3
 800b64c:	f7f8 fb94 	bl	8003d78 <_write>
 800b650:	1c43      	adds	r3, r0, #1
 800b652:	d102      	bne.n	800b65a <_write_r+0x1e>
 800b654:	682b      	ldr	r3, [r5, #0]
 800b656:	b103      	cbz	r3, 800b65a <_write_r+0x1e>
 800b658:	6023      	str	r3, [r4, #0]
 800b65a:	bd38      	pop	{r3, r4, r5, pc}
 800b65c:	20000f98 	.word	0x20000f98

0800b660 <__errno>:
 800b660:	4b01      	ldr	r3, [pc, #4]	@ (800b668 <__errno+0x8>)
 800b662:	6818      	ldr	r0, [r3, #0]
 800b664:	4770      	bx	lr
 800b666:	bf00      	nop
 800b668:	20000064 	.word	0x20000064

0800b66c <__libc_init_array>:
 800b66c:	b570      	push	{r4, r5, r6, lr}
 800b66e:	4d0d      	ldr	r5, [pc, #52]	@ (800b6a4 <__libc_init_array+0x38>)
 800b670:	4c0d      	ldr	r4, [pc, #52]	@ (800b6a8 <__libc_init_array+0x3c>)
 800b672:	1b64      	subs	r4, r4, r5
 800b674:	10a4      	asrs	r4, r4, #2
 800b676:	2600      	movs	r6, #0
 800b678:	42a6      	cmp	r6, r4
 800b67a:	d109      	bne.n	800b690 <__libc_init_array+0x24>
 800b67c:	4d0b      	ldr	r5, [pc, #44]	@ (800b6ac <__libc_init_array+0x40>)
 800b67e:	4c0c      	ldr	r4, [pc, #48]	@ (800b6b0 <__libc_init_array+0x44>)
 800b680:	f001 febe 	bl	800d400 <_init>
 800b684:	1b64      	subs	r4, r4, r5
 800b686:	10a4      	asrs	r4, r4, #2
 800b688:	2600      	movs	r6, #0
 800b68a:	42a6      	cmp	r6, r4
 800b68c:	d105      	bne.n	800b69a <__libc_init_array+0x2e>
 800b68e:	bd70      	pop	{r4, r5, r6, pc}
 800b690:	f855 3b04 	ldr.w	r3, [r5], #4
 800b694:	4798      	blx	r3
 800b696:	3601      	adds	r6, #1
 800b698:	e7ee      	b.n	800b678 <__libc_init_array+0xc>
 800b69a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b69e:	4798      	blx	r3
 800b6a0:	3601      	adds	r6, #1
 800b6a2:	e7f2      	b.n	800b68a <__libc_init_array+0x1e>
 800b6a4:	0800d884 	.word	0x0800d884
 800b6a8:	0800d884 	.word	0x0800d884
 800b6ac:	0800d884 	.word	0x0800d884
 800b6b0:	0800d888 	.word	0x0800d888

0800b6b4 <__retarget_lock_init_recursive>:
 800b6b4:	4770      	bx	lr

0800b6b6 <__retarget_lock_acquire_recursive>:
 800b6b6:	4770      	bx	lr

0800b6b8 <__retarget_lock_release_recursive>:
 800b6b8:	4770      	bx	lr

0800b6ba <memcpy>:
 800b6ba:	440a      	add	r2, r1
 800b6bc:	4291      	cmp	r1, r2
 800b6be:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6c2:	d100      	bne.n	800b6c6 <memcpy+0xc>
 800b6c4:	4770      	bx	lr
 800b6c6:	b510      	push	{r4, lr}
 800b6c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6d0:	4291      	cmp	r1, r2
 800b6d2:	d1f9      	bne.n	800b6c8 <memcpy+0xe>
 800b6d4:	bd10      	pop	{r4, pc}
	...

0800b6d8 <__assert_func>:
 800b6d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b6da:	4614      	mov	r4, r2
 800b6dc:	461a      	mov	r2, r3
 800b6de:	4b09      	ldr	r3, [pc, #36]	@ (800b704 <__assert_func+0x2c>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4605      	mov	r5, r0
 800b6e4:	68d8      	ldr	r0, [r3, #12]
 800b6e6:	b954      	cbnz	r4, 800b6fe <__assert_func+0x26>
 800b6e8:	4b07      	ldr	r3, [pc, #28]	@ (800b708 <__assert_func+0x30>)
 800b6ea:	461c      	mov	r4, r3
 800b6ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b6f0:	9100      	str	r1, [sp, #0]
 800b6f2:	462b      	mov	r3, r5
 800b6f4:	4905      	ldr	r1, [pc, #20]	@ (800b70c <__assert_func+0x34>)
 800b6f6:	f001 fccb 	bl	800d090 <fiprintf>
 800b6fa:	f001 fd7f 	bl	800d1fc <abort>
 800b6fe:	4b04      	ldr	r3, [pc, #16]	@ (800b710 <__assert_func+0x38>)
 800b700:	e7f4      	b.n	800b6ec <__assert_func+0x14>
 800b702:	bf00      	nop
 800b704:	20000064 	.word	0x20000064
 800b708:	0800d592 	.word	0x0800d592
 800b70c:	0800d564 	.word	0x0800d564
 800b710:	0800d557 	.word	0x0800d557

0800b714 <quorem>:
 800b714:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b718:	6903      	ldr	r3, [r0, #16]
 800b71a:	690c      	ldr	r4, [r1, #16]
 800b71c:	42a3      	cmp	r3, r4
 800b71e:	4607      	mov	r7, r0
 800b720:	db7e      	blt.n	800b820 <quorem+0x10c>
 800b722:	3c01      	subs	r4, #1
 800b724:	f101 0814 	add.w	r8, r1, #20
 800b728:	00a3      	lsls	r3, r4, #2
 800b72a:	f100 0514 	add.w	r5, r0, #20
 800b72e:	9300      	str	r3, [sp, #0]
 800b730:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b734:	9301      	str	r3, [sp, #4]
 800b736:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b73a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b73e:	3301      	adds	r3, #1
 800b740:	429a      	cmp	r2, r3
 800b742:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b746:	fbb2 f6f3 	udiv	r6, r2, r3
 800b74a:	d32e      	bcc.n	800b7aa <quorem+0x96>
 800b74c:	f04f 0a00 	mov.w	sl, #0
 800b750:	46c4      	mov	ip, r8
 800b752:	46ae      	mov	lr, r5
 800b754:	46d3      	mov	fp, sl
 800b756:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b75a:	b298      	uxth	r0, r3
 800b75c:	fb06 a000 	mla	r0, r6, r0, sl
 800b760:	0c02      	lsrs	r2, r0, #16
 800b762:	0c1b      	lsrs	r3, r3, #16
 800b764:	fb06 2303 	mla	r3, r6, r3, r2
 800b768:	f8de 2000 	ldr.w	r2, [lr]
 800b76c:	b280      	uxth	r0, r0
 800b76e:	b292      	uxth	r2, r2
 800b770:	1a12      	subs	r2, r2, r0
 800b772:	445a      	add	r2, fp
 800b774:	f8de 0000 	ldr.w	r0, [lr]
 800b778:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b782:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b786:	b292      	uxth	r2, r2
 800b788:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b78c:	45e1      	cmp	r9, ip
 800b78e:	f84e 2b04 	str.w	r2, [lr], #4
 800b792:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b796:	d2de      	bcs.n	800b756 <quorem+0x42>
 800b798:	9b00      	ldr	r3, [sp, #0]
 800b79a:	58eb      	ldr	r3, [r5, r3]
 800b79c:	b92b      	cbnz	r3, 800b7aa <quorem+0x96>
 800b79e:	9b01      	ldr	r3, [sp, #4]
 800b7a0:	3b04      	subs	r3, #4
 800b7a2:	429d      	cmp	r5, r3
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	d32f      	bcc.n	800b808 <quorem+0xf4>
 800b7a8:	613c      	str	r4, [r7, #16]
 800b7aa:	4638      	mov	r0, r7
 800b7ac:	f001 f97a 	bl	800caa4 <__mcmp>
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	db25      	blt.n	800b800 <quorem+0xec>
 800b7b4:	4629      	mov	r1, r5
 800b7b6:	2000      	movs	r0, #0
 800b7b8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b7bc:	f8d1 c000 	ldr.w	ip, [r1]
 800b7c0:	fa1f fe82 	uxth.w	lr, r2
 800b7c4:	fa1f f38c 	uxth.w	r3, ip
 800b7c8:	eba3 030e 	sub.w	r3, r3, lr
 800b7cc:	4403      	add	r3, r0
 800b7ce:	0c12      	lsrs	r2, r2, #16
 800b7d0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b7d4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7de:	45c1      	cmp	r9, r8
 800b7e0:	f841 3b04 	str.w	r3, [r1], #4
 800b7e4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b7e8:	d2e6      	bcs.n	800b7b8 <quorem+0xa4>
 800b7ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7f2:	b922      	cbnz	r2, 800b7fe <quorem+0xea>
 800b7f4:	3b04      	subs	r3, #4
 800b7f6:	429d      	cmp	r5, r3
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	d30b      	bcc.n	800b814 <quorem+0x100>
 800b7fc:	613c      	str	r4, [r7, #16]
 800b7fe:	3601      	adds	r6, #1
 800b800:	4630      	mov	r0, r6
 800b802:	b003      	add	sp, #12
 800b804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b808:	6812      	ldr	r2, [r2, #0]
 800b80a:	3b04      	subs	r3, #4
 800b80c:	2a00      	cmp	r2, #0
 800b80e:	d1cb      	bne.n	800b7a8 <quorem+0x94>
 800b810:	3c01      	subs	r4, #1
 800b812:	e7c6      	b.n	800b7a2 <quorem+0x8e>
 800b814:	6812      	ldr	r2, [r2, #0]
 800b816:	3b04      	subs	r3, #4
 800b818:	2a00      	cmp	r2, #0
 800b81a:	d1ef      	bne.n	800b7fc <quorem+0xe8>
 800b81c:	3c01      	subs	r4, #1
 800b81e:	e7ea      	b.n	800b7f6 <quorem+0xe2>
 800b820:	2000      	movs	r0, #0
 800b822:	e7ee      	b.n	800b802 <quorem+0xee>
 800b824:	0000      	movs	r0, r0
	...

0800b828 <_dtoa_r>:
 800b828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b82c:	69c7      	ldr	r7, [r0, #28]
 800b82e:	b099      	sub	sp, #100	@ 0x64
 800b830:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b834:	ec55 4b10 	vmov	r4, r5, d0
 800b838:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b83a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b83c:	4683      	mov	fp, r0
 800b83e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b840:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b842:	b97f      	cbnz	r7, 800b864 <_dtoa_r+0x3c>
 800b844:	2010      	movs	r0, #16
 800b846:	f000 fdfd 	bl	800c444 <malloc>
 800b84a:	4602      	mov	r2, r0
 800b84c:	f8cb 001c 	str.w	r0, [fp, #28]
 800b850:	b920      	cbnz	r0, 800b85c <_dtoa_r+0x34>
 800b852:	4ba7      	ldr	r3, [pc, #668]	@ (800baf0 <_dtoa_r+0x2c8>)
 800b854:	21ef      	movs	r1, #239	@ 0xef
 800b856:	48a7      	ldr	r0, [pc, #668]	@ (800baf4 <_dtoa_r+0x2cc>)
 800b858:	f7ff ff3e 	bl	800b6d8 <__assert_func>
 800b85c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b860:	6007      	str	r7, [r0, #0]
 800b862:	60c7      	str	r7, [r0, #12]
 800b864:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b868:	6819      	ldr	r1, [r3, #0]
 800b86a:	b159      	cbz	r1, 800b884 <_dtoa_r+0x5c>
 800b86c:	685a      	ldr	r2, [r3, #4]
 800b86e:	604a      	str	r2, [r1, #4]
 800b870:	2301      	movs	r3, #1
 800b872:	4093      	lsls	r3, r2
 800b874:	608b      	str	r3, [r1, #8]
 800b876:	4658      	mov	r0, fp
 800b878:	f000 feda 	bl	800c630 <_Bfree>
 800b87c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b880:	2200      	movs	r2, #0
 800b882:	601a      	str	r2, [r3, #0]
 800b884:	1e2b      	subs	r3, r5, #0
 800b886:	bfb9      	ittee	lt
 800b888:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b88c:	9303      	strlt	r3, [sp, #12]
 800b88e:	2300      	movge	r3, #0
 800b890:	6033      	strge	r3, [r6, #0]
 800b892:	9f03      	ldr	r7, [sp, #12]
 800b894:	4b98      	ldr	r3, [pc, #608]	@ (800baf8 <_dtoa_r+0x2d0>)
 800b896:	bfbc      	itt	lt
 800b898:	2201      	movlt	r2, #1
 800b89a:	6032      	strlt	r2, [r6, #0]
 800b89c:	43bb      	bics	r3, r7
 800b89e:	d112      	bne.n	800b8c6 <_dtoa_r+0x9e>
 800b8a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b8a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b8a6:	6013      	str	r3, [r2, #0]
 800b8a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b8ac:	4323      	orrs	r3, r4
 800b8ae:	f000 854d 	beq.w	800c34c <_dtoa_r+0xb24>
 800b8b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b8b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bb0c <_dtoa_r+0x2e4>
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	f000 854f 	beq.w	800c35c <_dtoa_r+0xb34>
 800b8be:	f10a 0303 	add.w	r3, sl, #3
 800b8c2:	f000 bd49 	b.w	800c358 <_dtoa_r+0xb30>
 800b8c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	ec51 0b17 	vmov	r0, r1, d7
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b8d6:	f7f5 f8f7 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8da:	4680      	mov	r8, r0
 800b8dc:	b158      	cbz	r0, 800b8f6 <_dtoa_r+0xce>
 800b8de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	6013      	str	r3, [r2, #0]
 800b8e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b8e6:	b113      	cbz	r3, 800b8ee <_dtoa_r+0xc6>
 800b8e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b8ea:	4b84      	ldr	r3, [pc, #528]	@ (800bafc <_dtoa_r+0x2d4>)
 800b8ec:	6013      	str	r3, [r2, #0]
 800b8ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bb10 <_dtoa_r+0x2e8>
 800b8f2:	f000 bd33 	b.w	800c35c <_dtoa_r+0xb34>
 800b8f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b8fa:	aa16      	add	r2, sp, #88	@ 0x58
 800b8fc:	a917      	add	r1, sp, #92	@ 0x5c
 800b8fe:	4658      	mov	r0, fp
 800b900:	f001 f980 	bl	800cc04 <__d2b>
 800b904:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b908:	4681      	mov	r9, r0
 800b90a:	2e00      	cmp	r6, #0
 800b90c:	d077      	beq.n	800b9fe <_dtoa_r+0x1d6>
 800b90e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b910:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b918:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b91c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b920:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b924:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b928:	4619      	mov	r1, r3
 800b92a:	2200      	movs	r2, #0
 800b92c:	4b74      	ldr	r3, [pc, #464]	@ (800bb00 <_dtoa_r+0x2d8>)
 800b92e:	f7f4 fcab 	bl	8000288 <__aeabi_dsub>
 800b932:	a369      	add	r3, pc, #420	@ (adr r3, 800bad8 <_dtoa_r+0x2b0>)
 800b934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b938:	f7f4 fe5e 	bl	80005f8 <__aeabi_dmul>
 800b93c:	a368      	add	r3, pc, #416	@ (adr r3, 800bae0 <_dtoa_r+0x2b8>)
 800b93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b942:	f7f4 fca3 	bl	800028c <__adddf3>
 800b946:	4604      	mov	r4, r0
 800b948:	4630      	mov	r0, r6
 800b94a:	460d      	mov	r5, r1
 800b94c:	f7f4 fdea 	bl	8000524 <__aeabi_i2d>
 800b950:	a365      	add	r3, pc, #404	@ (adr r3, 800bae8 <_dtoa_r+0x2c0>)
 800b952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b956:	f7f4 fe4f 	bl	80005f8 <__aeabi_dmul>
 800b95a:	4602      	mov	r2, r0
 800b95c:	460b      	mov	r3, r1
 800b95e:	4620      	mov	r0, r4
 800b960:	4629      	mov	r1, r5
 800b962:	f7f4 fc93 	bl	800028c <__adddf3>
 800b966:	4604      	mov	r4, r0
 800b968:	460d      	mov	r5, r1
 800b96a:	f7f5 f8f5 	bl	8000b58 <__aeabi_d2iz>
 800b96e:	2200      	movs	r2, #0
 800b970:	4607      	mov	r7, r0
 800b972:	2300      	movs	r3, #0
 800b974:	4620      	mov	r0, r4
 800b976:	4629      	mov	r1, r5
 800b978:	f7f5 f8b0 	bl	8000adc <__aeabi_dcmplt>
 800b97c:	b140      	cbz	r0, 800b990 <_dtoa_r+0x168>
 800b97e:	4638      	mov	r0, r7
 800b980:	f7f4 fdd0 	bl	8000524 <__aeabi_i2d>
 800b984:	4622      	mov	r2, r4
 800b986:	462b      	mov	r3, r5
 800b988:	f7f5 f89e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b98c:	b900      	cbnz	r0, 800b990 <_dtoa_r+0x168>
 800b98e:	3f01      	subs	r7, #1
 800b990:	2f16      	cmp	r7, #22
 800b992:	d851      	bhi.n	800ba38 <_dtoa_r+0x210>
 800b994:	4b5b      	ldr	r3, [pc, #364]	@ (800bb04 <_dtoa_r+0x2dc>)
 800b996:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9a2:	f7f5 f89b 	bl	8000adc <__aeabi_dcmplt>
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	d048      	beq.n	800ba3c <_dtoa_r+0x214>
 800b9aa:	3f01      	subs	r7, #1
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	9312      	str	r3, [sp, #72]	@ 0x48
 800b9b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b9b2:	1b9b      	subs	r3, r3, r6
 800b9b4:	1e5a      	subs	r2, r3, #1
 800b9b6:	bf44      	itt	mi
 800b9b8:	f1c3 0801 	rsbmi	r8, r3, #1
 800b9bc:	2300      	movmi	r3, #0
 800b9be:	9208      	str	r2, [sp, #32]
 800b9c0:	bf54      	ite	pl
 800b9c2:	f04f 0800 	movpl.w	r8, #0
 800b9c6:	9308      	strmi	r3, [sp, #32]
 800b9c8:	2f00      	cmp	r7, #0
 800b9ca:	db39      	blt.n	800ba40 <_dtoa_r+0x218>
 800b9cc:	9b08      	ldr	r3, [sp, #32]
 800b9ce:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b9d0:	443b      	add	r3, r7
 800b9d2:	9308      	str	r3, [sp, #32]
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9da:	2b09      	cmp	r3, #9
 800b9dc:	d864      	bhi.n	800baa8 <_dtoa_r+0x280>
 800b9de:	2b05      	cmp	r3, #5
 800b9e0:	bfc4      	itt	gt
 800b9e2:	3b04      	subgt	r3, #4
 800b9e4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b9e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9e8:	f1a3 0302 	sub.w	r3, r3, #2
 800b9ec:	bfcc      	ite	gt
 800b9ee:	2400      	movgt	r4, #0
 800b9f0:	2401      	movle	r4, #1
 800b9f2:	2b03      	cmp	r3, #3
 800b9f4:	d863      	bhi.n	800babe <_dtoa_r+0x296>
 800b9f6:	e8df f003 	tbb	[pc, r3]
 800b9fa:	372a      	.short	0x372a
 800b9fc:	5535      	.short	0x5535
 800b9fe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ba02:	441e      	add	r6, r3
 800ba04:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ba08:	2b20      	cmp	r3, #32
 800ba0a:	bfc1      	itttt	gt
 800ba0c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ba10:	409f      	lslgt	r7, r3
 800ba12:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ba16:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ba1a:	bfd6      	itet	le
 800ba1c:	f1c3 0320 	rsble	r3, r3, #32
 800ba20:	ea47 0003 	orrgt.w	r0, r7, r3
 800ba24:	fa04 f003 	lslle.w	r0, r4, r3
 800ba28:	f7f4 fd6c 	bl	8000504 <__aeabi_ui2d>
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ba32:	3e01      	subs	r6, #1
 800ba34:	9214      	str	r2, [sp, #80]	@ 0x50
 800ba36:	e777      	b.n	800b928 <_dtoa_r+0x100>
 800ba38:	2301      	movs	r3, #1
 800ba3a:	e7b8      	b.n	800b9ae <_dtoa_r+0x186>
 800ba3c:	9012      	str	r0, [sp, #72]	@ 0x48
 800ba3e:	e7b7      	b.n	800b9b0 <_dtoa_r+0x188>
 800ba40:	427b      	negs	r3, r7
 800ba42:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba44:	2300      	movs	r3, #0
 800ba46:	eba8 0807 	sub.w	r8, r8, r7
 800ba4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba4c:	e7c4      	b.n	800b9d8 <_dtoa_r+0x1b0>
 800ba4e:	2300      	movs	r3, #0
 800ba50:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	dc35      	bgt.n	800bac4 <_dtoa_r+0x29c>
 800ba58:	2301      	movs	r3, #1
 800ba5a:	9300      	str	r3, [sp, #0]
 800ba5c:	9307      	str	r3, [sp, #28]
 800ba5e:	461a      	mov	r2, r3
 800ba60:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba62:	e00b      	b.n	800ba7c <_dtoa_r+0x254>
 800ba64:	2301      	movs	r3, #1
 800ba66:	e7f3      	b.n	800ba50 <_dtoa_r+0x228>
 800ba68:	2300      	movs	r3, #0
 800ba6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba6e:	18fb      	adds	r3, r7, r3
 800ba70:	9300      	str	r3, [sp, #0]
 800ba72:	3301      	adds	r3, #1
 800ba74:	2b01      	cmp	r3, #1
 800ba76:	9307      	str	r3, [sp, #28]
 800ba78:	bfb8      	it	lt
 800ba7a:	2301      	movlt	r3, #1
 800ba7c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ba80:	2100      	movs	r1, #0
 800ba82:	2204      	movs	r2, #4
 800ba84:	f102 0514 	add.w	r5, r2, #20
 800ba88:	429d      	cmp	r5, r3
 800ba8a:	d91f      	bls.n	800bacc <_dtoa_r+0x2a4>
 800ba8c:	6041      	str	r1, [r0, #4]
 800ba8e:	4658      	mov	r0, fp
 800ba90:	f000 fd8e 	bl	800c5b0 <_Balloc>
 800ba94:	4682      	mov	sl, r0
 800ba96:	2800      	cmp	r0, #0
 800ba98:	d13c      	bne.n	800bb14 <_dtoa_r+0x2ec>
 800ba9a:	4b1b      	ldr	r3, [pc, #108]	@ (800bb08 <_dtoa_r+0x2e0>)
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	f240 11af 	movw	r1, #431	@ 0x1af
 800baa2:	e6d8      	b.n	800b856 <_dtoa_r+0x2e>
 800baa4:	2301      	movs	r3, #1
 800baa6:	e7e0      	b.n	800ba6a <_dtoa_r+0x242>
 800baa8:	2401      	movs	r4, #1
 800baaa:	2300      	movs	r3, #0
 800baac:	9309      	str	r3, [sp, #36]	@ 0x24
 800baae:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bab0:	f04f 33ff 	mov.w	r3, #4294967295
 800bab4:	9300      	str	r3, [sp, #0]
 800bab6:	9307      	str	r3, [sp, #28]
 800bab8:	2200      	movs	r2, #0
 800baba:	2312      	movs	r3, #18
 800babc:	e7d0      	b.n	800ba60 <_dtoa_r+0x238>
 800babe:	2301      	movs	r3, #1
 800bac0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bac2:	e7f5      	b.n	800bab0 <_dtoa_r+0x288>
 800bac4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bac6:	9300      	str	r3, [sp, #0]
 800bac8:	9307      	str	r3, [sp, #28]
 800baca:	e7d7      	b.n	800ba7c <_dtoa_r+0x254>
 800bacc:	3101      	adds	r1, #1
 800bace:	0052      	lsls	r2, r2, #1
 800bad0:	e7d8      	b.n	800ba84 <_dtoa_r+0x25c>
 800bad2:	bf00      	nop
 800bad4:	f3af 8000 	nop.w
 800bad8:	636f4361 	.word	0x636f4361
 800badc:	3fd287a7 	.word	0x3fd287a7
 800bae0:	8b60c8b3 	.word	0x8b60c8b3
 800bae4:	3fc68a28 	.word	0x3fc68a28
 800bae8:	509f79fb 	.word	0x509f79fb
 800baec:	3fd34413 	.word	0x3fd34413
 800baf0:	0800d4b4 	.word	0x0800d4b4
 800baf4:	0800d5a0 	.word	0x0800d5a0
 800baf8:	7ff00000 	.word	0x7ff00000
 800bafc:	0800d534 	.word	0x0800d534
 800bb00:	3ff80000 	.word	0x3ff80000
 800bb04:	0800d698 	.word	0x0800d698
 800bb08:	0800d5f8 	.word	0x0800d5f8
 800bb0c:	0800d59c 	.word	0x0800d59c
 800bb10:	0800d533 	.word	0x0800d533
 800bb14:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bb18:	6018      	str	r0, [r3, #0]
 800bb1a:	9b07      	ldr	r3, [sp, #28]
 800bb1c:	2b0e      	cmp	r3, #14
 800bb1e:	f200 80a4 	bhi.w	800bc6a <_dtoa_r+0x442>
 800bb22:	2c00      	cmp	r4, #0
 800bb24:	f000 80a1 	beq.w	800bc6a <_dtoa_r+0x442>
 800bb28:	2f00      	cmp	r7, #0
 800bb2a:	dd33      	ble.n	800bb94 <_dtoa_r+0x36c>
 800bb2c:	4bad      	ldr	r3, [pc, #692]	@ (800bde4 <_dtoa_r+0x5bc>)
 800bb2e:	f007 020f 	and.w	r2, r7, #15
 800bb32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb36:	ed93 7b00 	vldr	d7, [r3]
 800bb3a:	05f8      	lsls	r0, r7, #23
 800bb3c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bb40:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bb44:	d516      	bpl.n	800bb74 <_dtoa_r+0x34c>
 800bb46:	4ba8      	ldr	r3, [pc, #672]	@ (800bde8 <_dtoa_r+0x5c0>)
 800bb48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb50:	f7f4 fe7c 	bl	800084c <__aeabi_ddiv>
 800bb54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb58:	f004 040f 	and.w	r4, r4, #15
 800bb5c:	2603      	movs	r6, #3
 800bb5e:	4da2      	ldr	r5, [pc, #648]	@ (800bde8 <_dtoa_r+0x5c0>)
 800bb60:	b954      	cbnz	r4, 800bb78 <_dtoa_r+0x350>
 800bb62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb6a:	f7f4 fe6f 	bl	800084c <__aeabi_ddiv>
 800bb6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb72:	e028      	b.n	800bbc6 <_dtoa_r+0x39e>
 800bb74:	2602      	movs	r6, #2
 800bb76:	e7f2      	b.n	800bb5e <_dtoa_r+0x336>
 800bb78:	07e1      	lsls	r1, r4, #31
 800bb7a:	d508      	bpl.n	800bb8e <_dtoa_r+0x366>
 800bb7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb80:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bb84:	f7f4 fd38 	bl	80005f8 <__aeabi_dmul>
 800bb88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb8c:	3601      	adds	r6, #1
 800bb8e:	1064      	asrs	r4, r4, #1
 800bb90:	3508      	adds	r5, #8
 800bb92:	e7e5      	b.n	800bb60 <_dtoa_r+0x338>
 800bb94:	f000 80d2 	beq.w	800bd3c <_dtoa_r+0x514>
 800bb98:	427c      	negs	r4, r7
 800bb9a:	4b92      	ldr	r3, [pc, #584]	@ (800bde4 <_dtoa_r+0x5bc>)
 800bb9c:	4d92      	ldr	r5, [pc, #584]	@ (800bde8 <_dtoa_r+0x5c0>)
 800bb9e:	f004 020f 	and.w	r2, r4, #15
 800bba2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbaa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbae:	f7f4 fd23 	bl	80005f8 <__aeabi_dmul>
 800bbb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbb6:	1124      	asrs	r4, r4, #4
 800bbb8:	2300      	movs	r3, #0
 800bbba:	2602      	movs	r6, #2
 800bbbc:	2c00      	cmp	r4, #0
 800bbbe:	f040 80b2 	bne.w	800bd26 <_dtoa_r+0x4fe>
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d1d3      	bne.n	800bb6e <_dtoa_r+0x346>
 800bbc6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bbc8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	f000 80b7 	beq.w	800bd40 <_dtoa_r+0x518>
 800bbd2:	4b86      	ldr	r3, [pc, #536]	@ (800bdec <_dtoa_r+0x5c4>)
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	4629      	mov	r1, r5
 800bbda:	f7f4 ff7f 	bl	8000adc <__aeabi_dcmplt>
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	f000 80ae 	beq.w	800bd40 <_dtoa_r+0x518>
 800bbe4:	9b07      	ldr	r3, [sp, #28]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	f000 80aa 	beq.w	800bd40 <_dtoa_r+0x518>
 800bbec:	9b00      	ldr	r3, [sp, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	dd37      	ble.n	800bc62 <_dtoa_r+0x43a>
 800bbf2:	1e7b      	subs	r3, r7, #1
 800bbf4:	9304      	str	r3, [sp, #16]
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	4b7d      	ldr	r3, [pc, #500]	@ (800bdf0 <_dtoa_r+0x5c8>)
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	4629      	mov	r1, r5
 800bbfe:	f7f4 fcfb 	bl	80005f8 <__aeabi_dmul>
 800bc02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc06:	9c00      	ldr	r4, [sp, #0]
 800bc08:	3601      	adds	r6, #1
 800bc0a:	4630      	mov	r0, r6
 800bc0c:	f7f4 fc8a 	bl	8000524 <__aeabi_i2d>
 800bc10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc14:	f7f4 fcf0 	bl	80005f8 <__aeabi_dmul>
 800bc18:	4b76      	ldr	r3, [pc, #472]	@ (800bdf4 <_dtoa_r+0x5cc>)
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f7f4 fb36 	bl	800028c <__adddf3>
 800bc20:	4605      	mov	r5, r0
 800bc22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bc26:	2c00      	cmp	r4, #0
 800bc28:	f040 808d 	bne.w	800bd46 <_dtoa_r+0x51e>
 800bc2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc30:	4b71      	ldr	r3, [pc, #452]	@ (800bdf8 <_dtoa_r+0x5d0>)
 800bc32:	2200      	movs	r2, #0
 800bc34:	f7f4 fb28 	bl	8000288 <__aeabi_dsub>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc40:	462a      	mov	r2, r5
 800bc42:	4633      	mov	r3, r6
 800bc44:	f7f4 ff68 	bl	8000b18 <__aeabi_dcmpgt>
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	f040 828b 	bne.w	800c164 <_dtoa_r+0x93c>
 800bc4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc52:	462a      	mov	r2, r5
 800bc54:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bc58:	f7f4 ff40 	bl	8000adc <__aeabi_dcmplt>
 800bc5c:	2800      	cmp	r0, #0
 800bc5e:	f040 8128 	bne.w	800beb2 <_dtoa_r+0x68a>
 800bc62:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bc66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bc6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	f2c0 815a 	blt.w	800bf26 <_dtoa_r+0x6fe>
 800bc72:	2f0e      	cmp	r7, #14
 800bc74:	f300 8157 	bgt.w	800bf26 <_dtoa_r+0x6fe>
 800bc78:	4b5a      	ldr	r3, [pc, #360]	@ (800bde4 <_dtoa_r+0x5bc>)
 800bc7a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bc7e:	ed93 7b00 	vldr	d7, [r3]
 800bc82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	ed8d 7b00 	vstr	d7, [sp]
 800bc8a:	da03      	bge.n	800bc94 <_dtoa_r+0x46c>
 800bc8c:	9b07      	ldr	r3, [sp, #28]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	f340 8101 	ble.w	800be96 <_dtoa_r+0x66e>
 800bc94:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bc98:	4656      	mov	r6, sl
 800bc9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc9e:	4620      	mov	r0, r4
 800bca0:	4629      	mov	r1, r5
 800bca2:	f7f4 fdd3 	bl	800084c <__aeabi_ddiv>
 800bca6:	f7f4 ff57 	bl	8000b58 <__aeabi_d2iz>
 800bcaa:	4680      	mov	r8, r0
 800bcac:	f7f4 fc3a 	bl	8000524 <__aeabi_i2d>
 800bcb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcb4:	f7f4 fca0 	bl	80005f8 <__aeabi_dmul>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	460b      	mov	r3, r1
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	4629      	mov	r1, r5
 800bcc0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bcc4:	f7f4 fae0 	bl	8000288 <__aeabi_dsub>
 800bcc8:	f806 4b01 	strb.w	r4, [r6], #1
 800bccc:	9d07      	ldr	r5, [sp, #28]
 800bcce:	eba6 040a 	sub.w	r4, r6, sl
 800bcd2:	42a5      	cmp	r5, r4
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	f040 8117 	bne.w	800bf0a <_dtoa_r+0x6e2>
 800bcdc:	f7f4 fad6 	bl	800028c <__adddf3>
 800bce0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bce4:	4604      	mov	r4, r0
 800bce6:	460d      	mov	r5, r1
 800bce8:	f7f4 ff16 	bl	8000b18 <__aeabi_dcmpgt>
 800bcec:	2800      	cmp	r0, #0
 800bcee:	f040 80f9 	bne.w	800bee4 <_dtoa_r+0x6bc>
 800bcf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	4629      	mov	r1, r5
 800bcfa:	f7f4 fee5 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcfe:	b118      	cbz	r0, 800bd08 <_dtoa_r+0x4e0>
 800bd00:	f018 0f01 	tst.w	r8, #1
 800bd04:	f040 80ee 	bne.w	800bee4 <_dtoa_r+0x6bc>
 800bd08:	4649      	mov	r1, r9
 800bd0a:	4658      	mov	r0, fp
 800bd0c:	f000 fc90 	bl	800c630 <_Bfree>
 800bd10:	2300      	movs	r3, #0
 800bd12:	7033      	strb	r3, [r6, #0]
 800bd14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd16:	3701      	adds	r7, #1
 800bd18:	601f      	str	r7, [r3, #0]
 800bd1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	f000 831d 	beq.w	800c35c <_dtoa_r+0xb34>
 800bd22:	601e      	str	r6, [r3, #0]
 800bd24:	e31a      	b.n	800c35c <_dtoa_r+0xb34>
 800bd26:	07e2      	lsls	r2, r4, #31
 800bd28:	d505      	bpl.n	800bd36 <_dtoa_r+0x50e>
 800bd2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd2e:	f7f4 fc63 	bl	80005f8 <__aeabi_dmul>
 800bd32:	3601      	adds	r6, #1
 800bd34:	2301      	movs	r3, #1
 800bd36:	1064      	asrs	r4, r4, #1
 800bd38:	3508      	adds	r5, #8
 800bd3a:	e73f      	b.n	800bbbc <_dtoa_r+0x394>
 800bd3c:	2602      	movs	r6, #2
 800bd3e:	e742      	b.n	800bbc6 <_dtoa_r+0x39e>
 800bd40:	9c07      	ldr	r4, [sp, #28]
 800bd42:	9704      	str	r7, [sp, #16]
 800bd44:	e761      	b.n	800bc0a <_dtoa_r+0x3e2>
 800bd46:	4b27      	ldr	r3, [pc, #156]	@ (800bde4 <_dtoa_r+0x5bc>)
 800bd48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bd4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd4e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd52:	4454      	add	r4, sl
 800bd54:	2900      	cmp	r1, #0
 800bd56:	d053      	beq.n	800be00 <_dtoa_r+0x5d8>
 800bd58:	4928      	ldr	r1, [pc, #160]	@ (800bdfc <_dtoa_r+0x5d4>)
 800bd5a:	2000      	movs	r0, #0
 800bd5c:	f7f4 fd76 	bl	800084c <__aeabi_ddiv>
 800bd60:	4633      	mov	r3, r6
 800bd62:	462a      	mov	r2, r5
 800bd64:	f7f4 fa90 	bl	8000288 <__aeabi_dsub>
 800bd68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd6c:	4656      	mov	r6, sl
 800bd6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd72:	f7f4 fef1 	bl	8000b58 <__aeabi_d2iz>
 800bd76:	4605      	mov	r5, r0
 800bd78:	f7f4 fbd4 	bl	8000524 <__aeabi_i2d>
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	460b      	mov	r3, r1
 800bd80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd84:	f7f4 fa80 	bl	8000288 <__aeabi_dsub>
 800bd88:	3530      	adds	r5, #48	@ 0x30
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd92:	f806 5b01 	strb.w	r5, [r6], #1
 800bd96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bd9a:	f7f4 fe9f 	bl	8000adc <__aeabi_dcmplt>
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	d171      	bne.n	800be86 <_dtoa_r+0x65e>
 800bda2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bda6:	4911      	ldr	r1, [pc, #68]	@ (800bdec <_dtoa_r+0x5c4>)
 800bda8:	2000      	movs	r0, #0
 800bdaa:	f7f4 fa6d 	bl	8000288 <__aeabi_dsub>
 800bdae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bdb2:	f7f4 fe93 	bl	8000adc <__aeabi_dcmplt>
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	f040 8095 	bne.w	800bee6 <_dtoa_r+0x6be>
 800bdbc:	42a6      	cmp	r6, r4
 800bdbe:	f43f af50 	beq.w	800bc62 <_dtoa_r+0x43a>
 800bdc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bdc6:	4b0a      	ldr	r3, [pc, #40]	@ (800bdf0 <_dtoa_r+0x5c8>)
 800bdc8:	2200      	movs	r2, #0
 800bdca:	f7f4 fc15 	bl	80005f8 <__aeabi_dmul>
 800bdce:	4b08      	ldr	r3, [pc, #32]	@ (800bdf0 <_dtoa_r+0x5c8>)
 800bdd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdda:	f7f4 fc0d 	bl	80005f8 <__aeabi_dmul>
 800bdde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bde2:	e7c4      	b.n	800bd6e <_dtoa_r+0x546>
 800bde4:	0800d698 	.word	0x0800d698
 800bde8:	0800d670 	.word	0x0800d670
 800bdec:	3ff00000 	.word	0x3ff00000
 800bdf0:	40240000 	.word	0x40240000
 800bdf4:	401c0000 	.word	0x401c0000
 800bdf8:	40140000 	.word	0x40140000
 800bdfc:	3fe00000 	.word	0x3fe00000
 800be00:	4631      	mov	r1, r6
 800be02:	4628      	mov	r0, r5
 800be04:	f7f4 fbf8 	bl	80005f8 <__aeabi_dmul>
 800be08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be0c:	9415      	str	r4, [sp, #84]	@ 0x54
 800be0e:	4656      	mov	r6, sl
 800be10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be14:	f7f4 fea0 	bl	8000b58 <__aeabi_d2iz>
 800be18:	4605      	mov	r5, r0
 800be1a:	f7f4 fb83 	bl	8000524 <__aeabi_i2d>
 800be1e:	4602      	mov	r2, r0
 800be20:	460b      	mov	r3, r1
 800be22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be26:	f7f4 fa2f 	bl	8000288 <__aeabi_dsub>
 800be2a:	3530      	adds	r5, #48	@ 0x30
 800be2c:	f806 5b01 	strb.w	r5, [r6], #1
 800be30:	4602      	mov	r2, r0
 800be32:	460b      	mov	r3, r1
 800be34:	42a6      	cmp	r6, r4
 800be36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be3a:	f04f 0200 	mov.w	r2, #0
 800be3e:	d124      	bne.n	800be8a <_dtoa_r+0x662>
 800be40:	4bac      	ldr	r3, [pc, #688]	@ (800c0f4 <_dtoa_r+0x8cc>)
 800be42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800be46:	f7f4 fa21 	bl	800028c <__adddf3>
 800be4a:	4602      	mov	r2, r0
 800be4c:	460b      	mov	r3, r1
 800be4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be52:	f7f4 fe61 	bl	8000b18 <__aeabi_dcmpgt>
 800be56:	2800      	cmp	r0, #0
 800be58:	d145      	bne.n	800bee6 <_dtoa_r+0x6be>
 800be5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be5e:	49a5      	ldr	r1, [pc, #660]	@ (800c0f4 <_dtoa_r+0x8cc>)
 800be60:	2000      	movs	r0, #0
 800be62:	f7f4 fa11 	bl	8000288 <__aeabi_dsub>
 800be66:	4602      	mov	r2, r0
 800be68:	460b      	mov	r3, r1
 800be6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be6e:	f7f4 fe35 	bl	8000adc <__aeabi_dcmplt>
 800be72:	2800      	cmp	r0, #0
 800be74:	f43f aef5 	beq.w	800bc62 <_dtoa_r+0x43a>
 800be78:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800be7a:	1e73      	subs	r3, r6, #1
 800be7c:	9315      	str	r3, [sp, #84]	@ 0x54
 800be7e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800be82:	2b30      	cmp	r3, #48	@ 0x30
 800be84:	d0f8      	beq.n	800be78 <_dtoa_r+0x650>
 800be86:	9f04      	ldr	r7, [sp, #16]
 800be88:	e73e      	b.n	800bd08 <_dtoa_r+0x4e0>
 800be8a:	4b9b      	ldr	r3, [pc, #620]	@ (800c0f8 <_dtoa_r+0x8d0>)
 800be8c:	f7f4 fbb4 	bl	80005f8 <__aeabi_dmul>
 800be90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be94:	e7bc      	b.n	800be10 <_dtoa_r+0x5e8>
 800be96:	d10c      	bne.n	800beb2 <_dtoa_r+0x68a>
 800be98:	4b98      	ldr	r3, [pc, #608]	@ (800c0fc <_dtoa_r+0x8d4>)
 800be9a:	2200      	movs	r2, #0
 800be9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bea0:	f7f4 fbaa 	bl	80005f8 <__aeabi_dmul>
 800bea4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bea8:	f7f4 fe2c 	bl	8000b04 <__aeabi_dcmpge>
 800beac:	2800      	cmp	r0, #0
 800beae:	f000 8157 	beq.w	800c160 <_dtoa_r+0x938>
 800beb2:	2400      	movs	r4, #0
 800beb4:	4625      	mov	r5, r4
 800beb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800beb8:	43db      	mvns	r3, r3
 800beba:	9304      	str	r3, [sp, #16]
 800bebc:	4656      	mov	r6, sl
 800bebe:	2700      	movs	r7, #0
 800bec0:	4621      	mov	r1, r4
 800bec2:	4658      	mov	r0, fp
 800bec4:	f000 fbb4 	bl	800c630 <_Bfree>
 800bec8:	2d00      	cmp	r5, #0
 800beca:	d0dc      	beq.n	800be86 <_dtoa_r+0x65e>
 800becc:	b12f      	cbz	r7, 800beda <_dtoa_r+0x6b2>
 800bece:	42af      	cmp	r7, r5
 800bed0:	d003      	beq.n	800beda <_dtoa_r+0x6b2>
 800bed2:	4639      	mov	r1, r7
 800bed4:	4658      	mov	r0, fp
 800bed6:	f000 fbab 	bl	800c630 <_Bfree>
 800beda:	4629      	mov	r1, r5
 800bedc:	4658      	mov	r0, fp
 800bede:	f000 fba7 	bl	800c630 <_Bfree>
 800bee2:	e7d0      	b.n	800be86 <_dtoa_r+0x65e>
 800bee4:	9704      	str	r7, [sp, #16]
 800bee6:	4633      	mov	r3, r6
 800bee8:	461e      	mov	r6, r3
 800beea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800beee:	2a39      	cmp	r2, #57	@ 0x39
 800bef0:	d107      	bne.n	800bf02 <_dtoa_r+0x6da>
 800bef2:	459a      	cmp	sl, r3
 800bef4:	d1f8      	bne.n	800bee8 <_dtoa_r+0x6c0>
 800bef6:	9a04      	ldr	r2, [sp, #16]
 800bef8:	3201      	adds	r2, #1
 800befa:	9204      	str	r2, [sp, #16]
 800befc:	2230      	movs	r2, #48	@ 0x30
 800befe:	f88a 2000 	strb.w	r2, [sl]
 800bf02:	781a      	ldrb	r2, [r3, #0]
 800bf04:	3201      	adds	r2, #1
 800bf06:	701a      	strb	r2, [r3, #0]
 800bf08:	e7bd      	b.n	800be86 <_dtoa_r+0x65e>
 800bf0a:	4b7b      	ldr	r3, [pc, #492]	@ (800c0f8 <_dtoa_r+0x8d0>)
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	f7f4 fb73 	bl	80005f8 <__aeabi_dmul>
 800bf12:	2200      	movs	r2, #0
 800bf14:	2300      	movs	r3, #0
 800bf16:	4604      	mov	r4, r0
 800bf18:	460d      	mov	r5, r1
 800bf1a:	f7f4 fdd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	f43f aebb 	beq.w	800bc9a <_dtoa_r+0x472>
 800bf24:	e6f0      	b.n	800bd08 <_dtoa_r+0x4e0>
 800bf26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bf28:	2a00      	cmp	r2, #0
 800bf2a:	f000 80db 	beq.w	800c0e4 <_dtoa_r+0x8bc>
 800bf2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf30:	2a01      	cmp	r2, #1
 800bf32:	f300 80bf 	bgt.w	800c0b4 <_dtoa_r+0x88c>
 800bf36:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bf38:	2a00      	cmp	r2, #0
 800bf3a:	f000 80b7 	beq.w	800c0ac <_dtoa_r+0x884>
 800bf3e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bf42:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bf44:	4646      	mov	r6, r8
 800bf46:	9a08      	ldr	r2, [sp, #32]
 800bf48:	2101      	movs	r1, #1
 800bf4a:	441a      	add	r2, r3
 800bf4c:	4658      	mov	r0, fp
 800bf4e:	4498      	add	r8, r3
 800bf50:	9208      	str	r2, [sp, #32]
 800bf52:	f000 fc21 	bl	800c798 <__i2b>
 800bf56:	4605      	mov	r5, r0
 800bf58:	b15e      	cbz	r6, 800bf72 <_dtoa_r+0x74a>
 800bf5a:	9b08      	ldr	r3, [sp, #32]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	dd08      	ble.n	800bf72 <_dtoa_r+0x74a>
 800bf60:	42b3      	cmp	r3, r6
 800bf62:	9a08      	ldr	r2, [sp, #32]
 800bf64:	bfa8      	it	ge
 800bf66:	4633      	movge	r3, r6
 800bf68:	eba8 0803 	sub.w	r8, r8, r3
 800bf6c:	1af6      	subs	r6, r6, r3
 800bf6e:	1ad3      	subs	r3, r2, r3
 800bf70:	9308      	str	r3, [sp, #32]
 800bf72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf74:	b1f3      	cbz	r3, 800bfb4 <_dtoa_r+0x78c>
 800bf76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	f000 80b7 	beq.w	800c0ec <_dtoa_r+0x8c4>
 800bf7e:	b18c      	cbz	r4, 800bfa4 <_dtoa_r+0x77c>
 800bf80:	4629      	mov	r1, r5
 800bf82:	4622      	mov	r2, r4
 800bf84:	4658      	mov	r0, fp
 800bf86:	f000 fcc7 	bl	800c918 <__pow5mult>
 800bf8a:	464a      	mov	r2, r9
 800bf8c:	4601      	mov	r1, r0
 800bf8e:	4605      	mov	r5, r0
 800bf90:	4658      	mov	r0, fp
 800bf92:	f000 fc17 	bl	800c7c4 <__multiply>
 800bf96:	4649      	mov	r1, r9
 800bf98:	9004      	str	r0, [sp, #16]
 800bf9a:	4658      	mov	r0, fp
 800bf9c:	f000 fb48 	bl	800c630 <_Bfree>
 800bfa0:	9b04      	ldr	r3, [sp, #16]
 800bfa2:	4699      	mov	r9, r3
 800bfa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfa6:	1b1a      	subs	r2, r3, r4
 800bfa8:	d004      	beq.n	800bfb4 <_dtoa_r+0x78c>
 800bfaa:	4649      	mov	r1, r9
 800bfac:	4658      	mov	r0, fp
 800bfae:	f000 fcb3 	bl	800c918 <__pow5mult>
 800bfb2:	4681      	mov	r9, r0
 800bfb4:	2101      	movs	r1, #1
 800bfb6:	4658      	mov	r0, fp
 800bfb8:	f000 fbee 	bl	800c798 <__i2b>
 800bfbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	f000 81cf 	beq.w	800c364 <_dtoa_r+0xb3c>
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	4601      	mov	r1, r0
 800bfca:	4658      	mov	r0, fp
 800bfcc:	f000 fca4 	bl	800c918 <__pow5mult>
 800bfd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	4604      	mov	r4, r0
 800bfd6:	f300 8095 	bgt.w	800c104 <_dtoa_r+0x8dc>
 800bfda:	9b02      	ldr	r3, [sp, #8]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	f040 8087 	bne.w	800c0f0 <_dtoa_r+0x8c8>
 800bfe2:	9b03      	ldr	r3, [sp, #12]
 800bfe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	f040 8089 	bne.w	800c100 <_dtoa_r+0x8d8>
 800bfee:	9b03      	ldr	r3, [sp, #12]
 800bff0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bff4:	0d1b      	lsrs	r3, r3, #20
 800bff6:	051b      	lsls	r3, r3, #20
 800bff8:	b12b      	cbz	r3, 800c006 <_dtoa_r+0x7de>
 800bffa:	9b08      	ldr	r3, [sp, #32]
 800bffc:	3301      	adds	r3, #1
 800bffe:	9308      	str	r3, [sp, #32]
 800c000:	f108 0801 	add.w	r8, r8, #1
 800c004:	2301      	movs	r3, #1
 800c006:	930a      	str	r3, [sp, #40]	@ 0x28
 800c008:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	f000 81b0 	beq.w	800c370 <_dtoa_r+0xb48>
 800c010:	6923      	ldr	r3, [r4, #16]
 800c012:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c016:	6918      	ldr	r0, [r3, #16]
 800c018:	f000 fb72 	bl	800c700 <__hi0bits>
 800c01c:	f1c0 0020 	rsb	r0, r0, #32
 800c020:	9b08      	ldr	r3, [sp, #32]
 800c022:	4418      	add	r0, r3
 800c024:	f010 001f 	ands.w	r0, r0, #31
 800c028:	d077      	beq.n	800c11a <_dtoa_r+0x8f2>
 800c02a:	f1c0 0320 	rsb	r3, r0, #32
 800c02e:	2b04      	cmp	r3, #4
 800c030:	dd6b      	ble.n	800c10a <_dtoa_r+0x8e2>
 800c032:	9b08      	ldr	r3, [sp, #32]
 800c034:	f1c0 001c 	rsb	r0, r0, #28
 800c038:	4403      	add	r3, r0
 800c03a:	4480      	add	r8, r0
 800c03c:	4406      	add	r6, r0
 800c03e:	9308      	str	r3, [sp, #32]
 800c040:	f1b8 0f00 	cmp.w	r8, #0
 800c044:	dd05      	ble.n	800c052 <_dtoa_r+0x82a>
 800c046:	4649      	mov	r1, r9
 800c048:	4642      	mov	r2, r8
 800c04a:	4658      	mov	r0, fp
 800c04c:	f000 fcbe 	bl	800c9cc <__lshift>
 800c050:	4681      	mov	r9, r0
 800c052:	9b08      	ldr	r3, [sp, #32]
 800c054:	2b00      	cmp	r3, #0
 800c056:	dd05      	ble.n	800c064 <_dtoa_r+0x83c>
 800c058:	4621      	mov	r1, r4
 800c05a:	461a      	mov	r2, r3
 800c05c:	4658      	mov	r0, fp
 800c05e:	f000 fcb5 	bl	800c9cc <__lshift>
 800c062:	4604      	mov	r4, r0
 800c064:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c066:	2b00      	cmp	r3, #0
 800c068:	d059      	beq.n	800c11e <_dtoa_r+0x8f6>
 800c06a:	4621      	mov	r1, r4
 800c06c:	4648      	mov	r0, r9
 800c06e:	f000 fd19 	bl	800caa4 <__mcmp>
 800c072:	2800      	cmp	r0, #0
 800c074:	da53      	bge.n	800c11e <_dtoa_r+0x8f6>
 800c076:	1e7b      	subs	r3, r7, #1
 800c078:	9304      	str	r3, [sp, #16]
 800c07a:	4649      	mov	r1, r9
 800c07c:	2300      	movs	r3, #0
 800c07e:	220a      	movs	r2, #10
 800c080:	4658      	mov	r0, fp
 800c082:	f000 faf7 	bl	800c674 <__multadd>
 800c086:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c088:	4681      	mov	r9, r0
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	f000 8172 	beq.w	800c374 <_dtoa_r+0xb4c>
 800c090:	2300      	movs	r3, #0
 800c092:	4629      	mov	r1, r5
 800c094:	220a      	movs	r2, #10
 800c096:	4658      	mov	r0, fp
 800c098:	f000 faec 	bl	800c674 <__multadd>
 800c09c:	9b00      	ldr	r3, [sp, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	4605      	mov	r5, r0
 800c0a2:	dc67      	bgt.n	800c174 <_dtoa_r+0x94c>
 800c0a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0a6:	2b02      	cmp	r3, #2
 800c0a8:	dc41      	bgt.n	800c12e <_dtoa_r+0x906>
 800c0aa:	e063      	b.n	800c174 <_dtoa_r+0x94c>
 800c0ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c0ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c0b2:	e746      	b.n	800bf42 <_dtoa_r+0x71a>
 800c0b4:	9b07      	ldr	r3, [sp, #28]
 800c0b6:	1e5c      	subs	r4, r3, #1
 800c0b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0ba:	42a3      	cmp	r3, r4
 800c0bc:	bfbf      	itttt	lt
 800c0be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c0c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c0c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c0c4:	1ae3      	sublt	r3, r4, r3
 800c0c6:	bfb4      	ite	lt
 800c0c8:	18d2      	addlt	r2, r2, r3
 800c0ca:	1b1c      	subge	r4, r3, r4
 800c0cc:	9b07      	ldr	r3, [sp, #28]
 800c0ce:	bfbc      	itt	lt
 800c0d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c0d2:	2400      	movlt	r4, #0
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	bfb5      	itete	lt
 800c0d8:	eba8 0603 	sublt.w	r6, r8, r3
 800c0dc:	9b07      	ldrge	r3, [sp, #28]
 800c0de:	2300      	movlt	r3, #0
 800c0e0:	4646      	movge	r6, r8
 800c0e2:	e730      	b.n	800bf46 <_dtoa_r+0x71e>
 800c0e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c0e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c0e8:	4646      	mov	r6, r8
 800c0ea:	e735      	b.n	800bf58 <_dtoa_r+0x730>
 800c0ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c0ee:	e75c      	b.n	800bfaa <_dtoa_r+0x782>
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	e788      	b.n	800c006 <_dtoa_r+0x7de>
 800c0f4:	3fe00000 	.word	0x3fe00000
 800c0f8:	40240000 	.word	0x40240000
 800c0fc:	40140000 	.word	0x40140000
 800c100:	9b02      	ldr	r3, [sp, #8]
 800c102:	e780      	b.n	800c006 <_dtoa_r+0x7de>
 800c104:	2300      	movs	r3, #0
 800c106:	930a      	str	r3, [sp, #40]	@ 0x28
 800c108:	e782      	b.n	800c010 <_dtoa_r+0x7e8>
 800c10a:	d099      	beq.n	800c040 <_dtoa_r+0x818>
 800c10c:	9a08      	ldr	r2, [sp, #32]
 800c10e:	331c      	adds	r3, #28
 800c110:	441a      	add	r2, r3
 800c112:	4498      	add	r8, r3
 800c114:	441e      	add	r6, r3
 800c116:	9208      	str	r2, [sp, #32]
 800c118:	e792      	b.n	800c040 <_dtoa_r+0x818>
 800c11a:	4603      	mov	r3, r0
 800c11c:	e7f6      	b.n	800c10c <_dtoa_r+0x8e4>
 800c11e:	9b07      	ldr	r3, [sp, #28]
 800c120:	9704      	str	r7, [sp, #16]
 800c122:	2b00      	cmp	r3, #0
 800c124:	dc20      	bgt.n	800c168 <_dtoa_r+0x940>
 800c126:	9300      	str	r3, [sp, #0]
 800c128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c12a:	2b02      	cmp	r3, #2
 800c12c:	dd1e      	ble.n	800c16c <_dtoa_r+0x944>
 800c12e:	9b00      	ldr	r3, [sp, #0]
 800c130:	2b00      	cmp	r3, #0
 800c132:	f47f aec0 	bne.w	800beb6 <_dtoa_r+0x68e>
 800c136:	4621      	mov	r1, r4
 800c138:	2205      	movs	r2, #5
 800c13a:	4658      	mov	r0, fp
 800c13c:	f000 fa9a 	bl	800c674 <__multadd>
 800c140:	4601      	mov	r1, r0
 800c142:	4604      	mov	r4, r0
 800c144:	4648      	mov	r0, r9
 800c146:	f000 fcad 	bl	800caa4 <__mcmp>
 800c14a:	2800      	cmp	r0, #0
 800c14c:	f77f aeb3 	ble.w	800beb6 <_dtoa_r+0x68e>
 800c150:	4656      	mov	r6, sl
 800c152:	2331      	movs	r3, #49	@ 0x31
 800c154:	f806 3b01 	strb.w	r3, [r6], #1
 800c158:	9b04      	ldr	r3, [sp, #16]
 800c15a:	3301      	adds	r3, #1
 800c15c:	9304      	str	r3, [sp, #16]
 800c15e:	e6ae      	b.n	800bebe <_dtoa_r+0x696>
 800c160:	9c07      	ldr	r4, [sp, #28]
 800c162:	9704      	str	r7, [sp, #16]
 800c164:	4625      	mov	r5, r4
 800c166:	e7f3      	b.n	800c150 <_dtoa_r+0x928>
 800c168:	9b07      	ldr	r3, [sp, #28]
 800c16a:	9300      	str	r3, [sp, #0]
 800c16c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c16e:	2b00      	cmp	r3, #0
 800c170:	f000 8104 	beq.w	800c37c <_dtoa_r+0xb54>
 800c174:	2e00      	cmp	r6, #0
 800c176:	dd05      	ble.n	800c184 <_dtoa_r+0x95c>
 800c178:	4629      	mov	r1, r5
 800c17a:	4632      	mov	r2, r6
 800c17c:	4658      	mov	r0, fp
 800c17e:	f000 fc25 	bl	800c9cc <__lshift>
 800c182:	4605      	mov	r5, r0
 800c184:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c186:	2b00      	cmp	r3, #0
 800c188:	d05a      	beq.n	800c240 <_dtoa_r+0xa18>
 800c18a:	6869      	ldr	r1, [r5, #4]
 800c18c:	4658      	mov	r0, fp
 800c18e:	f000 fa0f 	bl	800c5b0 <_Balloc>
 800c192:	4606      	mov	r6, r0
 800c194:	b928      	cbnz	r0, 800c1a2 <_dtoa_r+0x97a>
 800c196:	4b84      	ldr	r3, [pc, #528]	@ (800c3a8 <_dtoa_r+0xb80>)
 800c198:	4602      	mov	r2, r0
 800c19a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c19e:	f7ff bb5a 	b.w	800b856 <_dtoa_r+0x2e>
 800c1a2:	692a      	ldr	r2, [r5, #16]
 800c1a4:	3202      	adds	r2, #2
 800c1a6:	0092      	lsls	r2, r2, #2
 800c1a8:	f105 010c 	add.w	r1, r5, #12
 800c1ac:	300c      	adds	r0, #12
 800c1ae:	f7ff fa84 	bl	800b6ba <memcpy>
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	4631      	mov	r1, r6
 800c1b6:	4658      	mov	r0, fp
 800c1b8:	f000 fc08 	bl	800c9cc <__lshift>
 800c1bc:	f10a 0301 	add.w	r3, sl, #1
 800c1c0:	9307      	str	r3, [sp, #28]
 800c1c2:	9b00      	ldr	r3, [sp, #0]
 800c1c4:	4453      	add	r3, sl
 800c1c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1c8:	9b02      	ldr	r3, [sp, #8]
 800c1ca:	f003 0301 	and.w	r3, r3, #1
 800c1ce:	462f      	mov	r7, r5
 800c1d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1d2:	4605      	mov	r5, r0
 800c1d4:	9b07      	ldr	r3, [sp, #28]
 800c1d6:	4621      	mov	r1, r4
 800c1d8:	3b01      	subs	r3, #1
 800c1da:	4648      	mov	r0, r9
 800c1dc:	9300      	str	r3, [sp, #0]
 800c1de:	f7ff fa99 	bl	800b714 <quorem>
 800c1e2:	4639      	mov	r1, r7
 800c1e4:	9002      	str	r0, [sp, #8]
 800c1e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c1ea:	4648      	mov	r0, r9
 800c1ec:	f000 fc5a 	bl	800caa4 <__mcmp>
 800c1f0:	462a      	mov	r2, r5
 800c1f2:	9008      	str	r0, [sp, #32]
 800c1f4:	4621      	mov	r1, r4
 800c1f6:	4658      	mov	r0, fp
 800c1f8:	f000 fc70 	bl	800cadc <__mdiff>
 800c1fc:	68c2      	ldr	r2, [r0, #12]
 800c1fe:	4606      	mov	r6, r0
 800c200:	bb02      	cbnz	r2, 800c244 <_dtoa_r+0xa1c>
 800c202:	4601      	mov	r1, r0
 800c204:	4648      	mov	r0, r9
 800c206:	f000 fc4d 	bl	800caa4 <__mcmp>
 800c20a:	4602      	mov	r2, r0
 800c20c:	4631      	mov	r1, r6
 800c20e:	4658      	mov	r0, fp
 800c210:	920e      	str	r2, [sp, #56]	@ 0x38
 800c212:	f000 fa0d 	bl	800c630 <_Bfree>
 800c216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c218:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c21a:	9e07      	ldr	r6, [sp, #28]
 800c21c:	ea43 0102 	orr.w	r1, r3, r2
 800c220:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c222:	4319      	orrs	r1, r3
 800c224:	d110      	bne.n	800c248 <_dtoa_r+0xa20>
 800c226:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c22a:	d029      	beq.n	800c280 <_dtoa_r+0xa58>
 800c22c:	9b08      	ldr	r3, [sp, #32]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	dd02      	ble.n	800c238 <_dtoa_r+0xa10>
 800c232:	9b02      	ldr	r3, [sp, #8]
 800c234:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c238:	9b00      	ldr	r3, [sp, #0]
 800c23a:	f883 8000 	strb.w	r8, [r3]
 800c23e:	e63f      	b.n	800bec0 <_dtoa_r+0x698>
 800c240:	4628      	mov	r0, r5
 800c242:	e7bb      	b.n	800c1bc <_dtoa_r+0x994>
 800c244:	2201      	movs	r2, #1
 800c246:	e7e1      	b.n	800c20c <_dtoa_r+0x9e4>
 800c248:	9b08      	ldr	r3, [sp, #32]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	db04      	blt.n	800c258 <_dtoa_r+0xa30>
 800c24e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c250:	430b      	orrs	r3, r1
 800c252:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c254:	430b      	orrs	r3, r1
 800c256:	d120      	bne.n	800c29a <_dtoa_r+0xa72>
 800c258:	2a00      	cmp	r2, #0
 800c25a:	dded      	ble.n	800c238 <_dtoa_r+0xa10>
 800c25c:	4649      	mov	r1, r9
 800c25e:	2201      	movs	r2, #1
 800c260:	4658      	mov	r0, fp
 800c262:	f000 fbb3 	bl	800c9cc <__lshift>
 800c266:	4621      	mov	r1, r4
 800c268:	4681      	mov	r9, r0
 800c26a:	f000 fc1b 	bl	800caa4 <__mcmp>
 800c26e:	2800      	cmp	r0, #0
 800c270:	dc03      	bgt.n	800c27a <_dtoa_r+0xa52>
 800c272:	d1e1      	bne.n	800c238 <_dtoa_r+0xa10>
 800c274:	f018 0f01 	tst.w	r8, #1
 800c278:	d0de      	beq.n	800c238 <_dtoa_r+0xa10>
 800c27a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c27e:	d1d8      	bne.n	800c232 <_dtoa_r+0xa0a>
 800c280:	9a00      	ldr	r2, [sp, #0]
 800c282:	2339      	movs	r3, #57	@ 0x39
 800c284:	7013      	strb	r3, [r2, #0]
 800c286:	4633      	mov	r3, r6
 800c288:	461e      	mov	r6, r3
 800c28a:	3b01      	subs	r3, #1
 800c28c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c290:	2a39      	cmp	r2, #57	@ 0x39
 800c292:	d052      	beq.n	800c33a <_dtoa_r+0xb12>
 800c294:	3201      	adds	r2, #1
 800c296:	701a      	strb	r2, [r3, #0]
 800c298:	e612      	b.n	800bec0 <_dtoa_r+0x698>
 800c29a:	2a00      	cmp	r2, #0
 800c29c:	dd07      	ble.n	800c2ae <_dtoa_r+0xa86>
 800c29e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c2a2:	d0ed      	beq.n	800c280 <_dtoa_r+0xa58>
 800c2a4:	9a00      	ldr	r2, [sp, #0]
 800c2a6:	f108 0301 	add.w	r3, r8, #1
 800c2aa:	7013      	strb	r3, [r2, #0]
 800c2ac:	e608      	b.n	800bec0 <_dtoa_r+0x698>
 800c2ae:	9b07      	ldr	r3, [sp, #28]
 800c2b0:	9a07      	ldr	r2, [sp, #28]
 800c2b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c2b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	d028      	beq.n	800c30e <_dtoa_r+0xae6>
 800c2bc:	4649      	mov	r1, r9
 800c2be:	2300      	movs	r3, #0
 800c2c0:	220a      	movs	r2, #10
 800c2c2:	4658      	mov	r0, fp
 800c2c4:	f000 f9d6 	bl	800c674 <__multadd>
 800c2c8:	42af      	cmp	r7, r5
 800c2ca:	4681      	mov	r9, r0
 800c2cc:	f04f 0300 	mov.w	r3, #0
 800c2d0:	f04f 020a 	mov.w	r2, #10
 800c2d4:	4639      	mov	r1, r7
 800c2d6:	4658      	mov	r0, fp
 800c2d8:	d107      	bne.n	800c2ea <_dtoa_r+0xac2>
 800c2da:	f000 f9cb 	bl	800c674 <__multadd>
 800c2de:	4607      	mov	r7, r0
 800c2e0:	4605      	mov	r5, r0
 800c2e2:	9b07      	ldr	r3, [sp, #28]
 800c2e4:	3301      	adds	r3, #1
 800c2e6:	9307      	str	r3, [sp, #28]
 800c2e8:	e774      	b.n	800c1d4 <_dtoa_r+0x9ac>
 800c2ea:	f000 f9c3 	bl	800c674 <__multadd>
 800c2ee:	4629      	mov	r1, r5
 800c2f0:	4607      	mov	r7, r0
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	220a      	movs	r2, #10
 800c2f6:	4658      	mov	r0, fp
 800c2f8:	f000 f9bc 	bl	800c674 <__multadd>
 800c2fc:	4605      	mov	r5, r0
 800c2fe:	e7f0      	b.n	800c2e2 <_dtoa_r+0xaba>
 800c300:	9b00      	ldr	r3, [sp, #0]
 800c302:	2b00      	cmp	r3, #0
 800c304:	bfcc      	ite	gt
 800c306:	461e      	movgt	r6, r3
 800c308:	2601      	movle	r6, #1
 800c30a:	4456      	add	r6, sl
 800c30c:	2700      	movs	r7, #0
 800c30e:	4649      	mov	r1, r9
 800c310:	2201      	movs	r2, #1
 800c312:	4658      	mov	r0, fp
 800c314:	f000 fb5a 	bl	800c9cc <__lshift>
 800c318:	4621      	mov	r1, r4
 800c31a:	4681      	mov	r9, r0
 800c31c:	f000 fbc2 	bl	800caa4 <__mcmp>
 800c320:	2800      	cmp	r0, #0
 800c322:	dcb0      	bgt.n	800c286 <_dtoa_r+0xa5e>
 800c324:	d102      	bne.n	800c32c <_dtoa_r+0xb04>
 800c326:	f018 0f01 	tst.w	r8, #1
 800c32a:	d1ac      	bne.n	800c286 <_dtoa_r+0xa5e>
 800c32c:	4633      	mov	r3, r6
 800c32e:	461e      	mov	r6, r3
 800c330:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c334:	2a30      	cmp	r2, #48	@ 0x30
 800c336:	d0fa      	beq.n	800c32e <_dtoa_r+0xb06>
 800c338:	e5c2      	b.n	800bec0 <_dtoa_r+0x698>
 800c33a:	459a      	cmp	sl, r3
 800c33c:	d1a4      	bne.n	800c288 <_dtoa_r+0xa60>
 800c33e:	9b04      	ldr	r3, [sp, #16]
 800c340:	3301      	adds	r3, #1
 800c342:	9304      	str	r3, [sp, #16]
 800c344:	2331      	movs	r3, #49	@ 0x31
 800c346:	f88a 3000 	strb.w	r3, [sl]
 800c34a:	e5b9      	b.n	800bec0 <_dtoa_r+0x698>
 800c34c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c34e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c3ac <_dtoa_r+0xb84>
 800c352:	b11b      	cbz	r3, 800c35c <_dtoa_r+0xb34>
 800c354:	f10a 0308 	add.w	r3, sl, #8
 800c358:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c35a:	6013      	str	r3, [r2, #0]
 800c35c:	4650      	mov	r0, sl
 800c35e:	b019      	add	sp, #100	@ 0x64
 800c360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c366:	2b01      	cmp	r3, #1
 800c368:	f77f ae37 	ble.w	800bfda <_dtoa_r+0x7b2>
 800c36c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c36e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c370:	2001      	movs	r0, #1
 800c372:	e655      	b.n	800c020 <_dtoa_r+0x7f8>
 800c374:	9b00      	ldr	r3, [sp, #0]
 800c376:	2b00      	cmp	r3, #0
 800c378:	f77f aed6 	ble.w	800c128 <_dtoa_r+0x900>
 800c37c:	4656      	mov	r6, sl
 800c37e:	4621      	mov	r1, r4
 800c380:	4648      	mov	r0, r9
 800c382:	f7ff f9c7 	bl	800b714 <quorem>
 800c386:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c38a:	f806 8b01 	strb.w	r8, [r6], #1
 800c38e:	9b00      	ldr	r3, [sp, #0]
 800c390:	eba6 020a 	sub.w	r2, r6, sl
 800c394:	4293      	cmp	r3, r2
 800c396:	ddb3      	ble.n	800c300 <_dtoa_r+0xad8>
 800c398:	4649      	mov	r1, r9
 800c39a:	2300      	movs	r3, #0
 800c39c:	220a      	movs	r2, #10
 800c39e:	4658      	mov	r0, fp
 800c3a0:	f000 f968 	bl	800c674 <__multadd>
 800c3a4:	4681      	mov	r9, r0
 800c3a6:	e7ea      	b.n	800c37e <_dtoa_r+0xb56>
 800c3a8:	0800d5f8 	.word	0x0800d5f8
 800c3ac:	0800d593 	.word	0x0800d593

0800c3b0 <_free_r>:
 800c3b0:	b538      	push	{r3, r4, r5, lr}
 800c3b2:	4605      	mov	r5, r0
 800c3b4:	2900      	cmp	r1, #0
 800c3b6:	d041      	beq.n	800c43c <_free_r+0x8c>
 800c3b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3bc:	1f0c      	subs	r4, r1, #4
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	bfb8      	it	lt
 800c3c2:	18e4      	addlt	r4, r4, r3
 800c3c4:	f000 f8e8 	bl	800c598 <__malloc_lock>
 800c3c8:	4a1d      	ldr	r2, [pc, #116]	@ (800c440 <_free_r+0x90>)
 800c3ca:	6813      	ldr	r3, [r2, #0]
 800c3cc:	b933      	cbnz	r3, 800c3dc <_free_r+0x2c>
 800c3ce:	6063      	str	r3, [r4, #4]
 800c3d0:	6014      	str	r4, [r2, #0]
 800c3d2:	4628      	mov	r0, r5
 800c3d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3d8:	f000 b8e4 	b.w	800c5a4 <__malloc_unlock>
 800c3dc:	42a3      	cmp	r3, r4
 800c3de:	d908      	bls.n	800c3f2 <_free_r+0x42>
 800c3e0:	6820      	ldr	r0, [r4, #0]
 800c3e2:	1821      	adds	r1, r4, r0
 800c3e4:	428b      	cmp	r3, r1
 800c3e6:	bf01      	itttt	eq
 800c3e8:	6819      	ldreq	r1, [r3, #0]
 800c3ea:	685b      	ldreq	r3, [r3, #4]
 800c3ec:	1809      	addeq	r1, r1, r0
 800c3ee:	6021      	streq	r1, [r4, #0]
 800c3f0:	e7ed      	b.n	800c3ce <_free_r+0x1e>
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	685b      	ldr	r3, [r3, #4]
 800c3f6:	b10b      	cbz	r3, 800c3fc <_free_r+0x4c>
 800c3f8:	42a3      	cmp	r3, r4
 800c3fa:	d9fa      	bls.n	800c3f2 <_free_r+0x42>
 800c3fc:	6811      	ldr	r1, [r2, #0]
 800c3fe:	1850      	adds	r0, r2, r1
 800c400:	42a0      	cmp	r0, r4
 800c402:	d10b      	bne.n	800c41c <_free_r+0x6c>
 800c404:	6820      	ldr	r0, [r4, #0]
 800c406:	4401      	add	r1, r0
 800c408:	1850      	adds	r0, r2, r1
 800c40a:	4283      	cmp	r3, r0
 800c40c:	6011      	str	r1, [r2, #0]
 800c40e:	d1e0      	bne.n	800c3d2 <_free_r+0x22>
 800c410:	6818      	ldr	r0, [r3, #0]
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	6053      	str	r3, [r2, #4]
 800c416:	4408      	add	r0, r1
 800c418:	6010      	str	r0, [r2, #0]
 800c41a:	e7da      	b.n	800c3d2 <_free_r+0x22>
 800c41c:	d902      	bls.n	800c424 <_free_r+0x74>
 800c41e:	230c      	movs	r3, #12
 800c420:	602b      	str	r3, [r5, #0]
 800c422:	e7d6      	b.n	800c3d2 <_free_r+0x22>
 800c424:	6820      	ldr	r0, [r4, #0]
 800c426:	1821      	adds	r1, r4, r0
 800c428:	428b      	cmp	r3, r1
 800c42a:	bf04      	itt	eq
 800c42c:	6819      	ldreq	r1, [r3, #0]
 800c42e:	685b      	ldreq	r3, [r3, #4]
 800c430:	6063      	str	r3, [r4, #4]
 800c432:	bf04      	itt	eq
 800c434:	1809      	addeq	r1, r1, r0
 800c436:	6021      	streq	r1, [r4, #0]
 800c438:	6054      	str	r4, [r2, #4]
 800c43a:	e7ca      	b.n	800c3d2 <_free_r+0x22>
 800c43c:	bd38      	pop	{r3, r4, r5, pc}
 800c43e:	bf00      	nop
 800c440:	20000fa4 	.word	0x20000fa4

0800c444 <malloc>:
 800c444:	4b02      	ldr	r3, [pc, #8]	@ (800c450 <malloc+0xc>)
 800c446:	4601      	mov	r1, r0
 800c448:	6818      	ldr	r0, [r3, #0]
 800c44a:	f000 b825 	b.w	800c498 <_malloc_r>
 800c44e:	bf00      	nop
 800c450:	20000064 	.word	0x20000064

0800c454 <sbrk_aligned>:
 800c454:	b570      	push	{r4, r5, r6, lr}
 800c456:	4e0f      	ldr	r6, [pc, #60]	@ (800c494 <sbrk_aligned+0x40>)
 800c458:	460c      	mov	r4, r1
 800c45a:	6831      	ldr	r1, [r6, #0]
 800c45c:	4605      	mov	r5, r0
 800c45e:	b911      	cbnz	r1, 800c466 <sbrk_aligned+0x12>
 800c460:	f000 febc 	bl	800d1dc <_sbrk_r>
 800c464:	6030      	str	r0, [r6, #0]
 800c466:	4621      	mov	r1, r4
 800c468:	4628      	mov	r0, r5
 800c46a:	f000 feb7 	bl	800d1dc <_sbrk_r>
 800c46e:	1c43      	adds	r3, r0, #1
 800c470:	d103      	bne.n	800c47a <sbrk_aligned+0x26>
 800c472:	f04f 34ff 	mov.w	r4, #4294967295
 800c476:	4620      	mov	r0, r4
 800c478:	bd70      	pop	{r4, r5, r6, pc}
 800c47a:	1cc4      	adds	r4, r0, #3
 800c47c:	f024 0403 	bic.w	r4, r4, #3
 800c480:	42a0      	cmp	r0, r4
 800c482:	d0f8      	beq.n	800c476 <sbrk_aligned+0x22>
 800c484:	1a21      	subs	r1, r4, r0
 800c486:	4628      	mov	r0, r5
 800c488:	f000 fea8 	bl	800d1dc <_sbrk_r>
 800c48c:	3001      	adds	r0, #1
 800c48e:	d1f2      	bne.n	800c476 <sbrk_aligned+0x22>
 800c490:	e7ef      	b.n	800c472 <sbrk_aligned+0x1e>
 800c492:	bf00      	nop
 800c494:	20000fa0 	.word	0x20000fa0

0800c498 <_malloc_r>:
 800c498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c49c:	1ccd      	adds	r5, r1, #3
 800c49e:	f025 0503 	bic.w	r5, r5, #3
 800c4a2:	3508      	adds	r5, #8
 800c4a4:	2d0c      	cmp	r5, #12
 800c4a6:	bf38      	it	cc
 800c4a8:	250c      	movcc	r5, #12
 800c4aa:	2d00      	cmp	r5, #0
 800c4ac:	4606      	mov	r6, r0
 800c4ae:	db01      	blt.n	800c4b4 <_malloc_r+0x1c>
 800c4b0:	42a9      	cmp	r1, r5
 800c4b2:	d904      	bls.n	800c4be <_malloc_r+0x26>
 800c4b4:	230c      	movs	r3, #12
 800c4b6:	6033      	str	r3, [r6, #0]
 800c4b8:	2000      	movs	r0, #0
 800c4ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c594 <_malloc_r+0xfc>
 800c4c2:	f000 f869 	bl	800c598 <__malloc_lock>
 800c4c6:	f8d8 3000 	ldr.w	r3, [r8]
 800c4ca:	461c      	mov	r4, r3
 800c4cc:	bb44      	cbnz	r4, 800c520 <_malloc_r+0x88>
 800c4ce:	4629      	mov	r1, r5
 800c4d0:	4630      	mov	r0, r6
 800c4d2:	f7ff ffbf 	bl	800c454 <sbrk_aligned>
 800c4d6:	1c43      	adds	r3, r0, #1
 800c4d8:	4604      	mov	r4, r0
 800c4da:	d158      	bne.n	800c58e <_malloc_r+0xf6>
 800c4dc:	f8d8 4000 	ldr.w	r4, [r8]
 800c4e0:	4627      	mov	r7, r4
 800c4e2:	2f00      	cmp	r7, #0
 800c4e4:	d143      	bne.n	800c56e <_malloc_r+0xd6>
 800c4e6:	2c00      	cmp	r4, #0
 800c4e8:	d04b      	beq.n	800c582 <_malloc_r+0xea>
 800c4ea:	6823      	ldr	r3, [r4, #0]
 800c4ec:	4639      	mov	r1, r7
 800c4ee:	4630      	mov	r0, r6
 800c4f0:	eb04 0903 	add.w	r9, r4, r3
 800c4f4:	f000 fe72 	bl	800d1dc <_sbrk_r>
 800c4f8:	4581      	cmp	r9, r0
 800c4fa:	d142      	bne.n	800c582 <_malloc_r+0xea>
 800c4fc:	6821      	ldr	r1, [r4, #0]
 800c4fe:	1a6d      	subs	r5, r5, r1
 800c500:	4629      	mov	r1, r5
 800c502:	4630      	mov	r0, r6
 800c504:	f7ff ffa6 	bl	800c454 <sbrk_aligned>
 800c508:	3001      	adds	r0, #1
 800c50a:	d03a      	beq.n	800c582 <_malloc_r+0xea>
 800c50c:	6823      	ldr	r3, [r4, #0]
 800c50e:	442b      	add	r3, r5
 800c510:	6023      	str	r3, [r4, #0]
 800c512:	f8d8 3000 	ldr.w	r3, [r8]
 800c516:	685a      	ldr	r2, [r3, #4]
 800c518:	bb62      	cbnz	r2, 800c574 <_malloc_r+0xdc>
 800c51a:	f8c8 7000 	str.w	r7, [r8]
 800c51e:	e00f      	b.n	800c540 <_malloc_r+0xa8>
 800c520:	6822      	ldr	r2, [r4, #0]
 800c522:	1b52      	subs	r2, r2, r5
 800c524:	d420      	bmi.n	800c568 <_malloc_r+0xd0>
 800c526:	2a0b      	cmp	r2, #11
 800c528:	d917      	bls.n	800c55a <_malloc_r+0xc2>
 800c52a:	1961      	adds	r1, r4, r5
 800c52c:	42a3      	cmp	r3, r4
 800c52e:	6025      	str	r5, [r4, #0]
 800c530:	bf18      	it	ne
 800c532:	6059      	strne	r1, [r3, #4]
 800c534:	6863      	ldr	r3, [r4, #4]
 800c536:	bf08      	it	eq
 800c538:	f8c8 1000 	streq.w	r1, [r8]
 800c53c:	5162      	str	r2, [r4, r5]
 800c53e:	604b      	str	r3, [r1, #4]
 800c540:	4630      	mov	r0, r6
 800c542:	f000 f82f 	bl	800c5a4 <__malloc_unlock>
 800c546:	f104 000b 	add.w	r0, r4, #11
 800c54a:	1d23      	adds	r3, r4, #4
 800c54c:	f020 0007 	bic.w	r0, r0, #7
 800c550:	1ac2      	subs	r2, r0, r3
 800c552:	bf1c      	itt	ne
 800c554:	1a1b      	subne	r3, r3, r0
 800c556:	50a3      	strne	r3, [r4, r2]
 800c558:	e7af      	b.n	800c4ba <_malloc_r+0x22>
 800c55a:	6862      	ldr	r2, [r4, #4]
 800c55c:	42a3      	cmp	r3, r4
 800c55e:	bf0c      	ite	eq
 800c560:	f8c8 2000 	streq.w	r2, [r8]
 800c564:	605a      	strne	r2, [r3, #4]
 800c566:	e7eb      	b.n	800c540 <_malloc_r+0xa8>
 800c568:	4623      	mov	r3, r4
 800c56a:	6864      	ldr	r4, [r4, #4]
 800c56c:	e7ae      	b.n	800c4cc <_malloc_r+0x34>
 800c56e:	463c      	mov	r4, r7
 800c570:	687f      	ldr	r7, [r7, #4]
 800c572:	e7b6      	b.n	800c4e2 <_malloc_r+0x4a>
 800c574:	461a      	mov	r2, r3
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	42a3      	cmp	r3, r4
 800c57a:	d1fb      	bne.n	800c574 <_malloc_r+0xdc>
 800c57c:	2300      	movs	r3, #0
 800c57e:	6053      	str	r3, [r2, #4]
 800c580:	e7de      	b.n	800c540 <_malloc_r+0xa8>
 800c582:	230c      	movs	r3, #12
 800c584:	6033      	str	r3, [r6, #0]
 800c586:	4630      	mov	r0, r6
 800c588:	f000 f80c 	bl	800c5a4 <__malloc_unlock>
 800c58c:	e794      	b.n	800c4b8 <_malloc_r+0x20>
 800c58e:	6005      	str	r5, [r0, #0]
 800c590:	e7d6      	b.n	800c540 <_malloc_r+0xa8>
 800c592:	bf00      	nop
 800c594:	20000fa4 	.word	0x20000fa4

0800c598 <__malloc_lock>:
 800c598:	4801      	ldr	r0, [pc, #4]	@ (800c5a0 <__malloc_lock+0x8>)
 800c59a:	f7ff b88c 	b.w	800b6b6 <__retarget_lock_acquire_recursive>
 800c59e:	bf00      	nop
 800c5a0:	20000f9c 	.word	0x20000f9c

0800c5a4 <__malloc_unlock>:
 800c5a4:	4801      	ldr	r0, [pc, #4]	@ (800c5ac <__malloc_unlock+0x8>)
 800c5a6:	f7ff b887 	b.w	800b6b8 <__retarget_lock_release_recursive>
 800c5aa:	bf00      	nop
 800c5ac:	20000f9c 	.word	0x20000f9c

0800c5b0 <_Balloc>:
 800c5b0:	b570      	push	{r4, r5, r6, lr}
 800c5b2:	69c6      	ldr	r6, [r0, #28]
 800c5b4:	4604      	mov	r4, r0
 800c5b6:	460d      	mov	r5, r1
 800c5b8:	b976      	cbnz	r6, 800c5d8 <_Balloc+0x28>
 800c5ba:	2010      	movs	r0, #16
 800c5bc:	f7ff ff42 	bl	800c444 <malloc>
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	61e0      	str	r0, [r4, #28]
 800c5c4:	b920      	cbnz	r0, 800c5d0 <_Balloc+0x20>
 800c5c6:	4b18      	ldr	r3, [pc, #96]	@ (800c628 <_Balloc+0x78>)
 800c5c8:	4818      	ldr	r0, [pc, #96]	@ (800c62c <_Balloc+0x7c>)
 800c5ca:	216b      	movs	r1, #107	@ 0x6b
 800c5cc:	f7ff f884 	bl	800b6d8 <__assert_func>
 800c5d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5d4:	6006      	str	r6, [r0, #0]
 800c5d6:	60c6      	str	r6, [r0, #12]
 800c5d8:	69e6      	ldr	r6, [r4, #28]
 800c5da:	68f3      	ldr	r3, [r6, #12]
 800c5dc:	b183      	cbz	r3, 800c600 <_Balloc+0x50>
 800c5de:	69e3      	ldr	r3, [r4, #28]
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c5e6:	b9b8      	cbnz	r0, 800c618 <_Balloc+0x68>
 800c5e8:	2101      	movs	r1, #1
 800c5ea:	fa01 f605 	lsl.w	r6, r1, r5
 800c5ee:	1d72      	adds	r2, r6, #5
 800c5f0:	0092      	lsls	r2, r2, #2
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	f000 fe09 	bl	800d20a <_calloc_r>
 800c5f8:	b160      	cbz	r0, 800c614 <_Balloc+0x64>
 800c5fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c5fe:	e00e      	b.n	800c61e <_Balloc+0x6e>
 800c600:	2221      	movs	r2, #33	@ 0x21
 800c602:	2104      	movs	r1, #4
 800c604:	4620      	mov	r0, r4
 800c606:	f000 fe00 	bl	800d20a <_calloc_r>
 800c60a:	69e3      	ldr	r3, [r4, #28]
 800c60c:	60f0      	str	r0, [r6, #12]
 800c60e:	68db      	ldr	r3, [r3, #12]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d1e4      	bne.n	800c5de <_Balloc+0x2e>
 800c614:	2000      	movs	r0, #0
 800c616:	bd70      	pop	{r4, r5, r6, pc}
 800c618:	6802      	ldr	r2, [r0, #0]
 800c61a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c61e:	2300      	movs	r3, #0
 800c620:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c624:	e7f7      	b.n	800c616 <_Balloc+0x66>
 800c626:	bf00      	nop
 800c628:	0800d4b4 	.word	0x0800d4b4
 800c62c:	0800d609 	.word	0x0800d609

0800c630 <_Bfree>:
 800c630:	b570      	push	{r4, r5, r6, lr}
 800c632:	69c6      	ldr	r6, [r0, #28]
 800c634:	4605      	mov	r5, r0
 800c636:	460c      	mov	r4, r1
 800c638:	b976      	cbnz	r6, 800c658 <_Bfree+0x28>
 800c63a:	2010      	movs	r0, #16
 800c63c:	f7ff ff02 	bl	800c444 <malloc>
 800c640:	4602      	mov	r2, r0
 800c642:	61e8      	str	r0, [r5, #28]
 800c644:	b920      	cbnz	r0, 800c650 <_Bfree+0x20>
 800c646:	4b09      	ldr	r3, [pc, #36]	@ (800c66c <_Bfree+0x3c>)
 800c648:	4809      	ldr	r0, [pc, #36]	@ (800c670 <_Bfree+0x40>)
 800c64a:	218f      	movs	r1, #143	@ 0x8f
 800c64c:	f7ff f844 	bl	800b6d8 <__assert_func>
 800c650:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c654:	6006      	str	r6, [r0, #0]
 800c656:	60c6      	str	r6, [r0, #12]
 800c658:	b13c      	cbz	r4, 800c66a <_Bfree+0x3a>
 800c65a:	69eb      	ldr	r3, [r5, #28]
 800c65c:	6862      	ldr	r2, [r4, #4]
 800c65e:	68db      	ldr	r3, [r3, #12]
 800c660:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c664:	6021      	str	r1, [r4, #0]
 800c666:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c66a:	bd70      	pop	{r4, r5, r6, pc}
 800c66c:	0800d4b4 	.word	0x0800d4b4
 800c670:	0800d609 	.word	0x0800d609

0800c674 <__multadd>:
 800c674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c678:	690d      	ldr	r5, [r1, #16]
 800c67a:	4607      	mov	r7, r0
 800c67c:	460c      	mov	r4, r1
 800c67e:	461e      	mov	r6, r3
 800c680:	f101 0c14 	add.w	ip, r1, #20
 800c684:	2000      	movs	r0, #0
 800c686:	f8dc 3000 	ldr.w	r3, [ip]
 800c68a:	b299      	uxth	r1, r3
 800c68c:	fb02 6101 	mla	r1, r2, r1, r6
 800c690:	0c1e      	lsrs	r6, r3, #16
 800c692:	0c0b      	lsrs	r3, r1, #16
 800c694:	fb02 3306 	mla	r3, r2, r6, r3
 800c698:	b289      	uxth	r1, r1
 800c69a:	3001      	adds	r0, #1
 800c69c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c6a0:	4285      	cmp	r5, r0
 800c6a2:	f84c 1b04 	str.w	r1, [ip], #4
 800c6a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c6aa:	dcec      	bgt.n	800c686 <__multadd+0x12>
 800c6ac:	b30e      	cbz	r6, 800c6f2 <__multadd+0x7e>
 800c6ae:	68a3      	ldr	r3, [r4, #8]
 800c6b0:	42ab      	cmp	r3, r5
 800c6b2:	dc19      	bgt.n	800c6e8 <__multadd+0x74>
 800c6b4:	6861      	ldr	r1, [r4, #4]
 800c6b6:	4638      	mov	r0, r7
 800c6b8:	3101      	adds	r1, #1
 800c6ba:	f7ff ff79 	bl	800c5b0 <_Balloc>
 800c6be:	4680      	mov	r8, r0
 800c6c0:	b928      	cbnz	r0, 800c6ce <__multadd+0x5a>
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	4b0c      	ldr	r3, [pc, #48]	@ (800c6f8 <__multadd+0x84>)
 800c6c6:	480d      	ldr	r0, [pc, #52]	@ (800c6fc <__multadd+0x88>)
 800c6c8:	21ba      	movs	r1, #186	@ 0xba
 800c6ca:	f7ff f805 	bl	800b6d8 <__assert_func>
 800c6ce:	6922      	ldr	r2, [r4, #16]
 800c6d0:	3202      	adds	r2, #2
 800c6d2:	f104 010c 	add.w	r1, r4, #12
 800c6d6:	0092      	lsls	r2, r2, #2
 800c6d8:	300c      	adds	r0, #12
 800c6da:	f7fe ffee 	bl	800b6ba <memcpy>
 800c6de:	4621      	mov	r1, r4
 800c6e0:	4638      	mov	r0, r7
 800c6e2:	f7ff ffa5 	bl	800c630 <_Bfree>
 800c6e6:	4644      	mov	r4, r8
 800c6e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c6ec:	3501      	adds	r5, #1
 800c6ee:	615e      	str	r6, [r3, #20]
 800c6f0:	6125      	str	r5, [r4, #16]
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6f8:	0800d5f8 	.word	0x0800d5f8
 800c6fc:	0800d609 	.word	0x0800d609

0800c700 <__hi0bits>:
 800c700:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c704:	4603      	mov	r3, r0
 800c706:	bf36      	itet	cc
 800c708:	0403      	lslcc	r3, r0, #16
 800c70a:	2000      	movcs	r0, #0
 800c70c:	2010      	movcc	r0, #16
 800c70e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c712:	bf3c      	itt	cc
 800c714:	021b      	lslcc	r3, r3, #8
 800c716:	3008      	addcc	r0, #8
 800c718:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c71c:	bf3c      	itt	cc
 800c71e:	011b      	lslcc	r3, r3, #4
 800c720:	3004      	addcc	r0, #4
 800c722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c726:	bf3c      	itt	cc
 800c728:	009b      	lslcc	r3, r3, #2
 800c72a:	3002      	addcc	r0, #2
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	db05      	blt.n	800c73c <__hi0bits+0x3c>
 800c730:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c734:	f100 0001 	add.w	r0, r0, #1
 800c738:	bf08      	it	eq
 800c73a:	2020      	moveq	r0, #32
 800c73c:	4770      	bx	lr

0800c73e <__lo0bits>:
 800c73e:	6803      	ldr	r3, [r0, #0]
 800c740:	4602      	mov	r2, r0
 800c742:	f013 0007 	ands.w	r0, r3, #7
 800c746:	d00b      	beq.n	800c760 <__lo0bits+0x22>
 800c748:	07d9      	lsls	r1, r3, #31
 800c74a:	d421      	bmi.n	800c790 <__lo0bits+0x52>
 800c74c:	0798      	lsls	r0, r3, #30
 800c74e:	bf49      	itett	mi
 800c750:	085b      	lsrmi	r3, r3, #1
 800c752:	089b      	lsrpl	r3, r3, #2
 800c754:	2001      	movmi	r0, #1
 800c756:	6013      	strmi	r3, [r2, #0]
 800c758:	bf5c      	itt	pl
 800c75a:	6013      	strpl	r3, [r2, #0]
 800c75c:	2002      	movpl	r0, #2
 800c75e:	4770      	bx	lr
 800c760:	b299      	uxth	r1, r3
 800c762:	b909      	cbnz	r1, 800c768 <__lo0bits+0x2a>
 800c764:	0c1b      	lsrs	r3, r3, #16
 800c766:	2010      	movs	r0, #16
 800c768:	b2d9      	uxtb	r1, r3
 800c76a:	b909      	cbnz	r1, 800c770 <__lo0bits+0x32>
 800c76c:	3008      	adds	r0, #8
 800c76e:	0a1b      	lsrs	r3, r3, #8
 800c770:	0719      	lsls	r1, r3, #28
 800c772:	bf04      	itt	eq
 800c774:	091b      	lsreq	r3, r3, #4
 800c776:	3004      	addeq	r0, #4
 800c778:	0799      	lsls	r1, r3, #30
 800c77a:	bf04      	itt	eq
 800c77c:	089b      	lsreq	r3, r3, #2
 800c77e:	3002      	addeq	r0, #2
 800c780:	07d9      	lsls	r1, r3, #31
 800c782:	d403      	bmi.n	800c78c <__lo0bits+0x4e>
 800c784:	085b      	lsrs	r3, r3, #1
 800c786:	f100 0001 	add.w	r0, r0, #1
 800c78a:	d003      	beq.n	800c794 <__lo0bits+0x56>
 800c78c:	6013      	str	r3, [r2, #0]
 800c78e:	4770      	bx	lr
 800c790:	2000      	movs	r0, #0
 800c792:	4770      	bx	lr
 800c794:	2020      	movs	r0, #32
 800c796:	4770      	bx	lr

0800c798 <__i2b>:
 800c798:	b510      	push	{r4, lr}
 800c79a:	460c      	mov	r4, r1
 800c79c:	2101      	movs	r1, #1
 800c79e:	f7ff ff07 	bl	800c5b0 <_Balloc>
 800c7a2:	4602      	mov	r2, r0
 800c7a4:	b928      	cbnz	r0, 800c7b2 <__i2b+0x1a>
 800c7a6:	4b05      	ldr	r3, [pc, #20]	@ (800c7bc <__i2b+0x24>)
 800c7a8:	4805      	ldr	r0, [pc, #20]	@ (800c7c0 <__i2b+0x28>)
 800c7aa:	f240 1145 	movw	r1, #325	@ 0x145
 800c7ae:	f7fe ff93 	bl	800b6d8 <__assert_func>
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	6144      	str	r4, [r0, #20]
 800c7b6:	6103      	str	r3, [r0, #16]
 800c7b8:	bd10      	pop	{r4, pc}
 800c7ba:	bf00      	nop
 800c7bc:	0800d5f8 	.word	0x0800d5f8
 800c7c0:	0800d609 	.word	0x0800d609

0800c7c4 <__multiply>:
 800c7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7c8:	4614      	mov	r4, r2
 800c7ca:	690a      	ldr	r2, [r1, #16]
 800c7cc:	6923      	ldr	r3, [r4, #16]
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	bfa8      	it	ge
 800c7d2:	4623      	movge	r3, r4
 800c7d4:	460f      	mov	r7, r1
 800c7d6:	bfa4      	itt	ge
 800c7d8:	460c      	movge	r4, r1
 800c7da:	461f      	movge	r7, r3
 800c7dc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c7e0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c7e4:	68a3      	ldr	r3, [r4, #8]
 800c7e6:	6861      	ldr	r1, [r4, #4]
 800c7e8:	eb0a 0609 	add.w	r6, sl, r9
 800c7ec:	42b3      	cmp	r3, r6
 800c7ee:	b085      	sub	sp, #20
 800c7f0:	bfb8      	it	lt
 800c7f2:	3101      	addlt	r1, #1
 800c7f4:	f7ff fedc 	bl	800c5b0 <_Balloc>
 800c7f8:	b930      	cbnz	r0, 800c808 <__multiply+0x44>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	4b44      	ldr	r3, [pc, #272]	@ (800c910 <__multiply+0x14c>)
 800c7fe:	4845      	ldr	r0, [pc, #276]	@ (800c914 <__multiply+0x150>)
 800c800:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c804:	f7fe ff68 	bl	800b6d8 <__assert_func>
 800c808:	f100 0514 	add.w	r5, r0, #20
 800c80c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c810:	462b      	mov	r3, r5
 800c812:	2200      	movs	r2, #0
 800c814:	4543      	cmp	r3, r8
 800c816:	d321      	bcc.n	800c85c <__multiply+0x98>
 800c818:	f107 0114 	add.w	r1, r7, #20
 800c81c:	f104 0214 	add.w	r2, r4, #20
 800c820:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c824:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c828:	9302      	str	r3, [sp, #8]
 800c82a:	1b13      	subs	r3, r2, r4
 800c82c:	3b15      	subs	r3, #21
 800c82e:	f023 0303 	bic.w	r3, r3, #3
 800c832:	3304      	adds	r3, #4
 800c834:	f104 0715 	add.w	r7, r4, #21
 800c838:	42ba      	cmp	r2, r7
 800c83a:	bf38      	it	cc
 800c83c:	2304      	movcc	r3, #4
 800c83e:	9301      	str	r3, [sp, #4]
 800c840:	9b02      	ldr	r3, [sp, #8]
 800c842:	9103      	str	r1, [sp, #12]
 800c844:	428b      	cmp	r3, r1
 800c846:	d80c      	bhi.n	800c862 <__multiply+0x9e>
 800c848:	2e00      	cmp	r6, #0
 800c84a:	dd03      	ble.n	800c854 <__multiply+0x90>
 800c84c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c850:	2b00      	cmp	r3, #0
 800c852:	d05b      	beq.n	800c90c <__multiply+0x148>
 800c854:	6106      	str	r6, [r0, #16]
 800c856:	b005      	add	sp, #20
 800c858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c85c:	f843 2b04 	str.w	r2, [r3], #4
 800c860:	e7d8      	b.n	800c814 <__multiply+0x50>
 800c862:	f8b1 a000 	ldrh.w	sl, [r1]
 800c866:	f1ba 0f00 	cmp.w	sl, #0
 800c86a:	d024      	beq.n	800c8b6 <__multiply+0xf2>
 800c86c:	f104 0e14 	add.w	lr, r4, #20
 800c870:	46a9      	mov	r9, r5
 800c872:	f04f 0c00 	mov.w	ip, #0
 800c876:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c87a:	f8d9 3000 	ldr.w	r3, [r9]
 800c87e:	fa1f fb87 	uxth.w	fp, r7
 800c882:	b29b      	uxth	r3, r3
 800c884:	fb0a 330b 	mla	r3, sl, fp, r3
 800c888:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c88c:	f8d9 7000 	ldr.w	r7, [r9]
 800c890:	4463      	add	r3, ip
 800c892:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c896:	fb0a c70b 	mla	r7, sl, fp, ip
 800c89a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c8a4:	4572      	cmp	r2, lr
 800c8a6:	f849 3b04 	str.w	r3, [r9], #4
 800c8aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c8ae:	d8e2      	bhi.n	800c876 <__multiply+0xb2>
 800c8b0:	9b01      	ldr	r3, [sp, #4]
 800c8b2:	f845 c003 	str.w	ip, [r5, r3]
 800c8b6:	9b03      	ldr	r3, [sp, #12]
 800c8b8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c8bc:	3104      	adds	r1, #4
 800c8be:	f1b9 0f00 	cmp.w	r9, #0
 800c8c2:	d021      	beq.n	800c908 <__multiply+0x144>
 800c8c4:	682b      	ldr	r3, [r5, #0]
 800c8c6:	f104 0c14 	add.w	ip, r4, #20
 800c8ca:	46ae      	mov	lr, r5
 800c8cc:	f04f 0a00 	mov.w	sl, #0
 800c8d0:	f8bc b000 	ldrh.w	fp, [ip]
 800c8d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c8d8:	fb09 770b 	mla	r7, r9, fp, r7
 800c8dc:	4457      	add	r7, sl
 800c8de:	b29b      	uxth	r3, r3
 800c8e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c8e4:	f84e 3b04 	str.w	r3, [lr], #4
 800c8e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c8ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c8f0:	f8be 3000 	ldrh.w	r3, [lr]
 800c8f4:	fb09 330a 	mla	r3, r9, sl, r3
 800c8f8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c8fc:	4562      	cmp	r2, ip
 800c8fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c902:	d8e5      	bhi.n	800c8d0 <__multiply+0x10c>
 800c904:	9f01      	ldr	r7, [sp, #4]
 800c906:	51eb      	str	r3, [r5, r7]
 800c908:	3504      	adds	r5, #4
 800c90a:	e799      	b.n	800c840 <__multiply+0x7c>
 800c90c:	3e01      	subs	r6, #1
 800c90e:	e79b      	b.n	800c848 <__multiply+0x84>
 800c910:	0800d5f8 	.word	0x0800d5f8
 800c914:	0800d609 	.word	0x0800d609

0800c918 <__pow5mult>:
 800c918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c91c:	4615      	mov	r5, r2
 800c91e:	f012 0203 	ands.w	r2, r2, #3
 800c922:	4607      	mov	r7, r0
 800c924:	460e      	mov	r6, r1
 800c926:	d007      	beq.n	800c938 <__pow5mult+0x20>
 800c928:	4c25      	ldr	r4, [pc, #148]	@ (800c9c0 <__pow5mult+0xa8>)
 800c92a:	3a01      	subs	r2, #1
 800c92c:	2300      	movs	r3, #0
 800c92e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c932:	f7ff fe9f 	bl	800c674 <__multadd>
 800c936:	4606      	mov	r6, r0
 800c938:	10ad      	asrs	r5, r5, #2
 800c93a:	d03d      	beq.n	800c9b8 <__pow5mult+0xa0>
 800c93c:	69fc      	ldr	r4, [r7, #28]
 800c93e:	b97c      	cbnz	r4, 800c960 <__pow5mult+0x48>
 800c940:	2010      	movs	r0, #16
 800c942:	f7ff fd7f 	bl	800c444 <malloc>
 800c946:	4602      	mov	r2, r0
 800c948:	61f8      	str	r0, [r7, #28]
 800c94a:	b928      	cbnz	r0, 800c958 <__pow5mult+0x40>
 800c94c:	4b1d      	ldr	r3, [pc, #116]	@ (800c9c4 <__pow5mult+0xac>)
 800c94e:	481e      	ldr	r0, [pc, #120]	@ (800c9c8 <__pow5mult+0xb0>)
 800c950:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c954:	f7fe fec0 	bl	800b6d8 <__assert_func>
 800c958:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c95c:	6004      	str	r4, [r0, #0]
 800c95e:	60c4      	str	r4, [r0, #12]
 800c960:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c964:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c968:	b94c      	cbnz	r4, 800c97e <__pow5mult+0x66>
 800c96a:	f240 2171 	movw	r1, #625	@ 0x271
 800c96e:	4638      	mov	r0, r7
 800c970:	f7ff ff12 	bl	800c798 <__i2b>
 800c974:	2300      	movs	r3, #0
 800c976:	f8c8 0008 	str.w	r0, [r8, #8]
 800c97a:	4604      	mov	r4, r0
 800c97c:	6003      	str	r3, [r0, #0]
 800c97e:	f04f 0900 	mov.w	r9, #0
 800c982:	07eb      	lsls	r3, r5, #31
 800c984:	d50a      	bpl.n	800c99c <__pow5mult+0x84>
 800c986:	4631      	mov	r1, r6
 800c988:	4622      	mov	r2, r4
 800c98a:	4638      	mov	r0, r7
 800c98c:	f7ff ff1a 	bl	800c7c4 <__multiply>
 800c990:	4631      	mov	r1, r6
 800c992:	4680      	mov	r8, r0
 800c994:	4638      	mov	r0, r7
 800c996:	f7ff fe4b 	bl	800c630 <_Bfree>
 800c99a:	4646      	mov	r6, r8
 800c99c:	106d      	asrs	r5, r5, #1
 800c99e:	d00b      	beq.n	800c9b8 <__pow5mult+0xa0>
 800c9a0:	6820      	ldr	r0, [r4, #0]
 800c9a2:	b938      	cbnz	r0, 800c9b4 <__pow5mult+0x9c>
 800c9a4:	4622      	mov	r2, r4
 800c9a6:	4621      	mov	r1, r4
 800c9a8:	4638      	mov	r0, r7
 800c9aa:	f7ff ff0b 	bl	800c7c4 <__multiply>
 800c9ae:	6020      	str	r0, [r4, #0]
 800c9b0:	f8c0 9000 	str.w	r9, [r0]
 800c9b4:	4604      	mov	r4, r0
 800c9b6:	e7e4      	b.n	800c982 <__pow5mult+0x6a>
 800c9b8:	4630      	mov	r0, r6
 800c9ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9be:	bf00      	nop
 800c9c0:	0800d664 	.word	0x0800d664
 800c9c4:	0800d4b4 	.word	0x0800d4b4
 800c9c8:	0800d609 	.word	0x0800d609

0800c9cc <__lshift>:
 800c9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9d0:	460c      	mov	r4, r1
 800c9d2:	6849      	ldr	r1, [r1, #4]
 800c9d4:	6923      	ldr	r3, [r4, #16]
 800c9d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c9da:	68a3      	ldr	r3, [r4, #8]
 800c9dc:	4607      	mov	r7, r0
 800c9de:	4691      	mov	r9, r2
 800c9e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c9e4:	f108 0601 	add.w	r6, r8, #1
 800c9e8:	42b3      	cmp	r3, r6
 800c9ea:	db0b      	blt.n	800ca04 <__lshift+0x38>
 800c9ec:	4638      	mov	r0, r7
 800c9ee:	f7ff fddf 	bl	800c5b0 <_Balloc>
 800c9f2:	4605      	mov	r5, r0
 800c9f4:	b948      	cbnz	r0, 800ca0a <__lshift+0x3e>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	4b28      	ldr	r3, [pc, #160]	@ (800ca9c <__lshift+0xd0>)
 800c9fa:	4829      	ldr	r0, [pc, #164]	@ (800caa0 <__lshift+0xd4>)
 800c9fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ca00:	f7fe fe6a 	bl	800b6d8 <__assert_func>
 800ca04:	3101      	adds	r1, #1
 800ca06:	005b      	lsls	r3, r3, #1
 800ca08:	e7ee      	b.n	800c9e8 <__lshift+0x1c>
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	f100 0114 	add.w	r1, r0, #20
 800ca10:	f100 0210 	add.w	r2, r0, #16
 800ca14:	4618      	mov	r0, r3
 800ca16:	4553      	cmp	r3, sl
 800ca18:	db33      	blt.n	800ca82 <__lshift+0xb6>
 800ca1a:	6920      	ldr	r0, [r4, #16]
 800ca1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca20:	f104 0314 	add.w	r3, r4, #20
 800ca24:	f019 091f 	ands.w	r9, r9, #31
 800ca28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ca30:	d02b      	beq.n	800ca8a <__lshift+0xbe>
 800ca32:	f1c9 0e20 	rsb	lr, r9, #32
 800ca36:	468a      	mov	sl, r1
 800ca38:	2200      	movs	r2, #0
 800ca3a:	6818      	ldr	r0, [r3, #0]
 800ca3c:	fa00 f009 	lsl.w	r0, r0, r9
 800ca40:	4310      	orrs	r0, r2
 800ca42:	f84a 0b04 	str.w	r0, [sl], #4
 800ca46:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca4a:	459c      	cmp	ip, r3
 800ca4c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ca50:	d8f3      	bhi.n	800ca3a <__lshift+0x6e>
 800ca52:	ebac 0304 	sub.w	r3, ip, r4
 800ca56:	3b15      	subs	r3, #21
 800ca58:	f023 0303 	bic.w	r3, r3, #3
 800ca5c:	3304      	adds	r3, #4
 800ca5e:	f104 0015 	add.w	r0, r4, #21
 800ca62:	4584      	cmp	ip, r0
 800ca64:	bf38      	it	cc
 800ca66:	2304      	movcc	r3, #4
 800ca68:	50ca      	str	r2, [r1, r3]
 800ca6a:	b10a      	cbz	r2, 800ca70 <__lshift+0xa4>
 800ca6c:	f108 0602 	add.w	r6, r8, #2
 800ca70:	3e01      	subs	r6, #1
 800ca72:	4638      	mov	r0, r7
 800ca74:	612e      	str	r6, [r5, #16]
 800ca76:	4621      	mov	r1, r4
 800ca78:	f7ff fdda 	bl	800c630 <_Bfree>
 800ca7c:	4628      	mov	r0, r5
 800ca7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca82:	f842 0f04 	str.w	r0, [r2, #4]!
 800ca86:	3301      	adds	r3, #1
 800ca88:	e7c5      	b.n	800ca16 <__lshift+0x4a>
 800ca8a:	3904      	subs	r1, #4
 800ca8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca90:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca94:	459c      	cmp	ip, r3
 800ca96:	d8f9      	bhi.n	800ca8c <__lshift+0xc0>
 800ca98:	e7ea      	b.n	800ca70 <__lshift+0xa4>
 800ca9a:	bf00      	nop
 800ca9c:	0800d5f8 	.word	0x0800d5f8
 800caa0:	0800d609 	.word	0x0800d609

0800caa4 <__mcmp>:
 800caa4:	690a      	ldr	r2, [r1, #16]
 800caa6:	4603      	mov	r3, r0
 800caa8:	6900      	ldr	r0, [r0, #16]
 800caaa:	1a80      	subs	r0, r0, r2
 800caac:	b530      	push	{r4, r5, lr}
 800caae:	d10e      	bne.n	800cace <__mcmp+0x2a>
 800cab0:	3314      	adds	r3, #20
 800cab2:	3114      	adds	r1, #20
 800cab4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cab8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cabc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cac0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cac4:	4295      	cmp	r5, r2
 800cac6:	d003      	beq.n	800cad0 <__mcmp+0x2c>
 800cac8:	d205      	bcs.n	800cad6 <__mcmp+0x32>
 800caca:	f04f 30ff 	mov.w	r0, #4294967295
 800cace:	bd30      	pop	{r4, r5, pc}
 800cad0:	42a3      	cmp	r3, r4
 800cad2:	d3f3      	bcc.n	800cabc <__mcmp+0x18>
 800cad4:	e7fb      	b.n	800cace <__mcmp+0x2a>
 800cad6:	2001      	movs	r0, #1
 800cad8:	e7f9      	b.n	800cace <__mcmp+0x2a>
	...

0800cadc <__mdiff>:
 800cadc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae0:	4689      	mov	r9, r1
 800cae2:	4606      	mov	r6, r0
 800cae4:	4611      	mov	r1, r2
 800cae6:	4648      	mov	r0, r9
 800cae8:	4614      	mov	r4, r2
 800caea:	f7ff ffdb 	bl	800caa4 <__mcmp>
 800caee:	1e05      	subs	r5, r0, #0
 800caf0:	d112      	bne.n	800cb18 <__mdiff+0x3c>
 800caf2:	4629      	mov	r1, r5
 800caf4:	4630      	mov	r0, r6
 800caf6:	f7ff fd5b 	bl	800c5b0 <_Balloc>
 800cafa:	4602      	mov	r2, r0
 800cafc:	b928      	cbnz	r0, 800cb0a <__mdiff+0x2e>
 800cafe:	4b3f      	ldr	r3, [pc, #252]	@ (800cbfc <__mdiff+0x120>)
 800cb00:	f240 2137 	movw	r1, #567	@ 0x237
 800cb04:	483e      	ldr	r0, [pc, #248]	@ (800cc00 <__mdiff+0x124>)
 800cb06:	f7fe fde7 	bl	800b6d8 <__assert_func>
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb10:	4610      	mov	r0, r2
 800cb12:	b003      	add	sp, #12
 800cb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb18:	bfbc      	itt	lt
 800cb1a:	464b      	movlt	r3, r9
 800cb1c:	46a1      	movlt	r9, r4
 800cb1e:	4630      	mov	r0, r6
 800cb20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cb24:	bfba      	itte	lt
 800cb26:	461c      	movlt	r4, r3
 800cb28:	2501      	movlt	r5, #1
 800cb2a:	2500      	movge	r5, #0
 800cb2c:	f7ff fd40 	bl	800c5b0 <_Balloc>
 800cb30:	4602      	mov	r2, r0
 800cb32:	b918      	cbnz	r0, 800cb3c <__mdiff+0x60>
 800cb34:	4b31      	ldr	r3, [pc, #196]	@ (800cbfc <__mdiff+0x120>)
 800cb36:	f240 2145 	movw	r1, #581	@ 0x245
 800cb3a:	e7e3      	b.n	800cb04 <__mdiff+0x28>
 800cb3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cb40:	6926      	ldr	r6, [r4, #16]
 800cb42:	60c5      	str	r5, [r0, #12]
 800cb44:	f109 0310 	add.w	r3, r9, #16
 800cb48:	f109 0514 	add.w	r5, r9, #20
 800cb4c:	f104 0e14 	add.w	lr, r4, #20
 800cb50:	f100 0b14 	add.w	fp, r0, #20
 800cb54:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cb58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cb5c:	9301      	str	r3, [sp, #4]
 800cb5e:	46d9      	mov	r9, fp
 800cb60:	f04f 0c00 	mov.w	ip, #0
 800cb64:	9b01      	ldr	r3, [sp, #4]
 800cb66:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cb6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cb6e:	9301      	str	r3, [sp, #4]
 800cb70:	fa1f f38a 	uxth.w	r3, sl
 800cb74:	4619      	mov	r1, r3
 800cb76:	b283      	uxth	r3, r0
 800cb78:	1acb      	subs	r3, r1, r3
 800cb7a:	0c00      	lsrs	r0, r0, #16
 800cb7c:	4463      	add	r3, ip
 800cb7e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cb82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cb8c:	4576      	cmp	r6, lr
 800cb8e:	f849 3b04 	str.w	r3, [r9], #4
 800cb92:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cb96:	d8e5      	bhi.n	800cb64 <__mdiff+0x88>
 800cb98:	1b33      	subs	r3, r6, r4
 800cb9a:	3b15      	subs	r3, #21
 800cb9c:	f023 0303 	bic.w	r3, r3, #3
 800cba0:	3415      	adds	r4, #21
 800cba2:	3304      	adds	r3, #4
 800cba4:	42a6      	cmp	r6, r4
 800cba6:	bf38      	it	cc
 800cba8:	2304      	movcc	r3, #4
 800cbaa:	441d      	add	r5, r3
 800cbac:	445b      	add	r3, fp
 800cbae:	461e      	mov	r6, r3
 800cbb0:	462c      	mov	r4, r5
 800cbb2:	4544      	cmp	r4, r8
 800cbb4:	d30e      	bcc.n	800cbd4 <__mdiff+0xf8>
 800cbb6:	f108 0103 	add.w	r1, r8, #3
 800cbba:	1b49      	subs	r1, r1, r5
 800cbbc:	f021 0103 	bic.w	r1, r1, #3
 800cbc0:	3d03      	subs	r5, #3
 800cbc2:	45a8      	cmp	r8, r5
 800cbc4:	bf38      	it	cc
 800cbc6:	2100      	movcc	r1, #0
 800cbc8:	440b      	add	r3, r1
 800cbca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cbce:	b191      	cbz	r1, 800cbf6 <__mdiff+0x11a>
 800cbd0:	6117      	str	r7, [r2, #16]
 800cbd2:	e79d      	b.n	800cb10 <__mdiff+0x34>
 800cbd4:	f854 1b04 	ldr.w	r1, [r4], #4
 800cbd8:	46e6      	mov	lr, ip
 800cbda:	0c08      	lsrs	r0, r1, #16
 800cbdc:	fa1c fc81 	uxtah	ip, ip, r1
 800cbe0:	4471      	add	r1, lr
 800cbe2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cbe6:	b289      	uxth	r1, r1
 800cbe8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cbec:	f846 1b04 	str.w	r1, [r6], #4
 800cbf0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cbf4:	e7dd      	b.n	800cbb2 <__mdiff+0xd6>
 800cbf6:	3f01      	subs	r7, #1
 800cbf8:	e7e7      	b.n	800cbca <__mdiff+0xee>
 800cbfa:	bf00      	nop
 800cbfc:	0800d5f8 	.word	0x0800d5f8
 800cc00:	0800d609 	.word	0x0800d609

0800cc04 <__d2b>:
 800cc04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc08:	460f      	mov	r7, r1
 800cc0a:	2101      	movs	r1, #1
 800cc0c:	ec59 8b10 	vmov	r8, r9, d0
 800cc10:	4616      	mov	r6, r2
 800cc12:	f7ff fccd 	bl	800c5b0 <_Balloc>
 800cc16:	4604      	mov	r4, r0
 800cc18:	b930      	cbnz	r0, 800cc28 <__d2b+0x24>
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	4b23      	ldr	r3, [pc, #140]	@ (800ccac <__d2b+0xa8>)
 800cc1e:	4824      	ldr	r0, [pc, #144]	@ (800ccb0 <__d2b+0xac>)
 800cc20:	f240 310f 	movw	r1, #783	@ 0x30f
 800cc24:	f7fe fd58 	bl	800b6d8 <__assert_func>
 800cc28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cc2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc30:	b10d      	cbz	r5, 800cc36 <__d2b+0x32>
 800cc32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cc36:	9301      	str	r3, [sp, #4]
 800cc38:	f1b8 0300 	subs.w	r3, r8, #0
 800cc3c:	d023      	beq.n	800cc86 <__d2b+0x82>
 800cc3e:	4668      	mov	r0, sp
 800cc40:	9300      	str	r3, [sp, #0]
 800cc42:	f7ff fd7c 	bl	800c73e <__lo0bits>
 800cc46:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cc4a:	b1d0      	cbz	r0, 800cc82 <__d2b+0x7e>
 800cc4c:	f1c0 0320 	rsb	r3, r0, #32
 800cc50:	fa02 f303 	lsl.w	r3, r2, r3
 800cc54:	430b      	orrs	r3, r1
 800cc56:	40c2      	lsrs	r2, r0
 800cc58:	6163      	str	r3, [r4, #20]
 800cc5a:	9201      	str	r2, [sp, #4]
 800cc5c:	9b01      	ldr	r3, [sp, #4]
 800cc5e:	61a3      	str	r3, [r4, #24]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	bf0c      	ite	eq
 800cc64:	2201      	moveq	r2, #1
 800cc66:	2202      	movne	r2, #2
 800cc68:	6122      	str	r2, [r4, #16]
 800cc6a:	b1a5      	cbz	r5, 800cc96 <__d2b+0x92>
 800cc6c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cc70:	4405      	add	r5, r0
 800cc72:	603d      	str	r5, [r7, #0]
 800cc74:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cc78:	6030      	str	r0, [r6, #0]
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	b003      	add	sp, #12
 800cc7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc82:	6161      	str	r1, [r4, #20]
 800cc84:	e7ea      	b.n	800cc5c <__d2b+0x58>
 800cc86:	a801      	add	r0, sp, #4
 800cc88:	f7ff fd59 	bl	800c73e <__lo0bits>
 800cc8c:	9b01      	ldr	r3, [sp, #4]
 800cc8e:	6163      	str	r3, [r4, #20]
 800cc90:	3020      	adds	r0, #32
 800cc92:	2201      	movs	r2, #1
 800cc94:	e7e8      	b.n	800cc68 <__d2b+0x64>
 800cc96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cc9a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cc9e:	6038      	str	r0, [r7, #0]
 800cca0:	6918      	ldr	r0, [r3, #16]
 800cca2:	f7ff fd2d 	bl	800c700 <__hi0bits>
 800cca6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ccaa:	e7e5      	b.n	800cc78 <__d2b+0x74>
 800ccac:	0800d5f8 	.word	0x0800d5f8
 800ccb0:	0800d609 	.word	0x0800d609

0800ccb4 <__sfputc_r>:
 800ccb4:	6893      	ldr	r3, [r2, #8]
 800ccb6:	3b01      	subs	r3, #1
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	b410      	push	{r4}
 800ccbc:	6093      	str	r3, [r2, #8]
 800ccbe:	da08      	bge.n	800ccd2 <__sfputc_r+0x1e>
 800ccc0:	6994      	ldr	r4, [r2, #24]
 800ccc2:	42a3      	cmp	r3, r4
 800ccc4:	db01      	blt.n	800ccca <__sfputc_r+0x16>
 800ccc6:	290a      	cmp	r1, #10
 800ccc8:	d103      	bne.n	800ccd2 <__sfputc_r+0x1e>
 800ccca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccce:	f000 b9f1 	b.w	800d0b4 <__swbuf_r>
 800ccd2:	6813      	ldr	r3, [r2, #0]
 800ccd4:	1c58      	adds	r0, r3, #1
 800ccd6:	6010      	str	r0, [r2, #0]
 800ccd8:	7019      	strb	r1, [r3, #0]
 800ccda:	4608      	mov	r0, r1
 800ccdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cce0:	4770      	bx	lr

0800cce2 <__sfputs_r>:
 800cce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cce4:	4606      	mov	r6, r0
 800cce6:	460f      	mov	r7, r1
 800cce8:	4614      	mov	r4, r2
 800ccea:	18d5      	adds	r5, r2, r3
 800ccec:	42ac      	cmp	r4, r5
 800ccee:	d101      	bne.n	800ccf4 <__sfputs_r+0x12>
 800ccf0:	2000      	movs	r0, #0
 800ccf2:	e007      	b.n	800cd04 <__sfputs_r+0x22>
 800ccf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccf8:	463a      	mov	r2, r7
 800ccfa:	4630      	mov	r0, r6
 800ccfc:	f7ff ffda 	bl	800ccb4 <__sfputc_r>
 800cd00:	1c43      	adds	r3, r0, #1
 800cd02:	d1f3      	bne.n	800ccec <__sfputs_r+0xa>
 800cd04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cd08 <_vfiprintf_r>:
 800cd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd0c:	460d      	mov	r5, r1
 800cd0e:	b09d      	sub	sp, #116	@ 0x74
 800cd10:	4614      	mov	r4, r2
 800cd12:	4698      	mov	r8, r3
 800cd14:	4606      	mov	r6, r0
 800cd16:	b118      	cbz	r0, 800cd20 <_vfiprintf_r+0x18>
 800cd18:	6a03      	ldr	r3, [r0, #32]
 800cd1a:	b90b      	cbnz	r3, 800cd20 <_vfiprintf_r+0x18>
 800cd1c:	f7fe fbc2 	bl	800b4a4 <__sinit>
 800cd20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd22:	07d9      	lsls	r1, r3, #31
 800cd24:	d405      	bmi.n	800cd32 <_vfiprintf_r+0x2a>
 800cd26:	89ab      	ldrh	r3, [r5, #12]
 800cd28:	059a      	lsls	r2, r3, #22
 800cd2a:	d402      	bmi.n	800cd32 <_vfiprintf_r+0x2a>
 800cd2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd2e:	f7fe fcc2 	bl	800b6b6 <__retarget_lock_acquire_recursive>
 800cd32:	89ab      	ldrh	r3, [r5, #12]
 800cd34:	071b      	lsls	r3, r3, #28
 800cd36:	d501      	bpl.n	800cd3c <_vfiprintf_r+0x34>
 800cd38:	692b      	ldr	r3, [r5, #16]
 800cd3a:	b99b      	cbnz	r3, 800cd64 <_vfiprintf_r+0x5c>
 800cd3c:	4629      	mov	r1, r5
 800cd3e:	4630      	mov	r0, r6
 800cd40:	f000 f9f6 	bl	800d130 <__swsetup_r>
 800cd44:	b170      	cbz	r0, 800cd64 <_vfiprintf_r+0x5c>
 800cd46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd48:	07dc      	lsls	r4, r3, #31
 800cd4a:	d504      	bpl.n	800cd56 <_vfiprintf_r+0x4e>
 800cd4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd50:	b01d      	add	sp, #116	@ 0x74
 800cd52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd56:	89ab      	ldrh	r3, [r5, #12]
 800cd58:	0598      	lsls	r0, r3, #22
 800cd5a:	d4f7      	bmi.n	800cd4c <_vfiprintf_r+0x44>
 800cd5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd5e:	f7fe fcab 	bl	800b6b8 <__retarget_lock_release_recursive>
 800cd62:	e7f3      	b.n	800cd4c <_vfiprintf_r+0x44>
 800cd64:	2300      	movs	r3, #0
 800cd66:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd68:	2320      	movs	r3, #32
 800cd6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd72:	2330      	movs	r3, #48	@ 0x30
 800cd74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cf24 <_vfiprintf_r+0x21c>
 800cd78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd7c:	f04f 0901 	mov.w	r9, #1
 800cd80:	4623      	mov	r3, r4
 800cd82:	469a      	mov	sl, r3
 800cd84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd88:	b10a      	cbz	r2, 800cd8e <_vfiprintf_r+0x86>
 800cd8a:	2a25      	cmp	r2, #37	@ 0x25
 800cd8c:	d1f9      	bne.n	800cd82 <_vfiprintf_r+0x7a>
 800cd8e:	ebba 0b04 	subs.w	fp, sl, r4
 800cd92:	d00b      	beq.n	800cdac <_vfiprintf_r+0xa4>
 800cd94:	465b      	mov	r3, fp
 800cd96:	4622      	mov	r2, r4
 800cd98:	4629      	mov	r1, r5
 800cd9a:	4630      	mov	r0, r6
 800cd9c:	f7ff ffa1 	bl	800cce2 <__sfputs_r>
 800cda0:	3001      	adds	r0, #1
 800cda2:	f000 80a7 	beq.w	800cef4 <_vfiprintf_r+0x1ec>
 800cda6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cda8:	445a      	add	r2, fp
 800cdaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800cdac:	f89a 3000 	ldrb.w	r3, [sl]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	f000 809f 	beq.w	800cef4 <_vfiprintf_r+0x1ec>
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	f04f 32ff 	mov.w	r2, #4294967295
 800cdbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdc0:	f10a 0a01 	add.w	sl, sl, #1
 800cdc4:	9304      	str	r3, [sp, #16]
 800cdc6:	9307      	str	r3, [sp, #28]
 800cdc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cdcc:	931a      	str	r3, [sp, #104]	@ 0x68
 800cdce:	4654      	mov	r4, sl
 800cdd0:	2205      	movs	r2, #5
 800cdd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdd6:	4853      	ldr	r0, [pc, #332]	@ (800cf24 <_vfiprintf_r+0x21c>)
 800cdd8:	f7f3 f9fa 	bl	80001d0 <memchr>
 800cddc:	9a04      	ldr	r2, [sp, #16]
 800cdde:	b9d8      	cbnz	r0, 800ce18 <_vfiprintf_r+0x110>
 800cde0:	06d1      	lsls	r1, r2, #27
 800cde2:	bf44      	itt	mi
 800cde4:	2320      	movmi	r3, #32
 800cde6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdea:	0713      	lsls	r3, r2, #28
 800cdec:	bf44      	itt	mi
 800cdee:	232b      	movmi	r3, #43	@ 0x2b
 800cdf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdf4:	f89a 3000 	ldrb.w	r3, [sl]
 800cdf8:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdfa:	d015      	beq.n	800ce28 <_vfiprintf_r+0x120>
 800cdfc:	9a07      	ldr	r2, [sp, #28]
 800cdfe:	4654      	mov	r4, sl
 800ce00:	2000      	movs	r0, #0
 800ce02:	f04f 0c0a 	mov.w	ip, #10
 800ce06:	4621      	mov	r1, r4
 800ce08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce0c:	3b30      	subs	r3, #48	@ 0x30
 800ce0e:	2b09      	cmp	r3, #9
 800ce10:	d94b      	bls.n	800ceaa <_vfiprintf_r+0x1a2>
 800ce12:	b1b0      	cbz	r0, 800ce42 <_vfiprintf_r+0x13a>
 800ce14:	9207      	str	r2, [sp, #28]
 800ce16:	e014      	b.n	800ce42 <_vfiprintf_r+0x13a>
 800ce18:	eba0 0308 	sub.w	r3, r0, r8
 800ce1c:	fa09 f303 	lsl.w	r3, r9, r3
 800ce20:	4313      	orrs	r3, r2
 800ce22:	9304      	str	r3, [sp, #16]
 800ce24:	46a2      	mov	sl, r4
 800ce26:	e7d2      	b.n	800cdce <_vfiprintf_r+0xc6>
 800ce28:	9b03      	ldr	r3, [sp, #12]
 800ce2a:	1d19      	adds	r1, r3, #4
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	9103      	str	r1, [sp, #12]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	bfbb      	ittet	lt
 800ce34:	425b      	neglt	r3, r3
 800ce36:	f042 0202 	orrlt.w	r2, r2, #2
 800ce3a:	9307      	strge	r3, [sp, #28]
 800ce3c:	9307      	strlt	r3, [sp, #28]
 800ce3e:	bfb8      	it	lt
 800ce40:	9204      	strlt	r2, [sp, #16]
 800ce42:	7823      	ldrb	r3, [r4, #0]
 800ce44:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce46:	d10a      	bne.n	800ce5e <_vfiprintf_r+0x156>
 800ce48:	7863      	ldrb	r3, [r4, #1]
 800ce4a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce4c:	d132      	bne.n	800ceb4 <_vfiprintf_r+0x1ac>
 800ce4e:	9b03      	ldr	r3, [sp, #12]
 800ce50:	1d1a      	adds	r2, r3, #4
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	9203      	str	r2, [sp, #12]
 800ce56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce5a:	3402      	adds	r4, #2
 800ce5c:	9305      	str	r3, [sp, #20]
 800ce5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cf34 <_vfiprintf_r+0x22c>
 800ce62:	7821      	ldrb	r1, [r4, #0]
 800ce64:	2203      	movs	r2, #3
 800ce66:	4650      	mov	r0, sl
 800ce68:	f7f3 f9b2 	bl	80001d0 <memchr>
 800ce6c:	b138      	cbz	r0, 800ce7e <_vfiprintf_r+0x176>
 800ce6e:	9b04      	ldr	r3, [sp, #16]
 800ce70:	eba0 000a 	sub.w	r0, r0, sl
 800ce74:	2240      	movs	r2, #64	@ 0x40
 800ce76:	4082      	lsls	r2, r0
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	3401      	adds	r4, #1
 800ce7c:	9304      	str	r3, [sp, #16]
 800ce7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce82:	4829      	ldr	r0, [pc, #164]	@ (800cf28 <_vfiprintf_r+0x220>)
 800ce84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce88:	2206      	movs	r2, #6
 800ce8a:	f7f3 f9a1 	bl	80001d0 <memchr>
 800ce8e:	2800      	cmp	r0, #0
 800ce90:	d03f      	beq.n	800cf12 <_vfiprintf_r+0x20a>
 800ce92:	4b26      	ldr	r3, [pc, #152]	@ (800cf2c <_vfiprintf_r+0x224>)
 800ce94:	bb1b      	cbnz	r3, 800cede <_vfiprintf_r+0x1d6>
 800ce96:	9b03      	ldr	r3, [sp, #12]
 800ce98:	3307      	adds	r3, #7
 800ce9a:	f023 0307 	bic.w	r3, r3, #7
 800ce9e:	3308      	adds	r3, #8
 800cea0:	9303      	str	r3, [sp, #12]
 800cea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cea4:	443b      	add	r3, r7
 800cea6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cea8:	e76a      	b.n	800cd80 <_vfiprintf_r+0x78>
 800ceaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800ceae:	460c      	mov	r4, r1
 800ceb0:	2001      	movs	r0, #1
 800ceb2:	e7a8      	b.n	800ce06 <_vfiprintf_r+0xfe>
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	3401      	adds	r4, #1
 800ceb8:	9305      	str	r3, [sp, #20]
 800ceba:	4619      	mov	r1, r3
 800cebc:	f04f 0c0a 	mov.w	ip, #10
 800cec0:	4620      	mov	r0, r4
 800cec2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cec6:	3a30      	subs	r2, #48	@ 0x30
 800cec8:	2a09      	cmp	r2, #9
 800ceca:	d903      	bls.n	800ced4 <_vfiprintf_r+0x1cc>
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d0c6      	beq.n	800ce5e <_vfiprintf_r+0x156>
 800ced0:	9105      	str	r1, [sp, #20]
 800ced2:	e7c4      	b.n	800ce5e <_vfiprintf_r+0x156>
 800ced4:	fb0c 2101 	mla	r1, ip, r1, r2
 800ced8:	4604      	mov	r4, r0
 800ceda:	2301      	movs	r3, #1
 800cedc:	e7f0      	b.n	800cec0 <_vfiprintf_r+0x1b8>
 800cede:	ab03      	add	r3, sp, #12
 800cee0:	9300      	str	r3, [sp, #0]
 800cee2:	462a      	mov	r2, r5
 800cee4:	4b12      	ldr	r3, [pc, #72]	@ (800cf30 <_vfiprintf_r+0x228>)
 800cee6:	a904      	add	r1, sp, #16
 800cee8:	4630      	mov	r0, r6
 800ceea:	f7fd fe97 	bl	800ac1c <_printf_float>
 800ceee:	4607      	mov	r7, r0
 800cef0:	1c78      	adds	r0, r7, #1
 800cef2:	d1d6      	bne.n	800cea2 <_vfiprintf_r+0x19a>
 800cef4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cef6:	07d9      	lsls	r1, r3, #31
 800cef8:	d405      	bmi.n	800cf06 <_vfiprintf_r+0x1fe>
 800cefa:	89ab      	ldrh	r3, [r5, #12]
 800cefc:	059a      	lsls	r2, r3, #22
 800cefe:	d402      	bmi.n	800cf06 <_vfiprintf_r+0x1fe>
 800cf00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf02:	f7fe fbd9 	bl	800b6b8 <__retarget_lock_release_recursive>
 800cf06:	89ab      	ldrh	r3, [r5, #12]
 800cf08:	065b      	lsls	r3, r3, #25
 800cf0a:	f53f af1f 	bmi.w	800cd4c <_vfiprintf_r+0x44>
 800cf0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf10:	e71e      	b.n	800cd50 <_vfiprintf_r+0x48>
 800cf12:	ab03      	add	r3, sp, #12
 800cf14:	9300      	str	r3, [sp, #0]
 800cf16:	462a      	mov	r2, r5
 800cf18:	4b05      	ldr	r3, [pc, #20]	@ (800cf30 <_vfiprintf_r+0x228>)
 800cf1a:	a904      	add	r1, sp, #16
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	f7fe f915 	bl	800b14c <_printf_i>
 800cf22:	e7e4      	b.n	800ceee <_vfiprintf_r+0x1e6>
 800cf24:	0800d760 	.word	0x0800d760
 800cf28:	0800d76a 	.word	0x0800d76a
 800cf2c:	0800ac1d 	.word	0x0800ac1d
 800cf30:	0800cce3 	.word	0x0800cce3
 800cf34:	0800d766 	.word	0x0800d766

0800cf38 <__sflush_r>:
 800cf38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf40:	0716      	lsls	r6, r2, #28
 800cf42:	4605      	mov	r5, r0
 800cf44:	460c      	mov	r4, r1
 800cf46:	d454      	bmi.n	800cff2 <__sflush_r+0xba>
 800cf48:	684b      	ldr	r3, [r1, #4]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	dc02      	bgt.n	800cf54 <__sflush_r+0x1c>
 800cf4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	dd48      	ble.n	800cfe6 <__sflush_r+0xae>
 800cf54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf56:	2e00      	cmp	r6, #0
 800cf58:	d045      	beq.n	800cfe6 <__sflush_r+0xae>
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cf60:	682f      	ldr	r7, [r5, #0]
 800cf62:	6a21      	ldr	r1, [r4, #32]
 800cf64:	602b      	str	r3, [r5, #0]
 800cf66:	d030      	beq.n	800cfca <__sflush_r+0x92>
 800cf68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cf6a:	89a3      	ldrh	r3, [r4, #12]
 800cf6c:	0759      	lsls	r1, r3, #29
 800cf6e:	d505      	bpl.n	800cf7c <__sflush_r+0x44>
 800cf70:	6863      	ldr	r3, [r4, #4]
 800cf72:	1ad2      	subs	r2, r2, r3
 800cf74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cf76:	b10b      	cbz	r3, 800cf7c <__sflush_r+0x44>
 800cf78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cf7a:	1ad2      	subs	r2, r2, r3
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf80:	6a21      	ldr	r1, [r4, #32]
 800cf82:	4628      	mov	r0, r5
 800cf84:	47b0      	blx	r6
 800cf86:	1c43      	adds	r3, r0, #1
 800cf88:	89a3      	ldrh	r3, [r4, #12]
 800cf8a:	d106      	bne.n	800cf9a <__sflush_r+0x62>
 800cf8c:	6829      	ldr	r1, [r5, #0]
 800cf8e:	291d      	cmp	r1, #29
 800cf90:	d82b      	bhi.n	800cfea <__sflush_r+0xb2>
 800cf92:	4a2a      	ldr	r2, [pc, #168]	@ (800d03c <__sflush_r+0x104>)
 800cf94:	410a      	asrs	r2, r1
 800cf96:	07d6      	lsls	r6, r2, #31
 800cf98:	d427      	bmi.n	800cfea <__sflush_r+0xb2>
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	6062      	str	r2, [r4, #4]
 800cf9e:	04d9      	lsls	r1, r3, #19
 800cfa0:	6922      	ldr	r2, [r4, #16]
 800cfa2:	6022      	str	r2, [r4, #0]
 800cfa4:	d504      	bpl.n	800cfb0 <__sflush_r+0x78>
 800cfa6:	1c42      	adds	r2, r0, #1
 800cfa8:	d101      	bne.n	800cfae <__sflush_r+0x76>
 800cfaa:	682b      	ldr	r3, [r5, #0]
 800cfac:	b903      	cbnz	r3, 800cfb0 <__sflush_r+0x78>
 800cfae:	6560      	str	r0, [r4, #84]	@ 0x54
 800cfb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cfb2:	602f      	str	r7, [r5, #0]
 800cfb4:	b1b9      	cbz	r1, 800cfe6 <__sflush_r+0xae>
 800cfb6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cfba:	4299      	cmp	r1, r3
 800cfbc:	d002      	beq.n	800cfc4 <__sflush_r+0x8c>
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	f7ff f9f6 	bl	800c3b0 <_free_r>
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	6363      	str	r3, [r4, #52]	@ 0x34
 800cfc8:	e00d      	b.n	800cfe6 <__sflush_r+0xae>
 800cfca:	2301      	movs	r3, #1
 800cfcc:	4628      	mov	r0, r5
 800cfce:	47b0      	blx	r6
 800cfd0:	4602      	mov	r2, r0
 800cfd2:	1c50      	adds	r0, r2, #1
 800cfd4:	d1c9      	bne.n	800cf6a <__sflush_r+0x32>
 800cfd6:	682b      	ldr	r3, [r5, #0]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d0c6      	beq.n	800cf6a <__sflush_r+0x32>
 800cfdc:	2b1d      	cmp	r3, #29
 800cfde:	d001      	beq.n	800cfe4 <__sflush_r+0xac>
 800cfe0:	2b16      	cmp	r3, #22
 800cfe2:	d11e      	bne.n	800d022 <__sflush_r+0xea>
 800cfe4:	602f      	str	r7, [r5, #0]
 800cfe6:	2000      	movs	r0, #0
 800cfe8:	e022      	b.n	800d030 <__sflush_r+0xf8>
 800cfea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfee:	b21b      	sxth	r3, r3
 800cff0:	e01b      	b.n	800d02a <__sflush_r+0xf2>
 800cff2:	690f      	ldr	r7, [r1, #16]
 800cff4:	2f00      	cmp	r7, #0
 800cff6:	d0f6      	beq.n	800cfe6 <__sflush_r+0xae>
 800cff8:	0793      	lsls	r3, r2, #30
 800cffa:	680e      	ldr	r6, [r1, #0]
 800cffc:	bf08      	it	eq
 800cffe:	694b      	ldreq	r3, [r1, #20]
 800d000:	600f      	str	r7, [r1, #0]
 800d002:	bf18      	it	ne
 800d004:	2300      	movne	r3, #0
 800d006:	eba6 0807 	sub.w	r8, r6, r7
 800d00a:	608b      	str	r3, [r1, #8]
 800d00c:	f1b8 0f00 	cmp.w	r8, #0
 800d010:	dde9      	ble.n	800cfe6 <__sflush_r+0xae>
 800d012:	6a21      	ldr	r1, [r4, #32]
 800d014:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d016:	4643      	mov	r3, r8
 800d018:	463a      	mov	r2, r7
 800d01a:	4628      	mov	r0, r5
 800d01c:	47b0      	blx	r6
 800d01e:	2800      	cmp	r0, #0
 800d020:	dc08      	bgt.n	800d034 <__sflush_r+0xfc>
 800d022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d026:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d02a:	81a3      	strh	r3, [r4, #12]
 800d02c:	f04f 30ff 	mov.w	r0, #4294967295
 800d030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d034:	4407      	add	r7, r0
 800d036:	eba8 0800 	sub.w	r8, r8, r0
 800d03a:	e7e7      	b.n	800d00c <__sflush_r+0xd4>
 800d03c:	dfbffffe 	.word	0xdfbffffe

0800d040 <_fflush_r>:
 800d040:	b538      	push	{r3, r4, r5, lr}
 800d042:	690b      	ldr	r3, [r1, #16]
 800d044:	4605      	mov	r5, r0
 800d046:	460c      	mov	r4, r1
 800d048:	b913      	cbnz	r3, 800d050 <_fflush_r+0x10>
 800d04a:	2500      	movs	r5, #0
 800d04c:	4628      	mov	r0, r5
 800d04e:	bd38      	pop	{r3, r4, r5, pc}
 800d050:	b118      	cbz	r0, 800d05a <_fflush_r+0x1a>
 800d052:	6a03      	ldr	r3, [r0, #32]
 800d054:	b90b      	cbnz	r3, 800d05a <_fflush_r+0x1a>
 800d056:	f7fe fa25 	bl	800b4a4 <__sinit>
 800d05a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d0f3      	beq.n	800d04a <_fflush_r+0xa>
 800d062:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d064:	07d0      	lsls	r0, r2, #31
 800d066:	d404      	bmi.n	800d072 <_fflush_r+0x32>
 800d068:	0599      	lsls	r1, r3, #22
 800d06a:	d402      	bmi.n	800d072 <_fflush_r+0x32>
 800d06c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d06e:	f7fe fb22 	bl	800b6b6 <__retarget_lock_acquire_recursive>
 800d072:	4628      	mov	r0, r5
 800d074:	4621      	mov	r1, r4
 800d076:	f7ff ff5f 	bl	800cf38 <__sflush_r>
 800d07a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d07c:	07da      	lsls	r2, r3, #31
 800d07e:	4605      	mov	r5, r0
 800d080:	d4e4      	bmi.n	800d04c <_fflush_r+0xc>
 800d082:	89a3      	ldrh	r3, [r4, #12]
 800d084:	059b      	lsls	r3, r3, #22
 800d086:	d4e1      	bmi.n	800d04c <_fflush_r+0xc>
 800d088:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d08a:	f7fe fb15 	bl	800b6b8 <__retarget_lock_release_recursive>
 800d08e:	e7dd      	b.n	800d04c <_fflush_r+0xc>

0800d090 <fiprintf>:
 800d090:	b40e      	push	{r1, r2, r3}
 800d092:	b503      	push	{r0, r1, lr}
 800d094:	4601      	mov	r1, r0
 800d096:	ab03      	add	r3, sp, #12
 800d098:	4805      	ldr	r0, [pc, #20]	@ (800d0b0 <fiprintf+0x20>)
 800d09a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d09e:	6800      	ldr	r0, [r0, #0]
 800d0a0:	9301      	str	r3, [sp, #4]
 800d0a2:	f7ff fe31 	bl	800cd08 <_vfiprintf_r>
 800d0a6:	b002      	add	sp, #8
 800d0a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0ac:	b003      	add	sp, #12
 800d0ae:	4770      	bx	lr
 800d0b0:	20000064 	.word	0x20000064

0800d0b4 <__swbuf_r>:
 800d0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0b6:	460e      	mov	r6, r1
 800d0b8:	4614      	mov	r4, r2
 800d0ba:	4605      	mov	r5, r0
 800d0bc:	b118      	cbz	r0, 800d0c6 <__swbuf_r+0x12>
 800d0be:	6a03      	ldr	r3, [r0, #32]
 800d0c0:	b90b      	cbnz	r3, 800d0c6 <__swbuf_r+0x12>
 800d0c2:	f7fe f9ef 	bl	800b4a4 <__sinit>
 800d0c6:	69a3      	ldr	r3, [r4, #24]
 800d0c8:	60a3      	str	r3, [r4, #8]
 800d0ca:	89a3      	ldrh	r3, [r4, #12]
 800d0cc:	071a      	lsls	r2, r3, #28
 800d0ce:	d501      	bpl.n	800d0d4 <__swbuf_r+0x20>
 800d0d0:	6923      	ldr	r3, [r4, #16]
 800d0d2:	b943      	cbnz	r3, 800d0e6 <__swbuf_r+0x32>
 800d0d4:	4621      	mov	r1, r4
 800d0d6:	4628      	mov	r0, r5
 800d0d8:	f000 f82a 	bl	800d130 <__swsetup_r>
 800d0dc:	b118      	cbz	r0, 800d0e6 <__swbuf_r+0x32>
 800d0de:	f04f 37ff 	mov.w	r7, #4294967295
 800d0e2:	4638      	mov	r0, r7
 800d0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0e6:	6823      	ldr	r3, [r4, #0]
 800d0e8:	6922      	ldr	r2, [r4, #16]
 800d0ea:	1a98      	subs	r0, r3, r2
 800d0ec:	6963      	ldr	r3, [r4, #20]
 800d0ee:	b2f6      	uxtb	r6, r6
 800d0f0:	4283      	cmp	r3, r0
 800d0f2:	4637      	mov	r7, r6
 800d0f4:	dc05      	bgt.n	800d102 <__swbuf_r+0x4e>
 800d0f6:	4621      	mov	r1, r4
 800d0f8:	4628      	mov	r0, r5
 800d0fa:	f7ff ffa1 	bl	800d040 <_fflush_r>
 800d0fe:	2800      	cmp	r0, #0
 800d100:	d1ed      	bne.n	800d0de <__swbuf_r+0x2a>
 800d102:	68a3      	ldr	r3, [r4, #8]
 800d104:	3b01      	subs	r3, #1
 800d106:	60a3      	str	r3, [r4, #8]
 800d108:	6823      	ldr	r3, [r4, #0]
 800d10a:	1c5a      	adds	r2, r3, #1
 800d10c:	6022      	str	r2, [r4, #0]
 800d10e:	701e      	strb	r6, [r3, #0]
 800d110:	6962      	ldr	r2, [r4, #20]
 800d112:	1c43      	adds	r3, r0, #1
 800d114:	429a      	cmp	r2, r3
 800d116:	d004      	beq.n	800d122 <__swbuf_r+0x6e>
 800d118:	89a3      	ldrh	r3, [r4, #12]
 800d11a:	07db      	lsls	r3, r3, #31
 800d11c:	d5e1      	bpl.n	800d0e2 <__swbuf_r+0x2e>
 800d11e:	2e0a      	cmp	r6, #10
 800d120:	d1df      	bne.n	800d0e2 <__swbuf_r+0x2e>
 800d122:	4621      	mov	r1, r4
 800d124:	4628      	mov	r0, r5
 800d126:	f7ff ff8b 	bl	800d040 <_fflush_r>
 800d12a:	2800      	cmp	r0, #0
 800d12c:	d0d9      	beq.n	800d0e2 <__swbuf_r+0x2e>
 800d12e:	e7d6      	b.n	800d0de <__swbuf_r+0x2a>

0800d130 <__swsetup_r>:
 800d130:	b538      	push	{r3, r4, r5, lr}
 800d132:	4b29      	ldr	r3, [pc, #164]	@ (800d1d8 <__swsetup_r+0xa8>)
 800d134:	4605      	mov	r5, r0
 800d136:	6818      	ldr	r0, [r3, #0]
 800d138:	460c      	mov	r4, r1
 800d13a:	b118      	cbz	r0, 800d144 <__swsetup_r+0x14>
 800d13c:	6a03      	ldr	r3, [r0, #32]
 800d13e:	b90b      	cbnz	r3, 800d144 <__swsetup_r+0x14>
 800d140:	f7fe f9b0 	bl	800b4a4 <__sinit>
 800d144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d148:	0719      	lsls	r1, r3, #28
 800d14a:	d422      	bmi.n	800d192 <__swsetup_r+0x62>
 800d14c:	06da      	lsls	r2, r3, #27
 800d14e:	d407      	bmi.n	800d160 <__swsetup_r+0x30>
 800d150:	2209      	movs	r2, #9
 800d152:	602a      	str	r2, [r5, #0]
 800d154:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d158:	81a3      	strh	r3, [r4, #12]
 800d15a:	f04f 30ff 	mov.w	r0, #4294967295
 800d15e:	e033      	b.n	800d1c8 <__swsetup_r+0x98>
 800d160:	0758      	lsls	r0, r3, #29
 800d162:	d512      	bpl.n	800d18a <__swsetup_r+0x5a>
 800d164:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d166:	b141      	cbz	r1, 800d17a <__swsetup_r+0x4a>
 800d168:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d16c:	4299      	cmp	r1, r3
 800d16e:	d002      	beq.n	800d176 <__swsetup_r+0x46>
 800d170:	4628      	mov	r0, r5
 800d172:	f7ff f91d 	bl	800c3b0 <_free_r>
 800d176:	2300      	movs	r3, #0
 800d178:	6363      	str	r3, [r4, #52]	@ 0x34
 800d17a:	89a3      	ldrh	r3, [r4, #12]
 800d17c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d180:	81a3      	strh	r3, [r4, #12]
 800d182:	2300      	movs	r3, #0
 800d184:	6063      	str	r3, [r4, #4]
 800d186:	6923      	ldr	r3, [r4, #16]
 800d188:	6023      	str	r3, [r4, #0]
 800d18a:	89a3      	ldrh	r3, [r4, #12]
 800d18c:	f043 0308 	orr.w	r3, r3, #8
 800d190:	81a3      	strh	r3, [r4, #12]
 800d192:	6923      	ldr	r3, [r4, #16]
 800d194:	b94b      	cbnz	r3, 800d1aa <__swsetup_r+0x7a>
 800d196:	89a3      	ldrh	r3, [r4, #12]
 800d198:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d19c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1a0:	d003      	beq.n	800d1aa <__swsetup_r+0x7a>
 800d1a2:	4621      	mov	r1, r4
 800d1a4:	4628      	mov	r0, r5
 800d1a6:	f000 f889 	bl	800d2bc <__smakebuf_r>
 800d1aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1ae:	f013 0201 	ands.w	r2, r3, #1
 800d1b2:	d00a      	beq.n	800d1ca <__swsetup_r+0x9a>
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	60a2      	str	r2, [r4, #8]
 800d1b8:	6962      	ldr	r2, [r4, #20]
 800d1ba:	4252      	negs	r2, r2
 800d1bc:	61a2      	str	r2, [r4, #24]
 800d1be:	6922      	ldr	r2, [r4, #16]
 800d1c0:	b942      	cbnz	r2, 800d1d4 <__swsetup_r+0xa4>
 800d1c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d1c6:	d1c5      	bne.n	800d154 <__swsetup_r+0x24>
 800d1c8:	bd38      	pop	{r3, r4, r5, pc}
 800d1ca:	0799      	lsls	r1, r3, #30
 800d1cc:	bf58      	it	pl
 800d1ce:	6962      	ldrpl	r2, [r4, #20]
 800d1d0:	60a2      	str	r2, [r4, #8]
 800d1d2:	e7f4      	b.n	800d1be <__swsetup_r+0x8e>
 800d1d4:	2000      	movs	r0, #0
 800d1d6:	e7f7      	b.n	800d1c8 <__swsetup_r+0x98>
 800d1d8:	20000064 	.word	0x20000064

0800d1dc <_sbrk_r>:
 800d1dc:	b538      	push	{r3, r4, r5, lr}
 800d1de:	4d06      	ldr	r5, [pc, #24]	@ (800d1f8 <_sbrk_r+0x1c>)
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	4604      	mov	r4, r0
 800d1e4:	4608      	mov	r0, r1
 800d1e6:	602b      	str	r3, [r5, #0]
 800d1e8:	f7f6 fe16 	bl	8003e18 <_sbrk>
 800d1ec:	1c43      	adds	r3, r0, #1
 800d1ee:	d102      	bne.n	800d1f6 <_sbrk_r+0x1a>
 800d1f0:	682b      	ldr	r3, [r5, #0]
 800d1f2:	b103      	cbz	r3, 800d1f6 <_sbrk_r+0x1a>
 800d1f4:	6023      	str	r3, [r4, #0]
 800d1f6:	bd38      	pop	{r3, r4, r5, pc}
 800d1f8:	20000f98 	.word	0x20000f98

0800d1fc <abort>:
 800d1fc:	b508      	push	{r3, lr}
 800d1fe:	2006      	movs	r0, #6
 800d200:	f000 f8c0 	bl	800d384 <raise>
 800d204:	2001      	movs	r0, #1
 800d206:	f7f6 fd8f 	bl	8003d28 <_exit>

0800d20a <_calloc_r>:
 800d20a:	b570      	push	{r4, r5, r6, lr}
 800d20c:	fba1 5402 	umull	r5, r4, r1, r2
 800d210:	b93c      	cbnz	r4, 800d222 <_calloc_r+0x18>
 800d212:	4629      	mov	r1, r5
 800d214:	f7ff f940 	bl	800c498 <_malloc_r>
 800d218:	4606      	mov	r6, r0
 800d21a:	b928      	cbnz	r0, 800d228 <_calloc_r+0x1e>
 800d21c:	2600      	movs	r6, #0
 800d21e:	4630      	mov	r0, r6
 800d220:	bd70      	pop	{r4, r5, r6, pc}
 800d222:	220c      	movs	r2, #12
 800d224:	6002      	str	r2, [r0, #0]
 800d226:	e7f9      	b.n	800d21c <_calloc_r+0x12>
 800d228:	462a      	mov	r2, r5
 800d22a:	4621      	mov	r1, r4
 800d22c:	f7fe f9c5 	bl	800b5ba <memset>
 800d230:	e7f5      	b.n	800d21e <_calloc_r+0x14>

0800d232 <__ascii_mbtowc>:
 800d232:	b082      	sub	sp, #8
 800d234:	b901      	cbnz	r1, 800d238 <__ascii_mbtowc+0x6>
 800d236:	a901      	add	r1, sp, #4
 800d238:	b142      	cbz	r2, 800d24c <__ascii_mbtowc+0x1a>
 800d23a:	b14b      	cbz	r3, 800d250 <__ascii_mbtowc+0x1e>
 800d23c:	7813      	ldrb	r3, [r2, #0]
 800d23e:	600b      	str	r3, [r1, #0]
 800d240:	7812      	ldrb	r2, [r2, #0]
 800d242:	1e10      	subs	r0, r2, #0
 800d244:	bf18      	it	ne
 800d246:	2001      	movne	r0, #1
 800d248:	b002      	add	sp, #8
 800d24a:	4770      	bx	lr
 800d24c:	4610      	mov	r0, r2
 800d24e:	e7fb      	b.n	800d248 <__ascii_mbtowc+0x16>
 800d250:	f06f 0001 	mvn.w	r0, #1
 800d254:	e7f8      	b.n	800d248 <__ascii_mbtowc+0x16>

0800d256 <__ascii_wctomb>:
 800d256:	4603      	mov	r3, r0
 800d258:	4608      	mov	r0, r1
 800d25a:	b141      	cbz	r1, 800d26e <__ascii_wctomb+0x18>
 800d25c:	2aff      	cmp	r2, #255	@ 0xff
 800d25e:	d904      	bls.n	800d26a <__ascii_wctomb+0x14>
 800d260:	228a      	movs	r2, #138	@ 0x8a
 800d262:	601a      	str	r2, [r3, #0]
 800d264:	f04f 30ff 	mov.w	r0, #4294967295
 800d268:	4770      	bx	lr
 800d26a:	700a      	strb	r2, [r1, #0]
 800d26c:	2001      	movs	r0, #1
 800d26e:	4770      	bx	lr

0800d270 <__swhatbuf_r>:
 800d270:	b570      	push	{r4, r5, r6, lr}
 800d272:	460c      	mov	r4, r1
 800d274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d278:	2900      	cmp	r1, #0
 800d27a:	b096      	sub	sp, #88	@ 0x58
 800d27c:	4615      	mov	r5, r2
 800d27e:	461e      	mov	r6, r3
 800d280:	da0d      	bge.n	800d29e <__swhatbuf_r+0x2e>
 800d282:	89a3      	ldrh	r3, [r4, #12]
 800d284:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d288:	f04f 0100 	mov.w	r1, #0
 800d28c:	bf14      	ite	ne
 800d28e:	2340      	movne	r3, #64	@ 0x40
 800d290:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d294:	2000      	movs	r0, #0
 800d296:	6031      	str	r1, [r6, #0]
 800d298:	602b      	str	r3, [r5, #0]
 800d29a:	b016      	add	sp, #88	@ 0x58
 800d29c:	bd70      	pop	{r4, r5, r6, pc}
 800d29e:	466a      	mov	r2, sp
 800d2a0:	f000 f878 	bl	800d394 <_fstat_r>
 800d2a4:	2800      	cmp	r0, #0
 800d2a6:	dbec      	blt.n	800d282 <__swhatbuf_r+0x12>
 800d2a8:	9901      	ldr	r1, [sp, #4]
 800d2aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d2ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d2b2:	4259      	negs	r1, r3
 800d2b4:	4159      	adcs	r1, r3
 800d2b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d2ba:	e7eb      	b.n	800d294 <__swhatbuf_r+0x24>

0800d2bc <__smakebuf_r>:
 800d2bc:	898b      	ldrh	r3, [r1, #12]
 800d2be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2c0:	079d      	lsls	r5, r3, #30
 800d2c2:	4606      	mov	r6, r0
 800d2c4:	460c      	mov	r4, r1
 800d2c6:	d507      	bpl.n	800d2d8 <__smakebuf_r+0x1c>
 800d2c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d2cc:	6023      	str	r3, [r4, #0]
 800d2ce:	6123      	str	r3, [r4, #16]
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	6163      	str	r3, [r4, #20]
 800d2d4:	b003      	add	sp, #12
 800d2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2d8:	ab01      	add	r3, sp, #4
 800d2da:	466a      	mov	r2, sp
 800d2dc:	f7ff ffc8 	bl	800d270 <__swhatbuf_r>
 800d2e0:	9f00      	ldr	r7, [sp, #0]
 800d2e2:	4605      	mov	r5, r0
 800d2e4:	4639      	mov	r1, r7
 800d2e6:	4630      	mov	r0, r6
 800d2e8:	f7ff f8d6 	bl	800c498 <_malloc_r>
 800d2ec:	b948      	cbnz	r0, 800d302 <__smakebuf_r+0x46>
 800d2ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2f2:	059a      	lsls	r2, r3, #22
 800d2f4:	d4ee      	bmi.n	800d2d4 <__smakebuf_r+0x18>
 800d2f6:	f023 0303 	bic.w	r3, r3, #3
 800d2fa:	f043 0302 	orr.w	r3, r3, #2
 800d2fe:	81a3      	strh	r3, [r4, #12]
 800d300:	e7e2      	b.n	800d2c8 <__smakebuf_r+0xc>
 800d302:	89a3      	ldrh	r3, [r4, #12]
 800d304:	6020      	str	r0, [r4, #0]
 800d306:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d30a:	81a3      	strh	r3, [r4, #12]
 800d30c:	9b01      	ldr	r3, [sp, #4]
 800d30e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d312:	b15b      	cbz	r3, 800d32c <__smakebuf_r+0x70>
 800d314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d318:	4630      	mov	r0, r6
 800d31a:	f000 f84d 	bl	800d3b8 <_isatty_r>
 800d31e:	b128      	cbz	r0, 800d32c <__smakebuf_r+0x70>
 800d320:	89a3      	ldrh	r3, [r4, #12]
 800d322:	f023 0303 	bic.w	r3, r3, #3
 800d326:	f043 0301 	orr.w	r3, r3, #1
 800d32a:	81a3      	strh	r3, [r4, #12]
 800d32c:	89a3      	ldrh	r3, [r4, #12]
 800d32e:	431d      	orrs	r5, r3
 800d330:	81a5      	strh	r5, [r4, #12]
 800d332:	e7cf      	b.n	800d2d4 <__smakebuf_r+0x18>

0800d334 <_raise_r>:
 800d334:	291f      	cmp	r1, #31
 800d336:	b538      	push	{r3, r4, r5, lr}
 800d338:	4605      	mov	r5, r0
 800d33a:	460c      	mov	r4, r1
 800d33c:	d904      	bls.n	800d348 <_raise_r+0x14>
 800d33e:	2316      	movs	r3, #22
 800d340:	6003      	str	r3, [r0, #0]
 800d342:	f04f 30ff 	mov.w	r0, #4294967295
 800d346:	bd38      	pop	{r3, r4, r5, pc}
 800d348:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d34a:	b112      	cbz	r2, 800d352 <_raise_r+0x1e>
 800d34c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d350:	b94b      	cbnz	r3, 800d366 <_raise_r+0x32>
 800d352:	4628      	mov	r0, r5
 800d354:	f000 f852 	bl	800d3fc <_getpid_r>
 800d358:	4622      	mov	r2, r4
 800d35a:	4601      	mov	r1, r0
 800d35c:	4628      	mov	r0, r5
 800d35e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d362:	f000 b839 	b.w	800d3d8 <_kill_r>
 800d366:	2b01      	cmp	r3, #1
 800d368:	d00a      	beq.n	800d380 <_raise_r+0x4c>
 800d36a:	1c59      	adds	r1, r3, #1
 800d36c:	d103      	bne.n	800d376 <_raise_r+0x42>
 800d36e:	2316      	movs	r3, #22
 800d370:	6003      	str	r3, [r0, #0]
 800d372:	2001      	movs	r0, #1
 800d374:	e7e7      	b.n	800d346 <_raise_r+0x12>
 800d376:	2100      	movs	r1, #0
 800d378:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d37c:	4620      	mov	r0, r4
 800d37e:	4798      	blx	r3
 800d380:	2000      	movs	r0, #0
 800d382:	e7e0      	b.n	800d346 <_raise_r+0x12>

0800d384 <raise>:
 800d384:	4b02      	ldr	r3, [pc, #8]	@ (800d390 <raise+0xc>)
 800d386:	4601      	mov	r1, r0
 800d388:	6818      	ldr	r0, [r3, #0]
 800d38a:	f7ff bfd3 	b.w	800d334 <_raise_r>
 800d38e:	bf00      	nop
 800d390:	20000064 	.word	0x20000064

0800d394 <_fstat_r>:
 800d394:	b538      	push	{r3, r4, r5, lr}
 800d396:	4d07      	ldr	r5, [pc, #28]	@ (800d3b4 <_fstat_r+0x20>)
 800d398:	2300      	movs	r3, #0
 800d39a:	4604      	mov	r4, r0
 800d39c:	4608      	mov	r0, r1
 800d39e:	4611      	mov	r1, r2
 800d3a0:	602b      	str	r3, [r5, #0]
 800d3a2:	f7f6 fd11 	bl	8003dc8 <_fstat>
 800d3a6:	1c43      	adds	r3, r0, #1
 800d3a8:	d102      	bne.n	800d3b0 <_fstat_r+0x1c>
 800d3aa:	682b      	ldr	r3, [r5, #0]
 800d3ac:	b103      	cbz	r3, 800d3b0 <_fstat_r+0x1c>
 800d3ae:	6023      	str	r3, [r4, #0]
 800d3b0:	bd38      	pop	{r3, r4, r5, pc}
 800d3b2:	bf00      	nop
 800d3b4:	20000f98 	.word	0x20000f98

0800d3b8 <_isatty_r>:
 800d3b8:	b538      	push	{r3, r4, r5, lr}
 800d3ba:	4d06      	ldr	r5, [pc, #24]	@ (800d3d4 <_isatty_r+0x1c>)
 800d3bc:	2300      	movs	r3, #0
 800d3be:	4604      	mov	r4, r0
 800d3c0:	4608      	mov	r0, r1
 800d3c2:	602b      	str	r3, [r5, #0]
 800d3c4:	f7f6 fd10 	bl	8003de8 <_isatty>
 800d3c8:	1c43      	adds	r3, r0, #1
 800d3ca:	d102      	bne.n	800d3d2 <_isatty_r+0x1a>
 800d3cc:	682b      	ldr	r3, [r5, #0]
 800d3ce:	b103      	cbz	r3, 800d3d2 <_isatty_r+0x1a>
 800d3d0:	6023      	str	r3, [r4, #0]
 800d3d2:	bd38      	pop	{r3, r4, r5, pc}
 800d3d4:	20000f98 	.word	0x20000f98

0800d3d8 <_kill_r>:
 800d3d8:	b538      	push	{r3, r4, r5, lr}
 800d3da:	4d07      	ldr	r5, [pc, #28]	@ (800d3f8 <_kill_r+0x20>)
 800d3dc:	2300      	movs	r3, #0
 800d3de:	4604      	mov	r4, r0
 800d3e0:	4608      	mov	r0, r1
 800d3e2:	4611      	mov	r1, r2
 800d3e4:	602b      	str	r3, [r5, #0]
 800d3e6:	f7f6 fc8f 	bl	8003d08 <_kill>
 800d3ea:	1c43      	adds	r3, r0, #1
 800d3ec:	d102      	bne.n	800d3f4 <_kill_r+0x1c>
 800d3ee:	682b      	ldr	r3, [r5, #0]
 800d3f0:	b103      	cbz	r3, 800d3f4 <_kill_r+0x1c>
 800d3f2:	6023      	str	r3, [r4, #0]
 800d3f4:	bd38      	pop	{r3, r4, r5, pc}
 800d3f6:	bf00      	nop
 800d3f8:	20000f98 	.word	0x20000f98

0800d3fc <_getpid_r>:
 800d3fc:	f7f6 bc7c 	b.w	8003cf8 <_getpid>

0800d400 <_init>:
 800d400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d402:	bf00      	nop
 800d404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d406:	bc08      	pop	{r3}
 800d408:	469e      	mov	lr, r3
 800d40a:	4770      	bx	lr

0800d40c <_fini>:
 800d40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d40e:	bf00      	nop
 800d410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d412:	bc08      	pop	{r3}
 800d414:	469e      	mov	lr, r3
 800d416:	4770      	bx	lr
